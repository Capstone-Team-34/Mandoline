kellinwood.zipio.ZioEntryInputStream extends java.io.InputStream
boolean debug
kellinwood.logging.LoggerInterface log
java.io.OutputStream monitor
int offset
java.io.RandomAccessFile raf
boolean returnDummyByte
int size
    public void <init>(kellinwood.zipio.ZioEntry) throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        kellinwood.zipio.ZioEntry $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        kellinwood.logging.LoggerInterface $r4;
        boolean $z0;
        int $i0;
        kellinwood.zipio.ZipInput $r5;
        java.io.RandomAccessFile $r6;
        long $l1;
        byte $b2;
        java.lang.Object[] $r7;
        java.lang.Long $r8;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $r1 := @parameter0: kellinwood.zipio.ZioEntry;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte> = 0;

        r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor> = null;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerInterface getLogger(java.lang.String)>($r3);

        r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log> = $r4;

        $r4 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        $z0 = interfaceinvoke $r4.<kellinwood.logging.LoggerInterface: boolean isDebugEnabled()>();

        r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug> = $z0;

        r0.<kellinwood.zipio.ZioEntryInputStream: int offset> = 0;

        $i0 = virtualinvoke $r1.<kellinwood.zipio.ZioEntry: int getCompressedSize()>();

        r0.<kellinwood.zipio.ZioEntryInputStream: int size> = $i0;

        $r5 = virtualinvoke $r1.<kellinwood.zipio.ZioEntry: kellinwood.zipio.ZipInput getZipInput()>();

        $r6 = $r5.<kellinwood.zipio.ZipInput: java.io.RandomAccessFile in>;

        r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf> = $r6;

        $l1 = virtualinvoke $r1.<kellinwood.zipio.ZioEntry: long getDataPosition()>();

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label2;

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        $r7 = newarray (java.lang.Object)[1];

        $l1 = virtualinvoke $r1.<kellinwood.zipio.ZioEntry: long getDataPosition()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r7[0] = $r8;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Seeking to %d", $r7);

        interfaceinvoke $r4.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>($r3);

     label1:
        $r6 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf>;

        $l1 = virtualinvoke $r1.<kellinwood.zipio.ZioEntry: long getDataPosition()>();

        virtualinvoke $r6.<java.io.RandomAccessFile: void seek(long)>($l1);

        return;

     label2:
        virtualinvoke $r1.<kellinwood.zipio.ZioEntry: void readLocalHeader()>();

        return;
    }
    private int readBytes(byte[], int, int) throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.RandomAccessFile $r2;
        java.io.OutputStream $r3;
        kellinwood.logging.LoggerInterface $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<kellinwood.zipio.ZioEntryInputStream: int size>;

        $i3 = r0.<kellinwood.zipio.ZioEntryInputStream: int offset>;

        $i2 = $i2 - $i3;

        if $i2 != 0 goto label2;

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte>;

        if $z0 == 0 goto label1;

        r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte> = 0;

        $r1[$i0] = 0;

        return 1;

     label1:
        return -1;

     label2:
        $i2 = virtualinvoke r0.<kellinwood.zipio.ZioEntryInputStream: int available()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf>;

        $i2 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>($r1, $i0, $i2);

        if $i2 <= 0 goto label4;

        $r3 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor>;

        if $r3 == null goto label3;

        $r3 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i2);

     label3:
        $i3 = r0.<kellinwood.zipio.ZioEntryInputStream: int offset>;

        $i3 = $i3 + $i2;

        r0.<kellinwood.zipio.ZioEntryInputStream: int offset> = $i3;

     label4:
        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label5;

        $r4 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Read %d bytes for read(b,%d,%d)", $r5);

        interfaceinvoke $r4.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>($r7);

     label5:
        return $i2;
    }
    public int available() throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        boolean $z0;
        kellinwood.logging.LoggerInterface $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $i0 = r0.<kellinwood.zipio.ZioEntryInputStream: int size>;

        $i1 = r0.<kellinwood.zipio.ZioEntryInputStream: int offset>;

        $i0 = $i0 - $i1;

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label1;

        $r2 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Available = %d", $r1);

        interfaceinvoke $r2.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>($r4);

     label1:
        if $i0 != 0 goto label2;

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return $i0;
    }
    public void close() throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        return;
    }
    public boolean markSupported()
    {
        kellinwood.zipio.ZioEntryInputStream r0;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        return 0;
    }
    public int read() throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        int $i0, $i1;
        boolean $z0;
        java.io.RandomAccessFile $r1;
        java.io.OutputStream $r2;
        kellinwood.logging.LoggerInterface $r3;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $i0 = r0.<kellinwood.zipio.ZioEntryInputStream: int size>;

        $i1 = r0.<kellinwood.zipio.ZioEntryInputStream: int offset>;

        $i0 = $i0 - $i1;

        if $i0 != 0 goto label2;

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte>;

        if $z0 == 0 goto label1;

        r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte> = 0;

        return 0;

     label1:
        return -1;

     label2:
        $r1 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf>;

        $i0 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        if $i0 < 0 goto label5;

        $r2 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor>;

        if $r2 == null goto label3;

        $r2 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

     label3:
        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label4;

        $r3 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        interfaceinvoke $r3.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>("Read 1 byte");

     label4:
        $i1 = r0.<kellinwood.zipio.ZioEntryInputStream: int offset>;

        $i1 = $i1 + 1;

        r0.<kellinwood.zipio.ZioEntryInputStream: int offset> = $i1;

        return $i0;

     label5:
        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label6;

        $r3 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        interfaceinvoke $r3.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>("Read 0 bytes");

     label6:
        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = specialinvoke r0.<kellinwood.zipio.ZioEntryInputStream: int readBytes(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = specialinvoke r0.<kellinwood.zipio.ZioEntryInputStream: int readBytes(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
    public void setMonitorStream(java.io.OutputStream)
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $r1 := @parameter0: java.io.OutputStream;

        r0.<kellinwood.zipio.ZioEntryInputStream: java.io.OutputStream monitor> = $r1;

        return;
    }
    public void setReturnDummyByte(boolean)
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        boolean $z0;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $z0 := @parameter0: boolean;

        r0.<kellinwood.zipio.ZioEntryInputStream: boolean returnDummyByte> = $z0;

        return;
    }
    public long skip(long) throws java.io.IOException
    {
        kellinwood.zipio.ZioEntryInputStream r0;
        long $l0, $l2;
        int $i1;
        java.io.RandomAccessFile $r1, $r2;
        boolean $z0;
        kellinwood.logging.LoggerInterface $r3;
        java.lang.Object[] $r4;
        java.lang.Long $r5;
        java.lang.String $r6;

        r0 := @this: kellinwood.zipio.ZioEntryInputStream;

        $l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<kellinwood.zipio.ZioEntryInputStream: int available()>();

        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $r1 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf>;

        $r2 = r0.<kellinwood.zipio.ZioEntryInputStream: java.io.RandomAccessFile raf>;

        $l2 = virtualinvoke $r2.<java.io.RandomAccessFile: long getFilePointer()>();

        $l2 = $l2 + $l0;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l2);

        $z0 = r0.<kellinwood.zipio.ZioEntryInputStream: boolean debug>;

        if $z0 == 0 goto label1;

        $r3 = r0.<kellinwood.zipio.ZioEntryInputStream: kellinwood.logging.LoggerInterface log>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipped %d bytes", $r4);

        interfaceinvoke $r3.<kellinwood.logging.LoggerInterface: void debug(java.lang.String)>($r6);

     label1:
        return $l0;
    }
