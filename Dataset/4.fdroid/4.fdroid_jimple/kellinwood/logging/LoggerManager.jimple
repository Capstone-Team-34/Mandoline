kellinwood.logging.LoggerManager extends java.lang.Object
static kellinwood.logging.LoggerFactory factory
static java.util.Map loggers
    static void <clinit>()
    {
        kellinwood.logging.NullLoggerFactory $r0;
        java.util.TreeMap $r1;

        $r0 = new kellinwood.logging.NullLoggerFactory;

        specialinvoke $r0.<kellinwood.logging.NullLoggerFactory: void <init>()>();

        <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerFactory factory> = $r0;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        <kellinwood.logging.LoggerManager: java.util.Map loggers> = $r1;

        return;
    }
    public static kellinwood.logging.LoggerInterface getLogger(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        kellinwood.logging.LoggerInterface r3;
        kellinwood.logging.LoggerFactory $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 = <kellinwood.logging.LoggerManager: java.util.Map loggers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (kellinwood.logging.LoggerInterface) $r2;

        if r3 != null goto label1;

        $r4 = <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerFactory factory>;

        r3 = interfaceinvoke $r4.<kellinwood.logging.LoggerFactory: kellinwood.logging.LoggerInterface getLogger(java.lang.String)>($r0);

        $r1 = <kellinwood.logging.LoggerManager: java.util.Map loggers>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r3);

     label1:
        return r3;
    }
