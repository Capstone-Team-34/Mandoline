kellinwood.security.zipsigner.Base64 extends java.lang.Object
static java.lang.reflect.Method aDecodeMethod
static java.lang.reflect.Method aEncodeMethod
static java.lang.reflect.Method bDecodeMethod
static java.lang.Object bDecoder
static java.lang.reflect.Method bEncodeMethod
static java.lang.Object bEncoder
static kellinwood.logging.LoggerInterface logger
    static void <clinit>()
    {
        java.lang.Class $r0, $r4;
        java.lang.String $r1;
        kellinwood.logging.LoggerInterface $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r5;
        java.lang.StringBuilder $r6;
        java.lang.Object $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Exception r9, r10;
        java.lang.ClassNotFoundException $r11, $r12;

        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aEncodeMethod> = null;

        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aDecodeMethod> = null;

        <kellinwood.security.zipsigner.Base64: java.lang.Object bEncoder> = null;

        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bEncodeMethod> = null;

        <kellinwood.security.zipsigner.Base64: java.lang.Object bDecoder> = null;

        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bDecodeMethod> = null;

        <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger> = null;

        $r0 = class "Lkellinwood/security/zipsigner/Base64;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerInterface getLogger(java.lang.String)>($r1);

        <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger> = $r2;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.util.Base64");

     label02:
        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "[B";

     label03:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label04:
        $r3[1] = $r4;

     label05:
        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("encode", $r3);

     label06:
        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aEncodeMethod> = $r5;

     label07:
        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "[B";

     label08:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label09:
        $r3[1] = $r4;

     label10:
        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("decode", $r3);

     label11:
        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aDecodeMethod> = $r5;

        $r2 = <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger>;

        $r6 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is available.");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<kellinwood.logging.LoggerInterface: void info(java.lang.String)>($r1);

     label13:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.util.encoders.Base64Encoder");

        $r7 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label14:
        <kellinwood.security.zipsigner.Base64: java.lang.Object bEncoder> = $r7;

     label15:
        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "[B";

     label16:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label17:
        $r3[1] = $r4;

     label18:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label19:
        $r3[2] = $r4;

        $r3[3] = class "Ljava/io/OutputStream;";

     label20:
        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("encode", $r3);

     label21:
        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bEncodeMethod> = $r5;

        $r2 = <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger>;

        $r6 = new java.lang.StringBuilder;

     label22:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is available.");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<kellinwood.logging.LoggerInterface: void info(java.lang.String)>($r1);

     label23:
        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "[B";

     label24:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label25:
        $r3[1] = $r4;

     label26:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

     label27:
        $r3[2] = $r4;

        $r3[3] = class "Ljava/io/OutputStream;";

     label28:
        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("decode", $r3);

     label29:
        <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bDecodeMethod> = $r5;

     label30:
        $r5 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aEncodeMethod>;

        if $r5 != null goto label33;

        $r5 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bEncodeMethod>;

        if $r5 != null goto label36;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No base64 encoder implementation is available.");

        throw $r8;

     label31:
        r9 := @caughtexception;

        $r2 = <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger>;

        interfaceinvoke $r2.<kellinwood.logging.LoggerInterface: void error(java.lang.String,java.lang.Throwable)>("Failed to initialize use of android.util.Base64", r9);

        goto label13;

     label32:
        r10 := @caughtexception;

        $r2 = <kellinwood.security.zipsigner.Base64: kellinwood.logging.LoggerInterface logger>;

        interfaceinvoke $r2.<kellinwood.logging.LoggerInterface: void error(java.lang.String,java.lang.Throwable)>("Failed to initialize use of org.bouncycastle.util.encoders.Base64Encoder", r10);

        goto label30;

     label33:
        return;

     label34:
        $r11 := @caughtexception;

        goto label30;

     label35:
        $r12 := @caughtexception;

        goto label13;

     label36:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label35;
        catch java.lang.ClassNotFoundException from label05 to label06 with label35;
        catch java.lang.ClassNotFoundException from label10 to label11 with label35;
        catch java.lang.ClassNotFoundException from label12 to label13 with label35;
        catch java.lang.Exception from label01 to label03 with label31;
        catch java.lang.Exception from label04 to label06 with label31;
        catch java.lang.Exception from label07 to label08 with label31;
        catch java.lang.Exception from label09 to label11 with label31;
        catch java.lang.Exception from label12 to label13 with label31;
        catch java.lang.ClassNotFoundException from label13 to label14 with label34;
        catch java.lang.ClassNotFoundException from label20 to label21 with label34;
        catch java.lang.ClassNotFoundException from label22 to label23 with label34;
        catch java.lang.ClassNotFoundException from label28 to label29 with label34;
        catch java.lang.Exception from label13 to label14 with label32;
        catch java.lang.Exception from label15 to label16 with label32;
        catch java.lang.Exception from label17 to label18 with label32;
        catch java.lang.Exception from label19 to label21 with label32;
        catch java.lang.Exception from label22 to label24 with label32;
        catch java.lang.Exception from label25 to label26 with label32;
        catch java.lang.Exception from label27 to label29 with label32;
    }
    public void <init>()
    {
        kellinwood.security.zipsigner.Base64 r0;

        r0 := @this: kellinwood.security.zipsigner.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] decode(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayOutputStream r1;
        java.lang.Exception r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Class $r9;
        java.lang.String $r10;

        $r0 := @parameter0: byte[];

        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aDecodeMethod>;

        if $r3 == null goto label3;

        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aDecodeMethod>;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4[1] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r0 = (byte[]) $r6;

     label2:
        return $r0;

     label3:
        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bDecodeMethod>;

        if $r3 == null goto label9;

        r1 = new java.io.ByteArrayOutputStream;

     label4:
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label5:
        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bDecodeMethod>;

        $r6 = <kellinwood.security.zipsigner.Base64: java.lang.Object bEncoder>;

     label6:
        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4[1] = $r5;

        $i0 = lengthof $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[2] = $r5;

        $r4[3] = r1;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r4);

        $r0 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label7:
        return $r0;

     label8:
        r2 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label9:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No base64 encoder implementation is available.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }
    public static java.lang.String encode(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayOutputStream r1;
        java.lang.Exception r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        java.lang.String $r7;
        int $i0;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9;
        java.lang.Class $r10;

        $r0 := @parameter0: byte[];

        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aEncodeMethod>;

        if $r3 == null goto label05;

        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method aEncodeMethod>;

     label01:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4[1] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r0 = (byte[]) $r6;

     label02:
        $r7 = new java.lang.String;

     label03:
        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r0);

     label04:
        return $r7;

     label05:
        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bEncodeMethod>;

        if $r3 == null goto label13;

        r1 = new java.io.ByteArrayOutputStream;

     label06:
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label07:
        $r3 = <kellinwood.security.zipsigner.Base64: java.lang.reflect.Method bEncodeMethod>;

        $r6 = <kellinwood.security.zipsigner.Base64: java.lang.Object bEncoder>;

     label08:
        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4[1] = $r5;

        $i0 = lengthof $r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[2] = $r5;

        $r4[3] = r1;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r4);

     label09:
        $r7 = new java.lang.String;

     label10:
        $r0 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r0);

     label11:
        return $r7;

     label12:
        r2 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label13:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No base64 encoder implementation is available.");

        throw $r8;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
