kellinwood.security.zipsigner.optional.JKS extends java.security.KeyStoreSpi
private static final int MAGIC
private static final int PRIVATE_KEY
private static final int TRUSTED_CERT
private final java.util.Vector aliases
private final java.util.HashMap certChains
private final java.util.HashMap dates
private final java.util.HashMap privateKeys
private final java.util.HashMap trustedCerts
    public void <init>()
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.util.Vector $r1;
        java.util.HashMap $r2;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        specialinvoke r0.<java.security.KeyStoreSpi: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates> = $r2;

        return;
    }
    private static byte[] charsToBytes(char[])
    {
        char[] $r0;
        byte[] r1;
        int i0, $i1, i2, $i4;
        char $c3;
        byte $b5;

        $r0 := @parameter0: char[];

        $i1 = lengthof $r0;

        $i1 = $i1 * 2;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        i0 = lengthof $r0;

        if $i1 >= i0 goto label2;

        i0 = i2 + 1;

        $c3 = $r0[$i1];

        $i4 = $c3 >>> 8;

        $b5 = (byte) $i4;

        r1[i2] = $b5;

        i2 = i0 + 1;

        $c3 = $r0[$i1];

        $b5 = (byte) $c3;

        r1[i0] = $b5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    private static byte[] decryptKey(byte[], byte[]) throws java.security.UnrecoverableKeyException
    {
        byte[] $r0, $r1, r3, r4, $r6;
        javax.crypto.EncryptedPrivateKeyInfo r2;
        java.lang.Exception r5;
        int $i0, $i1, $i2;
        java.security.MessageDigest $r7;
        byte $b3, $b4;
        boolean $z0;
        java.security.UnrecoverableKeyException $r8;
        java.lang.String $r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        r2 = new javax.crypto.EncryptedPrivateKeyInfo;

     label01:
        specialinvoke r2.<javax.crypto.EncryptedPrivateKeyInfo: void <init>(byte[])>($r0);

        $r6 = virtualinvoke r2.<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()>();

        r4 = newarray (byte)[20];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, 0, 20);

        $r0 = newarray (byte)[20];

        $i0 = lengthof $r6;

     label02:
        $i0 = $i0 + -20;

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i0, $r0, 0, 20);

        $i0 = lengthof $r6;

     label04:
        $i0 = $i0 + -40;

     label05:
        r3 = newarray (byte)[$i0];

        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

     label06:
        $i0 = 0;

     label07:
        $i1 = lengthof r3;

     label08:
        if $i0 >= $i1 goto label21;

     label09:
        virtualinvoke $r7.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r1);

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>(r4);

        $i1 = lengthof r4;

        virtualinvoke $r7.<java.security.MessageDigest: int digest(byte[],int,int)>(r4, 0, $i1);

     label10:
        $i1 = 0;

     label11:
        $i2 = lengthof r4;

     label12:
        if $i1 >= $i2 goto label07;

     label13:
        $i2 = lengthof r3;

     label14:
        if $i0 >= $i2 goto label07;

     label15:
        $b3 = r4[$i1];

     label16:
        $i2 = $i0 + 20;

     label17:
        $b4 = $r6[$i2];

     label18:
        $i2 = $b3 ^ $b4;

        $b3 = (byte) $i2;

     label19:
        r3[$i0] = $b3;

     label20:
        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label11;

     label21:
        virtualinvoke $r7.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r1);

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>(r3);

        $r1 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>($r0, $r1);

     label22:
        if $z0 != 0 goto label25;

        $r8 = new java.security.UnrecoverableKeyException;

     label23:
        specialinvoke $r8.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>("checksum mismatch");

        throw $r8;

     label24:
        r5 := @caughtexception;

        $r8 = new java.security.UnrecoverableKeyException;

        $r9 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label25:
        return r3;

        catch java.lang.Exception from label01 to label02 with label24;
        catch java.lang.Exception from label03 to label04 with label24;
        catch java.lang.Exception from label05 to label06 with label24;
        catch java.lang.Exception from label07 to label08 with label24;
        catch java.lang.Exception from label09 to label10 with label24;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.lang.Exception from label13 to label14 with label24;
        catch java.lang.Exception from label15 to label16 with label24;
        catch java.lang.Exception from label17 to label18 with label24;
        catch java.lang.Exception from label19 to label20 with label24;
        catch java.lang.Exception from label21 to label22 with label24;
        catch java.lang.Exception from label23 to label24 with label24;
    }
    private static byte[] encryptKey(java.security.Key, byte[]) throws java.security.KeyStoreException
    {
        java.security.Key $r0;
        byte[] $r1, r2, $r5, $r6;
        java.lang.Exception r3;
        java.security.MessageDigest $r4;
        int $i0, $i1, $i2, $i5;
        byte $b3, $b4;
        javax.crypto.EncryptedPrivateKeyInfo $r7;
        java.security.KeyStoreException $r8;
        java.lang.String $r9;

        $r0 := @parameter0: java.security.Key;

        $r1 := @parameter1: byte[];

     label01:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

        staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        $r5 = interfaceinvoke $r0.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r5;

     label02:
        $i0 = $i0 + 40;

     label03:
        r2 = newarray (byte)[$i0];

        $r6 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(20);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, 20);

     label04:
        $i0 = 0;

     label05:
        $i1 = lengthof $r5;

     label06:
        if $i0 >= $i1 goto label17;

     label07:
        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r6);

        $i1 = lengthof $r6;

        virtualinvoke $r4.<java.security.MessageDigest: int digest(byte[],int,int)>($r6, 0, $i1);

     label08:
        $i1 = 0;

     label09:
        $i2 = lengthof $r6;

     label10:
        if $i1 >= $i2 goto label05;

     label11:
        $i2 = lengthof $r5;

     label12:
        if $i0 >= $i2 goto label05;

        $i2 = $i0 + 20;

     label13:
        $b3 = $r6[$i1];

        $b4 = $r5[$i0];

     label14:
        $i5 = $b3 ^ $b4;

        $b3 = (byte) $i5;

     label15:
        r2[$i2] = $b3;

     label16:
        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label09;

     label17:
        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r5);

        $i0 = lengthof r2;

     label18:
        $i0 = $i0 + -20;

     label19:
        virtualinvoke $r4.<java.security.MessageDigest: int digest(byte[],int,int)>(r2, $i0, 20);

     label20:
        $r7 = new javax.crypto.EncryptedPrivateKeyInfo;

     label21:
        specialinvoke $r7.<javax.crypto.EncryptedPrivateKeyInfo: void <init>(java.lang.String,byte[])>("1.3.6.1.4.1.42.2.17.1.1", r2);

        $r1 = virtualinvoke $r7.<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()>();

     label22:
        return $r1;

     label23:
        r3 := @caughtexception;

        $r8 = new java.security.KeyStoreException;

        $r9 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<java.security.KeyStoreException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Exception from label01 to label02 with label23;
        catch java.lang.Exception from label03 to label04 with label23;
        catch java.lang.Exception from label05 to label06 with label23;
        catch java.lang.Exception from label07 to label08 with label23;
        catch java.lang.Exception from label09 to label10 with label23;
        catch java.lang.Exception from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label23;
        catch java.lang.Exception from label15 to label16 with label23;
        catch java.lang.Exception from label17 to label18 with label23;
        catch java.lang.Exception from label19 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }
    private static java.security.cert.Certificate readCert(java.io.DataInputStream) throws java.io.IOException, java.security.cert.CertificateException, java.security.NoSuchAlgorithmException
    {
        java.io.DataInputStream $r0;
        byte[] r1;
        java.lang.String $r2;
        int $i0;
        java.security.cert.CertificateFactory $r3;
        java.io.ByteArrayInputStream $r4;
        java.security.cert.Certificate $r5;

        $r0 := @parameter0: java.io.DataInputStream;

        $r2 = virtualinvoke $r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i0 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[$i0];

        virtualinvoke $r0.<java.io.DataInputStream: int read(byte[])>(r1);

        $r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>($r2);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r5 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r4);

        return $r5;
    }
    private static void writeCert(java.io.DataOutputStream, java.security.cert.Certificate) throws java.io.IOException, java.security.cert.CertificateException
    {
        java.io.DataOutputStream $r0;
        java.security.cert.Certificate $r1;
        java.lang.String $r2;
        byte[] $r3;
        int $i0;

        $r0 := @parameter0: java.io.DataOutputStream;

        $r1 := @parameter1: java.security.cert.Certificate;

        $r2 = virtualinvoke $r1.<java.security.cert.Certificate: java.lang.String getType()>();

        virtualinvoke $r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.security.cert.Certificate: byte[] getEncoded()>();

        $i0 = lengthof $r3;

        virtualinvoke $r0.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r0.<java.io.DataOutputStream: void write(byte[])>($r3);

        return;
    }
    public java.util.Enumeration engineAliases()
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.util.Enumeration $r1;
        java.util.Vector $r2;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }
    public boolean engineContainsAlias(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        java.util.Vector $r2;
        boolean $z0;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.util.Vector $r1;
        java.lang.String $r2;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r2 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r1.<java.util.Vector: boolean remove(java.lang.Object)>($r2);

        return;
    }
    public java.security.cert.Certificate engineGetCertificate(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.security.cert.Certificate[] $r4;
        int $i0;
        java.security.cert.Certificate $r5;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r0.<kellinwood.security.zipsigner.optional.JKS: boolean engineIsKeyEntry(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.security.cert.Certificate[]) $r3;

        if $r4 == null goto label1;

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label1;

        $r5 = $r4[0];

        return $r5;

     label1:
        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.security.cert.Certificate) $r3;

        return $r5;
    }
    public java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.security.cert.Certificate $r1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String r6;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.security.cert.Certificate;

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $r5 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $z0 = virtualinvoke $r1.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return r6;

     label2:
        return null;
    }
    public java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.security.cert.Certificate[] $r4;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.security.cert.Certificate[]) $r3;

        return $r4;
    }
    public java.util.Date engineGetCreationDate(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.util.Date $r4;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.util.Date) $r3;

        return $r4;
    }
    public java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        char[] $r1;
        java.security.spec.InvalidKeySpecException r2;
        java.lang.String $r3;
        java.util.HashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte[] $r6, $r7;
        java.security.cert.Certificate[] $r8;
        int $i0;
        java.security.cert.Certificate $r9;
        java.security.PublicKey $r10;
        java.security.KeyFactory $r11;
        java.security.spec.PKCS8EncodedKeySpec $r12;
        java.security.PrivateKey $r13;
        java.security.UnrecoverableKeyException $r14;
        javax.crypto.spec.SecretKeySpec $r15;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = (byte[]) $r5;

        $r7 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] charsToBytes(char[])>($r1);

        $r6 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] decryptKey(byte[],byte[])>($r6, $r7);

        $r8 = virtualinvoke r0.<kellinwood.security.zipsigner.optional.JKS: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)>($r3);

        $i0 = lengthof $r8;

        if $i0 <= 0 goto label7;

        $r9 = $r8[0];

     label2:
        $r10 = virtualinvoke $r9.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $r3 = interfaceinvoke $r10.<java.security.PublicKey: java.lang.String getAlgorithm()>();

        $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r3);

     label3:
        $r12 = new java.security.spec.PKCS8EncodedKeySpec;

     label4:
        specialinvoke $r12.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r6);

        $r13 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r12);

     label5:
        return $r13;

     label6:
        r2 := @caughtexception;

        $r14 = new java.security.UnrecoverableKeyException;

        $r3 = virtualinvoke r2.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r3);

        throw $r14;

     label7:
        $r15 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r15.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r3);

        return $r15;

        catch java.security.spec.InvalidKeySpecException from label2 to label3 with label6;
        catch java.security.spec.InvalidKeySpecException from label4 to label5 with label6;
    }
    public boolean engineIsCertificateEntry(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean engineIsKeyEntry(java.lang.String)
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.io.InputStream $r1;
        char[] $r2;
        java.security.cert.Certificate[] r3;
        java.io.DataInputStream r4;
        byte[] r5, $r15;
        java.security.MessageDigest $r6;
        java.lang.String $r7;
        java.util.Vector $r8;
        java.util.HashMap $r9;
        java.security.DigestInputStream $r10;
        int $i0, i1, $i2, i4;
        java.io.IOException $r11;
        kellinwood.security.zipsigner.optional.LoadKeystoreException $r12;
        java.util.Date $r13;
        long $l3;
        java.security.cert.Certificate $r14;
        boolean $z0;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: char[];

        $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

        if $r2 == null goto label01;

        r5 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] charsToBytes(char[])>($r2);

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>(r5);

     label01:
        $r7 = "Mighty Aphrodite";

        r5 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[])>(r5);

        $r8 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r8.<java.util.Vector: void clear()>();

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        if $r1 != null goto label02;

        return;

     label02:
        r4 = new java.io.DataInputStream;

        $r10 = new java.security.DigestInputStream;

        specialinvoke $r10.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r1, $r6);

        specialinvoke r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r10);

        $i0 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        if $i0 == -17957139 goto label03;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("not a JavaKeyStore");

        throw $r11;

     label03:
        virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        $i0 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        $r8 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r8.<java.util.Vector: void ensureCapacity(int)>($i0);

        if $i0 >= 0 goto label04;

        $r12 = new kellinwood.security.zipsigner.optional.LoadKeystoreException;

        specialinvoke $r12.<kellinwood.security.zipsigner.optional.LoadKeystoreException: void <init>(java.lang.String)>("Malformed key store");

        throw $r12;

     label04:
        i1 = 0;

     label05:
        if i1 >= $i0 goto label12;

        $i2 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        $r7 = virtualinvoke r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r8 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r13 = new java.util.Date;

        $l3 = virtualinvoke r4.<java.io.DataInputStream: long readLong()>();

        specialinvoke $r13.<java.util.Date: void <init>(long)>($l3);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

        lookupswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label11;
            default: goto label06;
        };

     label06:
        $r12 = new kellinwood.security.zipsigner.optional.LoadKeystoreException;

        specialinvoke $r12.<kellinwood.security.zipsigner.optional.LoadKeystoreException: void <init>(java.lang.String)>("Malformed key store");

        throw $r12;

     label07:
        $i2 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        r5 = newarray (byte)[$i2];

        virtualinvoke r4.<java.io.DataInputStream: int read(byte[])>(r5);

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r5);

        $i2 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        r3 = newarray (java.security.cert.Certificate)[$i2];

        i4 = 0;

     label08:
        if i4 >= $i2 goto label09;

        $r14 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: java.security.cert.Certificate readCert(java.io.DataInputStream)>(r4);

        r3[i4] = $r14;

        i4 = i4 + 1;

        goto label08;

     label09:
        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r3);

     label10:
        i1 = i1 + 1;

        goto label05;

     label11:
        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $r14 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: java.security.cert.Certificate readCert(java.io.DataInputStream)>(r4);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r14);

        goto label10;

     label12:
        if $r2 == null goto label13;

        $r15 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>();

        r5 = newarray (byte)[20];

        virtualinvoke r4.<java.io.DataInputStream: int read(byte[])>(r5);

        $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r5, $r15);

        if $z0 != 0 goto label13;

        $r12 = new kellinwood.security.zipsigner.optional.LoadKeystoreException;

        specialinvoke $r12.<kellinwood.security.zipsigner.optional.LoadKeystoreException: void <init>(java.lang.String)>("Incorrect password, or integrity check failed.");

        throw $r12;

     label13:
        return;
    }
    public void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.security.cert.Certificate $r1;
        java.lang.String $r2;
        java.util.HashMap $r3;
        boolean $z0;
        java.security.KeyStoreException $r4;
        java.lang.StringBuilder $r5;
        java.lang.NullPointerException $r6;
        java.util.Vector $r7;
        java.util.Date $r8;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.cert.Certificate;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new java.security.KeyStoreException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is a private key entry");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.KeyStoreException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label1:
        if $r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label2:
        $r3 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r7 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $z0 = virtualinvoke $r7.<java.util.Vector: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        $r3 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r7 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r7.<java.util.Vector: boolean add(java.lang.Object)>($r2);

     label3:
        return;
    }
    public void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.security.Key $r1;
        char[] $r2;
        java.security.cert.Certificate[] $r3;
        java.lang.String $r4;
        java.util.HashMap $r5;
        boolean $z0;
        java.security.KeyStoreException $r6;
        java.lang.StringBuilder $r7;
        byte[] $r8;
        java.util.Vector $r9;
        java.util.Date $r10;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: char[];

        $r3 := @parameter3: java.security.cert.Certificate[];

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r6 = new java.security.KeyStoreException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a trusted certificate entry");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label1:
        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $r8 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] charsToBytes(char[])>($r2);

        $r8 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] encryptKey(java.security.Key,byte[])>($r1, $r8);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r8);

        if $r3 == null goto label3;

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

     label2:
        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $z0 = virtualinvoke $r9.<java.util.Vector: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r10);

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r9.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        return;

     label3:
        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        $r3 = newarray (java.security.cert.Certificate)[0];

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label2;

     label4:
        return;
    }
    public void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        byte[] $r1;
        java.security.cert.Certificate[] $r2;
        java.io.IOException r3;
        java.lang.String $r4;
        java.util.HashMap $r5;
        boolean $z0;
        java.security.KeyStoreException $r6;
        java.lang.StringBuilder $r7;
        javax.crypto.EncryptedPrivateKeyInfo $r8;
        java.util.Vector $r9;
        java.util.Date $r10;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.security.cert.Certificate[];

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r6 = new java.security.KeyStoreException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is a trusted certificate entry");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label1:
        $r8 = new javax.crypto.EncryptedPrivateKeyInfo;

     label2:
        specialinvoke $r8.<javax.crypto.EncryptedPrivateKeyInfo: void <init>(byte[])>($r1);

     label3:
        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $r2 == null goto label6;

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

     label4:
        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $z0 = virtualinvoke $r9.<java.util.Vector: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label7;

        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r10);

        $r9 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        virtualinvoke $r9.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        return;

     label5:
        r3 := @caughtexception;

        $r6 = new java.security.KeyStoreException;

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>("encoded key is not an EncryptedPrivateKeyInfo");

        throw $r6;

     label6:
        $r5 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        $r2 = newarray (java.security.cert.Certificate)[0];

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        goto label4;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label5;
    }
    public int engineSize()
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        int $i0;
        java.util.Vector $r1;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }
    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        kellinwood.security.zipsigner.optional.JKS r0;
        java.io.OutputStream $r1;
        char[] $r2;
        java.io.DataOutputStream r3;
        java.security.MessageDigest $r4;
        byte[] $r5;
        java.lang.String $r6;
        java.security.DigestOutputStream $r7;
        java.util.Vector $r8;
        int $i0, $i2;
        java.util.Enumeration $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.HashMap $r11;
        java.util.Date $r12;
        long $l1;
        java.security.cert.Certificate $r13;
        java.security.cert.Certificate[] $r14;

        r0 := @this: kellinwood.security.zipsigner.optional.JKS;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: char[];

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

        $r5 = staticinvoke <kellinwood.security.zipsigner.optional.JKS: byte[] charsToBytes(char[])>($r2);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r5);

        $r6 = "Mighty Aphrodite";

        $r5 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r5);

        r3 = new java.io.DataOutputStream;

        $r7 = new java.security.DigestOutputStream;

        specialinvoke $r7.<java.security.DigestOutputStream: void <init>(java.io.OutputStream,java.security.MessageDigest)>($r1, $r4);

        specialinvoke r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>(-17957139);

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>(2);

        $r8 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $i0 = virtualinvoke $r8.<java.util.Vector: int size()>();

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r8 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.Vector aliases>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.lang.String) $r10;

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $z0 = virtualinvoke $r11.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>(2);

        virtualinvoke r3.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r6);

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r12 = (java.util.Date) $r10;

        $l1 = virtualinvoke $r12.<java.util.Date: long getTime()>();

        virtualinvoke r3.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap trustedCerts>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r13 = (java.security.cert.Certificate) $r10;

        staticinvoke <kellinwood.security.zipsigner.optional.JKS: void writeCert(java.io.DataOutputStream,java.security.cert.Certificate)>(r3, $r13);

        goto label1;

     label2:
        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>(1);

        virtualinvoke r3.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r6);

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap dates>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r12 = (java.util.Date) $r10;

        $l1 = virtualinvoke $r12.<java.util.Date: long getTime()>();

        virtualinvoke r3.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap privateKeys>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r5 = (byte[]) $r10;

        $i0 = lengthof $r5;

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke r3.<java.io.DataOutputStream: void write(byte[])>($r5);

        $r11 = r0.<kellinwood.security.zipsigner.optional.JKS: java.util.HashMap certChains>;

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r14 = (java.security.cert.Certificate[]) $r10;

        $i0 = lengthof $r14;

        virtualinvoke r3.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = 0;

     label3:
        $i2 = lengthof $r14;

        if $i0 >= $i2 goto label1;

        $r13 = $r14[$i0];

        staticinvoke <kellinwood.security.zipsigner.optional.JKS: void writeCert(java.io.DataOutputStream,java.security.cert.Certificate)>(r3, $r13);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke r3.<java.io.DataOutputStream: void write(byte[])>($r5);

        return;
    }
