kellinwood.security.zipsigner.optional.Fingerprint extends java.lang.Object
static kellinwood.logging.LoggerInterface logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        kellinwood.logging.LoggerInterface $r2;

        $r0 = class "Lkellinwood/security/zipsigner/optional/Fingerprint;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerInterface getLogger(java.lang.String)>($r1);

        <kellinwood.security.zipsigner.optional.Fingerprint: kellinwood.logging.LoggerInterface logger> = $r2;

        return;
    }
    public void <init>()
    {
        kellinwood.security.zipsigner.optional.Fingerprint r0;

        r0 := @this: kellinwood.security.zipsigner.optional.Fingerprint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String base64Fingerprint(java.lang.String, byte[])
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.Exception r2;
        kellinwood.logging.LoggerInterface $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

     label1:
        $r1 = staticinvoke <kellinwood.security.zipsigner.optional.Fingerprint: byte[] calcDigest(java.lang.String,byte[])>($r0, $r1);

     label2:
        if $r1 != null goto label3;

        return null;

     label3:
        $r0 = staticinvoke <kellinwood.security.zipsigner.Base64: java.lang.String encode(byte[])>($r1);

     label4:
        return $r0;

     label5:
        r2 := @caughtexception;

        $r3 = <kellinwood.security.zipsigner.optional.Fingerprint: kellinwood.logging.LoggerInterface logger>;

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r3.<kellinwood.logging.LoggerInterface: void error(java.lang.String,java.lang.Throwable)>($r0, r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    static byte[] calcDigest(java.lang.String, byte[])
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.Exception r2;
        kellinwood.logging.LoggerInterface $r3;
        java.security.MessageDigest $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

     label1:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        $r3 = <kellinwood.security.zipsigner.optional.Fingerprint: kellinwood.logging.LoggerInterface logger>;

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r3.<kellinwood.logging.LoggerInterface: void error(java.lang.String,java.lang.Throwable)>($r0, r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public static java.lang.String hexFingerprint(java.lang.String, byte[])
    {
        java.lang.String $r0;
        byte[] $r1, $r5;
        org.spongycastle.util.encoders.HexTranslator r2;
        java.lang.StringBuilder r3;
        java.lang.Exception r4;
        int $i0, $i1;
        byte $b2;
        char $c3;
        kellinwood.logging.LoggerInterface $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

     label01:
        $r5 = staticinvoke <kellinwood.security.zipsigner.optional.Fingerprint: byte[] calcDigest(java.lang.String,byte[])>($r0, $r1);

     label02:
        if $r5 != null goto label03;

        return null;

     label03:
        r2 = new org.spongycastle.util.encoders.HexTranslator;

     label04:
        specialinvoke r2.<org.spongycastle.util.encoders.HexTranslator: void <init>()>();

        $i0 = lengthof $r5;

     label05:
        $i0 = $i0 * 2;

     label06:
        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r5;

        virtualinvoke r2.<org.spongycastle.util.encoders.HexTranslator: int encode(byte[],int,int,byte[],int)>($r5, 0, $i0, $r1, 0);

     label07:
        r3 = new java.lang.StringBuilder;

     label08:
        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

     label09:
        $i0 = 0;

     label10:
        $i1 = lengthof $r1;

     label11:
        if $i0 >= $i1 goto label22;

     label12:
        $b2 = $r1[$i0];

     label13:
        $c3 = (char) $b2;

     label14:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label15:
        $i1 = $i0 + 1;

     label16:
        $b2 = $r1[$i1];

     label17:
        $c3 = (char) $b2;

     label18:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $i1 = lengthof $r1;

     label19:
        $i1 = $i1 + -2;

        if $i0 == $i1 goto label21;

     label20:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label21:
        $i0 = $i0 + 2;

        goto label10;

     label22:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

     label23:
        return $r0;

     label24:
        r4 := @caughtexception;

        $r6 = <kellinwood.security.zipsigner.optional.Fingerprint: kellinwood.logging.LoggerInterface logger>;

        $r0 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r6.<kellinwood.logging.LoggerInterface: void error(java.lang.String,java.lang.Throwable)>($r0, r4);

        return null;

        catch java.lang.Exception from label01 to label02 with label24;
        catch java.lang.Exception from label04 to label05 with label24;
        catch java.lang.Exception from label06 to label07 with label24;
        catch java.lang.Exception from label08 to label09 with label24;
        catch java.lang.Exception from label10 to label11 with label24;
        catch java.lang.Exception from label12 to label13 with label24;
        catch java.lang.Exception from label14 to label15 with label24;
        catch java.lang.Exception from label16 to label17 with label24;
        catch java.lang.Exception from label18 to label19 with label24;
        catch java.lang.Exception from label20 to label21 with label24;
        catch java.lang.Exception from label22 to label23 with label24;
    }
