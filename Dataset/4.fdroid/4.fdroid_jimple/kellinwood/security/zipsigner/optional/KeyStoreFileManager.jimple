kellinwood.security.zipsigner.optional.KeyStoreFileManager extends java.lang.Object
static kellinwood.logging.LoggerInterface logger
static java.security.Provider provider
    static void <clinit>()
    {
        org.spongycastle.jce.provider.BouncyCastleProvider $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        kellinwood.logging.LoggerInterface $r3;
        java.security.Provider $r4;

        $r0 = new org.spongycastle.jce.provider.BouncyCastleProvider;

        specialinvoke $r0.<org.spongycastle.jce.provider.BouncyCastleProvider: void <init>()>();

        <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider provider> = $r0;

        $r1 = class "Lkellinwood/security/zipsigner/optional/KeyStoreFileManager;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <kellinwood.logging.LoggerManager: kellinwood.logging.LoggerInterface getLogger(java.lang.String)>($r2);

        <kellinwood.security.zipsigner.optional.KeyStoreFileManager: kellinwood.logging.LoggerInterface logger> = $r3;

        $r4 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider getProvider()>();

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r4);

        return;
    }
    public void <init>()
    {
        kellinwood.security.zipsigner.optional.KeyStoreFileManager r0;

        r0 := @this: kellinwood.security.zipsigner.optional.KeyStoreFileManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean containsKey(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2;
        java.security.KeyStore $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,java.lang.String)>($r0, $r1);

        $z0 = virtualinvoke $r3.<java.security.KeyStore: boolean containsAlias(java.lang.String)>($r2);

        return $z0;
    }
    static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0, $z1;
        byte[] r2;
        java.io.FileInputStream r3;
        java.io.FileOutputStream r4;
        java.io.IOException $r5, $r10, $r11, $r12;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        int $i0;
        long $l1, $l2;
        byte $b3;
        java.lang.Throwable $r8, $r9;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label01;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label01:
        r3 = new java.io.FileInputStream;

        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        r4 = new java.io.FileOutputStream;

        specialinvoke r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        r2 = newarray (byte)[4096];

     label04:
        $i0 = virtualinvoke r3.<java.io.FileInputStream: int read(byte[])>(r2);

     label05:
        if -1 == $i0 goto label08;

     label06:
        virtualinvoke r4.<java.io.FileOutputStream: void write(byte[],int,int)>(r2, 0, $i0);

     label07:
        goto label04;

     label08:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label09:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label10:
        $l1 = virtualinvoke $r0.<java.io.File: long length()>();

        $l2 = virtualinvoke $r1.<java.io.File: long length()>();

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label17;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy full contents from \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label11:
        $r8 := @caughtexception;

     label12:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label13:
        throw $r8;

     label14:
        $r9 := @caughtexception;

     label15:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label16:
        throw $r9;

     label17:
        if $z0 == 0 goto label22;

        $l1 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l1);

        return;

     label18:
        $r5 := @caughtexception;

        goto label09;

     label19:
        $r10 := @caughtexception;

        goto label13;

     label20:
        $r11 := @caughtexception;

        goto label10;

     label21:
        $r12 := @caughtexception;

        goto label16;

     label22:
        return;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label08 to label09 with label18;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.IOException from label15 to label16 with label21;
    }
    public static java.security.KeyStore createKeyStore(java.lang.String, char[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        char[] $r1;
        boolean $z0;
        java.security.KeyStore $r2;
        java.lang.Object r3;
        org.spongycastle.jce.provider.BouncyCastleProvider $r4;
        kellinwood.security.zipsigner.optional.JksKeyStore $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(".bks");

        if $z0 == 0 goto label2;

        $r4 = new org.spongycastle.jce.provider.BouncyCastleProvider;

        specialinvoke $r4.<org.spongycastle.jce.provider.BouncyCastleProvider: void <init>()>();

        r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>("bks", $r4);

     label1:
        $r2 = (java.security.KeyStore) r3;

        virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, $r1);

        $r2 = (java.security.KeyStore) r3;

        return $r2;

     label2:
        $r5 = new kellinwood.security.zipsigner.optional.JksKeyStore;

        r3 = $r5;

        specialinvoke $r5.<kellinwood.security.zipsigner.optional.JksKeyStore: void <init>()>();

        goto label1;
    }
    public static void deleteKey(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2;
        java.security.KeyStore $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,java.lang.String)>($r0, $r1);

        virtualinvoke $r3.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r2);

        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: void writeKeyStore(java.security.KeyStore,java.lang.String,java.lang.String)>($r3, $r0, $r1);

        return;
    }
    public static java.security.KeyStore$Entry getKeyEntry(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2, $r3;
        java.security.KeyStore$PasswordProtection r4, r6;
        char[] r5, $r9;
        java.security.KeyStore $r7;
        kellinwood.security.zipsigner.optional.PasswordObfuscator $r8;
        java.security.KeyStore$Entry $r10;
        java.lang.Throwable $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        r5 = null;

        r6 = null;

     label01:
        $r7 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,java.lang.String)>($r0, $r1);

        $r8 = staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: kellinwood.security.zipsigner.optional.PasswordObfuscator getInstance()>();

        $r9 = virtualinvoke $r8.<kellinwood.security.zipsigner.optional.PasswordObfuscator: char[] decodeAliasPassword(java.lang.String,java.lang.String,java.lang.String)>($r0, $r2, $r3);

     label02:
        r5 = $r9;

     label03:
        r4 = new java.security.KeyStore$PasswordProtection;

        specialinvoke r4.<java.security.KeyStore$PasswordProtection: void <init>(char[])>($r9);

     label04:
        $r10 = virtualinvoke $r7.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r2, r4);

     label05:
        if $r9 == null goto label06;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>($r9);

     label06:
        if r4 == null goto label12;

        virtualinvoke r4.<java.security.KeyStore$PasswordProtection: void destroy()>();

        return $r10;

     label07:
        $r11 := @caughtexception;

     label08:
        if r5 == null goto label09;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r5);

     label09:
        if r6 == null goto label10;

        virtualinvoke r6.<java.security.KeyStore$PasswordProtection: void destroy()>();

     label10:
        throw $r11;

     label11:
        $r11 := @caughtexception;

        r6 = r4;

        goto label08;

     label12:
        return $r10;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label11;
    }
    public static java.security.Provider getProvider()
    {
        java.security.Provider r0;

        r0 = <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider provider>;

        return r0;
    }
    public static java.security.KeyStore loadKeyStore(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1;
        char[] r2, $r4;
        kellinwood.security.zipsigner.optional.PasswordObfuscator $r3;
        java.security.KeyStore $r5;
        java.lang.Throwable $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        r2 = null;

        if $r1 == null goto label3;

     label1:
        $r3 = staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: kellinwood.security.zipsigner.optional.PasswordObfuscator getInstance()>();

        $r4 = virtualinvoke $r3.<kellinwood.security.zipsigner.optional.PasswordObfuscator: char[] decodeKeystorePassword(java.lang.String,java.lang.String)>($r0, $r1);

     label2:
        r2 = $r4;

     label3:
        $r5 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,char[])>($r0, r2);

     label4:
        if r2 == null goto label7;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r2);

        return $r5;

     label5:
        $r6 := @caughtexception;

        if r2 == null goto label6;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r2);

     label6:
        throw $r6;

     label7:
        return $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static java.security.KeyStore loadKeyStore(java.lang.String, char[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        char[] $r1;
        java.lang.Exception r2, r6, r11;
        kellinwood.security.zipsigner.optional.JksKeyStore r3;
        java.io.FileInputStream r4;
        kellinwood.security.zipsigner.optional.LoadKeystoreException r5;
        java.security.Provider $r7;
        java.security.KeyStore $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        r3 = new kellinwood.security.zipsigner.optional.JksKeyStore;

     label01:
        specialinvoke r3.<kellinwood.security.zipsigner.optional.JksKeyStore: void <init>()>();

     label02:
        r4 = new java.io.FileInputStream;

     label03:
        specialinvoke r4.<java.io.FileInputStream: void <init>(java.lang.String)>($r0);

        virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r4, $r1);

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label04:
        return r3;

     label05:
        r5 := @caughtexception;

     label06:
        throw r5;

     label07:
        r6 := @caughtexception;

     label08:
        $r7 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider getProvider()>();

        $r8 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>("bks", $r7);

     label09:
        r4 = new java.io.FileInputStream;

     label10:
        specialinvoke r4.<java.io.FileInputStream: void <init>(java.lang.String)>($r0);

        virtualinvoke $r8.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r4, $r1);

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label11:
        return $r8;

     label12:
        r2 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load keystore: ");

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r2);

        throw $r9;

     label13:
        r11 := @caughtexception;

        goto label08;

     label14:
        r5 := @caughtexception;

        goto label06;

        catch kellinwood.security.zipsigner.optional.LoadKeystoreException from label01 to label02 with label05;
        catch java.lang.Exception from label01 to label02 with label07;
        catch kellinwood.security.zipsigner.optional.LoadKeystoreException from label03 to label04 with label14;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
    public static java.lang.String renameKey(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4;
        char[] r5, $r10;
        java.security.KeyStore $r6;
        boolean $z0;
        kellinwood.security.zipsigner.optional.KeyNameConflictException $r7;
        java.lang.Throwable $r8;
        kellinwood.security.zipsigner.optional.PasswordObfuscator $r9;
        java.security.Key $r11;
        java.security.cert.Certificate $r12;
        java.security.cert.Certificate[] $r13;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r3 := @parameter4: java.lang.String;

        r5 = null;

     label01:
        $r6 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,java.lang.String)>($r0, $r1);

        $z0 = $r6 instanceof kellinwood.security.zipsigner.optional.JksKeyStore;

     label02:
        if $z0 == 0 goto label04;

     label03:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

     label04:
        $z0 = virtualinvoke $r6.<java.security.KeyStore: boolean containsAlias(java.lang.String)>($r4);

     label05:
        if $z0 == 0 goto label08;

     label06:
        $r7 = new kellinwood.security.zipsigner.optional.KeyNameConflictException;

        specialinvoke $r7.<kellinwood.security.zipsigner.optional.KeyNameConflictException: void <init>()>();

        throw $r7;

     label07:
        $r8 := @caughtexception;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r5);

        throw $r8;

     label08:
        $r9 = staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: kellinwood.security.zipsigner.optional.PasswordObfuscator getInstance()>();

        $r10 = virtualinvoke $r9.<kellinwood.security.zipsigner.optional.PasswordObfuscator: char[] decodeAliasPassword(java.lang.String,java.lang.String,java.lang.String)>($r0, $r2, $r3);

     label09:
        r5 = $r10;

     label10:
        $r11 = virtualinvoke $r6.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r2, $r10);

        $r12 = virtualinvoke $r6.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>($r2);

        $r13 = newarray (java.security.cert.Certificate)[1];

        $r13[0] = $r12;

        virtualinvoke $r6.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>($r4, $r11, $r10, $r13);

        virtualinvoke $r6.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r2);

        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: void writeKeyStore(java.security.KeyStore,java.lang.String,java.lang.String)>($r6, $r0, $r1);

     label11:
        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>($r10);

        return $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }
    public static void renameTo(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: void copyFile(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return;
    }
    public static void setProvider(java.security.Provider)
    {
        java.security.Provider $r0, $r2;
        java.lang.String $r1;

        $r0 := @parameter0: java.security.Provider;

        $r2 = <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider provider>;

        if $r2 == null goto label1;

        $r2 = <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider provider>;

        $r1 = virtualinvoke $r2.<java.security.Provider: java.lang.String getName()>();

        staticinvoke <java.security.Security: void removeProvider(java.lang.String)>($r1);

     label1:
        <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.Provider provider> = $r0;

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r0);

        return;
    }
    public static void validateKeyPassword(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2;
        char[] r3, $r6;
        java.security.KeyStore $r4;
        kellinwood.security.zipsigner.optional.PasswordObfuscator $r5;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        r3 = null;

     label1:
        $r4 = staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,char[])>($r0, null);

        $r5 = staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: kellinwood.security.zipsigner.optional.PasswordObfuscator getInstance()>();

        $r6 = virtualinvoke $r5.<kellinwood.security.zipsigner.optional.PasswordObfuscator: char[] decodeAliasPassword(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

     label2:
        r3 = $r6;

     label3:
        virtualinvoke $r4.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r1, $r6);

     label4:
        if $r6 == null goto label7;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>($r6);

        return;

     label5:
        $r7 := @caughtexception;

        if r3 == null goto label6;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r3);

     label6:
        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static void validateKeystorePassword(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: java.security.KeyStore loadKeyStore(java.lang.String,java.lang.String)>($r0, $r1);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        goto label4;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static void writeKeyStore(java.security.KeyStore, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.security.KeyStore $r0;
        java.lang.String $r1, $r2;
        char[] r3, $r5;
        kellinwood.security.zipsigner.optional.PasswordObfuscator $r4;
        java.lang.Throwable $r6;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        r3 = null;

     label1:
        $r4 = staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: kellinwood.security.zipsigner.optional.PasswordObfuscator getInstance()>();

        $r5 = virtualinvoke $r4.<kellinwood.security.zipsigner.optional.PasswordObfuscator: char[] decodeKeystorePassword(java.lang.String,java.lang.String)>($r1, $r2);

     label2:
        r3 = $r5;

     label3:
        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: void writeKeyStore(java.security.KeyStore,java.lang.String,char[])>($r0, $r1, $r5);

     label4:
        if $r5 == null goto label7;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>($r5);

        return;

     label5:
        $r6 := @caughtexception;

        if r3 == null goto label6;

        staticinvoke <kellinwood.security.zipsigner.optional.PasswordObfuscator: void flush(char[])>(r3);

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static void writeKeyStore(java.security.KeyStore, java.lang.String, char[]) throws java.lang.Exception
    {
        java.security.KeyStore $r0;
        java.lang.String $r1;
        char[] $r2;
        java.io.File r3, $r6;
        java.io.PrintWriter r4;
        java.lang.Exception r5, $r9;
        boolean $z0;
        java.io.FileOutputStream r7;
        java.io.FileWriter $r8;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: char[];

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r1);

     label01:
        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label02:
        if $z0 == 0 goto label07;

     label03:
        $r1 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r6 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        $r6 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r1, null, $r6);

     label04:
        r7 = new java.io.FileOutputStream;

     label05:
        specialinvoke r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        virtualinvoke $r0.<java.security.KeyStore: void store(java.io.OutputStream,char[])>(r7, $r2);

        virtualinvoke r7.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

        staticinvoke <kellinwood.security.zipsigner.optional.KeyStoreFileManager: void renameTo(java.io.File,java.io.File)>($r6, r3);

     label06:
        return;

     label07:
        r7 = new java.io.FileOutputStream;

     label08:
        specialinvoke r7.<java.io.FileOutputStream: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<java.security.KeyStore: void store(java.io.OutputStream,char[])>(r7, $r2);

        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label09:
        return;

     label10:
        r5 := @caughtexception;

     label11:
        r3 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("zipsigner-error", ".log", r3);

     label12:
        r4 = new java.io.PrintWriter;

        $r8 = new java.io.FileWriter;

     label13:
        specialinvoke $r8.<java.io.FileWriter: void <init>(java.io.File)>(r3);

        specialinvoke r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r8);

        virtualinvoke r5.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>(r4);

        virtualinvoke r4.<java.io.PrintWriter: void flush()>();

        virtualinvoke r4.<java.io.PrintWriter: void close()>();

     label14:
        throw r5;

     label15:
        $r9 := @caughtexception;

        goto label14;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }
