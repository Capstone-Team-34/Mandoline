kellinwood.security.zipsigner.HexDumpEncoder extends java.lang.Object
static kellinwood.security.zipsigner.HexEncoder encoder
    static void <clinit>()
    {
        kellinwood.security.zipsigner.HexEncoder $r0;

        $r0 = new kellinwood.security.zipsigner.HexEncoder;

        specialinvoke $r0.<kellinwood.security.zipsigner.HexEncoder: void <init>()>();

        <kellinwood.security.zipsigner.HexDumpEncoder: kellinwood.security.zipsigner.HexEncoder encoder> = $r0;

        return;
    }
    public void <init>()
    {
        kellinwood.security.zipsigner.HexDumpEncoder r0;

        r0 := @this: kellinwood.security.zipsigner.HexDumpEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String encode(byte[])
    {
        byte[] $r0, $r7;
        java.io.ByteArrayOutputStream r1;
        java.lang.StringBuilder r2, r3, r4;
        byte b0;
        java.io.IOException r5;
        kellinwood.security.zipsigner.HexEncoder $r6;
        int $i1, $i2, $i3, $i5;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        java.lang.String $r10;
        char $c4;
        java.lang.Character $r11;
        java.lang.IllegalStateException $r12;
        java.lang.Class $r13;

        $r0 := @parameter0: byte[];

        r1 = new java.io.ByteArrayOutputStream;

     label01:
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label02:
        $r6 = <kellinwood.security.zipsigner.HexDumpEncoder: kellinwood.security.zipsigner.HexEncoder encoder>;

        $i1 = lengthof $r0;

     label03:
        virtualinvoke $r6.<kellinwood.security.zipsigner.HexEncoder: int encode(byte[],int,int,java.io.OutputStream)>($r0, 0, $i1, r1);

        $r7 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label04:
        r3 = new java.lang.StringBuilder;

     label05:
        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

     label06:
        $i1 = 0;

     label07:
        $i2 = lengthof $r7;

        if $i1 >= $i2 goto label36;

        $i2 = $i1 + 32;

        $i3 = lengthof $r7;

     label08:
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

     label09:
        r4 = new java.lang.StringBuilder;

     label10:
        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

     label11:
        r2 = new java.lang.StringBuilder;

     label12:
        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

     label13:
        $r8 = newarray (java.lang.Object)[1];

        $i3 = $i1 / 2;

     label14:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label15:
        $r8[0] = $r9;

     label16:
        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%08x: ", $r8);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label17:
        $i3 = $i1;

     label18:
        if $i3 >= $i2 goto label30;

        b0 = $r7[$i3];

        $c4 = (char) b0;

     label19:
        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

     label20:
        $i5 = $i3 + 1;

        b0 = $r7[$i5];

        $c4 = (char) b0;

     label21:
        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

     label22:
        $i5 = $i3 + 2;

        $i5 = $i5 % 4;

        if $i5 != 0 goto label24;

     label23:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label24:
        $i5 = $i3 / 2;

        b0 = $r0[$i5];

        if b0 < 32 goto label27;

        if b0 >= 127 goto label27;

        $c4 = (char) b0;

     label25:
        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

     label26:
        $i3 = $i3 + 2;

        goto label18;

     label27:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label28:
        goto label26;

     label29:
        r5 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label30:
        $r10 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $i2 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

     label31:
        if $i2 >= 50 goto label34;

     label32:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label33:
        $i2 = $i2 + 1;

        goto label31;

     label34:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label35:
        $i1 = $i1 + 32;

        goto label07;

     label36:
        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label37:
        return $r10;

        catch java.io.IOException from label01 to label02 with label29;
        catch java.io.IOException from label03 to label04 with label29;
        catch java.io.IOException from label05 to label06 with label29;
        catch java.io.IOException from label08 to label09 with label29;
        catch java.io.IOException from label10 to label11 with label29;
        catch java.io.IOException from label12 to label13 with label29;
        catch java.io.IOException from label14 to label15 with label29;
        catch java.io.IOException from label16 to label17 with label29;
        catch java.io.IOException from label19 to label20 with label29;
        catch java.io.IOException from label21 to label22 with label29;
        catch java.io.IOException from label23 to label24 with label29;
        catch java.io.IOException from label25 to label26 with label29;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.io.IOException from label30 to label31 with label29;
        catch java.io.IOException from label32 to label33 with label29;
        catch java.io.IOException from label34 to label35 with label29;
        catch java.io.IOException from label36 to label37 with label29;
    }
