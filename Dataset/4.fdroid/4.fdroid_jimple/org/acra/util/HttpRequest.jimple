org.acra.util.HttpRequest extends java.lang.Object
private int connectionTimeOut
private java.util.Map headers
private java.lang.String login
private java.lang.String password
private int socketTimeOut
    public void <init>()
    {
        org.acra.util.HttpRequest r0;

        r0 := @this: org.acra.util.HttpRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.acra.util.HttpRequest: int connectionTimeOut> = 3000;

        r0.<org.acra.util.HttpRequest: int socketTimeOut> = 3000;

        return;
    }
    public static java.lang.String getParamsAsFormString(java.util.Map) throws java.io.UnsupportedEncodingException
    {
        java.util.Map r0;
        java.lang.StringBuilder r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r0 := @parameter0: java.util.Map;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label2:
        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label4;

        $r5 = "";

     label3:
        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r6, "UTF-8");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r6 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r6, "UTF-8");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label1;

     label4:
        goto label3;

     label5:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
    public void send(java.net.URL, org.acra.sender.HttpSender$Method, java.lang.String, org.acra.sender.HttpSender$Type) throws java.io.IOException
    {
        org.acra.util.HttpRequest r0;
        java.net.URL $r1;
        org.acra.sender.HttpSender$Method $r2;
        java.lang.String $r3, r6, $r18;
        org.acra.sender.HttpSender$Type $r4;
        java.security.GeneralSecurityException r5;
        java.io.BufferedOutputStream r7;
        java.net.URLConnection $r8;
        java.net.HttpURLConnection r9;
        boolean $z0;
        javax.net.ssl.HttpsURLConnection $r10;
        javax.net.ssl.TrustManagerFactory $r11;
        org.acra.ACRAConfiguration $r12;
        java.security.KeyStore $r13;
        javax.net.ssl.SSLContext $r14;
        javax.net.ssl.TrustManager[] $r15;
        javax.net.ssl.SSLSocketFactory $r16;
        java.lang.StringBuilder $r17;
        byte[] $r19;
        int $i0;
        java.util.Map $r20;
        java.util.Set $r21;
        java.util.Iterator $r22;
        java.lang.Object $r23;
        org.acra.log.ACRALog $r24;
        java.io.OutputStream $r25;
        java.io.IOException $r26;

        r0 := @this: org.acra.util.HttpRequest;

        $r1 := @parameter0: java.net.URL;

        $r2 := @parameter1: org.acra.sender.HttpSender$Method;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.acra.sender.HttpSender$Type;

        $r8 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>();

        r9 = (java.net.HttpURLConnection) $r8;

        $z0 = r9 instanceof javax.net.ssl.HttpsURLConnection;

        if $z0 == 0 goto label02;

        $r10 = (javax.net.ssl.HttpsURLConnection) r9;

     label01:
        r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r6);

        $r12 = staticinvoke <org.acra.ACRA: org.acra.ACRAConfiguration getConfig()>();

        $r13 = virtualinvoke $r12.<org.acra.ACRAConfiguration: java.security.KeyStore keyStore()>();

        virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r13);

        $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        $r15 = virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r15, null);

        $r16 = virtualinvoke $r14.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke $r10.<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r16);

     label02:
        r6 = r0.<org.acra.util.HttpRequest: java.lang.String login>;

        if r6 == null goto label03;

        r6 = r0.<org.acra.util.HttpRequest: java.lang.String password>;

        if r6 == null goto label03;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r6 = r0.<org.acra.util.HttpRequest: java.lang.String login>;

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r6 = r0.<org.acra.util.HttpRequest: java.lang.String password>;

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = new java.lang.String;

        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r19 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r19, 0);

        specialinvoke r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r19, "UTF-8");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Authorization", r6);

     label03:
        $i0 = r0.<org.acra.util.HttpRequest: int connectionTimeOut>;

        virtualinvoke r9.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0);

        $i0 = r0.<org.acra.util.HttpRequest: int socketTimeOut>;

        virtualinvoke r9.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0);

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("User-Agent", "Android");

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Accept", "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");

        r6 = virtualinvoke $r4.<org.acra.sender.HttpSender$Type: java.lang.String getContentType()>();

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", r6);

        $r20 = r0.<org.acra.util.HttpRequest: java.util.Map headers>;

        if $r20 == null goto label06;

        $r20 = r0.<org.acra.util.HttpRequest: java.util.Map headers>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set keySet()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r23;

        $r20 = r0.<org.acra.util.HttpRequest: java.util.Map headers>;

        $r23 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r18 = (java.lang.String) $r23;

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>(r6, $r18);

        goto label04;

     label05:
        r5 := @caughtexception;

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        r6 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not configure SSL for ACRA request to ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.acra.log.ACRALog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r6, $r18, r5);

        goto label02;

     label06:
        $r19 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = virtualinvoke $r2.<org.acra.sender.HttpSender$Method: java.lang.String name()>();

        virtualinvoke r9.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r3);

        virtualinvoke r9.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        $i0 = lengthof $r19;

        virtualinvoke r9.<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>($i0);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("http.keepAlive", "false");

        virtualinvoke r9.<java.net.HttpURLConnection: void connect()>();

        r7 = new java.io.BufferedOutputStream;

        $r25 = virtualinvoke r9.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>();

        specialinvoke r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r25);

        virtualinvoke r7.<java.io.OutputStream: void write(byte[])>($r19);

        virtualinvoke r7.<java.io.OutputStream: void flush()>();

        virtualinvoke r7.<java.io.OutputStream: void close()>();

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending request to ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r3, r6);

        $i0 = virtualinvoke r9.<java.net.HttpURLConnection: int getResponseCode()>();

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request response : ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        r6 = virtualinvoke r9.<java.net.HttpURLConnection: java.lang.String getResponseMessage()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r3, r6);

        if $i0 < 200 goto label08;

        if $i0 >= 300 goto label08;

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        interfaceinvoke $r24.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r3, "Request received by server");

     label07:
        virtualinvoke r9.<java.net.HttpURLConnection: void disconnect()>();

        return;

     label08:
        if $i0 != 403 goto label09;

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        interfaceinvoke $r24.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r3, "Data validation error on server - request will be discarded");

        goto label07;

     label09:
        if $i0 != 409 goto label10;

        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        interfaceinvoke $r24.<org.acra.log.ACRALog: int d(java.lang.String,java.lang.String)>($r3, "Server has already received this post - request will be discarded");

        goto label07;

     label10:
        if $i0 < 400 goto label11;

        if $i0 >= 600 goto label11;

        $r26 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host returned error code ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r26;

     label11:
        $r24 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r3 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        interfaceinvoke $r24.<org.acra.log.ACRALog: int w(java.lang.String,java.lang.String)>($r3, "Could not send ACRA Post - request will be discarded");

        goto label07;

        catch java.security.GeneralSecurityException from label01 to label02 with label05;
    }
    public void setConnectionTimeOut(int)
    {
        org.acra.util.HttpRequest r0;
        int $i0;

        r0 := @this: org.acra.util.HttpRequest;

        $i0 := @parameter0: int;

        r0.<org.acra.util.HttpRequest: int connectionTimeOut> = $i0;

        return;
    }
    public void setHeaders(java.util.Map)
    {
        org.acra.util.HttpRequest r0;
        java.util.Map r1;

        r0 := @this: org.acra.util.HttpRequest;

        r1 := @parameter0: java.util.Map;

        r0.<org.acra.util.HttpRequest: java.util.Map headers> = r1;

        return;
    }
    public void setLogin(java.lang.String)
    {
        org.acra.util.HttpRequest r0;
        java.lang.String $r1;

        r0 := @this: org.acra.util.HttpRequest;

        $r1 := @parameter0: java.lang.String;

        r0.<org.acra.util.HttpRequest: java.lang.String login> = $r1;

        return;
    }
    public void setPassword(java.lang.String)
    {
        org.acra.util.HttpRequest r0;
        java.lang.String $r1;

        r0 := @this: org.acra.util.HttpRequest;

        $r1 := @parameter0: java.lang.String;

        r0.<org.acra.util.HttpRequest: java.lang.String password> = $r1;

        return;
    }
    public void setSocketTimeOut(int)
    {
        org.acra.util.HttpRequest r0;
        int $i0;

        r0 := @this: org.acra.util.HttpRequest;

        $i0 := @parameter0: int;

        r0.<org.acra.util.HttpRequest: int socketTimeOut> = $i0;

        return;
    }
