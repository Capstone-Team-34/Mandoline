org.acra.util.ReportUtils extends java.lang.Object
    public static java.lang.String getApplicationFilePath(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r5;
        java.io.File $r2;
        org.acra.log.ACRALog $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r1;

     label1:
        $r3 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r1 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve ApplicationFilePath for : ");

        $r5 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.acra.log.ACRALog: int w(java.lang.String,java.lang.String)>($r1, $r5);

        return "Couldn\'t retrieve ApplicationFilePath";
    }
    public static long getAvailableInternalMemorySize()
    {
        long l0, l1;
        android.os.StatFs r0;
        java.io.File $r1;
        java.lang.String $r2;
        int $i2;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        r0 = new android.os.StatFs;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<android.os.StatFs: void <init>(java.lang.String)>($r2);

        $i2 = virtualinvoke r0.<android.os.StatFs: int getBlockSize()>();

        l1 = (long) $i2;

        $i2 = virtualinvoke r0.<android.os.StatFs: int getAvailableBlocks()>();

        l0 = (long) $i2;

        l0 = l0 * l1;

        return l0;
    }
    public static java.lang.String getDeviceId(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.RuntimeException r1;
        java.lang.String $r2, $r7;
        java.lang.Object $r3;
        android.telephony.TelephonyManager r4;
        org.acra.log.ACRALog $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        r4 = (android.telephony.TelephonyManager) $r3;

        $r2 = virtualinvoke r4.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r5 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r2 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t retrieve DeviceId for : ");

        $r7 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.acra.log.ACRALog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r7, r1);

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    public static java.lang.String getLocalIpAddress()
    {
        java.net.SocketException r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r9;
        boolean z0, $z1;
        java.util.Enumeration $r3, $r6;
        java.lang.Object $r4;
        java.net.NetworkInterface r5;
        java.net.InetAddress r7;
        org.acra.log.ACRALog $r8;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        z0 = 1;

     label01:
        $r3 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label02:
        $z1 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

     label03:
        if $z1 == 0 goto label17;

     label04:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

     label05:
        r5 = (java.net.NetworkInterface) $r4;

     label06:
        $r6 = virtualinvoke r5.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

     label07:
        $z1 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

     label08:
        if $z1 == 0 goto label02;

     label09:
        $r4 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

     label10:
        r7 = (java.net.InetAddress) $r4;

     label11:
        $z1 = virtualinvoke r7.<java.net.InetAddress: boolean isLoopbackAddress()>();

     label12:
        if $z1 != 0 goto label07;

        if z0 != 0 goto label14;

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label14:
        $r2 = virtualinvoke r7.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label15:
        z0 = 0;

        goto label07;

     label16:
        r0 := @caughtexception;

        $r8 = <org.acra.ACRA: org.acra.log.ACRALog log>;

        $r2 = <org.acra.ACRA: java.lang.String LOG_TAG>;

        $r9 = virtualinvoke r0.<java.net.SocketException: java.lang.String toString()>();

        interfaceinvoke $r8.<org.acra.log.ACRALog: int w(java.lang.String,java.lang.String)>($r2, $r9);

     label17:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

        catch java.net.SocketException from label01 to label03 with label16;
        catch java.net.SocketException from label04 to label05 with label16;
        catch java.net.SocketException from label06 to label08 with label16;
        catch java.net.SocketException from label09 to label10 with label16;
        catch java.net.SocketException from label11 to label12 with label16;
        catch java.net.SocketException from label13 to label15 with label16;
    }
    public static java.lang.String getTimeString(java.util.Calendar)
    {
        java.util.Calendar $r0;
        java.text.SimpleDateFormat r1;
        java.util.Locale $r2;
        long $l0;
        java.lang.Long $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.util.Calendar;

        r1 = new java.text.SimpleDateFormat;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke r1.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZZZZZ", $r2);

        $l0 = virtualinvoke $r0.<java.util.Calendar: long getTimeInMillis()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = virtualinvoke r1.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r3);

        return $r4;
    }
    public static long getTotalInternalMemorySize()
    {
        long l0, l1;
        android.os.StatFs r0;
        java.io.File $r1;
        java.lang.String $r2;
        int $i2;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        r0 = new android.os.StatFs;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<android.os.StatFs: void <init>(java.lang.String)>($r2);

        $i2 = virtualinvoke r0.<android.os.StatFs: int getBlockSize()>();

        l0 = (long) $i2;

        $i2 = virtualinvoke r0.<android.os.StatFs: int getBlockCount()>();

        l1 = (long) $i2;

        l0 = l1 * l0;

        return l0;
    }
