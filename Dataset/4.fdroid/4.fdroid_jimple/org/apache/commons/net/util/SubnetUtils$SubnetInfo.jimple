org.apache.commons.net.util.SubnetUtils$SubnetInfo extends java.lang.Object
final org.apache.commons.net.util.SubnetUtils this$0
    private void <init>(org.apache.commons.net.util.SubnetUtils)
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(org.apache.commons.net.util.SubnetUtils, org.apache.commons.net.util.SubnetUtils$1)
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1;
        org.apache.commons.net.util.SubnetUtils$1 $r2;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        $r2 := @parameter1: org.apache.commons.net.util.SubnetUtils$1;

        specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: void <init>(org.apache.commons.net.util.SubnetUtils)>($r1);

        return;
    }
    private int address()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$200(org.apache.commons.net.util.SubnetUtils)>($r1);

        return $i0;
    }
    private int broadcast()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$300(org.apache.commons.net.util.SubnetUtils)>($r1);

        return $i0;
    }
    private long broadcastLong()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;
        long $l1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$300(org.apache.commons.net.util.SubnetUtils)>($r1);

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        return $l1;
    }
    private int high()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1;
        boolean $z0;
        int $i0;
        long $l1, $l2;
        byte $b3;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $z0 = virtualinvoke $r1.<org.apache.commons.net.util.SubnetUtils: boolean isInclusiveHostCount()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int broadcast()>();

        return $i0;

     label1:
        $l1 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long broadcastLong()>();

        $l2 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long networkLong()>();

        $l1 = $l1 - $l2;

        $b3 = $l1 cmp 1L;

        if $b3 <= 0 goto label2;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int broadcast()>();

        $i0 = $i0 + -1;

        return $i0;

     label2:
        return 0;
    }
    private int low()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1;
        boolean $z0;
        int $i0;
        long $l1, $l2;
        byte $b3;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $z0 = virtualinvoke $r1.<org.apache.commons.net.util.SubnetUtils: boolean isInclusiveHostCount()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int network()>();

        return $i0;

     label1:
        $l1 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long broadcastLong()>();

        $l2 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long networkLong()>();

        $l1 = $l1 - $l2;

        $b3 = $l1 cmp 1L;

        if $b3 <= 0 goto label2;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int network()>();

        $i0 = $i0 + 1;

        return $i0;

     label2:
        return 0;
    }
    private int netmask()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$000(org.apache.commons.net.util.SubnetUtils)>($r1);

        return $i0;
    }
    private int network()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$100(org.apache.commons.net.util.SubnetUtils)>($r1);

        return $i0;
    }
    private long networkLong()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        org.apache.commons.net.util.SubnetUtils $r1;
        long $l1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$100(org.apache.commons.net.util.SubnetUtils)>($r1);

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        return $l1;
    }
    public int getAddressCount()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        long $l0;
        byte $b1;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int $i2;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $l0 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long getAddressCountLong()>();

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count is larger than an integer: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }
    public long getAddressCountLong()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        long $l0, $l1;
        org.apache.commons.net.util.SubnetUtils $r1;
        boolean $z0;
        int $i2;
        byte $b3;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $l0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long broadcastLong()>();

        $l1 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: long networkLong()>();

        $l0 = $l0 - $l1;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $z0 = virtualinvoke $r1.<org.apache.commons.net.util.SubnetUtils: boolean isInclusiveHostCount()>();

        if $z0 == 0 goto label2;

        $i2 = 1;

     label1:
        $l1 = (long) $i2;

        $l0 = $l0 + $l1;

        $b3 = $l0 cmp 0L;

        if $b3 >= 0 goto label3;

        return 0L;

     label2:
        $i2 = -1;

        goto label1;

     label3:
        return $l0;
    }
    public java.lang.String getBroadcastAddress()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2;
        int $i0;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int broadcast()>();

        $r3 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r2, $i0);

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r1, $r3);

        return $r4;
    }
    public java.lang.String getCidrSignature()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2, $r3;
        int $i0;
        int[] $r4;
        java.lang.String $r5, $r6;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r3 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int address()>();

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r3, $i0);

        $r5 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r2, $r4);

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r3 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int netmask()>();

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r3, $i0);

        $r6 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r2, $r4);

        $r5 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$700(org.apache.commons.net.util.SubnetUtils,java.lang.String,java.lang.String)>($r1, $r5, $r6);

        return $r5;
    }
    public java.lang.String getHighAddress()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2;
        int $i0;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int high()>();

        $r3 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r2, $i0);

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r1, $r3);

        return $r4;
    }
    public java.lang.String getLowAddress()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2;
        int $i0;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int low()>();

        $r3 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r2, $i0);

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r1, $r3);

        return $r4;
    }
    public java.lang.String getNetmask()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2;
        int $i0;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int netmask()>();

        $r3 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r2, $i0);

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r1, $r3);

        return $r4;
    }
    public java.lang.String getNetworkAddress()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        org.apache.commons.net.util.SubnetUtils $r1, $r2;
        int $i0;
        int[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int network()>();

        $r3 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int[] access$500(org.apache.commons.net.util.SubnetUtils,int)>($r2, $i0);

        $r4 = staticinvoke <org.apache.commons.net.util.SubnetUtils: java.lang.String access$600(org.apache.commons.net.util.SubnetUtils,int[])>($r1, $r3);

        return $r4;
    }
    public boolean isInRange(int)
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        int $i0;
        long l1, l2, l3;
        byte $b4;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $i0 := @parameter0: int;

        l1 = (long) $i0;

        l1 = l1 & 4294967295L;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int low()>();

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int high()>();

        l2 = (long) $i0;

        l2 = l2 & 4294967295L;

        $b4 = l1 cmp l3;

        if $b4 < 0 goto label1;

        $b4 = l1 cmp l2;

        if $b4 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isInRange(java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        java.lang.String $r1;
        org.apache.commons.net.util.SubnetUtils $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: org.apache.commons.net.util.SubnetUtils this$0>;

        $i0 = staticinvoke <org.apache.commons.net.util.SubnetUtils: int access$400(org.apache.commons.net.util.SubnetUtils,java.lang.String)>($r2, $r1);

        $z0 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: boolean isInRange(int)>($i0);

        return $z0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.net.util.SubnetUtils$SubnetInfo r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CIDR Signature:\t[");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getCidrSignature()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Netmask: [");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getNetmask()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Network:\t[");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getNetworkAddress()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broadcast:\t[");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getBroadcastAddress()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First Address:\t[");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getLowAddress()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Last Address:\t[");

        $r3 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: java.lang.String getHighAddress()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# Addresses:\t[");

        $i0 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: int getAddressCount()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
