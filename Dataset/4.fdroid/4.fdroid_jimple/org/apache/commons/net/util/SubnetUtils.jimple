org.apache.commons.net.util.SubnetUtils extends java.lang.Object
private static final java.util.regex.Pattern addressPattern
private static final java.util.regex.Pattern cidrPattern
private int address
private int broadcast
private boolean inclusiveHostCount
private int netmask
private int network
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})");

        <org.apache.commons.net.util.SubnetUtils: java.util.regex.Pattern addressPattern> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,3})");

        <org.apache.commons.net.util.SubnetUtils: java.util.regex.Pattern cidrPattern> = $r0;

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.net.util.SubnetUtils: int netmask> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int address> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int network> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int broadcast> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: boolean inclusiveHostCount> = 0;

        specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: void calculate(java.lang.String)>($r1);

        return;
    }
    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.net.util.SubnetUtils: int netmask> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int address> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int network> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: int broadcast> = 0;

        r0.<org.apache.commons.net.util.SubnetUtils: boolean inclusiveHostCount> = 0;

        $r1 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: java.lang.String toCidrNotation(java.lang.String,java.lang.String)>($r1, $r2);

        specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: void calculate(java.lang.String)>($r1);

        return;
    }
    static int access$000(org.apache.commons.net.util.SubnetUtils)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        i0 = $r0.<org.apache.commons.net.util.SubnetUtils: int netmask>;

        return i0;
    }
    static int access$100(org.apache.commons.net.util.SubnetUtils)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        i0 = $r0.<org.apache.commons.net.util.SubnetUtils: int network>;

        return i0;
    }
    static int access$200(org.apache.commons.net.util.SubnetUtils)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        i0 = $r0.<org.apache.commons.net.util.SubnetUtils: int address>;

        return i0;
    }
    static int access$300(org.apache.commons.net.util.SubnetUtils)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int i0;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        i0 = $r0.<org.apache.commons.net.util.SubnetUtils: int broadcast>;

        return i0;
    }
    static int access$400(org.apache.commons.net.util.SubnetUtils, java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke $r0.<org.apache.commons.net.util.SubnetUtils: int toInteger(java.lang.String)>($r1);

        return $i0;
    }
    static int[] access$500(org.apache.commons.net.util.SubnetUtils, int)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int $i0;
        int[] $r1;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        $i0 := @parameter1: int;

        $r1 = specialinvoke $r0.<org.apache.commons.net.util.SubnetUtils: int[] toArray(int)>($i0);

        return $r1;
    }
    static java.lang.String access$600(org.apache.commons.net.util.SubnetUtils, int[])
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        int[] $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter1: int[];

        $r2 = specialinvoke $r0.<org.apache.commons.net.util.SubnetUtils: java.lang.String format(int[])>($r1);

        return $r2;
    }
    static java.lang.String access$700(org.apache.commons.net.util.SubnetUtils, java.lang.String, java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r1 = specialinvoke $r0.<org.apache.commons.net.util.SubnetUtils: java.lang.String toCidrNotation(java.lang.String,java.lang.String)>($r1, $r2);

        return $r1;
    }
    private void calculate(java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        int $i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.net.util.SubnetUtils: java.util.regex.Pattern cidrPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label3;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: int matchAddress(java.util.regex.Matcher)>($r3);

        r0.<org.apache.commons.net.util.SubnetUtils: int address> = $i0;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: int rangeCheck(int,int,int)>($i0, 0, 32);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $i2 = r0.<org.apache.commons.net.util.SubnetUtils: int netmask>;

        $i3 = 31 - i1;

        $i3 = 1 << $i3;

        $i2 = $i2 | $i3;

        r0.<org.apache.commons.net.util.SubnetUtils: int netmask> = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i0 = r0.<org.apache.commons.net.util.SubnetUtils: int address>;

        i1 = r0.<org.apache.commons.net.util.SubnetUtils: int netmask>;

        $i0 = $i0 & i1;

        r0.<org.apache.commons.net.util.SubnetUtils: int network> = $i0;

        $i0 = r0.<org.apache.commons.net.util.SubnetUtils: int network>;

        i1 = r0.<org.apache.commons.net.util.SubnetUtils: int netmask>;

        i1 = i1 ^ -1;

        $i0 = $i0 | i1;

        r0.<org.apache.commons.net.util.SubnetUtils: int broadcast> = $i0;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse [");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }
    private java.lang.String format(int[])
    {
        org.apache.commons.net.util.SubnetUtils r0;
        int[] $r1;
        java.lang.StringBuilder r2;
        java.lang.String $r3;
        int i0, $i1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: int[];

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $i1 = $r1[i0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        if i0 == $i1 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    private int matchAddress(java.util.regex.Matcher)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.util.regex.Matcher $r1;
        int i0, i1, $i2, $i3;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.util.regex.Matcher;

        i0 = 0;

        i1 = 1;

     label1:
        if i1 > 4 goto label2;

        $r2 = virtualinvoke $r1.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $i2 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: int rangeCheck(int,int,int)>($i2, 0, 255);

        $i2 = $i2 & 255;

        $i3 = 4 - i1;

        $i3 = $i3 * 8;

        $i2 = $i2 << $i3;

        i0 = i0 | $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i0;
    }
    private int rangeCheck(int, int, int)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 < $i1 goto label1;

        if $i0 > $i2 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not in range [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }
    private int[] toArray(int)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        int $i0, i1, $i2, $i3;
        int[] r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $i0 := @parameter0: int;

        r1 = newarray (int)[4];

        i1 = 3;

     label1:
        if i1 < 0 goto label2;

        $i2 = r1[i1];

        $i3 = 3 - i1;

        $i3 = $i3 * 8;

        $i3 = $i0 >>> $i3;

        $i3 = $i3 & 255;

        $i2 = $i2 | $i3;

        r1[i1] = $i2;

        i1 = i1 + -1;

        goto label1;

     label2:
        return r1;
    }
    private java.lang.String toCidrNotation(java.lang.String, java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: int toInteger(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<org.apache.commons.net.util.SubnetUtils: int pop(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    private int toInteger(java.lang.String)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.net.util.SubnetUtils: java.util.regex.Pattern addressPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.apache.commons.net.util.SubnetUtils: int matchAddress(java.util.regex.Matcher)>($r3);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse [");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }
    public final org.apache.commons.net.util.SubnetUtils$SubnetInfo getInfo()
    {
        org.apache.commons.net.util.SubnetUtils r0;
        org.apache.commons.net.util.SubnetUtils$SubnetInfo $r1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $r1 = new org.apache.commons.net.util.SubnetUtils$SubnetInfo;

        specialinvoke $r1.<org.apache.commons.net.util.SubnetUtils$SubnetInfo: void <init>(org.apache.commons.net.util.SubnetUtils,org.apache.commons.net.util.SubnetUtils$1)>(r0, null);

        return $r1;
    }
    public boolean isInclusiveHostCount()
    {
        org.apache.commons.net.util.SubnetUtils r0;
        boolean z0;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        z0 = r0.<org.apache.commons.net.util.SubnetUtils: boolean inclusiveHostCount>;

        return z0;
    }
    int pop(int)
    {
        org.apache.commons.net.util.SubnetUtils r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.net.util.SubnetUtils;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 1;

        $i1 = $i1 & 1431655765;

        $i1 = $i0 - $i1;

        $i0 = $i1 & 858993459;

        $i1 = $i1 >>> 2;

        $i1 = $i1 & 858993459;

        $i0 = $i0 + $i1;

        $i1 = $i0 >>> 4;

        $i0 = $i1 + $i0;

        $i0 = $i0 & 252645135;

        $i1 = $i0 >>> 8;

        $i0 = $i0 + $i1;

        $i1 = $i0 >>> 16;

        $i0 = $i0 + $i1;

        $i0 = $i0 & 63;

        return $i0;
    }
