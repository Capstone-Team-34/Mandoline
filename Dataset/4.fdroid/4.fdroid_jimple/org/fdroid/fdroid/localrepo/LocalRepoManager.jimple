org.fdroid.fdroid.localrepo.LocalRepoManager extends java.lang.Object
private static final java.lang.String DEFAULT_REPO_MAX_AGE_DAYS
private static final java.lang.String TAG
private static final java.lang.String[] WEB_ROOT_ASSET_FILES
private static org.fdroid.fdroid.localrepo.LocalRepoManager localRepoManager
private final java.util.Map apps
private final android.content.res.AssetManager assetManager
private final android.content.Context context
public final org.fdroid.fdroid.data.SanitizedFile fdroidDir
public final org.fdroid.fdroid.data.SanitizedFile fdroidDirCaps
private final java.lang.String fdroidPackageName
public final org.fdroid.fdroid.data.SanitizedFile iconsDir
private final android.content.pm.PackageManager pm
public final org.fdroid.fdroid.data.SanitizedFile repoDir
public final org.fdroid.fdroid.data.SanitizedFile repoDirCaps
public final org.fdroid.fdroid.data.SanitizedFile webRoot
public final org.fdroid.fdroid.data.SanitizedFile xmlIndex
private final org.fdroid.fdroid.data.SanitizedFile xmlIndexJar
private final org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned
    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "swap-icon.png";

        $r0[1] = "swap-tick-done.png";

        $r0[2] = "swap-tick-not-done.png";

        <org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String[] WEB_ROOT_ASSET_FILES> = $r0;

        return;
    }
    private void <init>(android.content.Context)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        android.content.Context $r1, $r3;
        java.util.HashMap $r2;
        android.content.pm.PackageManager $r4;
        android.content.res.AssetManager $r5;
        java.lang.String $r6;
        java.io.File $r7;
        org.fdroid.fdroid.data.SanitizedFile $r8, $r9;
        boolean $z0;
        java.lang.StringBuilder $r10;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps> = $r2;

        $r3 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.Context context> = $r3;

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm> = $r4;

        $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.AssetManager getAssets()>();

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.res.AssetManager assetManager> = $r5;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String fdroidPackageName> = $r6;

        $r7 = virtualinvoke $r1.<android.content.Context: java.io.File getFilesDir()>();

        $r8 = staticinvoke <org.fdroid.fdroid.data.SanitizedFile: org.fdroid.fdroid.data.SanitizedFile knownSanitized(java.io.File)>($r7);

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "fdroid");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "FDROID");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDirCaps> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "repo");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDirCaps>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "REPO");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDirCaps> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "icons");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile iconsDir> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "index.xml");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndex> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "index.jar");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJar> = $r8;

        $r8 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        specialinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, "index.unsigned.jar");

        r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned> = $r8;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean exists()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean mkdir()>();

        if $z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create empty base: ");

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalRepoManager", $r6);

     label1:
        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean exists()>();

        if $z0 != 0 goto label2;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean mkdir()>();

        if $z0 != 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create empty repo: ");

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalRepoManager", $r6);

     label2:
        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile iconsDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean exists()>();

        if $z0 != 0 goto label3;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile iconsDir>;

        $z0 = virtualinvoke $r8.<org.fdroid.fdroid.data.SanitizedFile: boolean mkdir()>();

        if $z0 != 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create icons folder: ");

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile iconsDir>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalRepoManager", $r6);

     label3:
        return;
    }
    private static void attemptToDelete(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete \"");

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalRepoManager", $r2);

     label1:
        return;
    }
    private static void attemptToMkdir(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t make directory ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it is already a file.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean mkdir()>();

        if $z0 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred trying to create directory ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        return;
    }
    private void deleteContents(java.io.File)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.io.File $r1;
        int i0, i1;
        boolean $z0;
        java.io.File[] $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r1 = $r2[i1];

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void deleteContents(java.io.File)>($r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToDelete(java.io.File)>($r1);

        goto label2;

     label4:
        return;
    }
    public static org.fdroid.fdroid.localrepo.LocalRepoManager get(android.content.Context)
    {
        android.content.Context $r0;
        org.fdroid.fdroid.localrepo.LocalRepoManager $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.localrepo.LocalRepoManager localRepoManager>;

        if $r1 != null goto label1;

        $r1 = new org.fdroid.fdroid.localrepo.LocalRepoManager;

        specialinvoke $r1.<org.fdroid.fdroid.localrepo.LocalRepoManager: void <init>(android.content.Context)>($r0);

        <org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.localrepo.LocalRepoManager localRepoManager> = $r1;

     label1:
        $r1 = <org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.localrepo.LocalRepoManager localRepoManager>;

        return $r1;
    }
    private java.io.File getIconFile(java.lang.String, int)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.lang.String $r1;
        int $i0;
        java.io.File $r2;
        org.fdroid.fdroid.data.SanitizedFile $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.io.File;

        $r3 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile iconsDir>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r1);

        return $r2;
    }
    private void symlinkEntireWebRootElsewhere(java.lang.String, java.io.File)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.lang.String $r1, r4;
        java.io.File $r2;
        java.lang.String[] r3;
        int i0, i1;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.File;

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkFileElsewhere(java.lang.String,java.lang.String,java.io.File)>("index.html", $r1, $r2);

        r3 = <org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String[] WEB_ROOT_ASSET_FILES>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkFileElsewhere(java.lang.String,java.lang.String,java.io.File)>(r4, $r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void symlinkFileElsewhere(java.lang.String, java.lang.String, java.io.File)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.lang.String $r1, $r2;
        java.io.File $r3, $r6;
        org.fdroid.fdroid.data.SanitizedFile r4, $r5;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.io.File;

        r4 = new org.fdroid.fdroid.data.SanitizedFile;

        specialinvoke r4.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r3, $r1);

        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToDelete(java.io.File)>(r4);

        $r5 = new org.fdroid.fdroid.data.SanitizedFile;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r2);

        specialinvoke $r5.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r6, $r1);

        staticinvoke <org.fdroid.fdroid.Utils: boolean symlinkOrCopyFileQuietly(org.fdroid.fdroid.data.SanitizedFile,org.fdroid.fdroid.data.SanitizedFile)>($r5, r4);

        return;
    }
    private java.lang.String writeFdroidApkToWebroot()
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        org.fdroid.fdroid.data.SanitizedFile r2, $r6, $r7;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;
        android.content.pm.ApplicationInfo $r5;
        boolean $z0;
        java.lang.StringBuilder $r8;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r3 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm>;

        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String fdroidPackageName>;

     label01:
        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r4, 128);

     label02:
        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

     label03:
        $r6 = staticinvoke <org.fdroid.fdroid.data.SanitizedFile: org.fdroid.fdroid.data.SanitizedFile knownSanitized(java.lang.String)>($r4);

     label04:
        r2 = new org.fdroid.fdroid.data.SanitizedFile;

        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot>;

     label05:
        specialinvoke r2.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r7, "fdroid.client.apk");

        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToDelete(java.io.File)>(r2);

        $z0 = staticinvoke <org.fdroid.fdroid.Utils: boolean symlinkOrCopyFileQuietly(org.fdroid.fdroid.data.SanitizedFile,org.fdroid.fdroid.data.SanitizedFile)>($r6, r2);

     label06:
        if $z0 == 0 goto label10;

        $r8 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = virtualinvoke r2.<org.fdroid.fdroid.data.SanitizedFile: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        return $r4;

     label09:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Could not set up F-Droid apk in the webroot", r1);

     label10:
        return "https://f-droid.org/FDroid.apk";

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label09;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label09;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label09;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label09;
    }
    public void addApp(android.content.Context, java.lang.String)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        android.content.Context $r1;
        java.lang.String $r2, $r7;
        android.content.pm.PackageManager $r4;
        boolean $z0;
        android.content.pm.PackageInfo $r5;
        int $i0;
        java.io.File $r6;
        java.lang.StringBuilder $r8, $r12;
        java.util.Map $r9;
        java.lang.Object r10;
        org.fdroid.fdroid.data.App $r11;
        java.lang.Throwable $r13;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r11 = new org.fdroid.fdroid.data.App;

     label01:
        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

     label02:
        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm>;

     label03:
        specialinvoke $r11.<org.fdroid.fdroid.data.App: void <init>(android.content.Context,android.content.pm.PackageManager,java.lang.String)>($r1, $r4, $r2);

        $z0 = virtualinvoke $r11.<org.fdroid.fdroid.data.App: boolean isValid()>();

     label04:
        if $z0 != 0 goto label05;

        return;

     label05:
        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm>;

     label06:
        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 128);

     label07:
        $i0 = $r5.<android.content.pm.PackageInfo: int versionCode>;

     label08:
        $r6 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.io.File getIconFile(java.lang.String,int)>($r2, $i0);

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

     label09:
        $r11.<org.fdroid.fdroid.data.App: java.lang.String icon> = $r7;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("apps.put: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("LocalRepoManager", $r7);

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r11);

        return;

     label10:
        r10 := @caughtexception;

     label11:
        $r13 = (java.lang.Throwable) r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Error adding app to local repo", $r13);

        return;

     label12:
        r10 := @caughtexception;

        goto label11;

     label13:
        r10 := @caughtexception;

        goto label11;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label13;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label13;
        catch java.security.cert.CertificateEncodingException from label01 to label02 with label10;
        catch java.security.cert.CertificateEncodingException from label03 to label04 with label10;
        catch java.security.cert.CertificateEncodingException from label06 to label07 with label10;
        catch java.security.cert.CertificateEncodingException from label08 to label09 with label10;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
    }
    public void copyApksToRepo()
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.util.ArrayList $r1;
        java.util.Set $r2;
        java.util.Map $r3;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void copyApksToRepo(java.util.List)>($r1);

        return;
    }
    public void copyApksToRepo(java.util.List)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.util.List r1;
        org.fdroid.fdroid.data.SanitizedFile r2, $r9;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;
        java.util.Map $r6;
        org.fdroid.fdroid.data.App r7;
        org.fdroid.fdroid.data.Apk $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        r1 := @parameter0: java.util.List;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        $r4 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (org.fdroid.fdroid.data.App) $r4;

        $r8 = r7.<org.fdroid.fdroid.data.App: org.fdroid.fdroid.data.Apk installedApk>;

        if $r8 == null goto label2;

        r2 = new org.fdroid.fdroid.data.SanitizedFile;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        $r8 = r7.<org.fdroid.fdroid.data.App: org.fdroid.fdroid.data.Apk installedApk>;

        r5 = $r8.<org.fdroid.fdroid.data.Apk: java.lang.String apkName>;

        specialinvoke r2.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r9, r5);

        $r8 = r7.<org.fdroid.fdroid.data.App: org.fdroid.fdroid.data.Apk installedApk>;

        $r9 = $r8.<org.fdroid.fdroid.data.Apk: org.fdroid.fdroid.data.SanitizedFile installedFile>;

        $z0 = staticinvoke <org.fdroid.fdroid.Utils: boolean symlinkOrCopyFileQuietly(org.fdroid.fdroid.data.SanitizedFile,org.fdroid.fdroid.data.SanitizedFile)>($r9, r2);

        if $z0 != 0 goto label1;

     label2:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to copy APK");

        throw $r10;

     label3:
        return;
    }
    public void copyIconToRepo(android.graphics.drawable.Drawable, java.lang.String, int)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        android.graphics.Canvas r2;
        java.lang.Exception r3;
        java.io.BufferedOutputStream r4;
        android.graphics.Bitmap$Config $r5;
        android.graphics.drawable.Drawable r6;
        boolean $z0;
        android.graphics.drawable.BitmapDrawable r7;
        android.graphics.Bitmap $r8, $r12;
        java.io.File $r9;
        java.io.FileOutputStream $r10;
        android.graphics.Bitmap$CompressFormat $r11;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        r6 := @parameter0: android.graphics.drawable.Drawable;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 = r6 instanceof android.graphics.drawable.BitmapDrawable;

        if $z0 == 0 goto label6;

        r7 = (android.graphics.drawable.BitmapDrawable) r6;

        $r8 = virtualinvoke r7.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

     label1:
        $r9 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.io.File getIconFile(java.lang.String,int)>($r1, $i0);

        r4 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

     label2:
        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

     label3:
        $r11 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

     label4:
        virtualinvoke $r8.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r11, 100, r4);

        virtualinvoke r4.<java.io.OutputStream: void close()>();

     label5:
        return;

     label6:
        $i1 = virtualinvoke r6.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i2 = virtualinvoke r6.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r12 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i1, $i2, $r5);

        $r8 = $r12;

        r2 = new android.graphics.Canvas;

        specialinvoke r2.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r12);

        $i1 = virtualinvoke r2.<android.graphics.Canvas: int getWidth()>();

        $i2 = virtualinvoke r2.<android.graphics.Canvas: int getHeight()>();

        virtualinvoke r6.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i1, $i2);

        virtualinvoke r6.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r2);

        goto label1;

     label7:
        r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Error copying icon to repo", r3);

        return;

        catch java.lang.Exception from label2 to label3 with label7;
        catch java.lang.Exception from label4 to label5 with label7;
    }
    public void copyIconsToRepo()
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.fdroid.fdroid.data.App r6;
        org.fdroid.fdroid.data.Apk $r7;
        android.content.pm.PackageManager $r8;
        java.lang.String $r9;
        android.content.pm.ApplicationInfo $r10;
        android.graphics.drawable.Drawable $r11;
        int $i0;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r2 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.fdroid.fdroid.data.App) $r5;

        $r7 = r6.<org.fdroid.fdroid.data.App: org.fdroid.fdroid.data.Apk installedApk>;

        if $r7 == null goto label1;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm>;

        $r9 = r6.<org.fdroid.fdroid.data.App: java.lang.String packageName>;

     label2:
        $r10 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r9, 128);

     label3:
        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.pm.PackageManager pm>;

     label4:
        $r11 = virtualinvoke $r10.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>($r8);

     label5:
        $r9 = r6.<org.fdroid.fdroid.data.App: java.lang.String packageName>;

        $r7 = r6.<org.fdroid.fdroid.data.App: org.fdroid.fdroid.data.Apk installedApk>;

        $i0 = $r7.<org.fdroid.fdroid.data.Apk: int vercode>;

     label6:
        virtualinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void copyIconToRepo(android.graphics.drawable.Drawable,java.lang.String,int)>($r11, $r9, $i0);

     label7:
        goto label1;

     label8:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Error getting app icon", r1);

        goto label1;

     label9:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label8;
        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label8;
        catch android.content.pm.PackageManager$NameNotFoundException from label6 to label7 with label8;
    }
    public void deleteRepo()
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        org.fdroid.fdroid.data.SanitizedFile $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void deleteContents(java.io.File)>($r1);

        return;
    }
    public java.util.List getApps()
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.util.ArrayList $r1;
        java.util.Set $r2;
        java.util.Map $r3;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 = new java.util.ArrayList;

        $r3 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
    public void writeIndexJar() throws java.io.IOException
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.io.BufferedInputStream r1;
        java.io.BufferedOutputStream r2;
        byte[] r3;
        java.util.jar.JarEntry r4;
        java.util.jar.JarOutputStream r5;
        org.fdroid.fdroid.localrepo.LocalRepoManager$IndexXmlBuilder $r6;
        android.content.Context $r7;
        java.util.Map $r8;
        org.fdroid.fdroid.data.SanitizedFile $r9, $r15;
        java.io.FileOutputStream $r10;
        java.io.FileInputStream $r11;
        int $i0;
        java.lang.Exception r12;
        android.widget.Toast $r13;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore $r14;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException r16;
        java.io.IOException $r17;
        java.lang.Throwable $r18;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r6 = new org.fdroid.fdroid.localrepo.LocalRepoManager$IndexXmlBuilder;

     label01:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.Context context>;

        $r8 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.util.Map apps>;

        specialinvoke $r6.<org.fdroid.fdroid.localrepo.LocalRepoManager$IndexXmlBuilder: void <init>(android.content.Context,java.util.Map)>($r7, $r8);

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndex>;

        virtualinvoke $r6.<org.fdroid.fdroid.localrepo.LocalRepoManager$IndexXmlBuilder: void build(java.io.File)>($r9);

     label02:
        r2 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned>;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

        r5 = new java.util.jar.JarOutputStream;

        specialinvoke r5.<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>(r2);

        r1 = new java.io.BufferedInputStream;

        $r11 = new java.io.FileInputStream;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndex>;

        specialinvoke $r11.<java.io.FileInputStream: void <init>(java.io.File)>($r9);

        specialinvoke r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r11);

        r4 = new java.util.jar.JarEntry;

        specialinvoke r4.<java.util.jar.JarEntry: void <init>(java.lang.String)>("index.xml");

        virtualinvoke r5.<java.util.jar.JarOutputStream: void putNextEntry(java.util.zip.ZipEntry)>(r4);

        r3 = newarray (byte)[1024];

     label03:
        $i0 = virtualinvoke r1.<java.io.BufferedInputStream: int read(byte[])>(r3);

        if $i0 == -1 goto label05;

        virtualinvoke r5.<java.util.jar.JarOutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        goto label03;

     label04:
        r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Could not write index jar", r12);

        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.Context context>;

        $r13 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>($r7, 2131165321, 1);

        virtualinvoke $r13.<android.widget.Toast: void show()>();

        return;

     label05:
        virtualinvoke r1.<java.io.BufferedInputStream: void close()>();

        virtualinvoke r5.<java.util.jar.JarOutputStream: void close()>();

        virtualinvoke r2.<java.io.BufferedOutputStream: void close()>();

     label06:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.Context context>;

     label07:
        $r14 = staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoKeyStore: org.fdroid.fdroid.localrepo.LocalRepoKeyStore get(android.content.Context)>($r7);

     label08:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned>;

        $r15 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJar>;

     label09:
        virtualinvoke $r14.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: void signZip(java.io.File,java.io.File)>($r9, $r15);

     label10:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned>;

        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToDelete(java.io.File)>($r9);

        return;

     label11:
        r16 := @caughtexception;

     label12:
        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Could not sign index - keystore failed to initialize");

        throw $r17;

     label13:
        $r18 := @caughtexception;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile xmlIndexJarUnsigned>;

        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToDelete(java.io.File)>($r9);

        throw $r18;

        catch java.lang.Exception from label01 to label02 with label04;
        catch org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException from label07 to label08 with label11;
        catch org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }
    public void writeIndexPage(java.lang.String)
    {
        org.fdroid.fdroid.localrepo.LocalRepoManager r0;
        java.lang.String $r1, $r8, $r14;
        java.lang.String[] r2;
        java.io.FileOutputStream r3;
        java.io.IOException r4;
        java.io.BufferedReader r5;
        java.io.File r6;
        int i0, i1;
        java.io.BufferedWriter r7;
        org.fdroid.fdroid.data.SanitizedFile $r9;
        java.io.InputStreamReader $r10;
        android.content.res.AssetManager $r11;
        java.io.InputStream $r12;
        java.io.OutputStreamWriter $r13;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoManager;

        $r1 := @parameter0: java.lang.String;

        $r8 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String writeFdroidApkToWebroot()>();

        r6 = new java.io.File;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot>;

     label01:
        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "index.html");

     label02:
        r5 = new java.io.BufferedReader;

        $r10 = new java.io.InputStreamReader;

        $r11 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.res.AssetManager assetManager>;

     label03:
        $r12 = virtualinvoke $r11.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>("index.template.html");

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r12, "UTF-8");

        specialinvoke r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10);

     label04:
        r7 = new java.io.BufferedWriter;

        $r13 = new java.io.OutputStreamWriter;

        r3 = new java.io.FileOutputStream;

     label05:
        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r6);

        specialinvoke $r13.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r3);

        specialinvoke r7.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r13);

     label06:
        $r14 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

     label07:
        if $r14 == null goto label11;

     label08:
        $r14 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\{\\{REPO_URL\\}\\}", $r1);

        $r14 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\{\\{CLIENT_URL\\}\\}", $r8);

        virtualinvoke r7.<java.io.BufferedWriter: void write(java.lang.String)>($r14);

     label09:
        goto label06;

     label10:
        r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoManager", "Error writing local repo index", r4);

        return;

     label11:
        virtualinvoke r5.<java.io.BufferedReader: void close()>();

        virtualinvoke r7.<java.io.BufferedWriter: void close()>();

     label12:
        r2 = <org.fdroid.fdroid.localrepo.LocalRepoManager: java.lang.String[] WEB_ROOT_ASSET_FILES>;

        i0 = lengthof r2;

        i1 = 0;

     label13:
        if i1 >= i0 goto label18;

        $r1 = r2[i1];

        $r11 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: android.content.res.AssetManager assetManager>;

     label14:
        $r12 = virtualinvoke $r11.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r1);

     label15:
        r3 = new java.io.FileOutputStream;

        r6 = new java.io.File;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile webRoot>;

     label16:
        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r1);

        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r6);

        staticinvoke <org.fdroid.fdroid.Utils: void copy(java.io.InputStream,java.io.OutputStream)>($r12, r3);

        virtualinvoke $r12.<java.io.InputStream: void close()>();

        virtualinvoke r3.<java.io.OutputStream: void close()>();

     label17:
        i1 = i1 + 1;

        goto label13;

     label18:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDir>;

     label19:
        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkEntireWebRootElsewhere(java.lang.String,java.io.File)>("../", $r9);

     label20:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDir>;

     label21:
        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkEntireWebRootElsewhere(java.lang.String,java.io.File)>("../../", $r9);

     label22:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDirCaps>;

     label23:
        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToMkdir(java.io.File)>($r9);

     label24:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDirCaps>;

     label25:
        staticinvoke <org.fdroid.fdroid.localrepo.LocalRepoManager: void attemptToMkdir(java.io.File)>($r9);

     label26:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile fdroidDirCaps>;

     label27:
        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkEntireWebRootElsewhere(java.lang.String,java.io.File)>("../", $r9);

     label28:
        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: org.fdroid.fdroid.data.SanitizedFile repoDirCaps>;

     label29:
        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoManager: void symlinkEntireWebRootElsewhere(java.lang.String,java.io.File)>("../../", $r9);

     label30:
        return;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label11 to label12 with label10;
        catch java.io.IOException from label14 to label15 with label10;
        catch java.io.IOException from label16 to label17 with label10;
        catch java.io.IOException from label19 to label20 with label10;
        catch java.io.IOException from label21 to label22 with label10;
        catch java.io.IOException from label23 to label24 with label10;
        catch java.io.IOException from label25 to label26 with label10;
        catch java.io.IOException from label27 to label28 with label10;
        catch java.io.IOException from label29 to label30 with label10;
    }
