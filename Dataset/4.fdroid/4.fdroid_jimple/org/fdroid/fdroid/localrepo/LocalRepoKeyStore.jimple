org.fdroid.fdroid.localrepo.LocalRepoKeyStore extends java.lang.Object
private static final java.lang.String DEFAULT_INDEX_CERT_INFO
private static final java.lang.String DEFAULT_KEY_ALGO
private static final int DEFAULT_KEY_BITS
private static final java.lang.String DEFAULT_SIG_ALG
public static final java.lang.String HTTP_CERT_ALIAS
public static final java.lang.String INDEX_CERT_ALIAS
private static final java.lang.String TAG
private static org.fdroid.fdroid.localrepo.LocalRepoKeyStore localRepoKeyStore
private javax.net.ssl.KeyManager[] keyManagers
private java.security.KeyStore keyStore
private java.io.File keyStoreFile
    private void <init>(android.content.Context) throws org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        android.content.Context $r1;
        java.io.File $r4, $r23;
        java.lang.StringBuilder $r5, $r22;
        java.lang.String $r6;
        java.security.KeyStore $r7;
        boolean $z0;
        java.io.FileInputStream r8, $r24;
        char[] $r9;
        java.security.Key $r10;
        java.security.KeyPair $r11;
        java.security.cert.Certificate $r12;
        javax.net.ssl.KeyManagerFactory $r13;
        javax.net.ssl.KeyManager[] $r14;
        javax.net.ssl.KeyManager r15;
        javax.net.ssl.X509KeyManager r16;
        java.lang.Object[] $r17;
        java.io.IOException r18;
        java.lang.Throwable $r20, $r28;
        java.lang.Object r21;
        org.spongycastle.asn1.x500.X500Name $r25;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager $r26;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException $r27;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r4 = virtualinvoke $r1.<android.content.Context: java.io.File getDir(java.lang.String,int)>("keystore", 0);

     label02:
        $r22 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generating LocalRepoKeyStore instance: ");

        $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("LocalRepoKeyStore", $r6);

     label04:
        $r23 = new java.io.File;

     label05:
        specialinvoke $r23.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "kerplapp.bks");

     label06:
        r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile> = $r23;

        $r22 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using default KeyStore type: ");

        $r6 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("LocalRepoKeyStore", $r6);

        $r6 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r6);

     label08:
        r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore> = $r7;

        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile>;

     label09:
        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

     label10:
        if $z0 == 0 goto label19;

        r8 = null;

     label11:
        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("LocalRepoKeyStore", "Keystore already exists, loading...");

     label12:
        $r24 = new java.io.FileInputStream;

     label13:
        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile>;

     label14:
        specialinvoke $r24.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

     label15:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

     label16:
        $r6 = "";

     label17:
        $r9 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r7.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r24, $r9);

     label18:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>($r24);

     label19:
        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile>;

     label20:
        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

     label21:
        if $z0 != 0 goto label25;

     label22:
        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("LocalRepoKeyStore", "Keystore doesn\'t exist, creating...");

     label23:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r6 = "";

     label24:
        $r9 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r7.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, $r9);

     label25:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r6 = "";

     label26:
        $r9 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        $r10 = virtualinvoke $r7.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>("fdroid", $r9);

     label27:
        if $r10 != null goto label31;

     label28:
        $r11 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyPair generateRandomKeypair()>();

     label29:
        $r25 = new org.spongycastle.asn1.x500.X500Name;

     label30:
        specialinvoke $r25.<org.spongycastle.asn1.x500.X500Name: void <init>(java.lang.String)>("O=Kerplapp,OU=GuardianProject");

        $r12 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.cert.Certificate generateSelfSignedCertChain(java.security.KeyPair,org.spongycastle.asn1.x500.X500Name)>($r11, $r25);

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: void addToStore(java.lang.String,java.security.KeyPair,java.security.cert.Certificate)>("fdroid", $r11, $r12);

     label31:
        $r6 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r13 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r6);

     label32:
        $r7 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r6 = "";

     label33:
        $r9 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r13.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r7, $r9);

        $r14 = virtualinvoke $r13.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label34:
        r15 = $r14[0];

        $r26 = new org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager;

        r16 = (javax.net.ssl.X509KeyManager) r15;

     label35:
        specialinvoke $r26.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager: void <init>(javax.net.ssl.X509KeyManager,org.fdroid.fdroid.localrepo.LocalRepoKeyStore$1)>(r16, null);

     label36:
        $r17 = newarray (javax.net.ssl.KeyManager)[1];

        $r17[0] = $r26;

        $r14 = (javax.net.ssl.KeyManager[]) $r17;

        r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: javax.net.ssl.KeyManager[] keyManagers> = $r14;

        return;

     label37:
        r18 := @caughtexception;

     label38:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalRepoKeyStore", "Error while loading existing keystore. Will delete and create a new one.");

        $r27 = new org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException;

     label39:
        $r22 = new java.lang.StringBuilder;

     label40:
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not initialize local repo keystore: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException: void <init>(java.lang.String)>($r6);

        throw $r27;

     label41:
        $r20 := @caughtexception;

     label42:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r8);

        throw $r20;

     label43:
        r21 := @caughtexception;

     label44:
        $r28 = (java.lang.Throwable) r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoKeyStore", "Error loading keystore", $r28);

        return;

     label45:
        r21 := @caughtexception;

        goto label44;

     label46:
        r21 := @caughtexception;

        goto label44;

     label47:
        r21 := @caughtexception;

        goto label44;

     label48:
        r21 := @caughtexception;

        goto label44;

     label49:
        r21 := @caughtexception;

        goto label44;

     label50:
        $r20 := @caughtexception;

        r8 = $r24;

        goto label42;

     label51:
        r18 := @caughtexception;

        r8 = $r24;

        goto label38;

        catch java.security.UnrecoverableKeyException from label01 to label02 with label43;
        catch java.security.UnrecoverableKeyException from label03 to label04 with label43;
        catch java.security.UnrecoverableKeyException from label05 to label06 with label43;
        catch java.security.UnrecoverableKeyException from label07 to label08 with label43;
        catch java.security.UnrecoverableKeyException from label09 to label10 with label43;
        catch java.security.KeyStoreException from label01 to label02 with label49;
        catch java.security.KeyStoreException from label03 to label04 with label49;
        catch java.security.KeyStoreException from label05 to label06 with label49;
        catch java.security.KeyStoreException from label07 to label08 with label49;
        catch java.security.KeyStoreException from label09 to label10 with label49;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label46;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label46;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label46;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label46;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label46;
        catch java.security.cert.CertificateException from label01 to label02 with label47;
        catch java.security.cert.CertificateException from label03 to label04 with label47;
        catch java.security.cert.CertificateException from label05 to label06 with label47;
        catch java.security.cert.CertificateException from label07 to label08 with label47;
        catch java.security.cert.CertificateException from label09 to label10 with label47;
        catch org.spongycastle.operator.OperatorCreationException from label01 to label02 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label03 to label04 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label05 to label06 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label07 to label08 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label09 to label10 with label45;
        catch java.io.IOException from label01 to label02 with label48;
        catch java.io.IOException from label03 to label04 with label48;
        catch java.io.IOException from label05 to label06 with label48;
        catch java.io.IOException from label07 to label08 with label48;
        catch java.io.IOException from label09 to label10 with label48;
        catch java.io.IOException from label11 to label12 with label37;
        catch java.io.IOException from label14 to label15 with label37;
        catch java.lang.Throwable from label11 to label13 with label41;
        catch java.lang.Throwable from label13 to label15 with label41;
        catch java.io.IOException from label17 to label18 with label51;
        catch java.lang.Throwable from label15 to label16 with label50;
        catch java.lang.Throwable from label17 to label18 with label50;
        catch java.security.UnrecoverableKeyException from label18 to label19 with label43;
        catch java.security.UnrecoverableKeyException from label20 to label21 with label43;
        catch java.security.UnrecoverableKeyException from label22 to label23 with label43;
        catch java.security.UnrecoverableKeyException from label24 to label25 with label43;
        catch java.security.UnrecoverableKeyException from label26 to label27 with label43;
        catch java.security.UnrecoverableKeyException from label28 to label29 with label43;
        catch java.security.UnrecoverableKeyException from label30 to label32 with label43;
        catch java.security.UnrecoverableKeyException from label33 to label34 with label43;
        catch java.security.UnrecoverableKeyException from label35 to label36 with label43;
        catch java.security.KeyStoreException from label18 to label19 with label49;
        catch java.security.KeyStoreException from label20 to label21 with label49;
        catch java.security.KeyStoreException from label22 to label23 with label49;
        catch java.security.KeyStoreException from label24 to label25 with label49;
        catch java.security.KeyStoreException from label26 to label27 with label49;
        catch java.security.KeyStoreException from label28 to label29 with label49;
        catch java.security.KeyStoreException from label30 to label32 with label49;
        catch java.security.KeyStoreException from label33 to label34 with label49;
        catch java.security.KeyStoreException from label35 to label36 with label49;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label46;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label46;
        catch java.security.NoSuchAlgorithmException from label22 to label23 with label46;
        catch java.security.NoSuchAlgorithmException from label24 to label25 with label46;
        catch java.security.NoSuchAlgorithmException from label26 to label27 with label46;
        catch java.security.NoSuchAlgorithmException from label28 to label29 with label46;
        catch java.security.NoSuchAlgorithmException from label30 to label32 with label46;
        catch java.security.NoSuchAlgorithmException from label33 to label34 with label46;
        catch java.security.NoSuchAlgorithmException from label35 to label36 with label46;
        catch java.security.cert.CertificateException from label18 to label19 with label47;
        catch java.security.cert.CertificateException from label20 to label21 with label47;
        catch java.security.cert.CertificateException from label22 to label23 with label47;
        catch java.security.cert.CertificateException from label24 to label25 with label47;
        catch java.security.cert.CertificateException from label26 to label27 with label47;
        catch java.security.cert.CertificateException from label28 to label29 with label47;
        catch java.security.cert.CertificateException from label30 to label32 with label47;
        catch java.security.cert.CertificateException from label33 to label34 with label47;
        catch java.security.cert.CertificateException from label35 to label36 with label47;
        catch org.spongycastle.operator.OperatorCreationException from label18 to label19 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label20 to label21 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label22 to label23 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label24 to label25 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label26 to label27 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label28 to label29 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label30 to label32 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label33 to label34 with label45;
        catch org.spongycastle.operator.OperatorCreationException from label35 to label36 with label45;
        catch java.io.IOException from label18 to label19 with label48;
        catch java.io.IOException from label20 to label21 with label48;
        catch java.io.IOException from label22 to label23 with label48;
        catch java.io.IOException from label24 to label25 with label48;
        catch java.io.IOException from label26 to label27 with label48;
        catch java.io.IOException from label28 to label29 with label48;
        catch java.io.IOException from label30 to label32 with label48;
        catch java.io.IOException from label33 to label34 with label48;
        catch java.io.IOException from label35 to label36 with label48;
        catch java.lang.Throwable from label38 to label39 with label41;
        catch java.lang.Throwable from label39 to label40 with label41;
        catch java.lang.Throwable from label40 to label41 with label41;
        catch java.security.UnrecoverableKeyException from label42 to label43 with label43;
        catch java.security.KeyStoreException from label42 to label43 with label49;
        catch java.security.NoSuchAlgorithmException from label42 to label43 with label46;
        catch java.security.cert.CertificateException from label42 to label43 with label47;
        catch org.spongycastle.operator.OperatorCreationException from label42 to label43 with label45;
        catch java.io.IOException from label42 to label43 with label48;
    }
    private void addToStore(java.lang.String, java.security.KeyPair, java.security.cert.Certificate) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException, java.io.IOException, java.security.UnrecoverableKeyException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.lang.String $r1, $r7;
        java.security.KeyPair $r2;
        java.security.cert.Certificate $r3;
        java.security.cert.Certificate[] r4;
        java.security.KeyStore $r5;
        java.security.PrivateKey $r6;
        char[] $r8;
        java.io.File $r9;
        javax.net.ssl.KeyManagerFactory $r10;
        javax.net.ssl.KeyManager[] $r11;
        javax.net.ssl.KeyManager r12;
        javax.net.ssl.X509KeyManager r13;
        java.lang.Object[] $r14;
        java.io.FileOutputStream $r15;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager $r16;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyPair;

        $r3 := @parameter2: java.security.cert.Certificate;

        r4 = newarray (java.security.cert.Certificate)[1];

        r4[0] = $r3;

        $r5 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r6 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r7 = "";

        $r8 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r5.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>($r1, $r6, $r8, r4);

        $r5 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r15 = new java.io.FileOutputStream;

        $r9 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile>;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        $r1 = "";

        $r8 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r5.<java.security.KeyStore: void store(java.io.OutputStream,char[])>($r15, $r8);

        $r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r10 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r1);

        $r5 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r1 = "";

        $r8 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r10.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r5, $r8);

        $r11 = virtualinvoke $r10.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        r12 = $r11[0];

        $r16 = new org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager;

        r13 = (javax.net.ssl.X509KeyManager) r12;

        specialinvoke $r16.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore$KerplappKeyManager: void <init>(javax.net.ssl.X509KeyManager,org.fdroid.fdroid.localrepo.LocalRepoKeyStore$1)>(r13, null);

        $r14 = newarray (javax.net.ssl.KeyManager)[1];

        $r14[0] = $r16;

        $r11 = (javax.net.ssl.KeyManager[]) $r14;

        r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: javax.net.ssl.KeyManager[] keyManagers> = $r11;

        return;
    }
    private java.security.KeyPair generateRandomKeypair() throws java.security.NoSuchAlgorithmException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.KeyPairGenerator $r1;
        java.security.KeyPair $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("RSA");

        virtualinvoke $r1.<java.security.KeyPairGenerator: void initialize(int)>(2048);

        $r2 = virtualinvoke $r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        return $r2;
    }
    private java.security.cert.Certificate generateSelfSignedCertChain(java.security.KeyPair, org.spongycastle.asn1.x500.X500Name) throws java.security.cert.CertificateException, org.spongycastle.operator.OperatorCreationException, java.io.IOException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.KeyPair $r1;
        org.spongycastle.asn1.x500.X500Name $r2;
        java.security.cert.Certificate $r3;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 := @parameter0: java.security.KeyPair;

        $r2 := @parameter1: org.spongycastle.asn1.x500.X500Name;

        $r3 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.cert.Certificate generateSelfSignedCertChain(java.security.KeyPair,org.spongycastle.asn1.x500.X500Name,java.lang.String)>($r1, $r2, null);

        return $r3;
    }
    private java.security.cert.Certificate generateSelfSignedCertChain(java.security.KeyPair, org.spongycastle.asn1.x500.X500Name, java.lang.String) throws java.security.cert.CertificateException, org.spongycastle.operator.OperatorCreationException, java.io.IOException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.KeyPair $r1;
        org.spongycastle.asn1.x500.X500Name $r2;
        java.lang.String $r3;
        org.spongycastle.cert.X509v3CertificateBuilder r4;
        org.spongycastle.asn1.x509.Time r5, r6;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo r7;
        java.util.GregorianCalendar r8;
        java.util.Date r9;
        java.security.SecureRandom r10;
        org.spongycastle.asn1.x509.GeneralNames r11;
        java.security.PrivateKey $r12;
        java.security.PublicKey $r13;
        org.spongycastle.operator.jcajce.JcaContentSignerBuilder $r14;
        org.spongycastle.operator.ContentSigner $r15;
        byte[] $r16;
        org.spongycastle.asn1.ASN1Sequence $r17;
        java.util.Locale $r18;
        long $l0;
        java.math.BigInteger $r19;
        org.spongycastle.asn1.x509.GeneralName $r20;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r21;
        org.spongycastle.cert.X509CertificateHolder $r22;
        org.spongycastle.cert.jcajce.JcaX509CertificateConverter $r23;
        java.security.cert.X509Certificate $r24;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 := @parameter0: java.security.KeyPair;

        $r2 := @parameter1: org.spongycastle.asn1.x500.X500Name;

        $r3 := @parameter2: java.lang.String;

        r10 = new java.security.SecureRandom;

        specialinvoke r10.<java.security.SecureRandom: void <init>()>();

        $r12 = virtualinvoke $r1.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r13 = virtualinvoke $r1.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r14 = new org.spongycastle.operator.jcajce.JcaContentSignerBuilder;

        specialinvoke $r14.<org.spongycastle.operator.jcajce.JcaContentSignerBuilder: void <init>(java.lang.String)>("SHA1withRSA");

        $r15 = virtualinvoke $r14.<org.spongycastle.operator.jcajce.JcaContentSignerBuilder: org.spongycastle.operator.ContentSigner build(java.security.PrivateKey)>($r12);

        r7 = new org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r16 = interfaceinvoke $r13.<java.security.PublicKey: byte[] getEncoded()>();

        $r17 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r16);

        specialinvoke r7.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r17);

        r9 = new java.util.Date;

        specialinvoke r9.<java.util.Date: void <init>()>();

        r8 = new java.util.GregorianCalendar;

        $r18 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke r8.<java.util.GregorianCalendar: void <init>(java.util.Locale)>($r18);

        virtualinvoke r8.<java.util.Calendar: void setTime(java.util.Date)>(r9);

        virtualinvoke r8.<java.util.Calendar: void add(int,int)>(1, 1);

        r5 = new org.spongycastle.asn1.x509.Time;

        $r18 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke r5.<org.spongycastle.asn1.x509.Time: void <init>(java.util.Date,java.util.Locale)>(r9, $r18);

        r6 = new org.spongycastle.asn1.x509.Time;

        r9 = virtualinvoke r8.<java.util.Calendar: java.util.Date getTime()>();

        $r18 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke r6.<org.spongycastle.asn1.x509.Time: void <init>(java.util.Date,java.util.Locale)>(r9, $r18);

        r4 = new org.spongycastle.cert.X509v3CertificateBuilder;

        $l0 = virtualinvoke r10.<java.security.SecureRandom: long nextLong()>();

        $r19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        specialinvoke r4.<org.spongycastle.cert.X509v3CertificateBuilder: void <init>(org.spongycastle.asn1.x500.X500Name,java.math.BigInteger,org.spongycastle.asn1.x509.Time,org.spongycastle.asn1.x509.Time,org.spongycastle.asn1.x500.X500Name,org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r2, $r19, r5, r6, $r2, r7);

        if $r3 == null goto label1;

        r11 = new org.spongycastle.asn1.x509.GeneralNames;

        $r20 = new org.spongycastle.asn1.x509.GeneralName;

        specialinvoke $r20.<org.spongycastle.asn1.x509.GeneralName: void <init>(int,java.lang.String)>(7, $r3);

        specialinvoke r11.<org.spongycastle.asn1.x509.GeneralNames: void <init>(org.spongycastle.asn1.x509.GeneralName)>($r20);

        $r21 = <org.spongycastle.asn1.x509.X509Extension: org.spongycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName>;

        virtualinvoke r4.<org.spongycastle.cert.X509v3CertificateBuilder: org.spongycastle.cert.X509v3CertificateBuilder addExtension(org.spongycastle.asn1.ASN1ObjectIdentifier,boolean,org.spongycastle.asn1.ASN1Encodable)>($r21, 0, r11);

     label1:
        $r22 = virtualinvoke r4.<org.spongycastle.cert.X509v3CertificateBuilder: org.spongycastle.cert.X509CertificateHolder build(org.spongycastle.operator.ContentSigner)>($r15);

        $r23 = new org.spongycastle.cert.jcajce.JcaX509CertificateConverter;

        specialinvoke $r23.<org.spongycastle.cert.jcajce.JcaX509CertificateConverter: void <init>()>();

        $r24 = virtualinvoke $r23.<org.spongycastle.cert.jcajce.JcaX509CertificateConverter: java.security.cert.X509Certificate getCertificate(org.spongycastle.cert.X509CertificateHolder)>($r22);

        return $r24;
    }
    public static org.fdroid.fdroid.localrepo.LocalRepoKeyStore get(android.content.Context) throws org.fdroid.fdroid.localrepo.LocalRepoKeyStore$InitException
    {
        android.content.Context $r0;
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <org.fdroid.fdroid.localrepo.LocalRepoKeyStore: org.fdroid.fdroid.localrepo.LocalRepoKeyStore localRepoKeyStore>;

        if $r1 != null goto label1;

        $r1 = new org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        specialinvoke $r1.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: void <init>(android.content.Context)>($r0);

        <org.fdroid.fdroid.localrepo.LocalRepoKeyStore: org.fdroid.fdroid.localrepo.LocalRepoKeyStore localRepoKeyStore> = $r1;

     label1:
        $r1 = <org.fdroid.fdroid.localrepo.LocalRepoKeyStore: org.fdroid.fdroid.localrepo.LocalRepoKeyStore localRepoKeyStore>;

        return $r1;
    }
    private java.security.KeyPair getKerplappKeypair() throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.KeyStore $r1;
        java.lang.String $r2;
        char[] $r3;
        java.security.Key $r4;
        boolean $z0;
        java.security.cert.Certificate $r5;
        java.security.PublicKey $r6;
        java.security.KeyPair $r7;
        java.security.PrivateKey r8;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r2 = "";

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke $r1.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>("fdroid", $r3);

        $z0 = $r4 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r5 = virtualinvoke $r1.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>("fdroid");

        $r6 = virtualinvoke $r5.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $r7 = new java.security.KeyPair;

        r8 = (java.security.PrivateKey) $r4;

        specialinvoke $r7.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, r8);

        return $r7;

     label1:
        return null;
    }
    public java.security.cert.Certificate getCertificate()
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.GeneralSecurityException r1;
        java.security.KeyStore $r2;
        java.lang.String $r3;
        char[] $r4;
        java.security.Key $r5;
        boolean $z0;
        java.security.cert.Certificate $r6;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r2 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        $r3 = "";

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r5 = virtualinvoke $r2.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>("fdroid", $r4);

     label2:
        $z0 = $r5 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label6;

        $r2 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

     label3:
        $r6 = virtualinvoke $r2.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>("fdroid");

     label4:
        return $r6;

     label5:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoKeyStore", "Unable to get certificate for local repo", r1);

     label6:
        return null;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }
    public javax.net.ssl.KeyManager[] getKeyManagers()
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        javax.net.ssl.KeyManager[] r1;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: javax.net.ssl.KeyManager[] keyManagers>;

        return r1;
    }
    public java.security.KeyStore getKeyStore()
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.security.KeyStore r1;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

        return r1;
    }
    public java.io.File getKeyStoreFile()
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.io.File r1;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        r1 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.io.File keyStoreFile>;

        return r1;
    }
    public void setupHTTPSCertificate()
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.lang.Exception r1;
        org.spongycastle.asn1.x500.X500Name r2;
        java.security.KeyPair $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.security.cert.Certificate $r6;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

     label1:
        $r3 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyPair getKerplappKeypair()>();

     label2:
        r2 = new org.spongycastle.asn1.x500.X500Name;

        $r4 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CN=");

     label4:
        $r5 = <org.fdroid.fdroid.FDroidApp: java.lang.String ipAddressString>;

     label5:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.spongycastle.asn1.x500.X500Name: void <init>(java.lang.String)>($r5);

     label6:
        $r5 = <org.fdroid.fdroid.FDroidApp: java.lang.String ipAddressString>;

     label7:
        $r6 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.cert.Certificate generateSelfSignedCertChain(java.security.KeyPair,org.spongycastle.asn1.x500.X500Name,java.lang.String)>($r3, r2, $r5);

        specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: void addToStore(java.lang.String,java.security.KeyPair,java.security.cert.Certificate)>("https", $r3, $r6);

     label8:
        return;

     label9:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoKeyStore", "Failed to setup HTTPS certificate", r1);

        return;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label9;
        catch java.lang.Exception from label5 to label6 with label9;
        catch java.lang.Exception from label7 to label8 with label9;
    }
    public void signZip(java.io.File, java.io.File)
    {
        org.fdroid.fdroid.localrepo.LocalRepoKeyStore r0;
        java.io.File $r1, $r2;
        java.security.KeyStore $r4;
        java.security.cert.Certificate $r5;
        java.security.cert.X509Certificate r6;
        java.security.KeyPair $r7;
        java.security.PrivateKey $r8;
        java.lang.String $r9, $r10;
        java.lang.Object r11;
        kellinwood.security.zipsigner.ZipSigner $r12;
        java.lang.Throwable $r13;

        r0 := @this: org.fdroid.fdroid.localrepo.LocalRepoKeyStore;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        $r12 = new kellinwood.security.zipsigner.ZipSigner;

     label01:
        specialinvoke $r12.<kellinwood.security.zipsigner.ZipSigner: void <init>()>();

     label02:
        $r4 = r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyStore keyStore>;

     label03:
        $r5 = virtualinvoke $r4.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>("fdroid");

     label04:
        r6 = (java.security.cert.X509Certificate) $r5;

     label05:
        $r7 = specialinvoke r0.<org.fdroid.fdroid.localrepo.LocalRepoKeyStore: java.security.KeyPair getKerplappKeypair()>();

        $r8 = virtualinvoke $r7.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r12.<kellinwood.security.zipsigner.ZipSigner: void setKeys(java.lang.String,java.security.cert.X509Certificate,java.security.PrivateKey,java.lang.String,byte[])>("kerplapp", r6, $r8, "SHA1withRSA", null);

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r10 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r12.<kellinwood.security.zipsigner.ZipSigner: void signZip(java.lang.String,java.lang.String)>($r9, $r10);

     label06:
        return;

     label07:
        r11 := @caughtexception;

     label08:
        $r13 = (java.lang.Throwable) r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalRepoKeyStore", "Unable to sign local repo index", $r13);

        return;

     label09:
        r11 := @caughtexception;

        goto label08;

     label10:
        r11 := @caughtexception;

        goto label08;

     label11:
        r11 := @caughtexception;

        goto label08;

     label12:
        r11 := @caughtexception;

        goto label08;

        catch java.lang.ClassNotFoundException from label01 to label02 with label10;
        catch java.lang.ClassNotFoundException from label03 to label04 with label10;
        catch java.lang.ClassNotFoundException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label12;
        catch java.lang.IllegalAccessException from label03 to label04 with label12;
        catch java.lang.IllegalAccessException from label05 to label06 with label12;
        catch java.lang.InstantiationException from label01 to label02 with label11;
        catch java.lang.InstantiationException from label03 to label04 with label11;
        catch java.lang.InstantiationException from label05 to label06 with label11;
        catch java.security.GeneralSecurityException from label01 to label02 with label07;
        catch java.security.GeneralSecurityException from label03 to label04 with label07;
        catch java.security.GeneralSecurityException from label05 to label06 with label07;
        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
    }
