org.fdroid.fdroid.localrepo.SwapService extends android.app.Service
public static final java.lang.String ACTION_PEER_FOUND
public static final java.lang.String BLUETOOTH_STATE_CHANGE
public static final java.lang.String BONJOUR_STATE_CHANGE
public static final java.lang.String EXTRA_PEER
public static final java.lang.String EXTRA_STARTED
public static final java.lang.String EXTRA_STARTING
public static final java.lang.String EXTRA_STOPPED
private static final java.lang.String KEY_APPS_TO_SWAP
private static final java.lang.String KEY_BLUETOOTH_ENABLED
private static final java.lang.String KEY_WIFI_ENABLED
private static final int NOTIFICATION
public static final java.lang.String SHARED_PREFERENCES
public static final int STEP_CONFIRM_SWAP
public static final int STEP_CONNECTING
public static final int STEP_INITIAL_LOADING
public static final int STEP_INTRO
public static final int STEP_JOIN_WIFI
public static final int STEP_SELECT_APPS
public static final int STEP_SHOW_NFC
public static final int STEP_SUCCESS
public static final int STEP_WIFI_QR
private static final java.lang.String TAG
private static final int TIMEOUT
public static final java.lang.String WIFI_STATE_CHANGE
private final java.util.Set appsToSwap
private final org.fdroid.fdroid.localrepo.SwapService$Binder binder
private org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder
private org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap
private org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder
private final org.fdroid.fdroid.Preferences$ChangeListener httpsEnabledListener
private final android.content.BroadcastReceiver onWifiChange
private org.fdroid.fdroid.localrepo.peers.Peer peer
private org.fdroid.fdroid.data.Repo peerRepo
private final android.content.BroadcastReceiver receiveSwapStatusChanged
private int step
private java.util.Timer timer
private org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap
    public void <init>()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.util.HashSet $r1;
        org.fdroid.fdroid.localrepo.SwapService$Binder $r2;
        org.fdroid.fdroid.localrepo.SwapService$3 $r3;
        org.fdroid.fdroid.localrepo.SwapService$5 $r4;
        org.fdroid.fdroid.localrepo.SwapService$6 $r5;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap> = $r1;

        r0.<org.fdroid.fdroid.localrepo.SwapService: int step> = 1;

        $r2 = new org.fdroid.fdroid.localrepo.SwapService$Binder;

        specialinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$Binder: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.SwapService$Binder binder> = $r2;

        $r3 = new org.fdroid.fdroid.localrepo.SwapService$3;

        specialinvoke $r3.<org.fdroid.fdroid.localrepo.SwapService$3: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver receiveSwapStatusChanged> = $r3;

        $r4 = new org.fdroid.fdroid.localrepo.SwapService$5;

        specialinvoke $r4.<org.fdroid.fdroid.localrepo.SwapService$5: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.Preferences$ChangeListener httpsEnabledListener> = $r4;

        $r5 = new org.fdroid.fdroid.localrepo.SwapService$6;

        specialinvoke $r5.<org.fdroid.fdroid.localrepo.SwapService$6: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver onWifiChange> = $r5;

        return;
    }
    static org.fdroid.fdroid.localrepo.type.WifiSwap access$000(org.fdroid.fdroid.localrepo.SwapService)
    {
        org.fdroid.fdroid.localrepo.SwapService $r0;
        org.fdroid.fdroid.localrepo.type.WifiSwap r1;

        $r0 := @parameter0: org.fdroid.fdroid.localrepo.SwapService;

        r1 = $r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        return r1;
    }
    static void access$100(org.fdroid.fdroid.localrepo.SwapService)
    {
        org.fdroid.fdroid.localrepo.SwapService $r0;

        $r0 := @parameter0: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke $r0.<org.fdroid.fdroid.localrepo.SwapService: void attachService()>();

        return;
    }
    static void access$200(org.fdroid.fdroid.localrepo.SwapService)
    {
        org.fdroid.fdroid.localrepo.SwapService $r0;

        $r0 := @parameter0: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke $r0.<org.fdroid.fdroid.localrepo.SwapService: void detachService()>();

        return;
    }
    static void access$300(org.fdroid.fdroid.localrepo.SwapService)
    {
        org.fdroid.fdroid.localrepo.SwapService $r0;

        $r0 := @parameter0: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke $r0.<org.fdroid.fdroid.localrepo.SwapService: void persistPreferredSwapTypes()>();

        return;
    }
    private void askServerToSwapWithUs(java.lang.String)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.String $r1;
        org.fdroid.fdroid.localrepo.SwapService$1 $r2;
        java.lang.Void[] $r3;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.fdroid.fdroid.localrepo.SwapService$1;

        specialinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$1: void <init>(org.fdroid.fdroid.localrepo.SwapService,java.lang.String)>(r0, $r1);

        $r3 = newarray (java.lang.Void)[0];

        virtualinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$1: android.os.AsyncTask execute(java.lang.Object[])>($r3);

        return;
    }
    private void askServerToSwapWithUs(org.fdroid.fdroid.data.Repo)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.data.Repo $r1;
        java.lang.String $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: org.fdroid.fdroid.data.Repo;

        $r2 = $r1.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void askServerToSwapWithUs(java.lang.String)>($r2);

        return;
    }
    private void attachService()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.app.Notification $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Moving SwapService to foreground so that it hangs around even when F-Droid is closed (may already be foregrounded).");

        $r1 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.app.Notification createNotification()>();

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void startForeground(int,android.app.Notification)>(1, $r1);

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void initTimer()>();

        return;
    }
    private android.app.Notification createNotification()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.Intent r1;
        android.app.PendingIntent $r2;
        android.support.v4.app.NotificationCompat$Builder $r3;
        java.lang.CharSequence $r4;
        android.app.Notification $r5;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lorg/fdroid/fdroid/views/swap/SwapWorkflowActivity;");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(603979776);

        $r2 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>(r0, 0, r1, 268435456);

        $r3 = new android.support.v4.app.NotificationCompat$Builder;

        specialinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: void <init>(android.content.Context)>(r0);

        $r4 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: java.lang.CharSequence getText(int)>(2131165353);

        $r3 = virtualinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence)>($r4);

        $r4 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: java.lang.CharSequence getText(int)>(2131165496);

        $r3 = virtualinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence)>($r4);

        $r3 = virtualinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setSmallIcon(int)>(2130837600);

        $r3 = virtualinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)>($r2);

        $r5 = virtualinvoke $r3.<android.support.v4.app.NotificationCompat$Builder: android.app.Notification build()>();

        return $r5;
    }
    private static java.util.Set deserializePackages(java.lang.String)
    {
        java.lang.String $r0;
        java.util.HashSet r1;
        boolean $z0;
        java.lang.String[] $r2;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r2);

     label1:
        return r1;
    }
    private void detachService()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.util.Timer $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer>;

        if $r1 == null goto label1;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer>;

        virtualinvoke $r1.<java.util.Timer: void cancel()>();

     label1:
        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Moving SwapService to background so that it can be GC\'ed if required.");

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void stopForeground(boolean)>(1);

        return;
    }
    private org.fdroid.fdroid.data.Repo ensureRepoExists(org.fdroid.fdroid.localrepo.peers.Peer)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1;
        android.content.ContentValues r2;
        java.lang.String $r3;
        org.fdroid.fdroid.data.Repo $r4;
        boolean $z0;
        java.lang.Boolean $r5;
        android.net.Uri $r6;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: org.fdroid.fdroid.localrepo.peers.Peer;

        $r3 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getRepoAddress()>();

        $r4 = staticinvoke <org.fdroid.fdroid.data.RepoProvider$Helper: org.fdroid.fdroid.data.Repo findByAddress(android.content.Context,java.lang.String)>(r0, $r3);

        if $r4 != null goto label2;

        r2 = new android.content.ContentValues;

        specialinvoke r2.<android.content.ContentValues: void <init>(int)>(6);

        $r3 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getName()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r3);

        $r3 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getRepoAddress()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("address", $r3);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("description", "");

        $r3 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getFingerprint()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getFingerprint()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("fingerprint", $r3);

     label1:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("inuse", $r5);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("isSwap", $r5);

        $r6 = staticinvoke <org.fdroid.fdroid.data.RepoProvider$Helper: android.net.Uri insert(android.content.Context,android.content.ContentValues)>(r0, r2);

        $r4 = staticinvoke <org.fdroid.fdroid.data.RepoProvider$Helper: org.fdroid.fdroid.data.Repo findByUri(android.content.Context,android.net.Uri)>(r0, $r6);

     label2:
        return $r4;
    }
    private void initTimer()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.util.Timer $r1;
        org.fdroid.fdroid.localrepo.SwapService$4 $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer>;

        if $r1 == null goto label1;

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Cancelling existing timeout timer so timeout can be reset.");

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer>;

        virtualinvoke $r1.<java.util.Timer: void cancel()>();

     label1:
        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Initializing swap timeout to 900000ms minutes");

        $r1 = new java.util.Timer;

        specialinvoke $r1.<java.util.Timer: void <init>()>();

        r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer> = $r1;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Timer timer>;

        $r2 = new org.fdroid.fdroid.localrepo.SwapService$4;

        specialinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$4: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r2, 900000L);

        return;
    }
    private void persistAppsToSwap()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.SharedPreferences $r1;
        android.content.SharedPreferences$Editor $r2;
        java.util.Set $r3;
        java.lang.String $r4;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences persistence()>();

        $r2 = interfaceinvoke $r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r3 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        $r4 = staticinvoke <org.fdroid.fdroid.localrepo.SwapService: java.lang.String serializePackages(java.util.Set)>($r3);

        $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("appsToSwap", $r4);

        interfaceinvoke $r2.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;
    }
    private void persistPreferredSwapTypes()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.StringBuilder $r1;
        org.fdroid.fdroid.localrepo.type.SwapType $r2;
        boolean $z0;
        java.lang.String $r3;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r4;
        android.content.SharedPreferences $r5;
        android.content.SharedPreferences$Editor $r6;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remembering that Bluetooth swap ");

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap>;

        $z0 = virtualinvoke $r2.<org.fdroid.fdroid.localrepo.type.SwapType: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $r3 = "IS";

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connected and WiFi swap ");

        $r4 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $z0 = virtualinvoke $r4.<org.fdroid.fdroid.localrepo.type.WifiSwap: boolean isConnected()>();

        if $z0 == 0 goto label4;

        $r3 = "IS";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connected.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", $r3);

        $r5 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences persistence()>();

        $r6 = interfaceinvoke $r5.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap>;

        $z0 = virtualinvoke $r2.<org.fdroid.fdroid.localrepo.type.SwapType: boolean isConnected()>();

        $r6 = interfaceinvoke $r6.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("bluetoothEnabled", $z0);

        $r4 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $z0 = virtualinvoke $r4.<org.fdroid.fdroid.localrepo.type.WifiSwap: boolean isConnected()>();

        $r6 = interfaceinvoke $r6.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("wifiEnabled", $z0);

        interfaceinvoke $r6.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;

     label3:
        $r3 = "is NOT";

        goto label1;

     label4:
        $r3 = "is NOT";

        goto label2;
    }
    private android.content.SharedPreferences persistence()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.SharedPreferences $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("swap-state", 32768);

        return $r1;
    }
    private static java.lang.String serializePackages(java.util.Set)
    {
        java.util.Set r0;
        java.lang.StringBuilder r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String r4;
        int $i0;

        r0 := @parameter0: java.util.Set;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        goto label1;

     label3:
        r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return r4;
    }
    private boolean wasBluetoothEnabled()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.SharedPreferences $r1;
        boolean $z0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences persistence()>();

        $z0 = interfaceinvoke $r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("bluetoothEnabled", 0);

        return $z0;
    }
    private boolean wasWifiEnabled()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.SharedPreferences $r1;
        boolean $z0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences persistence()>();

        $z0 = interfaceinvoke $r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("wifiEnabled", 0);

        return $z0;
    }
    public void askServerToSwapWithUs(org.fdroid.fdroid.data.NewRepoConfig)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.data.NewRepoConfig $r1;
        java.lang.String $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: org.fdroid.fdroid.data.NewRepoConfig;

        $r2 = virtualinvoke $r1.<org.fdroid.fdroid.data.NewRepoConfig: java.lang.String getRepoUriString()>();

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void askServerToSwapWithUs(java.lang.String)>($r2);

        return;
    }
    public void connectTo(org.fdroid.fdroid.localrepo.peers.Peer, boolean)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1, $r2;
        boolean $z0, $z1;
        org.fdroid.fdroid.data.Repo $r3;
        java.lang.String $r4;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: org.fdroid.fdroid.localrepo.peers.Peer;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer>;

        if $r1 == $r2 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SwapManager", "Oops, got a different peer to swap with than initially planned.");

     label1:
        $r3 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.data.Repo ensureRepoExists(org.fdroid.fdroid.localrepo.peers.Peer)>($r1);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.data.Repo peerRepo> = $r3;

        $z1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.data.Repo peerRepo>;

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void askServerToSwapWithUs(org.fdroid.fdroid.data.Repo)>($r3);

     label2:
        $r4 = interfaceinvoke $r1.<org.fdroid.fdroid.localrepo.peers.Peer: java.lang.String getRepoAddress()>();

        staticinvoke <org.fdroid.fdroid.UpdateService: void updateRepoNow(java.lang.String,android.content.Context)>($r4, r0);

        return;
    }
    public void connectToPeer()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1, $r3;
        java.lang.IllegalStateException $r2;
        boolean $z0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer getPeer()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot connect to peer, no peer has been selected.");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer getPeer()>();

        $r3 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer getPeer()>();

        $z0 = interfaceinvoke $r3.<org.fdroid.fdroid.localrepo.peers.Peer: boolean shouldPromptForSwapBack()>();

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void connectTo(org.fdroid.fdroid.localrepo.peers.Peer,boolean)>($r1, $z0);

        return;
    }
    public void deselectPackage(java.lang.String)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label1:
        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void persistAppsToSwap()>();

        return;
    }
    public void disableAllSwapping()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SwapManager", "Asked to stop swapping, will stop bluetooth, wifi, and move service to BG for GC.");

        $r1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap getWifiSwap()>();

        virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.WifiSwap: void stopInBackground()>();

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.SwapService setStep(int)>(1);

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void detachService()>();

        return;
    }
    public void ensureFDroidSelected()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: boolean hasSelectedPackage(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void selectPackage(java.lang.String)>($r1);

     label1:
        return;
    }
    public java.util.Set getAppsToSwap()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.util.Set r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        return r1;
    }
    public org.fdroid.fdroid.localrepo.peers.BluetoothFinder getBluetoothFinder()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.BluetoothFinder r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder>;

        return r1;
    }
    public org.fdroid.fdroid.localrepo.type.SwapType getBluetoothSwap()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.type.SwapType r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap>;

        return r1;
    }
    public org.fdroid.fdroid.localrepo.peers.BonjourFinder getBonjourFinder()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.BonjourFinder r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder>;

        return r1;
    }
    public org.fdroid.fdroid.localrepo.peers.Peer getPeer()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer>;

        return r1;
    }
    public org.fdroid.fdroid.data.Repo getPeerRepo()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.data.Repo r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.data.Repo peerRepo>;

        return r1;
    }
    public int getStep()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        int i0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        i0 = r0.<org.fdroid.fdroid.localrepo.SwapService: int step>;

        return i0;
    }
    public org.fdroid.fdroid.localrepo.type.WifiSwap getWifiSwap()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.type.WifiSwap r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        return r1;
    }
    public boolean hasSelectedPackage(java.lang.String)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isBluetoothDiscoverable()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        boolean $z0;
        org.fdroid.fdroid.localrepo.type.SwapType $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap>;

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.SwapType: boolean isDiscoverable()>();

        return $z0;
    }
    public boolean isBonjourDiscoverable()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r1;
        boolean $z0;
        org.fdroid.fdroid.localrepo.type.BonjourBroadcast $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.WifiSwap: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $r2 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.WifiSwap: org.fdroid.fdroid.localrepo.type.BonjourBroadcast getBonjour()>();

        $z0 = virtualinvoke $r2.<org.fdroid.fdroid.localrepo.type.BonjourBroadcast: boolean isConnected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isConnectingWithPeer()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEnabled()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.type.SwapType $r1;
        boolean $z0;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap>;

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.SwapType: boolean isConnected()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $z0 = virtualinvoke $r2.<org.fdroid.fdroid.localrepo.type.WifiSwap: boolean isConnected()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isScanningForPeers()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.BonjourFinder $r1;
        boolean $z0;
        org.fdroid.fdroid.localrepo.peers.BluetoothFinder $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder>;

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.peers.BonjourFinder: boolean isScanning()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder>;

        $z0 = virtualinvoke $r2.<org.fdroid.fdroid.localrepo.peers.BluetoothFinder: boolean isScanning()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public android.os.IBinder onBind(android.content.Intent)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.Intent $r1;
        org.fdroid.fdroid.localrepo.SwapService$Binder r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: android.content.Intent;

        r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.SwapService$Binder binder>;

        return r2;
    }
    public void onCreate()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.IntentFilter r1;
        android.content.SharedPreferences $r2;
        java.util.Set $r3, $r5;
        java.lang.String $r4;
        org.fdroid.fdroid.localrepo.type.SwapType $r6;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r7;
        org.fdroid.fdroid.localrepo.peers.BonjourFinder $r8;
        org.fdroid.fdroid.localrepo.peers.BluetoothFinder $r9;
        org.fdroid.fdroid.Preferences $r10;
        org.fdroid.fdroid.Preferences$ChangeListener $r11;
        android.support.v4.content.LocalBroadcastManager $r12;
        android.content.BroadcastReceiver $r13;
        boolean $z0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke r0.<android.app.Service: void onCreate()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Creating swap service.");

        $r2 = virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("swap-state", 0);

        $r3 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        $r4 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("appsToSwap", "");

        $r5 = staticinvoke <org.fdroid.fdroid.localrepo.SwapService: java.util.Set deserializePackages(java.lang.String)>($r4);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r6 = staticinvoke <org.fdroid.fdroid.localrepo.type.BluetoothSwap: org.fdroid.fdroid.localrepo.type.SwapType create(android.content.Context)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.SwapType bluetoothSwap> = $r6;

        $r7 = new org.fdroid.fdroid.localrepo.type.WifiSwap;

        specialinvoke $r7.<org.fdroid.fdroid.localrepo.type.WifiSwap: void <init>(android.content.Context)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap> = $r7;

        $r8 = new org.fdroid.fdroid.localrepo.peers.BonjourFinder;

        specialinvoke $r8.<org.fdroid.fdroid.localrepo.peers.BonjourFinder: void <init>(android.content.Context)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder> = $r8;

        $r9 = new org.fdroid.fdroid.localrepo.peers.BluetoothFinder;

        specialinvoke $r9.<org.fdroid.fdroid.localrepo.peers.BluetoothFinder: void <init>(android.content.Context)>(r0);

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder> = $r9;

        $r10 = staticinvoke <org.fdroid.fdroid.Preferences: org.fdroid.fdroid.Preferences get()>();

        $r11 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.Preferences$ChangeListener httpsEnabledListener>;

        virtualinvoke $r10.<org.fdroid.fdroid.Preferences: void registerLocalRepoHttpsListeners(org.fdroid.fdroid.Preferences$ChangeListener)>($r11);

        $r12 = staticinvoke <android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)>(r0);

        $r13 = r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver onWifiChange>;

        r1 = new android.content.IntentFilter;

        specialinvoke r1.<android.content.IntentFilter: void <init>(java.lang.String)>("org.fdroid.fdroid.action.WIFI_CHANGE");

        virtualinvoke $r12.<android.support.v4.content.LocalBroadcastManager: void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r13, r1);

        r1 = new android.content.IntentFilter;

        specialinvoke r1.<android.content.IntentFilter: void <init>(java.lang.String)>("org.fdroid.fdroid.BLUETOOTH_STATE_CHANGE");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("org.fdroid.fdroid.WIFI_STATE_CHANGE");

        $r12 = staticinvoke <android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)>(r0);

        $r13 = r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver receiveSwapStatusChanged>;

        virtualinvoke $r12.<android.support.v4.content.LocalBroadcastManager: void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r13, r1);

        $z0 = specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: boolean wasWifiEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Previously the user enabled WiFi swap, so enabling again automatically.");

        $r7 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        virtualinvoke $r7.<org.fdroid.fdroid.localrepo.type.WifiSwap: void startInBackground()>();

        return;

     label1:
        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "WiFi was NOT enabled last time user swapped, so starting with WiFi not visible.");

        return;
    }
    public void onDestroy()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.Preferences $r1;
        org.fdroid.fdroid.Preferences$ChangeListener $r2;
        android.support.v4.content.LocalBroadcastManager $r3;
        android.content.BroadcastReceiver $r4;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        specialinvoke r0.<android.app.Service: void onDestroy()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Destroying service, will disable swapping if required, and unregister listeners.");

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void disableAllSwapping()>();

        $r1 = staticinvoke <org.fdroid.fdroid.Preferences: org.fdroid.fdroid.Preferences get()>();

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.Preferences$ChangeListener httpsEnabledListener>;

        virtualinvoke $r1.<org.fdroid.fdroid.Preferences: void unregisterLocalRepoHttpsListeners(org.fdroid.fdroid.Preferences$ChangeListener)>($r2);

        $r3 = staticinvoke <android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)>(r0);

        $r4 = r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver onWifiChange>;

        virtualinvoke $r3.<android.support.v4.content.LocalBroadcastManager: void unregisterReceiver(android.content.BroadcastReceiver)>($r4);

        $r3 = staticinvoke <android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)>(r0);

        $r4 = r0.<org.fdroid.fdroid.localrepo.SwapService: android.content.BroadcastReceiver receiveSwapStatusChanged>;

        virtualinvoke $r3.<android.support.v4.content.LocalBroadcastManager: void unregisterReceiver(android.content.BroadcastReceiver)>($r4);

        return;
    }
    public int onStartCommand(android.content.Intent, int, int)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        android.content.Intent $r1;
        int $i0, $i1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return 1;
    }
    public void refreshSwap()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer>;

        if $r1 == null goto label1;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer>;

        virtualinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void connectTo(org.fdroid.fdroid.localrepo.peers.Peer,boolean)>($r1, 0);

     label1:
        return;
    }
    public void restartWifiIfEnabled()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        boolean $z0;
        org.fdroid.fdroid.localrepo.type.WifiSwap $r1;
        org.fdroid.fdroid.localrepo.SwapService$2 $r2;
        java.lang.Void[] $r3;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.type.WifiSwap wifiSwap>;

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.localrepo.type.WifiSwap: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r2 = new org.fdroid.fdroid.localrepo.SwapService$2;

        specialinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$2: void <init>(org.fdroid.fdroid.localrepo.SwapService)>(r0);

        $r3 = newarray (java.lang.Void)[0];

        virtualinvoke $r2.<org.fdroid.fdroid.localrepo.SwapService$2: android.os.AsyncTask execute(java.lang.Object[])>($r3);

     label1:
        return;
    }
    public void scanForPeers()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.BonjourFinder $r1;
        org.fdroid.fdroid.localrepo.peers.BluetoothFinder $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("SwapManager", "Scanning for nearby devices to swap with...");

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder>;

        virtualinvoke $r1.<org.fdroid.fdroid.localrepo.peers.BonjourFinder: void scan()>();

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder>;

        virtualinvoke $r2.<org.fdroid.fdroid.localrepo.peers.BluetoothFinder: void scan()>();

        return;
    }
    public void selectPackage(java.lang.String)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        java.lang.String $r1;
        java.util.Set $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: java.util.Set appsToSwap>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        specialinvoke r0.<org.fdroid.fdroid.localrepo.SwapService: void persistAppsToSwap()>();

        return;
    }
    public org.fdroid.fdroid.localrepo.SwapService setStep(int)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        int $i0;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $i0 := @parameter0: int;

        r0.<org.fdroid.fdroid.localrepo.SwapService: int step> = $i0;

        return r0;
    }
    public void stopScanningForPeers()
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.BonjourFinder $r1;
        org.fdroid.fdroid.localrepo.peers.BluetoothFinder $r2;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BonjourFinder bonjourFinder>;

        virtualinvoke $r1.<org.fdroid.fdroid.localrepo.peers.BonjourFinder: void cancel()>();

        $r2 = r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.BluetoothFinder bluetoothFinder>;

        virtualinvoke $r2.<org.fdroid.fdroid.localrepo.peers.BluetoothFinder: void cancel()>();

        return;
    }
    public void swapWith(org.fdroid.fdroid.localrepo.peers.Peer)
    {
        org.fdroid.fdroid.localrepo.SwapService r0;
        org.fdroid.fdroid.localrepo.peers.Peer $r1;

        r0 := @this: org.fdroid.fdroid.localrepo.SwapService;

        $r1 := @parameter0: org.fdroid.fdroid.localrepo.peers.Peer;

        r0.<org.fdroid.fdroid.localrepo.SwapService: org.fdroid.fdroid.localrepo.peers.Peer peer> = $r1;

        return;
    }
