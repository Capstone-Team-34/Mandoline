org.fdroid.fdroid.RepoUpdater extends java.lang.Object
public static final java.lang.String PROGRESS_COMMITTING
public static final java.lang.String PROGRESS_DATA_REPO_ADDRESS
public static final java.lang.String PROGRESS_TYPE_PROCESS_XML
private static final java.lang.String TAG
private java.lang.String cacheTag
protected final android.content.Context context
protected boolean hasChanged
private final org.fdroid.fdroid.data.RepoPersister persister
protected org.fdroid.fdroid.ProgressListener progressListener
protected final org.fdroid.fdroid.data.Repo repo
private android.content.ContentValues repoDetailsToSave
private java.lang.String signingCertFromIndexXml
private java.security.cert.X509Certificate signingCertFromJar
    public void <init>(android.content.Context, org.fdroid.fdroid.data.Repo)
    {
        org.fdroid.fdroid.RepoUpdater r0;
        android.content.Context $r1;
        org.fdroid.fdroid.data.Repo $r2;
        org.fdroid.fdroid.data.RepoPersister $r3;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: org.fdroid.fdroid.data.Repo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.fdroid.fdroid.RepoUpdater: android.content.Context context> = $r1;

        r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo> = $r2;

        $r3 = new org.fdroid.fdroid.data.RepoPersister;

        specialinvoke $r3.<org.fdroid.fdroid.data.RepoPersister: void <init>(android.content.Context,org.fdroid.fdroid.data.Repo)>($r1, $r2);

        r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.RepoPersister persister> = $r3;

        return;
    }
    static java.lang.String access$002(org.fdroid.fdroid.RepoUpdater, java.lang.String)
    {
        org.fdroid.fdroid.RepoUpdater $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter1: java.lang.String;

        $r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String signingCertFromIndexXml> = $r1;

        return $r1;
    }
    static android.content.ContentValues access$102(org.fdroid.fdroid.RepoUpdater, android.content.ContentValues)
    {
        org.fdroid.fdroid.RepoUpdater $r0;
        android.content.ContentValues $r1;

        $r0 := @parameter0: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter1: android.content.ContentValues;

        $r0.<org.fdroid.fdroid.RepoUpdater: android.content.ContentValues repoDetailsToSave> = $r1;

        return $r1;
    }
    static android.content.ContentValues access$200(org.fdroid.fdroid.RepoUpdater, java.lang.String, java.lang.String, int, int)
    {
        org.fdroid.fdroid.RepoUpdater $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        android.content.ContentValues $r3;

        $r0 := @parameter0: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 = specialinvoke $r0.<org.fdroid.fdroid.RepoUpdater: android.content.ContentValues prepareRepoDetailsForSaving(java.lang.String,java.lang.String,int,int)>($r1, $r2, $i0, $i1);

        return $r3;
    }
    static org.fdroid.fdroid.data.RepoPersister access$300(org.fdroid.fdroid.RepoUpdater)
    {
        org.fdroid.fdroid.RepoUpdater $r0;
        org.fdroid.fdroid.data.RepoPersister r1;

        $r0 := @parameter0: org.fdroid.fdroid.RepoUpdater;

        r1 = $r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.RepoPersister persister>;

        return r1;
    }
    private void assertSigningCertFromXmlCorrect() throws org.fdroid.fdroid.RepoUpdater$SigningException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        org.fdroid.fdroid.data.Repo $r1;
        java.lang.String $r2;
        java.security.cert.X509Certificate $r3;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r2 = $r1.<org.fdroid.fdroid.data.Repo: java.lang.String pubkey>;

        if $r2 != null goto label1;

        $r2 = r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String signingCertFromIndexXml>;

        $r3 = r0.<org.fdroid.fdroid.RepoUpdater: java.security.cert.X509Certificate signingCertFromJar>;

        specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: void verifyAndStoreTOFUCerts(java.lang.String,java.security.cert.X509Certificate)>($r2, $r3);

     label1:
        $r2 = r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String signingCertFromIndexXml>;

        $r3 = r0.<org.fdroid.fdroid.RepoUpdater: java.security.cert.X509Certificate signingCertFromJar>;

        specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: void verifyCerts(java.lang.String,java.security.cert.X509Certificate)>($r2, $r3);

        return;
    }
    private void commitToDb() throws org.fdroid.fdroid.RepoUpdater$UpdateException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        org.fdroid.fdroid.ProgressListener $r1;
        org.fdroid.fdroid.ProgressListener$Event $r2;
        org.fdroid.fdroid.data.RepoPersister $r3;
        android.content.ContentValues $r4;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RepoUpdater", "Repo signature verified, saving app metadata to database.");

        $r1 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.ProgressListener progressListener>;

        if $r1 == null goto label1;

        $r1 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.ProgressListener progressListener>;

        $r2 = new org.fdroid.fdroid.ProgressListener$Event;

        specialinvoke $r2.<org.fdroid.fdroid.ProgressListener$Event: void <init>(java.lang.String)>("committing");

        interfaceinvoke $r1.<org.fdroid.fdroid.ProgressListener: void onProgress(org.fdroid.fdroid.ProgressListener$Event)>($r2);

     label1:
        $r3 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.RepoPersister persister>;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: android.content.ContentValues repoDetailsToSave>;

        virtualinvoke $r3.<org.fdroid.fdroid.data.RepoPersister: void commit(android.content.ContentValues)>($r4);

        return;
    }
    private org.fdroid.fdroid.RepoXMLHandler$IndexReceiver createIndexReceiver()
    {
        org.fdroid.fdroid.RepoUpdater r0;
        org.fdroid.fdroid.RepoUpdater$1 $r1;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 = new org.fdroid.fdroid.RepoUpdater$1;

        specialinvoke $r1.<org.fdroid.fdroid.RepoUpdater$1: void <init>(org.fdroid.fdroid.RepoUpdater)>(r0);

        return $r1;
    }
    private java.security.cert.X509Certificate getSigningCertFromJar(java.util.jar.JarEntry) throws org.fdroid.fdroid.RepoUpdater$SigningException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.util.jar.JarEntry $r1;
        java.security.CodeSigner[] $r2;
        int $i0;
        org.fdroid.fdroid.RepoUpdater$SigningException $r3;
        org.fdroid.fdroid.data.Repo $r4;
        java.security.CodeSigner $r5;
        java.security.cert.CertPath $r6;
        java.util.List $r7;
        java.lang.Object $r8;
        java.security.cert.X509Certificate $r9;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: java.util.jar.JarEntry;

        $r2 = virtualinvoke $r1.<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()>();

        if $r2 == null goto label1;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r3.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "No signature found in index");

        throw $r3;

     label2:
        $i0 = lengthof $r2;

        if $i0 <= 1 goto label3;

        $r3 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r3.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "index.jar must be signed by a single code signer!");

        throw $r3;

     label3:
        $r5 = $r2[0];

        $r6 = virtualinvoke $r5.<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>();

        $r7 = virtualinvoke $r6.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 == 1 goto label4;

        $r3 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r3.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "index.jar code signers must only have a single certificate!");

        throw $r3;

     label4:
        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.security.cert.X509Certificate) $r8;

        return $r9;
    }
    private android.content.ContentValues prepareRepoDetailsForSaving(java.lang.String, java.lang.String, int, int)
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.lang.String $r1, $r2, $r5, $r7;
        int $i0, $i1, $i2;
        android.content.ContentValues r3;
        java.util.Date $r4;
        org.fdroid.fdroid.data.Repo $r6;
        boolean $z0;
        java.lang.StringBuilder $r8;
        java.lang.Integer $r9;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>()>();

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        $r5 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String formatTime(java.util.Date,java.lang.String)>($r4, "");

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("lastUpdated", $r5);

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r6.<org.fdroid.fdroid.data.Repo: java.lang.String lastetag>;

        if $r5 == null goto label1;

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r6.<org.fdroid.fdroid.data.Repo: java.lang.String lastetag>;

        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String cacheTag>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

     label1:
        $r5 = r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String cacheTag>;

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("lastetag", $r5);

     label2:
        if $i1 == -1 goto label3;

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $i2 = $r6.<org.fdroid.fdroid.data.Repo: int version>;

        if $i1 == $i2 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Repo specified a new version: from ");

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $i2 = $r6.<org.fdroid.fdroid.data.Repo: int version>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("RepoUpdater", $r5);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("version", $r9);

     label3:
        if $i0 == -1 goto label4;

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $i1 = $r6.<org.fdroid.fdroid.data.Repo: int maxage>;

        if $i0 == $i1 goto label4;

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("RepoUpdater", "Repo specified a new maximum age - updated");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxage", $r9);

     label4:
        if $r2 == null goto label5;

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r6.<org.fdroid.fdroid.data.Repo: java.lang.String description>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label5;

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("description", $r2);

     label5:
        if $r1 == null goto label6;

        $r6 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r2 = $r6.<org.fdroid.fdroid.data.Repo: java.lang.String name>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label6;

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r1);

     label6:
        return r3;
    }
    private void verifyAndStoreTOFUCerts(java.lang.String, java.security.cert.X509Certificate) throws org.fdroid.fdroid.RepoUpdater$SigningException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.lang.String $r1, $r5, $r6;
        java.security.cert.X509Certificate $r2;
        android.content.ContentValues r3;
        org.fdroid.fdroid.data.Repo $r4;
        boolean $z0;
        org.fdroid.fdroid.RepoUpdater$SigningException $r7;
        java.lang.StringBuilder $r8;
        java.util.Date $r9;
        android.content.Context $r10;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.X509Certificate;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String pubkey>;

        if $r5 == null goto label1;

        return;

     label1:
        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String fingerprint>;

        if $r5 == null goto label3;

        $r5 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String calcFingerprint(java.lang.String)>($r1);

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String calcFingerprint(java.security.cert.Certificate)>($r2);

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r6 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String fingerprint>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String fingerprint>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label3;

     label2:
        $r7 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r7.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "Supplied certificate fingerprint does not match!");

        throw $r7;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saving new signing certificate in the database for ");

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r1 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("RepoUpdater", $r1);

        r3 = new android.content.ContentValues;

        specialinvoke r3.<android.content.ContentValues: void <init>(int)>(2);

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String formatDate(java.util.Date,java.lang.String)>($r9, "");

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("lastUpdated", $r1);

        $r1 = staticinvoke <org.fdroid.fdroid.Hasher: java.lang.String hex(java.security.cert.Certificate)>($r2);

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("pubkey", $r1);

        $r10 = r0.<org.fdroid.fdroid.RepoUpdater: android.content.Context context>;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        staticinvoke <org.fdroid.fdroid.data.RepoProvider$Helper: void update(android.content.Context,org.fdroid.fdroid.data.Repo,android.content.ContentValues)>($r10, $r4, r3);

        return;
    }
    private void verifyCerts(java.lang.String, java.security.cert.X509Certificate) throws org.fdroid.fdroid.RepoUpdater$SigningException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.lang.String $r1, $r3, $r5;
        java.security.cert.X509Certificate $r2;
        org.fdroid.fdroid.data.Repo $r4;
        boolean $z0;
        org.fdroid.fdroid.RepoUpdater$SigningException $r6;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.X509Certificate;

        $r3 = staticinvoke <org.fdroid.fdroid.Hasher: java.lang.String hex(java.security.cert.Certificate)>($r2);

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String pubkey>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r6 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r6.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "A empty repo or signing certificate is invalid!");

        throw $r6;

     label2:
        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String pubkey>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r5 = $r4.<org.fdroid.fdroid.data.Repo: java.lang.String pubkey>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r6 = new org.fdroid.fdroid.RepoUpdater$SigningException;

        $r4 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r6.<org.fdroid.fdroid.RepoUpdater$SigningException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r4, "Signing certificate does not match!");

        throw $r6;
    }
    org.fdroid.fdroid.net.Downloader downloadIndex() throws org.fdroid.fdroid.RepoUpdater$UpdateException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.io.IOException r1;
        org.fdroid.fdroid.net.Downloader r2, $r9;
        android.content.Context $r3, $r5;
        java.net.URL $r4;
        java.io.File $r6;
        org.fdroid.fdroid.data.Repo $r7;
        org.fdroid.fdroid.data.Credentials $r8;
        java.lang.String $r10;
        boolean $z0;
        java.lang.StringBuilder $r11;
        org.fdroid.fdroid.RepoUpdater$UpdateException $r12;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        r2 = null;

        $r3 = r0.<org.fdroid.fdroid.RepoUpdater: android.content.Context context>;

     label01:
        $r4 = virtualinvoke r0.<org.fdroid.fdroid.RepoUpdater: java.net.URL getIndexAddress()>();

     label02:
        $r5 = r0.<org.fdroid.fdroid.RepoUpdater: android.content.Context context>;

     label03:
        $r6 = virtualinvoke $r5.<android.content.Context: java.io.File getCacheDir()>();

        $r6 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("index-", "-downloaded", $r6);

     label04:
        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

     label05:
        $r8 = virtualinvoke $r7.<org.fdroid.fdroid.data.Repo: org.fdroid.fdroid.data.Credentials getCredentials()>();

        $r9 = staticinvoke <org.fdroid.fdroid.net.DownloaderFactory: org.fdroid.fdroid.net.Downloader create(android.content.Context,java.net.URL,java.io.File,org.fdroid.fdroid.data.Credentials)>($r3, $r4, $r6, $r8);

     label06:
        r2 = $r9;

        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r10 = $r7.<org.fdroid.fdroid.data.Repo: java.lang.String lastetag>;

     label07:
        virtualinvoke $r9.<org.fdroid.fdroid.net.Downloader: void setCacheTag(java.lang.String)>($r10);

        virtualinvoke $r9.<org.fdroid.fdroid.net.Downloader: void downloadUninterrupted()>();

        $z0 = virtualinvoke $r9.<org.fdroid.fdroid.net.Downloader: boolean isCached()>();

     label08:
        if $z0 == 0 goto label13;

        $r11 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Repo index for ");

        $r4 = virtualinvoke r0.<org.fdroid.fdroid.RepoUpdater: java.net.URL getIndexAddress()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is up to date (by etag)");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("RepoUpdater", $r10);

     label10:
        return $r9;

     label11:
        r1 := @caughtexception;

        if r2 == null goto label12;

        $r6 = virtualinvoke r2.<org.fdroid.fdroid.net.Downloader: java.io.File getFile()>();

        if $r6 == null goto label12;

        $r6 = virtualinvoke r2.<org.fdroid.fdroid.net.Downloader: java.io.File getFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete file: ");

        $r6 = virtualinvoke r2.<org.fdroid.fdroid.net.Downloader: java.io.File getFile()>();

        $r10 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RepoUpdater", $r10);

     label12:
        $r12 = new org.fdroid.fdroid.RepoUpdater$UpdateException;

        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        specialinvoke $r12.<org.fdroid.fdroid.RepoUpdater$UpdateException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String,java.lang.Exception)>($r7, "Error getting index file", r1);

        throw $r12;

     label13:
        return $r9;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }
    protected java.net.URL getIndexAddress() throws java.net.MalformedURLException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.lang.StringBuilder $r1;
        org.fdroid.fdroid.data.Repo $r2;
        java.lang.String $r3, r4, $r6;
        android.content.Context $r5;
        java.net.URL $r7;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r3 = $r2.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/index.jar");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = $r3;

        $r5 = r0.<org.fdroid.fdroid.RepoUpdater: android.content.Context context>;

        $r6 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String getVersionName(android.content.Context)>($r5);

        if $r6 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?client_version=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = new java.net.URL;

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>(r4);

        return $r7;
    }
    public boolean hasChanged()
    {
        org.fdroid.fdroid.RepoUpdater r0;
        boolean z0;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        z0 = r0.<org.fdroid.fdroid.RepoUpdater: boolean hasChanged>;

        return z0;
    }
    public void processDownloadedFile(java.io.File) throws org.fdroid.fdroid.RepoUpdater$UpdateException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        java.io.File $r1;
        org.fdroid.fdroid.ProgressBufferedInputStream r5, $r28;
        boolean $z0;
        org.fdroid.fdroid.data.Repo $r7;
        java.lang.StringBuilder $r8, $r25;
        java.lang.String $r9;
        org.xml.sax.SAXException $r10;
        java.lang.Object r11;
        java.lang.Throwable $r12;
        java.util.zip.ZipEntry $r13;
        java.util.jar.JarEntry r14;
        java.io.InputStream $r15;
        org.fdroid.fdroid.ProgressListener $r16;
        long $l0;
        int $i1;
        javax.xml.parsers.SAXParserFactory $r17;
        javax.xml.parsers.SAXParser $r18;
        org.xml.sax.XMLReader $r19;
        org.fdroid.fdroid.RepoXMLHandler$IndexReceiver $r20;
        java.security.cert.X509Certificate $r22;
        javax.xml.parsers.ParserConfigurationException $r23;
        java.io.IOException $r24;
        org.fdroid.fdroid.RepoUpdater$UpdateException $r26;
        java.util.jar.JarFile $r27;
        org.fdroid.fdroid.RepoXMLHandler $r29;
        org.xml.sax.InputSource $r30;
        java.lang.Exception $r31;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: java.io.File;

        r5 = null;

        if $r1 == null goto label03;

     label01:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label02:
        if $z0 != 0 goto label14;

     label03:
        $r26 = new org.fdroid.fdroid.RepoUpdater$UpdateException;

     label04:
        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r25 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.fdroid.fdroid.RepoUpdater$UpdateException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String)>($r7, $r9);

     label06:
        throw $r26;

     label07:
        $r10 := @caughtexception;

     label08:
        r11 = $r10;

     label09:
        $r26 = new org.fdroid.fdroid.RepoUpdater$UpdateException;

     label10:
        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

        $r31 = (java.lang.Exception) r11;

        specialinvoke $r26.<org.fdroid.fdroid.RepoUpdater$UpdateException: void <init>(org.fdroid.fdroid.data.Repo,java.lang.String,java.lang.Exception)>($r7, "Error parsing index", $r31);

        throw $r26;

     label11:
        $r12 := @caughtexception;

     label12:
        staticinvoke <org.fdroid.fdroid.FDroidApp: void enableSpongyCastleOnLollipop()>();

        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        if $r1 == null goto label13;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label13;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete file: ");

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RepoUpdater", $r9);

     label13:
        throw $r12;

     label14:
        staticinvoke <org.fdroid.fdroid.FDroidApp: void disableSpongyCastleOnLollipop()>();

     label15:
        $r27 = new java.util.jar.JarFile;

     label16:
        specialinvoke $r27.<java.util.jar.JarFile: void <init>(java.io.File,boolean)>($r1, 1);

        $r13 = virtualinvoke $r27.<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>("index.xml");

     label17:
        r14 = (java.util.jar.JarEntry) $r13;

        $r28 = new org.fdroid.fdroid.ProgressBufferedInputStream;

     label18:
        $r15 = virtualinvoke $r27.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r14);

     label19:
        $r16 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.ProgressListener progressListener>;

        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

     label20:
        $l0 = virtualinvoke r14.<java.util.jar.JarEntry: long getSize()>();

     label21:
        $i1 = (int) $l0;

     label22:
        specialinvoke $r28.<org.fdroid.fdroid.ProgressBufferedInputStream: void <init>(java.io.InputStream,org.fdroid.fdroid.ProgressListener,org.fdroid.fdroid.data.Repo,int)>($r15, $r16, $r7, $i1);

     label23:
        $r17 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        $r18 = virtualinvoke $r17.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $r19 = virtualinvoke $r18.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

     label24:
        $r29 = new org.fdroid.fdroid.RepoXMLHandler;

     label25:
        $r7 = r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.data.Repo repo>;

     label26:
        $r20 = specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.RepoXMLHandler$IndexReceiver createIndexReceiver()>();

        specialinvoke $r29.<org.fdroid.fdroid.RepoXMLHandler: void <init>(org.fdroid.fdroid.data.Repo,org.fdroid.fdroid.RepoXMLHandler$IndexReceiver)>($r7, $r20);

        interfaceinvoke $r19.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r29);

     label27:
        $r30 = new org.xml.sax.InputSource;

     label28:
        specialinvoke $r30.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r28);

        interfaceinvoke $r19.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r30);

        $r22 = specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: java.security.cert.X509Certificate getSigningCertFromJar(java.util.jar.JarEntry)>(r14);

     label29:
        r0.<org.fdroid.fdroid.RepoUpdater: java.security.cert.X509Certificate signingCertFromJar> = $r22;

     label30:
        specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: void assertSigningCertFromXmlCorrect()>();

        specialinvoke r0.<org.fdroid.fdroid.RepoUpdater: void commitToDb()>();

     label31:
        staticinvoke <org.fdroid.fdroid.FDroidApp: void enableSpongyCastleOnLollipop()>();

        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>($r28);

        if $r1 == null goto label40;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label40;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete file: ");

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RepoUpdater", $r9);

        return;

     label32:
        $r23 := @caughtexception;

     label33:
        r11 = $r23;

        goto label09;

     label34:
        $r24 := @caughtexception;

     label35:
        r11 = $r24;

        goto label09;

     label36:
        $r12 := @caughtexception;

        r5 = $r28;

        goto label12;

     label37:
        $r23 := @caughtexception;

        r5 = $r28;

        goto label33;

     label38:
        $r10 := @caughtexception;

        r5 = $r28;

        goto label08;

     label39:
        $r24 := @caughtexception;

        r5 = $r28;

        goto label35;

     label40:
        return;

        catch org.xml.sax.SAXException from label01 to label02 with label07;
        catch org.xml.sax.SAXException from label05 to label06 with label07;
        catch javax.xml.parsers.ParserConfigurationException from label01 to label02 with label32;
        catch javax.xml.parsers.ParserConfigurationException from label05 to label06 with label32;
        catch java.io.IOException from label01 to label02 with label34;
        catch java.io.IOException from label05 to label06 with label34;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch org.xml.sax.SAXException from label14 to label15 with label07;
        catch org.xml.sax.SAXException from label16 to label17 with label07;
        catch org.xml.sax.SAXException from label18 to label19 with label07;
        catch org.xml.sax.SAXException from label20 to label21 with label07;
        catch org.xml.sax.SAXException from label22 to label23 with label07;
        catch javax.xml.parsers.ParserConfigurationException from label14 to label15 with label32;
        catch javax.xml.parsers.ParserConfigurationException from label16 to label17 with label32;
        catch javax.xml.parsers.ParserConfigurationException from label18 to label19 with label32;
        catch javax.xml.parsers.ParserConfigurationException from label20 to label21 with label32;
        catch javax.xml.parsers.ParserConfigurationException from label22 to label23 with label32;
        catch java.io.IOException from label14 to label15 with label34;
        catch java.io.IOException from label16 to label17 with label34;
        catch java.io.IOException from label18 to label19 with label34;
        catch java.io.IOException from label20 to label21 with label34;
        catch java.io.IOException from label22 to label23 with label34;
        catch java.lang.Throwable from label14 to label16 with label11;
        catch java.lang.Throwable from label16 to label18 with label11;
        catch java.lang.Throwable from label18 to label21 with label11;
        catch java.lang.Throwable from label22 to label23 with label11;
        catch org.xml.sax.SAXException from label23 to label24 with label38;
        catch org.xml.sax.SAXException from label26 to label27 with label38;
        catch org.xml.sax.SAXException from label28 to label29 with label38;
        catch org.xml.sax.SAXException from label30 to label31 with label38;
        catch javax.xml.parsers.ParserConfigurationException from label23 to label24 with label37;
        catch javax.xml.parsers.ParserConfigurationException from label26 to label27 with label37;
        catch javax.xml.parsers.ParserConfigurationException from label28 to label29 with label37;
        catch javax.xml.parsers.ParserConfigurationException from label30 to label31 with label37;
        catch java.io.IOException from label23 to label24 with label39;
        catch java.io.IOException from label26 to label27 with label39;
        catch java.io.IOException from label28 to label29 with label39;
        catch java.io.IOException from label30 to label31 with label39;
        catch java.lang.Throwable from label23 to label25 with label36;
        catch java.lang.Throwable from label25 to label28 with label36;
        catch java.lang.Throwable from label28 to label31 with label36;
    }
    public void setProgressListener(org.fdroid.fdroid.ProgressListener)
    {
        org.fdroid.fdroid.RepoUpdater r0;
        org.fdroid.fdroid.ProgressListener $r1;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 := @parameter0: org.fdroid.fdroid.ProgressListener;

        r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.ProgressListener progressListener> = $r1;

        return;
    }
    public void update() throws org.fdroid.fdroid.RepoUpdater$UpdateException
    {
        org.fdroid.fdroid.RepoUpdater r0;
        org.fdroid.fdroid.net.Downloader $r1;
        boolean $z0;
        java.lang.String $r2;
        java.io.File $r3;

        r0 := @this: org.fdroid.fdroid.RepoUpdater;

        $r1 = virtualinvoke r0.<org.fdroid.fdroid.RepoUpdater: org.fdroid.fdroid.net.Downloader downloadIndex()>();

        $z0 = virtualinvoke $r1.<org.fdroid.fdroid.net.Downloader: boolean hasChanged()>();

        r0.<org.fdroid.fdroid.RepoUpdater: boolean hasChanged> = $z0;

        $z0 = r0.<org.fdroid.fdroid.RepoUpdater: boolean hasChanged>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.fdroid.fdroid.net.Downloader: java.lang.String getCacheTag()>();

        r0.<org.fdroid.fdroid.RepoUpdater: java.lang.String cacheTag> = $r2;

        $r3 = virtualinvoke $r1.<org.fdroid.fdroid.net.Downloader: java.io.File getFile()>();

        virtualinvoke r0.<org.fdroid.fdroid.RepoUpdater: void processDownloadedFile(java.io.File)>($r3);

     label1:
        return;
    }
