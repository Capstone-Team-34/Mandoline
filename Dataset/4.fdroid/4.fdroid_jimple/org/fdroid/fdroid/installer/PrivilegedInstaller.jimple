org.fdroid.fdroid.installer.PrivilegedInstaller extends org.fdroid.fdroid.installer.Installer
public static final int DELETE_FAILED_ABORTED
public static final int DELETE_FAILED_DEVICE_POLICY_MANAGER
public static final int DELETE_FAILED_INTERNAL_ERROR
public static final int DELETE_FAILED_OWNER_BLOCKED
public static final int DELETE_FAILED_USER_RESTRICTED
public static final int DELETE_SUCCEEDED
public static final int INSTALL_FAILED_ABORTED
public static final int INSTALL_FAILED_ALREADY_EXISTS
public static final int INSTALL_FAILED_CONFLICTING_PROVIDER
public static final int INSTALL_FAILED_CONTAINER_ERROR
public static final int INSTALL_FAILED_CPU_ABI_INCOMPATIBLE
public static final int INSTALL_FAILED_DEXOPT
public static final int INSTALL_FAILED_DUPLICATE_PACKAGE
public static final int INSTALL_FAILED_DUPLICATE_PERMISSION
public static final int INSTALL_FAILED_INSUFFICIENT_STORAGE
public static final int INSTALL_FAILED_INTERNAL_ERROR
public static final int INSTALL_FAILED_INVALID_APK
public static final int INSTALL_FAILED_INVALID_INSTALL_LOCATION
public static final int INSTALL_FAILED_INVALID_URI
public static final int INSTALL_FAILED_MEDIA_UNAVAILABLE
public static final int INSTALL_FAILED_MISSING_FEATURE
public static final int INSTALL_FAILED_MISSING_SHARED_LIBRARY
public static final int INSTALL_FAILED_NEWER_SDK
public static final int INSTALL_FAILED_NO_MATCHING_ABIS
public static final int INSTALL_FAILED_NO_SHARED_USER
public static final int INSTALL_FAILED_OLDER_SDK
public static final int INSTALL_FAILED_PACKAGE_CHANGED
public static final int INSTALL_FAILED_REPLACE_COULDNT_DELETE
public static final int INSTALL_FAILED_SHARED_USER_INCOMPATIBLE
public static final int INSTALL_FAILED_TEST_ONLY
public static final int INSTALL_FAILED_UID_CHANGED
public static final int INSTALL_FAILED_UPDATE_INCOMPATIBLE
public static final int INSTALL_FAILED_USER_RESTRICTED
public static final int INSTALL_FAILED_VERIFICATION_FAILURE
public static final int INSTALL_FAILED_VERIFICATION_TIMEOUT
public static final int INSTALL_FAILED_VERSION_DOWNGRADE
public static final int INSTALL_PARSE_FAILED_BAD_MANIFEST
public static final int INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME
public static final int INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID
public static final int INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING
public static final int INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES
public static final int INSTALL_PARSE_FAILED_MANIFEST_EMPTY
public static final int INSTALL_PARSE_FAILED_MANIFEST_MALFORMED
public static final int INSTALL_PARSE_FAILED_NOT_APK
public static final int INSTALL_PARSE_FAILED_NO_CERTIFICATES
public static final int INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION
public static final int INSTALL_REPLACE_EXISTING
public static final int INSTALL_SUCCEEDED
public static final int IS_EXTENSION_INSTALLED_NO
public static final int IS_EXTENSION_INSTALLED_PERMISSIONS_PROBLEM
public static final int IS_EXTENSION_INSTALLED_SIGNATURE_PROBLEM
public static final int IS_EXTENSION_INSTALLED_YES
public static final int NO_NATIVE_LIBRARIES
public static final java.lang.String PRIVILEGED_EXTENSION_PACKAGE_NAME
private static final java.lang.String PRIVILEGED_EXTENSION_SERVICE_INTENT
private static final int REQUEST_CONFIRM_PERMS
private static final java.lang.String TAG
private android.app.Activity mActivity
    public void <init>(android.app.Activity, android.content.pm.PackageManager, org.fdroid.fdroid.installer.Installer$InstallerCallback) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        android.app.Activity $r1;
        android.content.pm.PackageManager $r2;
        org.fdroid.fdroid.installer.Installer$InstallerCallback $r3;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: android.app.Activity;

        $r2 := @parameter1: android.content.pm.PackageManager;

        $r3 := @parameter2: org.fdroid.fdroid.installer.Installer$InstallerCallback;

        specialinvoke r0.<org.fdroid.fdroid.installer.Installer: void <init>(android.content.Context,android.content.pm.PackageManager,org.fdroid.fdroid.installer.Installer$InstallerCallback)>($r1, $r2, $r3);

        r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.app.Activity mActivity> = $r1;

        return;
    }
    static void access$000(org.fdroid.fdroid.installer.PrivilegedInstaller, java.lang.String) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: void doDeletePackageInternal(java.lang.String)>($r1);

        return;
    }
    private void doDeletePackageInternal(java.lang.String) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        java.lang.String $r1;
        org.fdroid.fdroid.installer.PrivilegedInstaller$5 r2;
        android.content.Intent r3;
        android.content.Context $r4;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.fdroid.fdroid.installer.PrivilegedInstaller$5;

        specialinvoke r2.<org.fdroid.fdroid.installer.PrivilegedInstaller$5: void <init>(org.fdroid.fdroid.installer.PrivilegedInstaller,java.lang.String)>(r0, $r1);

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(java.lang.String)>("org.fdroid.fdroid.privileged.IPrivilegedService");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("org.fdroid.fdroid.privileged");

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        $r4 = virtualinvoke $r4.<android.content.Context: android.content.Context getApplicationContext()>();

        virtualinvoke $r4.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r3, r2, 1);

        return;
    }
    private void doInstallPackageInternal(android.net.Uri) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        android.net.Uri $r1;
        org.fdroid.fdroid.installer.PrivilegedInstaller$2 r2;
        android.content.Intent r3;
        android.content.Context $r4;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: android.net.Uri;

        r2 = new org.fdroid.fdroid.installer.PrivilegedInstaller$2;

        specialinvoke r2.<org.fdroid.fdroid.installer.PrivilegedInstaller$2: void <init>(org.fdroid.fdroid.installer.PrivilegedInstaller,android.net.Uri)>(r0, $r1);

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(java.lang.String)>("org.fdroid.fdroid.privileged.IPrivilegedService");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("org.fdroid.fdroid.privileged");

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        $r4 = virtualinvoke $r4.<android.content.Context: android.content.Context getApplicationContext()>();

        virtualinvoke $r4.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r3, r2, 1);

        return;
    }
    public static boolean isExtensionInstalled(android.content.Context)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        android.content.pm.PackageManager $r2;

        $r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>("org.fdroid.fdroid.privileged", 1);

     label2:
        return 1;

     label3:
        r1 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }
    public static int isExtensionInstalledCorrectly(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.SecurityException r1;
        org.fdroid.fdroid.installer.PrivilegedInstaller$1 r2;
        java.lang.Object r3;
        android.os.Bundle r4;
        android.content.Intent r5;
        boolean $z0;
        java.lang.Throwable $r6;
        java.lang.InterruptedException $r7;

        $r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <org.fdroid.fdroid.installer.PrivilegedInstaller: boolean isExtensionInstalled(android.content.Context)>($r0);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r3 = new java.lang.Object;

        specialinvoke r3.<java.lang.Object: void <init>()>();

        r4 = new android.os.Bundle;

        specialinvoke r4.<android.os.Bundle: void <init>()>();

        r2 = new org.fdroid.fdroid.installer.PrivilegedInstaller$1;

        specialinvoke r2.<org.fdroid.fdroid.installer.PrivilegedInstaller$1: void <init>(android.os.Bundle,java.lang.Object)>(r4, r3);

        r5 = new android.content.Intent;

        specialinvoke r5.<android.content.Intent: void <init>(java.lang.String)>("org.fdroid.fdroid.privileged.IPrivilegedService");

        virtualinvoke r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("org.fdroid.fdroid.privileged");

     label02:
        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        virtualinvoke $r0.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r5, r2, 1);

     label03:
        entermonitor r3;

     label04:
        virtualinvoke r3.<java.lang.Object: void wait(long)>(3000L);

     label05:
        exitmonitor r3;

     label06:
        $z0 = virtualinvoke r4.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("has_permissions", 0);

        if $z0 != 0 goto label11;

        return 3;

     label07:
        r1 := @caughtexception;

        return 2;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r6;

     label11:
        return 1;

     label12:
        $r7 := @caughtexception;

        goto label05;

        catch java.lang.SecurityException from label02 to label03 with label07;
        catch java.lang.InterruptedException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
    private int newPermissionCount(android.net.Uri)
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        android.net.Uri $r1;
        org.fdroid.fdroid.privileged.views.AppDiff r2;
        org.fdroid.fdroid.privileged.views.AppSecurityPermissions r3;
        android.content.pm.PackageInfo $r4;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        android.content.pm.ApplicationInfo $r7;
        int $i0;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: android.net.Uri;

        r2 = new org.fdroid.fdroid.privileged.views.AppDiff;

        $r5 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        specialinvoke r2.<org.fdroid.fdroid.privileged.views.AppDiff: void <init>(android.content.pm.PackageManager,android.net.Uri)>($r6, $r1);

        $r4 = r2.<org.fdroid.fdroid.privileged.views.AppDiff: android.content.pm.PackageInfo mPkgInfo>;

        if $r4 != null goto label1;

        return -1;

     label1:
        r3 = new org.fdroid.fdroid.privileged.views.AppSecurityPermissions;

        $r5 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        $r4 = r2.<org.fdroid.fdroid.privileged.views.AppDiff: android.content.pm.PackageInfo mPkgInfo>;

        specialinvoke r3.<org.fdroid.fdroid.privileged.views.AppSecurityPermissions: void <init>(android.content.Context,android.content.pm.PackageInfo)>($r5, $r4);

        $r7 = r2.<org.fdroid.fdroid.privileged.views.AppDiff: android.content.pm.ApplicationInfo mInstalledAppInfo>;

        if $r7 == null goto label2;

        $i0 = virtualinvoke r3.<org.fdroid.fdroid.privileged.views.AppSecurityPermissions: int getPermissionCount(int)>(4);

        return $i0;

     label2:
        return 1;
    }
    protected void deletePackageInternal(java.lang.String) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        java.lang.String $r1;
        android.support.v7.app.AlertDialog$Builder r2;
        android.content.pm.PackageManager$NameNotFoundException r3;
        android.content.pm.PackageManager $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        boolean z0, z1;
        org.fdroid.fdroid.installer.Installer$InstallerCallback $r6;
        android.content.Context $r7;
        java.lang.CharSequence $r8;
        android.graphics.drawable.Drawable $r9;
        org.fdroid.fdroid.installer.PrivilegedInstaller$3 $r10;
        org.fdroid.fdroid.installer.PrivilegedInstaller$4 $r11;
        android.support.v7.app.AlertDialog $r12;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.pm.PackageManager mPm>;

     label01:
        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r1, 8192);

     label02:
        $i0 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label06;

        z0 = 1;

     label03:
        $i0 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label07;

        z1 = 1;

     label04:
        if z0 == 0 goto label08;

        if z1 != 0 goto label08;

        $r6 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r6.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(2, 3);

        return;

     label05:
        r3 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PrivilegedInstaller", "Failed to get ApplicationInfo for uninstalling");

        return;

     label06:
        z0 = 0;

        goto label03;

     label07:
        z1 = 0;

        goto label04;

     label08:
        if z1 == 0 goto label10;

        $i0 = 2131165502;

     label09:
        r2 = new android.support.v7.app.AlertDialog$Builder;

        $r7 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        specialinvoke r2.<android.support.v7.app.AlertDialog$Builder: void <init>(android.content.Context)>($r7);

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.pm.PackageManager mPm>;

        $r8 = virtualinvoke $r5.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r4);

        virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>($r8);

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.pm.PackageManager mPm>;

        $r9 = virtualinvoke $r5.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>($r4);

        virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>($r9);

        $r10 = new org.fdroid.fdroid.installer.PrivilegedInstaller$3;

        specialinvoke $r10.<org.fdroid.fdroid.installer.PrivilegedInstaller$3: void <init>(org.fdroid.fdroid.installer.PrivilegedInstaller,java.lang.String)>(r0, $r1);

        virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(17039370, $r10);

        $r11 = new org.fdroid.fdroid.installer.PrivilegedInstaller$4;

        specialinvoke $r11.<org.fdroid.fdroid.installer.PrivilegedInstaller$4: void <init>(org.fdroid.fdroid.installer.PrivilegedInstaller)>(r0);

        virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(17039360, $r11);

        virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setMessage(int)>($i0);

        $r12 = virtualinvoke r2.<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog create()>();

        virtualinvoke $r12.<android.support.v7.app.AlertDialog: void show()>();

        return;

     label10:
        $i0 = 2131165497;

        goto label09;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label05;
    }
    public boolean handleOnActivityResult(int, int, android.content.Intent)
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        int $i0, $i1;
        android.content.Intent $r1;
        org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException r2;
        android.net.Uri $r3;
        org.fdroid.fdroid.installer.Installer$InstallerCallback $r4;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.content.Intent;

        lookupswitch($i0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        if $i1 != -1 goto label6;

        $r3 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

     label3:
        specialinvoke r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: void doInstallPackageInternal(android.net.Uri)>($r3);

     label4:
        return 1;

     label5:
        r2 := @caughtexception;

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r4.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(1, 3);

        return 1;

     label6:
        if $i1 != 2 goto label7;

        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r4.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(1, 4);

        return 1;

     label7:
        $r4 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r4.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(1, 2);

        return 1;

        catch org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException from label3 to label4 with label5;
    }
    protected void installPackageInternal(java.io.File) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        java.io.File $r1;
        org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException r2;
        android.content.Intent r3;
        android.net.Uri $r4;
        int $i0;
        org.fdroid.fdroid.installer.Installer$InstallerCallback $r5;
        android.content.Context $r6;
        android.app.Activity $r7;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        $r1 := @parameter0: java.io.File;

        $r4 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r1);

        $i0 = specialinvoke r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: int newPermissionCount(android.net.Uri)>($r4);

        if $i0 >= 0 goto label1;

        $r5 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r5.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(1, 4);

        return;

     label1:
        if $i0 <= 0 goto label2;

        r3 = new android.content.Intent;

        $r6 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.content.Context mContext>;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r6, class "Lorg/fdroid/fdroid/privileged/views/InstallConfirmActivity;");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r4);

        $r7 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: android.app.Activity mActivity>;

        virtualinvoke $r7.<android.app.Activity: void startActivityForResult(android.content.Intent,int)>(r3, 0);

        return;

     label2:
        specialinvoke r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: void doInstallPackageInternal(android.net.Uri)>($r4);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r5 = r0.<org.fdroid.fdroid.installer.PrivilegedInstaller: org.fdroid.fdroid.installer.Installer$InstallerCallback mCallback>;

        interfaceinvoke $r5.<org.fdroid.fdroid.installer.Installer$InstallerCallback: void onError(int,int)>(1, 3);

        return;

        catch org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException from label2 to label3 with label4;
    }
    protected void installPackageInternal(java.util.List) throws org.fdroid.fdroid.installer.Installer$AndroidNotCompatibleException
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;
        java.util.List r1;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        r1 := @parameter0: java.util.List;

        return;
    }
    public boolean supportsUnattendedOperations()
    {
        org.fdroid.fdroid.installer.PrivilegedInstaller r0;

        r0 := @this: org.fdroid.fdroid.installer.PrivilegedInstaller;

        return 0;
    }
