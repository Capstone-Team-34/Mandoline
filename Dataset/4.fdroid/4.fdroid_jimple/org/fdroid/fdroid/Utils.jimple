org.fdroid.fdroid.Utils extends java.lang.Object
private static final int BUFFER_SIZE
private static final java.text.SimpleDateFormat DATE_FORMAT
public static final java.lang.String FALLBACK_ICONS_DIR
private static final java.lang.String[] FRIENDLY_SIZE_FORMAT
private static final java.lang.String TAG
private static final java.text.SimpleDateFormat TIME_FORMAT
private static final java.lang.String[] androidVersionNames
    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0;
        java.util.Locale $r1;
        java.lang.String[] $r2;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd", $r1);

        <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat DATE_FORMAT> = $r0;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd_HH:mm:ss", $r1);

        <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat TIME_FORMAT> = $r0;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "%.0f B";

        $r2[1] = "%.0f KiB";

        $r2[2] = "%.1f MiB";

        $r2[3] = "%.2f GiB";

        <org.fdroid.fdroid.Utils: java.lang.String[] FRIENDLY_SIZE_FORMAT> = $r2;

        $r2 = newarray (java.lang.String)[24];

        $r2[0] = "?";

        $r2[1] = "1.0";

        $r2[2] = "1.1";

        $r2[3] = "1.5";

        $r2[4] = "1.6";

        $r2[5] = "2.0";

        $r2[6] = "2.0.1";

        $r2[7] = "2.1";

        $r2[8] = "2.2";

        $r2[9] = "2.3";

        $r2[10] = "2.3.3";

        $r2[11] = "3.0";

        $r2[12] = "3.1";

        $r2[13] = "3.2";

        $r2[14] = "4.0";

        $r2[15] = "4.0.3";

        $r2[16] = "4.1";

        $r2[17] = "4.2";

        $r2[18] = "4.3";

        $r2[19] = "4.4";

        $r2[20] = "4.4W";

        $r2[21] = "5.0";

        $r2[22] = "5.1";

        $r2[23] = "6.0";

        <org.fdroid.fdroid.Utils: java.lang.String[] androidVersionNames> = $r2;

        return;
    }
    public void <init>()
    {
        org.fdroid.fdroid.Utils r0;

        r0 := @this: org.fdroid.fdroid.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String calcFingerprint(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean matches(java.lang.String)>(".*[^a-fA-F0-9].*");

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Utils", "Signing key certificate was blank or contained a non-hex-digit!");

        return null;

     label2:
        $r1 = staticinvoke <org.fdroid.fdroid.Hasher: byte[] unhex(java.lang.String)>($r0);

        $r0 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String calcFingerprint(byte[])>($r1);

        return $r0;
    }
    public static java.lang.String calcFingerprint(java.security.cert.Certificate)
    {
        java.security.cert.Certificate $r0;
        java.security.cert.CertificateEncodingException r1;
        byte[] $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.security.cert.Certificate;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r0.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r3 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String calcFingerprint(byte[])>($r2);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        return null;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }
    public static java.lang.String calcFingerprint(byte[])
    {
        byte[] $r0;
        byte b0;
        java.lang.Exception r1;
        java.util.Formatter r2;
        int i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r8;
        java.security.MessageDigest $r5;
        java.lang.Object[] $r6;
        java.lang.Byte $r7;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label01;

        return null;

     label01:
        i1 = lengthof $r0;

        if i1 >= 256 goto label02;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key was shorter than 256 bytes (");

        i1 = lengthof $r0;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), cannot be valid!");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Utils", $r4);

        return null;

     label02:
        $r4 = null;

     label03:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[])>($r0);

        $r0 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

     label04:
        r2 = new java.util.Formatter;

        $r3 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r2.<java.util.Formatter: void <init>(java.lang.Appendable)>($r3);

        i1 = lengthof $r0;

     label06:
        i2 = 0;

     label07:
        if i2 >= i1 goto label10;

     label08:
        b0 = $r0[i2];

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r6[0] = $r7;

        virtualinvoke r2.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%02X", $r6);

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        $r8 = virtualinvoke r2.<java.util.Formatter: java.lang.String toString()>();

     label11:
        $r4 = $r8;

     label12:
        virtualinvoke r2.<java.util.Formatter: void close()>();

     label13:
        return $r8;

     label14:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Utils", "Unable to get certificate fingerprint", r1);

        return $r4;

        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }
    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 != null goto label1;

        return;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static void consumeStream(java.io.InputStream)
    {
        java.io.InputStream $r0;
        byte[] r1;
        int $i0;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[256];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r1);

     label2:
        if $i0 != -1 goto label1;

        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.fdroid.fdroid.Utils: void copy(java.io.InputStream,java.io.OutputStream,org.fdroid.fdroid.ProgressListener,org.fdroid.fdroid.ProgressListener$Event)>($r0, $r1, null, null);

        return;
    }
    public static void copy(java.io.InputStream, java.io.OutputStream, org.fdroid.fdroid.ProgressListener, org.fdroid.fdroid.ProgressListener$Event) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        org.fdroid.fdroid.ProgressListener $r2;
        org.fdroid.fdroid.ProgressListener$Event $r3;
        byte[] r4;
        int $i0, i1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: org.fdroid.fdroid.ProgressListener;

        $r3 := @parameter3: org.fdroid.fdroid.ProgressListener$Event;

        r4 = newarray (byte)[4096];

        i1 = 0;

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r4);

        if $i0 != -1 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;

     label2:
        if $r2 == null goto label3;

        i1 = i1 + $i0;

        $r3.<org.fdroid.fdroid.ProgressListener$Event: int progress> = i1;

        interfaceinvoke $r2.<org.fdroid.fdroid.ProgressListener: void onProgress(org.fdroid.fdroid.ProgressListener$Event)>($r3);

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, $i0);

        goto label1;
    }
    public static boolean copyQuietly(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.io.FileInputStream r2, r4;
        java.io.FileOutputStream r3, r5;
        java.io.IOException r6;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        r4 = null;

        r5 = null;

     label01:
        r2 = new java.io.FileInputStream;

     label02:
        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label03:
        r3 = new java.io.FileOutputStream;

     label04:
        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label05:
        staticinvoke <org.fdroid.fdroid.Utils: void copy(java.io.InputStream,java.io.OutputStream)>(r2, r3);

     label06:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r3);

        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r2);

        return 1;

     label07:
        r6 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Utils", "I/O error when copying a file", r6);

     label09:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r4);

        return 0;

     label10:
        $r7 := @caughtexception;

     label11:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r4);

        throw $r7;

     label12:
        $r7 := @caughtexception;

        r4 = r2;

        goto label11;

     label13:
        $r7 := @caughtexception;

        r5 = r3;

        r4 = r2;

        goto label11;

     label14:
        r6 := @caughtexception;

        r4 = r2;

        goto label08;

     label15:
        r6 := @caughtexception;

        r5 = r3;

        r4 = r2;

        goto label08;

        catch java.io.IOException from label02 to label03 with label07;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label14;
        catch java.lang.Throwable from label03 to label05 with label12;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
    public static void debugLog(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        return;
    }
    public static void debugLog(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0, $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        return;
    }
    public static void deleteFiles(java.io.File, java.lang.String, java.lang.String)
    {
        java.io.File $r0;
        java.lang.String $r1, $r2, $r5;
        int i0, i1;
        java.io.File[] $r3;
        java.lang.StringBuilder $r4;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r0 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r3 == null goto label8;

        if $r1 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cleaning up files in ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that start with \"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("Utils", $r5);

     label2:
        if $r2 == null goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cleaning up files in ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that end with \"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.fdroid.fdroid.Utils: void debugLog(java.lang.String,java.lang.String)>("Utils", $r5);

     label3:
        i0 = lengthof $r3;

        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        $r0 = $r3[i1];

        if $r1 == null goto label5;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>($r1);

        if $z0 != 0 goto label6;

     label5:
        if $r2 == null goto label7;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label7;

     label6:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label7;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete cache file ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Utils", $r5);

     label7:
        i1 = i1 + 1;

        goto label4;

     label8:
        return;
    }
    public static java.lang.String formatDate(java.util.Date, java.lang.String)
    {
        java.util.Date $r0;
        java.lang.String $r1;
        java.text.SimpleDateFormat $r2;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat DATE_FORMAT>;

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String formatDateFormat(java.text.DateFormat,java.util.Date,java.lang.String)>($r2, $r0, $r1);

        return $r1;
    }
    private static java.lang.String formatDateFormat(java.text.DateFormat, java.util.Date, java.lang.String)
    {
        java.text.DateFormat $r0;
        java.util.Date $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.text.DateFormat;

        $r1 := @parameter1: java.util.Date;

        $r2 := @parameter2: java.lang.String;

        if $r1 != null goto label1;

        return $r2;

     label1:
        $r2 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }
    public static java.lang.String formatFingerprint(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 64 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>(".*[^0-9a-fA-F].*");

        if $z0 == 0 goto label2;

     label1:
        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165284);

        return $r1;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $i0 = 2;

     label3:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i1 = $i0 + 2;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + 2;

        goto label3;

     label4:
        return $r2;
    }
    public static java.lang.String formatTime(java.util.Date, java.lang.String)
    {
        java.util.Date $r0;
        java.lang.String $r1;
        java.text.SimpleDateFormat $r2;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat TIME_FORMAT>;

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String formatDateFormat(java.text.DateFormat,java.util.Date,java.lang.String)>($r2, $r0, $r1);

        return $r1;
    }
    public static java.lang.String getAndroidVersionName(int)
    {
        int $i0, $i1;
        java.lang.String[] $r0;
        java.lang.String $r1;
        java.util.Locale $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r0 = <org.fdroid.fdroid.Utils: java.lang.String[] androidVersionNames>;

        $r1 = $r0[0];

        return $r1;

     label1:
        $r0 = <org.fdroid.fdroid.Utils: java.lang.String[] androidVersionNames>;

        $i1 = lengthof $r0;

        if $i0 < $i1 goto label2;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "v%d", $r3);

        return $r1;

     label2:
        $r0 = <org.fdroid.fdroid.Utils: java.lang.String[] androidVersionNames>;

        $r1 = $r0[$i0];

        return $r1;
    }
    public static org.fdroid.fdroid.data.SanitizedFile getApkCacheDir(android.content.Context)
    {
        android.content.Context $r0;
        org.fdroid.fdroid.data.SanitizedFile r1;
        java.io.File $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        r1 = new org.fdroid.fdroid.data.SanitizedFile;

        $r2 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context,boolean)>($r0, 1);

        specialinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r2, "apks");

        $z0 = virtualinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: boolean mkdir()>();

     label1:
        return r1;
    }
    public static java.io.File getApkDownloadDir(android.content.Context)
    {
        android.content.Context $r0;
        org.fdroid.fdroid.data.SanitizedFile r1;
        java.io.File $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        r1 = new org.fdroid.fdroid.data.SanitizedFile;

        $r2 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context,boolean)>($r0, 0);

        specialinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: void <init>(java.io.File,java.lang.String)>($r2, "temp");

        $z0 = virtualinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.fdroid.fdroid.data.SanitizedFile: boolean mkdir()>();

     label1:
        staticinvoke <org.fdroid.fdroid.compat.FileCompat: boolean setExecutable(org.fdroid.fdroid.data.SanitizedFile,boolean,boolean)>(r1, 1, 0);

        return r1;
    }
    public static java.lang.String getApkUrl(java.lang.String, org.fdroid.fdroid.data.Apk)
    {
        java.lang.String $r0;
        org.fdroid.fdroid.data.Apk $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.fdroid.fdroid.data.Apk;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r0 = $r1.<org.fdroid.fdroid.data.Apk: java.lang.String apkName>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "%20");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public static java.lang.String getBinaryHash(java.io.File, java.lang.String)
    {
        java.io.File $r0;
        java.lang.String $r1, $r9;
        java.io.BufferedInputStream r2;
        byte[] r3;
        java.io.FileInputStream r4, r5;
        java.security.MessageDigest $r6;
        int $i0;
        java.io.IOException r7;
        java.lang.StringBuilder $r8;
        java.security.NoSuchAlgorithmException r10, r12;
        java.lang.Throwable $r11;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r5 = null;

     label01:
        $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

     label02:
        r4 = new java.io.FileInputStream;

     label03:
        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label04:
        r2 = new java.io.BufferedInputStream;

     label05:
        specialinvoke r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r4);

     label06:
        r3 = newarray (byte)[524288];

     label07:
        $i0 = virtualinvoke r2.<java.io.BufferedInputStream: int read(byte[])>(r3);

     label08:
        if $i0 == -1 goto label14;

     label09:
        virtualinvoke $r6.<java.security.MessageDigest: void update(byte[],int,int)>(r3, 0, $i0);

     label10:
        goto label07;

     label11:
        r7 := @caughtexception;

        r5 = r4;

     label12:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading \"");

        $r9 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" to compute ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hash.");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Utils", $r1, r7);

     label13:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        return null;

     label14:
        r3 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>();

        $r9 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String toHexString(byte[])>(r3);

     label15:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r4);

        return $r9;

     label16:
        r10 := @caughtexception;

     label17:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device does not support ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MessageDisgest algorithm");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Utils", $r1);

     label18:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        return null;

     label19:
        $r11 := @caughtexception;

     label20:
        staticinvoke <org.fdroid.fdroid.Utils: void closeQuietly(java.io.Closeable)>(r5);

        throw $r11;

     label21:
        $r11 := @caughtexception;

        r5 = r4;

        goto label20;

     label22:
        r12 := @caughtexception;

        r5 = r4;

        goto label17;

     label23:
        r7 := @caughtexception;

        goto label12;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label16;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label16;
        catch java.lang.Throwable from label01 to label04 with label19;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label22;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label22;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label22;
        catch java.lang.Throwable from label04 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.io.IOException from label14 to label15 with label11;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label22;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label17 to label18 with label19;
    }
    public static java.lang.String getFriendlySize(long)
    {
        long $l0;
        double d0;
        int i1, $i2;
        java.lang.String[] $r0;
        byte $b3;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.lang.Double $r3;

        $l0 := @parameter0: long;

        d0 = (double) $l0;

        i1 = 0;

     label1:
        $r0 = <org.fdroid.fdroid.Utils: java.lang.String[] FRIENDLY_SIZE_FORMAT>;

        $i2 = lengthof $r0;

        $i2 = $i2 + -1;

        if i1 >= $i2 goto label2;

        $b3 = d0 cmpl 1024.0;

        if $b3 < 0 goto label2;

        d0 = 100.0 * d0;

        d0 = d0 / 1024.0;

        d0 = d0 / 100.0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r0 = <org.fdroid.fdroid.Utils: java.lang.String[] FRIENDLY_SIZE_FORMAT>;

        $r1 = $r0[i1];

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        return $r1;
    }
    public static java.lang.String getIconsDir(android.content.Context, double)
    {
        android.content.Context $r0;
        double $d0, $d1;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        byte $b1;

        $r0 := @parameter0: android.content.Context;

        $d0 := @parameter1: double;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        $d1 = (double) $i0;

        $d0 = $d1 * $d0;

        $b1 = $d0 cmpl 640.0;

        if $b1 < 0 goto label1;

        return "/icons-640/";

     label1:
        $b1 = $d0 cmpl 480.0;

        if $b1 < 0 goto label2;

        return "/icons-480/";

     label2:
        $b1 = $d0 cmpl 320.0;

        if $b1 < 0 goto label3;

        return "/icons-320/";

     label3:
        $b1 = $d0 cmpl 240.0;

        if $b1 < 0 goto label4;

        return "/icons-240/";

     label4:
        $b1 = $d0 cmpl 160.0;

        if $b1 < 0 goto label5;

        return "/icons-160/";

     label5:
        return "/icons-120/";
    }
    public static com.nostra13.universalimageloader.core.DisplayImageOptions$Builder getImageLoadingOptions()
    {
        com.nostra13.universalimageloader.core.DisplayImageOptions$Builder $r0;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r1;
        com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer $r2;
        android.graphics.Bitmap$Config $r3;

        $r0 = new com.nostra13.universalimageloader.core.DisplayImageOptions$Builder;

        specialinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: void <init>()>();

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder cacheInMemory(boolean)>(1);

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder cacheOnDisk(boolean)>(1);

        $r1 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType NONE>;

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder imageScaleType(com.nostra13.universalimageloader.core.assist.ImageScaleType)>($r1);

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder showImageOnLoading(int)>(2130837593);

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder showImageForEmptyUri(int)>(2130837593);

        $r2 = new com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;

        specialinvoke $r2.<com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer: void <init>(int,boolean,boolean,boolean)>(200, 1, 1, 0);

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder displayer(com.nostra13.universalimageloader.core.display.BitmapDisplayer)>($r2);

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        $r0 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.DisplayImageOptions$Builder: com.nostra13.universalimageloader.core.DisplayImageOptions$Builder bitmapConfig(android.graphics.Bitmap$Config)>($r3);

        return $r0;
    }
    public static android.net.Uri getLocalRepoUri(org.fdroid.fdroid.data.Repo)
    {
        org.fdroid.fdroid.data.Repo $r0;
        java.lang.String $r1;
        boolean $z0;
        android.net.Uri $r2;
        android.net.Uri$Builder $r3;
        org.fdroid.fdroid.Preferences $r4;

        $r0 := @parameter0: org.fdroid.fdroid.data.Repo;

        $r1 = $r0.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("http://wifi-not-enabled");

        return $r2;

     label1:
        $r1 = $r0.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r1 = $r0.<org.fdroid.fdroid.data.Repo: java.lang.String fingerprint>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label2;

        $r1 = $r0.<org.fdroid.fdroid.data.Repo: java.lang.String fingerprint>;

        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("fingerprint", $r1);

     label2:
        $r4 = staticinvoke <org.fdroid.fdroid.Preferences: org.fdroid.fdroid.Preferences get()>();

        $z0 = virtualinvoke $r4.<org.fdroid.fdroid.Preferences: boolean isLocalRepoHttpsEnabled()>();

        if $z0 == 0 goto label4;

        $r1 = "https";

     label3:
        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>($r1);

        $r2 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r2;

     label4:
        $r1 = "http";

        goto label3;
    }
    public static java.util.Locale getLocaleFromAndroidLangTag(java.lang.String)
    {
        java.lang.String $r0, $r3;
        boolean $z0;
        java.lang.String[] $r1;
        int $i0;
        java.util.Locale $r2;
        char $c1;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $i0 = lengthof $r1;

        if $i0 != 1 goto label2;

        $r2 = new java.util.Locale;

        $r0 = $r1[0];

        specialinvoke $r2.<java.util.Locale: void <init>(java.lang.String)>($r0);

        return $r2;

     label2:
        $i0 = lengthof $r1;

        if $i0 != 2 goto label4;

        $r0 = $r1[1];

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 114 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 3 goto label3;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        $r2 = new java.util.Locale;

        $r3 = $r1[0];

        specialinvoke $r2.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>($r3, $r0);

        return $r2;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Locale could not be parsed from language tag: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Utils", $r3);

        $r2 = new java.util.Locale;

        specialinvoke $r2.<java.util.Locale: void <init>(java.lang.String)>($r0);

        return $r2;
    }
    public static int getMaxSdkVersion(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.fdroid.fdroid.Utils: int getMinMaxSdkVersion(android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, "maxSdkVersion");

        return $i0;
    }
    private static int getMinMaxSdkVersion(android.content.Context, java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2, $r5;
        android.content.res.AssetManager $r3;
        android.content.res.XmlResourceParser $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object r6;
        java.lang.Throwable $r7;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

     label01:
        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>($r1, 0);

        $r3 = virtualinvoke $r0.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r4 = virtualinvoke $r3.<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>("AndroidManifest.xml");

        $i0 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: int getEventType()>();

     label02:
        if $i0 == 1 goto label18;

        if $i0 != 2 goto label12;

        $r1 = "uses-sdk";

     label03:
        $r5 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

     label04:
        if $z0 == 0 goto label12;

        $i0 = 0;

     label05:
        $i1 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: int getAttributeCount()>();

     label06:
        if $i0 >= $i1 goto label12;

     label07:
        $r1 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: java.lang.String getAttributeName(int)>($i0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label08:
        if $z0 == 0 goto label11;

     label09:
        $r1 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(int)>($i0);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label10:
        return $i0;

     label11:
        $i0 = $i0 + 1;

        goto label05;

     label12:
        $i0 = interfaceinvoke $r4.<android.content.res.XmlResourceParser: int nextToken()>();

     label13:
        goto label02;

     label14:
        r6 := @caughtexception;

     label15:
        $r7 = (java.lang.Throwable) r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Utils", "Could not get min/max sdk version", $r7);

        return 0;

     label16:
        r6 := @caughtexception;

        goto label15;

     label17:
        r6 := @caughtexception;

        goto label15;

     label18:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label09 to label10 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label17;
        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label12 to label13 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label16;
    }
    public static int getMinSdkVersion(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.fdroid.fdroid.Utils: int getMinMaxSdkVersion(android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, "minSdkVersion");

        return $i0;
    }
    public static android.net.Uri getSharingUri(org.fdroid.fdroid.data.Repo)
    {
        org.fdroid.fdroid.data.Repo $r0;
        java.lang.String $r1;
        boolean $z0;
        android.net.Uri $r2;
        android.net.Uri$Builder $r3;

        $r0 := @parameter0: org.fdroid.fdroid.data.Repo;

        $r1 = $r0.<org.fdroid.fdroid.data.Repo: java.lang.String address>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("http://wifi-not-enabled");

        return $r2;

     label1:
        $r2 = staticinvoke <org.fdroid.fdroid.Utils: android.net.Uri getLocalRepoUri(org.fdroid.fdroid.data.Repo)>($r0);

        $r3 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r1 = virtualinvoke $r2.<android.net.Uri: java.lang.String getScheme()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("http", "fdroidrepo");

        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>($r1);

        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("swap", "1");

        $r1 = <org.fdroid.fdroid.FDroidApp: java.lang.String bssid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label2;

        $r1 = <org.fdroid.fdroid.FDroidApp: java.lang.String bssid>;

        $r1 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r1);

        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("bssid", $r1);

        $r1 = <org.fdroid.fdroid.FDroidApp: java.lang.String ssid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label2;

        $r1 = <org.fdroid.fdroid.FDroidApp: java.lang.String ssid>;

        $r1 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r1);

        virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("ssid", $r1);

     label2:
        $r2 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r2;
    }
    public static java.lang.String getVersionName(android.content.Context)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        android.content.pm.PackageInfo $r4;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, 0);

     label2:
        $r3 = $r4.<android.content.pm.PackageInfo: java.lang.String versionName>;

        return $r3;

     label3:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Utils", "Could not get client version name", r1);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }
    public static java.lang.String hashBytes(byte[], java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1, $r4;
        java.security.NoSuchAlgorithmException r2;
        java.security.MessageDigest $r3;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

        $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r0);

        $r4 = staticinvoke <org.fdroid.fdroid.Utils: java.lang.String toHexString(byte[])>($r0);

        virtualinvoke $r3.<java.security.MessageDigest: void reset()>();

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device does not support ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MessageDisgest algorithm");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Utils", $r1);

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }
    public static java.util.Date parseDate(java.lang.String, java.util.Date)
    {
        java.lang.String $r0;
        java.util.Date $r1;
        java.text.SimpleDateFormat $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Date;

        $r2 = <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat DATE_FORMAT>;

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.util.Date parseDateFormat(java.text.DateFormat,java.lang.String,java.util.Date)>($r2, $r0, $r1);

        return $r1;
    }
    private static java.util.Date parseDateFormat(java.text.DateFormat, java.lang.String, java.util.Date)
    {
        java.text.DateFormat $r0;
        java.lang.String $r1;
        java.util.Date $r2, $r4;
        java.text.ParseException r3;
        int $i0;

        $r0 := @parameter0: java.text.DateFormat;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Date;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return $r2;

     label2:
        $r4 = virtualinvoke $r0.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r1);

     label3:
        return $r4;

     label4:
        r3 := @caughtexception;

        return $r2;

        catch java.text.ParseException from label2 to label3 with label4;
    }
    public static int parseInt(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        java.lang.NumberFormatException r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return $i0;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label3:
        return $i1;

     label4:
        r1 := @caughtexception;

        return $i0;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }
    public static java.util.Date parseTime(java.lang.String, java.util.Date)
    {
        java.lang.String $r0;
        java.util.Date $r1;
        java.text.SimpleDateFormat $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Date;

        $r2 = <org.fdroid.fdroid.Utils: java.text.SimpleDateFormat TIME_FORMAT>;

        $r1 = staticinvoke <org.fdroid.fdroid.Utils: java.util.Date parseDateFormat(java.text.DateFormat,java.lang.String,java.util.Date)>($r2, $r0, $r1);

        return $r1;
    }
    public static boolean symlinkOrCopyFileQuietly(org.fdroid.fdroid.data.SanitizedFile, org.fdroid.fdroid.data.SanitizedFile)
    {
        org.fdroid.fdroid.data.SanitizedFile $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: org.fdroid.fdroid.data.SanitizedFile;

        $r1 := @parameter1: org.fdroid.fdroid.data.SanitizedFile;

        $z0 = staticinvoke <org.fdroid.fdroid.compat.FileCompat: boolean symlink(org.fdroid.fdroid.data.SanitizedFile,org.fdroid.fdroid.data.SanitizedFile)>($r0, $r1);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <org.fdroid.fdroid.Utils: boolean copyQuietly(java.io.File,java.io.File)>($r0, $r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static java.lang.String toHexString(byte[])
    {
        byte[] $r0;
        java.math.BigInteger r1;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.Object[] $r4;

        $r0 := @parameter0: byte[];

        r1 = new java.math.BigInteger;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%0");

        $i0 = lengthof $r0;

        $i0 = $i0 << 1;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r4);

        return $r3;
    }
