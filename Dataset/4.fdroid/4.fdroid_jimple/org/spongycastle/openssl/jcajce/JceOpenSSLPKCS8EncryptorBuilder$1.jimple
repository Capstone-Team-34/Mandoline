org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1 extends java.lang.Object implements org.spongycastle.operator.OutputEncryptor
final org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder this$0
final org.spongycastle.asn1.x509.AlgorithmIdentifier val$algID
    void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder, org.spongycastle.asn1.x509.AlgorithmIdentifier)
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1 r0;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1;

        $r1 := @parameter0: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder this$0> = $r1;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algID> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1 r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier r1;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1;

        r1 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algID>;

        return r1;
    }
    public org.spongycastle.operator.GenericKey getKey()
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1 r0;
        org.spongycastle.operator.jcajce.JceGenericKey $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        javax.crypto.SecretKey $r3;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder $r4;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1;

        $r1 = new org.spongycastle.operator.jcajce.JceGenericKey;

        $r2 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algID>;

        $r4 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder this$0>;

        $r3 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder: javax.crypto.SecretKey access$100(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder)>($r4);

        specialinvoke $r1.<org.spongycastle.operator.jcajce.JceGenericKey: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.Key)>($r2, $r3);

        return $r1;
    }
    public java.io.OutputStream getOutputStream(java.io.OutputStream)
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1 r0;
        java.io.OutputStream $r1;
        javax.crypto.CipherOutputStream $r2;
        javax.crypto.Cipher $r3;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder $r4;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = new javax.crypto.CipherOutputStream;

        $r4 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder this$0>;

        $r3 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder: javax.crypto.Cipher access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder)>($r4);

        specialinvoke $r2.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r1, $r3);

        return $r2;
    }
