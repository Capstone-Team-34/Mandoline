org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator extends org.spongycastle.openssl.MiscPEMGenerator
private java.lang.String algorithm
private java.lang.Object obj
private char[] password
private java.security.Provider provider
private java.security.SecureRandom random
    public void <init>(java.lang.Object) throws java.io.IOException
    {
        org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator r0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator;

        $r1 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator: java.lang.Object convertObject(java.lang.Object)>($r1);

        specialinvoke r0.<org.spongycastle.openssl.MiscPEMGenerator: void <init>(java.lang.Object)>($r1);

        return;
    }
    public void <init>(java.lang.Object, org.spongycastle.openssl.PEMEncryptor) throws java.io.IOException
    {
        org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator r0;
        java.lang.Object $r1;
        org.spongycastle.openssl.PEMEncryptor $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.spongycastle.openssl.PEMEncryptor;

        $r1 = staticinvoke <org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator: java.lang.Object convertObject(java.lang.Object)>($r1);

        specialinvoke r0.<org.spongycastle.openssl.MiscPEMGenerator: void <init>(java.lang.Object,org.spongycastle.openssl.PEMEncryptor)>($r1, $r2);

        return;
    }
    private static java.lang.Object convertObject(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r0;
        boolean $z0;
        org.spongycastle.cert.jcajce.JcaX509CertificateHolder $r1;
        java.security.cert.X509Certificate r2;
        java.security.cert.CertificateEncodingException r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.spongycastle.cert.jcajce.JcaX509CRLHolder $r7;
        java.security.cert.X509CRL r8;
        java.security.cert.CRLException r9;
        java.security.KeyPair r10;
        java.security.PrivateKey $r11;
        java.security.Key r12;
        byte[] $r13;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r14;
        java.security.PublicKey r15;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r16;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label04;

        $r1 = new org.spongycastle.cert.jcajce.JcaX509CertificateHolder;

        r2 = (java.security.cert.X509Certificate) r0;

     label01:
        specialinvoke $r1.<org.spongycastle.cert.jcajce.JcaX509CertificateHolder: void <init>(java.security.cert.X509Certificate)>(r2);

     label02:
        return $r1;

     label03:
        r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot encode object: ");

        $r6 = virtualinvoke r3.<java.security.cert.CertificateEncodingException: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label04:
        $z0 = r0 instanceof java.security.cert.X509CRL;

        if $z0 == 0 goto label08;

        $r7 = new org.spongycastle.cert.jcajce.JcaX509CRLHolder;

        r8 = (java.security.cert.X509CRL) r0;

     label05:
        specialinvoke $r7.<org.spongycastle.cert.jcajce.JcaX509CRLHolder: void <init>(java.security.cert.X509CRL)>(r8);

     label06:
        return $r7;

     label07:
        r9 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot encode object: ");

        $r6 = virtualinvoke r9.<java.security.cert.CRLException: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label08:
        $z0 = r0 instanceof java.security.KeyPair;

        if $z0 == 0 goto label09;

        r10 = (java.security.KeyPair) r0;

        $r11 = virtualinvoke r10.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        r0 = staticinvoke <org.spongycastle.openssl.jcajce.JcaMiscPEMGenerator: java.lang.Object convertObject(java.lang.Object)>($r11);

        return r0;

     label09:
        $z0 = r0 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label10;

        r12 = (java.security.Key) r0;

        $r13 = interfaceinvoke r12.<java.security.Key: byte[] getEncoded()>();

        $r14 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r13);

        return $r14;

     label10:
        $z0 = r0 instanceof java.security.PublicKey;

        if $z0 == 0 goto label11;

        r15 = (java.security.PublicKey) r0;

        $r13 = interfaceinvoke r15.<java.security.PublicKey: byte[] getEncoded()>();

        $r16 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r13);

        return $r16;

     label11:
        return r0;

        catch java.security.cert.CertificateEncodingException from label01 to label02 with label03;
        catch java.security.cert.CRLException from label05 to label06 with label07;
    }
