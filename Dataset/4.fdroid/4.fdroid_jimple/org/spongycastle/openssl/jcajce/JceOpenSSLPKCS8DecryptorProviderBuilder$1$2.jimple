org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2 extends java.lang.Object implements org.spongycastle.operator.InputDecryptor
final org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 this$1
final org.spongycastle.asn1.x509.AlgorithmIdentifier val$algorithm
final javax.crypto.Cipher val$cipher
    void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1, org.spongycastle.asn1.x509.AlgorithmIdentifier, javax.crypto.Cipher)
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2 r0;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        javax.crypto.Cipher $r3;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2;

        $r1 := @parameter0: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter2: javax.crypto.Cipher;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 this$1> = $r1;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algorithm> = $r2;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: javax.crypto.Cipher val$cipher> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2 r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier r1;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2;

        r1 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algorithm>;

        return r1;
    }
    public java.io.InputStream getInputStream(java.io.InputStream)
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2 r0;
        java.io.InputStream $r1;
        javax.crypto.CipherInputStream $r2;
        javax.crypto.Cipher $r3;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new javax.crypto.CipherInputStream;

        $r3 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: javax.crypto.Cipher val$cipher>;

        specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r3);

        return $r2;
    }
