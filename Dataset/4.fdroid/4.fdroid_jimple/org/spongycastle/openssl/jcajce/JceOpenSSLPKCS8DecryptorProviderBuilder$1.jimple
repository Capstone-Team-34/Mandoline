org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 extends java.lang.Object implements org.spongycastle.operator.InputDecryptorProvider
final org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0
final char[] val$password
    void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder, char[])
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 r0;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder $r1;
        char[] $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1;

        $r1 := @parameter0: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;

        $r2 := @parameter1: char[];

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0> = $r1;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: char[] val$password> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.operator.InputDecryptor get(org.spongycastle.asn1.x509.AlgorithmIdentifier) throws org.spongycastle.operator.OperatorCreationException
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        boolean $z0;
        org.spongycastle.asn1.ASN1Encodable $r3;
        org.spongycastle.asn1.pkcs.PBES2Parameters $r4;
        org.spongycastle.asn1.pkcs.KeyDerivationFunc $r5;
        org.spongycastle.asn1.pkcs.EncryptionScheme $r6;
        org.spongycastle.asn1.pkcs.PBKDF2Params r7;
        java.math.BigInteger $r8;
        int $i0;
        byte[] $r9;
        java.lang.String $r10;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder $r11;
        org.spongycastle.jcajce.util.JcaJceHelper $r12;
        char[] $r13;
        javax.crypto.SecretKey $r14;
        javax.crypto.Cipher $r15, r16;
        java.security.AlgorithmParameters $r17;
        org.spongycastle.asn1.ASN1Primitive $r18;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2 $r19;
        org.spongycastle.asn1.pkcs.PKCS12PBEParams $r20;
        org.spongycastle.jcajce.PKCS12KeyWithParameters $r21;
        java.io.IOException r22;
        org.spongycastle.operator.OperatorCreationException $r23;
        java.lang.StringBuilder $r24;
        org.spongycastle.asn1.pkcs.PBEParameter $r25;
        org.spongycastle.jcajce.PBKDF1KeyWithParameters $r26;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1 $r27;
        java.security.GeneralSecurityException r28;
        org.spongycastle.openssl.PEMException $r29;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

     label01:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: boolean isPKCS5Scheme2(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2);

     label02:
        if $z0 == 0 goto label17;

     label03:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r4 = staticinvoke <org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.PBES2Parameters getInstance(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme()>();

        $r3 = virtualinvoke $r5.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.ASN1Encodable getParameters()>();

     label04:
        r7 = (org.spongycastle.asn1.pkcs.PBKDF2Params) $r3;

     label05:
        $r8 = virtualinvoke r7.<org.spongycastle.asn1.pkcs.PBKDF2Params: java.math.BigInteger getIterationCount()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        $r9 = virtualinvoke r7.<org.spongycastle.asn1.pkcs.PBKDF2Params: byte[] getSalt()>();

        $r2 = virtualinvoke $r6.<org.spongycastle.asn1.pkcs.EncryptionScheme: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

     label06:
        $r11 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0>;

     label07:
        $r12 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder: org.spongycastle.jcajce.util.JcaJceHelper access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder)>($r11);

     label08:
        $r13 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: char[] val$password>;

     label09:
        $r14 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey generateSecretKeyForPKCS5Scheme2(org.spongycastle.jcajce.util.JcaJceHelper,java.lang.String,char[],byte[],int)>($r12, $r10, $r13, $r9, $i0);

     label10:
        $r11 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0>;

     label11:
        $r12 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder: org.spongycastle.jcajce.util.JcaJceHelper access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder)>($r11);

        $r15 = interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10);

     label12:
        r16 = $r15;

        $r11 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0>;

     label13:
        $r12 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder: org.spongycastle.jcajce.util.JcaJceHelper access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder)>($r11);

        $r17 = interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>($r10);

        $r3 = virtualinvoke $r6.<org.spongycastle.asn1.pkcs.EncryptionScheme: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r18 = interfaceinvoke $r3.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r9 = virtualinvoke $r18.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded()>();

        virtualinvoke $r17.<java.security.AlgorithmParameters: void init(byte[])>($r9);

        virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, $r14, $r17);

     label14:
        $r19 = new org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2;

     label15:
        specialinvoke $r19.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$2: void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1,org.spongycastle.asn1.x509.AlgorithmIdentifier,javax.crypto.Cipher)>(r0, $r1, r16);

     label16:
        return $r19;

     label17:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: boolean isPKCS12(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2);

     label18:
        if $z0 == 0 goto label26;

     label19:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r20 = staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r3);

     label20:
        $r11 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0>;

     label21:
        $r12 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder: org.spongycastle.jcajce.util.JcaJceHelper access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder)>($r11);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r15 = interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10);

     label22:
        r16 = $r15;

        $r21 = new org.spongycastle.jcajce.PKCS12KeyWithParameters;

        $r13 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: char[] val$password>;

     label23:
        $r9 = virtualinvoke $r20.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>();

        $r8 = virtualinvoke $r20.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        specialinvoke $r21.<org.spongycastle.jcajce.PKCS12KeyWithParameters: void <init>(char[],byte[],int)>($r13, $r9, $i0);

        virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r21);

     label24:
        goto label14;

     label25:
        r22 := @caughtexception;

        $r23 = new org.spongycastle.operator.OperatorCreationException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not available: ");

        $r10 = virtualinvoke r22.<java.io.IOException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.spongycastle.operator.OperatorCreationException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r22);

        throw $r23;

     label26:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: boolean isPKCS5Scheme1(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2);

     label27:
        if $z0 == 0 goto label35;

     label28:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r25 = staticinvoke <org.spongycastle.asn1.pkcs.PBEParameter: org.spongycastle.asn1.pkcs.PBEParameter getInstance(java.lang.Object)>($r3);

     label29:
        $r11 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder this$0>;

     label30:
        $r12 = staticinvoke <org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder: org.spongycastle.jcajce.util.JcaJceHelper access$000(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder)>($r11);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r15 = interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10);

     label31:
        r16 = $r15;

        $r26 = new org.spongycastle.jcajce.PBKDF1KeyWithParameters;

        $r13 = r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1: char[] val$password>;

        $r27 = new org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1;

     label32:
        specialinvoke $r27.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1: void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1)>(r0);

        $r9 = virtualinvoke $r25.<org.spongycastle.asn1.pkcs.PBEParameter: byte[] getSalt()>();

        $r8 = virtualinvoke $r25.<org.spongycastle.asn1.pkcs.PBEParameter: java.math.BigInteger getIterationCount()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        specialinvoke $r26.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: void <init>(char[],org.spongycastle.crypto.CharToByteConverter,byte[],int)>($r13, $r27, $r9, $i0);

        virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r26);

     label33:
        goto label14;

     label34:
        r28 := @caughtexception;

        $r23 = new org.spongycastle.operator.OperatorCreationException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not available: ");

        $r10 = virtualinvoke r28.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.spongycastle.operator.OperatorCreationException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r28);

        throw $r23;

     label35:
        $r29 = new org.spongycastle.openssl.PEMException;

        $r24 = new java.lang.StringBuilder;

     label36:
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown algorithm: ");

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String)>($r10);

     label37:
        throw $r29;

     label38:
        nop;

        catch java.io.IOException from label01 to label02 with label25;
        catch java.io.IOException from label03 to label04 with label25;
        catch java.io.IOException from label05 to label06 with label25;
        catch java.io.IOException from label07 to label08 with label25;
        catch java.io.IOException from label09 to label10 with label25;
        catch java.io.IOException from label11 to label12 with label25;
        catch java.io.IOException from label13 to label14 with label25;
        catch java.io.IOException from label15 to label16 with label25;
        catch java.io.IOException from label17 to label18 with label25;
        catch java.io.IOException from label19 to label20 with label25;
        catch java.io.IOException from label21 to label22 with label25;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.security.GeneralSecurityException from label01 to label02 with label34;
        catch java.security.GeneralSecurityException from label03 to label04 with label34;
        catch java.security.GeneralSecurityException from label05 to label06 with label34;
        catch java.security.GeneralSecurityException from label07 to label08 with label34;
        catch java.security.GeneralSecurityException from label09 to label10 with label34;
        catch java.security.GeneralSecurityException from label11 to label12 with label34;
        catch java.security.GeneralSecurityException from label13 to label14 with label34;
        catch java.security.GeneralSecurityException from label15 to label16 with label34;
        catch java.security.GeneralSecurityException from label17 to label18 with label34;
        catch java.security.GeneralSecurityException from label19 to label20 with label34;
        catch java.security.GeneralSecurityException from label21 to label22 with label34;
        catch java.security.GeneralSecurityException from label23 to label24 with label34;
        catch java.io.IOException from label26 to label27 with label25;
        catch java.io.IOException from label28 to label29 with label25;
        catch java.io.IOException from label30 to label31 with label25;
        catch java.io.IOException from label32 to label33 with label25;
        catch java.security.GeneralSecurityException from label26 to label27 with label34;
        catch java.security.GeneralSecurityException from label28 to label29 with label34;
        catch java.security.GeneralSecurityException from label30 to label31 with label34;
        catch java.security.GeneralSecurityException from label32 to label33 with label34;
        catch java.io.IOException from label36 to label38 with label25;
        catch java.security.GeneralSecurityException from label36 to label37 with label34;
    }
