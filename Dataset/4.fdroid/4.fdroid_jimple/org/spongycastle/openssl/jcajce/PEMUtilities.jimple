org.spongycastle.openssl.jcajce.PEMUtilities extends java.lang.Object
private static final java.util.Map KEYSIZES
private static final java.util.Set PKCS5_SCHEME_1
private static final java.util.Set PKCS5_SCHEME_2
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        java.util.Map $r4;
        java.lang.String $r5;
        java.lang.Integer $r6;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1> = $r1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2> = $r1;

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_PBES2>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return;
    }
    void <init>()
    {
        org.spongycastle.openssl.jcajce.PEMUtilities r0;

        r0 := @this: org.spongycastle.openssl.jcajce.PEMUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static byte[] crypt(boolean, org.spongycastle.jcajce.util.JcaJceHelper, byte[], char[], java.lang.String, byte[]) throws org.spongycastle.openssl.PEMException
    {
        boolean $z0, $z1;
        org.spongycastle.jcajce.util.JcaJceHelper $r0;
        byte[] $r1, $r4, r13, $r14;
        char[] $r2;
        java.lang.String $r3, r7, r8, $r9;
        java.lang.Exception r5;
        java.lang.Object r6;
        javax.crypto.SecretKey $r10;
        java.lang.StringBuilder $r11, $r16;
        javax.crypto.Cipher $r12;
        int i0, $i1;
        short s2;
        javax.crypto.spec.IvParameterSpec $r15;
        javax.crypto.spec.RC2ParameterSpec $r17;
        org.spongycastle.openssl.EncryptionException $r18;
        java.security.spec.AlgorithmParameterSpec $r19;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: org.spongycastle.jcajce.util.JcaJceHelper;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: char[];

        $r3 := @parameter4: java.lang.String;

        $r4 := @parameter5: byte[];

        $r15 = new javax.crypto.spec.IvParameterSpec;

        r6 = $r15;

        specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        r7 = "CBC";

        r8 = "PKCS5Padding";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("-CFB");

        if $z1 == 0 goto label01;

        r7 = "CFB";

        r8 = "NoPadding";

     label01:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("-ECB");

        if $z1 != 0 goto label02;

        $r9 = "DES-EDE";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label02;

        $r9 = "DES-EDE3";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label03;

     label02:
        r7 = "ECB";

        r6 = null;

     label03:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("-OFB");

        if $z1 == 0 goto label04;

        r7 = "OFB";

        r8 = "NoPadding";

     label04:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("DES-EDE");

        if $z1 == 0 goto label14;

        $r9 = "DESede";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("DES-EDE3");

        if $z1 != 0 goto label13;

        $z1 = 1;

     label05:
        $r10 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[],boolean)>($r0, $r2, "DESede", 24, $r4, $z1);

     label06:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r12 = interfaceinvoke $r0.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r3);

     label08:
        if $z0 == 0 goto label27;

        i0 = 1;

     label09:
        if r6 != null goto label28;

     label10:
        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key)>(i0, $r10);

     label11:
        $r1 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label12:
        return $r1;

     label13:
        $z1 = 0;

        goto label05;

     label14:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("DES-");

        if $z1 == 0 goto label15;

        $r9 = "DES";

        $r10 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[])>($r0, $r2, "DES", 8, $r4);

        goto label06;

     label15:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("BF-");

        if $z1 == 0 goto label16;

        $r9 = "Blowfish";

        $r10 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[])>($r0, $r2, "Blowfish", 16, $r4);

        goto label06;

     label16:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-");

        if $z1 == 0 goto label20;

        $r9 = "RC2";

        i0 = 128;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-40-");

        if $z1 == 0 goto label18;

        i0 = 40;

     label17:
        $i1 = i0 / 8;

        $r10 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[])>($r0, $r2, "RC2", $i1, $r4);

        if r6 != null goto label19;

        $r17 = new javax.crypto.spec.RC2ParameterSpec;

        r6 = $r17;

        specialinvoke $r17.<javax.crypto.spec.RC2ParameterSpec: void <init>(int)>(i0);

        goto label06;

     label18:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-64-");

        if $z1 == 0 goto label17;

        i0 = 64;

        goto label17;

     label19:
        $r17 = new javax.crypto.spec.RC2ParameterSpec;

        r6 = $r17;

        specialinvoke $r17.<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>(i0, $r4);

        goto label06;

     label20:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("AES-");

        if $z1 == 0 goto label26;

        $r9 = "AES";

        r13 = $r4;

        i0 = lengthof $r4;

        if i0 <= 8 goto label21;

        $r14 = newarray (byte)[8];

        r13 = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r14, 0, 8);

     label21:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("AES-128-");

        if $z1 == 0 goto label23;

        s2 = 128;

     label22:
        i0 = s2 / 8;

        $r10 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[])>($r0, $r2, "AES", i0, r13);

        goto label06;

     label23:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("AES-192-");

        if $z1 == 0 goto label24;

        s2 = 192;

        goto label22;

     label24:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("AES-256-");

        if $z1 == 0 goto label25;

        s2 = 256;

        goto label22;

     label25:
        $r18 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r18.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String)>("unknown AES encryption with private key");

        throw $r18;

     label26:
        $r18 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r18.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String)>("unknown encryption with private key");

        throw $r18;

     label27:
        i0 = 2;

        goto label09;

     label28:
        $r19 = (java.security.spec.AlgorithmParameterSpec) r6;

        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(i0, $r10, $r19);

     label29:
        goto label11;

     label30:
        r5 := @caughtexception;

        $r18 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r18.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String,java.lang.Throwable)>("exception using cipher - please check password and data.", r5);

        throw $r18;

        catch java.lang.Exception from label07 to label08 with label30;
        catch java.lang.Exception from label10 to label12 with label30;
        catch java.lang.Exception from label28 to label29 with label30;
    }
    public static javax.crypto.SecretKey generateSecretKeyForPKCS5Scheme2(org.spongycastle.jcajce.util.JcaJceHelper, java.lang.String, char[], byte[], int) throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.util.JcaJceHelper $r0;
        java.lang.String $r1;
        char[] $r2;
        byte[] $r3;
        int $i0, $i1;
        javax.crypto.SecretKeyFactory $r4;
        javax.crypto.spec.PBEKeySpec $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.spec.SecretKeySpec $r7;

        $r0 := @parameter0: org.spongycastle.jcajce.util.JcaJceHelper;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: char[];

        $r3 := @parameter3: byte[];

        $i0 := @parameter4: int;

        $r4 = interfaceinvoke $r0.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String)>("PBKDF2with8BIT");

        $r5 = new javax.crypto.spec.PBEKeySpec;

        $i1 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: int getKeySize(java.lang.String)>($r1);

        specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r2, $r3, $i0, $i1);

        $r6 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5);

        $r7 = new javax.crypto.spec.SecretKeySpec;

        $r3 = interfaceinvoke $r6.<javax.crypto.SecretKey: byte[] getEncoded()>();

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r1);

        return $r7;
    }
    private static javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper, char[], java.lang.String, int, byte[]) throws org.spongycastle.openssl.PEMException
    {
        org.spongycastle.jcajce.util.JcaJceHelper $r0;
        char[] $r1;
        java.lang.String $r2;
        int $i0;
        byte[] $r3;
        javax.crypto.SecretKey $r4;

        $r0 := @parameter0: org.spongycastle.jcajce.util.JcaJceHelper;

        $r1 := @parameter1: char[];

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r3 := @parameter4: byte[];

        $r4 = staticinvoke <org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[],boolean)>($r0, $r1, $r2, $i0, $r3, 0);

        return $r4;
    }
    private static javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper, char[], java.lang.String, int, byte[], boolean) throws org.spongycastle.openssl.PEMException
    {
        org.spongycastle.jcajce.util.JcaJceHelper $r0;
        char[] $r1;
        java.lang.String $r2;
        int $i0;
        byte[] $r3;
        boolean $z0;
        java.security.GeneralSecurityException r4;
        javax.crypto.spec.PBEKeySpec r5;
        javax.crypto.SecretKeyFactory $r6;
        javax.crypto.SecretKey $r7;
        javax.crypto.spec.SecretKeySpec $r8;
        org.spongycastle.openssl.PEMException $r9;
        java.lang.StringBuilder $r10;

        $r0 := @parameter0: org.spongycastle.jcajce.util.JcaJceHelper;

        $r1 := @parameter1: char[];

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r3 := @parameter4: byte[];

        $z0 := @parameter5: boolean;

        r5 = new javax.crypto.spec.PBEKeySpec;

        $i0 = $i0 * 8;

     label1:
        specialinvoke r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r1, $r3, 1, $i0);

        $r6 = interfaceinvoke $r0.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String)>("PBKDF-OpenSSL");

        $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5);

        $r3 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label2:
        if $z0 == 0 goto label4;

        $i0 = lengthof $r3;

        if $i0 < 24 goto label4;

     label3:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r3, 16, 8);

     label4:
        $r8 = new javax.crypto.spec.SecretKeySpec;

     label5:
        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r2);

     label6:
        return $r8;

     label7:
        r4 := @caughtexception;

        $r9 = new org.spongycastle.openssl.PEMException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create OpenSSL PBDKF: ");

        $r2 = virtualinvoke r4.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r2, r4);

        throw $r9;

        catch java.security.GeneralSecurityException from label1 to label2 with label7;
        catch java.security.GeneralSecurityException from label3 to label4 with label7;
        catch java.security.GeneralSecurityException from label5 to label6 with label7;
    }
    static int getKeySize(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no key size for algorithm: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        $r1 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Map KEYSIZES>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    public static boolean isPKCS12(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r0 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds>;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        return $z0;
    }
    static boolean isPKCS5Scheme1(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
    static boolean isPKCS5Scheme2(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.openssl.jcajce.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
