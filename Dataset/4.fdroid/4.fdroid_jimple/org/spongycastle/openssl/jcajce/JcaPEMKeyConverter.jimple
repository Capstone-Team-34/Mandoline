org.spongycastle.openssl.jcajce.JcaPEMKeyConverter extends java.lang.Object
private static final java.util.Map algorithms
private org.spongycastle.jcajce.util.JcaJceHelper helper
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.util.Map algorithms> = $r0;

        $r1 = <org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.util.Map algorithms>;

        $r2 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "ECDSA");

        $r1 = <org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.util.Map algorithms>;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "RSA");

        $r1 = <org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.util.Map algorithms>;

        $r2 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "DSA");

        return;
    }
    public void <init>()
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        org.spongycastle.jcajce.util.DefaultJcaJceHelper $r1;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.jcajce.util.DefaultJcaJceHelper;

        specialinvoke $r1.<org.spongycastle.jcajce.util.DefaultJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r1;

        return;
    }
    private java.security.KeyFactory getKeyFactory(org.spongycastle.asn1.x509.AlgorithmIdentifier) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r5;
        org.spongycastle.jcajce.util.JcaJceHelper $r6;
        java.security.KeyFactory $r7;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.util.Map algorithms>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.String) $r4;

        if r5 != null goto label1;

        r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

     label1:
        $r6 = r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.KeyFactory createKeyFactory(java.lang.String)>(r5);

        return $r7;
    }
    public java.security.KeyPair getKeyPair(org.spongycastle.openssl.PEMKeyPair) throws org.spongycastle.openssl.PEMException
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        org.spongycastle.openssl.PEMKeyPair $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        java.security.KeyFactory $r5;
        java.security.KeyPair $r6;
        java.security.spec.X509EncodedKeySpec $r7;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r8;
        byte[] $r9;
        java.security.PublicKey $r10;
        java.security.spec.PKCS8EncodedKeySpec $r11;
        java.security.PrivateKey $r12;
        org.spongycastle.openssl.PEMException $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: org.spongycastle.openssl.PEMKeyPair;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.openssl.PEMKeyPair: org.spongycastle.asn1.pkcs.PrivateKeyInfo getPrivateKeyInfo()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r5 = specialinvoke r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.security.KeyFactory getKeyFactory(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r4);

     label2:
        $r6 = new java.security.KeyPair;

        $r7 = new java.security.spec.X509EncodedKeySpec;

     label3:
        $r8 = virtualinvoke $r1.<org.spongycastle.openssl.PEMKeyPair: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getPublicKeyInfo()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: byte[] getEncoded()>();

        specialinvoke $r7.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r9);

        $r10 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r7);

     label4:
        $r11 = new java.security.spec.PKCS8EncodedKeySpec;

     label5:
        $r3 = virtualinvoke $r1.<org.spongycastle.openssl.PEMKeyPair: org.spongycastle.asn1.pkcs.PrivateKeyInfo getPrivateKeyInfo()>();

        $r9 = virtualinvoke $r3.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: byte[] getEncoded()>();

        specialinvoke $r11.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r9);

        $r12 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r11);

        specialinvoke $r6.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r10, $r12);

     label6:
        return $r6;

     label7:
        r2 := @caughtexception;

        $r13 = new org.spongycastle.openssl.PEMException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to convert key pair: ");

        $r15 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r15, r2);

        throw $r13;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
    public java.security.PrivateKey getPrivateKey(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws org.spongycastle.openssl.PEMException
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        java.security.KeyFactory $r4;
        java.security.spec.PKCS8EncodedKeySpec $r5;
        byte[] $r6;
        java.security.PrivateKey $r7;
        org.spongycastle.openssl.PEMException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r4 = specialinvoke r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.security.KeyFactory getKeyFactory(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r3);

     label2:
        $r5 = new java.security.spec.PKCS8EncodedKeySpec;

     label3:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: byte[] getEncoded()>();

        specialinvoke $r5.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r6);

        $r7 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r5);

     label4:
        return $r7;

     label5:
        r2 := @caughtexception;

        $r8 = new org.spongycastle.openssl.PEMException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to convert key pair: ");

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r10, r2);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public java.security.PublicKey getPublicKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws org.spongycastle.openssl.PEMException
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        java.security.KeyFactory $r4;
        java.security.spec.X509EncodedKeySpec $r5;
        byte[] $r6;
        java.security.PublicKey $r7;
        org.spongycastle.openssl.PEMException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r4 = specialinvoke r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: java.security.KeyFactory getKeyFactory(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r3);

     label2:
        $r5 = new java.security.spec.X509EncodedKeySpec;

     label3:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: byte[] getEncoded()>();

        specialinvoke $r5.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r6);

        $r7 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r5);

     label4:
        return $r7;

     label5:
        r2 := @caughtexception;

        $r8 = new org.spongycastle.openssl.PEMException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to convert key pair: ");

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r10, r2);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public org.spongycastle.openssl.jcajce.JcaPEMKeyConverter setProvider(java.lang.String)
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        java.lang.String $r1;
        org.spongycastle.jcajce.util.NamedJcaJceHelper $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.jcajce.util.NamedJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.NamedJcaJceHelper: void <init>(java.lang.String)>($r1);

        r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.openssl.jcajce.JcaPEMKeyConverter setProvider(java.security.Provider)
    {
        org.spongycastle.openssl.jcajce.JcaPEMKeyConverter r0;
        java.security.Provider $r1;
        org.spongycastle.jcajce.util.ProviderJcaJceHelper $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JcaPEMKeyConverter;

        $r1 := @parameter0: java.security.Provider;

        $r2 = new org.spongycastle.jcajce.util.ProviderJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.ProviderJcaJceHelper: void <init>(java.security.Provider)>($r1);

        r0.<org.spongycastle.openssl.jcajce.JcaPEMKeyConverter: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        return r0;
    }
