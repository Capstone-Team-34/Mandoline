org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1 extends java.lang.Object implements org.spongycastle.crypto.CharToByteConverter
final org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 this$1
    void <init>(org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1)
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1 r0;
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 $r1;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1;

        $r1 := @parameter0: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1;

        r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1 this$1> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public byte[] convert(char[])
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1 r0;
        char[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1;

        $r1 := @parameter0: char[];

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toByteArray(char[])>($r1);

        return $r2;
    }
    public java.lang.String getType()
    {
        org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1 r0;

        r0 := @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1$1;

        return "ASCII";
    }
