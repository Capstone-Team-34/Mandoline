org.spongycastle.openssl.PEMParser$ECCurveParamsParser extends java.lang.Object implements org.spongycastle.util.io.pem.PemObjectParser
final org.spongycastle.openssl.PEMParser this$0
    private void <init>(org.spongycastle.openssl.PEMParser)
    {
        org.spongycastle.openssl.PEMParser$ECCurveParamsParser r0;
        org.spongycastle.openssl.PEMParser $r1;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECCurveParamsParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        r0.<org.spongycastle.openssl.PEMParser$ECCurveParamsParser: org.spongycastle.openssl.PEMParser this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(org.spongycastle.openssl.PEMParser, org.spongycastle.openssl.PEMParser$1)
    {
        org.spongycastle.openssl.PEMParser$ECCurveParamsParser r0;
        org.spongycastle.openssl.PEMParser $r1;
        org.spongycastle.openssl.PEMParser$1 $r2;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECCurveParamsParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        $r2 := @parameter1: org.spongycastle.openssl.PEMParser$1;

        specialinvoke r0.<org.spongycastle.openssl.PEMParser$ECCurveParamsParser: void <init>(org.spongycastle.openssl.PEMParser)>($r1);

        return;
    }
    public java.lang.Object parseObject(org.spongycastle.util.io.pem.PemObject) throws java.io.IOException
    {
        org.spongycastle.openssl.PEMParser$ECCurveParamsParser r0;
        org.spongycastle.util.io.pem.PemObject $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        boolean $z0;
        org.spongycastle.asn1.x9.X9ECParameters $r4;
        java.io.IOException r5;
        java.lang.Exception r6;
        org.spongycastle.openssl.PEMException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECCurveParamsParser;

        $r1 := @parameter0: org.spongycastle.util.io.pem.PemObject;

     label01:
        $r2 = virtualinvoke $r1.<org.spongycastle.util.io.pem.PemObject: byte[] getContent()>();

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r2);

     label02:
        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1ObjectIdentifier;

        if $z0 == 0 goto label05;

     label03:
        $r2 = virtualinvoke $r1.<org.spongycastle.util.io.pem.PemObject: byte[] getContent()>();

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r2);

     label04:
        return $r3;

     label05:
        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1Sequence;

        if $z0 == 0 goto label08;

     label06:
        $r4 = staticinvoke <org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.asn1.x9.X9ECParameters getInstance(java.lang.Object)>($r3);

     label07:
        return $r4;

     label08:
        return null;

     label09:
        r5 := @caughtexception;

        throw r5;

     label10:
        r6 := @caughtexception;

        $r7 = new org.spongycastle.openssl.PEMException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception extracting EC named curve: ");

        $r9 = virtualinvoke r6.<java.lang.Exception: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String)>($r9);

        throw $r7;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
    }
