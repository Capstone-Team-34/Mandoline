org.spongycastle.openssl.PEMParser$DSAKeyPairParser extends java.lang.Object implements org.spongycastle.openssl.PEMKeyPairParser
final org.spongycastle.openssl.PEMParser this$0
    private void <init>(org.spongycastle.openssl.PEMParser)
    {
        org.spongycastle.openssl.PEMParser$DSAKeyPairParser r0;
        org.spongycastle.openssl.PEMParser $r1;

        r0 := @this: org.spongycastle.openssl.PEMParser$DSAKeyPairParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        r0.<org.spongycastle.openssl.PEMParser$DSAKeyPairParser: org.spongycastle.openssl.PEMParser this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(org.spongycastle.openssl.PEMParser, org.spongycastle.openssl.PEMParser$1)
    {
        org.spongycastle.openssl.PEMParser$DSAKeyPairParser r0;
        org.spongycastle.openssl.PEMParser $r1;
        org.spongycastle.openssl.PEMParser$1 $r2;

        r0 := @this: org.spongycastle.openssl.PEMParser$DSAKeyPairParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        $r2 := @parameter1: org.spongycastle.openssl.PEMParser$1;

        specialinvoke r0.<org.spongycastle.openssl.PEMParser$DSAKeyPairParser: void <init>(org.spongycastle.openssl.PEMParser)>($r1);

        return;
    }
    public org.spongycastle.openssl.PEMKeyPair parse(byte[]) throws java.io.IOException
    {
        org.spongycastle.openssl.PEMParser$DSAKeyPairParser r0;
        byte[] $r1;
        org.spongycastle.asn1.ASN1Sequence $r2;
        int $i0;
        org.spongycastle.openssl.PEMException $r3;
        java.io.IOException r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Integer $r6, $r7, $r8, $r9, $r10;
        org.spongycastle.openssl.PEMKeyPair $r11;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r12;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r13;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r14;
        org.spongycastle.asn1.x509.DSAParameter $r15;
        java.math.BigInteger $r16, $r17, $r18;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r19;
        java.lang.Exception r20;
        java.lang.StringBuilder $r21;
        java.lang.String $r22;

        r0 := @this: org.spongycastle.openssl.PEMParser$DSAKeyPairParser;

        $r1 := @parameter0: byte[];

     label01:
        $r2 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: int size()>();

     label02:
        if $i0 == 6 goto label05;

        $r3 = new org.spongycastle.openssl.PEMException;

     label03:
        specialinvoke $r3.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String)>("malformed sequence in DSA private key");

        throw $r3;

     label04:
        r4 := @caughtexception;

        throw r4;

     label05:
        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(4);

        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(5);

        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

     label06:
        $r11 = new org.spongycastle.openssl.PEMKeyPair;

        $r12 = new org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r13 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r14 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        $r15 = new org.spongycastle.asn1.x509.DSAParameter;

     label07:
        $r16 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r17 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r18 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        specialinvoke $r15.<org.spongycastle.asn1.x509.DSAParameter: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r16, $r17, $r18);

        specialinvoke $r13.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r14, $r15);

        specialinvoke $r12.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r13, $r9);

     label08:
        $r19 = new org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r13 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r14 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        $r15 = new org.spongycastle.asn1.x509.DSAParameter;

     label09:
        $r16 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r17 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r18 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        specialinvoke $r15.<org.spongycastle.asn1.x509.DSAParameter: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r16, $r17, $r18);

        specialinvoke $r13.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r14, $r15);

        specialinvoke $r19.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r13, $r10);

        specialinvoke $r11.<org.spongycastle.openssl.PEMKeyPair: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo,org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r12, $r19);

     label10:
        return $r11;

     label11:
        r20 := @caughtexception;

        $r3 = new org.spongycastle.openssl.PEMException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem creating DSA private key: ");

        $r22 = virtualinvoke r20.<java.lang.Exception: java.lang.String toString()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r22, r20);

        throw $r3;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label03 to label04 with label04;
        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label04;
        catch java.io.IOException from label07 to label08 with label04;
        catch java.io.IOException from label09 to label10 with label04;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }
