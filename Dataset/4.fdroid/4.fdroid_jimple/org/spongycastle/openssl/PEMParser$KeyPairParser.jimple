org.spongycastle.openssl.PEMParser$KeyPairParser extends java.lang.Object implements org.spongycastle.util.io.pem.PemObjectParser
private final org.spongycastle.openssl.PEMKeyPairParser pemKeyPairParser
final org.spongycastle.openssl.PEMParser this$0
    public void <init>(org.spongycastle.openssl.PEMParser, org.spongycastle.openssl.PEMKeyPairParser)
    {
        org.spongycastle.openssl.PEMParser$KeyPairParser r0;
        org.spongycastle.openssl.PEMParser $r1;
        org.spongycastle.openssl.PEMKeyPairParser $r2;

        r0 := @this: org.spongycastle.openssl.PEMParser$KeyPairParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        $r2 := @parameter1: org.spongycastle.openssl.PEMKeyPairParser;

        r0.<org.spongycastle.openssl.PEMParser$KeyPairParser: org.spongycastle.openssl.PEMParser this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.openssl.PEMParser$KeyPairParser: org.spongycastle.openssl.PEMKeyPairParser pemKeyPairParser> = $r2;

        return;
    }
    public java.lang.Object parseObject(org.spongycastle.util.io.pem.PemObject) throws java.io.IOException
    {
        org.spongycastle.openssl.PEMParser$KeyPairParser r0;
        org.spongycastle.util.io.pem.PemObject $r1;
        java.util.StringTokenizer r2;
        boolean z0, $z1;
        java.lang.String r3, $r8;
        java.util.List $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.spongycastle.util.io.pem.PemHeader r7;
        byte[] $r9, $r10;
        org.spongycastle.openssl.PEMEncryptedKeyPair $r11;
        org.spongycastle.openssl.PEMKeyPairParser $r12;
        org.spongycastle.openssl.PEMKeyPair $r13;
        java.io.IOException r14;
        org.spongycastle.openssl.PEMException $r15;
        java.lang.IllegalArgumentException r16;

        r0 := @this: org.spongycastle.openssl.PEMParser$KeyPairParser;

        $r1 := @parameter0: org.spongycastle.util.io.pem.PemObject;

        z0 = 0;

        r3 = null;

        $r4 = virtualinvoke $r1.<org.spongycastle.util.io.pem.PemObject: java.util.List getHeaders()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.spongycastle.util.io.pem.PemHeader) $r6;

        $r8 = virtualinvoke r7.<org.spongycastle.util.io.pem.PemHeader: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("Proc-Type");

        if $z1 == 0 goto label02;

        $r8 = virtualinvoke r7.<org.spongycastle.util.io.pem.PemHeader: java.lang.String getValue()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("4,ENCRYPTED");

        if $z1 == 0 goto label02;

        z0 = 1;

        goto label01;

     label02:
        $r8 = virtualinvoke r7.<org.spongycastle.util.io.pem.PemHeader: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("DEK-Info");

        if $z1 == 0 goto label01;

        r3 = virtualinvoke r7.<org.spongycastle.util.io.pem.PemHeader: java.lang.String getValue()>();

        goto label01;

     label03:
        $r9 = virtualinvoke $r1.<org.spongycastle.util.io.pem.PemObject: byte[] getContent()>();

        if z0 == 0 goto label08;

        r2 = new java.util.StringTokenizer;

     label04:
        specialinvoke r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, ",");

        r3 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r10 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] decode(java.lang.String)>($r8);

     label05:
        $r11 = new org.spongycastle.openssl.PEMEncryptedKeyPair;

        $r12 = r0.<org.spongycastle.openssl.PEMParser$KeyPairParser: org.spongycastle.openssl.PEMKeyPairParser pemKeyPairParser>;

     label06:
        specialinvoke $r11.<org.spongycastle.openssl.PEMEncryptedKeyPair: void <init>(java.lang.String,byte[],byte[],org.spongycastle.openssl.PEMKeyPairParser)>(r3, $r10, $r9, $r12);

     label07:
        return $r11;

     label08:
        $r12 = r0.<org.spongycastle.openssl.PEMParser$KeyPairParser: org.spongycastle.openssl.PEMKeyPairParser pemKeyPairParser>;

     label09:
        $r13 = interfaceinvoke $r12.<org.spongycastle.openssl.PEMKeyPairParser: org.spongycastle.openssl.PEMKeyPair parse(byte[])>($r9);

     label10:
        return $r13;

     label11:
        r14 := @caughtexception;

        if z0 == 0 goto label12;

        $r15 = new org.spongycastle.openssl.PEMException;

        specialinvoke $r15.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>("exception decoding - please check password and data.", r14);

        throw $r15;

     label12:
        $r15 = new org.spongycastle.openssl.PEMException;

        r3 = virtualinvoke r14.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r15.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>(r3, r14);

        throw $r15;

     label13:
        r16 := @caughtexception;

        if z0 == 0 goto label14;

        $r15 = new org.spongycastle.openssl.PEMException;

        specialinvoke $r15.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>("exception decoding - please check password and data.", r16);

        throw $r15;

     label14:
        $r15 = new org.spongycastle.openssl.PEMException;

        r3 = virtualinvoke r16.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r15.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>(r3, r16);

        throw $r15;

        catch java.io.IOException from label04 to label05 with label11;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.IllegalArgumentException from label04 to label05 with label13;
        catch java.lang.IllegalArgumentException from label06 to label07 with label13;
        catch java.lang.IllegalArgumentException from label09 to label10 with label13;
    }
