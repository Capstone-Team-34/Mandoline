org.spongycastle.openssl.bc.PEMUtilities extends java.lang.Object
private static final java.util.Map KEYSIZES
private static final java.util.Set PKCS5_SCHEME_1
private static final java.util.Set PKCS5_SCHEME_2
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        java.util.Map $r4;
        java.lang.String $r5;
        java.lang.Integer $r6;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1> = $r1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2> = $r1;

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_PBES2>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4>;

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        $r4 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC>;

        $r6 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return;
    }
    void <init>()
    {
        org.spongycastle.openssl.bc.PEMUtilities r0;

        r0 := @this: org.spongycastle.openssl.bc.PEMUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static byte[] crypt(boolean, byte[], char[], java.lang.String, byte[]) throws org.spongycastle.openssl.PEMException
    {
        boolean $z0, $z1;
        byte[] $r0, $r3, r5, r13, $r14;
        char[] $r1;
        java.lang.String $r2, r6, $r8;
        java.lang.Exception r4;
        org.spongycastle.crypto.paddings.PKCS7Padding r7, $r16;
        org.spongycastle.crypto.params.KeyParameter $r9;
        java.lang.Object r10, r11, r12;
        int $i0, $i1;
        short s2;
        org.spongycastle.crypto.engines.DESedeEngine $r17;
        org.spongycastle.crypto.modes.CBCBlockCipher $r18;
        org.spongycastle.crypto.BufferedBlockCipher $r19;
        org.spongycastle.crypto.engines.DESEngine $r20;
        org.spongycastle.crypto.engines.BlowfishEngine $r21;
        org.spongycastle.crypto.params.RC2Parameters $r22;
        org.spongycastle.crypto.engines.RC2Engine $r23;
        org.spongycastle.crypto.engines.AESFastEngine $r24;
        org.spongycastle.openssl.EncryptionException $r25;
        org.spongycastle.crypto.modes.CFBBlockCipher $r26;
        org.spongycastle.crypto.modes.OFBBlockCipher $r27;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r28;
        org.spongycastle.crypto.params.ParametersWithIV $r29;
        org.spongycastle.crypto.BlockCipher $r30;
        org.spongycastle.crypto.CipherParameters $r31;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: byte[];

        $r1 := @parameter2: char[];

        $r2 := @parameter3: java.lang.String;

        $r3 := @parameter4: byte[];

        r5 = $r3;

        r6 = "CBC";

        $r16 = new org.spongycastle.crypto.paddings.PKCS7Padding;

        r7 = $r16;

        specialinvoke $r16.<org.spongycastle.crypto.paddings.PKCS7Padding: void <init>()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("-CFB");

        if $z1 == 0 goto label01;

        r6 = "CFB";

        r7 = null;

     label01:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("-ECB");

        if $z1 != 0 goto label02;

        $r8 = "DES-EDE";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label02;

        $r8 = "DES-EDE3";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label03;

     label02:
        r6 = "ECB";

        r5 = null;

     label03:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("-OFB");

        if $z1 == 0 goto label04;

        r6 = "OFB";

        r7 = null;

     label04:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES-EDE");

        if $z1 == 0 goto label16;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES-EDE3");

        if $z1 != 0 goto label15;

        $z1 = 1;

     label05:
        r10 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[],boolean)>($r1, 24, $r3, $z1);

        $r17 = new org.spongycastle.crypto.engines.DESedeEngine;

        r11 = $r17;

        specialinvoke $r17.<org.spongycastle.crypto.engines.DESedeEngine: void <init>()>();

     label06:
        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("CBC");

        if $z1 == 0 goto label28;

        $r18 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        specialinvoke $r18.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r30);

        r11 = $r18;

     label07:
        if r7 != null goto label30;

        $r19 = new org.spongycastle.crypto.BufferedBlockCipher;

        r12 = $r19;

     label08:
        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        specialinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r30);

     label09:
        if r5 != null goto label33;

     label10:
        $r19 = (org.spongycastle.crypto.BufferedBlockCipher) r12;

        $r31 = (org.spongycastle.crypto.CipherParameters) r10;

        virtualinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r31);

     label11:
        $i0 = lengthof $r0;

        $r19 = (org.spongycastle.crypto.BufferedBlockCipher) r12;

        $i0 = virtualinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

        $r3 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        $r19 = (org.spongycastle.crypto.BufferedBlockCipher) r12;

        $i0 = virtualinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r0, 0, $i0, $r3, 0);

        $r19 = (org.spongycastle.crypto.BufferedBlockCipher) r12;

        $i1 = virtualinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r3, $i0);

     label12:
        $i0 = $i0 + $i1;

     label13:
        $i1 = lengthof $r3;

     label14:
        if $i0 != $i1 goto label37;

        return $r3;

     label15:
        $z1 = 0;

        goto label05;

     label16:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES-");

        if $z1 == 0 goto label17;

        r10 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[])>($r1, 8, $r3);

        $r20 = new org.spongycastle.crypto.engines.DESEngine;

        r11 = $r20;

        specialinvoke $r20.<org.spongycastle.crypto.engines.DESEngine: void <init>()>();

        goto label06;

     label17:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("BF-");

        if $z1 == 0 goto label18;

        r10 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[])>($r1, 16, $r3);

        $r21 = new org.spongycastle.crypto.engines.BlowfishEngine;

        r11 = $r21;

        specialinvoke $r21.<org.spongycastle.crypto.engines.BlowfishEngine: void <init>()>();

        goto label06;

     label18:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-");

        if $z1 == 0 goto label21;

        $i0 = 128;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-40-");

        if $z1 == 0 goto label20;

        $i0 = 40;

     label19:
        $r22 = new org.spongycastle.crypto.params.RC2Parameters;

        r10 = $r22;

        $i1 = $i0 / 8;

        $r9 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[])>($r1, $i1, $r3);

        $r3 = virtualinvoke $r9.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke $r22.<org.spongycastle.crypto.params.RC2Parameters: void <init>(byte[],int)>($r3, $i0);

        $r23 = new org.spongycastle.crypto.engines.RC2Engine;

        r11 = $r23;

        specialinvoke $r23.<org.spongycastle.crypto.engines.RC2Engine: void <init>()>();

        goto label06;

     label20:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("RC2-64-");

        if $z1 == 0 goto label19;

        $i0 = 64;

        goto label19;

     label21:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("AES-");

        if $z1 == 0 goto label27;

        r13 = $r3;

        $i0 = lengthof $r3;

        if $i0 <= 8 goto label22;

        $r14 = newarray (byte)[8];

        r13 = $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r14, 0, 8);

     label22:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("AES-128-");

        if $z1 == 0 goto label24;

        s2 = 128;

     label23:
        $i0 = s2 / 8;

        r10 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[])>($r1, $i0, r13);

        $r24 = new org.spongycastle.crypto.engines.AESFastEngine;

        r11 = $r24;

        specialinvoke $r24.<org.spongycastle.crypto.engines.AESFastEngine: void <init>()>();

        goto label06;

     label24:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("AES-192-");

        if $z1 == 0 goto label25;

        s2 = 192;

        goto label23;

     label25:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("AES-256-");

        if $z1 == 0 goto label26;

        s2 = 256;

        goto label23;

     label26:
        $r25 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r25.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String)>("unknown AES encryption with private key");

        throw $r25;

     label27:
        $r25 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r25.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String)>("unknown encryption with private key");

        throw $r25;

     label28:
        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("CFB");

        if $z1 == 0 goto label29;

        $r26 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        $i0 = interfaceinvoke $r30.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        specialinvoke $r26.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r30, $i0);

        r11 = $r26;

        goto label07;

     label29:
        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("OFB");

        if $z1 == 0 goto label07;

        $r27 = new org.spongycastle.crypto.modes.OFBBlockCipher;

        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        $i0 = interfaceinvoke $r30.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        specialinvoke $r27.<org.spongycastle.crypto.modes.OFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r30, $i0);

        r11 = $r27;

        goto label07;

     label30:
        $r28 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        r12 = $r28;

     label31:
        $r30 = (org.spongycastle.crypto.BlockCipher) r11;

        specialinvoke $r28.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r30, r7);

     label32:
        goto label09;

     label33:
        $r29 = new org.spongycastle.crypto.params.ParametersWithIV;

     label34:
        $r31 = (org.spongycastle.crypto.CipherParameters) r10;

        specialinvoke $r29.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r31, r5);

        $r19 = (org.spongycastle.crypto.BufferedBlockCipher) r12;

        virtualinvoke $r19.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r29);

     label35:
        goto label11;

     label36:
        r4 := @caughtexception;

        $r25 = new org.spongycastle.openssl.EncryptionException;

        specialinvoke $r25.<org.spongycastle.openssl.EncryptionException: void <init>(java.lang.String,java.lang.Throwable)>("exception using cipher - please check password and data.", r4);

        throw $r25;

     label37:
        $r0 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r0, 0, $i0);

     label38:
        return $r0;

        catch java.lang.Exception from label08 to label09 with label36;
        catch java.lang.Exception from label10 to label12 with label36;
        catch java.lang.Exception from label13 to label14 with label36;
        catch java.lang.Exception from label31 to label32 with label36;
        catch java.lang.Exception from label34 to label35 with label36;
        catch java.lang.Exception from label37 to label38 with label36;
    }
    public static org.spongycastle.crypto.params.KeyParameter generateSecretKeyForPKCS5Scheme2(java.lang.String, char[], byte[], int)
    {
        java.lang.String $r0;
        char[] $r1;
        byte[] $r2, $r5;
        int $i0;
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r3;
        org.spongycastle.crypto.digests.SHA1Digest $r4;
        org.spongycastle.crypto.CipherParameters $r6;
        org.spongycastle.crypto.params.KeyParameter $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        r3 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r3.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        $r5 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r1);

        virtualinvoke r3.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r5, $r2, $i0);

        $i0 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: int getKeySize(java.lang.String)>($r0);

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        $r7 = (org.spongycastle.crypto.params.KeyParameter) $r6;

        return $r7;
    }
    private static org.spongycastle.crypto.params.KeyParameter getKey(char[], int, byte[]) throws org.spongycastle.openssl.PEMException
    {
        char[] $r0;
        int $i0;
        byte[] $r1;
        org.spongycastle.crypto.params.KeyParameter $r2;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $r2 = staticinvoke <org.spongycastle.openssl.bc.PEMUtilities: org.spongycastle.crypto.params.KeyParameter getKey(char[],int,byte[],boolean)>($r0, $i0, $r1, 0);

        return $r2;
    }
    private static org.spongycastle.crypto.params.KeyParameter getKey(char[], int, byte[], boolean) throws org.spongycastle.openssl.PEMException
    {
        char[] $r0;
        int $i0;
        byte[] $r1, $r3;
        boolean $z0;
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r2;
        org.spongycastle.crypto.CipherParameters $r4;
        org.spongycastle.crypto.params.KeyParameter r5;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $z0 := @parameter3: boolean;

        r2 = new org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: void <init>()>();

        $r3 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r0);

        virtualinvoke r2.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r3, $r1, 1);

        $i0 = $i0 * 8;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        r5 = (org.spongycastle.crypto.params.KeyParameter) $r4;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r1;

        if $i0 != 24 goto label1;

        $r1 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r1, 16, 8);

        r5 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke r5.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

     label1:
        return r5;
    }
    static int getKeySize(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no key size for algorithm: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        $r1 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Map KEYSIZES>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    public static boolean isPKCS12(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r0 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds>;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        return $z0;
    }
    static boolean isPKCS5Scheme1(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
    static boolean isPKCS5Scheme2(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.openssl.bc.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
