org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser extends java.lang.Object implements org.spongycastle.openssl.PEMKeyPairParser
final org.spongycastle.openssl.PEMParser this$0
    private void <init>(org.spongycastle.openssl.PEMParser)
    {
        org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser r0;
        org.spongycastle.openssl.PEMParser $r1;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        r0.<org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser: org.spongycastle.openssl.PEMParser this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(org.spongycastle.openssl.PEMParser, org.spongycastle.openssl.PEMParser$1)
    {
        org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser r0;
        org.spongycastle.openssl.PEMParser $r1;
        org.spongycastle.openssl.PEMParser$1 $r2;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser;

        $r1 := @parameter0: org.spongycastle.openssl.PEMParser;

        $r2 := @parameter1: org.spongycastle.openssl.PEMParser$1;

        specialinvoke r0.<org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser: void <init>(org.spongycastle.openssl.PEMParser)>($r1);

        return;
    }
    public org.spongycastle.openssl.PEMKeyPair parse(byte[]) throws java.io.IOException
    {
        org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser r0;
        byte[] $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier r2;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo r3;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo r4;
        org.spongycastle.asn1.ASN1Sequence $r5;
        org.spongycastle.asn1.sec.ECPrivateKey $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        org.spongycastle.asn1.ASN1Primitive $r8;
        org.spongycastle.asn1.DERBitString $r9;
        org.spongycastle.openssl.PEMKeyPair $r10;
        java.io.IOException r11;
        java.lang.Exception r12;
        org.spongycastle.openssl.PEMException $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;

        r0 := @this: org.spongycastle.openssl.PEMParser$ECDSAKeyPairParser;

        $r1 := @parameter0: byte[];

     label01:
        $r5 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1);

        $r6 = staticinvoke <org.spongycastle.asn1.sec.ECPrivateKey: org.spongycastle.asn1.sec.ECPrivateKey getInstance(java.lang.Object)>($r5);

     label02:
        r2 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r7 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey>;

     label03:
        $r8 = virtualinvoke $r6.<org.spongycastle.asn1.sec.ECPrivateKey: org.spongycastle.asn1.ASN1Primitive getParameters()>();

        specialinvoke r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r7, $r8);

     label04:
        r3 = new org.spongycastle.asn1.pkcs.PrivateKeyInfo;

     label05:
        specialinvoke r3.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>(r2, $r6);

     label06:
        r4 = new org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

     label07:
        $r9 = virtualinvoke $r6.<org.spongycastle.asn1.sec.ECPrivateKey: org.spongycastle.asn1.DERBitString getPublicKey()>();

        $r1 = virtualinvoke $r9.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        specialinvoke r4.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>(r2, $r1);

     label08:
        $r10 = new org.spongycastle.openssl.PEMKeyPair;

     label09:
        specialinvoke $r10.<org.spongycastle.openssl.PEMKeyPair: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo,org.spongycastle.asn1.pkcs.PrivateKeyInfo)>(r4, r3);

     label10:
        return $r10;

     label11:
        r11 := @caughtexception;

        throw r11;

     label12:
        r12 := @caughtexception;

        $r13 = new org.spongycastle.openssl.PEMException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem creating EC private key: ");

        $r15 = virtualinvoke r12.<java.lang.Exception: java.lang.String toString()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.openssl.PEMException: void <init>(java.lang.String,java.lang.Exception)>($r15, r12);

        throw $r13;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.lang.Exception from label09 to label10 with label12;
    }
