org.spongycastle.openssl.CertificateTrustBlock extends java.lang.Object
private java.lang.String alias
private org.spongycastle.asn1.ASN1Sequence prohibitions
private org.spongycastle.asn1.ASN1Sequence uses
    public void <init>(java.lang.String, java.util.Set)
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.lang.String $r1;
        java.util.Set r2;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: void <init>(java.lang.String,java.util.Set,java.util.Set)>($r1, r2, null);

        return;
    }
    public void <init>(java.lang.String, java.util.Set, java.util.Set)
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.lang.String $r1;
        java.util.Set r2, r3;
        org.spongycastle.asn1.ASN1Sequence $r4;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.openssl.CertificateTrustBlock: java.lang.String alias> = $r1;

        $r4 = specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence toSequence(java.util.Set)>(r2);

        r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence uses> = $r4;

        $r4 = specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence toSequence(java.util.Set)>(r3);

        r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence prohibitions> = $r4;

        return;
    }
    public void <init>(java.util.Set)
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.util.Set r1;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: void <init>(java.lang.String,java.util.Set,java.util.Set)>(null, r1, null);

        return;
    }
    void <init>(byte[])
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        byte[] $r1;
        org.spongycastle.asn1.ASN1Sequence $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.asn1.ASN1Encodable r5;
        org.spongycastle.asn1.ASN1TaggedObject r6;
        org.spongycastle.asn1.DERUTF8String $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (org.spongycastle.asn1.ASN1Encodable) $r4;

        $z0 = r5 instanceof org.spongycastle.asn1.ASN1Sequence;

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r5);

        r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence uses> = $r2;

        goto label1;

     label2:
        $z0 = r5 instanceof org.spongycastle.asn1.ASN1TaggedObject;

        if $z0 == 0 goto label3;

        r6 = (org.spongycastle.asn1.ASN1TaggedObject) r5;

        $r2 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>(r6, 0);

        r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence prohibitions> = $r2;

        goto label1;

     label3:
        $z0 = r5 instanceof org.spongycastle.asn1.DERUTF8String;

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <org.spongycastle.asn1.DERUTF8String: org.spongycastle.asn1.DERUTF8String getInstance(java.lang.Object)>(r5);

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.DERUTF8String: java.lang.String getString()>();

        r0.<org.spongycastle.openssl.CertificateTrustBlock: java.lang.String alias> = $r8;

        goto label1;

     label4:
        return;
    }
    private org.spongycastle.asn1.ASN1Sequence toSequence(java.util.Set)
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.util.Set r1;
        org.spongycastle.asn1.ASN1EncodableVector r2;
        boolean $z0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.DERSequence $r6;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        r1 := @parameter0: java.util.Set;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.spongycastle.asn1.ASN1Encodable) $r4;

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        goto label3;

     label4:
        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        return $r6;
    }
    private java.util.Set toSet(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        java.util.HashSet r2;
        int $i0;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        java.util.Set r6;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        if $r1 == null goto label2;

        r2 = new java.util.HashSet;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        specialinvoke r2.<java.util.HashSet: void <init>(int)>($i0);

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        r6 = <java.util.Collections: java.util.Set EMPTY_SET>;

        return r6;

     label3:
        return r2;
    }
    public java.lang.String getAlias()
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        r1 = r0.<org.spongycastle.openssl.CertificateTrustBlock: java.lang.String alias>;

        return r1;
    }
    public java.util.Set getProhibitions()
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.util.Set $r1;
        org.spongycastle.asn1.ASN1Sequence $r2;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence prohibitions>;

        $r1 = specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: java.util.Set toSet(org.spongycastle.asn1.ASN1Sequence)>($r2);

        return $r1;
    }
    public java.util.Set getUses()
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        java.util.Set $r1;
        org.spongycastle.asn1.ASN1Sequence $r2;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence uses>;

        $r1 = specialinvoke r0.<org.spongycastle.openssl.CertificateTrustBlock: java.util.Set toSet(org.spongycastle.asn1.ASN1Sequence)>($r2);

        return $r1;
    }
    org.spongycastle.asn1.ASN1Sequence toASN1Sequence()
    {
        org.spongycastle.openssl.CertificateTrustBlock r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Sequence $r2;
        org.spongycastle.asn1.DERTaggedObject $r3;
        java.lang.String $r4;
        org.spongycastle.asn1.DERUTF8String $r5;
        org.spongycastle.asn1.DERSequence $r6;

        r0 := @this: org.spongycastle.openssl.CertificateTrustBlock;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence uses>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence uses>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

     label1:
        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence prohibitions>;

        if $r2 == null goto label2;

        $r3 = new org.spongycastle.asn1.DERTaggedObject;

        $r2 = r0.<org.spongycastle.openssl.CertificateTrustBlock: org.spongycastle.asn1.ASN1Sequence prohibitions>;

        specialinvoke $r3.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, 0, $r2);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

     label2:
        $r4 = r0.<org.spongycastle.openssl.CertificateTrustBlock: java.lang.String alias>;

        if $r4 == null goto label3;

        $r5 = new org.spongycastle.asn1.DERUTF8String;

        $r4 = r0.<org.spongycastle.openssl.CertificateTrustBlock: java.lang.String alias>;

        specialinvoke $r5.<org.spongycastle.asn1.DERUTF8String: void <init>(java.lang.String)>($r4);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

     label3:
        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r6;
    }
