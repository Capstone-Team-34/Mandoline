org.spongycastle.openssl.MiscPEMGenerator extends java.lang.Object implements org.spongycastle.util.io.pem.PemObjectGenerator
private static final org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids
private static final byte[] hexEncodingTable
private final org.spongycastle.openssl.PEMEncryptor encryptor
private final java.lang.Object obj
    static void <clinit>()
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        byte[] $r2;

        $r0 = newarray (org.spongycastle.asn1.ASN1ObjectIdentifier)[2];

        $r1 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        $r0[0] = $r1;

        $r1 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1>;

        $r0[1] = $r1;

        <org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids> = $r0;

        $r2 = newarray (byte)[16];

        $r2[0] = 48;

        $r2[1] = 49;

        $r2[2] = 50;

        $r2[3] = 51;

        $r2[4] = 52;

        $r2[5] = 53;

        $r2[6] = 54;

        $r2[7] = 55;

        $r2[8] = 56;

        $r2[9] = 57;

        $r2[10] = 65;

        $r2[11] = 66;

        $r2[12] = 67;

        $r2[13] = 68;

        $r2[14] = 69;

        $r2[15] = 70;

        <org.spongycastle.openssl.MiscPEMGenerator: byte[] hexEncodingTable> = $r2;

        return;
    }
    public void <init>(java.lang.Object)
    {
        org.spongycastle.openssl.MiscPEMGenerator r0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.openssl.MiscPEMGenerator;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.openssl.MiscPEMGenerator: java.lang.Object obj> = $r1;

        r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor> = null;

        return;
    }
    public void <init>(java.lang.Object, org.spongycastle.openssl.PEMEncryptor)
    {
        org.spongycastle.openssl.MiscPEMGenerator r0;
        java.lang.Object $r1;
        org.spongycastle.openssl.PEMEncryptor $r2;

        r0 := @this: org.spongycastle.openssl.MiscPEMGenerator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.spongycastle.openssl.PEMEncryptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.openssl.MiscPEMGenerator: java.lang.Object obj> = $r1;

        r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor> = $r2;

        return;
    }
    private org.spongycastle.util.io.pem.PemObject createPemObject(java.lang.Object) throws java.io.IOException
    {
        org.spongycastle.openssl.MiscPEMGenerator r0;
        java.util.ArrayList r1;
        org.spongycastle.asn1.ASN1EncodableVector r2;
        java.lang.Object r3;
        boolean $z0;
        org.spongycastle.util.io.pem.PemObject r4;
        org.spongycastle.util.io.pem.PemObjectGenerator r5;
        java.lang.String r6, $r11, r12;
        org.spongycastle.cert.X509CertificateHolder r7;
        byte[] $r8, r9;
        org.spongycastle.openssl.PEMEncryptor $r10;
        org.spongycastle.util.io.pem.PemHeader $r13;
        java.lang.StringBuilder $r14;
        org.spongycastle.cert.X509CRLHolder r15;
        org.spongycastle.openssl.X509TrustedCertificateBlock r16;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo r17;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r18;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r19, $r20;
        org.spongycastle.asn1.ASN1Encodable $r21;
        org.spongycastle.asn1.ASN1Primitive $r22;
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r23;
        org.spongycastle.asn1.x509.DSAParameter $r24;
        org.spongycastle.asn1.ASN1Integer $r25;
        java.math.BigInteger $r26, $r27, $r28;
        org.spongycastle.asn1.DERSequence $r29;
        java.io.IOException $r30;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo r31;
        org.spongycastle.cert.X509AttributeCertificateHolder r32;
        org.spongycastle.pkcs.PKCS10CertificationRequest r33;
        org.spongycastle.asn1.cms.ContentInfo r34;
        org.spongycastle.util.io.pem.PemGenerationException $r35;

        r0 := @this: org.spongycastle.openssl.MiscPEMGenerator;

        r3 := @parameter0: java.lang.Object;

        $z0 = r3 instanceof org.spongycastle.util.io.pem.PemObject;

        if $z0 == 0 goto label01;

        r4 = (org.spongycastle.util.io.pem.PemObject) r3;

        return r4;

     label01:
        $z0 = r3 instanceof org.spongycastle.util.io.pem.PemObjectGenerator;

        if $z0 == 0 goto label02;

        r5 = (org.spongycastle.util.io.pem.PemObjectGenerator) r3;

        r4 = interfaceinvoke r5.<org.spongycastle.util.io.pem.PemObjectGenerator: org.spongycastle.util.io.pem.PemObject generate()>();

        return r4;

     label02:
        $z0 = r3 instanceof org.spongycastle.cert.X509CertificateHolder;

        if $z0 == 0 goto label05;

        r6 = "CERTIFICATE";

        r7 = (org.spongycastle.cert.X509CertificateHolder) r3;

        r9 = virtualinvoke r7.<org.spongycastle.cert.X509CertificateHolder: byte[] getEncoded()>();

     label03:
        $r10 = r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor>;

        if $r10 == null goto label17;

        $r10 = r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor>;

        $r11 = interfaceinvoke $r10.<org.spongycastle.openssl.PEMEncryptor: java.lang.String getAlgorithm()>();

        $r11 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r11);

        r12 = $r11;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("DESEDE");

        if $z0 == 0 goto label04;

        r12 = "DES-EDE3-CBC";

     label04:
        $r10 = r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor>;

        $r8 = interfaceinvoke $r10.<org.spongycastle.openssl.PEMEncryptor: byte[] getIV()>();

        $r10 = r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.openssl.PEMEncryptor encryptor>;

        r9 = interfaceinvoke $r10.<org.spongycastle.openssl.PEMEncryptor: byte[] encrypt(byte[])>(r9);

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(2);

        $r13 = new org.spongycastle.util.io.pem.PemHeader;

        specialinvoke $r13.<org.spongycastle.util.io.pem.PemHeader: void <init>(java.lang.String,java.lang.String)>("Proc-Type", "4,ENCRYPTED");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = new org.spongycastle.util.io.pem.PemHeader;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r11 = specialinvoke r0.<org.spongycastle.openssl.MiscPEMGenerator: java.lang.String getHexEncoded(byte[])>($r8);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.util.io.pem.PemHeader: void <init>(java.lang.String,java.lang.String)>("DEK-Info", $r11);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        r4 = new org.spongycastle.util.io.pem.PemObject;

        specialinvoke r4.<org.spongycastle.util.io.pem.PemObject: void <init>(java.lang.String,java.util.List,byte[])>(r6, r1, r9);

        return r4;

     label05:
        $z0 = r3 instanceof org.spongycastle.cert.X509CRLHolder;

        if $z0 == 0 goto label06;

        r6 = "X509 CRL";

        r15 = (org.spongycastle.cert.X509CRLHolder) r3;

        r9 = virtualinvoke r15.<org.spongycastle.cert.X509CRLHolder: byte[] getEncoded()>();

        goto label03;

     label06:
        $z0 = r3 instanceof org.spongycastle.openssl.X509TrustedCertificateBlock;

        if $z0 == 0 goto label07;

        r6 = "TRUSTED CERTIFICATE";

        r16 = (org.spongycastle.openssl.X509TrustedCertificateBlock) r3;

        r9 = virtualinvoke r16.<org.spongycastle.openssl.X509TrustedCertificateBlock: byte[] getEncoded()>();

        goto label03;

     label07:
        $z0 = r3 instanceof org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        if $z0 == 0 goto label12;

        r17 = (org.spongycastle.asn1.pkcs.PrivateKeyInfo) r3;

        $r18 = virtualinvoke r17.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r19 = virtualinvoke $r18.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r20 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption>;

        $z0 = virtualinvoke $r19.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r20);

        if $z0 == 0 goto label08;

        r6 = "RSA PRIVATE KEY";

        $r21 = virtualinvoke r17.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r22 = interfaceinvoke $r21.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r9 = virtualinvoke $r22.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded()>();

        goto label03;

     label08:
        $r23 = <org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids>;

        $r20 = $r23[0];

        $z0 = virtualinvoke $r19.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r20);

        if $z0 != 0 goto label09;

        $r23 = <org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids>;

        $r20 = $r23[1];

        $z0 = virtualinvoke $r19.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r20);

        if $z0 == 0 goto label10;

     label09:
        r6 = "DSA PRIVATE KEY";

        $r18 = virtualinvoke r17.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r21 = virtualinvoke $r18.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r24 = staticinvoke <org.spongycastle.asn1.x509.DSAParameter: org.spongycastle.asn1.x509.DSAParameter getInstance(java.lang.Object)>($r21);

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>(0L);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        $r26 = virtualinvoke $r24.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getP()>();

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r26);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        $r26 = virtualinvoke $r24.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getQ()>();

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r26);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        $r26 = virtualinvoke $r24.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getG()>();

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r26);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r21 = virtualinvoke r17.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r25 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r27 = virtualinvoke $r24.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getG()>();

        $r28 = virtualinvoke $r24.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getP()>();

        $r27 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r26, $r28);

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r27);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r25 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r25.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r26);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r25);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        r9 = virtualinvoke $r29.<org.spongycastle.asn1.DERSequence: byte[] getEncoded()>();

        goto label03;

     label10:
        $r20 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey>;

        $z0 = virtualinvoke $r19.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r20);

        if $z0 == 0 goto label11;

        r6 = "EC PRIVATE KEY";

        $r21 = virtualinvoke r17.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r22 = interfaceinvoke $r21.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r9 = virtualinvoke $r22.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded()>();

        goto label03;

     label11:
        $r30 = new java.io.IOException;

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("Cannot identify private key");

        throw $r30;

     label12:
        $z0 = r3 instanceof org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        if $z0 == 0 goto label13;

        r6 = "PUBLIC KEY";

        r31 = (org.spongycastle.asn1.x509.SubjectPublicKeyInfo) r3;

        r9 = virtualinvoke r31.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: byte[] getEncoded()>();

        goto label03;

     label13:
        $z0 = r3 instanceof org.spongycastle.cert.X509AttributeCertificateHolder;

        if $z0 == 0 goto label14;

        r6 = "ATTRIBUTE CERTIFICATE";

        r32 = (org.spongycastle.cert.X509AttributeCertificateHolder) r3;

        r9 = virtualinvoke r32.<org.spongycastle.cert.X509AttributeCertificateHolder: byte[] getEncoded()>();

        goto label03;

     label14:
        $z0 = r3 instanceof org.spongycastle.pkcs.PKCS10CertificationRequest;

        if $z0 == 0 goto label15;

        r6 = "CERTIFICATE REQUEST";

        r33 = (org.spongycastle.pkcs.PKCS10CertificationRequest) r3;

        r9 = virtualinvoke r33.<org.spongycastle.pkcs.PKCS10CertificationRequest: byte[] getEncoded()>();

        goto label03;

     label15:
        $z0 = r3 instanceof org.spongycastle.asn1.cms.ContentInfo;

        if $z0 == 0 goto label16;

        r6 = "PKCS7";

        r34 = (org.spongycastle.asn1.cms.ContentInfo) r3;

        r9 = virtualinvoke r34.<org.spongycastle.asn1.cms.ContentInfo: byte[] getEncoded()>();

        goto label03;

     label16:
        $r35 = new org.spongycastle.util.io.pem.PemGenerationException;

        specialinvoke $r35.<org.spongycastle.util.io.pem.PemGenerationException: void <init>(java.lang.String)>("unknown object passed - can\'t encode.");

        throw $r35;

     label17:
        r4 = new org.spongycastle.util.io.pem.PemObject;

        specialinvoke r4.<org.spongycastle.util.io.pem.PemObject: void <init>(java.lang.String,byte[])>(r6, r9);

        return r4;
    }
    private java.lang.String getHexEncoded(byte[]) throws java.io.IOException
    {
        org.spongycastle.openssl.MiscPEMGenerator r0;
        byte[] $r1, $r3;
        char[] r2;
        int i0, $i1, $i3, $i4;
        byte $b2;
        char $c5;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.openssl.MiscPEMGenerator;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        $i1 = $i1 * 2;

        r2 = newarray (char)[$i1];

        $i1 = 0;

     label1:
        i0 = lengthof $r1;

        if $i1 == i0 goto label2;

        $b2 = $r1[$i1];

        i0 = $b2 & 255;

        $i3 = $i1 * 2;

        $r3 = <org.spongycastle.openssl.MiscPEMGenerator: byte[] hexEncodingTable>;

        $i4 = i0 >>> 4;

        $b2 = $r3[$i4];

        $c5 = (char) $b2;

        r2[$i3] = $c5;

        $i3 = $i1 * 2;

        $i3 = $i3 + 1;

        $r3 = <org.spongycastle.openssl.MiscPEMGenerator: byte[] hexEncodingTable>;

        i0 = i0 & 15;

        $b2 = $r3[i0];

        $c5 = (char) $b2;

        r2[$i3] = $c5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r2);

        return $r4;
    }
    public org.spongycastle.util.io.pem.PemObject generate() throws org.spongycastle.util.io.pem.PemGenerationException
    {
        org.spongycastle.openssl.MiscPEMGenerator r0;
        java.io.IOException r1;
        java.lang.Object $r2;
        org.spongycastle.util.io.pem.PemObject $r3;
        org.spongycastle.util.io.pem.PemGenerationException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.openssl.MiscPEMGenerator;

        $r2 = r0.<org.spongycastle.openssl.MiscPEMGenerator: java.lang.Object obj>;

     label1:
        $r3 = specialinvoke r0.<org.spongycastle.openssl.MiscPEMGenerator: org.spongycastle.util.io.pem.PemObject createPemObject(java.lang.Object)>($r2);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new org.spongycastle.util.io.pem.PemGenerationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoding exception: ");

        $r6 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.util.io.pem.PemGenerationException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r1);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }
