org.spongycastle.jce.provider.JCERSAPublicKey extends java.lang.Object implements java.security.interfaces.RSAPublicKey
static final long serialVersionUID
private java.math.BigInteger modulus
private java.math.BigInteger publicExponent
    void <init>(java.security.interfaces.RSAPublicKey)
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.security.interfaces.RSAPublicKey $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 := @parameter0: java.security.interfaces.RSAPublicKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger modulus> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger publicExponent> = $r2;

        return;
    }
    void <init>(java.security.spec.RSAPublicKeySpec)
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.security.spec.RSAPublicKeySpec $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 := @parameter0: java.security.spec.RSAPublicKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger modulus> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger publicExponent> = $r2;

        return;
    }
    void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        org.spongycastle.asn1.pkcs.RSAPublicKey $r4;
        java.math.BigInteger $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        $r4 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPublicKey: org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getModulus()>();

     label2:
        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger modulus> = $r5;

     label3:
        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

     label4:
        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger publicExponent> = $r5;

        return;

     label5:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid info structure in RSA public key");

        throw $r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    void <init>(org.spongycastle.crypto.params.RSAKeyParameters)
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 := @parameter0: org.spongycastle.crypto.params.RSAKeyParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger modulus> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger publicExponent> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.lang.Object $r1;
        boolean $z0;
        java.security.interfaces.RSAPublicKey r2;
        java.math.BigInteger $r3, $r4;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.security.interfaces.RSAPublicKey) $r1;

        $r3 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getModulus()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.lang.String getAlgorithm()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        return "RSA";
    }
    public byte[] getEncoded()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        org.spongycastle.asn1.DERNull $r3;
        org.spongycastle.asn1.pkcs.RSAPublicKey $r4;
        java.math.BigInteger $r5, $r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption>;

        $r3 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r2, $r3);

        $r4 = new org.spongycastle.asn1.pkcs.RSAPublicKey;

        $r5 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r4.<org.spongycastle.asn1.pkcs.RSAPublicKey: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil: byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r1, $r4);

        return $r7;
    }
    public java.lang.String getFormat()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        return "X.509";
    }
    public java.math.BigInteger getModulus()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        r1 = r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger modulus>;

        return r1;
    }
    public java.math.BigInteger getPublicExponent()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        r1 = r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger publicExponent>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.math.BigInteger $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        $r1 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r1 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.spongycastle.jce.provider.JCERSAPublicKey r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2, $r5;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.jce.provider.JCERSAPublicKey;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String lineSeparator()>();

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RSA Public Key");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("            modulus: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getModulus()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    public exponent: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jce.provider.JCERSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
