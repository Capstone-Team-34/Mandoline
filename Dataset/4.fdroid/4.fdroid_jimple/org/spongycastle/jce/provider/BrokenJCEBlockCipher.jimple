org.spongycastle.jce.provider.BrokenJCEBlockCipher extends java.lang.Object implements org.spongycastle.jce.provider.BrokenPBE
private java.lang.Class[] availableSpecs
private org.spongycastle.crypto.BufferedBlockCipher cipher
private java.security.AlgorithmParameters engineParams
private int ivLength
private org.spongycastle.crypto.params.ParametersWithIV ivParam
private int pbeHash
private int pbeIvSize
private int pbeKeySize
private int pbeType
    protected void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        java.lang.Class[] $r2;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r3;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r2[1] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r2[2] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r2[3] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.lang.Class[] availableSpecs> = $r2;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeType> = 2;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeHash> = 1;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams> = null;

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;
    }
    protected void <init>(org.spongycastle.crypto.BlockCipher, int, int, int, int)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Class[] $r2;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r3;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r2[1] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r2[2] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r2[3] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.lang.Class[] availableSpecs> = $r2;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeType> = 2;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeHash> = 1;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams> = null;

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeType> = $i0;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeHash> = $i1;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeKeySize> = $i2;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeIvSize> = $i3;

        return;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3;
        org.spongycastle.crypto.BufferedBlockCipher $r3;
        org.spongycastle.crypto.DataLengthException r4;
        javax.crypto.IllegalBlockSizeException $r5;
        java.lang.String $r6;
        org.spongycastle.crypto.InvalidCipherTextException r7;
        javax.crypto.BadPaddingException $r8;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        i3 = 0;

        if $i1 == 0 goto label1;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        i3 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label1:
        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = $i2 + i3;

     label2:
        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r2, $i0);

     label3:
        $i0 = $i0 + i3;

        return $i0;

     label4:
        r4 := @caughtexception;

        $r5 = new javax.crypto.IllegalBlockSizeException;

        $r6 = virtualinvoke r4.<org.spongycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        r7 := @caughtexception;

        $r8 = new javax.crypto.BadPaddingException;

        $r6 = virtualinvoke r7.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r8.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r6);

        throw $r8;

        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label4;
        catch org.spongycastle.crypto.InvalidCipherTextException from label2 to label3 with label5;
    }
    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1, r2;
        int $i0, $i1, i2, $i3;
        org.spongycastle.crypto.BufferedBlockCipher $r3;
        org.spongycastle.crypto.DataLengthException r4;
        javax.crypto.IllegalBlockSizeException $r5;
        java.lang.String $r6;
        org.spongycastle.crypto.InvalidCipherTextException r7;
        javax.crypto.BadPaddingException $r8;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = 0;

        $i3 = virtualinvoke r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int engineGetOutputSize(int)>($i1);

        r2 = newarray (byte)[$i3];

        if $i1 == 0 goto label1;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        i2 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r2, 0);

     label1:
        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

     label2:
        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>(r2, i2);

     label3:
        $i0 = i2 + $i0;

        $r1 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, 0, $i0);

        return $r1;

     label4:
        r4 := @caughtexception;

        $r5 = new javax.crypto.IllegalBlockSizeException;

        $r6 = virtualinvoke r4.<org.spongycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        r7 := @caughtexception;

        $r8 = new javax.crypto.BadPaddingException;

        $r6 = virtualinvoke r7.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r8.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r6);

        throw $r8;

        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label4;
        catch org.spongycastle.crypto.InvalidCipherTextException from label2 to label3 with label5;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        return $i0;
    }
    protected byte[] engineGetIV()
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1;
        org.spongycastle.crypto.params.ParametersWithIV $r2;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        return $r1;

     label1:
        return null;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

        return $i0;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;
        org.spongycastle.crypto.BufferedBlockCipher $r4;
        org.spongycastle.crypto.BlockCipher $r5;
        java.lang.String $r6, r7;
        int $i0;
        byte[] $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        if $r3 == null goto label2;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        r7 = $r6;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(47);

        if $i0 < 0 goto label1;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(47);

        r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r2 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>(r7, "SC");

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams> = $r2;

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        $r8 = virtualinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(byte[])>($r8);

     label2:
        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        int $i0, i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.lang.Exception r4;
        java.security.spec.AlgorithmParameterSpec r5, $r8;
        java.lang.Class[] $r6;
        java.lang.Class $r7;
        java.security.InvalidAlgorithmParameterException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r5 = null;

        if $r2 == null goto label6;

        i1 = 0;

     label1:
        $r6 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r6;

        if i1 == $i2 goto label4;

     label2:
        $r6 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.lang.Class[] availableSpecs>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r7);

     label3:
        r5 = $r8;

     label4:
        if r5 != null goto label6;

        $r9 = new java.security.InvalidAlgorithmParameterException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r11 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label5:
        r4 := @caughtexception;

        i1 = i1 + 1;

        goto label1;

     label6:
        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: java.security.AlgorithmParameters engineParams> = $r2;

        virtualinvoke r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r5, $r3);

        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.security.Key $r1;
        byte[] r2;
        java.security.spec.AlgorithmParameterSpec r3;
        java.security.SecureRandom r4, $r20;
        boolean $z0;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r5;
        org.spongycastle.crypto.BufferedBlockCipher $r6;
        org.spongycastle.crypto.BlockCipher $r7;
        java.lang.String $r8;
        org.spongycastle.crypto.CipherParameters $r9;
        java.lang.Object r10;
        org.spongycastle.crypto.params.ParametersWithIV $r11, $r12;
        java.io.PrintStream $r13;
        org.spongycastle.crypto.params.KeyParameter $r14, $r21;
        javax.crypto.spec.IvParameterSpec r15;
        javax.crypto.spec.RC2ParameterSpec r16, r17;
        javax.crypto.spec.RC5ParameterSpec r18, r19;
        org.spongycastle.crypto.params.RC2Parameters $r22;
        org.spongycastle.crypto.params.RC5Parameters $r23;
        java.lang.IllegalArgumentException $r24;
        java.security.InvalidAlgorithmParameterException $r25;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r4 := @parameter3: java.security.SecureRandom;

        $z0 = $r1 instanceof org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        if $z0 == 0 goto label06;

        $r5 = (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1;

        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeType>;

        $i2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeHash>;

        $r6 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $i3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeKeySize>;

        $i4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeIvSize>;

        $r9 = staticinvoke <org.spongycastle.jce.provider.BrokenPBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,java.lang.String,int,int)>($r5, r3, $i1, $i2, $r8, $i3, $i4);

        r10 = $r9;

        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int pbeIvSize>;

        if $i1 == 0 goto label01;

        $r11 = (org.spongycastle.crypto.params.ParametersWithIV) $r9;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r11;

     label01:
        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength>;

        if $i1 == 0 goto label04;

        $z0 = r10 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label04;

        if r4 != null goto label02;

        $r20 = new java.security.SecureRandom;

        r4 = $r20;

        specialinvoke $r20.<java.security.SecureRandom: void <init>()>();

     label02:
        if $i0 == 1 goto label03;

        if $i0 != 3 goto label14;

     label03:
        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength>;

        r2 = newarray (byte)[$i1];

        virtualinvoke r4.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        $r12 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r11 = $r12;

        $r9 = (org.spongycastle.crypto.CipherParameters) r10;

        specialinvoke $r12.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r9, r2);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r12;

        r10 = $r11;

     label04:
        lookupswitch($i0)
        {
            case 1: goto label15;
            case 2: goto label16;
            case 3: goto label15;
            case 4: goto label16;
            default: goto label05;
        };

     label05:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label06:
        if r3 != null goto label07;

        $r14 = new org.spongycastle.crypto.params.KeyParameter;

        r10 = $r14;

        r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r14.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r2);

        goto label01;

     label07:
        $z0 = r3 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label09;

        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength>;

        if $i1 == 0 goto label08;

        $r11 = new org.spongycastle.crypto.params.ParametersWithIV;

        r10 = $r11;

        $r21 = new org.spongycastle.crypto.params.KeyParameter;

        r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r21.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r2);

        r15 = (javax.crypto.spec.IvParameterSpec) r3;

        r2 = virtualinvoke r15.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r11.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r21, r2);

        $r11 = (org.spongycastle.crypto.params.ParametersWithIV) $r11;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r11;

        goto label01;

     label08:
        $r14 = new org.spongycastle.crypto.params.KeyParameter;

        r10 = $r14;

        r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r14.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r2);

        goto label01;

     label09:
        $z0 = r3 instanceof javax.crypto.spec.RC2ParameterSpec;

        if $z0 == 0 goto label11;

        r16 = (javax.crypto.spec.RC2ParameterSpec) r3;

        $r22 = new org.spongycastle.crypto.params.RC2Parameters;

        r10 = $r22;

        r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        r17 = (javax.crypto.spec.RC2ParameterSpec) r3;

        $i1 = virtualinvoke r17.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();

        specialinvoke $r22.<org.spongycastle.crypto.params.RC2Parameters: void <init>(byte[],int)>(r2, $i1);

        r2 = virtualinvoke r16.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        if r2 == null goto label01;

        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength>;

        if $i1 == 0 goto label01;

        $r12 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r11 = $r12;

        r2 = virtualinvoke r16.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        $r9 = (org.spongycastle.crypto.CipherParameters) $r22;

        specialinvoke $r12.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r9, r2);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r12;

     label10:
        r10 = $r11;

        goto label01;

     label11:
        $z0 = r3 instanceof javax.crypto.spec.RC5ParameterSpec;

        if $z0 == 0 goto label13;

        r18 = (javax.crypto.spec.RC5ParameterSpec) r3;

        $r23 = new org.spongycastle.crypto.params.RC5Parameters;

        r10 = $r23;

        r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        r19 = (javax.crypto.spec.RC5ParameterSpec) r3;

        $i1 = virtualinvoke r19.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();

        specialinvoke $r23.<org.spongycastle.crypto.params.RC5Parameters: void <init>(byte[],int)>(r2, $i1);

        $i1 = virtualinvoke r18.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        if $i1 == 32 goto label12;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can only accept RC5 word size 32 (at the moment...)");

        throw $r24;

     label12:
        r2 = virtualinvoke r18.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        if r2 == null goto label01;

        $i1 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength>;

        if $i1 == 0 goto label01;

        $r12 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r11 = $r12;

        r2 = virtualinvoke r18.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        $r9 = (org.spongycastle.crypto.CipherParameters) $r23;

        specialinvoke $r12.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r9, r2);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r12;

        goto label10;

     label13:
        $r25 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r25.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r25;

     label14:
        $r25 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r25.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw $r25;

     label15:
        $r6 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r9 = (org.spongycastle.crypto.CipherParameters) r10;

        virtualinvoke $r6.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r9);

        return;

     label16:
        $r6 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r9 = (org.spongycastle.crypto.CipherParameters) r10;

        virtualinvoke $r6.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r9);

        return;
    }
    protected void engineSetMode(java.lang.String)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r3;
        org.spongycastle.crypto.BufferedBlockCipher $r4;
        org.spongycastle.crypto.BlockCipher $r5;
        int $i0;
        org.spongycastle.crypto.modes.CBCBlockCipher $r6;
        org.spongycastle.crypto.modes.OFBBlockCipher $r7;
        org.spongycastle.crypto.modes.CFBBlockCipher $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label1;

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = 0;

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("CBC");

        if $z0 == 0 goto label2;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r6 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r6.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("OFB");

        if $z0 == 0 goto label4;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = $i0;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 3 goto label3;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r7 = new org.spongycastle.crypto.modes.OFBBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r7.<org.spongycastle.crypto.modes.OFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r7);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label3:
        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r7 = new org.spongycastle.crypto.modes.OFBBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke $r7.<org.spongycastle.crypto.modes.OFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r7);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label4:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("CFB");

        if $z0 == 0 goto label6;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: int ivLength> = $i0;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 3 goto label5;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r8 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r8.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r8);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label5:
        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r8 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke $r8.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r8);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r9;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.BufferedBlockCipher $r3, $r4;
        org.spongycastle.crypto.BlockCipher $r5;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r6;
        org.spongycastle.crypto.modes.CTSBlockCipher $r7;
        javax.crypto.NoSuchPaddingException $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r4 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS5PADDING");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS7PADDING");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO10126PADDING");

        if $z0 == 0 goto label3;

     label2:
        $r6 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r6.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r6;

        return;

     label3:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("WITHCTS");

        if $z0 == 0 goto label4;

        $r7 = new org.spongycastle.crypto.modes.CTSBlockCipher;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r7.<org.spongycastle.crypto.modes.CTSBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r7;

        return;

     label4:
        $r8 = new javax.crypto.NoSuchPaddingException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r8;
    }
    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1;
        java.lang.String $r2;
        int $i0, $i1;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.BadPaddingException r4;
        java.security.InvalidKeyException $r5;
        javax.crypto.IllegalBlockSizeException r6;
        java.security.KeyFactory $r7;
        java.security.spec.X509EncodedKeySpec $r8;
        java.security.PublicKey $r9;
        java.security.spec.PKCS8EncodedKeySpec $r10;
        java.security.PrivateKey $r11;
        java.security.NoSuchProviderException r12;
        java.lang.StringBuilder $r13;
        java.security.NoSuchAlgorithmException r14;
        java.security.spec.InvalidKeySpecException r15;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 = lengthof $r1;

     label01:
        $r1 = virtualinvoke r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: byte[] engineDoFinal(byte[],int,int)>($r1, 0, $i1);

     label02:
        if $i0 != 3 goto label05;

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r2);

        return $r3;

     label03:
        r4 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke r4.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label04:
        r6 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke r6.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label05:
        $r7 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, "SC");

     label06:
        if $i0 != 1 goto label09;

        $r8 = new java.security.spec.X509EncodedKeySpec;

     label07:
        specialinvoke $r8.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r9 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r8);

     label08:
        return $r9;

     label09:
        if $i0 != 2 goto label15;

        $r10 = new java.security.spec.PKCS8EncodedKeySpec;

     label10:
        specialinvoke $r10.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r11 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r10);

     label11:
        return $r11;

     label12:
        r12 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r12.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label13:
        r14 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r14.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label14:
        r15 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r15.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label15:
        $r5 = new java.security.InvalidKeyException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r5;

        catch javax.crypto.BadPaddingException from label01 to label02 with label03;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label04;
        catch java.security.NoSuchProviderException from label05 to label06 with label12;
        catch java.security.NoSuchProviderException from label07 to label08 with label12;
        catch java.security.NoSuchProviderException from label10 to label11 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label13;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label13;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label13;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label14;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label14;
        catch java.security.spec.InvalidKeySpecException from label10 to label11 with label14;
    }
    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BufferedBlockCipher $r3;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

        return $i0;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        byte[] $r1, r3;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: int getUpdateOutputSize(int)>($i1);

        if $i2 <= 0 goto label1;

        r3 = newarray (byte)[$i2];

        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r3, 0);

        return r3;

     label1:
        $r2 = r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, null, 0);

        return null;
    }
    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        org.spongycastle.jce.provider.BrokenJCEBlockCipher r0;
        java.security.Key $r1;
        javax.crypto.BadPaddingException r2;
        byte[] $r3;
        java.security.InvalidKeyException $r4;
        int $i0;
        javax.crypto.IllegalBlockSizeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jce.provider.BrokenJCEBlockCipher;

        $r1 := @parameter0: java.security.Key;

        $r3 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        if $r3 != null goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw $r4;

     label1:
        $i0 = lengthof $r3;

     label2:
        $r3 = virtualinvoke r0.<org.spongycastle.jce.provider.BrokenJCEBlockCipher: byte[] engineDoFinal(byte[],int,int)>($r3, 0, $i0);

     label3:
        return $r3;

     label4:
        r2 := @caughtexception;

        $r5 = new javax.crypto.IllegalBlockSizeException;

        $r6 = virtualinvoke r2.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch javax.crypto.BadPaddingException from label2 to label3 with label4;
    }
