org.spongycastle.jce.provider.CertPathValidatorUtilities extends java.lang.Object
protected static final java.lang.String ANY_POLICY
protected static final java.lang.String AUTHORITY_KEY_IDENTIFIER
protected static final java.lang.String BASIC_CONSTRAINTS
protected static final java.lang.String CERTIFICATE_POLICIES
protected static final java.lang.String CRL_DISTRIBUTION_POINTS
protected static final java.lang.String CRL_NUMBER
protected static final int CRL_SIGN
protected static final org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL
protected static final java.lang.String DELTA_CRL_INDICATOR
protected static final java.lang.String FRESHEST_CRL
protected static final java.lang.String INHIBIT_ANY_POLICY
protected static final java.lang.String ISSUING_DISTRIBUTION_POINT
protected static final int KEY_CERT_SIGN
protected static final java.lang.String KEY_USAGE
protected static final java.lang.String NAME_CONSTRAINTS
protected static final java.lang.String POLICY_CONSTRAINTS
protected static final java.lang.String POLICY_MAPPINGS
protected static final java.lang.String SUBJECT_ALTERNATIVE_NAME
protected static final java.lang.String[] crlReasons
    static void <clinit>()
    {
        org.spongycastle.jce.provider.PKIXCRLUtil $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        $r0 = new org.spongycastle.jce.provider.PKIXCRLUtil;

        specialinvoke $r0.<org.spongycastle.jce.provider.PKIXCRLUtil: void <init>()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL> = $r0;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier certificatePolicies>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CERTIFICATE_POLICIES> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier basicConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String BASIC_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier policyMappings>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String POLICY_MAPPINGS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String SUBJECT_ALTERNATIVE_NAME> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier nameConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String NAME_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier keyUsage>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String KEY_USAGE> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String INHIBIT_ANY_POLICY> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String DELTA_CRL_INDICATOR> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier policyConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String POLICY_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier freshestCRL>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String FRESHEST_CRL> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CRL_DISTRIBUTION_POINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier cRLNumber>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CRL_NUMBER> = $r2;

        $r3 = newarray (java.lang.String)[11];

        $r3[0] = "unspecified";

        $r3[1] = "keyCompromise";

        $r3[2] = "cACompromise";

        $r3[3] = "affiliationChanged";

        $r3[4] = "superseded";

        $r3[5] = "cessationOfOperation";

        $r3[6] = "certificateHold";

        $r3[7] = "unknown";

        $r3[8] = "removeFromCRL";

        $r3[9] = "privilegeWithdrawn";

        $r3[10] = "aACompromise";

        <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String[] crlReasons> = $r3;

        return;
    }
    void <init>()
    {
        org.spongycastle.jce.provider.CertPathValidatorUtilities r0;

        r0 := @this: org.spongycastle.jce.provider.CertPathValidatorUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void checkCRLsNotEmpty(java.util.Set, java.lang.Object) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Set $r0;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.x509.X509AttributeCertificate r2;
        org.spongycastle.jce.provider.AnnotatedException $r3;
        java.lang.StringBuilder $r4;
        org.spongycastle.x509.AttributeCertificateIssuer $r5;
        java.security.Principal[] $r6;
        java.security.Principal $r7;
        java.lang.String $r8;
        java.security.cert.X509Certificate r9;
        org.spongycastle.asn1.x500.X500NameStyle $r10;
        org.spongycastle.asn1.x500.X500Name $r11;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof org.spongycastle.x509.X509AttributeCertificate;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.x509.X509AttributeCertificate) $r1;

        $r3 = new org.spongycastle.jce.provider.AnnotatedException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No CRLs found for issuer \"");

        $r5 = interfaceinvoke r2.<org.spongycastle.x509.X509AttributeCertificate: org.spongycastle.x509.AttributeCertificateIssuer getIssuer()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.x509.AttributeCertificateIssuer: java.security.Principal[] getPrincipals()>();

        $r7 = $r6[0];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        r9 = (java.security.cert.X509Certificate) $r1;

        $r3 = new org.spongycastle.jce.provider.AnnotatedException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No CRLs found for issuer \"");

        $r10 = <org.spongycastle.asn1.x500.style.RFC4519Style: org.spongycastle.asn1.x500.X500NameStyle INSTANCE>;

        $r11 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509Certificate)>(r9);

        $r8 = interfaceinvoke $r10.<org.spongycastle.asn1.x500.X500NameStyle: java.lang.String toString(org.spongycastle.asn1.x500.X500Name)>($r11);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return;
    }
    protected static java.util.Collection findCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector, java.util.List) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.jcajce.PKIXCertStoreSelector $r0;
        java.util.List $r1;
        java.util.LinkedHashSet r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.util.Store r5;
        java.util.Collection $r6;
        org.spongycastle.util.StoreException r7;
        org.spongycastle.jce.provider.AnnotatedException $r8;
        java.security.cert.CertStore r9;
        java.security.cert.CertStoreException r10;

        $r0 := @parameter0: org.spongycastle.jcajce.PKIXCertStoreSelector;

        $r1 := @parameter1: java.util.List;

        r2 = new java.util.LinkedHashSet;

        specialinvoke r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.spongycastle.util.Store;

        if $z0 == 0 goto label5;

        r5 = (org.spongycastle.util.Store) $r4;

     label2:
        $r6 = interfaceinvoke r5.<org.spongycastle.util.Store: java.util.Collection getMatches(org.spongycastle.util.Selector)>($r0);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label3:
        goto label1;

     label4:
        r7 := @caughtexception;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Problem while picking certificates from X.509 store.", r7);

        throw $r8;

     label5:
        r9 = (java.security.cert.CertStore) $r4;

     label6:
        $r6 = staticinvoke <org.spongycastle.jcajce.PKIXCertStoreSelector: java.util.Collection getCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector,java.security.cert.CertStore)>($r0, r9);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label7:
        goto label1;

     label8:
        r10 := @caughtexception;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Problem while picking certificates from certificate store.", r10);

        throw $r8;

     label9:
        return r2;

        catch org.spongycastle.util.StoreException from label2 to label3 with label4;
        catch java.security.cert.CertStoreException from label6 to label7 with label8;
    }
    static java.util.Collection findIssuerCerts(java.security.cert.X509Certificate, java.util.List, java.util.List) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate $r0;
        java.util.List r1, r2;
        java.util.LinkedHashSet r3;
        java.util.ArrayList r4;
        java.security.cert.X509CertSelector r5;
        org.spongycastle.asn1.x500.X500Name $r6;
        byte[] $r7;
        java.lang.String $r8;
        org.spongycastle.asn1.ASN1OctetString $r9;
        org.spongycastle.asn1.x509.AuthorityKeyIdentifier $r10;
        org.spongycastle.asn1.DEROctetString $r11;
        org.spongycastle.jcajce.PKIXCertStoreSelector$Builder $r12;
        org.spongycastle.jcajce.PKIXCertStoreSelector $r13;
        java.util.Collection $r14;
        java.util.Iterator $r15;
        boolean $z0;
        java.lang.Object $r16;
        java.io.IOException r17;
        org.spongycastle.jce.provider.AnnotatedException $r18, $r19;
        java.lang.Exception $r20;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r5 = new java.security.cert.X509CertSelector;

        specialinvoke r5.<java.security.cert.X509CertSelector: void <init>()>();

     label01:
        $r6 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509Certificate)>($r0);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke r5.<java.security.cert.X509CertSelector: void setSubject(byte[])>($r7);

     label02:
        $r8 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER>;

     label03:
        $r7 = virtualinvoke $r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>($r8);

     label04:
        if $r7 == null goto label08;

     label05:
        $r9 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r7);

        $r7 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r10 = staticinvoke <org.spongycastle.asn1.x509.AuthorityKeyIdentifier: org.spongycastle.asn1.x509.AuthorityKeyIdentifier getInstance(java.lang.Object)>($r7);

        $r7 = virtualinvoke $r10.<org.spongycastle.asn1.x509.AuthorityKeyIdentifier: byte[] getKeyIdentifier()>();

     label06:
        if $r7 == null goto label08;

        $r11 = new org.spongycastle.asn1.DEROctetString;

     label07:
        specialinvoke $r11.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r7);

        $r7 = virtualinvoke $r11.<org.spongycastle.asn1.DEROctetString: byte[] getEncoded()>();

        virtualinvoke r5.<java.security.cert.X509CertSelector: void setSubjectKeyIdentifier(byte[])>($r7);

     label08:
        $r12 = new org.spongycastle.jcajce.PKIXCertStoreSelector$Builder;

        specialinvoke $r12.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: void <init>(java.security.cert.CertSelector)>(r5);

        $r13 = virtualinvoke $r12.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: org.spongycastle.jcajce.PKIXCertStoreSelector build()>();

        r3 = new java.util.LinkedHashSet;

        specialinvoke r3.<java.util.LinkedHashSet: void <init>()>();

        r4 = new java.util.ArrayList;

     label09:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r14 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector,java.util.List)>($r13, r1);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        $r14 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector,java.util.List)>($r13, r2);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        $r15 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.security.cert.X509Certificate) $r16;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r0);

        goto label10;

     label11:
        r17 := @caughtexception;

        $r18 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r18.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Subject criteria for certificate selector to find issuer certificate could not be set.", r17);

        throw $r18;

     label12:
        $r18 := @caughtexception;

        $r19 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r19.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuer certificate cannot be searched.", $r18);

        throw $r19;

     label13:
        $r20 := @caughtexception;

        goto label08;

     label14:
        return r3;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch org.spongycastle.jce.provider.AnnotatedException from label09 to label10 with label12;
    }
    protected static java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate, java.util.Set) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate $r0;
        java.util.Set $r1;
        java.security.cert.TrustAnchor $r2;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.util.Set;

        $r2 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set,java.lang.String)>($r0, $r1, null);

        return $r2;
    }
    protected static java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate, java.util.Set, java.lang.String) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Certificate $r0, $r11;
        java.util.Set $r1;
        java.lang.String $r2, $r14;
        java.security.cert.X509CertSelector r3;
        java.security.cert.TrustAnchor r4;
        java.security.PublicKey r5, $r15;
        java.lang.Exception r6;
        org.spongycastle.asn1.x500.X500Name $r7, $r16;
        byte[] $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.io.IOException r12;
        org.spongycastle.jce.provider.AnnotatedException $r13;
        java.lang.IllegalArgumentException r17;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.util.Set;

        $r2 := @parameter2: java.lang.String;

        r4 = null;

        r5 = null;

        r6 = null;

        r3 = new java.security.cert.X509CertSelector;

        specialinvoke r3.<java.security.cert.X509CertSelector: void <init>()>();

        $r7 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r0);

     label01:
        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke r3.<java.security.cert.X509CertSelector: void setSubject(byte[])>($r8);

     label02:
        $r9 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        if r4 != null goto label18;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.cert.TrustAnchor) $r10;

        $r11 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        if $r11 == null goto label10;

        $r11 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        $z0 = virtualinvoke r3.<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)>($r11);

        if $z0 == 0 goto label09;

        $r11 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        r5 = virtualinvoke $r11.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

     label04:
        if r5 == null goto label03;

     label05:
        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void verifyX509Certificate(java.security.cert.X509Certificate,java.security.PublicKey,java.lang.String)>($r0, r5, $r2);

     label06:
        goto label03;

     label07:
        r6 := @caughtexception;

        r4 = null;

        r5 = null;

        goto label03;

     label08:
        r12 := @caughtexception;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot set subject search criteria for trust anchor.", r12);

        throw $r13;

     label09:
        r4 = null;

        goto label04;

     label10:
        $r14 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.lang.String getCAName()>();

        if $r14 == null goto label17;

        $r15 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();

        if $r15 == null goto label17;

     label11:
        $r16 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getCA(java.security.cert.TrustAnchor)>(r4);

        $z0 = virtualinvoke $r7.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r16);

     label12:
        if $z0 == 0 goto label15;

     label13:
        $r15 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();

     label14:
        r5 = $r15;

        goto label04;

     label15:
        r4 = null;

        goto label04;

     label16:
        r17 := @caughtexception;

        r4 = null;

        goto label04;

     label17:
        r4 = null;

        goto label04;

     label18:
        if r4 != null goto label19;

        if r6 == null goto label19;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("TrustAnchor found but certificate validation failed.", r6);

        throw $r13;

     label19:
        return r4;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label11 to label12 with label16;
        catch java.lang.IllegalArgumentException from label13 to label14 with label16;
    }
    static java.util.List getAdditionalStoresFromAltNames(byte[], java.util.Map) throws java.security.cert.CertificateParsingException
    {
        byte[] $r0;
        java.util.Map r1;
        org.spongycastle.asn1.x509.GeneralName r2;
        org.spongycastle.asn1.ASN1OctetString $r3;
        org.spongycastle.asn1.x509.GeneralNames $r4;
        org.spongycastle.asn1.x509.GeneralName[] $r5;
        java.util.ArrayList r6;
        int i0, $i1;
        java.lang.Object $r7;
        org.spongycastle.jcajce.PKIXCertStore r8;
        java.util.List r9;

        $r0 := @parameter0: byte[];

        r1 := @parameter1: java.util.Map;

        if $r0 == null goto label3;

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r0);

        $r0 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r4 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r5;

        if i0 == $i1 goto label4;

        r2 = $r5[i0];

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (org.spongycastle.jcajce.PKIXCertStore) $r7;

        if r8 == null goto label2;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        r9 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return r9;

     label4:
        return r6;
    }
    static java.util.List getAdditionalStoresFromCRLDistributionPoint(org.spongycastle.asn1.x509.CRLDistPoint, java.util.Map) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.CRLDistPoint $r0;
        java.util.Map r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.x509.DistributionPoint[] $r3;
        java.util.ArrayList r4;
        int i0, $i1, $i2;
        org.spongycastle.asn1.x509.DistributionPoint $r5;
        org.spongycastle.asn1.x509.DistributionPointName $r6;
        org.spongycastle.asn1.ASN1Encodable $r7;
        org.spongycastle.asn1.x509.GeneralNames $r8;
        org.spongycastle.asn1.x509.GeneralName[] $r9;
        org.spongycastle.asn1.x509.GeneralName $r10;
        java.lang.Object $r11;
        org.spongycastle.jcajce.PKIXCRLStore r12;
        org.spongycastle.jce.provider.AnnotatedException $r13;
        java.util.List r14;

        $r0 := @parameter0: org.spongycastle.asn1.x509.CRLDistPoint;

        r1 := @parameter1: java.util.Map;

        if $r0 == null goto label8;

     label1:
        $r3 = virtualinvoke $r0.<org.spongycastle.asn1.x509.CRLDistPoint: org.spongycastle.asn1.x509.DistributionPoint[] getDistributionPoints()>();

     label2:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label3:
        $i1 = lengthof $r3;

        if i0 >= $i1 goto label9;

        $r5 = $r3[i0];

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r6 == null goto label7;

        $i1 = virtualinvoke $r6.<org.spongycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i1 != 0 goto label7;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x509.DistributionPointName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r8 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        $i1 = 0;

     label4:
        $i2 = lengthof $r9;

        if $i1 >= $i2 goto label7;

        $r10 = $r9[$i1];

        $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (org.spongycastle.jcajce.PKIXCRLStore) $r11;

        if r12 == null goto label5;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r12);

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        r2 := @caughtexception;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Distribution points could not be read.", r2);

        throw $r13;

     label7:
        i0 = i0 + 1;

        goto label3;

     label8:
        r14 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return r14;

     label9:
        return r4;

        catch java.lang.Exception from label1 to label2 with label6;
    }
    protected static org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier(java.security.PublicKey) throws java.security.cert.CertPathValidatorException
    {
        java.security.PublicKey $r0;
        org.spongycastle.asn1.ASN1InputStream r1;
        java.lang.Exception r2;
        byte[] $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r6;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r7;

        $r0 := @parameter0: java.security.PublicKey;

        r1 = new org.spongycastle.asn1.ASN1InputStream;

     label1:
        $r3 = interfaceinvoke $r0.<java.security.PublicKey: byte[] getEncoded()>();

        specialinvoke r1.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r3);

        $r4 = virtualinvoke r1.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        $r5 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

     label2:
        return $r6;

     label3:
        r2 := @caughtexception;

        $r7 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r7.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable)>("Subject public key cannot be decoded.", r2);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected static void getCRLIssuersFromDistributionPoint(org.spongycastle.asn1.x509.DistributionPoint, java.util.Collection, java.security.cert.X509CRLSelector) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.DistributionPoint $r0;
        java.util.Collection $r1;
        java.security.cert.X509CRLSelector $r2;
        java.io.IOException r3, r4;
        java.util.ArrayList r5;
        org.spongycastle.asn1.x509.GeneralNames $r6;
        org.spongycastle.asn1.x509.GeneralName[] $r7;
        int i0, $i1;
        org.spongycastle.asn1.x509.GeneralName $r8;
        org.spongycastle.asn1.ASN1Encodable $r9;
        org.spongycastle.asn1.ASN1Primitive $r10;
        byte[] $r11;
        org.spongycastle.asn1.x500.X500Name $r12;
        org.spongycastle.jce.provider.AnnotatedException $r13;
        org.spongycastle.asn1.x509.DistributionPointName $r14;
        java.util.Iterator $r15;
        boolean $z0;
        java.lang.Object $r16;

        $r0 := @parameter0: org.spongycastle.asn1.x509.DistributionPoint;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: java.security.cert.X509CRLSelector;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r6 == null goto label05;

        $r6 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        i0 = 0;

     label01:
        $i1 = lengthof $r7;

        if i0 >= $i1 goto label08;

        $r8 = $r7[i0];

        $i1 = virtualinvoke $r8.<org.spongycastle.asn1.x509.GeneralName: int getTagNo()>();

        if $i1 != 4 goto label03;

        $r8 = $r7[i0];

     label02:
        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.x509.GeneralName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r10 = interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded()>();

        $r12 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r11);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12);

     label03:
        i0 = i0 + 1;

        goto label01;

     label04:
        r3 := @caughtexception;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL issuer information from distribution point cannot be decoded.", r3);

        throw $r13;

     label05:
        $r14 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r14 != null goto label06;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL issuer is omitted from distribution point but no distributionPoint field present.");

        throw $r13;

     label06:
        $r15 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label07;

     label08:
        $r15 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

     label10:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r12 = (org.spongycastle.asn1.x500.X500Name) $r16;

     label12:
        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke $r2.<java.security.cert.X509CRLSelector: void addIssuerName(byte[])>($r11);

     label13:
        goto label09;

     label14:
        r4 := @caughtexception;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot decode CRL issuer information.", r4);

        throw $r13;

     label15:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.io.IOException from label12 to label13 with label14;
    }
    protected static void getCertStatus(java.util.Date, java.security.cert.X509CRL, java.lang.Object, org.spongycastle.jce.provider.CertStatus) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0;
        java.security.cert.X509CRL $r1;
        java.lang.Object $r2;
        org.spongycastle.jce.provider.CertStatus $r3;
        java.lang.Exception r4;
        java.security.cert.CRLException r5;
        boolean $z0;
        java.math.BigInteger $r6;
        java.security.cert.X509CRLEntry $r7, r8;
        org.spongycastle.jce.provider.AnnotatedException $r9;
        javax.security.auth.x500.X500Principal $r10;
        org.spongycastle.asn1.x500.X500Name $r11, $r12;
        org.spongycastle.asn1.ASN1Enumerated r13;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r14;
        java.lang.String $r15;
        org.spongycastle.asn1.ASN1Primitive $r16;
        long $l0, $l1;
        byte $b2;
        int $i3;
        byte[] $r17;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.security.cert.X509CRL;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: org.spongycastle.jce.provider.CertStatus;

     label01:
        $z0 = staticinvoke <org.spongycastle.jce.provider.X509CRLObject: boolean isIndirectCRL(java.security.cert.X509CRL)>($r1);

     label02:
        if $z0 == 0 goto label12;

        $r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.math.BigInteger getSerialNumber(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r1.<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>($r6);

        r8 = $r7;

        if $r7 != null goto label04;

        return;

     label03:
        r5 := @caughtexception;

        $r9 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r9.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Failed check for indirect CRL.", r5);

        throw $r9;

     label04:
        $r10 = virtualinvoke $r7.<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()>();

        if $r10 != null goto label11;

        $r11 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r1);

     label05:
        $r12 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r12.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label15;

     label06:
        r13 = null;

        $z0 = virtualinvoke r8.<java.security.cert.X509CRLEntry: boolean hasExtensions()>();

        if $z0 == 0 goto label08;

        $r14 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier reasonCode>;

     label07:
        $r15 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r16 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r8, $r15);

        r13 = staticinvoke <org.spongycastle.asn1.ASN1Enumerated: org.spongycastle.asn1.ASN1Enumerated getInstance(java.lang.Object)>($r16);

     label08:
        $l0 = virtualinvoke $r0.<java.util.Date: long getTime()>();

        $r0 = virtualinvoke r8.<java.security.cert.X509CRLEntry: java.util.Date getRevocationDate()>();

        $l1 = virtualinvoke $r0.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label09;

        if r13 == null goto label09;

        $r6 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Enumerated: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        if $i3 == 0 goto label09;

        $r6 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Enumerated: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        if $i3 == 1 goto label09;

        $r6 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Enumerated: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        if $i3 == 2 goto label09;

        $r6 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Enumerated: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        if $i3 != 8 goto label15;

     label09:
        if r13 == null goto label14;

        $r6 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Enumerated: java.math.BigInteger getValue()>();

        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        virtualinvoke $r3.<org.spongycastle.jce.provider.CertStatus: void setCertStatus(int)>($i3);

     label10:
        $r0 = virtualinvoke r8.<java.security.cert.X509CRLEntry: java.util.Date getRevocationDate()>();

        virtualinvoke $r3.<org.spongycastle.jce.provider.CertStatus: void setRevocationDate(java.util.Date)>($r0);

        return;

     label11:
        $r17 = virtualinvoke $r10.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        $r11 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r17);

        goto label05;

     label12:
        $r11 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r2);

        $r12 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r1);

        $z0 = virtualinvoke $r11.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label15;

        $r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.math.BigInteger getSerialNumber(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r1.<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>($r6);

        r8 = $r7;

        if $r7 != null goto label06;

        return;

     label13:
        r4 := @caughtexception;

        $r9 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r9.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Reason code CRL entry extension could not be decoded.", r4);

        throw $r9;

     label14:
        virtualinvoke $r3.<org.spongycastle.jce.provider.CertStatus: void setCertStatus(int)>(0);

        goto label10;

     label15:
        return;

        catch java.security.cert.CRLException from label01 to label02 with label03;
        catch java.lang.Exception from label07 to label08 with label13;
    }
    protected static java.util.Set getCompleteCRLs(org.spongycastle.asn1.x509.DistributionPoint, java.lang.Object, java.util.Date, org.spongycastle.jcajce.PKIXExtendedParameters) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.DistributionPoint $r0;
        java.lang.Object $r1;
        java.util.Date $r2, $r11;
        org.spongycastle.jcajce.PKIXExtendedParameters $r3;
        java.security.cert.X509CRLSelector r4;
        org.spongycastle.jce.provider.AnnotatedException r5, $r16;
        java.util.HashSet r6;
        org.spongycastle.asn1.x500.X500Name $r7;
        boolean $z0;
        java.security.cert.X509Certificate $r8;
        org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder $r9;
        org.spongycastle.jcajce.PKIXCRLStoreSelector $r10;
        org.spongycastle.jce.provider.PKIXCRLUtil $r12;
        java.util.List $r13, $r14;
        java.util.Set $r15;

        $r0 := @parameter0: org.spongycastle.asn1.x509.DistributionPoint;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.util.Date;

        $r3 := @parameter3: org.spongycastle.jcajce.PKIXExtendedParameters;

        r4 = new java.security.cert.X509CRLSelector;

        specialinvoke r4.<java.security.cert.X509CRLSelector: void <init>()>();

        r6 = new java.util.HashSet;

     label1:
        specialinvoke r6.<java.util.HashSet: void <init>()>();

        $r7 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r1);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void getCRLIssuersFromDistributionPoint(org.spongycastle.asn1.x509.DistributionPoint,java.util.Collection,java.security.cert.X509CRLSelector)>($r0, r6, r4);

     label2:
        $z0 = $r1 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label3;

        $r8 = (java.security.cert.X509Certificate) $r1;

        virtualinvoke r4.<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)>($r8);

     label3:
        $r9 = new org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder;

        specialinvoke $r9.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void <init>(java.security.cert.CRLSelector)>(r4);

        $r9 = virtualinvoke $r9.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder setCompleteCRLEnabled(boolean)>(1);

        $r10 = virtualinvoke $r9.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: org.spongycastle.jcajce.PKIXCRLStoreSelector build()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

        if $r11 == null goto label4;

        $r2 = virtualinvoke $r3.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

     label4:
        $r12 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL>;

        $r13 = virtualinvoke $r3.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r14 = virtualinvoke $r3.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCRLStores()>();

        $r15 = virtualinvoke $r12.<org.spongycastle.jce.provider.PKIXCRLUtil: java.util.Set findCRLs(org.spongycastle.jcajce.PKIXCRLStoreSelector,java.util.Date,java.util.List,java.util.List)>($r10, $r2, $r13, $r14);

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void checkCRLsNotEmpty(java.util.Set,java.lang.Object)>($r15, $r1);

        return $r15;

     label5:
        r5 := @caughtexception;

        $r16 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r16.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Could not get issuer information from distribution point.", r5);

        throw $r16;

        catch org.spongycastle.jce.provider.AnnotatedException from label1 to label2 with label5;
    }
    protected static java.util.Set getDeltaCRLs(java.util.Date, java.security.cert.X509CRL, java.util.List, java.util.List) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0;
        java.security.cert.X509CRL $r1;
        java.util.List r2, r3;
        java.security.cert.X509CRLSelector r4;
        java.util.HashSet r5;
        org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder r6;
        org.spongycastle.asn1.x500.X500Name $r7;
        byte[] $r8;
        java.math.BigInteger r9, $r13;
        java.lang.String $r10;
        org.spongycastle.asn1.ASN1Primitive $r11;
        org.spongycastle.asn1.ASN1Integer $r12;
        org.spongycastle.jcajce.PKIXCRLStoreSelector $r14;
        org.spongycastle.jce.provider.PKIXCRLUtil $r15;
        java.util.Set $r16;
        java.util.Iterator $r17;
        boolean $z0;
        java.lang.Object $r18;
        java.io.IOException r19;
        org.spongycastle.jce.provider.AnnotatedException $r20;
        java.lang.Exception r21, r22;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.security.cert.X509CRL;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 = new java.security.cert.X509CRLSelector;

        specialinvoke r4.<java.security.cert.X509CRLSelector: void <init>()>();

     label01:
        $r7 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r1);

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke r4.<java.security.cert.X509CRLSelector: void addIssuerName(byte[])>($r8);

     label02:
        r9 = null;

        $r10 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CRL_NUMBER>;

     label03:
        $r11 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r1, $r10);

     label04:
        if $r11 == null goto label06;

     label05:
        $r12 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r11);

        r9 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getPositiveValue()>();

     label06:
        $r10 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

     label07:
        $r8 = virtualinvoke $r1.<java.security.cert.X509CRL: byte[] getExtensionValue(java.lang.String)>($r10);

     label08:
        if r9 != null goto label14;

        $r13 = null;

     label09:
        virtualinvoke r4.<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)>($r13);

        r6 = new org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder;

        specialinvoke r6.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void <init>(java.security.cert.CRLSelector)>(r4);

        virtualinvoke r6.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void setIssuingDistributionPoint(byte[])>($r8);

        virtualinvoke r6.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void setIssuingDistributionPointEnabled(boolean)>(1);

        virtualinvoke r6.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void setMaxBaseCRLNumber(java.math.BigInteger)>(r9);

        $r14 = virtualinvoke r6.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: org.spongycastle.jcajce.PKIXCRLStoreSelector build()>();

        $r15 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL>;

        $r16 = virtualinvoke $r15.<org.spongycastle.jce.provider.PKIXCRLUtil: java.util.Set findCRLs(org.spongycastle.jcajce.PKIXCRLStoreSelector,java.util.Date,java.util.List,java.util.List)>($r14, $r0, r2, r3);

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.security.cert.X509CRL) $r18;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isDeltaCRL(java.security.cert.X509CRL)>($r1);

        if $z0 == 0 goto label10;

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label10;

     label11:
        r19 := @caughtexception;

        $r20 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot extract issuer from CRL.", r19);

        throw $r20;

     label12:
        r21 := @caughtexception;

        $r20 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL number extension could not be extracted from CRL.", r21);

        throw $r20;

     label13:
        r22 := @caughtexception;

        $r20 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension value could not be read.", r22);

        throw $r20;

     label14:
        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        $r13 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        goto label09;

     label15:
        return r5;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label08 with label13;
    }
    protected static org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension, java.lang.String) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509Extension $r0;
        java.lang.String $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1Primitive $r3;

        $r0 := @parameter0: java.security.cert.X509Extension;

        $r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke $r0.<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getObject(java.lang.String,byte[])>($r1, $r2);

        return $r3;
    }
    protected static java.security.PublicKey getNextWorkingKey(java.util.List, int, org.spongycastle.jcajce.util.JcaJceHelper) throws java.security.cert.CertPathValidatorException
    {
        java.util.List $r0;
        int $i0, $i1;
        org.spongycastle.jcajce.util.JcaJceHelper $r1;
        java.security.spec.DSAPublicKeySpec r2;
        java.lang.Exception r3;
        java.lang.Object $r4;
        java.security.cert.Certificate r5;
        java.security.PublicKey $r6;
        boolean $z0;
        java.security.interfaces.DSAPublicKey r7, r11;
        java.security.interfaces.DSAParams $r8;
        java.security.cert.X509Certificate r9;
        java.security.cert.CertPathValidatorException $r10;
        java.math.BigInteger $r12, $r13, $r14, $r15;
        java.security.KeyFactory $r16;
        java.lang.RuntimeException $r17;
        java.lang.String $r18;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.spongycastle.jcajce.util.JcaJceHelper;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (java.security.cert.Certificate) $r4;

        $r6 = virtualinvoke r5.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $z0 = $r6 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 != 0 goto label1;

        return $r6;

     label1:
        r7 = (java.security.interfaces.DSAPublicKey) $r6;

        $r8 = interfaceinvoke r7.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        if $r8 != null goto label9;

        $i0 = $i0 + 1;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label8;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        r9 = (java.security.cert.X509Certificate) $r4;

        $r6 = virtualinvoke r9.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $z0 = $r6 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 != 0 goto label3;

        $r10 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r10.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("DSA parameters cannot be inherited from previous certificate.");

        throw $r10;

     label3:
        r11 = (java.security.interfaces.DSAPublicKey) $r6;

        $r8 = interfaceinvoke r11.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        if $r8 != null goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r8 = interfaceinvoke r11.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        r2 = new java.security.spec.DSAPublicKeySpec;

        $r12 = interfaceinvoke r7.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r13 = interfaceinvoke $r8.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r14 = interfaceinvoke $r8.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r15 = interfaceinvoke $r8.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke r2.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r12, $r13, $r14, $r15);

     label5:
        $r16 = interfaceinvoke $r1.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.KeyFactory createKeyFactory(java.lang.String)>("DSA");

        $r6 = virtualinvoke $r16.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r2);

     label6:
        return $r6;

     label7:
        r3 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        $r18 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label8:
        $r10 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r10.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("DSA parameters cannot be inherited from previous certificate.");

        throw $r10;

     label9:
        return r7;

        catch java.lang.Exception from label5 to label6 with label7;
    }
    private static org.spongycastle.asn1.ASN1Primitive getObject(java.lang.String, byte[]) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.ASN1InputStream r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.asn1.ASN1OctetString r5;
        org.spongycastle.jce.provider.AnnotatedException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        r3 = new org.spongycastle.asn1.ASN1InputStream;

     label1:
        specialinvoke r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1);

        $r4 = virtualinvoke r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        r5 = (org.spongycastle.asn1.ASN1OctetString) $r4;

     label2:
        r3 = new org.spongycastle.asn1.ASN1InputStream;

     label3:
        $r1 = virtualinvoke r5.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        specialinvoke r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1);

        $r4 = virtualinvoke r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

     label4:
        return $r4;

     label5:
        r2 := @caughtexception;

        $r6 = new org.spongycastle.jce.provider.AnnotatedException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception processing extension ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>($r0, r2);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    protected static final java.util.Set getQualifierSet(org.spongycastle.asn1.ASN1Sequence) throws java.security.cert.CertPathValidatorException
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        org.spongycastle.asn1.ASN1OutputStream r1;
        java.io.ByteArrayOutputStream r2;
        java.io.IOException r3;
        java.util.HashSet r4;
        java.util.Enumeration $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.spongycastle.asn1.ASN1Encodable $r7;
        java.security.cert.PolicyQualifierInfo $r8;
        byte[] $r9;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r10;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        r4 = new java.util.HashSet;

        specialinvoke r4.<java.util.HashSet: void <init>()>();

        if $r0 != null goto label01;

        return r4;

     label01:
        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = new org.spongycastle.asn1.ASN1OutputStream;

        specialinvoke r1.<org.spongycastle.asn1.ASN1OutputStream: void <init>(java.io.OutputStream)>(r2);

        $r5 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

     label03:
        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

     label04:
        $r7 = (org.spongycastle.asn1.ASN1Encodable) $r6;

     label05:
        virtualinvoke r1.<org.spongycastle.asn1.ASN1OutputStream: void writeObject(org.spongycastle.asn1.ASN1Encodable)>($r7);

     label06:
        $r8 = new java.security.cert.PolicyQualifierInfo;

     label07:
        $r9 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<java.security.cert.PolicyQualifierInfo: void <init>(byte[])>($r9);

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label08:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void reset()>();

        goto label02;

     label09:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r10.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable)>("Policy qualifier info cannot be decoded.", r3);

        throw $r10;

     label10:
        return r4;

        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
    }
    private static java.math.BigInteger getSerialNumber(java.lang.Object)
    {
        java.math.BigInteger $r0;
        java.lang.Object $r1;
        java.security.cert.X509Certificate $r2;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.security.cert.X509Certificate) $r1;

        $r0 = virtualinvoke $r2.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        return $r0;
    }
    protected static java.util.Date getValidCertDateFromValidityModel(org.spongycastle.jcajce.PKIXExtendedParameters, java.security.cert.CertPath, int) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.jcajce.PKIXExtendedParameters $r0;
        java.security.cert.CertPath $r1;
        int $i0, $i1;
        java.util.Date $r2;
        org.spongycastle.asn1.ASN1GeneralizedTime r3;
        java.util.List $r4;
        java.lang.Object $r5;
        java.security.cert.X509Certificate $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        java.lang.String $r8;
        byte[] $r9;
        org.spongycastle.asn1.ASN1Primitive $r10;
        java.io.IOException r11;
        org.spongycastle.jce.provider.AnnotatedException $r12;
        java.lang.IllegalArgumentException r13;
        java.text.ParseException r14;

        $r0 := @parameter0: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r1 := @parameter1: java.security.cert.CertPath;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r0.<org.spongycastle.jcajce.PKIXExtendedParameters: int getValidityModel()>();

        if $i1 != 1 goto label17;

        if $i0 > 0 goto label01;

        $r2 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidDate(org.spongycastle.jcajce.PKIXExtendedParameters)>($r0);

        return $r2;

     label01:
        $i1 = $i0 + -1;

        if $i1 != 0 goto label16;

        r3 = null;

     label02:
        $r4 = virtualinvoke $r1.<java.security.cert.CertPath: java.util.List getCertificates()>();

     label03:
        $i1 = $i0 + -1;

     label04:
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

     label05:
        $r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = <org.spongycastle.asn1.isismtt.ISISMTTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_dateOfCertGen>;

     label06:
        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r9 = virtualinvoke $r6.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>($r8);

     label07:
        if $r9 == null goto label09;

     label08:
        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r9);

        r3 = staticinvoke <org.spongycastle.asn1.ASN1GeneralizedTime: org.spongycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object)>($r10);

     label09:
        if r3 == null goto label15;

     label10:
        $r2 = virtualinvoke r3.<org.spongycastle.asn1.ASN1GeneralizedTime: java.util.Date getDate()>();

     label11:
        return $r2;

     label12:
        r11 := @caughtexception;

        $r12 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r12.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Date of cert gen extension could not be read.");

        throw $r12;

     label13:
        r13 := @caughtexception;

        $r12 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r12.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Date of cert gen extension could not be read.");

        throw $r12;

     label14:
        r14 := @caughtexception;

        $r12 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r12.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Date from date of cert gen extension could not be parsed.", r14);

        throw $r12;

     label15:
        $r4 = virtualinvoke $r1.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i0 = $i0 + -1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.security.cert.X509Certificate) $r5;

        $r2 = virtualinvoke $r6.<java.security.cert.X509Certificate: java.util.Date getNotBefore()>();

        return $r2;

     label16:
        $r4 = virtualinvoke $r1.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i0 = $i0 + -1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.security.cert.X509Certificate) $r5;

        $r2 = virtualinvoke $r6.<java.security.cert.X509Certificate: java.util.Date getNotBefore()>();

        return $r2;

     label17:
        $r2 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidDate(org.spongycastle.jcajce.PKIXExtendedParameters)>($r0);

        return $r2;

        catch java.io.IOException from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.lang.IllegalArgumentException from label02 to label03 with label13;
        catch java.lang.IllegalArgumentException from label04 to label05 with label13;
        catch java.lang.IllegalArgumentException from label06 to label07 with label13;
        catch java.lang.IllegalArgumentException from label08 to label09 with label13;
        catch java.text.ParseException from label10 to label11 with label14;
    }
    protected static java.util.Date getValidDate(org.spongycastle.jcajce.PKIXExtendedParameters)
    {
        org.spongycastle.jcajce.PKIXExtendedParameters $r0;
        java.util.Date $r1;

        $r0 := @parameter0: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r1 = virtualinvoke $r0.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

        if $r1 != null goto label1;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

     label1:
        return $r1;
    }
    protected static boolean isAnyPolicy(java.util.Set)
    {
        java.util.Set $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Set;

        if $r0 == null goto label1;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>("2.5.29.32.0");

        if $z0 != 0 goto label1;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static boolean isDeltaCRL(java.security.cert.X509CRL)
    {
        java.security.cert.X509CRL $r0;
        java.util.Set $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.security.cert.X509CRL;

        $r1 = virtualinvoke $r0.<java.security.cert.X509CRL: java.util.Set getCriticalExtensionOIDs()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String DELTA_CRL_INDICATOR>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }
    protected static boolean isSelfIssued(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r0;
        java.security.Principal $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r2 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        $z0 = interfaceinvoke $r1.<java.security.Principal: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
    protected static void prepareNextCertB1(int, java.util.List[], java.lang.String, java.util.Map, java.security.cert.X509Certificate) throws org.spongycastle.jce.provider.AnnotatedException, java.security.cert.CertPathValidatorException
    {
        int $i0;
        java.util.List[] $r0;
        java.lang.String $r1, $r8, $r10;
        java.util.Map $r2;
        java.security.cert.X509Certificate $r3;
        org.spongycastle.jce.provider.PKIXPolicyNode r4, r18;
        boolean z0, $z1;
        java.util.List $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.util.Set $r9, $r16;
        org.spongycastle.asn1.ASN1Primitive $r11;
        org.spongycastle.asn1.ASN1Sequence $r12;
        java.util.Enumeration $r13;
        org.spongycastle.asn1.x509.PolicyInformation $r14;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r15;
        java.security.cert.PolicyNode $r17;
        java.util.ArrayList $r19;
        java.lang.Exception r20, r22;
        org.spongycastle.jce.provider.AnnotatedException $r21;
        java.security.cert.CertPathValidatorException r23;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r24;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.List[];

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.util.Map;

        $r3 := @parameter4: java.security.cert.X509Certificate;

        z0 = 0;

        $r5 = $r0[$i0];

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r7;

        $r8 = virtualinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label01;

        z0 = 1;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r9 = (java.util.Set) $r7;

        r4.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Set expectedPolicies> = $r9;

     label02:
        if z0 != 0 goto label15;

        $r5 = $r0[$i0];

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label15;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r7;

        $r8 = "2.5.29.32.0";

        $r10 = virtualinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if z0 == 0 goto label03;

        $r9 = null;

        $r8 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CERTIFICATE_POLICIES>;

     label04:
        $r11 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r3, $r8);

        $r12 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r11);

     label05:
        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label06:
        z0 = interfaceinvoke $r13.<java.util.Enumeration: boolean hasMoreElements()>();

        if z0 == 0 goto label10;

     label07:
        $r7 = interfaceinvoke $r13.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r14 = staticinvoke <org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r7);

     label08:
        $r8 = "2.5.29.32.0";

        $r15 = virtualinvoke $r14.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier()>();

        $r10 = virtualinvoke $r15.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if z0 == 0 goto label06;

     label09:
        $r12 = virtualinvoke $r14.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        $r9 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.spongycastle.asn1.ASN1Sequence)>($r12);

     label10:
        z0 = 0;

        $r16 = virtualinvoke $r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if $r16 == null goto label11;

        $r16 = virtualinvoke $r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        $r8 = <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.lang.String CERTIFICATE_POLICIES>;

        z0 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>($r8);

     label11:
        $r17 = virtualinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r18 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r17;

        $r8 = "2.5.29.32.0";

        $r10 = virtualinvoke r18.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label15;

        r4 = new org.spongycastle.jce.provider.PKIXPolicyNode;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r16 = (java.util.Set) $r7;

        specialinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r19, $i0, $r16, r18, $r9, $r1, z0);

        virtualinvoke r18.<org.spongycastle.jce.provider.PKIXPolicyNode: void addChild(org.spongycastle.jce.provider.PKIXPolicyNode)>(r4);

        $r5 = $r0[$i0];

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;

     label12:
        r20 := @caughtexception;

        $r21 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r21.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Certificate policies cannot be decoded.", r20);

        throw $r21;

     label13:
        r22 := @caughtexception;

        $r21 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r21.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Policy information cannot be decoded.", r22);

        throw $r21;

     label14:
        r23 := @caughtexception;

        $r24 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r24.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable)>("Policy qualifier info set could not be built.", r23);

        throw $r24;

     label15:
        return;

        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.security.cert.CertPathValidatorException from label09 to label10 with label14;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode prepareNextCertB2(int, java.util.List[], java.lang.String, org.spongycastle.jce.provider.PKIXPolicyNode)
    {
        int $i0, i1, i2, $i3;
        java.util.List[] $r0;
        java.lang.String $r1, $r7;
        java.util.List r2;
        org.spongycastle.jce.provider.PKIXPolicyNode $r3, r6, r9;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.security.cert.PolicyNode $r8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.List[];

        $r1 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.spongycastle.jce.provider.PKIXPolicyNode;

        r2 = $r0[$i0];

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r6.<org.spongycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r9 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r8;

        virtualinvoke r9.<org.spongycastle.jce.provider.PKIXPolicyNode: void removeChild(org.spongycastle.jce.provider.PKIXPolicyNode)>(r6);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        i1 = $i0 + -1;

     label2:
        if i1 < 0 goto label1;

        r2 = $r0[i1];

        i2 = 0;

     label3:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i2 >= $i3 goto label4;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        r6 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r5;

        $z0 = virtualinvoke r6.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 != 0 goto label5;

        r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r3, $r0, r6);

        $r3 = r6;

        if r6 != null goto label5;

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return $r3;
    }
    protected static boolean processCertD1i(int, java.util.List[], org.spongycastle.asn1.ASN1ObjectIdentifier, java.util.Set)
    {
        int $i0, $i1, $i2;
        java.util.List[] $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.util.Set $r2, $r8;
        org.spongycastle.jce.provider.PKIXPolicyNode r3, r7;
        java.util.HashSet r4;
        java.util.List r5;
        java.lang.Object $r6;
        java.lang.String $r9;
        boolean $z0;
        java.util.ArrayList $r10;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.List[];

        $r1 := @parameter2: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter3: java.util.Set;

        $i1 = $i0 + -1;

        r5 = $r0[$i1];

        $i1 = 0;

     label1:
        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i1 >= $i2 goto label3;

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i1);

        r7 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $r8 = virtualinvoke r7.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Set getExpectedPolicies()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        r4 = new java.util.HashSet;

        specialinvoke r4.<java.util.HashSet: void <init>()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r9);

        r3 = new org.spongycastle.jce.provider.PKIXPolicyNode;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        specialinvoke r3.<org.spongycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r10, $i0, r4, r7, $r2, $r9, 0);

        virtualinvoke r7.<org.spongycastle.jce.provider.PKIXPolicyNode: void addChild(org.spongycastle.jce.provider.PKIXPolicyNode)>(r3);

        r5 = $r0[$i0];

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    protected static void processCertD1ii(int, java.util.List[], org.spongycastle.asn1.ASN1ObjectIdentifier, java.util.Set)
    {
        int $i0, $i1, $i2;
        java.util.List[] $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.util.Set $r2;
        org.spongycastle.jce.provider.PKIXPolicyNode r3, r7;
        java.util.HashSet r4;
        java.util.List r5;
        java.lang.Object $r6;
        java.lang.String $r8, $r9;
        boolean $z0;
        java.util.ArrayList $r10;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.List[];

        $r1 := @parameter2: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter3: java.util.Set;

        $i1 = $i0 + -1;

        r5 = $r0[$i1];

        $i1 = 0;

     label1:
        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i1 >= $i2 goto label3;

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i1);

        r7 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $r8 = "2.5.29.32.0";

        $r9 = virtualinvoke r7.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        r4 = new java.util.HashSet;

        specialinvoke r4.<java.util.HashSet: void <init>()>();

        $r8 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

        r3 = new org.spongycastle.jce.provider.PKIXPolicyNode;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        specialinvoke r3.<org.spongycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r10, $i0, r4, r7, $r2, $r8, 0);

        virtualinvoke r7.<org.spongycastle.jce.provider.PKIXPolicyNode: void addChild(org.spongycastle.jce.provider.PKIXPolicyNode)>(r3);

        r5 = $r0[$i0];

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode, java.util.List[], org.spongycastle.jce.provider.PKIXPolicyNode)
    {
        java.lang.Object[] $r0;
        org.spongycastle.jce.provider.PKIXPolicyNode $r1, r3, r4;
        java.security.cert.PolicyNode $r2;
        int i0, $i1;
        java.util.ArrayList $r5;
        java.util.List[] $r6;

        r3 := @parameter0: org.spongycastle.jce.provider.PKIXPolicyNode;

        $r0 := @parameter1: java.util.List[];

        $r1 := @parameter2: org.spongycastle.jce.provider.PKIXPolicyNode;

        $r2 = virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r4 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        if r4 != null goto label4;

        i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r0[i0] = $r5;

        i0 = i0 + 1;

        goto label2;

     label3:
        return null;

     label4:
        virtualinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: void removeChild(org.spongycastle.jce.provider.PKIXPolicyNode)>($r1);

        $r6 = (java.util.List[]) $r0;

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void removePolicyNodeRecurse(java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r6, $r1);

        return r3;
    }
    private static void removePolicyNodeRecurse(java.util.List[], org.spongycastle.jce.provider.PKIXPolicyNode)
    {
        java.util.List[] $r0;
        org.spongycastle.jce.provider.PKIXPolicyNode $r1;
        int $i0;
        java.util.List $r2;
        boolean $z0;
        java.util.Iterator $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: java.util.List[];

        $r1 := @parameter1: org.spongycastle.jce.provider.PKIXPolicyNode;

        $i0 = virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXPolicyNode: int getDepth()>();

        $r2 = $r0[$i0];

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r4;

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void removePolicyNodeRecurse(java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r0, $r1);

        goto label1;

     label2:
        return;
    }
    protected static void verifyX509Certificate(java.security.cert.X509Certificate, java.security.PublicKey, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate $r0;
        java.security.PublicKey $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.security.PublicKey;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        virtualinvoke $r0.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r1);

        return;

     label1:
        virtualinvoke $r0.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.lang.String)>($r1, $r2);

        return;
    }
