org.spongycastle.jce.provider.RFC3280CertPathUtilities extends java.lang.Object
public static final java.lang.String ANY_POLICY
public static final java.lang.String AUTHORITY_KEY_IDENTIFIER
public static final java.lang.String BASIC_CONSTRAINTS
public static final java.lang.String CERTIFICATE_POLICIES
public static final java.lang.String CRL_DISTRIBUTION_POINTS
public static final java.lang.String CRL_NUMBER
protected static final int CRL_SIGN
private static final org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL
public static final java.lang.String DELTA_CRL_INDICATOR
public static final java.lang.String FRESHEST_CRL
public static final java.lang.String INHIBIT_ANY_POLICY
public static final java.lang.String ISSUING_DISTRIBUTION_POINT
protected static final int KEY_CERT_SIGN
public static final java.lang.String KEY_USAGE
public static final java.lang.String NAME_CONSTRAINTS
public static final java.lang.String POLICY_CONSTRAINTS
public static final java.lang.String POLICY_MAPPINGS
public static final java.lang.String SUBJECT_ALTERNATIVE_NAME
protected static final java.lang.String[] crlReasons
    static void <clinit>()
    {
        org.spongycastle.jce.provider.PKIXCRLUtil $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        $r0 = new org.spongycastle.jce.provider.PKIXCRLUtil;

        specialinvoke $r0.<org.spongycastle.jce.provider.PKIXCRLUtil: void <init>()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL> = $r0;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier certificatePolicies>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier policyMappings>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String INHIBIT_ANY_POLICY> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier freshestCRL>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String DELTA_CRL_INDICATOR> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier policyConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier basicConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_DISTRIBUTION_POINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String SUBJECT_ALTERNATIVE_NAME> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier nameConstraints>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String NAME_CONSTRAINTS> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier keyUsage>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String KEY_USAGE> = $r2;

        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier cRLNumber>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_NUMBER> = $r2;

        $r3 = newarray (java.lang.String)[11];

        $r3[0] = "unspecified";

        $r3[1] = "keyCompromise";

        $r3[2] = "cACompromise";

        $r3[3] = "affiliationChanged";

        $r3[4] = "superseded";

        $r3[5] = "cessationOfOperation";

        $r3[6] = "certificateHold";

        $r3[7] = "unknown";

        $r3[8] = "removeFromCRL";

        $r3[9] = "privilegeWithdrawn";

        $r3[10] = "aACompromise";

        <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String[] crlReasons> = $r3;

        return;
    }
    void <init>()
    {
        org.spongycastle.jce.provider.RFC3280CertPathUtilities r0;

        r0 := @this: org.spongycastle.jce.provider.RFC3280CertPathUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void checkCRL(org.spongycastle.asn1.x509.DistributionPoint, org.spongycastle.jcajce.PKIXExtendedParameters, java.security.cert.X509Certificate, java.util.Date, java.security.cert.X509Certificate, java.security.PublicKey, org.spongycastle.jce.provider.CertStatus, org.spongycastle.jce.provider.ReasonsMask, java.util.List, org.spongycastle.jcajce.util.JcaJceHelper) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.DistributionPoint $r0;
        org.spongycastle.jcajce.PKIXExtendedParameters $r1;
        java.security.cert.X509Certificate $r2, $r4;
        java.util.Date $r3, r10, r19, $r20;
        java.security.PublicKey $r5, $r17;
        org.spongycastle.jce.provider.CertStatus $r6;
        org.spongycastle.jce.provider.ReasonsMask $r7, $r16;
        java.util.List $r8, $r21, $r22;
        org.spongycastle.jcajce.util.JcaJceHelper $r9;
        org.spongycastle.jce.provider.AnnotatedException r11;
        long $l0, $l1;
        byte $b2;
        java.util.Set $r12;
        boolean z0, $z1;
        java.util.Iterator $r13;
        int $i3;
        java.lang.Object $r14;
        java.security.cert.X509CRL r15, r18;
        java.util.HashSet r23;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r24;
        java.lang.String $r25;

        $r0 := @parameter0: org.spongycastle.asn1.x509.DistributionPoint;

        $r1 := @parameter1: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r2 := @parameter2: java.security.cert.X509Certificate;

        $r3 := @parameter3: java.util.Date;

        $r4 := @parameter4: java.security.cert.X509Certificate;

        $r5 := @parameter5: java.security.PublicKey;

        $r6 := @parameter6: org.spongycastle.jce.provider.CertStatus;

        $r7 := @parameter7: org.spongycastle.jce.provider.ReasonsMask;

        $r8 := @parameter8: java.util.List;

        $r9 := @parameter9: org.spongycastle.jcajce.util.JcaJceHelper;

        r10 = new java.util.Date;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r10.<java.util.Date: void <init>(long)>($l0);

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r10.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label01;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Validation time is in future.");

        throw r11;

     label01:
        $r12 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getCompleteCRLs(org.spongycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.spongycastle.jcajce.PKIXExtendedParameters)>($r0, $r2, r10, $r1);

        z0 = 0;

        r11 = null;

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label44;

        $i3 = virtualinvoke $r6.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i3 != 11 goto label44;

        $z1 = virtualinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z1 != 0 goto label44;

     label03:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

     label04:
        r15 = (java.security.cert.X509CRL) $r14;

     label05:
        $r16 = staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: org.spongycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL,org.spongycastle.asn1.x509.DistributionPoint)>(r15, $r0);

        $z1 = virtualinvoke $r16.<org.spongycastle.jce.provider.ReasonsMask: boolean hasNewReasons(org.spongycastle.jce.provider.ReasonsMask)>($r7);

     label06:
        if $z1 == 0 goto label02;

     label07:
        $r12 = staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.spongycastle.jcajce.PKIXExtendedParameters,java.util.List,org.spongycastle.jcajce.util.JcaJceHelper)>(r15, $r2, $r4, $r5, $r1, $r8, $r9);

        $r17 = staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.security.PublicKey processCRLG(java.security.cert.X509CRL,java.util.Set)>(r15, $r12);

     label08:
        r18 = null;

        r19 = r10;

     label09:
        $r20 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

     label10:
        if $r20 == null goto label12;

     label11:
        r19 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

     label12:
        $z1 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isUseDeltasEnabled()>();

     label13:
        if $z1 == 0 goto label15;

     label14:
        $r21 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r22 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCRLStores()>();

        $r12 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,java.security.cert.X509CRL,java.util.List,java.util.List)>(r19, r15, $r21, $r22);

        r18 = staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.security.cert.X509CRL processCRLH(java.util.Set,java.security.PublicKey)>($r12, $r17);

     label15:
        $i3 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: int getValidityModel()>();

     label16:
        if $i3 == 1 goto label21;

     label17:
        r19 = virtualinvoke $r2.<java.security.cert.X509Certificate: java.util.Date getNotAfter()>();

        $l0 = virtualinvoke r19.<java.util.Date: long getTime()>();

        r19 = virtualinvoke r15.<java.security.cert.X509CRL: java.util.Date getThisUpdate()>();

        $l1 = virtualinvoke r19.<java.util.Date: long getTime()>();

     label18:
        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label21;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

     label19:
        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No valid CRL for current time found.");

        throw r11;

     label20:
        r11 := @caughtexception;

        goto label02;

     label21:
        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void processCRLB1(org.spongycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL)>($r0, $r2, r15);

        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void processCRLB2(org.spongycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL)>($r0, $r2, r15);

        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.spongycastle.jcajce.PKIXExtendedParameters)>(r18, r15, $r1);

        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.spongycastle.jce.provider.CertStatus,org.spongycastle.jcajce.PKIXExtendedParameters)>($r3, r18, $r2, $r6, $r1);

        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void processCRLJ(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.spongycastle.jce.provider.CertStatus)>($r3, r15, $r2, $r6);

        $i3 = virtualinvoke $r6.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

     label22:
        if $i3 != 8 goto label24;

     label23:
        virtualinvoke $r6.<org.spongycastle.jce.provider.CertStatus: void setCertStatus(int)>(11);

     label24:
        virtualinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: void addReasons(org.spongycastle.jce.provider.ReasonsMask)>($r16);

        $r12 = virtualinvoke r15.<java.security.cert.X509CRL: java.util.Set getCriticalExtensionOIDs()>();

     label25:
        if $r12 == null goto label33;

        r23 = new java.util.HashSet;

     label26:
        specialinvoke r23.<java.util.HashSet: void <init>(java.util.Collection)>($r12);

     label27:
        $r24 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint>;

     label28:
        $r25 = virtualinvoke $r24.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r23.<java.util.Set: boolean remove(java.lang.Object)>($r25);

     label29:
        $r24 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator>;

     label30:
        $r25 = virtualinvoke $r24.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r23.<java.util.Set: boolean remove(java.lang.Object)>($r25);

        $z1 = interfaceinvoke r23.<java.util.Set: boolean isEmpty()>();

     label31:
        if $z1 != 0 goto label33;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

     label32:
        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL contains unsupported critical extensions.");

        throw r11;

     label33:
        if r18 == null goto label43;

     label34:
        $r12 = virtualinvoke r18.<java.security.cert.X509CRL: java.util.Set getCriticalExtensionOIDs()>();

     label35:
        if $r12 == null goto label43;

        r23 = new java.util.HashSet;

     label36:
        specialinvoke r23.<java.util.HashSet: void <init>(java.util.Collection)>($r12);

     label37:
        $r24 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint>;

     label38:
        $r25 = virtualinvoke $r24.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r23.<java.util.Set: boolean remove(java.lang.Object)>($r25);

     label39:
        $r24 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator>;

     label40:
        $r25 = virtualinvoke $r24.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r23.<java.util.Set: boolean remove(java.lang.Object)>($r25);

        $z1 = interfaceinvoke r23.<java.util.Set: boolean isEmpty()>();

     label41:
        if $z1 != 0 goto label43;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

     label42:
        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL contains unsupported critical extension.");

        throw r11;

     label43:
        z0 = 1;

        goto label02;

     label44:
        if z0 != 0 goto label45;

        throw r11;

     label45:
        return;

        catch org.spongycastle.jce.provider.AnnotatedException from label03 to label04 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label05 to label06 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label07 to label08 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label09 to label10 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label11 to label12 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label12 to label13 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label14 to label15 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label15 to label16 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label17 to label18 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label19 to label20 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label21 to label22 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label23 to label25 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label26 to label27 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label28 to label29 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label30 to label31 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label32 to label33 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label34 to label35 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label36 to label37 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label38 to label39 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label40 to label41 with label20;
        catch org.spongycastle.jce.provider.AnnotatedException from label42 to label43 with label20;
    }
    protected static void checkCRLs(org.spongycastle.jcajce.PKIXExtendedParameters, java.security.cert.X509Certificate, java.util.Date, java.security.cert.X509Certificate, java.security.PublicKey, java.util.List, org.spongycastle.jcajce.util.JcaJceHelper) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.jcajce.PKIXExtendedParameters $r0, $r22;
        java.security.cert.X509Certificate $r1, $r3;
        java.util.Date $r2;
        java.security.PublicKey $r4;
        java.util.List $r5, $r16;
        org.spongycastle.jcajce.util.JcaJceHelper $r6;
        org.spongycastle.jce.provider.CertStatus r7;
        org.spongycastle.jce.provider.ReasonsMask r8;
        java.text.SimpleDateFormat r9;
        org.spongycastle.jcajce.PKIXExtendedParameters$Builder r10;
        org.spongycastle.jce.provider.AnnotatedException r11, $r20, r33;
        java.lang.String $r12;
        org.spongycastle.asn1.ASN1Primitive $r13;
        org.spongycastle.asn1.x509.CRLDistPoint $r14;
        java.util.Map $r15;
        java.util.Iterator $r17;
        boolean $z0, $z1;
        java.lang.Object $r18;
        org.spongycastle.jcajce.PKIXCRLStore $r19;
        java.lang.Exception r21, r25, r32;
        org.spongycastle.asn1.x509.DistributionPoint[] $r23;
        int i0, $i1;
        org.spongycastle.asn1.x509.DistributionPoint $r24;
        org.spongycastle.asn1.ASN1InputStream $r26;
        org.spongycastle.asn1.x500.X500Name $r27;
        byte[] $r28;
        org.spongycastle.asn1.x509.DistributionPointName $r29;
        org.spongycastle.asn1.x509.GeneralNames $r30;
        org.spongycastle.asn1.x509.GeneralName $r31;
        java.util.TimeZone $r34;
        java.lang.StringBuilder $r35;
        java.lang.String[] $r36;

        $r0 := @parameter0: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r1 := @parameter1: java.security.cert.X509Certificate;

        $r2 := @parameter2: java.util.Date;

        $r3 := @parameter3: java.security.cert.X509Certificate;

        $r4 := @parameter4: java.security.PublicKey;

        $r5 := @parameter5: java.util.List;

        $r6 := @parameter6: org.spongycastle.jcajce.util.JcaJceHelper;

        r11 = null;

        $r12 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CRL_DISTRIBUTION_POINTS>;

     label01:
        $r13 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r1, $r12);

        $r14 = staticinvoke <org.spongycastle.asn1.x509.CRLDistPoint: org.spongycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r13);

     label02:
        r10 = new org.spongycastle.jcajce.PKIXExtendedParameters$Builder;

        specialinvoke r10.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: void <init>(org.spongycastle.jcajce.PKIXExtendedParameters)>($r0);

     label03:
        $r15 = virtualinvoke $r0.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Map getNamedCRLStoreMap()>();

        $r16 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.List getAdditionalStoresFromCRLDistributionPoint(org.spongycastle.asn1.x509.CRLDistPoint,java.util.Map)>($r14, $r15);

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 == 0 goto label12;

     label06:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

     label07:
        $r19 = (org.spongycastle.jcajce.PKIXCRLStore) $r18;

     label08:
        virtualinvoke r10.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: org.spongycastle.jcajce.PKIXExtendedParameters$Builder addCRLStore(org.spongycastle.jcajce.PKIXCRLStore)>($r19);

     label09:
        goto label04;

     label10:
        r11 := @caughtexception;

        $r20 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No additional CRL locations could be decoded from CRL distribution point extension.", r11);

        throw $r20;

     label11:
        r21 := @caughtexception;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL distribution point extension could not be read.", r21);

        throw r11;

     label12:
        r7 = new org.spongycastle.jce.provider.CertStatus;

        specialinvoke r7.<org.spongycastle.jce.provider.CertStatus: void <init>()>();

        r8 = new org.spongycastle.jce.provider.ReasonsMask;

        specialinvoke r8.<org.spongycastle.jce.provider.ReasonsMask: void <init>()>();

        $r22 = virtualinvoke r10.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: org.spongycastle.jcajce.PKIXExtendedParameters build()>();

        $z0 = 0;

        if $r14 == null goto label21;

     label13:
        $r23 = virtualinvoke $r14.<org.spongycastle.asn1.x509.CRLDistPoint: org.spongycastle.asn1.x509.DistributionPoint[] getDistributionPoints()>();

     label14:
        if $r23 == null goto label21;

        i0 = 0;

     label15:
        $i1 = lengthof $r23;

        if i0 >= $i1 goto label21;

        $i1 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i1 != 11 goto label21;

        $z1 = virtualinvoke r8.<org.spongycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z1 != 0 goto label21;

        $r24 = $r23[i0];

     label16:
        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void checkCRL(org.spongycastle.asn1.x509.DistributionPoint,org.spongycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.spongycastle.jce.provider.CertStatus,org.spongycastle.jce.provider.ReasonsMask,java.util.List,org.spongycastle.jcajce.util.JcaJceHelper)>($r24, $r22, $r1, $r2, $r3, $r4, r7, r8, $r5, $r6);

     label17:
        $z0 = 1;

     label18:
        i0 = i0 + 1;

        goto label15;

     label19:
        r25 := @caughtexception;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Distribution points could not be read.", r25);

        throw r11;

     label20:
        $r20 := @caughtexception;

        r11 = $r20;

        goto label18;

     label21:
        i0 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if i0 != 11 goto label28;

        $z1 = virtualinvoke r8.<org.spongycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z1 != 0 goto label28;

        $r26 = new org.spongycastle.asn1.ASN1InputStream;

     label22:
        $r27 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r1);

        $r28 = virtualinvoke $r27.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        specialinvoke $r26.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r28);

        $r13 = virtualinvoke $r26.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

     label23:
        $r24 = new org.spongycastle.asn1.x509.DistributionPoint;

        $r29 = new org.spongycastle.asn1.x509.DistributionPointName;

        $r30 = new org.spongycastle.asn1.x509.GeneralNames;

        $r31 = new org.spongycastle.asn1.x509.GeneralName;

     label24:
        specialinvoke $r31.<org.spongycastle.asn1.x509.GeneralName: void <init>(int,org.spongycastle.asn1.ASN1Encodable)>(4, $r13);

        specialinvoke $r30.<org.spongycastle.asn1.x509.GeneralNames: void <init>(org.spongycastle.asn1.x509.GeneralName)>($r31);

        specialinvoke $r29.<org.spongycastle.asn1.x509.DistributionPointName: void <init>(int,org.spongycastle.asn1.ASN1Encodable)>(0, $r30);

        specialinvoke $r24.<org.spongycastle.asn1.x509.DistributionPoint: void <init>(org.spongycastle.asn1.x509.DistributionPointName,org.spongycastle.asn1.x509.ReasonFlags,org.spongycastle.asn1.x509.GeneralNames)>($r29, null, null);

        $r18 = virtualinvoke $r0.<org.spongycastle.jcajce.PKIXExtendedParameters: java.lang.Object clone()>();

     label25:
        $r0 = (org.spongycastle.jcajce.PKIXExtendedParameters) $r18;

     label26:
        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void checkCRL(org.spongycastle.asn1.x509.DistributionPoint,org.spongycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.spongycastle.jce.provider.CertStatus,org.spongycastle.jce.provider.ReasonsMask,java.util.List,org.spongycastle.jcajce.util.JcaJceHelper)>($r24, $r0, $r1, $r2, $r3, $r4, r7, r8, $r5, $r6);

     label27:
        $z0 = 1;

     label28:
        if $z0 != 0 goto label33;

        $z0 = r11 instanceof org.spongycastle.jce.provider.AnnotatedException;

        if $z0 == 0 goto label32;

        throw r11;

     label29:
        r32 := @caughtexception;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

     label30:
        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuer from certificate for CRL could not be reencoded.", r32);

        throw r11;

     label31:
        r33 := @caughtexception;

        r11 = r33;

        goto label28;

     label32:
        $r20 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r20.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No valid CRL found.", r11);

        throw $r20;

     label33:
        i0 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if i0 == 11 goto label34;

        r9 = new java.text.SimpleDateFormat;

        specialinvoke r9.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss Z");

        $r34 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke r9.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate revocation after ");

        $r2 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: java.util.Date getRevocationDate()>();

        $r12 = virtualinvoke r9.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r2);

        $r35 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r35 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason: ");

        $r36 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String[] crlReasons>;

        i0 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        $r12 = $r36[i0];

        $r35 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>($r12);

        throw r11;

     label34:
        $z0 = virtualinvoke r8.<org.spongycastle.jce.provider.ReasonsMask: boolean isAllReasons()>();

        if $z0 != 0 goto label35;

        i0 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if i0 != 11 goto label35;

        virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: void setCertStatus(int)>(12);

     label35:
        i0 = virtualinvoke r7.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if i0 != 12 goto label36;

        r11 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r11.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Certificate status could not be determined.");

        throw r11;

     label36:
        return;

        catch java.lang.Exception from label01 to label02 with label11;
        catch org.spongycastle.jce.provider.AnnotatedException from label03 to label05 with label10;
        catch org.spongycastle.jce.provider.AnnotatedException from label06 to label07 with label10;
        catch org.spongycastle.jce.provider.AnnotatedException from label08 to label09 with label10;
        catch java.lang.Exception from label13 to label14 with label19;
        catch org.spongycastle.jce.provider.AnnotatedException from label16 to label17 with label20;
        catch java.lang.Exception from label22 to label23 with label29;
        catch org.spongycastle.jce.provider.AnnotatedException from label24 to label25 with label31;
        catch org.spongycastle.jce.provider.AnnotatedException from label26 to label27 with label31;
        catch org.spongycastle.jce.provider.AnnotatedException from label30 to label31 with label31;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode prepareCertB(java.security.cert.CertPath, int, java.util.List[], org.spongycastle.jce.provider.PKIXPolicyNode, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1, i2, i3, $i4, $i5;
        java.util.List[] $r1;
        org.spongycastle.jce.provider.PKIXPolicyNode $r2, r11, r27;
        java.util.HashMap r3;
        java.util.List r4;
        java.util.HashSet r5, r16;
        java.lang.Object $r6;
        java.security.cert.X509Certificate r7;
        java.lang.String $r8, $r15, $r22;
        org.spongycastle.asn1.ASN1Primitive $r9;
        org.spongycastle.asn1.ASN1Sequence $r10, r13;
        org.spongycastle.asn1.ASN1Encodable $r12;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r14;
        boolean $z0, $z1;
        org.spongycastle.jce.provider.AnnotatedException r17, r29;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r18;
        java.util.Set r19, $r25;
        java.util.Iterator $r20, $r21;
        java.util.Enumeration $r23;
        org.spongycastle.asn1.x509.PolicyInformation $r24;
        java.security.cert.PolicyNode $r26;
        java.util.ArrayList $r28;
        java.lang.Exception r30;
        java.security.cert.CertPathValidatorException $r31;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.List[];

        $r2 := @parameter3: org.spongycastle.jce.provider.PKIXPolicyNode;

        $i1 := @parameter4: int;

        r4 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i0);

        r7 = (java.security.cert.X509Certificate) $r6;

        i2 = interfaceinvoke r4.<java.util.List: int size()>();

        i2 = i2 - $i0;

        $r8 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS>;

     label01:
        $r9 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r7, $r8);

        $r10 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r9);

     label02:
        r11 = $r2;

        if $r10 == null goto label29;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

        i3 = 0;

     label03:
        $i4 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i3 >= $i4 goto label07;

        $r12 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i3);

        r13 = (org.spongycastle.asn1.ASN1Sequence) $r12;

        $r12 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r14 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r12;

        $r8 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r12 = virtualinvoke r13.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r14 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r12;

        $r15 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z0 != 0 goto label06;

        r16 = new java.util.HashSet;

        specialinvoke r16.<java.util.HashSet: void <init>()>();

        interfaceinvoke r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r16);

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        r17 := @caughtexception;

        $r18 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r18.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension could not be decoded.", r17, $r0, $i0);

        throw $r18;

     label06:
        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r19 = (java.util.Set) $r6;

        interfaceinvoke r19.<java.util.Set: boolean add(java.lang.Object)>($r15);

        goto label04;

     label07:
        $r20 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label30;

        $r6 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r6;

        if $i1 <= 0 goto label23;

        $z0 = 0;

        r4 = $r1[i2];

        $r21 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r6 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $r15 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label09;

        $z0 = 1;

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r19 = (java.util.Set) $r6;

        $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Set expectedPolicies> = r19;

     label10:
        if $z0 != 0 goto label08;

        r4 = $r1[i2];

        $r21 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $r15 = "2.5.29.32.0";

        $r22 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z0 == 0 goto label11;

        r19 = null;

        $r15 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

     label12:
        $r9 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r7, $r15);

     label13:
        $r10 = (org.spongycastle.asn1.ASN1Sequence) $r9;

        $r23 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label14:
        $z0 = interfaceinvoke $r23.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label18;

     label15:
        $r6 = interfaceinvoke $r23.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r24 = staticinvoke <org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r6);

     label16:
        $r15 = "2.5.29.32.0";

        $r14 = virtualinvoke $r24.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier()>();

        $r22 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z0 == 0 goto label14;

     label17:
        $r10 = virtualinvoke $r24.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        r19 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.spongycastle.asn1.ASN1Sequence)>($r10);

     label18:
        $z0 = 0;

        $r25 = virtualinvoke r7.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if $r25 == null goto label19;

        $r25 = virtualinvoke r7.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        $r15 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $z0 = interfaceinvoke $r25.<java.util.Set: boolean contains(java.lang.Object)>($r15);

     label19:
        $r26 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r27 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r26;

        $r15 = "2.5.29.32.0";

        $r22 = virtualinvoke r27.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z1 == 0 goto label08;

        $r2 = new org.spongycastle.jce.provider.PKIXPolicyNode;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r25 = (java.util.Set) $r6;

        specialinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r28, i2, $r25, r27, r19, $r8, $z0);

        virtualinvoke r27.<org.spongycastle.jce.provider.PKIXPolicyNode: void addChild(org.spongycastle.jce.provider.PKIXPolicyNode)>($r2);

        r4 = $r1[i2];

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label08;

     label20:
        r29 := @caughtexception;

        $r18 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r18.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Certificate policies extension could not be decoded.", r29, $r0, $i0);

        throw $r18;

     label21:
        r30 := @caughtexception;

        $r31 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r31.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy information could not be decoded.", r30, $r0, $i0);

        throw $r31;

     label22:
        $r31 := @caughtexception;

        $r18 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r18.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy qualifier info set could not be decoded.", $r31, $r0, $i0);

        throw $r18;

     label23:
        if $i1 > 0 goto label08;

        r4 = $r1[i2];

        $r21 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $r15 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label24;

        $r26 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: java.security.cert.PolicyNode getParent()>();

        r27 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r26;

        virtualinvoke r27.<org.spongycastle.jce.provider.PKIXPolicyNode: void removeChild(org.spongycastle.jce.provider.PKIXPolicyNode)>($r2);

        interfaceinvoke $r21.<java.util.Iterator: void remove()>();

        i3 = i2 + -1;

     label25:
        if i3 < 0 goto label24;

        r4 = $r1[i3];

        $i4 = 0;

     label26:
        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i4 >= $i5 goto label27;

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i4);

        $r2 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r6;

        $z0 = virtualinvoke $r2.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 != 0 goto label28;

        $r2 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>(r11, $r1, $r2);

        r11 = $r2;

        if $r2 != null goto label28;

     label27:
        i3 = i3 + -1;

        goto label25;

     label28:
        $i4 = $i4 + 1;

        goto label26;

     label29:
        return $r2;

     label30:
        return r11;

        catch org.spongycastle.jce.provider.AnnotatedException from label01 to label02 with label05;
        catch org.spongycastle.jce.provider.AnnotatedException from label12 to label13 with label20;
        catch java.lang.Exception from label15 to label16 with label21;
        catch java.security.cert.CertPathValidatorException from label17 to label18 with label22;
    }
    protected static void prepareNextCertA(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, i1, $i2;
        java.lang.Exception r1;
        org.spongycastle.jce.provider.AnnotatedException r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.security.cert.X509Certificate r5;
        java.lang.String $r6, $r13;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.ASN1Sequence $r8, $r10;
        org.spongycastle.asn1.ASN1Encodable $r9;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r11, $r12;
        boolean $z0;
        java.security.cert.CertPathValidatorException $r14;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r15;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r3 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (java.security.cert.X509Certificate) $r4;

        $r6 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_MAPPINGS>;

     label01:
        $r7 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r5, $r6);

        $r8 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

     label02:
        if $r8 == null goto label10;

        i1 = 0;

     label03:
        $i2 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i1 >= $i2 goto label10;

     label04:
        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i1);

        $r10 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r9);

        $r9 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r11 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r9);

        $r9 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r12 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r9);

     label05:
        $r6 = "2.5.29.32.0";

        $r13 = virtualinvoke $r11.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label08;

        $r14 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r14.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("IssuerDomainPolicy is anyPolicy", null, $r0, $i0);

        throw $r14;

     label06:
        r2 := @caughtexception;

        $r15 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension could not be decoded.", r2, $r0, $i0);

        throw $r15;

     label07:
        r1 := @caughtexception;

        $r15 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r15.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy mappings extension contents could not be decoded.", r1, $r0, $i0);

        throw $r15;

     label08:
        $r6 = "2.5.29.32.0";

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label09;

        $r14 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r14.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("SubjectDomainPolicy is anyPolicy,", null, $r0, $i0);

        throw $r14;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        return;

        catch org.spongycastle.jce.provider.AnnotatedException from label01 to label02 with label06;
        catch java.lang.Exception from label04 to label05 with label07;
    }
    protected static void prepareNextCertG(java.security.cert.CertPath, int, org.spongycastle.jce.provider.PKIXNameConstraintValidator) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, i1, $i2;
        org.spongycastle.jce.provider.PKIXNameConstraintValidator $r1;
        java.lang.Exception r2, r13, r14;
        java.util.List $r3;
        java.lang.Object $r4;
        java.security.cert.X509Certificate r5;
        org.spongycastle.asn1.x509.NameConstraints r6;
        java.lang.String $r7;
        org.spongycastle.asn1.ASN1Primitive $r8;
        org.spongycastle.asn1.ASN1Sequence $r9;
        org.spongycastle.asn1.x509.GeneralSubtree[] $r10;
        org.spongycastle.asn1.x509.GeneralSubtree $r11;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r12;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.spongycastle.jce.provider.PKIXNameConstraintValidator;

        $r3 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (java.security.cert.X509Certificate) $r4;

        r6 = null;

        $r7 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String NAME_CONSTRAINTS>;

     label01:
        $r8 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r5, $r7);

        $r9 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r8);

     label02:
        if $r9 == null goto label04;

     label03:
        r6 = staticinvoke <org.spongycastle.asn1.x509.NameConstraints: org.spongycastle.asn1.x509.NameConstraints getInstance(java.lang.Object)>($r9);

     label04:
        if r6 == null goto label13;

        $r10 = virtualinvoke r6.<org.spongycastle.asn1.x509.NameConstraints: org.spongycastle.asn1.x509.GeneralSubtree[] getPermittedSubtrees()>();

        if $r10 == null goto label06;

     label05:
        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void intersectPermittedSubtree(org.spongycastle.asn1.x509.GeneralSubtree[])>($r10);

     label06:
        $r10 = virtualinvoke r6.<org.spongycastle.asn1.x509.NameConstraints: org.spongycastle.asn1.x509.GeneralSubtree[] getExcludedSubtrees()>();

        if $r10 == null goto label13;

        i1 = 0;

     label07:
        $i2 = lengthof $r10;

        if i1 == $i2 goto label13;

     label08:
        $r11 = $r10[i1];

        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void addExcludedSubtree(org.spongycastle.asn1.x509.GeneralSubtree)>($r11);

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        r2 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Name constraints extension could not be decoded.", r2, $r0, $i0);

        throw $r12;

     label11:
        r13 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Permitted subtrees cannot be build from name constraints extension.", r13, $r0, $i0);

        throw $r12;

     label12:
        r14 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Excluded subtrees cannot be build from name constraints extension.", r14, $r0, $i0);

        throw $r12;

     label13:
        return;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label08 to label09 with label12;
    }
    protected static int prepareNextCertH1(java.security.cert.CertPath, int, int)
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        boolean $z0;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if $i1 == 0 goto label1;

        $i0 = $i1 + -1;

        return $i0;

     label1:
        return $i1;
    }
    protected static int prepareNextCertH2(java.security.cert.CertPath, int, int)
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        boolean $z0;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if $i1 == 0 goto label1;

        $i0 = $i1 + -1;

        return $i0;

     label1:
        return $i1;
    }
    protected static int prepareNextCertH3(java.security.cert.CertPath, int, int)
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        boolean $z0;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label1;

        if $i1 == 0 goto label1;

        $i0 = $i1 + -1;

        return $i0;

     label1:
        return $i1;
    }
    protected static int prepareNextCertI1(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.ASN1Sequence $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        org.spongycastle.asn1.ASN1TaggedObject $r8;
        org.spongycastle.asn1.ASN1Integer $r9;
        java.math.BigInteger $r10;
        java.lang.Exception r11;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r12;
        java.lang.IllegalArgumentException r13;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

     label01:
        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        if $r6 == null goto label10;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label03:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

     label04:
        $r2 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1TaggedObject: org.spongycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1TaggedObject: int getTagNo()>();

     label05:
        if $i2 != 0 goto label03;

     label06:
        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r8, 0);

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i2 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

     label07:
        if $i2 >= $i1 goto label10;

        return $i2;

     label08:
        r11 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension cannot be decoded.", r11, $r0, $i0);

        throw $r12;

     label09:
        r13 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension contents cannot be decoded.", r13, $r0, $i0);

        throw $r12;

     label10:
        return $i1;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label04 to label05 with label09;
        catch java.lang.IllegalArgumentException from label06 to label07 with label09;
    }
    protected static int prepareNextCertI2(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.ASN1Sequence $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        org.spongycastle.asn1.ASN1TaggedObject $r8;
        org.spongycastle.asn1.ASN1Integer $r9;
        java.math.BigInteger $r10;
        java.lang.Exception r11;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r12;
        java.lang.IllegalArgumentException r13;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

     label01:
        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label02:
        if $r6 == null goto label10;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label03:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

     label04:
        $r2 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1TaggedObject: org.spongycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1TaggedObject: int getTagNo()>();

     label05:
        if $i2 != 1 goto label03;

     label06:
        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r8, 0);

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i2 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

     label07:
        if $i2 >= $i1 goto label10;

        return $i2;

     label08:
        r11 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension cannot be decoded.", r11, $r0, $i0);

        throw $r12;

     label09:
        r13 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints extension contents cannot be decoded.", r13, $r0, $i0);

        throw $r12;

     label10:
        return $i1;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label04 to label05 with label09;
        catch java.lang.IllegalArgumentException from label06 to label07 with label09;
    }
    protected static int prepareNextCertJ(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.lang.Exception r1;
        java.util.List $r2;
        java.lang.Object $r3;
        java.security.cert.X509Certificate r4;
        java.lang.String $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        org.spongycastle.asn1.ASN1Integer $r7;
        java.math.BigInteger $r8;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r9;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String INHIBIT_ANY_POLICY>;

     label1:
        $r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r4, $r5);

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r6);

     label2:
        if $r7 == null goto label4;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        if $i0 >= $i1 goto label4;

        return $i0;

     label3:
        r1 := @caughtexception;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Inhibit any-policy extension cannot be decoded.", r1, $r0, $i0);

        throw $r9;

     label4:
        return $i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected static void prepareNextCertK(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0;
        java.lang.Exception r1;
        java.util.List $r2;
        java.lang.Object $r3;
        java.security.cert.X509Certificate r4;
        java.lang.String $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        org.spongycastle.asn1.x509.BasicConstraints $r7;
        boolean $z0;
        java.security.cert.CertPathValidatorException $r8;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r9;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

     label1:
        $r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r4, $r5);

        $r7 = staticinvoke <org.spongycastle.asn1.x509.BasicConstraints: org.spongycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r6);

     label2:
        if $r7 == null goto label4;

        $z0 = virtualinvoke $r7.<org.spongycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z0 != 0 goto label5;

        $r8 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r8.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Not a CA certificate");

        throw $r8;

     label3:
        r1 := @caughtexception;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Basic constraints extension cannot be decoded.", r1, $r0, $i0);

        throw $r9;

     label4:
        $r8 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r8.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Intermediate certificate lacks BasicConstraints");

        throw $r8;

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected static int prepareNextCertL(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        boolean $z0;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r4;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r3);

        if $z0 != 0 goto label2;

        if $i1 > 0 goto label1;

        $r4 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r4.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Max path length not greater than zero", null, $r0, $i0);

        throw $r4;

     label1:
        $i0 = $i1 + -1;

        return $i0;

     label2:
        return $i1;
    }
    protected static int prepareNextCertM(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        java.lang.Exception r1;
        java.util.List $r2;
        java.lang.Object $r3;
        java.security.cert.X509Certificate r4;
        java.lang.String $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        org.spongycastle.asn1.x509.BasicConstraints $r7;
        java.math.BigInteger $r8;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r9;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

     label1:
        $r6 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r4, $r5);

        $r7 = staticinvoke <org.spongycastle.asn1.x509.BasicConstraints: org.spongycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r6);

     label2:
        if $r7 == null goto label4;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.x509.BasicConstraints: java.math.BigInteger getPathLenConstraint()>();

        if $r8 == null goto label4;

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        if $i0 >= $i1 goto label4;

        return $i0;

     label3:
        r1 := @caughtexception;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Basic constraints extension cannot be decoded.", r1, $r0, $i0);

        throw $r9;

     label4:
        return $i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected static void prepareNextCertN(java.security.cert.CertPath, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        boolean[] $r4;
        boolean $z0;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r5;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = virtualinvoke r3.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if $r4 == null goto label1;

        $z0 = $r4[5];

        if $z0 != 0 goto label1;

        $r5 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r5.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Issuer certificate keyusage extension is critical and does not permit key signing.", null, $r0, $i0);

        throw $r5;

     label1:
        return;
    }
    protected static void prepareNextCertO(java.security.cert.CertPath, int, java.util.Set, java.util.List) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0;
        java.util.Set $r1;
        java.util.List $r2, $r4;
        java.security.cert.CertPathValidatorException r3, $r9;
        java.lang.Object $r5;
        java.security.cert.X509Certificate r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.security.cert.PKIXCertPathChecker $r8;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r12;
        java.lang.StringBuilder $r13;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Set;

        $r2 := @parameter3: java.util.List;

        $r4 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

     label2:
        $r5 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label3:
        $r8 = (java.security.cert.PKIXCertPathChecker) $r5;

     label4:
        virtualinvoke $r8.<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>(r6, $r1);

     label5:
        goto label1;

     label6:
        r3 := @caughtexception;

        $r9 = new java.security.cert.CertPathValidatorException;

        $r10 = virtualinvoke r3.<java.security.cert.CertPathValidatorException: java.lang.String getMessage()>();

        $r11 = virtualinvoke r3.<java.security.cert.CertPathValidatorException: java.lang.Throwable getCause()>();

        specialinvoke $r9.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r10, $r11, $r0, $i0);

        throw $r9;

     label7:
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate has unsupported critical extension: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r10, null, $r0, $i0);

        throw $r12;

     label8:
        return;

        catch java.security.cert.CertPathValidatorException from label2 to label3 with label6;
        catch java.security.cert.CertPathValidatorException from label4 to label5 with label6;
    }
    protected static java.util.Set processCRLA1i(java.util.Date, org.spongycastle.jcajce.PKIXExtendedParameters, java.security.cert.X509Certificate, java.security.cert.X509CRL) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0;
        org.spongycastle.jcajce.PKIXExtendedParameters $r1;
        java.security.cert.X509Certificate $r2;
        java.security.cert.X509CRL $r3;
        java.util.ArrayList r4;
        java.util.HashSet r5;
        boolean $z0;
        java.lang.String $r6;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.x509.CRLDistPoint $r8, r9;
        java.util.List $r10;
        java.util.Map $r11;
        java.util.Set $r12;
        org.spongycastle.jce.provider.AnnotatedException r13, $r14, r15, r16;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r2 := @parameter2: java.security.cert.X509Certificate;

        $r3 := @parameter3: java.security.cert.X509CRL;

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label13;

        $r6 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL>;

     label01:
        $r7 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r2, $r6);

        $r8 = staticinvoke <org.spongycastle.asn1.x509.CRLDistPoint: org.spongycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r7);

     label02:
        r9 = $r8;

        if $r8 != null goto label05;

        $r6 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String FRESHEST_CRL>;

     label03:
        $r7 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r3, $r6);

        $r8 = staticinvoke <org.spongycastle.asn1.x509.CRLDistPoint: org.spongycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object)>($r7);

     label04:
        r9 = $r8;

     label05:
        if r9 == null goto label13;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        $r10 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCRLStores()>();

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label06:
        $r11 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Map getNamedCRLStoreMap()>();

        $r10 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.List getAdditionalStoresFromCRLDistributionPoint(org.spongycastle.asn1.x509.CRLDistPoint,java.util.Map)>(r9, $r11);

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label07:
        $r10 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r12 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,java.security.cert.X509CRL,java.util.List,java.util.List)>($r0, $r3, $r10, r4);

        interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

     label08:
        return r5;

     label09:
        r13 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Freshest CRL extension could not be decoded from certificate.", r13);

        throw $r14;

     label10:
        $r14 := @caughtexception;

        r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Freshest CRL extension could not be decoded from CRL.", $r14);

        throw r13;

     label11:
        r15 := @caughtexception;

        r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("No new delta CRL locations could be added from Freshest CRL extension.", r15);

        throw r13;

     label12:
        r16 := @caughtexception;

        r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Exception obtaining delta CRLs.", r16);

        throw r13;

     label13:
        return r5;

        catch org.spongycastle.jce.provider.AnnotatedException from label01 to label02 with label09;
        catch org.spongycastle.jce.provider.AnnotatedException from label03 to label04 with label10;
        catch org.spongycastle.jce.provider.AnnotatedException from label06 to label07 with label11;
        catch org.spongycastle.jce.provider.AnnotatedException from label07 to label08 with label12;
    }
    protected static java.util.Set[] processCRLA1ii(java.util.Date, org.spongycastle.jcajce.PKIXExtendedParameters, java.security.cert.X509Certificate, java.security.cert.X509CRL) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0, $r10;
        org.spongycastle.jcajce.PKIXExtendedParameters $r1;
        java.security.cert.X509Certificate $r2;
        java.security.cert.X509CRL $r3;
        org.spongycastle.asn1.x500.X500Name $r6;
        byte[] $r7;
        org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder $r8, $r24;
        org.spongycastle.jcajce.PKIXCRLStoreSelector $r9;
        org.spongycastle.jce.provider.PKIXCRLUtil $r11;
        java.util.List $r12, $r13;
        java.util.Set $r14, $r15;
        boolean $z0;
        java.lang.Object[] $r16;
        java.io.IOException r17;
        org.spongycastle.jce.provider.AnnotatedException $r18, $r21, $r26;
        java.lang.StringBuilder $r19, $r25;
        java.lang.String $r20;
        java.util.HashSet $r22;
        java.security.cert.X509CRLSelector $r23;
        java.util.Set[] $r27;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r2 := @parameter2: java.security.cert.X509Certificate;

        $r3 := @parameter3: java.security.cert.X509CRL;

        $r22 = new java.util.HashSet;

        specialinvoke $r22.<java.util.HashSet: void <init>()>();

        $r23 = new java.security.cert.X509CRLSelector;

        specialinvoke $r23.<java.security.cert.X509CRLSelector: void <init>()>();

        virtualinvoke $r23.<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)>($r2);

     label1:
        $r6 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r3);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke $r23.<java.security.cert.X509CRLSelector: void addIssuerName(byte[])>($r7);

     label2:
        $r24 = new org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder;

        specialinvoke $r24.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: void <init>(java.security.cert.CRLSelector)>($r23);

        $r8 = virtualinvoke $r24.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder setCompleteCRLEnabled(boolean)>(1);

        $r9 = virtualinvoke $r8.<org.spongycastle.jcajce.PKIXCRLStoreSelector$Builder: org.spongycastle.jcajce.PKIXCRLStoreSelector build()>();

        $r10 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

        if $r10 == null goto label3;

        $r0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.Date getDate()>();

     label3:
        $r11 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL>;

        $r12 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r13 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCRLStores()>();

        $r14 = virtualinvoke $r11.<org.spongycastle.jce.provider.PKIXCRLUtil: java.util.Set findCRLs(org.spongycastle.jcajce.PKIXCRLStoreSelector,java.util.Date,java.util.List,java.util.List)>($r9, $r0, $r12, $r13);

        $z0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label5;

     label4:
        $r12 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r13 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCRLStores()>();

        $r15 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getDeltaCRLs(java.util.Date,java.security.cert.X509CRL,java.util.List,java.util.List)>($r0, $r3, $r12, $r13);

        interfaceinvoke $r22.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

     label5:
        $r16 = newarray (java.util.Set)[2];

        $r16[0] = $r14;

        $r16[1] = $r22;

        $r27 = (java.util.Set[]) $r16;

        return $r27;

     label6:
        r17 := @caughtexception;

        $r21 = new org.spongycastle.jce.provider.AnnotatedException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot extract issuer from CRL.");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r17);

        throw $r21;

     label7:
        $r18 := @caughtexception;

        $r26 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r26.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Exception obtaining delta CRLs.", $r18);

        throw $r26;

        catch java.io.IOException from label1 to label2 with label6;
        catch org.spongycastle.jce.provider.AnnotatedException from label4 to label5 with label7;
    }
    protected static void processCRLB1(org.spongycastle.asn1.x509.DistributionPoint, java.lang.Object, java.security.cert.X509CRL) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.DistributionPoint $r0;
        java.lang.Object $r1;
        java.security.cert.X509CRL $r2;
        java.lang.String $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        boolean z0, $z1, $z2;
        org.spongycastle.asn1.x509.IssuingDistributionPoint $r5;
        org.spongycastle.asn1.x500.X500Name $r6, $r17;
        byte[] $r7, $r12;
        org.spongycastle.asn1.x509.GeneralNames $r8;
        org.spongycastle.asn1.x509.GeneralName[] $r9;
        int i0, $i1;
        org.spongycastle.asn1.x509.GeneralName $r10;
        org.spongycastle.asn1.ASN1Encodable $r11;
        java.io.IOException r13, r16;
        org.spongycastle.jce.provider.AnnotatedException $r14;
        java.lang.StringBuilder $r15;

        $r0 := @parameter0: org.spongycastle.asn1.x509.DistributionPoint;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.security.cert.X509CRL;

        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

        $r4 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r2, $r3);

        z0 = 0;

        if $r4 == null goto label01;

        $r5 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r4);

        $z1 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean isIndirectCRL()>();

        if $z1 == 0 goto label01;

        z0 = 1;

     label01:
        $r6 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r2);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

     label02:
        $z1 = 0;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r8 == null goto label11;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        i0 = 0;

     label03:
        $i1 = lengthof $r9;

        if i0 >= $i1 goto label09;

        $r10 = $r9[i0];

        $i1 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralName: int getTagNo()>();

        if $i1 != 4 goto label06;

        $r10 = $r9[i0];

     label04:
        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r4 = interfaceinvoke $r11.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r12 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded()>();

        $z2 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r12, $r7);

     label05:
        if $z2 == 0 goto label06;

        $z1 = 1;

     label06:
        i0 = i0 + 1;

        goto label03;

     label07:
        r13 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception encoding CRL issuer: ");

        $r3 = virtualinvoke r13.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>($r3, r13);

        throw $r14;

     label08:
        r16 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CRL issuer information from distribution point cannot be decoded.", r16);

        throw $r14;

     label09:
        if $z1 == 0 goto label10;

        if z0 != 0 goto label10;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Distribution point contains cRLIssuer field but CRL is not indirect.");

        throw $r14;

     label10:
        if $z1 != 0 goto label12;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL issuer of CRL does not match CRL issuer of distribution point.");

        throw $r14;

     label11:
        $r6 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r2);

        $r17 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r1);

        z0 = virtualinvoke $r6.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r17);

        if z0 == 0 goto label12;

        $z1 = 1;

     label12:
        if $z1 != 0 goto label13;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Cannot find matching CRL issuer for certificate.");

        throw $r14;

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.io.IOException from label04 to label05 with label08;
    }
    protected static void processCRLB2(org.spongycastle.asn1.x509.DistributionPoint, java.lang.Object, java.security.cert.X509CRL) throws org.spongycastle.jce.provider.AnnotatedException
    {
        org.spongycastle.asn1.x509.DistributionPoint $r0;
        java.lang.Object $r1, $r19;
        java.security.cert.X509CRL $r2;
        java.util.ArrayList r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.x509.IssuingDistributionPoint $r6, $r8;
        org.spongycastle.asn1.x509.DistributionPointName $r7;
        int $i0, $i1;
        org.spongycastle.asn1.ASN1Encodable $r9;
        org.spongycastle.asn1.x509.GeneralNames $r10;
        org.spongycastle.asn1.x509.GeneralName[] $r11;
        org.spongycastle.asn1.x509.GeneralName $r12;
        java.lang.Exception r13, r20, r23, r26;
        org.spongycastle.jce.provider.AnnotatedException $r14;
        org.spongycastle.asn1.ASN1EncodableVector r15;
        org.spongycastle.asn1.x500.X500Name $r16;
        org.spongycastle.asn1.ASN1Sequence $r17;
        java.util.Enumeration $r18;
        boolean $z0, $z1;
        org.spongycastle.asn1.DERSequence $r21;
        byte[] $r22;
        java.security.cert.X509Extension $r24;
        org.spongycastle.asn1.x509.BasicConstraints $r25;

        $r0 := @parameter0: org.spongycastle.asn1.x509.DistributionPoint;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.security.cert.X509CRL;

        $r4 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

     label01:
        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r2, $r4);

        $r6 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r5);

     label02:
        if $r6 == null goto label40;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r7 == null goto label32;

        $r8 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r8.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i0 != 0 goto label05;

        $r9 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r10 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        $i0 = 0;

     label03:
        $i1 = lengthof $r11;

        if $i0 >= $i1 goto label05;

        $r12 = $r11[$i0];

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

        $i0 = $i0 + 1;

        goto label03;

     label04:
        r13 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", r13);

        throw $r14;

     label05:
        $i0 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i0 != 1 goto label13;

        r15 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

     label06:
        $r16 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r2);

        $r17 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label07:
        $z0 = interfaceinvoke $r18.<java.util.Enumeration: boolean hasMoreElements()>();

     label08:
        if $z0 == 0 goto label12;

     label09:
        $r19 = interfaceinvoke $r18.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = (org.spongycastle.asn1.ASN1Encodable) $r19;

        virtualinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r9);

     label10:
        goto label07;

     label11:
        r20 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Could not read CRL issuer.", r20);

        throw $r14;

     label12:
        $r9 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: org.spongycastle.asn1.ASN1Encodable getName()>();

        virtualinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r9);

        $r12 = new org.spongycastle.asn1.x509.GeneralName;

        $r21 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r21.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r15);

        $r16 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r21);

        specialinvoke $r12.<org.spongycastle.asn1.x509.GeneralName: void <init>(org.spongycastle.asn1.x500.X500Name)>($r16);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label13:
        $z0 = 0;

        $r7 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        if $r7 == null goto label27;

        $r7 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.DistributionPointName getDistributionPoint()>();

        $r11 = null;

        $i0 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i0 != 0 goto label14;

        $r9 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r10 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

     label14:
        $i0 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: int getType()>();

        if $i0 != 1 goto label23;

        $r10 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r10 == null goto label18;

        $r10 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

     label15:
        $i0 = 0;

     label16:
        $i1 = lengthof $r11;

        if $i0 >= $i1 goto label23;

        $r12 = $r11[$i0];

        $r9 = virtualinvoke $r12.<org.spongycastle.asn1.x509.GeneralName: org.spongycastle.asn1.ASN1Encodable getName()>();

        $r5 = interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r17 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

        $r18 = virtualinvoke $r17.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        r15 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

     label17:
        $z1 = interfaceinvoke $r18.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label22;

        $r19 = interfaceinvoke $r18.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = (org.spongycastle.asn1.ASN1Encodable) $r19;

        virtualinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r9);

        goto label17;

     label18:
        $r11 = newarray (org.spongycastle.asn1.x509.GeneralName)[1];

        $r12 = new org.spongycastle.asn1.x509.GeneralName;

     label19:
        $r16 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>($r1);

        $r22 = virtualinvoke $r16.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        $r16 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r22);

        specialinvoke $r12.<org.spongycastle.asn1.x509.GeneralName: void <init>(org.spongycastle.asn1.x500.X500Name)>($r16);

        $r11[0] = $r12;

     label20:
        goto label15;

     label21:
        r23 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Could not read certificate issuer.", r23);

        throw $r14;

     label22:
        $r9 = virtualinvoke $r7.<org.spongycastle.asn1.x509.DistributionPointName: org.spongycastle.asn1.ASN1Encodable getName()>();

        virtualinvoke r15.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r9);

        $r12 = new org.spongycastle.asn1.x509.GeneralName;

        $r21 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r21.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r15);

        $r16 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r21);

        specialinvoke $r12.<org.spongycastle.asn1.x509.GeneralName: void <init>(org.spongycastle.asn1.x500.X500Name)>($r16);

        $r11[$i0] = $r12;

        $i0 = $i0 + 1;

        goto label16;

     label23:
        if $r11 == null goto label25;

        $i0 = 0;

     label24:
        $i1 = lengthof $r11;

        if $i0 >= $i1 goto label25;

        $r12 = $r11[$i0];

        $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label26;

        $z0 = 1;

     label25:
        if $z0 != 0 goto label32;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");

        throw $r14;

     label26:
        $i0 = $i0 + 1;

        goto label24;

     label27:
        $r10 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        if $r10 != null goto label28;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Either the cRLIssuer or the distributionPoint field must be contained in DistributionPoint.");

        throw $r14;

     label28:
        $r10 = virtualinvoke $r0.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.GeneralNames getCRLIssuer()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

        $i0 = 0;

     label29:
        $i1 = lengthof $r11;

        if $i0 >= $i1 goto label30;

        $r12 = $r11[$i0];

        $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label31;

        $z0 = 1;

     label30:
        if $z0 != 0 goto label32;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");

        throw $r14;

     label31:
        $i0 = $i0 + 1;

        goto label29;

     label32:
        $r24 = (java.security.cert.X509Extension) $r1;

     label33:
        $r4 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String BASIC_CONSTRAINTS>;

     label34:
        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r24, $r4);

        $r25 = staticinvoke <org.spongycastle.asn1.x509.BasicConstraints: org.spongycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>($r5);

     label35:
        $z0 = $r1 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label39;

        $z0 = virtualinvoke $r6.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsUserCerts()>();

        if $z0 == 0 goto label37;

        if $r25 == null goto label37;

        $z0 = virtualinvoke $r25.<org.spongycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z0 == 0 goto label37;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CA Cert CRL only contains user certificates.");

        throw $r14;

     label36:
        r26 := @caughtexception;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Basic constraints extension could not be decoded.", r26);

        throw $r14;

     label37:
        $z0 = virtualinvoke $r6.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsCACerts()>();

        if $z0 == 0 goto label39;

        if $r25 == null goto label38;

        $z0 = virtualinvoke $r25.<org.spongycastle.asn1.x509.BasicConstraints: boolean isCA()>();

        if $z0 != 0 goto label39;

     label38:
        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("End CRL only contains CA certificates.");

        throw $r14;

     label39:
        $z0 = virtualinvoke $r6.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean onlyContainsAttributeCerts()>();

        if $z0 == 0 goto label40;

        $r14 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r14.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("onlyContainsAttributeCerts boolean is asserted.");

        throw $r14;

     label40:
        return;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label06 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label32 to label33 with label36;
        catch java.lang.Exception from label34 to label35 with label36;
    }
    protected static void processCRLC(java.security.cert.X509CRL, java.security.cert.X509CRL, org.spongycastle.jcajce.PKIXExtendedParameters) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509CRL $r0, $r1;
        org.spongycastle.jcajce.PKIXExtendedParameters $r2;
        java.lang.String $r3;
        org.spongycastle.asn1.ASN1Primitive $r4, $r12;
        org.spongycastle.asn1.x509.IssuingDistributionPoint $r5, $r10;
        boolean $z0, $z1;
        org.spongycastle.asn1.x500.X500Name $r6, $r7;
        org.spongycastle.jce.provider.AnnotatedException $r8, $r13;
        java.lang.Exception r9, r11;

        $r0 := @parameter0: java.security.cert.X509CRL;

        $r1 := @parameter1: java.security.cert.X509CRL;

        $r2 := @parameter2: org.spongycastle.jcajce.PKIXExtendedParameters;

        if $r0 != null goto label01;

        return;

     label01:
        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

     label02:
        $r4 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r1, $r3);

        $r5 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r4);

     label03:
        $z0 = virtualinvoke $r2.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label20;

        $r6 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r0);

        $r7 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r1);

        $z0 = virtualinvoke $r6.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label05;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Complete CRL issuer does not match delta CRL issuer.");

        throw $r8;

     label04:
        r9 := @caughtexception;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", r9);

        throw $r8;

     label05:
        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

     label06:
        $r4 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r0, $r3);

        $r10 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r4);

     label07:
        $z0 = 0;

        if $r5 != null goto label10;

        if $r10 != null goto label08;

        $z0 = 1;

     label08:
        if $z0 != 0 goto label11;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Issuing distribution point extension from delta CRL and complete CRL does not match.");

        throw $r8;

     label09:
        r11 := @caughtexception;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension from delta CRL could not be decoded.", r11);

        throw $r8;

     label10:
        $z1 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label08;

        $z0 = 1;

        goto label08;

     label11:
        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER>;

     label12:
        $r4 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r1, $r3);

     label13:
        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String AUTHORITY_KEY_IDENTIFIER>;

     label14:
        $r12 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r0, $r3);

     label15:
        if $r4 != null goto label18;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("CRL authority key identifier is null.");

        throw $r8;

     label16:
        $r8 := @caughtexception;

        $r13 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r13.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Authority key identifier extension could not be extracted from complete CRL.", $r8);

        throw $r13;

     label17:
        $r13 := @caughtexception;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Authority key identifier extension could not be extracted from delta CRL.", $r13);

        throw $r8;

     label18:
        if $r12 != null goto label19;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL authority key identifier is null.");

        throw $r8;

     label19:
        $z0 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Primitive: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label20;

        $r8 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r8.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Delta CRL authority key identifier does not match complete CRL authority key identifier.");

        throw $r8;

     label20:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label09;
        catch org.spongycastle.jce.provider.AnnotatedException from label12 to label13 with label16;
        catch org.spongycastle.jce.provider.AnnotatedException from label14 to label15 with label17;
    }
    protected static org.spongycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL, org.spongycastle.asn1.x509.DistributionPoint) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509CRL $r0;
        org.spongycastle.asn1.x509.DistributionPoint $r1;
        java.lang.Exception r2;
        java.lang.String $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.asn1.x509.IssuingDistributionPoint $r5;
        org.spongycastle.asn1.x509.ReasonFlags $r6;
        org.spongycastle.jce.provider.ReasonsMask $r7, $r8;
        org.spongycastle.jce.provider.AnnotatedException $r9;

        $r0 := @parameter0: java.security.cert.X509CRL;

        $r1 := @parameter1: org.spongycastle.asn1.x509.DistributionPoint;

        $r3 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String ISSUING_DISTRIBUTION_POINT>;

     label01:
        $r4 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>($r0, $r3);

        $r5 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r4);

     label02:
        if $r5 == null goto label04;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        if $r6 == null goto label04;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r6 == null goto label04;

        $r7 = new org.spongycastle.jce.provider.ReasonsMask;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getReasons()>();

        specialinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: void <init>(org.spongycastle.asn1.x509.ReasonFlags)>($r6);

        $r8 = new org.spongycastle.jce.provider.ReasonsMask;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        specialinvoke $r8.<org.spongycastle.jce.provider.ReasonsMask: void <init>(org.spongycastle.asn1.x509.ReasonFlags)>($r6);

        $r7 = virtualinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: org.spongycastle.jce.provider.ReasonsMask intersect(org.spongycastle.jce.provider.ReasonsMask)>($r8);

        return $r7;

     label03:
        r2 := @caughtexception;

        $r9 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r9.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuing distribution point extension could not be decoded.", r2);

        throw $r9;

     label04:
        if $r5 == null goto label05;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        if $r6 != null goto label06;

     label05:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r6 != null goto label06;

        $r7 = <org.spongycastle.jce.provider.ReasonsMask: org.spongycastle.jce.provider.ReasonsMask allReasons>;

        return $r7;

     label06:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getReasons()>();

        if $r6 != null goto label09;

        $r7 = <org.spongycastle.jce.provider.ReasonsMask: org.spongycastle.jce.provider.ReasonsMask allReasons>;

     label07:
        if $r5 != null goto label10;

        $r8 = <org.spongycastle.jce.provider.ReasonsMask: org.spongycastle.jce.provider.ReasonsMask allReasons>;

     label08:
        $r7 = virtualinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: org.spongycastle.jce.provider.ReasonsMask intersect(org.spongycastle.jce.provider.ReasonsMask)>($r8);

        return $r7;

     label09:
        $r7 = new org.spongycastle.jce.provider.ReasonsMask;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.DistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getReasons()>();

        specialinvoke $r7.<org.spongycastle.jce.provider.ReasonsMask: void <init>(org.spongycastle.asn1.x509.ReasonFlags)>($r6);

        goto label07;

     label10:
        $r8 = new org.spongycastle.jce.provider.ReasonsMask;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.ReasonFlags getOnlySomeReasons()>();

        specialinvoke $r8.<org.spongycastle.jce.provider.ReasonsMask: void <init>(org.spongycastle.asn1.x509.ReasonFlags)>($r6);

        goto label08;

        catch java.lang.Exception from label01 to label02 with label03;
    }
    protected static java.util.Set processCRLF(java.security.cert.X509CRL, java.lang.Object, java.security.cert.X509Certificate, java.security.PublicKey, org.spongycastle.jcajce.PKIXExtendedParameters, java.util.List, org.spongycastle.jcajce.util.JcaJceHelper) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509CRL $r0;
        java.lang.Object $r1;
        java.security.cert.X509Certificate $r2, r20;
        java.security.PublicKey $r3, $r30;
        org.spongycastle.jcajce.PKIXExtendedParameters $r4, $r26;
        java.util.List $r5, $r16;
        org.spongycastle.jcajce.util.JcaJceHelper $r6;
        org.spongycastle.jce.provider.PKIXCertPathBuilderSpi r7;
        java.security.cert.X509CertSelector r8;
        java.util.HashSet r9;
        java.util.ArrayList r10, r11;
        org.spongycastle.asn1.x500.X500Name $r12;
        byte[] $r13;
        org.spongycastle.jcajce.PKIXCertStoreSelector$Builder $r14;
        org.spongycastle.jcajce.PKIXCertStoreSelector $r15;
        java.util.Collection $r17, $r18;
        java.util.Iterator $r19;
        boolean $z0;
        java.io.IOException r21;
        org.spongycastle.jce.provider.AnnotatedException $r22, $r23;
        org.spongycastle.jcajce.PKIXExtendedParameters$Builder $r24;
        org.spongycastle.jcajce.PKIXExtendedBuilderParameters$Builder $r25;
        org.spongycastle.jcajce.PKIXExtendedBuilderParameters $r27;
        java.security.cert.CertPathBuilderResult $r28;
        java.security.cert.CertPath $r29;
        java.security.cert.CertPathBuilderException r31;
        java.security.cert.CertPathValidatorException r32;
        java.lang.Exception r33;
        java.lang.String $r34;
        int i0, $i1;
        boolean[] $r35;

        $r0 := @parameter0: java.security.cert.X509CRL;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.security.cert.X509Certificate;

        $r3 := @parameter3: java.security.PublicKey;

        $r4 := @parameter4: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r5 := @parameter5: java.util.List;

        $r6 := @parameter6: org.spongycastle.jcajce.util.JcaJceHelper;

        r8 = new java.security.cert.X509CertSelector;

        specialinvoke r8.<java.security.cert.X509CertSelector: void <init>()>();

     label01:
        $r12 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getIssuerPrincipal(java.security.cert.X509CRL)>($r0);

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        virtualinvoke r8.<java.security.cert.X509CertSelector: void setSubject(byte[])>($r13);

     label02:
        $r14 = new org.spongycastle.jcajce.PKIXCertStoreSelector$Builder;

        specialinvoke $r14.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: void <init>(java.security.cert.CertSelector)>(r8);

        $r15 = virtualinvoke $r14.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: org.spongycastle.jcajce.PKIXCertStoreSelector build()>();

     label03:
        $r16 = virtualinvoke $r4.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertificateStores()>();

        $r17 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector,java.util.List)>($r15, $r16);

        $r16 = virtualinvoke $r4.<org.spongycastle.jcajce.PKIXExtendedParameters: java.util.List getCertStores()>();

        $r18 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Collection findCertificates(org.spongycastle.jcajce.PKIXCertStoreSelector,java.util.List)>($r15, $r16);

        interfaceinvoke $r17.<java.util.Collection: boolean addAll(java.util.Collection)>($r18);

     label04:
        interfaceinvoke $r17.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        $r19 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

     label05:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r1 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.security.cert.X509Certificate) $r1;

        $z0 = virtualinvoke r20.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label08;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(r20);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label05;

     label06:
        r21 := @caughtexception;

        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.", r21);

        throw $r22;

     label07:
        $r22 := @caughtexception;

        $r23 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r23.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Issuer certificate for CRL cannot be searched.", $r22);

        throw $r23;

     label08:
        r7 = new org.spongycastle.jce.provider.PKIXCertPathBuilderSpi;

     label09:
        specialinvoke r7.<org.spongycastle.jce.provider.PKIXCertPathBuilderSpi: void <init>()>();

     label10:
        r8 = new java.security.cert.X509CertSelector;

     label11:
        specialinvoke r8.<java.security.cert.X509CertSelector: void <init>()>();

        virtualinvoke r8.<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>(r20);

     label12:
        $r24 = new org.spongycastle.jcajce.PKIXExtendedParameters$Builder;

     label13:
        specialinvoke $r24.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: void <init>(org.spongycastle.jcajce.PKIXExtendedParameters)>($r4);

     label14:
        $r14 = new org.spongycastle.jcajce.PKIXCertStoreSelector$Builder;

     label15:
        specialinvoke $r14.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: void <init>(java.security.cert.CertSelector)>(r8);

        $r15 = virtualinvoke $r14.<org.spongycastle.jcajce.PKIXCertStoreSelector$Builder: org.spongycastle.jcajce.PKIXCertStoreSelector build()>();

        $r24 = virtualinvoke $r24.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: org.spongycastle.jcajce.PKIXExtendedParameters$Builder setTargetConstraints(org.spongycastle.jcajce.PKIXCertStoreSelector)>($r15);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r20);

     label16:
        if $z0 == 0 goto label22;

     label17:
        virtualinvoke $r24.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: void setRevocationEnabled(boolean)>(0);

     label18:
        $r25 = new org.spongycastle.jcajce.PKIXExtendedBuilderParameters$Builder;

     label19:
        $r26 = virtualinvoke $r24.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: org.spongycastle.jcajce.PKIXExtendedParameters build()>();

        specialinvoke $r25.<org.spongycastle.jcajce.PKIXExtendedBuilderParameters$Builder: void <init>(org.spongycastle.jcajce.PKIXExtendedParameters)>($r26);

        $r27 = virtualinvoke $r25.<org.spongycastle.jcajce.PKIXExtendedBuilderParameters$Builder: org.spongycastle.jcajce.PKIXExtendedBuilderParameters build()>();

        $r28 = virtualinvoke r7.<org.spongycastle.jce.provider.PKIXCertPathBuilderSpi: java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)>($r27);

        $r29 = interfaceinvoke $r28.<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()>();

        $r16 = virtualinvoke $r29.<java.security.cert.CertPath: java.util.List getCertificates()>();

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>(r20);

        $r30 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.security.PublicKey getNextWorkingKey(java.util.List,int,org.spongycastle.jcajce.util.JcaJceHelper)>($r16, 0, $r6);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r30);

     label20:
        goto label05;

     label21:
        r31 := @caughtexception;

        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("CertPath for CRL signer failed to validate.", r31);

        throw $r22;

     label22:
        virtualinvoke $r24.<org.spongycastle.jcajce.PKIXExtendedParameters$Builder: void setRevocationEnabled(boolean)>(1);

     label23:
        goto label18;

     label24:
        r32 := @caughtexception;

        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Public key of issuer certificate of CRL could not be retrieved.", r32);

        throw $r22;

     label25:
        r33 := @caughtexception;

        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        $r34 = virtualinvoke r33.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>($r34);

        throw $r22;

     label26:
        r9 = new java.util.HashSet;

        specialinvoke r9.<java.util.HashSet: void <init>()>();

        $r22 = null;

        i0 = 0;

     label27:
        $i1 = interfaceinvoke r10.<java.util.List: int size()>();

        if i0 >= $i1 goto label31;

        $r1 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i0);

        $r2 = (java.security.cert.X509Certificate) $r1;

        $r35 = virtualinvoke $r2.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if $r35 == null goto label30;

        $i1 = lengthof $r35;

        if $i1 < 7 goto label28;

        $z0 = $r35[6];

        if $z0 != 0 goto label30;

     label28:
        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Issuer certificate key usage extension does not permit CRL signing.");

     label29:
        i0 = i0 + 1;

        goto label27;

     label30:
        $r1 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i0);

        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label29;

     label31:
        $z0 = interfaceinvoke r9.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label32;

        if $r22 != null goto label32;

        $r22 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r22.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String)>("Cannot find a valid issuer certificate.");

        throw $r22;

     label32:
        $z0 = interfaceinvoke r9.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label33;

        if $r22 == null goto label33;

        throw $r22;

     label33:
        return r9;

        catch java.io.IOException from label01 to label02 with label06;
        catch org.spongycastle.jce.provider.AnnotatedException from label03 to label04 with label07;
        catch java.security.cert.CertPathBuilderException from label09 to label10 with label21;
        catch java.security.cert.CertPathBuilderException from label11 to label12 with label21;
        catch java.security.cert.CertPathBuilderException from label13 to label14 with label21;
        catch java.security.cert.CertPathBuilderException from label15 to label16 with label21;
        catch java.security.cert.CertPathBuilderException from label17 to label18 with label21;
        catch java.security.cert.CertPathBuilderException from label19 to label20 with label21;
        catch java.security.cert.CertPathValidatorException from label09 to label10 with label24;
        catch java.security.cert.CertPathValidatorException from label11 to label12 with label24;
        catch java.security.cert.CertPathValidatorException from label13 to label14 with label24;
        catch java.security.cert.CertPathValidatorException from label15 to label16 with label24;
        catch java.security.cert.CertPathValidatorException from label17 to label18 with label24;
        catch java.security.cert.CertPathValidatorException from label19 to label20 with label24;
        catch java.lang.Exception from label09 to label10 with label25;
        catch java.lang.Exception from label11 to label12 with label25;
        catch java.lang.Exception from label13 to label14 with label25;
        catch java.lang.Exception from label15 to label16 with label25;
        catch java.lang.Exception from label17 to label18 with label25;
        catch java.lang.Exception from label19 to label20 with label25;
        catch java.security.cert.CertPathBuilderException from label22 to label23 with label21;
        catch java.security.cert.CertPathValidatorException from label22 to label23 with label24;
        catch java.lang.Exception from label22 to label23 with label25;
    }
    protected static java.security.PublicKey processCRLG(java.security.cert.X509CRL, java.util.Set) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.security.cert.X509CRL $r0;
        java.util.Set $r1;
        java.lang.Exception r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.security.PublicKey r5;
        org.spongycastle.jce.provider.AnnotatedException $r6;

        $r0 := @parameter0: java.security.cert.X509CRL;

        $r1 := @parameter1: java.util.Set;

        r2 = null;

        $r3 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.security.PublicKey) $r4;

     label2:
        virtualinvoke $r0.<java.security.cert.X509CRL: void verify(java.security.PublicKey)>(r5);

     label3:
        return r5;

     label4:
        r2 := @caughtexception;

        goto label1;

     label5:
        $r6 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r6.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot verify CRL.", r2);

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    protected static java.security.cert.X509CRL processCRLH(java.util.Set, java.security.PublicKey) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Set $r0;
        java.security.PublicKey $r1;
        java.lang.Exception r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.security.cert.X509CRL r5;
        org.spongycastle.jce.provider.AnnotatedException $r6;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.security.PublicKey;

        r2 = null;

        $r3 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.security.cert.X509CRL) $r4;

     label2:
        virtualinvoke r5.<java.security.cert.X509CRL: void verify(java.security.PublicKey)>($r1);

     label3:
        return r5;

     label4:
        r2 := @caughtexception;

        goto label1;

     label5:
        if r2 == null goto label6;

        $r6 = new org.spongycastle.jce.provider.AnnotatedException;

        specialinvoke $r6.<org.spongycastle.jce.provider.AnnotatedException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot verify delta CRL.", r2);

        throw $r6;

     label6:
        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    protected static void processCRLI(java.util.Date, java.security.cert.X509CRL, java.lang.Object, org.spongycastle.jce.provider.CertStatus, org.spongycastle.jcajce.PKIXExtendedParameters) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0;
        java.security.cert.X509CRL $r1;
        java.lang.Object $r2;
        org.spongycastle.jce.provider.CertStatus $r3;
        org.spongycastle.jcajce.PKIXExtendedParameters $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.security.cert.X509CRL;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: org.spongycastle.jce.provider.CertStatus;

        $r4 := @parameter4: org.spongycastle.jcajce.PKIXExtendedParameters;

        $z0 = virtualinvoke $r4.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isUseDeltasEnabled()>();

        if $z0 == 0 goto label1;

        if $r1 == null goto label1;

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.spongycastle.jce.provider.CertStatus)>($r0, $r1, $r2, $r3);

     label1:
        return;
    }
    protected static void processCRLJ(java.util.Date, java.security.cert.X509CRL, java.lang.Object, org.spongycastle.jce.provider.CertStatus) throws org.spongycastle.jce.provider.AnnotatedException
    {
        java.util.Date $r0;
        java.security.cert.X509CRL $r1;
        java.lang.Object $r2;
        org.spongycastle.jce.provider.CertStatus $r3;
        int $i0;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.security.cert.X509CRL;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: org.spongycastle.jce.provider.CertStatus;

        $i0 = virtualinvoke $r3.<org.spongycastle.jce.provider.CertStatus: int getCertStatus()>();

        if $i0 != 11 goto label1;

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.spongycastle.jce.provider.CertStatus)>($r0, $r1, $r2, $r3);

     label1:
        return;
    }
    protected static void processCertA(java.security.cert.CertPath, org.spongycastle.jcajce.PKIXExtendedParameters, int, java.security.PublicKey, boolean, org.spongycastle.asn1.x500.X500Name, java.security.cert.X509Certificate, org.spongycastle.jcajce.util.JcaJceHelper) throws org.spongycastle.jce.exception.ExtCertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        org.spongycastle.jcajce.PKIXExtendedParameters $r1;
        int $i0;
        java.security.PublicKey $r2;
        boolean $z0;
        org.spongycastle.asn1.x500.X500Name $r3, $r11;
        java.security.cert.X509Certificate $r4, r8;
        org.spongycastle.jcajce.util.JcaJceHelper $r5;
        java.util.List $r6;
        java.lang.Object $r7;
        java.lang.String $r9;
        java.util.Date $r10;
        java.lang.StringBuilder $r12, $r19;
        java.security.GeneralSecurityException r13;
        java.security.cert.CertificateExpiredException r14;
        java.security.cert.CertificateNotYetValidException r15;
        org.spongycastle.jce.provider.AnnotatedException r16, r17;
        java.lang.Throwable $r18;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r20;

        $r0 := @parameter0: java.security.cert.CertPath;

        $r1 := @parameter1: org.spongycastle.jcajce.PKIXExtendedParameters;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.security.PublicKey;

        $z0 := @parameter4: boolean;

        $r3 := @parameter5: org.spongycastle.asn1.x500.X500Name;

        $r4 := @parameter6: java.security.cert.X509Certificate;

        $r5 := @parameter7: org.spongycastle.jcajce.util.JcaJceHelper;

        $r6 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i0);

        r8 = (java.security.cert.X509Certificate) $r7;

        if $z0 != 0 goto label02;

     label01:
        $r9 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: java.lang.String getSigProvider()>();

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void verifyX509Certificate(java.security.cert.X509Certificate,java.security.PublicKey,java.lang.String)>(r8, $r2, $r9);

     label02:
        $r10 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidCertDateFromValidityModel(org.spongycastle.jcajce.PKIXExtendedParameters,java.security.cert.CertPath,int)>($r1, $r0, $i0);

        virtualinvoke r8.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>($r10);

     label03:
        $z0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isRevocationEnabled()>();

        if $z0 == 0 goto label05;

     label04:
        $r10 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Date getValidCertDateFromValidityModel(org.spongycastle.jcajce.PKIXExtendedParameters,java.security.cert.CertPath,int)>($r1, $r0, $i0);

        staticinvoke <org.spongycastle.jce.provider.RFC3280CertPathUtilities: void checkCRLs(org.spongycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List,org.spongycastle.jcajce.util.JcaJceHelper)>($r1, r8, $r10, $r4, $r2, $r6, $r5);

     label05:
        $r11 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>(r8);

        $z0 = virtualinvoke $r11.<org.spongycastle.asn1.x500.X500Name: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label12;

        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IssuerName(");

        $r11 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getEncodedIssuerPrincipal(java.lang.Object)>(r8);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match SubjectName(");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") of signing certificate.");

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r9, null, $r0, $i0);

        throw $r20;

     label06:
        r13 := @caughtexception;

        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not validate certificate signature.", r13, $r0, $i0);

        throw $r20;

     label07:
        r14 := @caughtexception;

        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not validate certificate: ");

        $r9 = virtualinvoke r14.<java.security.cert.CertificateExpiredException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r9, r14, $r0, $i0);

        throw $r20;

     label08:
        r15 := @caughtexception;

        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not validate certificate: ");

        $r9 = virtualinvoke r15.<java.security.cert.CertificateNotYetValidException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r9, r15, $r0, $i0);

        throw $r20;

     label09:
        r16 := @caughtexception;

        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not validate time of certificate.", r16, $r0, $i0);

        throw $r20;

     label10:
        r17 := @caughtexception;

        $r7 = r17;

        $r18 = virtualinvoke r17.<org.spongycastle.jce.provider.AnnotatedException: java.lang.Throwable getCause()>();

        if $r18 == null goto label11;

        $r7 = virtualinvoke r17.<org.spongycastle.jce.provider.AnnotatedException: java.lang.Throwable getCause()>();

     label11:
        $r20 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r9 = virtualinvoke r17.<org.spongycastle.jce.provider.AnnotatedException: java.lang.String getMessage()>();

        $r18 = (java.lang.Throwable) $r7;

        specialinvoke $r20.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r9, $r18, $r0, $i0);

        throw $r20;

     label12:
        return;

        catch java.security.GeneralSecurityException from label01 to label02 with label06;
        catch java.security.cert.CertificateExpiredException from label02 to label03 with label07;
        catch java.security.cert.CertificateNotYetValidException from label02 to label03 with label08;
        catch org.spongycastle.jce.provider.AnnotatedException from label02 to label03 with label09;
        catch org.spongycastle.jce.provider.AnnotatedException from label04 to label05 with label10;
    }
    protected static void processCertBC(java.security.cert.CertPath, int, org.spongycastle.jce.provider.PKIXNameConstraintValidator) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, i1, $i2;
        org.spongycastle.jce.provider.PKIXNameConstraintValidator $r1;
        org.spongycastle.asn1.x509.GeneralName r2;
        org.spongycastle.jce.provider.PKIXNameConstraintValidatorException r3, r21, r25;
        java.util.List $r4;
        java.lang.Object $r5;
        java.security.cert.X509Certificate r6;
        boolean $z0;
        org.spongycastle.asn1.x500.X500Name $r7;
        byte[] $r8;
        org.spongycastle.asn1.ASN1Sequence $r9;
        java.lang.String $r10;
        org.spongycastle.asn1.ASN1Primitive $r11;
        org.spongycastle.asn1.x509.GeneralNames $r12;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r13;
        org.spongycastle.asn1.x500.RDN[] $r14;
        org.spongycastle.asn1.x500.RDN $r15;
        org.spongycastle.asn1.x500.AttributeTypeAndValue $r16;
        org.spongycastle.asn1.ASN1Encodable $r17;
        org.spongycastle.asn1.ASN1String $r18;
        java.lang.Exception r19, r22, r24;
        java.security.cert.CertPathValidatorException $r20;
        org.spongycastle.asn1.x509.GeneralName[] $r23;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.spongycastle.jce.provider.PKIXNameConstraintValidator;

        $r4 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        r6 = (java.security.cert.X509Certificate) $r5;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = $i2 - $i0;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r6);

        if $z0 == 0 goto label01;

        if i1 < $i2 goto label24;

     label01:
        $r7 = staticinvoke <org.spongycastle.jce.provider.PrincipalUtils: org.spongycastle.asn1.x500.X500Name getSubjectPrincipal(java.security.cert.X509Certificate)>(r6);

     label02:
        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded()>();

        $r9 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r8);

     label03:
        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkPermittedDN(org.spongycastle.asn1.ASN1Sequence)>($r9);

        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkExcludedDN(org.spongycastle.asn1.ASN1Sequence)>($r9);

     label04:
        $r10 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String SUBJECT_ALTERNATIVE_NAME>;

     label05:
        $r11 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r6, $r10);

        $r12 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r11);

     label06:
        $r7 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r9);

        $r13 = <org.spongycastle.asn1.x500.style.BCStyle: org.spongycastle.asn1.ASN1ObjectIdentifier EmailAddress>;

        $r14 = virtualinvoke $r7.<org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.RDN[] getRDNs(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r13);

        i1 = 0;

     label07:
        $i2 = lengthof $r14;

        if i1 == $i2 goto label14;

        $r15 = $r14[i1];

        $r16 = virtualinvoke $r15.<org.spongycastle.asn1.x500.RDN: org.spongycastle.asn1.x500.AttributeTypeAndValue getFirst()>();

        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.x500.AttributeTypeAndValue: org.spongycastle.asn1.ASN1Encodable getValue()>();

        $r18 = (org.spongycastle.asn1.ASN1String) $r17;

        $r10 = interfaceinvoke $r18.<org.spongycastle.asn1.ASN1String: java.lang.String getString()>();

        r2 = new org.spongycastle.asn1.x509.GeneralName;

        specialinvoke r2.<org.spongycastle.asn1.x509.GeneralName: void <init>(int,java.lang.String)>(1, $r10);

     label08:
        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkPermitted(org.spongycastle.asn1.x509.GeneralName)>(r2);

        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkExcluded(org.spongycastle.asn1.x509.GeneralName)>(r2);

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        r19 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Exception extracting subject name when checking subtrees.", r19, $r0, $i0);

        throw $r20;

     label11:
        r21 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject failed.", r21, $r0, $i0);

        throw $r20;

     label12:
        r22 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subject alternative name extension could not be decoded.", r22, $r0, $i0);

        throw $r20;

     label13:
        r3 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject alternative email failed.", r3, $r0, $i0);

        throw $r20;

     label14:
        if $r12 == null goto label24;

     label15:
        $r23 = virtualinvoke $r12.<org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralName[] getNames()>();

     label16:
        i1 = 0;

     label17:
        $i2 = lengthof $r23;

        if i1 >= $i2 goto label24;

        r2 = $r23[i1];

     label18:
        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkPermitted(org.spongycastle.asn1.x509.GeneralName)>(r2);

     label19:
        r2 = $r23[i1];

     label20:
        virtualinvoke $r1.<org.spongycastle.jce.provider.PKIXNameConstraintValidator: void checkExcluded(org.spongycastle.asn1.x509.GeneralName)>(r2);

     label21:
        i1 = i1 + 1;

        goto label17;

     label22:
        r24 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subject alternative name contents could not be decoded.", r24, $r0, $i0);

        throw $r20;

     label23:
        r25 := @caughtexception;

        $r20 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r20.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Subtree check for certificate subject alternative name failed.", r25, $r0, $i0);

        throw $r20;

     label24:
        return;

        catch java.lang.Exception from label02 to label03 with label10;
        catch org.spongycastle.jce.provider.PKIXNameConstraintValidatorException from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label12;
        catch org.spongycastle.jce.provider.PKIXNameConstraintValidatorException from label08 to label09 with label13;
        catch java.lang.Exception from label15 to label16 with label22;
        catch org.spongycastle.jce.provider.PKIXNameConstraintValidatorException from label18 to label19 with label23;
        catch org.spongycastle.jce.provider.PKIXNameConstraintValidatorException from label20 to label21 with label23;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode processCertD(java.security.cert.CertPath, int, java.util.Set, org.spongycastle.jce.provider.PKIXPolicyNode, java.util.List[], int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1, i2, $i3;
        java.util.Set $r1, $r19;
        org.spongycastle.jce.provider.PKIXPolicyNode $r2, r4, r22;
        java.util.List[] $r3;
        java.util.HashSet r5, r8;
        java.util.List r6, $r26;
        java.security.cert.CertPathValidatorException r7;
        java.lang.Object $r9;
        java.security.cert.X509Certificate r10;
        java.lang.String $r11, $r17;
        org.spongycastle.asn1.ASN1Primitive $r12;
        org.spongycastle.asn1.ASN1Sequence $r13, $r18;
        java.util.Enumeration $r14;
        boolean $z0, $z1;
        org.spongycastle.asn1.x509.PolicyInformation $r15;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r16;
        org.spongycastle.jce.provider.AnnotatedException r20;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r21;
        java.util.Iterator $r23, $r24;
        java.util.ArrayList $r25;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Set;

        $r2 := @parameter3: org.spongycastle.jce.provider.PKIXPolicyNode;

        $r3 := @parameter4: java.util.List[];

        $i1 := @parameter5: int;

        r6 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r9 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>($i0);

        r10 = (java.security.cert.X509Certificate) $r9;

        $i3 = interfaceinvoke r6.<java.util.List: int size()>();

        i2 = $i3 - $i0;

        $r11 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

     label01:
        $r12 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r10, $r11);

        $r13 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r12);

     label02:
        if $r13 == null goto label30;

        if $r2 == null goto label30;

        $r14 = virtualinvoke $r13.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

     label03:
        $z0 = interfaceinvoke $r14.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke $r14.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r15 = staticinvoke <org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r9);

        $r16 = virtualinvoke $r15.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier()>();

        $r11 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r11 = "2.5.29.32.0";

        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 != 0 goto label03;

     label04:
        $r18 = virtualinvoke $r15.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        $r19 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.spongycastle.asn1.ASN1Sequence)>($r18);

     label05:
        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean processCertD1i(int,java.util.List[],org.spongycastle.asn1.ASN1ObjectIdentifier,java.util.Set)>(i2, $r3, $r16, $r19);

        if $z0 != 0 goto label03;

        staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: void processCertD1ii(int,java.util.List[],org.spongycastle.asn1.ASN1ObjectIdentifier,java.util.Set)>(i2, $r3, $r16, $r19);

        goto label03;

     label06:
        r20 := @caughtexception;

        $r21 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r21.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not read certificate policies extension from certificate.", r20, $r0, $i0);

        throw $r21;

     label07:
        r7 := @caughtexception;

        $r21 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r21.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy qualifier info set could not be build.", r7, $r0, $i0);

        throw $r21;

     label08:
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("2.5.29.32.0");

        if $z0 == 0 goto label17;

     label09:
        interfaceinvoke $r1.<java.util.Set: void clear()>();

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>(r5);

     label10:
        if $i1 > 0 goto label11;

        if i2 >= $i3 goto label23;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>(r10);

        if $z0 == 0 goto label23;

     label11:
        $r14 = virtualinvoke $r13.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label12:
        $z0 = interfaceinvoke $r14.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label23;

        $r9 = interfaceinvoke $r14.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r15 = staticinvoke <org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object)>($r9);

        $r11 = "2.5.29.32.0";

        $r16 = virtualinvoke $r15.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier()>();

        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label12;

        $r13 = virtualinvoke $r15.<org.spongycastle.asn1.x509.PolicyInformation: org.spongycastle.asn1.ASN1Sequence getPolicyQualifiers()>();

        $r1 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: java.util.Set getQualifierSet(org.spongycastle.asn1.ASN1Sequence)>($r13);

        $i0 = i2 + -1;

        r6 = $r3[$i0];

        $i0 = 0;

     label13:
        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 >= $i1 goto label23;

        $r9 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>($i0);

        r22 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r19 = virtualinvoke r22.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Set getExpectedPolicies()>();

        $r23 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r9 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r9 instanceof java.lang.String;

        if $z0 == 0 goto label20;

        $r11 = (java.lang.String) $r9;

     label15:
        $z0 = 0;

        $r24 = virtualinvoke r22.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label16:
        $z1 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r9 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r17 = virtualinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 == 0 goto label16;

        $z0 = 1;

        goto label16;

     label17:
        $r23 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        r8 = new java.util.HashSet;

        specialinvoke r8.<java.util.HashSet: void <init>()>();

     label18:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r9 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label18;

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label18;

     label19:
        interfaceinvoke $r1.<java.util.Set: void clear()>();

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>(r8);

        goto label10;

     label20:
        $z0 = $r9 instanceof org.spongycastle.asn1.ASN1ObjectIdentifier;

        if $z0 == 0 goto label14;

        $r16 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r9;

        $r11 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        goto label15;

     label21:
        if $z0 != 0 goto label14;

        r5 = new java.util.HashSet;

        specialinvoke r5.<java.util.HashSet: void <init>()>();

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r11);

        r4 = new org.spongycastle.jce.provider.PKIXPolicyNode;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        specialinvoke r4.<org.spongycastle.jce.provider.PKIXPolicyNode: void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean)>($r25, i2, r5, r22, $r1, $r11, 0);

        virtualinvoke r22.<org.spongycastle.jce.provider.PKIXPolicyNode: void addChild(org.spongycastle.jce.provider.PKIXPolicyNode)>(r4);

        $r26 = $r3[i2];

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label14;

     label22:
        $i0 = $i0 + 1;

        goto label13;

     label23:
        $i0 = i2 + -1;

     label24:
        if $i0 < 0 goto label28;

        r6 = $r3[$i0];

        $i1 = 0;

     label25:
        $i3 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 >= $i3 goto label26;

        $r9 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>($i1);

        r22 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $z0 = virtualinvoke r22.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 != 0 goto label27;

        r22 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r2, $r3, r22);

        $r2 = r22;

        if r22 != null goto label27;

     label26:
        $i0 = $i0 + -1;

        goto label24;

     label27:
        $i1 = $i1 + 1;

        goto label25;

     label28:
        $r1 = virtualinvoke r10.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        if $r1 == null goto label31;

        $r11 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        r6 = $r3[i2];

        $i0 = 0;

     label29:
        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 >= $i1 goto label31;

        $r9 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>($i0);

        r22 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        virtualinvoke r22.<org.spongycastle.jce.provider.PKIXPolicyNode: void setCritical(boolean)>($z0);

        $i0 = $i0 + 1;

        goto label29;

     label30:
        return null;

     label31:
        return $r2;

        catch org.spongycastle.jce.provider.AnnotatedException from label01 to label02 with label06;
        catch java.security.cert.CertPathValidatorException from label04 to label05 with label07;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode processCertE(java.security.cert.CertPath, int, org.spongycastle.jce.provider.PKIXPolicyNode) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0;
        org.spongycastle.jce.provider.AnnotatedException r1;
        org.spongycastle.jce.provider.PKIXPolicyNode $r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.security.cert.X509Certificate r5;
        java.lang.String $r6;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.ASN1Sequence $r8;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r9;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.jce.provider.PKIXPolicyNode;

        $r3 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (java.security.cert.X509Certificate) $r4;

        $r6 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String CERTIFICATE_POLICIES>;

     label1:
        $r7 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r5, $r6);

        $r8 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

     label2:
        if $r8 != null goto label4;

        return null;

     label3:
        r1 := @caughtexception;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Could not read certificate policies extension from certificate.", r1, $r0, $i0);

        throw $r9;

     label4:
        return $r2;

        catch org.spongycastle.jce.provider.AnnotatedException from label1 to label2 with label3;
    }
    protected static void processCertF(java.security.cert.CertPath, int, org.spongycastle.jce.provider.PKIXPolicyNode, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, $i1;
        org.spongycastle.jce.provider.PKIXPolicyNode $r1;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r2;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.spongycastle.jce.provider.PKIXPolicyNode;

        $i1 := @parameter3: int;

        if $i1 > 0 goto label1;

        if $r1 != null goto label1;

        $r2 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r2.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("No valid policy tree found when one expected.", null, $r0, $i0);

        throw $r2;

     label1:
        return;
    }
    protected static int wrapupCertA(int, java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r0;
        boolean $z0;
        int $i0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.security.cert.X509Certificate;

        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isSelfIssued(java.security.cert.X509Certificate)>($r0);

        if $z0 != 0 goto label1;

        if $i0 == 0 goto label1;

        $i0 = $i0 + -1;

     label1:
        return $i0;
    }
    protected static int wrapupCertB(java.security.cert.CertPath, int, int) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0, i1, $i2;
        java.util.List $r1;
        java.lang.Object $r2;
        java.security.cert.X509Certificate r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.ASN1Sequence $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        org.spongycastle.asn1.ASN1TaggedObject r8;
        org.spongycastle.asn1.ASN1Integer $r9;
        java.math.BigInteger $r10;
        org.spongycastle.jce.provider.AnnotatedException r11;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r12;
        java.lang.Exception r13;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (java.security.cert.X509Certificate) $r2;

        $r4 = <org.spongycastle.jce.provider.RFC3280CertPathUtilities: java.lang.String POLICY_CONSTRAINTS>;

     label1:
        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String)>(r3, $r4);

        $r6 = staticinvoke <org.spongycastle.asn1.DERSequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r5);

     label2:
        if $r6 == null goto label9;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label9;

        $r2 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (org.spongycastle.asn1.ASN1TaggedObject) $r2;

        $i2 = virtualinvoke r8.<org.spongycastle.asn1.ASN1TaggedObject: int getTagNo()>();

        lookupswitch($i2)
        {
            case 0: goto label5;
            default: goto label4;
        };

     label4:
        goto label3;

     label5:
        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>(r8, 0);

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i2 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

     label6:
        if $i2 != 0 goto label3;

        return 0;

     label7:
        r11 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints could not be decoded.", r11, $r0, $i0);

        throw $r12;

     label8:
        r13 := @caughtexception;

        $r12 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r12.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Policy constraints requireExplicitPolicy field could not be decoded.", r13, $r0, $i0);

        throw $r12;

     label9:
        return i1;

        catch org.spongycastle.jce.provider.AnnotatedException from label1 to label2 with label7;
        catch java.lang.Exception from label5 to label6 with label8;
    }
    protected static void wrapupCertF(java.security.cert.CertPath, int, java.util.List, java.util.Set) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        int $i0;
        java.util.List $r1, $r4;
        java.util.Set $r2;
        java.security.cert.CertPathValidatorException r3;
        java.lang.Object $r5;
        java.security.cert.X509Certificate r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.security.cert.PKIXCertPathChecker $r8;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        $r0 := @parameter0: java.security.cert.CertPath;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.List;

        $r2 := @parameter3: java.util.Set;

        $r4 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

     label2:
        $r5 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label3:
        $r8 = (java.security.cert.PKIXCertPathChecker) $r5;

     label4:
        virtualinvoke $r8.<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection)>(r6, $r2);

     label5:
        goto label1;

     label6:
        r3 := @caughtexception;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Additional certificate path checker failed.", r3, $r0, $i0);

        throw $r9;

     label7:
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $r9 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate has unsupported critical extension: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>($r11, null, $r0, $i0);

        throw $r9;

     label8:
        return;

        catch java.security.cert.CertPathValidatorException from label2 to label3 with label6;
        catch java.security.cert.CertPathValidatorException from label4 to label5 with label6;
    }
    protected static org.spongycastle.jce.provider.PKIXPolicyNode wrapupCertG(java.security.cert.CertPath, org.spongycastle.jcajce.PKIXExtendedParameters, java.util.Set, int, java.util.List[], org.spongycastle.jce.provider.PKIXPolicyNode, java.util.Set) throws java.security.cert.CertPathValidatorException
    {
        java.security.cert.CertPath $r0;
        org.spongycastle.jcajce.PKIXExtendedParameters $r1;
        java.util.Set $r2, $r4;
        int $i0, $i1, $i2, $i3;
        java.util.List[] $r3;
        org.spongycastle.jce.provider.PKIXPolicyNode $r5, r10;
        java.util.List $r6;
        boolean $z0;
        org.spongycastle.jce.exception.ExtCertPathValidatorException $r7;
        java.util.HashSet r8;
        java.lang.Object $r9;
        java.lang.String $r11, $r12;
        java.util.Iterator $r13;

        $r0 := @parameter0: java.security.cert.CertPath;

        $r1 := @parameter1: org.spongycastle.jcajce.PKIXExtendedParameters;

        $r2 := @parameter2: java.util.Set;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.util.List[];

        $r5 := @parameter5: org.spongycastle.jce.provider.PKIXPolicyNode;

        $r4 := @parameter6: java.util.Set;

        $r6 = virtualinvoke $r0.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $r5 != null goto label02;

        $z0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isExplicitPolicyRequired()>();

        if $z0 == 0 goto label01;

        $r7 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r7.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Explicit policy requested but none available.", null, $r0, $i0);

        throw $r7;

     label01:
        return null;

     label02:
        $z0 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: boolean isAnyPolicy(java.util.Set)>($r2);

        if $z0 == 0 goto label17;

        $z0 = virtualinvoke $r1.<org.spongycastle.jcajce.PKIXExtendedParameters: boolean isExplicitPolicyRequired()>();

        if $z0 == 0 goto label16;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r7 = new org.spongycastle.jce.exception.ExtCertPathValidatorException;

        specialinvoke $r7.<org.spongycastle.jce.exception.ExtCertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Explicit policy requested but none available.", null, $r0, $i0);

        throw $r7;

     label03:
        r8 = new java.util.HashSet;

        specialinvoke r8.<java.util.HashSet: void <init>()>();

        $i0 = 0;

     label04:
        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label09;

        $r6 = $r3[$i0];

        $i2 = 0;

     label05:
        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 >= $i3 goto label08;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r11 = "2.5.29.32.0";

        $r12 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label07;

        $r13 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label06:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r9 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label06;

     label07:
        $i2 = $i2 + 1;

        goto label05;

     label08:
        $i0 = $i0 + 1;

        goto label04;

     label09:
        $r13 = interfaceinvoke r8.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r9 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r11 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z0 != 0 goto label10;

        goto label10;

     label11:
        if $r5 == null goto label16;

        $i0 = $i1 + -1;

     label12:
        if $i0 < 0 goto label16;

        $r6 = $r3[$i0];

        $i1 = 0;

     label13:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 >= $i2 goto label15;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $z0 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 != 0 goto label14;

        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r5, $r3, r10);

     label14:
        $i1 = $i1 + 1;

        goto label13;

     label15:
        $i0 = $i0 + -1;

        goto label12;

     label16:
        return $r5;

     label17:
        r8 = new java.util.HashSet;

        specialinvoke r8.<java.util.HashSet: void <init>()>();

        $i0 = 0;

     label18:
        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label23;

        $r6 = $r3[$i0];

        $i2 = 0;

     label19:
        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 >= $i3 goto label22;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r11 = "2.5.29.32.0";

        $r12 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label21;

        $r13 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.util.Iterator getChildren()>();

     label20:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r9 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r11 = "2.5.29.32.0";

        $r12 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label20;

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r10);

        goto label20;

     label21:
        $i2 = $i2 + 1;

        goto label19;

     label22:
        $i0 = $i0 + 1;

        goto label18;

     label23:
        $r13 = interfaceinvoke r8.<java.util.Set: java.util.Iterator iterator()>();

     label24:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label25;

        $r9 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $r11 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: java.lang.String getValidPolicy()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z0 != 0 goto label24;

        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r5, $r3, r10);

        goto label24;

     label25:
        if $r5 == null goto label30;

        $i0 = $i1 + -1;

     label26:
        if $i0 < 0 goto label30;

        $r6 = $r3[$i0];

        $i1 = 0;

     label27:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 >= $i2 goto label29;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

        r10 = (org.spongycastle.jce.provider.PKIXPolicyNode) $r9;

        $z0 = virtualinvoke r10.<org.spongycastle.jce.provider.PKIXPolicyNode: boolean hasChildren()>();

        if $z0 != 0 goto label28;

        $r5 = staticinvoke <org.spongycastle.jce.provider.CertPathValidatorUtilities: org.spongycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.spongycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.spongycastle.jce.provider.PKIXPolicyNode)>($r5, $r3, r10);

     label28:
        $i1 = $i1 + 1;

        goto label27;

     label29:
        $i0 = $i0 + -1;

        goto label26;

     label30:
        return $r5;
    }
