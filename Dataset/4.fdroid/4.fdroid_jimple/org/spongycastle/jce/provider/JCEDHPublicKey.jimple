org.spongycastle.jce.provider.JCEDHPublicKey extends java.lang.Object implements javax.crypto.interfaces.DHPublicKey
static final long serialVersionUID
private javax.crypto.spec.DHParameterSpec dhSpec
private org.spongycastle.asn1.x509.SubjectPublicKeyInfo info
private java.math.BigInteger y
    void <init>(java.math.BigInteger, javax.crypto.spec.DHParameterSpec)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        java.math.BigInteger $r1;
        javax.crypto.spec.DHParameterSpec $r2;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: javax.crypto.spec.DHParameterSpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r1;

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r2;

        return;
    }
    void <init>(javax.crypto.interfaces.DHPublicKey)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        javax.crypto.interfaces.DHPublicKey $r1;
        java.math.BigInteger $r2;
        javax.crypto.spec.DHParameterSpec $r3;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: javax.crypto.interfaces.DHPublicKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke $r1.<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r2;

        $r3 = interfaceinvoke $r1.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r3;

        return;
    }
    void <init>(javax.crypto.spec.DHPublicKeySpec)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        javax.crypto.spec.DHPublicKeySpec $r1;
        java.math.BigInteger $r2, $r4;
        javax.crypto.spec.DHParameterSpec $r3;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: javax.crypto.spec.DHPublicKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r2;

        $r3 = new javax.crypto.spec.DHParameterSpec;

        $r2 = virtualinvoke $r1.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()>();

        $r4 = virtualinvoke $r1.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()>();

        specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r2, $r4);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r3;

        return;
    }
    void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        org.spongycastle.asn1.ASN1Integer r4;
        java.math.BigInteger $r5, $r13, $r14;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r6;
        org.spongycastle.asn1.ASN1Encodable $r7;
        org.spongycastle.asn1.ASN1Sequence $r8;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r9, $r10;
        boolean $z0;
        org.spongycastle.asn1.pkcs.DHParameter $r11;
        javax.crypto.spec.DHParameterSpec $r12;
        int $i0;
        java.lang.IllegalArgumentException $r15;
        org.spongycastle.asn1.x9.DHDomainParameters $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: org.spongycastle.asn1.x509.SubjectPublicKeyInfo info> = $r1;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

     label2:
        r4 = (org.spongycastle.asn1.ASN1Integer) $r3;

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r5;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r9 = virtualinvoke $r6.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement>;

        $z0 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label3;

        $z0 = specialinvoke r0.<org.spongycastle.jce.provider.JCEDHPublicKey: boolean isPKCSParam(org.spongycastle.asn1.ASN1Sequence)>($r8);

        if $z0 == 0 goto label6;

     label3:
        $r11 = staticinvoke <org.spongycastle.asn1.pkcs.DHParameter: org.spongycastle.asn1.pkcs.DHParameter getInstance(java.lang.Object)>($r8);

        $r5 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getL()>();

        if $r5 == null goto label5;

        $r12 = new javax.crypto.spec.DHParameterSpec;

        $r5 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getP()>();

        $r13 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getG()>();

        $r14 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getL()>();

        $i0 = virtualinvoke $r14.<java.math.BigInteger: int intValue()>();

        specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r5, $r13, $i0);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r12;

        return;

     label4:
        r2 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid info structure in DH public key");

        throw $r15;

     label5:
        $r12 = new javax.crypto.spec.DHParameterSpec;

        $r5 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getP()>();

        $r13 = virtualinvoke $r11.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getG()>();

        specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r12;

        return;

     label6:
        $r10 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dhpublicnumber>;

        $z0 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label7;

        $r16 = staticinvoke <org.spongycastle.asn1.x9.DHDomainParameters: org.spongycastle.asn1.x9.DHDomainParameters getInstance(java.lang.Object)>($r8);

        $r12 = new javax.crypto.spec.DHParameterSpec;

        r4 = virtualinvoke $r16.<org.spongycastle.asn1.x9.DHDomainParameters: org.spongycastle.asn1.ASN1Integer getP()>();

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        r4 = virtualinvoke $r16.<org.spongycastle.asn1.x9.DHDomainParameters: org.spongycastle.asn1.ASN1Integer getG()>();

        $r13 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        specialinvoke $r12.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r13);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r12;

        return;

     label7:
        $r15 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown algorithm type: ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r15;

        catch java.io.IOException from label1 to label2 with label4;
    }
    void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r1;
        java.math.BigInteger $r2, $r5;
        javax.crypto.spec.DHParameterSpec $r3;
        org.spongycastle.crypto.params.DHParameters $r4;
        int $i0;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHPublicKeyParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r2;

        $r3 = new javax.crypto.spec.DHParameterSpec;

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: int getL()>();

        specialinvoke $r3.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r2, $r5, $i0);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r3;

        return;
    }
    private boolean isPKCSParam(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        int $i0;
        org.spongycastle.asn1.ASN1Encodable $r2;
        org.spongycastle.asn1.ASN1Integer $r3, $r4;
        java.math.BigInteger $r5, $r6;
        long $l1;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 != 2 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 <= 3 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r2);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r4 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        $l1 = (long) $i0;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 <= 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        java.io.ObjectInputStream $r1;
        javax.crypto.spec.DHParameterSpec $r2;
        java.lang.Object $r3;
        java.math.BigInteger $r4, $r5;
        int $i0;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (java.math.BigInteger) $r3;

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y> = $r4;

        $r2 = new javax.crypto.spec.DHParameterSpec;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (java.math.BigInteger) $r3;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.math.BigInteger) $r3;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        specialinvoke $r2.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r4, $r5, $i0);

        r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec> = $r2;

        return;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        java.io.ObjectOutputStream $r1;
        java.math.BigInteger $r2;
        javax.crypto.spec.DHParameterSpec $r3;
        int $i0;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger getY()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $r2 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $r2 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $i0 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: int getL()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        return;
    }
    public java.lang.String getAlgorithm()
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        return "DH";
    }
    public byte[] getEncoded()
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        byte[] $r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r4;
        org.spongycastle.asn1.pkcs.DHParameter $r5;
        javax.crypto.spec.DHParameterSpec $r6;
        java.math.BigInteger $r7, $r8;
        int $i0;
        org.spongycastle.asn1.ASN1Integer $r9;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        $r1 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: org.spongycastle.asn1.x509.SubjectPublicKeyInfo info>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: org.spongycastle.asn1.x509.SubjectPublicKeyInfo info>;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil: byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r1);

        return $r2;

     label1:
        $r3 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r4 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement>;

        $r5 = new org.spongycastle.asn1.pkcs.DHParameter;

        $r6 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $r7 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r6 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $r8 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $r6 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        $i0 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: int getL()>();

        specialinvoke $r5.<org.spongycastle.asn1.pkcs.DHParameter: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r7, $r8, $i0);

        specialinvoke $r3.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r4, $r5);

        $r9 = new org.spongycastle.asn1.ASN1Integer;

        $r7 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y>;

        specialinvoke $r9.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r7);

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil: byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r3, $r9);

        return $r2;
    }
    public java.lang.String getFormat()
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        return "X.509";
    }
    public javax.crypto.spec.DHParameterSpec getParams()
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        javax.crypto.spec.DHParameterSpec r1;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        r1 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: javax.crypto.spec.DHParameterSpec dhSpec>;

        return r1;
    }
    public java.math.BigInteger getY()
    {
        org.spongycastle.jce.provider.JCEDHPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jce.provider.JCEDHPublicKey;

        r1 = r0.<org.spongycastle.jce.provider.JCEDHPublicKey: java.math.BigInteger y>;

        return r1;
    }
