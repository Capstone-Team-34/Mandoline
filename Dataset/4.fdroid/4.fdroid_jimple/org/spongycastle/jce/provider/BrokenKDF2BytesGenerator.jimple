org.spongycastle.jce.provider.BrokenKDF2BytesGenerator extends java.lang.Object implements org.spongycastle.crypto.DerivationFunction
private org.spongycastle.crypto.Digest digest
private byte[] iv
private byte[] shared
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.jce.provider.BrokenKDF2BytesGenerator r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jce.provider.BrokenKDF2BytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.jce.provider.BrokenKDF2BytesGenerator r0;
        byte[] $r1, r5, $r6, $r7;
        int $i0, i1, $i3, $i6, $i7, $i8;
        long l2, $l4;
        org.spongycastle.crypto.DataLengthException $r2;
        org.spongycastle.crypto.Digest $r3;
        byte $b5;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.jce.provider.BrokenKDF2BytesGenerator;

        $r1 := @parameter0: byte[];

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        i1 = lengthof $r1;

        i1 = i1 - $i0;

        if i1 >= $i3 goto label1;

        $r2 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r2.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too small");

        throw $r2;

     label1:
        i1 = $i0 * 8;

        l2 = (long) i1;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i1 = i1 * 8;

        $l4 = (long) i1;

        $l4 = $l4 * 29L;

        $b5 = l2 cmp $l4;

        if $b5 <= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output length to large");

     label2:
        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $l4 = (long) i1;

        l2 = l2 / $l4;

        i1 = (int) l2;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i6 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[$i6];

        $i6 = 1;

     label3:
        if $i6 > i1 goto label6;

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r6 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] shared>;

        $r7 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] shared>;

        $i7 = lengthof $r7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r6, 0, $i7);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i7 = $i6 & 255;

        $b5 = (byte) $i7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte)>($b5);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i7 = $i6 >> 8;

        $i7 = $i7 & 255;

        $b5 = (byte) $i7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte)>($b5);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i7 = $i6 >> 16;

        $i7 = $i7 & 255;

        $b5 = (byte) $i7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte)>($b5);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i7 = $i6 >> 24;

        $i7 = $i7 & 255;

        $b5 = (byte) $i7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte)>($b5);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r6 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] iv>;

        $r7 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] iv>;

        $i7 = lengthof $r7;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r6, 0, $i7);

        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r5, 0);

        $i7 = $i0 - $i3;

        $i8 = lengthof r5;

        if $i7 <= $i8 goto label5;

        $i7 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i3, $i7);

        $i7 = lengthof r5;

        $i3 = $i3 + $i7;

     label4:
        $i6 = $i6 + 1;

        goto label3;

     label5:
        $i7 = $i0 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i3, $i7);

        goto label4;

     label6:
        $r3 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void reset()>();

        return $i0;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.jce.provider.BrokenKDF2BytesGenerator r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.jce.provider.BrokenKDF2BytesGenerator;

        r1 = r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.jce.provider.BrokenKDF2BytesGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.KDFParameters r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jce.provider.BrokenKDF2BytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KDFParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("KDF parameters required for KDF2Generator");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.KDFParameters) $r1;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFParameters: byte[] getSharedSecret()>();

        r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] shared> = $r4;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFParameters: byte[] getIV()>();

        r0.<org.spongycastle.jce.provider.BrokenKDF2BytesGenerator: byte[] iv> = $r4;

        return;
    }
