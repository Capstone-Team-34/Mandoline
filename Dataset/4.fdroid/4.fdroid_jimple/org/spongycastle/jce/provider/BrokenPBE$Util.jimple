org.spongycastle.jce.provider.BrokenPBE$Util extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.jce.provider.BrokenPBE$Util r0;

        r0 := @this: org.spongycastle.jce.provider.BrokenPBE$Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int, int)
    {
        int $i0, $i1;
        java.lang.IllegalStateException $r0;
        org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator r1;
        org.spongycastle.crypto.digests.MD5Digest $r2;
        org.spongycastle.crypto.digests.SHA1Digest $r3;
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r4;
        org.spongycastle.jce.provider.OldPKCS12ParametersGenerator r5;
        org.spongycastle.crypto.digests.RIPEMD160Digest $r6;
        org.spongycastle.crypto.generators.PKCS12ParametersGenerator r7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != 0 goto label04;

        lookupswitch($i1)
        {
            case 0: goto label02;
            case 1: goto label03;
            default: goto label01;
        };

     label01:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("PKCS5 scheme 1 only supports only MD5 and SHA1.");

        throw $r0;

     label02:
        r1 = new org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r1.<org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r1;

     label03:
        r1 = new org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r1.<org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r1;

     label04:
        if $i0 != 1 goto label05;

        r4 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        specialinvoke r4.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>()>();

        return r4;

     label05:
        if $i0 != 3 goto label10;

        lookupswitch($i1)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            default: goto label06;
        };

     label06:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown digest scheme for PBE encryption.");

        throw $r0;

     label07:
        r5 = new org.spongycastle.jce.provider.OldPKCS12ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.jce.provider.OldPKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r5;

     label08:
        r5 = new org.spongycastle.jce.provider.OldPKCS12ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.jce.provider.OldPKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r5;

     label09:
        r5 = new org.spongycastle.jce.provider.OldPKCS12ParametersGenerator;

        $r6 = new org.spongycastle.crypto.digests.RIPEMD160Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.RIPEMD160Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.jce.provider.OldPKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r6);

        return r5;

     label10:
        lookupswitch($i1)
        {
            case 0: goto label12;
            case 1: goto label13;
            case 2: goto label14;
            default: goto label11;
        };

     label11:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown digest scheme for PBE encryption.");

        throw $r0;

     label12:
        r7 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r7.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r7;

     label13:
        r7 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r7.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r7;

     label14:
        r7 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r6 = new org.spongycastle.crypto.digests.RIPEMD160Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.RIPEMD160Digest: void <init>()>();

        specialinvoke r7.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r6);

        return r7;
    }
    static org.spongycastle.crypto.CipherParameters makePBEMacParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, java.security.spec.AlgorithmParameterSpec, int, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.spec.PBEParameterSpec r3;
        org.spongycastle.crypto.PBEParametersGenerator $r4;
        byte[] $r5, $r6;
        org.spongycastle.crypto.CipherParameters $r7;

        $r0 := @parameter0: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r2;

     label2:
        r3 = (javax.crypto.spec.PBEParameterSpec) $r1;

        $r4 = staticinvoke <org.spongycastle.jce.provider.BrokenPBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: byte[] getEncoded()>();

        $r6 = virtualinvoke r3.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r4.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r5, $r6, $i0);

        $r7 = virtualinvoke $r4.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i2);

        $i0 = 0;

     label3:
        $i1 = lengthof $r5;

        if $i0 == $i1 goto label4;

        $r5[$i0] = 0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r7;
    }
    static org.spongycastle.crypto.CipherParameters makePBEParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, java.security.spec.AlgorithmParameterSpec, int, int, java.lang.String, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.spec.PBEParameterSpec r4;
        org.spongycastle.crypto.PBEParametersGenerator $r5;
        byte[] $r6, $r7;
        org.spongycastle.crypto.CipherParameters $r8, $r10;
        org.spongycastle.crypto.params.ParametersWithIV $r9;
        org.spongycastle.crypto.params.KeyParameter r11;

        $r0 := @parameter0: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.String;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r3;

     label2:
        r4 = (javax.crypto.spec.PBEParameterSpec) $r1;

        $r5 = staticinvoke <org.spongycastle.jce.provider.BrokenPBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r6 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: byte[] getEncoded()>();

        $r7 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r6, $r7, $i0);

        if $i3 == 0 goto label6;

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i2, $i3);

     label3:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES");

        if $z0 == 0 goto label4;

        $z0 = $r8 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label7;

        $r9 = (org.spongycastle.crypto.params.ParametersWithIV) $r8;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r11 = (org.spongycastle.crypto.params.KeyParameter) $r10;

        $r7 = virtualinvoke r11.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.jce.provider.BrokenPBE$Util: void setOddParity(byte[])>($r7);

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r6;

        if $i0 == $i1 goto label8;

        $r6[$i0] = 0;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i2);

        goto label3;

     label7:
        r11 = (org.spongycastle.crypto.params.KeyParameter) $r8;

        $r7 = virtualinvoke r11.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.jce.provider.BrokenPBE$Util: void setOddParity(byte[])>($r7);

        goto label4;

     label8:
        return $r8;
    }
    private static void setOddParity(byte[])
    {
        byte[] $r0;
        byte b0;
        int i1, $i2, $i3, $i4;

        $r0 := @parameter0: byte[];

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        b0 = $r0[i1];

        $i2 = b0 & 254;

        $i3 = b0 >> 1;

        $i4 = b0 >> 2;

        $i3 = $i3 ^ $i4;

        $i4 = b0 >> 3;

        $i3 = $i3 ^ $i4;

        $i4 = b0 >> 4;

        $i3 = $i3 ^ $i4;

        $i4 = b0 >> 5;

        $i3 = $i3 ^ $i4;

        $i4 = b0 >> 6;

        $i3 = $i3 ^ $i4;

        $i4 = b0 >> 7;

        $i3 = $i3 ^ $i4;

        $i3 = $i3 ^ 1;

        $i2 = $i2 | $i3;

        b0 = (byte) $i2;

        $r0[i1] = b0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
