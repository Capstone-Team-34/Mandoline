org.spongycastle.math.ec.ECPoint extends java.lang.Object
protected static org.spongycastle.math.ec.ECFieldElement[] EMPTY_ZS
protected org.spongycastle.math.ec.ECCurve curve
protected java.util.Hashtable preCompTable
protected boolean withCompression
protected org.spongycastle.math.ec.ECFieldElement x
protected org.spongycastle.math.ec.ECFieldElement y
protected org.spongycastle.math.ec.ECFieldElement[] zs
    static void <clinit>()
    {
        org.spongycastle.math.ec.ECFieldElement[] $r0;

        $r0 = newarray (org.spongycastle.math.ec.ECFieldElement)[0];

        <org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] EMPTY_ZS> = $r0;

        return;
    }
    protected void <init>(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        org.spongycastle.math.ec.ECFieldElement $r2, $r3;
        org.spongycastle.math.ec.ECFieldElement[] $r4;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r3 := @parameter2: org.spongycastle.math.ec.ECFieldElement;

        $r4 = staticinvoke <org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] getInitialZCoords(org.spongycastle.math.ec.ECCurve)>($r1);

        specialinvoke r0.<org.spongycastle.math.ec.ECPoint: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[])>($r1, $r2, $r3, $r4);

        return;
    }
    protected void <init>(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement[])
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        org.spongycastle.math.ec.ECFieldElement $r2, $r3;
        org.spongycastle.math.ec.ECFieldElement[] $r4;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r3 := @parameter2: org.spongycastle.math.ec.ECFieldElement;

        $r4 := @parameter3: org.spongycastle.math.ec.ECFieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.ec.ECPoint: java.util.Hashtable preCompTable> = null;

        r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve curve> = $r1;

        r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement x> = $r2;

        r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement y> = $r3;

        r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs> = $r4;

        return;
    }
    protected static org.spongycastle.math.ec.ECFieldElement[] getInitialZCoords(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        int i0;
        java.math.BigInteger $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.math.ec.ECFieldElement[] $r4;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        if $r0 != null goto label4;

        i0 = 0;

     label1:
        lookupswitch(i0)
        {
            case 0: goto label5;
            case 5: goto label5;
            default: goto label2;
        };

     label2:
        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r1);

        lookupswitch(i0)
        {
            case 1: goto label6;
            case 2: goto label6;
            case 3: goto label7;
            case 4: goto label8;
            case 5: goto label3;
            case 6: goto label6;
            default: goto label3;
        };

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown coordinate system");

        throw $r3;

     label4:
        i0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: int getCoordinateSystem()>();

        goto label1;

     label5:
        $r4 = <org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] EMPTY_ZS>;

        return $r4;

     label6:
        $r4 = newarray (org.spongycastle.math.ec.ECFieldElement)[1];

        $r4[0] = $r2;

        return $r4;

     label7:
        $r4 = newarray (org.spongycastle.math.ec.ECFieldElement)[3];

        $r4[0] = $r2;

        $r4[1] = $r2;

        $r4[2] = $r2;

        return $r4;

     label8:
        $r4 = newarray (org.spongycastle.math.ec.ECFieldElement)[2];

        $r4[0] = $r2;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r4[1] = $r2;

        return $r4;
    }
public abstract org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) { 
// no body
} 
    protected void checkNormalized()
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isNormalized()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("point not in normal form");

        throw $r1;

     label1:
        return;
    }
    protected org.spongycastle.math.ec.ECPoint createScaledPoint(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1, $r2, $r4;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve $r3;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawXCoord()>();

        $r1 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r1);

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawYCoord()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r2);

        $z0 = r0.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        r0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean)>($r1, $r2, $z0);

        return r0;
    }
protected abstract org.spongycastle.math.ec.ECPoint detach() { 
// no body
} 
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.ec.ECPoint r0, r2;
        boolean $z0;
        java.lang.Object r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.spongycastle.math.ec.ECPoint;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.spongycastle.math.ec.ECPoint) r1;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean equals(org.spongycastle.math.ec.ECPoint)>(r2);

        return $z0;
    }
    public boolean equals(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECPoint r0, $r1, r5, r6;
        org.spongycastle.math.ec.ECPoint[] r2;
        boolean $z0, z1, z2, $z3, $z4;
        org.spongycastle.math.ec.ECCurve $r3, $r4;
        org.spongycastle.math.ec.ECFieldElement $r7, $r8;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $z0 = 1;

        if $r1 != null goto label01;

        return 0;

     label01:
        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if $r3 != null goto label06;

        z1 = 1;

     label02:
        if $r4 != null goto label07;

        z2 = 1;

     label03:
        $z3 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        $z4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z3 != 0 goto label04;

        if $z4 == 0 goto label09;

     label04:
        if $z3 == 0 goto label08;

        if $z4 == 0 goto label08;

        if z1 != 0 goto label05;

        if z2 != 0 goto label05;

        z1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r4);

        if z1 == 0 goto label08;

     label05:
        return $z0;

     label06:
        z1 = 0;

        goto label02;

     label07:
        z2 = 0;

        goto label03;

     label08:
        $z0 = 0;

        goto label05;

     label09:
        r5 = r0;

        r6 = $r1;

        if z1 == 0 goto label12;

        if z2 == 0 goto label12;

     label10:
        $r7 = virtualinvoke r5.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r8 = virtualinvoke r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if z1 == 0 goto label15;

        $r7 = virtualinvoke r5.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $r8 = virtualinvoke r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if z1 == 0 goto label15;

     label11:
        return $z0;

     label12:
        if z1 == 0 goto label13;

        r6 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        goto label10;

     label13:
        if z2 == 0 goto label14;

        r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        goto label10;

     label14:
        z1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r4);

        if z1 == 0 goto label16;

        r2 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        r2[0] = r0;

        r0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)>($r1);

        r2[1] = r0;

        virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r2);

        r5 = r2[0];

        r6 = r2[1];

        goto label10;

     label15:
        $z0 = 0;

        goto label11;

     label16:
        return 0;
    }
    public org.spongycastle.math.ec.ECFieldElement getAffineXCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: void checkNormalized()>();

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        return $r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getAffineYCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: void checkNormalized()>();

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        return $r1;
    }
protected abstract boolean getCompressionYTilde() { 
// no body
} 
    public org.spongycastle.math.ec.ECCurve getCurve()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECCurve r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve curve>;

        return r1;
    }
    protected int getCurveCoordinateSystem()
    {
        org.spongycastle.math.ec.ECPoint r0;
        int $i0;
        org.spongycastle.math.ec.ECCurve $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve curve>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve curve>;

        $i0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: int getCoordinateSystem()>();

        return $i0;
    }
    public final org.spongycastle.math.ec.ECPoint getDetachedPoint()
    {
        org.spongycastle.math.ec.ECPoint r0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint detach()>();

        return r0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.math.ec.ECPoint r0;
        byte[] $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 = r0.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded(boolean)>($z0);

        return $r1;
    }
    public byte[] getEncoded(boolean)
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean $z0, $z1;
        byte[] r1, r3, r4;
        org.spongycastle.math.ec.ECFieldElement $r2;
        int $i0, $i2;
        byte $b1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z1 == 0 goto label1;

        r1 = newarray (byte)[1];

        return r1;

     label1:
        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        r1 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        if $z0 == 0 goto label4;

        $i0 = lengthof r1;

        $i0 = $i0 + 1;

        r3 = newarray (byte)[$i0];

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean getCompressionYTilde()>();

        if $z0 == 0 goto label3;

        $b1 = 3;

     label2:
        r3[0] = $b1;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 1, $i0);

        return r3;

     label3:
        $b1 = 2;

        goto label2;

     label4:
        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        $i0 = lengthof r1;

        $i2 = lengthof r3;

        $i0 = $i0 + $i2;

        $i0 = $i0 + 1;

        r4 = newarray (byte)[$i0];

        r4[0] = 4;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 1, $i0);

        $i0 = lengthof r1;

        $i0 = $i0 + 1;

        $i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i0, $i2);

        return r4;
    }
    public final org.spongycastle.math.ec.ECFieldElement getRawXCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement x>;

        return r1;
    }
    public final org.spongycastle.math.ec.ECFieldElement getRawYCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement y>;

        return r1;
    }
    protected final org.spongycastle.math.ec.ECFieldElement[] getRawZCoords()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement[] r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        return r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getX()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        return $r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getXCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement x>;

        return r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getY()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        return $r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getYCoord()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement y>;

        return r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getZCoord(int)
    {
        org.spongycastle.math.ec.ECPoint r0;
        int $i0, $i1;
        org.spongycastle.math.ec.ECFieldElement[] $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public org.spongycastle.math.ec.ECFieldElement[] getZCoords()
    {
        org.spongycastle.math.ec.ECPoint r0;
        int i0;
        org.spongycastle.math.ec.ECFieldElement[] $r1, $r2;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        i0 = lengthof $r1;

        if i0 != 0 goto label1;

        $r1 = <org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] EMPTY_ZS>;

        return $r1;

     label1:
        $r1 = newarray (org.spongycastle.math.ec.ECFieldElement)[i0];

        $r2 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, i0);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        int i0, $i1;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r2;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if $r1 != null goto label2;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 != 0 goto label3;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 * 17;

        i0 = i0 ^ $i1;

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 * 257;

        i0 = i0 ^ $i1;

        return i0;

     label2:
        i0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: int hashCode()>();

        i0 = i0 ^ -1;

        goto label1;

     label3:
        return i0;
    }
    public boolean isCompressed()
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean z0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        z0 = r0.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        return z0;
    }
    public boolean isInfinity()
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r1;
        org.spongycastle.math.ec.ECFieldElement[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement x>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement y>;

        if $r1 == null goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label2;

        $r2 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $r1 = $r2[0];

        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isNormalized()
    {
        org.spongycastle.math.ec.ECPoint r0;
        int $i0;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement[] $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: int getCurveCoordinateSystem()>();

        if $i0 == 0 goto label1;

        if $i0 == 5 goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $r2 = $r1[0];

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: boolean isOne()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isValid()
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if $r1 == null goto label3;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean satisfiesCurveEquation()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean satisfiesCofactor()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }
    public org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint r0;
        java.math.BigInteger $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECMultiplier $r3;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier getMultiplier()>();

        r0 = interfaceinvoke $r3.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>(r0, $r1);

        return r0;
    }
public abstract org.spongycastle.math.ec.ECPoint negate() { 
// no body
} 
    public org.spongycastle.math.ec.ECPoint normalize()
    {
        org.spongycastle.math.ec.ECPoint r0;
        boolean $z0;
        int $i0;
        org.spongycastle.math.ec.ECFieldElement $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label2;

     label1:
        return r0;

     label2:
        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: int getCurveCoordinateSystem()>();

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 5: goto label1;
            default: goto label3;
        };

     label3:
        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getZCoord(int)>(0);

        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: boolean isOne()>();

        if $z0 != 0 goto label4;

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement invert()>();

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize(org.spongycastle.math.ec.ECFieldElement)>($r1);

     label4:
        return r0;
    }
    org.spongycastle.math.ec.ECPoint normalize(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECFieldElement $r1, $r3;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: int getCurveCoordinateSystem()>();

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label1;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not a projective coordinate system");

        throw $r2;

     label2:
        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint createScaledPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement)>($r1, $r1);

        return r0;

     label3:
        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r1);

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint createScaledPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement)>($r3, $r1);

        return r0;
    }
    protected boolean satisfiesCofactor()
    {
        org.spongycastle.math.ec.ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        java.math.BigInteger $r2, $r3;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve curve>;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger getCofactor()>();

        if $r2 == null goto label1;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint referenceMultiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>(r0, $r2);

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
protected abstract boolean satisfiesCurveEquation() { 
// no body
} 
    public org.spongycastle.math.ec.ECPoint scaleX(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement $r0, $r3;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint r1;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECFieldElement[] $r4;

        r1 := @this: org.spongycastle.math.ec.ECPoint;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $z0 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawXCoord()>();

        $r0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r0);

        $r3 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawYCoord()>();

        $r4 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] getRawZCoords()>();

        $z0 = r1.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        r1 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean)>($r0, $r3, $r4, $z0);

        return r1;
    }
    public org.spongycastle.math.ec.ECPoint scaleY(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement $r0, $r3, $r4;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint r1;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECFieldElement[] $r5;

        r1 := @this: org.spongycastle.math.ec.ECPoint;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $z0 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawXCoord()>();

        $r4 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawYCoord()>();

        $r0 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r0);

        $r5 = virtualinvoke r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] getRawZCoords()>();

        $z0 = r1.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        r1 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean)>($r3, $r0, $r5, $z0);

        return r1;
    }
public abstract org.spongycastle.math.ec.ECPoint subtract(org.spongycastle.math.ec.ECPoint) { 
// no body
} 
    public org.spongycastle.math.ec.ECPoint threeTimes()
    {
        org.spongycastle.math.ec.ECPoint r0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>(r0);

        return r0;
    }
    public org.spongycastle.math.ec.ECPoint timesPow2(int)
    {
        org.spongycastle.math.ec.ECPoint r0;
        java.lang.IllegalArgumentException $r1;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'e\' cannot be negative");

        throw $r1;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twice()>();

        goto label1;

     label2:
        return r0;
    }
    public java.lang.String toString()
    {
        org.spongycastle.math.ec.ECPoint r0;
        java.lang.StringBuffer r1;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r2;
        int i0, $i1;
        org.spongycastle.math.ec.ECFieldElement[] $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        return "INF";

     label1:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawXCoord()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getRawYCoord()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        i0 = 0;

     label2:
        $r3 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r3 = r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement[] zs>;

        $r2 = $r3[i0];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
public abstract org.spongycastle.math.ec.ECPoint twice() { 
// no body
} 
    public org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECPoint r0, $r1;

        r0 := @this: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twice()>();

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r1);

        return r0;
    }
