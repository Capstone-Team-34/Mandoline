org.spongycastle.math.ec.SimpleBigDecimal extends java.lang.Object
private static final long serialVersionUID
private final java.math.BigInteger bigInt
private final int scale
    public void <init>(java.math.BigInteger, int)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        java.math.BigInteger $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scale may not be negative");

        throw $r2;

     label1:
        r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt> = $r1;

        r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale> = $i0;

        return;
    }
    private void checkScale(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i1 = $r1.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only SimpleBigDecimal of same scale allowed in arithmetic operations");

        throw $r2;

     label1:
        return;
    }
    public static org.spongycastle.math.ec.SimpleBigDecimal getInstance(java.math.BigInteger, int)
    {
        java.math.BigInteger $r0;
        int $i0;
        org.spongycastle.math.ec.SimpleBigDecimal $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $r1 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        specialinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r0, $i0);

        return $r1;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal add(java.math.BigInteger)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r2;
        java.math.BigInteger $r1, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r1, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1, $r2;
        java.math.BigInteger $r3, $r4;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        specialinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: void checkScale(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r4 = $r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r4);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r3, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal adjustScale(int)
    {
        int $i0, $i1;
        java.math.BigInteger $r0;
        org.spongycastle.math.ec.SimpleBigDecimal r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scale may not be negative");

        throw $r2;

     label1:
        $i1 = r1.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        if $i0 != $i1 goto label2;

        return r1;

     label2:
        $r3 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r0 = r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i1 = r1.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i1 = $i0 - $i1;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i1);

        specialinvoke $r3.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r0, $i0);

        return $r3;
    }
    public int compareTo(java.math.BigInteger)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        java.math.BigInteger $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        return $i0;
    }
    public int compareTo(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1;
        java.math.BigInteger $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        specialinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: void checkScale(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r2 = $r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        return $i0;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal divide(java.math.BigInteger)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r2;
        java.math.BigInteger $r1, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r1, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal divide(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1, $r3;
        int $i0;
        java.math.BigInteger $r2, $r4;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        specialinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: void checkScale(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r2 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r3 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r4 = $r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r3.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r2, $i0);

        return $r3;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        java.math.BigInteger $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.spongycastle.math.ec.SimpleBigDecimal;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.spongycastle.math.ec.SimpleBigDecimal) $r1;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r4 = r2.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i1 = r2.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        if $i0 == $i1 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.math.BigInteger floor()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        int $i0;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

        return $r1;
    }
    public int getScale()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        int i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        return i0;
    }
    public int hashCode()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        int $i0, $i1;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    public int intValue()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        java.math.BigInteger $r1;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger floor()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    public long longValue()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        java.math.BigInteger $r1;
        long $l0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger floor()>();

        $l0 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l0;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal multiply(java.math.BigInteger)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r2;
        java.math.BigInteger $r1, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r1, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal multiply(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1, $r2;
        int $i0, $i1;
        java.math.BigInteger $r3, $r4;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        specialinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: void checkScale(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r4 = $r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $i1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $i0 = $i1 + $i0;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r3, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal negate()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1;
        int $i0;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r2 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r2, $i0);

        return $r1;
    }
    public java.math.BigInteger round()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, r1;
        java.math.BigInteger $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        r1 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke r1.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r2, 1);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        r1 = virtualinvoke r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal adjustScale(int)>($i0);

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>(r1);

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger floor()>();

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal shiftLeft(int)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1;
        int $i0;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r2 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r2, $i0);

        return $r1;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r2;
        java.math.BigInteger $r1, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = new org.spongycastle.math.ec.SimpleBigDecimal;

        $r3 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        specialinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r1, $i0);

        return $r2;
    }
    public org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal)
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0, $r1;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal negate()>();

        r0 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        return r0;
    }
    public java.lang.String toString()
    {
        org.spongycastle.math.ec.SimpleBigDecimal r0;
        char[] r1;
        java.lang.String r2, $r5;
        java.lang.StringBuffer r3;
        int i0, $i1, i2, $i3;
        java.math.BigInteger $r4, r6, $r7, $r8, $r9;
        boolean $z0;
        char $c4;

        r0 := @this: org.spongycastle.math.ec.SimpleBigDecimal;

        $i1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        if $i1 != 0 goto label1;

        $r4 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString()>();

        return $r5;

     label1:
        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger floor()>();

        r6 = $r4;

        $r7 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r8 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i1);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

        $r7 = $r8;

        $r9 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger bigInt>;

        $i1 = virtualinvoke $r9.<java.math.BigInteger: int signum()>();

        if $i1 != -1 goto label2;

        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i1);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

     label2:
        $i1 = virtualinvoke $r4.<java.math.BigInteger: int signum()>();

        if $i1 != -1 goto label3;

        $r8 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        r6 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r6);

     label3:
        $r5 = virtualinvoke r6.<java.math.BigInteger: java.lang.String toString()>();

        $i1 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        r1 = newarray (char)[$i1];

        r2 = virtualinvoke $r7.<java.math.BigInteger: java.lang.String toString(int)>(2);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i0 = r0.<org.spongycastle.math.ec.SimpleBigDecimal: int scale>;

        i0 = i0 - $i1;

        i2 = 0;

     label4:
        if i2 >= i0 goto label5;

        r1[i2] = 48;

        i2 = i2 + 1;

        goto label4;

     label5:
        i2 = 0;

     label6:
        if i2 >= $i1 goto label7;

        $i3 = i0 + i2;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        r1[$i3] = $c4;

        i2 = i2 + 1;

        goto label6;

     label7:
        r2 = new java.lang.String;

        specialinvoke r2.<java.lang.String: void <init>(char[])>(r1);

        r3 = new java.lang.StringBuffer;

        specialinvoke r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
