org.spongycastle.math.ec.Tnaf extends java.lang.Object
private static final java.math.BigInteger MINUS_ONE
private static final java.math.BigInteger MINUS_THREE
private static final java.math.BigInteger MINUS_TWO
public static final byte POW_2_WIDTH
public static final byte WIDTH
public static final org.spongycastle.math.ec.ZTauElement[] alpha0
public static final byte[][] alpha0Tnaf
public static final org.spongycastle.math.ec.ZTauElement[] alpha1
public static final byte[][] alpha1Tnaf
    static void <clinit>()
    {
        java.math.BigInteger $r0, $r3;
        org.spongycastle.math.ec.ZTauElement[] $r1;
        org.spongycastle.math.ec.ZTauElement $r2;
        byte[][] $r4;
        byte[] $r5;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE> = $r0;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_TWO> = $r0;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger THREE>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE> = $r0;

        $r1 = newarray (org.spongycastle.math.ec.ZTauElement)[9];

        $r1[0] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[1] = $r2;

        $r1[2] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE>;

        $r3 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[3] = $r2;

        $r1[4] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $r3 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[5] = $r2;

        $r1[6] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[7] = $r2;

        $r1[8] = null;

        <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement[] alpha0> = $r1;

        $r4 = newarray (byte[])[8];

        $r4[0] = null;

        $r5 = newarray (byte)[1];

        $r5[0] = 1;

        $r4[1] = $r5;

        $r4[2] = null;

        $r5 = newarray (byte)[3];

        $r5[0] = -1;

        $r5[1] = 0;

        $r5[2] = 1;

        $r4[3] = $r5;

        $r4[4] = null;

        $r5 = newarray (byte)[3];

        $r5[0] = 1;

        $r5[1] = 0;

        $r5[2] = 1;

        $r4[5] = $r5;

        $r4[6] = null;

        $r5 = newarray (byte)[4];

        $r5[0] = -1;

        $r5[1] = 0;

        $r5[2] = 0;

        $r5[3] = 1;

        $r4[7] = $r5;

        <org.spongycastle.math.ec.Tnaf: byte[][] alpha0Tnaf> = $r4;

        $r1 = newarray (org.spongycastle.math.ec.ZTauElement)[9];

        $r1[0] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[1] = $r2;

        $r1[2] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[3] = $r2;

        $r1[4] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[5] = $r2;

        $r1[6] = null;

        $r2 = new org.spongycastle.math.ec.ZTauElement;

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r2.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        $r1[7] = $r2;

        $r1[8] = null;

        <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement[] alpha1> = $r1;

        $r4 = newarray (byte[])[8];

        $r4[0] = null;

        $r5 = newarray (byte)[1];

        $r5[0] = 1;

        $r4[1] = $r5;

        $r4[2] = null;

        $r5 = newarray (byte)[3];

        $r5[0] = -1;

        $r5[1] = 0;

        $r5[2] = 1;

        $r4[3] = $r5;

        $r4[4] = null;

        $r5 = newarray (byte)[3];

        $r5[0] = 1;

        $r5[1] = 0;

        $r5[2] = 1;

        $r4[5] = $r5;

        $r4[6] = null;

        $r5 = newarray (byte)[4];

        $r5[0] = -1;

        $r5[1] = 0;

        $r5[2] = 0;

        $r5[3] = -1;

        $r4[7] = $r5;

        <org.spongycastle.math.ec.Tnaf: byte[][] alpha1Tnaf> = $r4;

        return;
    }
    void <init>()
    {
        org.spongycastle.math.ec.Tnaf r0;

        r0 := @this: org.spongycastle.math.ec.Tnaf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, byte, int, int)
    {
        java.math.BigInteger $r0, $r1, $r2;
        byte $b0;
        int $i1, $i2, i3, $i4;
        boolean $z0;
        org.spongycastle.math.ec.SimpleBigDecimal $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $b0 := @parameter3: byte;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        i3 = $i1 + 5;

        i3 = i3 / 2;

        i3 = i3 + $i2;

        $i4 = $i1 - i3;

        $i4 = $i4 + -2;

        $i4 = $i4 + $b0;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i4);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $i1 = i3 - $i2;

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        $r2 = $r0;

        $i1 = i3 - $i2;

        $i1 = $i1 + -1;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>($i1);

        if $z0 == 0 goto label1;

        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

     label1:
        $r3 = new org.spongycastle.math.ec.SimpleBigDecimal;

        specialinvoke $r3.<org.spongycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>($r2, $i2);

        return $r3;
    }
    public static java.math.BigInteger[] getLucas(byte, int, boolean)
    {
        byte $b0;
        int $i1, i3;
        boolean $z0;
        java.math.BigInteger[] r0;
        java.lang.IllegalArgumentException $r1;
        java.math.BigInteger r2, $r3, r4;
        long $l2;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if $b0 == 1 goto label1;

        if $b0 == -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r1;

     label1:
        if $z0 == 0 goto label5;

        r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $l2 = (long) $b0;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

     label2:
        i3 = 1;

     label3:
        if i3 >= $i1 goto label7;

        if $b0 != 1 goto label6;

        r4 = $r3;

     label4:
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        r2 = $r3;

        $r3 = r4;

        i3 = i3 + 1;

        goto label3;

     label5:
        r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        goto label2;

     label6:
        r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        goto label4;

     label7:
        r0 = newarray (java.math.BigInteger)[2];

        r0[0] = r2;

        r0[1] = $r3;

        return r0;
    }
    public static byte getMu(int)
    {
        int $i0;
        byte $b1;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label2;

        $i0 = -1;

     label1:
        $b1 = (byte) $i0;

        return $b1;

     label2:
        $i0 = 1;

        goto label1;
    }
    public static byte getMu(org.spongycastle.math.ec.ECCurve$AbstractF2m)
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        $z0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: boolean isKoblitz()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No Koblitz curve (ABC), TNAF multiplication not possible");

        throw $r1;

     label1:
        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label2;

        return -1;

     label2:
        return 1;
    }
    public static byte getMu(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement $r0;
        boolean $z0;
        int $i0;
        byte $b1;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $z0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label2;

        $i0 = -1;

     label1:
        $b1 = (byte) $i0;

        return $b1;

     label2:
        $i0 = 1;

        goto label1;
    }
    public static org.spongycastle.math.ec.ECPoint$AbstractF2m[] getPreComp(org.spongycastle.math.ec.ECPoint$AbstractF2m, byte)
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0, $r4;
        byte $b0;
        int i1, i2, $i3;
        org.spongycastle.math.ec.ECPoint$AbstractF2m[] r1;
        byte[][] r2;
        byte[] $r3;
        org.spongycastle.math.ec.ECCurve $r5;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $b0 := @parameter1: byte;

        if $b0 != 0 goto label3;

        r2 = <org.spongycastle.math.ec.Tnaf: byte[][] alpha0Tnaf>;

     label1:
        i1 = lengthof r2;

        i1 = i1 + 1;

        i1 = i1 >>> 1;

        r1 = newarray (org.spongycastle.math.ec.ECPoint$AbstractF2m)[i1];

        r1[0] = $r0;

        i1 = lengthof r2;

        i2 = 3;

     label2:
        if i2 >= i1 goto label4;

        $i3 = i2 >>> 1;

        $r3 = r2[i2];

        $r4 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte[])>($r0, $r3);

        r1[$i3] = $r4;

        i2 = i2 + 2;

        goto label2;

     label3:
        r2 = <org.spongycastle.math.ec.Tnaf: byte[][] alpha1Tnaf>;

        goto label1;

     label4:
        $r5 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r1);

        return r1;
    }
    protected static int getShiftsForCofactor(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.math.BigInteger;

        if $r0 == null goto label2;

        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger FOUR>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 2;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("h (Cofactor) must be 2 or 4");

        throw $r2;
    }
    public static java.math.BigInteger[] getSi(int, int, java.math.BigInteger)
    {
        int $i0, $i1, $i3;
        java.math.BigInteger $r0, $r2, $r3;
        byte $b2;
        java.math.BigInteger[] $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.math.BigInteger;

        $b2 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte getMu(int)>($i1);

        $i3 = staticinvoke <org.spongycastle.math.ec.Tnaf: int getShiftsForCofactor(java.math.BigInteger)>($r0);

        $i0 = $i0 + 3;

        $i0 = $i0 - $i1;

        $r1 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>($b2, $i0, 0);

        if $b2 != 1 goto label1;

        $r0 = $r1[0];

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r1[0] = $r0;

        $r0 = $r1[1];

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r1[1] = $r0;

     label1:
        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r2 = $r1[1];

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i3);

        $r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = $r1[0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i3);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r1 = newarray (java.math.BigInteger)[2];

        $r1[0] = $r0;

        $r1[1] = $r2;

        return $r1;
    }
    public static java.math.BigInteger[] getSi(org.spongycastle.math.ec.ECCurve$AbstractF2m)
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m $r0;
        int i0, $i1, $i3;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;
        java.math.BigInteger $r3, $r5, $r6;
        byte $b2;
        java.math.BigInteger[] $r4;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        $z0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: boolean isKoblitz()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("si is defined for Koblitz curves only");

        throw $r1;

     label1:
        $i1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: int getFieldSize()>();

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        i0 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        $b2 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte getMu(int)>(i0);

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger getCofactor()>();

        $i3 = staticinvoke <org.spongycastle.math.ec.Tnaf: int getShiftsForCofactor(java.math.BigInteger)>($r3);

        $i1 = $i1 + 3;

        i0 = $i1 - i0;

        $r4 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>($b2, i0, 0);

        if $b2 != 1 goto label2;

        $r3 = $r4[0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r4[0] = $r3;

        $r3 = $r4[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r4[1] = $r3;

     label2:
        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r5 = $r4[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i3);

        $r5 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r6 = $r4[0];

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i3);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r4 = newarray (java.math.BigInteger)[2];

        $r4[0] = $r3;

        $r4[1] = $r5;

        return $r4;
    }
    public static java.math.BigInteger getTw(byte, int)
    {
        byte $b0;
        int $i1;
        java.math.BigInteger $r0, $r2, $r3, $r4;
        java.math.BigInteger[] $r1;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        if $i1 != 4 goto label2;

        if $b0 != 1 goto label1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6L);

        return $r0;

     label1:
        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10L);

        return $r0;

     label2:
        $r1 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>($b0, $i1, 0);

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i1);

        $r2 = $r1[1];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r0);

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r4 = $r1[0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        return $r0;
    }
    public static org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m, byte[])
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0, r4, r5, r6;
        byte[] $r1;
        byte b0;
        int $i1, i2;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECPoint $r3;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r1 := @parameter1: byte[];

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        r4 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r3;

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint negate()>();

        r5 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r3;

        i2 = 0;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label5;

        i2 = i2 + 1;

        b0 = $r1[$i1];

        if b0 == 0 goto label3;

        r4 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint$AbstractF2m tauPow(int)>(i2);

        i2 = 0;

        if b0 <= 0 goto label4;

        r6 = $r0;

     label2:
        $r3 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>(r6);

        r4 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r3;

     label3:
        $i1 = $i1 + -1;

        goto label1;

     label4:
        r6 = r5;

        goto label2;

     label5:
        if i2 <= 0 goto label6;

        $r0 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint$AbstractF2m tauPow(int)>(i2);

        return $r0;

     label6:
        return r4;
    }
    public static org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyRTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0;
        java.math.BigInteger $r1, $r5;
        byte $b0, $b3;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECCurve$AbstractF2m r3;
        int $i1, $i2;
        org.spongycastle.math.ec.ECFieldElement $r4;
        java.math.BigInteger[] $r6;
        org.spongycastle.math.ec.ZTauElement $r7;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        r3 = (org.spongycastle.math.ec.ECCurve$AbstractF2m) $r2;

        $i1 = virtualinvoke r3.<org.spongycastle.math.ec.ECCurve$AbstractF2m: int getFieldSize()>();

        $r4 = virtualinvoke r3.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i2 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        $b3 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte getMu(int)>($i2);

        $r6 = virtualinvoke r3.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] getSi()>();

        $b0 = (byte) $i2;

        $r7 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte)>($r1, $i1, $b0, $r6, $b3, 10);

        $r0 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,org.spongycastle.math.ec.ZTauElement)>($r0, $r7);

        return $r0;
    }
    public static org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m, org.spongycastle.math.ec.ZTauElement)
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0;
        org.spongycastle.math.ec.ZTauElement $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.math.ec.ECCurve$AbstractF2m r3;
        org.spongycastle.math.ec.ECFieldElement $r4;
        byte $b0;
        byte[] $r5;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r1 := @parameter1: org.spongycastle.math.ec.ZTauElement;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        r3 = (org.spongycastle.math.ec.ECCurve$AbstractF2m) $r2;

        $r4 = virtualinvoke r3.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $b0 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte getMu(org.spongycastle.math.ec.ECFieldElement)>($r4);

        $r5 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte[] tauAdicNaf(byte,org.spongycastle.math.ec.ZTauElement)>($b0, $r1);

        $r0 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte[])>($r0, $r5);

        return $r0;
    }
    public static java.math.BigInteger norm(byte, org.spongycastle.math.ec.ZTauElement)
    {
        byte $b0;
        org.spongycastle.math.ec.ZTauElement $r0;
        java.math.BigInteger $r1, $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: org.spongycastle.math.ec.ZTauElement;

        $r1 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r2 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r2 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r3 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r3 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r4 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        if $b0 != 1 goto label1;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        return $r1;

     label1:
        if $b0 != -1 goto label2;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        return $r1;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r5;
    }
    public static org.spongycastle.math.ec.SimpleBigDecimal norm(byte, org.spongycastle.math.ec.SimpleBigDecimal, org.spongycastle.math.ec.SimpleBigDecimal)
    {
        byte $b0;
        org.spongycastle.math.ec.SimpleBigDecimal $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter2: org.spongycastle.math.ec.SimpleBigDecimal;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal multiply(org.spongycastle.math.ec.SimpleBigDecimal)>($r0);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal multiply(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal multiply(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal shiftLeft(int)>(1);

        if $b0 != 1 goto label1;

        $r0 = virtualinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r0);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        return $r0;

     label1:
        if $b0 != -1 goto label2;

        $r0 = virtualinvoke $r2.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal)>($r0);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r1);

        return $r0;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r3;
    }
    public static org.spongycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger, int, byte, java.math.BigInteger[], byte, byte)
    {
        java.math.BigInteger $r0, r2, $r3, $r5;
        int $i0;
        byte $b1, $b2, $b3;
        java.math.BigInteger[] $r1, $r4;
        org.spongycastle.math.ec.SimpleBigDecimal $r6, $r7;
        org.spongycastle.math.ec.ZTauElement $r8;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $b1 := @parameter2: byte;

        $r1 := @parameter3: java.math.BigInteger[];

        $b2 := @parameter4: byte;

        $b3 := @parameter5: byte;

        if $b2 != 1 goto label2;

        $r3 = $r1[0];

        r2 = $r1[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

     label1:
        $r4 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>($b2, $i0, 1);

        r2 = $r4[1];

        $r5 = $r1[0];

        $r6 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int)>($r0, $r5, r2, $b1, $i0, $b3);

        $r5 = $r1[1];

        $r7 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int)>($r0, $r5, r2, $b1, $i0, $b3);

        $r8 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement round(org.spongycastle.math.ec.SimpleBigDecimal,org.spongycastle.math.ec.SimpleBigDecimal,byte)>($r6, $r7, $b2);

        r2 = $r8.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        r2 = $r1[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        r2 = $r8.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r3 = $r1[1];

        r2 = $r8.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        r2 = $r1[0];

        $r5 = $r8.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        $r8 = new org.spongycastle.math.ec.ZTauElement;

        specialinvoke $r8.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r3);

        return $r8;

     label2:
        $r3 = $r1[0];

        r2 = $r1[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        goto label1;
    }
    public static org.spongycastle.math.ec.ZTauElement round(org.spongycastle.math.ec.SimpleBigDecimal, org.spongycastle.math.ec.SimpleBigDecimal, byte)
    {
        org.spongycastle.math.ec.SimpleBigDecimal $r0, $r1, $r5, $r6;
        byte $b0;
        int $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        java.math.BigInteger $r3, $r4, $r7;
        long $l4;
        org.spongycastle.math.ec.ZTauElement $r8;

        $r0 := @parameter0: org.spongycastle.math.ec.SimpleBigDecimal;

        $r1 := @parameter1: org.spongycastle.math.ec.SimpleBigDecimal;

        $b0 := @parameter2: byte;

        $i1 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: int getScale()>();

        $i2 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: int getScale()>();

        if $i2 == $i1 goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lambda0 and lambda1 do not have same scale");

        throw $r2;

     label01:
        if $b0 == 1 goto label02;

        if $b0 == -1 goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r2;

     label02:
        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger round()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: java.math.BigInteger round()>();

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger)>($r3);

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger)>($r4);

        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r0);

        if $b0 != 1 goto label07;

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

     label03:
        $r6 = virtualinvoke $r5.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

        $r5 = virtualinvoke $r6.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

        if $b0 != 1 goto label08;

        $r6 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal)>($r6);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

     label04:
        $i1 = 0;

        $i2 = 0;

        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i3 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 < 0 goto label10;

        $r7 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $i3 = virtualinvoke $r6.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 >= 0 goto label09;

        $i2 = $b0;

     label05:
        $r7 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $i3 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 >= 0 goto label12;

        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i3 = virtualinvoke $r6.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 < 0 goto label11;

        $b0 = neg $b0;

        $i2 = $b0;

     label06:
        $l4 = (long) $i1;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        $l4 = (long) $i2;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        $r8 = new org.spongycastle.math.ec.ZTauElement;

        specialinvoke $r8.<org.spongycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4);

        return $r8;

     label07:
        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

        goto label03;

     label08:
        $r6 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal)>($r6);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal)>($r5);

        goto label04;

     label09:
        $i1 = 1;

        goto label05;

     label10:
        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $i3 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 < 0 goto label05;

        $i2 = $b0;

        goto label05;

     label11:
        $i1 = -1;

        goto label06;

     label12:
        $r7 = <org.spongycastle.math.ec.Tnaf: java.math.BigInteger MINUS_TWO>;

        $i3 = virtualinvoke $r0.<org.spongycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r7);

        if $i3 >= 0 goto label06;

        $b0 = neg $b0;

        $i2 = $b0;

        goto label06;
    }
    public static org.spongycastle.math.ec.ECPoint$AbstractF2m tau(org.spongycastle.math.ec.ECPoint$AbstractF2m)
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint$AbstractF2m tau()>();

        return $r0;
    }
    public static byte[] tauAdicNaf(byte, org.spongycastle.math.ec.ZTauElement)
    {
        byte $b0, $b3;
        org.spongycastle.math.ec.ZTauElement $r0;
        java.math.BigInteger r1, $r4, $r6, r7, $r8;
        byte[] r2, r3;
        java.lang.IllegalArgumentException $r5;
        int $i1, i2;
        boolean $z0;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: org.spongycastle.math.ec.ZTauElement;

        if $b0 == 1 goto label01;

        if $b0 == -1 goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r5;

     label01:
        $r6 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger norm(byte,org.spongycastle.math.ec.ZTauElement)>($b0, $r0);

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 30 goto label08;

        $i1 = $i1 + 4;

     label02:
        r3 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

        r7 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r6 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

     label03:
        r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r7.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label04;

        r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label12;

     label04:
        $z0 = virtualinvoke r7.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label10;

        r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r4 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r8 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger FOUR>;

        $r4 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        i2 = virtualinvoke r1.<java.math.BigInteger: int intValue()>();

        $b3 = (byte) i2;

        r3[$i1] = $b3;

        $b3 = r3[$i1];

        if $b3 != 1 goto label09;

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger clearBit(int)>(0);

     label05:
        i2 = $i1;

     label06:
        r1 = r7;

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        if $b0 != 1 goto label11;

        r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r7);

     label07:
        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i1 = $i1 + 1;

        goto label03;

     label08:
        $i1 = 34;

        goto label02;

     label09:
        r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r1);

        goto label05;

     label10:
        r3[$i1] = 0;

        goto label06;

     label11:
        r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7);

        goto label07;

     label12:
        $i1 = i2 + 1;

        r2 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, $i1);

        return r2;
    }
    public static byte[] tauAdicWNaf(byte, org.spongycastle.math.ec.ZTauElement, byte, java.math.BigInteger, java.math.BigInteger, org.spongycastle.math.ec.ZTauElement[])
    {
        byte $b0, $b1;
        org.spongycastle.math.ec.ZTauElement $r0;
        java.math.BigInteger $r1, $r2, r4, $r7, r8, r9;
        org.spongycastle.math.ec.ZTauElement[] $r3;
        byte[] r5;
        java.lang.IllegalArgumentException $r6;
        int $i2, $i3;
        boolean $z0;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: org.spongycastle.math.ec.ZTauElement;

        $b1 := @parameter2: byte;

        $r1 := @parameter3: java.math.BigInteger;

        $r2 := @parameter4: java.math.BigInteger;

        $r3 := @parameter5: org.spongycastle.math.ec.ZTauElement[];

        if $b0 == 1 goto label01;

        if $b0 == -1 goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r6;

     label01:
        $r7 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger norm(byte,org.spongycastle.math.ec.ZTauElement)>($b0, $r0);

        $i2 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>();

        if $i2 <= 30 goto label09;

        $i2 = $i2 + 4;

        $i2 = $i2 + $b1;

     label02:
        r5 = newarray (byte)[$i2];

        $r7 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r8 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r9 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $i2 = 0;

     label03:
        r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r8.<java.math.BigInteger: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label04;

        r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r9.<java.math.BigInteger: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label14;

     label04:
        $z0 = virtualinvoke r8.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label12;

        r4 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        r4 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i3 = virtualinvoke r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i3 < 0 goto label10;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $i3 = virtualinvoke r4.<java.math.BigInteger: int intValue()>();

        $b1 = (byte) $i3;

     label05:
        r5[$i2] = $b1;

        $z0 = 1;

        if $b1 >= 0 goto label06;

        $z0 = 0;

        $b1 = neg $b1;

     label06:
        if $z0 == 0 goto label11;

        $r0 = $r3[$b1];

        r4 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r4);

        $r0 = $r3[$b1];

        r4 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r4);

     label07:
        r4 = r8;

        if $b0 != 1 goto label13;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r8 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r8);

     label08:
        r9 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i2 = $i2 + 1;

        goto label03;

     label09:
        $i2 = $b1 + 34;

        goto label02;

     label10:
        $i3 = virtualinvoke r4.<java.math.BigInteger: int intValue()>();

        $b1 = (byte) $i3;

        goto label05;

     label11:
        $r0 = $r3[$b1];

        r4 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);

        $r0 = $r3[$b1];

        r4 = $r0.<org.spongycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);

        goto label07;

     label12:
        r5[$i2] = 0;

        goto label07;

     label13:
        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r8 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r8);

        goto label08;

     label14:
        return r5;
    }
