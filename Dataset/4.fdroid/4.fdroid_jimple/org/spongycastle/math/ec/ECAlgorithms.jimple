org.spongycastle.math.ec.ECAlgorithms extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.math.ec.ECAlgorithms r0;

        r0 := @this: org.spongycastle.math.ec.ECAlgorithms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static org.spongycastle.math.ec.ECPoint implShamirsTrickJsf(org.spongycastle.math.ec.ECPoint, java.math.BigInteger, org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint $r0, $r2, $r7, $r8, $r9;
        java.math.BigInteger $r1, $r3;
        int i0, i2, i3;
        byte b1;
        org.spongycastle.math.ec.ECPoint[] r4, r5;
        org.spongycastle.math.ec.ECCurve $r6;
        byte[] $r10;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: org.spongycastle.math.ec.ECPoint;

        $r3 := @parameter3: java.math.BigInteger;

        $r6 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        $r8 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r2);

        $r9 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint subtract(org.spongycastle.math.ec.ECPoint)>($r2);

        r4 = newarray (org.spongycastle.math.ec.ECPoint)[4];

        r4[0] = $r2;

        r4[1] = $r9;

        r4[2] = $r0;

        r4[3] = $r8;

        virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r4);

        r5 = newarray (org.spongycastle.math.ec.ECPoint)[9];

        $r0 = r4[3];

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        r5[0] = $r0;

        $r0 = r4[2];

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        r5[1] = $r0;

        $r0 = r4[1];

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        r5[2] = $r0;

        $r0 = r4[0];

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        r5[3] = $r0;

        r5[4] = $r7;

        $r0 = r4[0];

        r5[5] = $r0;

        $r0 = r4[1];

        r5[6] = $r0;

        $r0 = r4[2];

        r5[7] = $r0;

        $r0 = r4[3];

        r5[8] = $r0;

        $r10 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateJSF(java.math.BigInteger,java.math.BigInteger)>($r1, $r3);

        $r0 = $r7;

        i3 = lengthof $r10;

     label1:
        i3 = i3 + -1;

        if i3 < 0 goto label2;

        b1 = $r10[i3];

        i0 = b1 << 24;

        i2 = i0 >> 28;

        i0 = b1 << 28;

        i0 = i0 >> 28;

        i2 = i2 * 3;

        i2 = i2 + 4;

        i0 = i2 + i0;

        $r2 = r5[i0];

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>($r2);

        goto label1;

     label2:
        return $r0;
    }
    static org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint, java.math.BigInteger, org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint $r0, $r1;
        java.math.BigInteger $r2, $r3;
        int $i0, $i1;
        boolean z0, z1;
        org.spongycastle.math.ec.WNafPreCompInfo $r4, $r5;
        org.spongycastle.math.ec.ECPoint[] $r6, $r7, $r8, $r9;
        byte[] $r10, $r11;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 := @parameter2: org.spongycastle.math.ec.ECPoint;

        $r3 := @parameter3: java.math.BigInteger;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label07;

        z0 = 1;

     label01:
        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label08;

        z1 = 1;

     label02:
        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $i0 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getWindowSize(int)>($i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i0);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i0);

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i1 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getWindowSize(int)>($i1);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i1);

        $r4 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo precompute(org.spongycastle.math.ec.ECPoint,int,boolean)>($r0, $i0, 1);

        $r5 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo precompute(org.spongycastle.math.ec.ECPoint,int,boolean)>($r1, $i1, 1);

        if z0 == 0 goto label09;

        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

     label03:
        if z1 == 0 goto label10;

        $r7 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

     label04:
        if z0 == 0 goto label11;

        $r8 = virtualinvoke $r4.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

     label05:
        if z1 == 0 goto label12;

        $r9 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

     label06:
        $r10 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i0, $r2);

        $r11 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i1, $r3);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[],org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[])>($r6, $r8, $r10, $r7, $r9, $r11);

        return $r0;

     label07:
        z0 = 0;

        goto label01;

     label08:
        z1 = 0;

        goto label02;

     label09:
        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

        goto label03;

     label10:
        $r7 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

        goto label04;

     label11:
        $r8 = virtualinvoke $r4.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

        goto label05;

     label12:
        $r9 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

        goto label06;
    }
    static org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint, java.math.BigInteger, org.spongycastle.math.ec.ECPointMap, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint $r0, $r4;
        org.spongycastle.math.ec.ECPointMap $r1;
        java.math.BigInteger $r2, $r3;
        int $i0, $i1;
        boolean z0, z1;
        org.spongycastle.math.ec.WNafPreCompInfo $r5, $r6;
        org.spongycastle.math.ec.ECPoint[] $r7, $r8, $r9, $r10;
        byte[] $r11, $r12;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 := @parameter2: org.spongycastle.math.ec.ECPointMap;

        $r3 := @parameter3: java.math.BigInteger;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label07;

        z0 = 1;

     label01:
        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label08;

        z1 = 1;

     label02:
        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getWindowSize(int)>($i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i0);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i0);

        $r4 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.ECPoint mapPointWithPrecomp(org.spongycastle.math.ec.ECPoint,int,boolean,org.spongycastle.math.ec.ECPointMap)>($r0, $i0, 1, $r1);

        $r5 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.ECPoint)>($r0);

        $r6 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.ECPoint)>($r4);

        if z0 == 0 goto label09;

        $r7 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

     label03:
        if z1 == 0 goto label10;

        $r8 = virtualinvoke $r6.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

     label04:
        if z0 == 0 goto label11;

        $r9 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

     label05:
        if z1 == 0 goto label12;

        $r10 = virtualinvoke $r6.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

     label06:
        $r11 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i0, $r2);

        $r12 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i0, $r3);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[],org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[])>($r7, $r9, $r11, $r8, $r10, $r12);

        return $r0;

     label07:
        z0 = 0;

        goto label01;

     label08:
        z1 = 0;

        goto label02;

     label09:
        $r7 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

        goto label03;

     label10:
        $r8 = virtualinvoke $r6.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

        goto label04;

     label11:
        $r9 = virtualinvoke $r5.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

        goto label05;

     label12:
        $r10 = virtualinvoke $r6.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

        goto label06;
    }
    private static org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint[], org.spongycastle.math.ec.ECPoint[], byte[], org.spongycastle.math.ec.ECPoint[], org.spongycastle.math.ec.ECPoint[], byte[])
    {
        org.spongycastle.math.ec.ECPoint[] $r0, $r1, $r3, $r4, r10;
        byte[] $r2, $r5;
        int $i0, $i1, $i2, i3, $i4;
        org.spongycastle.math.ec.ECPoint $r6, r8, r9, $r11;
        org.spongycastle.math.ec.ECCurve $r7;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $r1 := @parameter1: org.spongycastle.math.ec.ECPoint[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: org.spongycastle.math.ec.ECPoint[];

        $r4 := @parameter4: org.spongycastle.math.ec.ECPoint[];

        $r5 := @parameter5: byte[];

        $i1 = lengthof $r2;

        $i0 = lengthof $r5;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $r6 = $r0[0];

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r6 = virtualinvoke $r7.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        r8 = $r6;

        $i0 = 0;

        $i1 = $i1 + -1;

     label01:
        if $i1 < 0 goto label15;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label05;

        i3 = $r2[$i1];

     label02:
        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label06;

        $i2 = $r5[$i1];

     label03:
        $i4 = i3 | $i2;

        if $i4 != 0 goto label07;

        $i0 = $i0 + 1;

     label04:
        $i1 = $i1 + -1;

        goto label01;

     label05:
        i3 = 0;

        goto label02;

     label06:
        $i2 = 0;

        goto label03;

     label07:
        r9 = $r6;

        if i3 == 0 goto label09;

        $i4 = staticinvoke <java.lang.Math: int abs(int)>(i3);

        if i3 >= 0 goto label13;

        r10 = $r1;

     label08:
        i3 = $i4 >>> 1;

        r9 = r10[i3];

        r9 = virtualinvoke $r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>(r9);

     label09:
        if $i2 == 0 goto label11;

        i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i2 >= 0 goto label14;

        r10 = $r4;

     label10:
        $i2 = i3 >>> 1;

        $r11 = r10[$i2];

        r9 = virtualinvoke r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r11);

     label11:
        if $i0 <= 0 goto label12;

        r8 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>($i0);

        $i0 = 0;

     label12:
        r8 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>(r9);

        goto label04;

     label13:
        r10 = $r0;

        goto label08;

     label14:
        r10 = $r3;

        goto label10;

     label15:
        if $i0 <= 0 goto label16;

        $r6 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>($i0);

        return $r6;

     label16:
        return r8;
    }
    static org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[], org.spongycastle.math.ec.ECPointMap, java.math.BigInteger[])
    {
        org.spongycastle.math.ec.ECPoint[] $r0;
        org.spongycastle.math.ec.ECPointMap $r1;
        java.math.BigInteger[] $r2;
        org.spongycastle.math.ec.ECPoint r3, $r9;
        int i0, i1, i2, i3, $i4, $i5;
        org.spongycastle.math.ec.WNafPreCompInfo[] r4;
        boolean[] r5;
        byte[][] r6;
        java.math.BigInteger r7, r8;
        boolean $z0;
        org.spongycastle.math.ec.WNafPreCompInfo $r10;
        byte[] $r11;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $r1 := @parameter1: org.spongycastle.math.ec.ECPointMap;

        $r2 := @parameter2: java.math.BigInteger[];

        i1 = lengthof $r0;

        i0 = i1 << 1;

        r5 = newarray (boolean)[i0];

        r4 = newarray (org.spongycastle.math.ec.WNafPreCompInfo)[i0];

        r6 = newarray (byte[])[i0];

        i3 = 0;

     label1:
        if i3 >= i1 goto label6;

        i0 = i3 << 1;

        i2 = i0 + 1;

        r7 = $r2[i0];

        $i4 = virtualinvoke r7.<java.math.BigInteger: int signum()>();

        if $i4 >= 0 goto label4;

        $z0 = 1;

     label2:
        r5[i0] = $z0;

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger abs()>();

        r8 = $r2[i2];

        $i4 = virtualinvoke r8.<java.math.BigInteger: int signum()>();

        if $i4 >= 0 goto label5;

        $z0 = 1;

     label3:
        r5[i2] = $z0;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i4 = virtualinvoke r7.<java.math.BigInteger: int bitLength()>();

        $i5 = virtualinvoke r8.<java.math.BigInteger: int bitLength()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        $i4 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getWindowSize(int)>($i4);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i4);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i4);

        r3 = $r0[i3];

        $r9 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.ECPoint mapPointWithPrecomp(org.spongycastle.math.ec.ECPoint,int,boolean,org.spongycastle.math.ec.ECPointMap)>(r3, $i4, 1, $r1);

        $r10 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.ECPoint)>(r3);

        r4[i0] = $r10;

        $r10 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.ECPoint)>($r9);

        r4[i2] = $r10;

        $r11 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i4, r7);

        r6[i0] = $r11;

        $r11 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i4, r8);

        r6[i2] = $r11;

        i3 = i3 + 1;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $z0 = 0;

        goto label3;

     label6:
        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultiplies(boolean[],org.spongycastle.math.ec.WNafPreCompInfo[],byte[][])>(r5, r4, r6);

        return r3;
    }
    static org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[], java.math.BigInteger[])
    {
        org.spongycastle.math.ec.ECPoint[] $r0;
        java.math.BigInteger[] $r1;
        int i0, i1, $i2;
        org.spongycastle.math.ec.WNafPreCompInfo[] r2;
        boolean[] r3;
        byte[][] r4;
        java.math.BigInteger r5;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r6;
        org.spongycastle.math.ec.WNafPreCompInfo $r7;
        byte[] $r8;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $r1 := @parameter1: java.math.BigInteger[];

        i0 = lengthof $r0;

        r3 = newarray (boolean)[i0];

        r2 = newarray (org.spongycastle.math.ec.WNafPreCompInfo)[i0];

        r4 = newarray (byte[])[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r5 = $r1[i1];

        $i2 = virtualinvoke r5.<java.math.BigInteger: int signum()>();

        if $i2 >= 0 goto label3;

        $z0 = 1;

     label2:
        r3[i1] = $z0;

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i2 = virtualinvoke r5.<java.math.BigInteger: int bitLength()>();

        $i2 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getWindowSize(int)>($i2);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i2);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i2);

        $r6 = $r0[i1];

        $r7 = staticinvoke <org.spongycastle.math.ec.WNafUtil: org.spongycastle.math.ec.WNafPreCompInfo precompute(org.spongycastle.math.ec.ECPoint,int,boolean)>($r6, $i2, 1);

        r2[i1] = $r7;

        $r8 = staticinvoke <org.spongycastle.math.ec.WNafUtil: byte[] generateWindowNaf(int,java.math.BigInteger)>($i2, r5);

        r4[i1] = $r8;

        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        $r6 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultiplies(boolean[],org.spongycastle.math.ec.WNafPreCompInfo[],byte[][])>(r3, r2, r4);

        return $r6;
    }
    private static org.spongycastle.math.ec.ECPoint implSumOfMultiplies(boolean[], org.spongycastle.math.ec.WNafPreCompInfo[], byte[][])
    {
        boolean[] $r0;
        org.spongycastle.math.ec.WNafPreCompInfo[] $r1;
        byte[][] $r2;
        int i0, i1, i2, $i3, $i4, $i5;
        org.spongycastle.math.ec.WNafPreCompInfo r3;
        byte[] r4;
        org.spongycastle.math.ec.ECPoint[] $r5;
        org.spongycastle.math.ec.ECPoint $r6, r8, r9, $r10;
        org.spongycastle.math.ec.ECCurve $r7;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $r1 := @parameter1: org.spongycastle.math.ec.WNafPreCompInfo[];

        $r2 := @parameter2: byte[][];

        i1 = 0;

        i0 = lengthof $r2;

        i2 = 0;

     label01:
        if i2 >= i0 goto label02;

        r4 = $r2[i2];

        $i3 = lengthof r4;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i3);

        i2 = i2 + 1;

        goto label01;

     label02:
        r3 = $r1[0];

        $r5 = virtualinvoke r3.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

        $r6 = $r5[0];

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r6 = virtualinvoke $r7.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        r8 = $r6;

        i2 = 0;

        i1 = i1 + -1;

     label03:
        if i1 < 0 goto label16;

        r9 = $r6;

        $i3 = 0;

     label04:
        if $i3 >= i0 goto label12;

        r4 = $r2[$i3];

        $i4 = lengthof r4;

        if i1 >= $i4 goto label09;

        $i4 = r4[i1];

     label05:
        if $i4 == 0 goto label08;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        r3 = $r1[$i3];

        if $i4 >= 0 goto label10;

        $z0 = 1;

     label06:
        $z1 = $r0[$i3];

        if $z0 != $z1 goto label11;

        $r5 = virtualinvoke r3.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreComp()>();

     label07:
        $i4 = $i5 >>> 1;

        $r10 = $r5[$i4];

        r9 = virtualinvoke r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

     label08:
        $i3 = $i3 + 1;

        goto label04;

     label09:
        $i4 = 0;

        goto label05;

     label10:
        $z0 = 0;

        goto label06;

     label11:
        $r5 = virtualinvoke r3.<org.spongycastle.math.ec.WNafPreCompInfo: org.spongycastle.math.ec.ECPoint[] getPreCompNeg()>();

        goto label07;

     label12:
        if r9 != $r6 goto label14;

        i2 = i2 + 1;

     label13:
        i1 = i1 + -1;

        goto label03;

     label14:
        if i2 <= 0 goto label15;

        r8 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>(i2);

        i2 = 0;

     label15:
        r8 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>(r9);

        goto label13;

     label16:
        if i2 <= 0 goto label17;

        $r6 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>(i2);

        return $r6;

     label17:
        return r8;
    }
    static org.spongycastle.math.ec.ECPoint implSumOfMultipliesGLV(org.spongycastle.math.ec.ECPoint[], java.math.BigInteger[], org.spongycastle.math.ec.endo.GLVEndomorphism)
    {
        org.spongycastle.math.ec.ECPoint[] $r0, r5;
        java.math.BigInteger[] $r1, r3, $r9;
        org.spongycastle.math.ec.endo.GLVEndomorphism $r2;
        int i0, $i1, i2, i3;
        org.spongycastle.math.ec.ECPoint r4, $r11;
        org.spongycastle.math.ec.ECCurve $r6;
        java.math.BigInteger $r7, $r8;
        org.spongycastle.math.ec.ECPointMap $r10;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $r1 := @parameter1: java.math.BigInteger[];

        $r2 := @parameter2: org.spongycastle.math.ec.endo.GLVEndomorphism;

        r4 = $r0[0];

        $r6 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger getOrder()>();

        i0 = lengthof $r0;

        $i1 = i0 << 1;

        r3 = newarray (java.math.BigInteger)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        if $i1 >= i0 goto label2;

        $r8 = $r1[$i1];

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r9 = interfaceinvoke $r2.<org.spongycastle.math.ec.endo.GLVEndomorphism: java.math.BigInteger[] decomposeScalar(java.math.BigInteger)>($r8);

        i3 = i2 + 1;

        $r8 = $r9[0];

        r3[i2] = $r8;

        i2 = i3 + 1;

        $r8 = $r9[1];

        r3[i3] = $r8;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r10 = interfaceinvoke $r2.<org.spongycastle.math.ec.endo.GLVEndomorphism: org.spongycastle.math.ec.ECPointMap getPointMap()>();

        $z0 = interfaceinvoke $r2.<org.spongycastle.math.ec.endo.GLVEndomorphism: boolean hasEfficientPointMap()>();

        if $z0 == 0 goto label3;

        r4 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPointMap,java.math.BigInteger[])>($r0, $r10, r3);

        return r4;

     label3:
        $i1 = i0 << 1;

        r5 = newarray (org.spongycastle.math.ec.ECPoint)[$i1];

        $i1 = 0;

        i2 = 0;

     label4:
        if $i1 >= i0 goto label5;

        r4 = $r0[$i1];

        $r11 = interfaceinvoke $r10.<org.spongycastle.math.ec.ECPointMap: org.spongycastle.math.ec.ECPoint map(org.spongycastle.math.ec.ECPoint)>(r4);

        i3 = i2 + 1;

        r5[i2] = r4;

        i2 = i3 + 1;

        r5[i3] = $r11;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        r4 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[])>(r5, r3);

        return r4;
    }
    public static org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECCurve $r0, $r2;
        org.spongycastle.math.ec.ECPoint $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter1: org.spongycastle.math.ec.ECPoint;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Point must be on the same curve");

        throw $r3;

     label1:
        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)>($r1);

        return $r1;
    }
    public static boolean isF2mCurve(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        org.spongycastle.math.field.FiniteField $r1;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isF2mField(org.spongycastle.math.field.FiniteField)>($r1);

        return $z0;
    }
    public static boolean isF2mField(org.spongycastle.math.field.FiniteField)
    {
        org.spongycastle.math.field.FiniteField $r0;
        java.math.BigInteger $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.math.field.FiniteField;

        $i0 = interfaceinvoke $r0.<org.spongycastle.math.field.FiniteField: int getDimension()>();

        if $i0 <= 1 goto label1;

        $r2 = interfaceinvoke $r0.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof org.spongycastle.math.field.PolynomialExtensionField;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isFpCurve(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        org.spongycastle.math.field.FiniteField $r1;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpField(org.spongycastle.math.field.FiniteField)>($r1);

        return $z0;
    }
    public static boolean isFpField(org.spongycastle.math.field.FiniteField)
    {
        org.spongycastle.math.field.FiniteField $r0;
        int $i0;

        $r0 := @parameter0: org.spongycastle.math.field.FiniteField;

        $i0 = interfaceinvoke $r0.<org.spongycastle.math.field.FiniteField: int getDimension()>();

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static void montgomeryTrick(org.spongycastle.math.ec.ECFieldElement[], int, int)
    {
        org.spongycastle.math.ec.ECFieldElement[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.spongycastle.math.ec.ECAlgorithms: void montgomeryTrick(org.spongycastle.math.ec.ECFieldElement[],int,int,org.spongycastle.math.ec.ECFieldElement)>($r0, $i0, $i1, null);

        return;
    }
    public static void montgomeryTrick(org.spongycastle.math.ec.ECFieldElement[], int, int, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement[] $r0, r2;
        int $i0, $i1, i2, $i3;
        org.spongycastle.math.ec.ECFieldElement $r1, $r3, $r4;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: org.spongycastle.math.ec.ECFieldElement;

        r2 = newarray (org.spongycastle.math.ec.ECFieldElement)[$i1];

        $r3 = $r0[$i0];

        r2[0] = $r3;

        i2 = 0;

     label1:
        i2 = i2 + 1;

        if i2 >= $i1 goto label2;

        $i3 = i2 + -1;

        $r3 = r2[$i3];

        $i3 = $i0 + i2;

        $r4 = $r0[$i3];

        $r3 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r4);

        r2[i2] = $r3;

        goto label1;

     label2:
        $i1 = i2 + -1;

        if $r1 == null goto label3;

        $r3 = r2[$i1];

        $r1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r1);

        r2[$i1] = $r1;

     label3:
        $r1 = r2[$i1];

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement invert()>();

        i2 = $i1;

     label4:
        if i2 <= 0 goto label5;

        $i1 = i2 + -1;

        i2 = $i0 + i2;

        $r1 = $r0[i2];

        $r4 = r2[$i1];

        $r4 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r3);

        $r0[i2] = $r4;

        $r3 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r1);

        i2 = $i1;

        goto label4;

     label5:
        $r0[$i0] = $r3;

        return;
    }
    public static org.spongycastle.math.ec.ECPoint referenceMultiply(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r2;
        org.spongycastle.math.ec.ECPoint $r1, $r4, $r5;
        org.spongycastle.math.ec.ECCurve $r3;
        int $i0, i1;
        boolean $z0;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r0 := @parameter1: java.math.BigInteger;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        if $i0 <= 0 goto label4;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label1;

        $r4 = $r1;

     label1:
        i1 = 1;

     label2:
        if i1 >= $i0 goto label4;

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twice()>();

        $r1 = $r5;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(i1);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r5);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label5;

        $r1 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        return $r1;

     label5:
        return $r4;
    }
    public static org.spongycastle.math.ec.ECPoint shamirsTrick(org.spongycastle.math.ec.ECPoint, java.math.BigInteger, org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint $r0, $r3;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.math.ec.ECCurve $r4;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter3: java.math.BigInteger;

        $r4 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r4, $r3);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickJsf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r0, $r1, $r3, $r2);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>($r0);

        return $r0;
    }
    public static org.spongycastle.math.ec.ECPoint sumOfMultiplies(org.spongycastle.math.ec.ECPoint[], java.math.BigInteger[])
    {
        org.spongycastle.math.ec.ECPoint[] $r0, r2;
        java.math.BigInteger[] $r1;
        int i0, $i1;
        org.spongycastle.math.ec.ECPoint r3, $r7;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.math.ec.ECCurve $r5;
        java.math.BigInteger $r6, $r8;
        org.spongycastle.math.ec.endo.ECEndomorphism $r9;
        boolean $z0;
        org.spongycastle.math.ec.endo.GLVEndomorphism r10;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $r1 := @parameter1: java.math.BigInteger[];

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if i0 != $i1 goto label1;

        i0 = lengthof $r0;

        if i0 >= 1 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("point and scalar arrays should be non-null, and of equal, non-zero, length");

        throw $r4;

     label2:
        i0 = lengthof $r0;

        lookupswitch(i0)
        {
            case 1: goto label5;
            case 2: goto label6;
            default: goto label3;
        };

     label3:
        r3 = $r0[0];

        $r5 = virtualinvoke r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        r2 = newarray (org.spongycastle.math.ec.ECPoint)[i0];

        r2[0] = r3;

        $i1 = 1;

     label4:
        if $i1 >= i0 goto label7;

        r3 = $r0[$i1];

        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r5, r3);

        r2[$i1] = r3;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        r3 = $r0[0];

        $r6 = $r1[0];

        r3 = virtualinvoke r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r6);

        return r3;

     label6:
        r3 = $r0[0];

        $r6 = $r1[0];

        $r7 = $r0[1];

        $r8 = $r1[1];

        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>(r3, $r6, $r7, $r8);

        return r3;

     label7:
        $r9 = virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism getEndomorphism()>();

        $z0 = $r9 instanceof org.spongycastle.math.ec.endo.GLVEndomorphism;

        if $z0 == 0 goto label8;

        r10 = (org.spongycastle.math.ec.endo.GLVEndomorphism) $r9;

        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultipliesGLV(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[],org.spongycastle.math.ec.endo.GLVEndomorphism)>(r2, $r1, r10);

        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>(r3);

        return r3;

     label8:
        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[])>(r2, $r1);

        r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>(r3);

        return r3;
    }
    public static org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint, java.math.BigInteger, org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECPoint $r0, $r3;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.math.ec.ECCurve $r4;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve$AbstractF2m r5;
        org.spongycastle.math.ec.endo.ECEndomorphism $r6;
        org.spongycastle.math.ec.ECPoint[] $r7;
        java.math.BigInteger[] $r8;
        org.spongycastle.math.ec.endo.GLVEndomorphism r9;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r1 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter3: java.math.BigInteger;

        $r4 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r4, $r3);

        $z0 = $r4 instanceof org.spongycastle.math.ec.ECCurve$AbstractF2m;

        if $z0 == 0 goto label1;

        r5 = (org.spongycastle.math.ec.ECCurve$AbstractF2m) $r4;

        $z0 = virtualinvoke r5.<org.spongycastle.math.ec.ECCurve$AbstractF2m: boolean isKoblitz()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r1);

        $r3 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r3);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>($r0);

        return $r0;

     label1:
        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism getEndomorphism()>();

        $z0 = $r6 instanceof org.spongycastle.math.ec.endo.GLVEndomorphism;

        if $z0 == 0 goto label2;

        $r7 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        $r7[0] = $r0;

        $r7[1] = $r3;

        $r8 = newarray (java.math.BigInteger)[2];

        $r8[0] = $r1;

        $r8[1] = $r2;

        r9 = (org.spongycastle.math.ec.endo.GLVEndomorphism) $r6;

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implSumOfMultipliesGLV(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[],org.spongycastle.math.ec.endo.GLVEndomorphism)>($r7, $r8, r9);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>($r0);

        return $r0;

     label2:
        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r0, $r1, $r3, $r2);

        $r0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>($r0);

        return $r0;
    }
    public static org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECPoint $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $z0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid point");

        throw $r1;

     label1:
        return $r0;
    }
