org.spongycastle.math.ec.DoubleAddMultiplier extends org.spongycastle.math.ec.AbstractECMultiplier
    public void <init>()
    {
        org.spongycastle.math.ec.DoubleAddMultiplier r0;

        r0 := @this: org.spongycastle.math.ec.DoubleAddMultiplier;

        specialinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: void <init>()>();

        return;
    }
    protected org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.DoubleAddMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1, $r5;
        java.math.BigInteger $r2;
        org.spongycastle.math.ec.ECPoint[] r3;
        int i0, $i1, i2;
        org.spongycastle.math.ec.ECCurve $r4;
        boolean $z0;
        byte b3;

        r0 := @this: org.spongycastle.math.ec.DoubleAddMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        r3 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        r3[0] = $r5;

        r3[1] = $r1;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label4;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(i2);

        if $z0 == 0 goto label3;

        b3 = 1;

     label2:
        i0 = 1 - b3;

        $r5 = r3[i0];

        $r1 = r3[b3];

        $r1 = virtualinvoke $r5.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>($r1);

        r3[i0] = $r1;

        i2 = i2 + 1;

        goto label1;

     label3:
        b3 = 0;

        goto label2;

     label4:
        $r1 = r3[0];

        return $r1;
    }
