org.spongycastle.math.ec.tools.DiscoverEndomorphisms extends java.lang.Object
private static final int radix
    public void <init>()
    {
        org.spongycastle.math.ec.tools.DiscoverEndomorphisms r0;

        r0 := @this: org.spongycastle.math.ec.tools.DiscoverEndomorphisms;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static boolean areRelativelyPrime(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r1);

        $r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r0);

        return $z0;
    }
    private static java.math.BigInteger[] calculateRange(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3;
        java.math.BigInteger[] $r4;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        $r4 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] order(java.math.BigInteger,java.math.BigInteger)>($r3, $r0);

        return $r4;
    }
    private static java.math.BigInteger[] chooseShortest(java.math.BigInteger[], java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0, r1;
        boolean $z0;

        r1 := @parameter0: java.math.BigInteger[];

        $r0 := @parameter1: java.math.BigInteger[];

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean isShorter(java.math.BigInteger[],java.math.BigInteger[])>(r1, $r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        return $r0;
    }
    private static void discoverEndomorphism(java.lang.String)
    {
        java.lang.String $r0;
        org.spongycastle.asn1.x9.X9ECParameters $r1;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3;
        org.spongycastle.math.ec.ECCurve $r4;
        boolean $z0;
        org.spongycastle.math.field.FiniteField $r5;
        java.math.BigInteger $r6, $r8;
        org.spongycastle.math.ec.ECFieldElement $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

        if $r1 != null goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown curve: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r0);

        return;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpCurve(org.spongycastle.math.ec.ECCurve)>($r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $r6 = interfaceinvoke $r5.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        $r7 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $z0 = virtualinvoke $r7.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label2;

        $r8 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger THREE>;

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $r8 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Curve \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has a \'GLV Type B\' endomorphism with these parameters: ");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r0);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printGLVTypeBParameters(org.spongycastle.asn1.x9.X9ECParameters)>($r1);

     label2:
        return;
    }
    private static java.math.BigInteger[] extEuclidBezout(java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0;
        java.math.BigInteger r1, r2, $r3, $r4, r5, r6, r7, $r8, $r9;
        int $i0;
        boolean z0;
        java.lang.IllegalStateException $r10;

        $r0 := @parameter0: java.math.BigInteger[];

        $r3 = $r0[0];

        $r4 = $r0[1];

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 >= 0 goto label4;

        z0 = 1;

     label1:
        if z0 == 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void swap(java.math.BigInteger[])>($r0);

     label2:
        r1 = $r0[0];

        $r3 = $r0[1];

        r5 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        r6 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

     label3:
        r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r2);

        if $i0 <= 0 goto label5;

        $r0 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r3);

        r1 = $r0[0];

        r2 = $r0[1];

        $r8 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r8 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

        r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        $r9 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r5);

        r1 = $r3;

        $r3 = r2;

        r5 = $r4;

        $r4 = $r8;

        r6 = r7;

        r7 = $r9;

        goto label3;

     label4:
        z0 = 0;

        goto label1;

     label5:
        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label6;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;

     label6:
        $r0 = newarray (java.math.BigInteger)[2];

        $r0[0] = $r4;

        $r0[1] = r7;

        if z0 == 0 goto label7;

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void swap(java.math.BigInteger[])>($r0);

     label7:
        return $r0;
    }
    private static java.math.BigInteger[] extEuclidGLV(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, r2, r3, r4, r5, r6;
        java.math.BigInteger[] $r7;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        r3 = $r0;

        r4 = $r1;

        r5 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        r6 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

     label1:
        $r7 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>(r4);

        r2 = $r7[0];

        $r1 = $r7[1];

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        r2 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean isLessThanSqrt(java.math.BigInteger,java.math.BigInteger)>(r4, $r0);

        if $z0 == 0 goto label2;

        $r7 = newarray (java.math.BigInteger)[6];

        $r7[0] = r3;

        $r7[1] = r5;

        $r7[2] = r4;

        $r7[3] = r6;

        $r7[4] = $r1;

        $r7[5] = r2;

        return $r7;

     label2:
        r3 = r4;

        r4 = $r1;

        r5 = r6;

        r6 = r2;

        goto label1;
    }
    private static java.math.BigInteger[] intersect(java.math.BigInteger[], java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0, $r1;
        java.math.BigInteger $r2, $r3, $r4;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger[];

        $r2 = $r0[0];

        $r3 = $r1[0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r3);

        $r3 = $r0[1];

        $r4 = $r1[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>($r4);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 <= 0 goto label1;

        return null;

     label1:
        $r0 = newarray (java.math.BigInteger)[2];

        $r0[0] = $r2;

        $r0[1] = $r3;

        return $r0;
    }
    private static boolean isLessThanSqrt(java.math.BigInteger, java.math.BigInteger)
    {
        int i0, i1, $i2;
        java.math.BigInteger $r0, $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i2 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        i0 = i0 * 2;

        i1 = i0 + -1;

        if i1 > $i2 goto label2;

        if i0 < $i2 goto label1;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r0);

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i2 >= 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static boolean isShorter(java.math.BigInteger[], java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0, $r1;
        boolean $z0, z1, z2;
        java.math.BigInteger $r2, $r3, $r4, $r5;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger[];

        $z0 = 1;

        $r2 = $r0[0];

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r2 = $r0[1];

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r2 = $r1[0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r5 = $r1[1];

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label3;

        z1 = 1;

     label1:
        $i0 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i0 >= 0 goto label4;

        z2 = 1;

     label2:
        if z1 != z2 goto label5;

        return z1;

     label3:
        z1 = 0;

        goto label1;

     label4:
        z2 = 0;

        goto label2;

     label5:
        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r4);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label7;

     label6:
        return $z0;

     label7:
        $z0 = 0;

        goto label6;
    }
    private static boolean isVectorBoundedBySqrt(java.math.BigInteger[], java.math.BigInteger)
    {
        java.math.BigInteger[] $r0;
        java.math.BigInteger $r1, $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger;

        $r2 = $r0[0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r3 = $r0[1];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r3);

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean isLessThanSqrt(java.math.BigInteger,java.math.BigInteger)>($r2, $r1);

        return $z0;
    }
    private static java.math.BigInteger isqrt(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 / 2;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

     label1:
        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $r1 = $r2;

        goto label1;
    }
    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;
        int $i0, $i1;
        java.io.PrintStream $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.String[];

        $i0 = lengthof $r0;

        if $i0 >= 1 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Expected a list of curve names as arguments");

        return;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r2 = $r0[$i0];

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void discoverEndomorphism(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    private static java.math.BigInteger[] order(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        int $i0;
        java.math.BigInteger[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label1;

        $r2 = newarray (java.math.BigInteger)[2];

        $r2[0] = $r0;

        $r2[1] = $r1;

        return $r2;

     label1:
        $r2 = newarray (java.math.BigInteger)[2];

        $r2[0] = $r1;

        $r2[1] = $r0;

        return $r2;
    }
    private static void printGLVTypeBParameters(org.spongycastle.asn1.x9.X9ECParameters)
    {
        org.spongycastle.asn1.x9.X9ECParameters $r0;
        int i0, $i1;
        java.math.BigInteger[] r1, $r6, $r7, $r8;
        java.security.SecureRandom r2;
        java.math.BigInteger r3, $r4, $r5, $r9, $r10, $r11, r12, $r13, $r15, $r16;
        boolean $z0;
        java.lang.IllegalStateException $r14;
        org.spongycastle.math.ec.ECPoint $r17, $r18;
        org.spongycastle.math.ec.ECFieldElement $r19, $r20, $r23, $r24;
        org.spongycastle.math.ec.ECCurve $r21;
        org.spongycastle.math.field.FiniteField $r22;
        java.lang.String $r25;
        java.lang.StringBuilder $r26;

        $r0 := @parameter0: org.spongycastle.asn1.x9.X9ECParameters;

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r5 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r5 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger solveQuadraticEquation(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r4, $r5, r3);

        $r6 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] extEuclidGLV(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

        $r7 = newarray (java.math.BigInteger)[2];

        r3 = $r6[2];

        $r7[0] = r3;

        r3 = $r6[3];

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r7[1] = r3;

        r1 = newarray (java.math.BigInteger)[2];

        r3 = $r6[0];

        r1[0] = r3;

        r3 = $r6[1];

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        r1[1] = r3;

        $r8 = newarray (java.math.BigInteger)[2];

        r3 = $r6[4];

        $r8[0] = r3;

        r3 = $r6[5];

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r8[1] = r3;

        r1 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] chooseShortest(java.math.BigInteger[],java.math.BigInteger[])>(r1, $r8);

        $r6 = r1;

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean isVectorBoundedBySqrt(java.math.BigInteger[],java.math.BigInteger)>(r1, $r4);

        if $z0 != 0 goto label6;

        r3 = $r7[0];

        $r9 = $r7[1];

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean areRelativelyPrime(java.math.BigInteger,java.math.BigInteger)>(r3, $r9);

        if $z0 == 0 goto label6;

        $r9 = $r7[0];

        r3 = $r7[1];

        $r10 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        r1 = newarray (java.math.BigInteger)[2];

        $r10 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger abs()>();

        r1[0] = $r10;

        $r10 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger abs()>();

        r1[1] = $r10;

        r1 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] extEuclidBezout(java.math.BigInteger[])>(r1);

        $r10 = r1[0];

        r12 = r1[1];

        i0 = virtualinvoke $r11.<java.math.BigInteger: int signum()>();

        if i0 >= 0 goto label1;

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger negate()>();

     label1:
        i0 = virtualinvoke r3.<java.math.BigInteger: int signum()>();

        if i0 <= 0 goto label2;

        r12 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger negate()>();

     label2:
        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r13 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r12);

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r13);

        $r13 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r11.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label3;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label3:
        r12 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        r12 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r13 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r15 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r15 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r15);

        $r15 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger isqrt(java.math.BigInteger)>($r15);

        $r16 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r15 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);

        r1 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] calculateRange(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r11, $r15, r3);

        $r8 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] calculateRange(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r13, $r15, $r9);

        $r8 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger[] intersect(java.math.BigInteger[],java.math.BigInteger[])>(r1, $r8);

        if $r8 == null goto label6;

        $r11 = $r8[0];

     label4:
        $r13 = $r8[1];

        i0 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r13);

        if i0 > 0 goto label6;

        r1 = newarray (java.math.BigInteger)[2];

        $r13 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r13 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        r1[0] = $r13;

        $r13 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r13 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        r1[1] = $r13;

        $z0 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: boolean isShorter(java.math.BigInteger[],java.math.BigInteger[])>(r1, $r6);

        if $z0 == 0 goto label5;

        $r6 = r1;

     label5:
        $r13 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        goto label4;

     label6:
        $r17 = virtualinvoke $r0.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r17 = virtualinvoke $r17.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r18 = virtualinvoke $r17.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r5);

        $r18 = virtualinvoke $r18.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r19 = virtualinvoke $r17.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $r20 = virtualinvoke $r18.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $z0 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z0 != 0 goto label7;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derivation of GLV Type B parameters failed unexpectedly");

        throw $r14;

     label7:
        $r21 = virtualinvoke $r0.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r22 = virtualinvoke $r21.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        r3 = interfaceinvoke $r22.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        $r9 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger THREE>;

        $r9 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r9);

        r2 = new java.security.SecureRandom;

        specialinvoke r2.<java.security.SecureRandom: void <init>()>();

     label8:
        $r10 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        r12 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        r12 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r12);

        $r10 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r10, r12, r2);

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, r3);

        r12 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r10.<java.math.BigInteger: boolean equals(java.lang.Object)>(r12);

        if $z0 != 0 goto label8;

        $r21 = virtualinvoke $r0.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        r3 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, r3);

        $r20 = virtualinvoke $r21.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>(r3);

        $r19 = $r20;

        $r23 = virtualinvoke $r17.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r23 = virtualinvoke $r23.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r20);

        $r24 = virtualinvoke $r18.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $z0 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        if $z0 != 0 goto label9;

        $r20 = virtualinvoke $r20.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r19 = $r20;

        $r23 = virtualinvoke $r17.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r20 = virtualinvoke $r23.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r20);

        $r23 = virtualinvoke $r18.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $z0 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>($r23);

        if $z0 != 0 goto label9;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derivation of GLV Type B parameters failed unexpectedly");

        throw $r14;

     label9:
        r3 = $r7[0];

        $r9 = $r6[1];

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r9 = $r7[1];

        $r10 = $r6[0];

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 16;

        $i1 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 & 7;

        i0 = i0 - $i1;

        $r4 = $r6[1];

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i0);

        $r4 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger roundQuotient(java.math.BigInteger,java.math.BigInteger)>($r4, r3);

        $r9 = $r7[1];

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i0);

        r3 = staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: java.math.BigInteger roundQuotient(java.math.BigInteger,java.math.BigInteger)>($r9, r3);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r9 = virtualinvoke $r19.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r25 = virtualinvoke $r9.<java.math.BigInteger: java.lang.String toString(int)>(16);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("Beta", $r25);

        $r25 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("Lambda", $r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ ");

        $r5 = $r7[0];

        $r25 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = $r7[1];

        $r25 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("v1", $r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ ");

        $r5 = $r6[0];

        $r25 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = $r6[1];

        $r25 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("v2", $r25);

        $r25 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("(OPT) g1", $r25);

        $r25 = virtualinvoke r3.<java.math.BigInteger: java.lang.String toString(int)>(16);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("(OPT) g2", $r25);

        $r25 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <org.spongycastle.math.ec.tools.DiscoverEndomorphisms: void printProperty(java.lang.String,java.lang.Object)>("(OPT) bits", $r25);

        return;
    }
    private static void printProperty(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        java.lang.StringBuffer r2;
        int $i0;
        java.io.PrintStream $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("  ");

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

     label1:
        $i0 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        if $i0 >= 20 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label1;

     label2:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("= ");

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r0 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r0);

        return;
    }
    private static java.math.BigInteger roundQuotient(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;
        int $i0, $i1;
        boolean z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 == $i1 goto label2;

        z0 = 1;

     label1:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        if z0 == 0 goto label3;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        return $r0;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return $r0;
    }
    private static java.math.BigInteger solveQuadraticEquation(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;
        org.spongycastle.math.ec.ECFieldElement$Fp $r3;
        org.spongycastle.math.ec.ECFieldElement $r4;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        $r3 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        specialinvoke $r3.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r1);

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>();

        $r1 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r2 = $r1;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label1:
        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        return $r0;
    }
    private static void swap(java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0;
        java.math.BigInteger r1, $r2;

        $r0 := @parameter0: java.math.BigInteger[];

        r1 = $r0[0];

        $r2 = $r0[1];

        $r0[0] = $r2;

        $r0[1] = r1;

        return;
    }
