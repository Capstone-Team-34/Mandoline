org.spongycastle.math.ec.AbstractECMultiplier extends java.lang.Object implements org.spongycastle.math.ec.ECMultiplier
    public void <init>()
    {
        org.spongycastle.math.ec.AbstractECMultiplier r0;

        r0 := @this: org.spongycastle.math.ec.AbstractECMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.AbstractECMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.math.BigInteger $r2;
        int $i0;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve $r3;

        r0 := @this: org.spongycastle.math.ec.AbstractECMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        return $r1;

     label2:
        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r1, $r2);

        if $i0 <= 0 goto label4;

     label3:
        $r1 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint)>($r1);

        return $r1;

     label4:
        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        goto label3;
    }
protected abstract org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger) { 
// no body
} 
