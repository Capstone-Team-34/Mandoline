org.spongycastle.math.ec.ZSignedDigitL2RMultiplier extends org.spongycastle.math.ec.AbstractECMultiplier
    public void <init>()
    {
        org.spongycastle.math.ec.ZSignedDigitL2RMultiplier r0;

        r0 := @this: org.spongycastle.math.ec.ZSignedDigitL2RMultiplier;

        specialinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: void <init>()>();

        return;
    }
    protected org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ZSignedDigitL2RMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1, $r3, r4, $r5;
        java.math.BigInteger $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ZSignedDigitL2RMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        r4 = $r1;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int getLowestSetBit()>();

     label1:
        $i0 = $i0 + -1;

        if $i0 <= $i1 goto label4;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>($i0);

        if $z0 == 0 goto label3;

        $r5 = $r1;

     label2:
        r4 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint)>($r5);

        goto label1;

     label3:
        $r5 = $r3;

        goto label2;

     label4:
        $r1 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>($i1);

        return $r1;
    }
