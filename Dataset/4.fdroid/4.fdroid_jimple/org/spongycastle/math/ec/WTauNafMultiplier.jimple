org.spongycastle.math.ec.WTauNafMultiplier extends org.spongycastle.math.ec.AbstractECMultiplier
static final java.lang.String PRECOMP_NAME
    public void <init>()
    {
        org.spongycastle.math.ec.WTauNafMultiplier r0;

        r0 := @this: org.spongycastle.math.ec.WTauNafMultiplier;

        specialinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: void <init>()>();

        return;
    }
    private static org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m, byte[], org.spongycastle.math.ec.PreCompInfo)
    {
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r0, $r10;
        byte[] $r1;
        org.spongycastle.math.ec.WTauNafPreCompInfo r2;
        org.spongycastle.math.ec.ECPoint$AbstractF2m[] r3, r9;
        byte b0;
        org.spongycastle.math.ec.PreCompInfo r4;
        org.spongycastle.math.ec.ECCurve $r5;
        org.spongycastle.math.ec.ECCurve$AbstractF2m r6;
        org.spongycastle.math.ec.ECFieldElement $r7;
        java.math.BigInteger $r8;
        boolean $z0;
        int $i1, $i2, $i3;
        org.spongycastle.math.ec.ECPoint $r11;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r1 := @parameter1: byte[];

        r4 := @parameter2: org.spongycastle.math.ec.PreCompInfo;

        $r5 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        r6 = (org.spongycastle.math.ec.ECCurve$AbstractF2m) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        b0 = virtualinvoke $r8.<java.math.BigInteger: byte byteValue()>();

        if r4 == null goto label01;

        $z0 = r4 instanceof org.spongycastle.math.ec.WTauNafPreCompInfo;

        if $z0 != 0 goto label04;

     label01:
        r3 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ECPoint$AbstractF2m[] getPreComp(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte)>($r0, b0);

        r9 = r3;

        r2 = new org.spongycastle.math.ec.WTauNafPreCompInfo;

        specialinvoke r2.<org.spongycastle.math.ec.WTauNafPreCompInfo: void <init>()>();

        virtualinvoke r2.<org.spongycastle.math.ec.WTauNafPreCompInfo: void setPreComp(org.spongycastle.math.ec.ECPoint$AbstractF2m[])>(r3);

        virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: void setPreCompInfo(org.spongycastle.math.ec.ECPoint,java.lang.String,org.spongycastle.math.ec.PreCompInfo)>($r0, "bc_wtnaf", r2);

     label02:
        $i1 = lengthof r9;

        r3 = newarray (org.spongycastle.math.ec.ECPoint$AbstractF2m)[$i1];

        $i1 = 0;

     label03:
        $i2 = lengthof r9;

        if $i1 >= $i2 goto label05;

        $r10 = r9[$i1];

        $r11 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint negate()>();

        $r10 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r11;

        r3[$i1] = $r10;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        r2 = (org.spongycastle.math.ec.WTauNafPreCompInfo) r4;

        r9 = virtualinvoke r2.<org.spongycastle.math.ec.WTauNafPreCompInfo: org.spongycastle.math.ec.ECPoint$AbstractF2m[] getPreComp()>();

        goto label02;

     label05:
        $r5 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r11 = virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        $r0 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r11;

        $i1 = 0;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label06:
        if $i2 < 0 goto label10;

        $i1 = $i1 + 1;

        b0 = $r1[$i2];

        if b0 == 0 goto label08;

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint$AbstractF2m tauPow(int)>($i1);

        $i1 = 0;

        if b0 <= 0 goto label09;

        $i3 = b0 >>> 1;

        $r10 = r9[$i3];

     label07:
        $r11 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

        $r0 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r11;

     label08:
        $i2 = $i2 + -1;

        goto label06;

     label09:
        b0 = neg b0;

        $i3 = b0 >>> 1;

        $r10 = r3[$i3];

        goto label07;

     label10:
        if $i1 <= 0 goto label11;

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECPoint$AbstractF2m tauPow(int)>($i1);

     label11:
        return $r0;
    }
    private org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m, org.spongycastle.math.ec.ZTauElement, org.spongycastle.math.ec.PreCompInfo, byte, byte)
    {
        org.spongycastle.math.ec.WTauNafMultiplier r0;
        org.spongycastle.math.ec.ECPoint$AbstractF2m $r1;
        org.spongycastle.math.ec.ZTauElement $r2;
        org.spongycastle.math.ec.PreCompInfo $r3;
        byte $b0, $b1;
        org.spongycastle.math.ec.ZTauElement[] r4;
        java.math.BigInteger $r5, $r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.math.ec.WTauNafMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint$AbstractF2m;

        $r2 := @parameter1: org.spongycastle.math.ec.ZTauElement;

        $r3 := @parameter2: org.spongycastle.math.ec.PreCompInfo;

        $b0 := @parameter3: byte;

        $b1 := @parameter4: byte;

        if $b0 != 0 goto label2;

        r4 = <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement[] alpha0>;

     label1:
        $r5 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger getTw(byte,int)>($b1, 4);

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(16L);

        $r7 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte[] tauAdicWNaf(byte,org.spongycastle.math.ec.ZTauElement,byte,java.math.BigInteger,java.math.BigInteger,org.spongycastle.math.ec.ZTauElement[])>($b1, $r2, 4, $r6, $r5, r4);

        $r1 = staticinvoke <org.spongycastle.math.ec.WTauNafMultiplier: org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte[],org.spongycastle.math.ec.PreCompInfo)>($r1, $r7, $r3);

        return $r1;

     label2:
        r4 = <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement[] alpha1>;

        goto label1;
    }
    protected org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.WTauNafMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.math.BigInteger $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.math.ec.ECPoint$AbstractF2m r4;
        org.spongycastle.math.ec.ECCurve $r5;
        org.spongycastle.math.ec.ECCurve$AbstractF2m r6;
        int $i0;
        org.spongycastle.math.ec.ECFieldElement $r7;
        byte $b1, $b2;
        java.math.BigInteger[] $r9;
        org.spongycastle.math.ec.ZTauElement $r10;
        org.spongycastle.math.ec.PreCompInfo $r11;

        r0 := @this: org.spongycastle.math.ec.WTauNafMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $z0 = $r1 instanceof org.spongycastle.math.ec.ECPoint$AbstractF2m;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only ECPoint.AbstractF2m can be used in WTauNafMultiplier");

        throw $r3;

     label1:
        r4 = (org.spongycastle.math.ec.ECPoint$AbstractF2m) $r1;

        $r5 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint$AbstractF2m: org.spongycastle.math.ec.ECCurve getCurve()>();

        r6 = (org.spongycastle.math.ec.ECCurve$AbstractF2m) $r5;

        $i0 = virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: int getFieldSize()>();

        $r7 = virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $b1 = virtualinvoke $r8.<java.math.BigInteger: byte byteValue()>();

        $b2 = staticinvoke <org.spongycastle.math.ec.Tnaf: byte getMu(int)>($b1);

        $r9 = virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] getSi()>();

        $r10 = staticinvoke <org.spongycastle.math.ec.Tnaf: org.spongycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte)>($r2, $i0, $b1, $r9, $b2, 10);

        $r11 = virtualinvoke r6.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.PreCompInfo getPreCompInfo(org.spongycastle.math.ec.ECPoint,java.lang.String)>(r4, "bc_wtnaf");

        r4 = specialinvoke r0.<org.spongycastle.math.ec.WTauNafMultiplier: org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,org.spongycastle.math.ec.ZTauElement,org.spongycastle.math.ec.PreCompInfo,byte,byte)>(r4, $r10, $r11, $b1, $b2);

        return r4;
    }
