org.spongycastle.math.ec.endo.GLVTypeBEndomorphism extends java.lang.Object implements org.spongycastle.math.ec.endo.GLVEndomorphism
protected final org.spongycastle.math.ec.ECCurve curve
protected final org.spongycastle.math.ec.endo.GLVTypeBParameters parameters
protected final org.spongycastle.math.ec.ECPointMap pointMap
    public void <init>(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.endo.GLVTypeBParameters)
    {
        org.spongycastle.math.ec.endo.GLVTypeBEndomorphism r0;
        org.spongycastle.math.ec.ECCurve $r1;
        org.spongycastle.math.ec.endo.GLVTypeBParameters $r2;
        org.spongycastle.math.ec.ScaleXPointMap $r3;
        java.math.BigInteger $r4;
        org.spongycastle.math.ec.ECFieldElement $r5;

        r0 := @this: org.spongycastle.math.ec.endo.GLVTypeBEndomorphism;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: org.spongycastle.math.ec.endo.GLVTypeBParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.ECCurve curve> = $r1;

        r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.endo.GLVTypeBParameters parameters> = $r2;

        $r3 = new org.spongycastle.math.ec.ScaleXPointMap;

        $r4 = virtualinvoke $r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getBeta()>();

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r4);

        specialinvoke $r3.<org.spongycastle.math.ec.ScaleXPointMap: void <init>(org.spongycastle.math.ec.ECFieldElement)>($r5);

        r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.ECPointMap pointMap> = $r3;

        return;
    }
    protected java.math.BigInteger calculateB(java.math.BigInteger, java.math.BigInteger, int)
    {
        org.spongycastle.math.ec.endo.GLVTypeBEndomorphism r0;
        java.math.BigInteger $r1, $r2;
        int $i0, $i1;
        boolean z0, $z1;

        r0 := @this: org.spongycastle.math.ec.endo.GLVTypeBEndomorphism;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i1 >= 0 goto label3;

        z0 = 1;

     label1:
        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $i1 = $i0 + -1;

        $z1 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>($i1);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

        $r2 = $r1;

        if $z1 == 0 goto label2;

        $r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

     label2:
        if z0 == 0 goto label4;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger negate()>();

        return $r1;

     label3:
        z0 = 0;

        goto label1;

     label4:
        return $r2;
    }
    public java.math.BigInteger[] decomposeScalar(java.math.BigInteger)
    {
        org.spongycastle.math.ec.endo.GLVTypeBEndomorphism r0;
        java.math.BigInteger $r1, $r3, $r4, $r5, $r6;
        org.spongycastle.math.ec.endo.GLVTypeBParameters r2;
        int $i0;
        java.math.BigInteger[] $r7;

        r0 := @this: org.spongycastle.math.ec.endo.GLVTypeBEndomorphism;

        $r1 := @parameter0: java.math.BigInteger;

        r2 = r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.endo.GLVTypeBParameters parameters>;

        $i0 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: int getBits()>();

        r2 = r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.endo.GLVTypeBParameters parameters>;

        $r3 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getG1()>();

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: java.math.BigInteger calculateB(java.math.BigInteger,java.math.BigInteger,int)>($r1, $r3, $i0);

        r2 = r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.endo.GLVTypeBParameters parameters>;

        $r3 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getG2()>();

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: java.math.BigInteger calculateB(java.math.BigInteger,java.math.BigInteger,int)>($r1, $r3, $i0);

        r2 = r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.endo.GLVTypeBParameters parameters>;

        $r5 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getV1A()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r6 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getV2A()>();

        $r6 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r5 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getV1B()>();

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r5 = virtualinvoke r2.<org.spongycastle.math.ec.endo.GLVTypeBParameters: java.math.BigInteger getV2B()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r3 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r7 = newarray (java.math.BigInteger)[2];

        $r7[0] = $r1;

        $r7[1] = $r3;

        return $r7;
    }
    public org.spongycastle.math.ec.ECPointMap getPointMap()
    {
        org.spongycastle.math.ec.endo.GLVTypeBEndomorphism r0;
        org.spongycastle.math.ec.ECPointMap r1;

        r0 := @this: org.spongycastle.math.ec.endo.GLVTypeBEndomorphism;

        r1 = r0.<org.spongycastle.math.ec.endo.GLVTypeBEndomorphism: org.spongycastle.math.ec.ECPointMap pointMap>;

        return r1;
    }
    public boolean hasEfficientPointMap()
    {
        org.spongycastle.math.ec.endo.GLVTypeBEndomorphism r0;

        r0 := @this: org.spongycastle.math.ec.endo.GLVTypeBEndomorphism;

        return 1;
    }
