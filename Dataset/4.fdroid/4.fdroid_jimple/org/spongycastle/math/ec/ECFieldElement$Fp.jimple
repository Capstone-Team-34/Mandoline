org.spongycastle.math.ec.ECFieldElement$Fp extends org.spongycastle.math.ec.ECFieldElement
java.math.BigInteger q
java.math.BigInteger r
java.math.BigInteger x
    public void <init>(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = staticinvoke <org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger calculateResidue(java.math.BigInteger)>($r1);

        specialinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r1, $r3, $r2);

        return;
    }
    void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2, $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        specialinvoke r0.<org.spongycastle.math.ec.ECFieldElement: void <init>()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 < 0 goto label1;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 < 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x value invalid in Fp field element");

        throw $r4;

     label2:
        r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q> = $r1;

        r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r> = $r2;

        r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x> = $r3;

        return;
    }
    static java.math.BigInteger calculateResidue(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        int $i0, $i1;
        long $l2;
        byte $b3;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i0 < 96 goto label1;

        $i1 = $i0 + -64;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        $l2 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        $b3 = $l2 cmp -1L;

        if $b3 != 0 goto label1;

        $r1 = <org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r0);

        return $r0;

     label1:
        return null;
    }
    private org.spongycastle.math.ec.ECFieldElement checkSqrt(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        org.spongycastle.math.ec.ECFieldElement r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 = virtualinvoke r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        return null;
    }
    private java.math.BigInteger[] lucasSequence(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2, $r3, r4, r5, r6, r7, r8, $r9, $r10;
        int $i0, $i1, $i2;
        boolean $z0;
        java.math.BigInteger[] $r11;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int getLowestSetBit()>();

        r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r5 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        r6 = $r1;

        r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r8 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i0 = $i0 + -1;

     label1:
        $i2 = $i1 + 1;

        if $i0 < $i2 goto label4;

        $r9 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>(r7, r8);

        r7 = $r9;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean testBit(int)>($i0);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r9, $r2);

        r8 = $r10;

        r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>(r4, r6);

        r5 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r9 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r5);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        $r9 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        r6 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r6);

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        r8 = $r9;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r4);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r10 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        r6 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r6);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r5);

        goto label2;

     label4:
        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>(r7, r8);

        r7 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r3, $r2);

        $r2 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>($r2);

        r8 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r1 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>($r1);

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r3, r7);

        $i0 = 1;

     label5:
        if $i0 > $i1 goto label6;

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r2, $r1);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        r7 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7);

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>($r1);

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r3, $r3);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r11 = newarray (java.math.BigInteger)[2];

        $r11[0] = $r2;

        $r11[1] = $r1;

        return $r11;
    }
    public org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r2;
        org.spongycastle.math.ec.ECFieldElement $r1;
        java.math.BigInteger $r3, $r4, $r5, $r6;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r6 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modAdd(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        specialinvoke $r2.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r4, $r5);

        return $r2;
    }
    public org.spongycastle.math.ec.ECFieldElement addOne()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r4;
        java.math.BigInteger $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r1 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $r2 = $r1;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 != 0 goto label1;

        $r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

     label1:
        $r4 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        specialinvoke $r4.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r1, $r2);

        return $r4;
    }
    public org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r2;
        org.spongycastle.math.ec.ECFieldElement $r1;
        java.math.BigInteger $r3, $r4, $r5, $r6;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r6 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modInverse(java.math.BigInteger)>($r6);

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        specialinvoke $r2.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r4, $r5);

        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        java.math.BigInteger $r3, $r4;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.spongycastle.math.ec.ECFieldElement$Fp;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.spongycastle.math.ec.ECFieldElement$Fp) $r1;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r4 = r2.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r4 = r2.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.lang.String getFieldName()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        return "Fp";
    }
    public int getFieldSize()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        int $i0;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        return $i0;
    }
    public java.math.BigInteger getQ()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public org.spongycastle.math.ec.ECFieldElement invert()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r1;
        java.math.BigInteger $r2, $r3, $r4;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modInverse(java.math.BigInteger)>($r4);

        specialinvoke $r1.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r3, $r4);

        return $r1;
    }
    protected java.math.BigInteger modAdd(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

     label1:
        return $r1;
    }
    protected java.math.BigInteger modDouble(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

     label1:
        return $r1;
    }
    protected java.math.BigInteger modHalf(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

     label1:
        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        return $r1;
    }
    protected java.math.BigInteger modHalfAbs(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label1:
        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        return $r1;
    }
    protected java.math.BigInteger modInverse(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        int i0, $i1;
        int[] $r3, $r4, $r5;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $i1 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: int getFieldSize()>();

        i0 = $i1 + 31;

        i0 = i0 >> 5;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat: int[] fromBigInteger(int,java.math.BigInteger)>($i1, $r2);

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat: int[] fromBigInteger(int,java.math.BigInteger)>($i1, $r1);

        $r5 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(i0);

        staticinvoke <org.spongycastle.math.raw.Mod: void invert(int[],int[],int[])>($r3, $r4, $r5);

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat: java.math.BigInteger toBigInteger(int,int[])>(i0, $r5);

        return $r1;
    }
    protected java.math.BigInteger modMult(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>($r1);

        return $r1;
    }
    protected java.math.BigInteger modReduce(java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        boolean z0, $z1;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        if $r2 == null goto label8;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label5;

        z0 = 1;

     label1:
        if z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger abs()>();

     label2:
        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

     label3:
        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i2 = $i0 + 1;

        if $i1 <= $i2 goto label6;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

        $r3 = $r2;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        if $z1 != 0 goto label4;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

     label4:
        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        goto label3;

     label5:
        z0 = 0;

        goto label1;

     label6:
        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label7;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        goto label6;

     label7:
        if z0 == 0 goto label9;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label9;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        return $r1;

     label8:
        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

     label9:
        return $r1;
    }
    protected java.math.BigInteger modSubtract(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

     label1:
        return $r1;
    }
    public org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r2;
        org.spongycastle.math.ec.ECFieldElement $r1;
        java.math.BigInteger $r3, $r4, $r5, $r6;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r6 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        specialinvoke $r2.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r4, $r5);

        return $r2;
    }
    public org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r5;
        org.spongycastle.math.ec.ECFieldElement $r1, $r2, $r3;
        java.math.BigInteger r4, $r6, $r7, $r8;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r3 := @parameter2: org.spongycastle.math.ec.ECFieldElement;

        r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r8 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r8 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r5 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r6 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

        r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r4);

        specialinvoke $r5.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, r4);

        return $r5;
    }
    public org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r5;
        org.spongycastle.math.ec.ECFieldElement $r1, $r2, $r3;
        java.math.BigInteger r4, $r6, $r7, $r8;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r3 := @parameter2: org.spongycastle.math.ec.ECFieldElement;

        r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r8 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r8 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r5 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r6 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

        r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r4);

        specialinvoke $r5.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, r4);

        return $r5;
    }
    public org.spongycastle.math.ec.ECFieldElement negate()
    {
        java.math.BigInteger $r0, $r1, $r2, $r5;
        org.spongycastle.math.ec.ECFieldElement$Fp r3, $r4;
        int $i0;

        r3 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r0 = r3.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i0 != 0 goto label1;

        return r3;

     label1:
        $r4 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r0 = r3.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r1 = r3.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r3.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r2 = r3.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r2 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        specialinvoke $r4.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r0, $r1, $r2);

        return $r4;
    }
    public org.spongycastle.math.ec.ECFieldElement sqrt()
    {
        java.math.BigInteger r0, r1, r2, $r5, $r7, $r9, $r10, $r12;
        java.util.Random r3;
        org.spongycastle.math.ec.ECFieldElement$Fp r4, $r8;
        boolean $z0;
        java.lang.RuntimeException $r6;
        org.spongycastle.math.ec.ECFieldElement $r11;
        int $i0;
        java.math.BigInteger[] $r13;

        r4 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $z0 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: boolean isZero()>();

        if $z0 != 0 goto label9;

        $z0 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: boolean isOne()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("not done yet");

        throw $r6;

     label2:
        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean testBit(int)>(1);

        if $z0 == 0 goto label3;

        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(2);

        r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

        $r8 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r9 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r10 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r10);

        specialinvoke $r8.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, r2, $r7);

        $r11 = specialinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement checkSqrt(org.spongycastle.math.ec.ECFieldElement)>($r8);

        return $r11;

     label3:
        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean testBit(int)>(2);

        if $z0 == 0 goto label5;

        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(3);

        $r7 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r2, $r7);

        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r5 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>(r2, $r5);

        r2 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r5, r2);

        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $r8 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        specialinvoke $r8.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r2, $r7, $r5);

        $r11 = specialinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement checkSqrt(org.spongycastle.math.ec.ECFieldElement)>($r8);

        return $r11;

     label4:
        r2 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r7 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(2);

        $r9 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r9);

        $r5 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r5, r2);

        $r8 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r7 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        specialinvoke $r8.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r2, $r7, $r5);

        $r11 = specialinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement checkSqrt(org.spongycastle.math.ec.ECFieldElement)>($r8);

        return $r11;

     label5:
        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r7 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r5, $r7);

        $r7 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label6;

        return null;

     label6:
        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modDouble(java.math.BigInteger)>(r2);

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modDouble(java.math.BigInteger)>($r7);

        $r9 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r9 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        $r10 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r0);

        r3 = new java.util.Random;

        specialinvoke r3.<java.util.Random: void <init>()>();

     label7:
        r0 = new java.math.BigInteger;

        r1 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        specialinvoke r0.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, r3);

        r1 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i0 >= 0 goto label7;

        r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r0);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        r1 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r1);

        $r12 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r5, $r12);

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label7;

        $r13 = specialinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger[] lucasSequence(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r0, r2, $r9);

        r1 = $r13[0];

        r0 = $r13[1];

        $r12 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>(r0, r0);

        $z0 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label8;

        $r8 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r5 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        r2 = r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modHalfAbs(java.math.BigInteger)>(r0);

        specialinvoke $r8.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, r2, $r7);

        return $r8;

     label8:
        r0 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label7;

        return null;

     label9:
        return r4;
    }
    public org.spongycastle.math.ec.ECFieldElement square()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r1;
        java.math.BigInteger $r2, $r3, $r4, $r5;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r2 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger)>($r5, $r4);

        specialinvoke $r1.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r3, $r4);

        return $r1;
    }
    public org.spongycastle.math.ec.ECFieldElement squareMinusProduct(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r4;
        org.spongycastle.math.ec.ECFieldElement $r1, $r2;
        java.math.BigInteger r3, $r5, $r6, $r7;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r4 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r6 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r3);

        specialinvoke $r4.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, r3);

        return $r4;
    }
    public org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r4;
        org.spongycastle.math.ec.ECFieldElement $r1, $r2;
        java.math.BigInteger r3, $r5, $r6, $r7;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r4 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r6 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modReduce(java.math.BigInteger)>(r3);

        specialinvoke $r4.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, r3);

        return $r4;
    }
    public org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0, $r2;
        org.spongycastle.math.ec.ECFieldElement $r1;
        java.math.BigInteger $r3, $r4, $r5, $r6;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r2 = new org.spongycastle.math.ec.ECFieldElement$Fp;

        $r3 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger q>;

        $r4 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger r>;

        $r5 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        $r6 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger modSubtract(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        specialinvoke $r2.<org.spongycastle.math.ec.ECFieldElement$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r3, $r4, $r5);

        return $r2;
    }
    public java.math.BigInteger toBigInteger()
    {
        org.spongycastle.math.ec.ECFieldElement$Fp r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.math.ec.ECFieldElement$Fp;

        r1 = r0.<org.spongycastle.math.ec.ECFieldElement$Fp: java.math.BigInteger x>;

        return r1;
    }
