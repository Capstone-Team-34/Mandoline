org.spongycastle.math.ec.GLVMultiplier extends org.spongycastle.math.ec.AbstractECMultiplier
protected final org.spongycastle.math.ec.ECCurve curve
protected final org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism
    public void <init>(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.endo.GLVEndomorphism)
    {
        org.spongycastle.math.ec.GLVMultiplier r0;
        org.spongycastle.math.ec.ECCurve $r1;
        org.spongycastle.math.ec.endo.GLVEndomorphism $r2;
        java.math.BigInteger $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.math.ec.GLVMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: org.spongycastle.math.ec.endo.GLVEndomorphism;

        specialinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: void <init>()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger getOrder()>();

        if $r3 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need curve with known group order");

        throw $r4;

     label2:
        r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.ECCurve curve> = $r1;

        r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism> = $r2;

        return;
    }
    protected org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.GLVMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1, $r10;
        java.math.BigInteger $r2, r3;
        org.spongycastle.math.ec.ECCurve $r4, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        org.spongycastle.math.ec.endo.GLVEndomorphism $r7;
        java.math.BigInteger[] $r8;
        org.spongycastle.math.ec.ECPointMap $r9;

        r0 := @this: org.spongycastle.math.ec.GLVMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r4 = r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.ECCurve curve>;

        $r5 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        r3 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger getOrder()>();

        $r7 = r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r3);

        $r8 = interfaceinvoke $r7.<org.spongycastle.math.ec.endo.GLVEndomorphism: java.math.BigInteger[] decomposeScalar(java.math.BigInteger)>($r2);

        $r2 = $r8[0];

        r3 = $r8[1];

        $r7 = r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism>;

        $r9 = interfaceinvoke $r7.<org.spongycastle.math.ec.endo.GLVEndomorphism: org.spongycastle.math.ec.ECPointMap getPointMap()>();

        $r7 = r0.<org.spongycastle.math.ec.GLVMultiplier: org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism>;

        $z0 = interfaceinvoke $r7.<org.spongycastle.math.ec.endo.GLVEndomorphism: boolean hasEfficientPointMap()>();

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPointMap,java.math.BigInteger)>($r1, $r2, $r9, r3);

        return $r1;

     label2:
        $r10 = interfaceinvoke $r9.<org.spongycastle.math.ec.ECPointMap: org.spongycastle.math.ec.ECPoint map(org.spongycastle.math.ec.ECPoint)>($r1);

        $r1 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r1, $r2, $r10, r3);

        return $r1;
    }
