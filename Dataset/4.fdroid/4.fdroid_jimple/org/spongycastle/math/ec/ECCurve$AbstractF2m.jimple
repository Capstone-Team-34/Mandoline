org.spongycastle.math.ec.ECCurve$AbstractF2m extends org.spongycastle.math.ec.ECCurve
private java.math.BigInteger[] si
    protected void <init>(int, int, int, int)
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m r0;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.math.field.FiniteField $r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = staticinvoke <org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.field.FiniteField buildField(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke r0.<org.spongycastle.math.ec.ECCurve: void <init>(org.spongycastle.math.field.FiniteField)>($r1);

        r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] si> = null;

        return;
    }
    private static org.spongycastle.math.field.FiniteField buildField(int, int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;
        int[] $r1;
        org.spongycastle.math.field.PolynomialExtensionField $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        if $i1 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k1 must be > 0");

        throw $r0;

     label1:
        if $i2 != 0 goto label3;

        if $i3 == 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k3 must be 0 if k2 == 0");

        throw $r0;

     label2:
        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = $i1;

        $r1[2] = $i0;

        $r2 = staticinvoke <org.spongycastle.math.field.FiniteFields: org.spongycastle.math.field.PolynomialExtensionField getBinaryExtensionField(int[])>($r1);

        return $r2;

     label3:
        if $i2 > $i1 goto label4;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k2 must be > k1");

        throw $r0;

     label4:
        if $i3 > $i2 goto label5;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k3 must be > k2");

        throw $r0;

     label5:
        $r1 = newarray (int)[5];

        $r1[0] = 0;

        $r1[1] = $i1;

        $r1[2] = $i2;

        $r1[3] = $i3;

        $r1[4] = $i0;

        $r2 = staticinvoke <org.spongycastle.math.field.FiniteFields: org.spongycastle.math.field.PolynomialExtensionField getBinaryExtensionField(int[])>($r1);

        return $r2;
    }
    public static java.math.BigInteger inverse(int, int[], java.math.BigInteger)
    {
        int $i0;
        int[] $r0;
        java.math.BigInteger $r1;
        org.spongycastle.math.ec.LongArray $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: java.math.BigInteger;

        $r2 = new org.spongycastle.math.ec.LongArray;

        specialinvoke $r2.<org.spongycastle.math.ec.LongArray: void <init>(java.math.BigInteger)>($r1);

        $r2 = virtualinvoke $r2.<org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray modInverse(int,int[])>($i0, $r0);

        $r1 = virtualinvoke $r2.<org.spongycastle.math.ec.LongArray: java.math.BigInteger toBigInteger()>();

        return $r1;
    }
    public org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger, java.math.BigInteger, boolean)
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m r0;
        java.math.BigInteger $r1, $r2;
        boolean $z0, $z1;
        org.spongycastle.math.ec.ECFieldElement $r3, $r4, r5, $r7;
        int $i0;
        org.spongycastle.math.ec.ECPoint $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r1);

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r2);

        r5 = $r4;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: int getCoordinateSystem()>();

        lookupswitch($i0)
        {
            case 5: goto label2;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r6 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean)>($r3, r5, $z0);

        return $r6;

     label2:
        $z1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r7 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement getB()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label3:
        r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement)>($r3);

        r5 = virtualinvoke r5.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>($r3);

        goto label1;
    }
    java.math.BigInteger[] getSi()
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m r0;
        java.math.BigInteger[] $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] si>;

        if $r1 != null goto label2;

        $r1 = staticinvoke <org.spongycastle.math.ec.Tnaf: java.math.BigInteger[] getSi(org.spongycastle.math.ec.ECCurve$AbstractF2m)>(r0);

        r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] si> = $r1;

     label2:
        $r1 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger[] si>;

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public boolean isKoblitz()
    {
        org.spongycastle.math.ec.ECCurve$AbstractF2m r0;
        java.math.BigInteger $r1;
        org.spongycastle.math.ec.ECFieldElement $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.math.ec.ECCurve$AbstractF2m;

        $r1 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger order>;

        if $r1 == null goto label2;

        $r1 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: java.math.BigInteger cofactor>;

        if $r1 == null goto label2;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement b>;

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: boolean isOne()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement a>;

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement a>;

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: boolean isOne()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
