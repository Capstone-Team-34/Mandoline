org.spongycastle.math.ec.custom.sec.SecP192R1Field extends java.lang.Object
private static final long M
static final int[] P
private static final int P5
static final int[] PExt
private static final int PExt11
private static final int[] PExtInv
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[6];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -2;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P> = $r0;

        $r0 = newarray (int)[12];

        $r0[0] = 1;

        $r0[1] = 0;

        $r0[2] = 2;

        $r0[3] = 0;

        $r0[4] = 1;

        $r0[5] = 0;

        $r0[6] = -2;

        $r0[7] = -1;

        $r0[8] = -3;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExt> = $r0;

        $r0 = newarray (int)[9];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -3;

        $r0[3] = -1;

        $r0[4] = -2;

        $r0[5] = -1;

        $r0[6] = 1;

        $r0[7] = 0;

        $r0[8] = 2;

        <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecP192R1Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecP192R1Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat192: int add(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[5];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void addPInvTo(int[])>($r2);

     label2:
        return;
    }
    public static void addExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(12, $r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[11];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(12, $r2, $i0);

     label2:
        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(6, $r0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[5];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
    private static void addPInvTo(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 + 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(6, $r0, 3);

     label2:
        return;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat192: int[] fromBigInteger(java.math.BigInteger)>($r0);

        $i0 = $r1[5];

        if $i0 != -1 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r1, $r2);

        if $z0 == 0 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat192: int subFrom(int[],int[])>($r2, $r1);

     label1:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(6, $r0, 0, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat192: int add(int[],int[],int[])>($r0, $r2, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(6, $r1, $i0);

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat192: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat192: void mul(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat192: int mulAddTo(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[11];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(12, $r2, $i0);

     label2:
        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean isZero(int[])>($r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat192: void zero(int[])>($r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat192: int sub(int[],int[],int[])>($r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, $l7, $l9;
        int $i6, $i8;
        byte $b10;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i6 = $r0[6];

        l0 = (long) $i6;

        l0 = l0 & 4294967295L;

        $i6 = $r0[7];

        l1 = (long) $i6;

        l1 = l1 & 4294967295L;

        $i6 = $r0[8];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        $i6 = $r0[9];

        l3 = (long) $i6;

        l3 = l3 & 4294967295L;

        $i6 = $r0[10];

        l4 = (long) $i6;

        l4 = l4 & 4294967295L;

        $i6 = $r0[11];

        l5 = (long) $i6;

        l5 = l5 & 4294967295L;

        l4 = l0 + l4;

        l5 = l1 + l5;

        $i6 = $r0[0];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 + l4;

        $l7 = 0L + $l7;

        $i6 = (int) $l7;

        $l7 = $l7 >> 32;

        $i8 = $r0[1];

        $l9 = (long) $i8;

        $l9 = $l9 & 4294967295L;

        $l9 = $l9 + l5;

        $l7 = $l7 + $l9;

        $i8 = (int) $l7;

        $r1[1] = $i8;

        $l7 = $l7 >> 32;

        l4 = l4 + l2;

        l3 = l5 + l3;

        $i8 = $r0[2];

        l2 = (long) $i8;

        l2 = l2 & 4294967295L;

        l2 = l2 + l4;

        l5 = $l7 + l2;

        l2 = l5 & 4294967295L;

        l5 = l5 >> 32;

        $i8 = $r0[3];

        $l7 = (long) $i8;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 + l3;

        l5 = l5 + $l7;

        $i8 = (int) l5;

        $r1[3] = $i8;

        l5 = l5 >> 32;

        l4 = l4 - l0;

        l0 = l3 - l1;

        $i8 = $r0[4];

        l1 = (long) $i8;

        l1 = l1 & 4294967295L;

        l1 = l1 + l4;

        l1 = l5 + l1;

        $i8 = (int) l1;

        $r1[4] = $i8;

        l1 = l1 >> 32;

        $i8 = $r0[5];

        l3 = (long) $i8;

        l3 = l3 & 4294967295L;

        l0 = l3 + l0;

        l0 = l1 + l0;

        $i8 = (int) l0;

        $r1[5] = $i8;

        l1 = l0 >> 32;

        l0 = l2 + l1;

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        l1 = l1 + l2;

        $i6 = (int) l1;

        $r1[0] = $i6;

        l1 = l1 >> 32;

        $b10 = l1 cmp 0L;

        if $b10 == 0 goto label1;

        $i6 = $r1[1];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        l1 = l1 + l2;

        $i6 = (int) l1;

        $r1[1] = $i6;

        l1 = l1 >> 32;

        l0 = l0 + l1;

     label1:
        $i6 = (int) l0;

        $r1[2] = $i6;

        l0 = l0 >> 32;

        $b10 = l0 cmp 0L;

        if $b10 == 0 goto label2;

        $i6 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(6, $r1, 3);

        if $i6 != 0 goto label3;

     label2:
        $i6 = $r1[5];

        if $i6 != -1 goto label4;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label4;

     label3:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void addPInvTo(int[])>($r1);

     label4:
        return;
    }
    public static void reduce32(int, int[])
    {
        int $i0;
        int[] $r0, $r1;
        long l1, $l2, $l4;
        byte $b3;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        l1 = 0L;

        if $i0 == 0 goto label2;

        l1 = (long) $i0;

        l1 = l1 & 4294967295L;

        $i0 = $r0[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + l1;

        $l2 = 0L + $l2;

        $i0 = (int) $l2;

        $r0[0] = $i0;

        $l2 = $l2 >> 32;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = $r0[1];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[1] = $i0;

        $l2 = $l2 >> 32;

     label1:
        $i0 = $r0[2];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        l1 = $l4 + l1;

        l1 = $l2 + l1;

        $i0 = (int) l1;

        $r0[2] = $i0;

        l1 = l1 >> 32;

     label2:
        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label3;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(6, $r0, 3);

        if $i0 != 0 goto label4;

     label3:
        $i0 = $r0[5];

        if $i0 != -1 goto label5;

        $r1 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label5;

     label4:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void addPInvTo(int[])>($r0);

     label5:
        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat192: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat192: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat192: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat192: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat192: void square(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    private static void subPInvFrom(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 - 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(6, $r0, 3);

     label2:
        return;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat192: int sub(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void subPInvFrom(int[])>($r2);

     label1:
        return;
    }
    public static void subtractExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(12, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(12, $r2, $i0);

     label1:
        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(6, $r0, 0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[5];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP192R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat192: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP192R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
