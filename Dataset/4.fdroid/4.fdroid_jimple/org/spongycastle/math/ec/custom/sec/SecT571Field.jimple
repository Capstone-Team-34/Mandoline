org.spongycastle.math.ec.custom.sec.SecT571Field extends java.lang.Object
private static final long M59
private static final long RM
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecT571Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecT571Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void add(long[], int, long[], int, long[], int)
    {
        long[] $r0, $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i5;
        long $l6, $l7;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: long[];

        $i2 := @parameter5: int;

        i3 = 0;

     label1:
        if i3 >= 9 goto label2;

        $i4 = $i2 + i3;

        $i5 = $i0 + i3;

        $l6 = $r0[$i5];

        $i5 = $i1 + i3;

        $l7 = $r1[$i5];

        $l6 = $l6 ^ $l7;

        $r2[$i4] = $l6;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static void add(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l2;
        int i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        i1 = 0;

     label1:
        if i1 >= 9 goto label2;

        $l2 = $r0[i1];

        $l0 = $r1[i1];

        $l0 = $l2 ^ $l0;

        $r2[i1] = $l0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private static void addBothTo(long[], int, long[], int, long[], int)
    {
        long[] $r0, $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i6;
        long $l5, $l7, $l8;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: long[];

        $i2 := @parameter5: int;

        i3 = 0;

     label1:
        if i3 >= 9 goto label2;

        $i4 = $i2 + i3;

        $l5 = $r2[$i4];

        $i6 = $i0 + i3;

        $l7 = $r0[$i6];

        $i6 = $i1 + i3;

        $l8 = $r1[$i6];

        $l7 = $l7 ^ $l8;

        $l5 = $l5 ^ $l7;

        $r2[$i4] = $l5;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static void addExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l2;
        int i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        i1 = 0;

     label1:
        if i1 >= 18 goto label2;

        $l2 = $r0[i1];

        $l0 = $r1[i1];

        $l0 = $l2 ^ $l0;

        $r2[i1] = $l0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void addOne(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;
        int i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $l0 = $l0 ^ 1L;

        $r1[0] = $l0;

        i1 = 1;

     label1:
        if i1 >= 9 goto label2;

        $l0 = $r0[i1];

        $r1[i1] = $l0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static long[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        long[] $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] fromBigInteger64(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce5(long[],int)>($r1, 0);

        return $r1;
    }
    protected static void implMultiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, r3;
        int $i0, i1, i2, $i4, i5;
        long $l3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        r3 = newarray (long)[144];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 9, 9);

        i1 = 0;

        i2 = 7;

     label01:
        if i2 <= 0 goto label02;

        i1 = i1 + 18;

        $i0 = i1 >>> 1;

        staticinvoke <org.spongycastle.math.raw.Nat: long shiftUpBit64(int,long[],int,long,long[],int)>(9, r3, $i0, 0L, r3, i1);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce5(long[],int)>(r3, i1);

        $i0 = i1 + 9;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void add(long[],int,long[],int,long[],int)>(r3, 9, r3, i1, r3, $i0);

        i2 = i2 + -1;

        goto label01;

     label02:
        i1 = lengthof r3;

        $r1 = newarray (long)[i1];

        i1 = lengthof r3;

        staticinvoke <org.spongycastle.math.raw.Nat: long shiftUpBits64(int,long[],int,int,long,long[],int)>(i1, r3, 0, 4, 0L, $r1, 0);

        i1 = 56;

     label03:
        if i1 < 0 goto label06;

        i2 = 1;

     label04:
        if i2 >= 9 goto label05;

        $l3 = $r0[i2];

        $l3 = $l3 >>> i1;

        $i4 = (int) $l3;

        $i0 = $i4 & 15;

        $i4 = $i4 >>> 4;

        $i4 = $i4 & 15;

        $i0 = $i0 * 9;

        $i4 = $i4 * 9;

        i5 = i2 + -1;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void addBothTo(long[],int,long[],int,long[],int)>(r3, $i0, $r1, $i4, $r2, i5);

        i2 = i2 + 2;

        goto label04;

     label05:
        staticinvoke <org.spongycastle.math.raw.Nat: long shiftUpBits64(int,long[],int,int,long)>(16, $r2, 0, 8, 0L);

        i1 = i1 + -8;

        goto label03;

     label06:
        i1 = 56;

     label07:
        if i1 < 0 goto label11;

        i2 = 0;

     label08:
        if i2 >= 9 goto label09;

        $l3 = $r0[i2];

        $l3 = $l3 >>> i1;

        $i4 = (int) $l3;

        $i0 = $i4 & 15;

        $i4 = $i4 >>> 4;

        $i4 = $i4 & 15;

        $i0 = $i0 * 9;

        $i4 = $i4 * 9;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void addBothTo(long[],int,long[],int,long[],int)>(r3, $i0, $r1, $i4, $r2, i2);

        i2 = i2 + 2;

        goto label08;

     label09:
        if i1 <= 0 goto label10;

        staticinvoke <org.spongycastle.math.raw.Nat: long shiftUpBits64(int,long[],int,int,long)>(18, $r2, 0, 8, 0L);

     label10:
        i1 = i1 + -8;

        goto label07;

     label11:
        return;
    }
    protected static void implMulwAcc(long[], long, long[], int)
    {
        long[] $r0, $r1, r2;
        long $l0, l2, $l5, l6, $l7, $l9;
        int $i1, i3, $i4, i8;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        r2 = newarray (long)[32];

        r2[1] = $l0;

        i3 = 2;

     label1:
        if i3 >= 32 goto label2;

        $i4 = i3 >>> 1;

        $l5 = r2[$i4];

        $l5 = $l5 << 1;

        r2[i3] = $l5;

        $i4 = i3 + 1;

        $l5 = r2[i3];

        $l5 = $l5 ^ $l0;

        r2[$i4] = $l5;

        i3 = i3 + 2;

        goto label1;

     label2:
        $l5 = 0L;

        i3 = 0;

     label3:
        if i3 >= 9 goto label7;

        l6 = $r0[i3];

        $i4 = (int) l6;

        $i4 = $i4 & 31;

        $l7 = r2[$i4];

        $l7 = $l5 ^ $l7;

        $l5 = 0L;

        $i4 = 60;

     label4:
        l2 = l6 >>> $i4;

        i8 = (int) l2;

        i8 = i8 & 31;

        l2 = r2[i8];

        $l9 = l2 << $i4;

        $l7 = $l7 ^ $l9;

        i8 = neg $i4;

        l2 = l2 >>> i8;

        $l5 = $l5 ^ l2;

        $i4 = $i4 + -5;

        if $i4 > 0 goto label4;

        $i4 = 0;

     label5:
        if $i4 >= 4 goto label6;

        l6 = -1190112520884487202L & l6;

        l6 = l6 >>> 1;

        l2 = $l0 << $i4;

        l2 = l2 >> 63;

        l2 = l2 & l6;

        $l5 = $l5 ^ l2;

        $i4 = $i4 + 1;

        goto label5;

     label6:
        $i4 = $i1 + i3;

        l6 = $r1[$i4];

        l6 = l6 ^ $l7;

        $r1[$i4] = l6;

        i3 = i3 + 1;

        goto label3;

     label7:
        $i1 = $i1 + 9;

        $l0 = $r1[$i1];

        $l0 = $l0 ^ $l5;

        $r1[$i1] = $l0;

        return;
    }
    protected static void implSquare(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;
        int i1, $i2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        i1 = 0;

     label1:
        if i1 >= 9 goto label2;

        $l0 = $r0[i1];

        $i2 = i1 << 1;

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>($l0, $r1, $i2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void invert(long[], long[])
    {
        long[] $r0, $r1, $r3, $r4, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat576: boolean isZero64(long[])>($r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r3 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] create64()>();

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] create64()>();

        $r5 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] create64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void square(long[],long[])>($r0, $r5);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void square(long[],long[])>($r5, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void square(long[],long[])>($r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 2, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r5, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 5, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r4, 5, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 15, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r5);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r5, 30, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 30, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 60, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r4, 60, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r3, 180, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void squareN(long[],int,long[])>($r4, 180, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void multiply(long[],long[],long[])>($r3, $r5, $r1);

        return;
    }
    public static void multiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce(long[],long[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void addExt(long[],long[],long[])>($r2, $r3, $r2);

        return;
    }
    public static void reduce(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, $l2, $l3;
        int i4, $i5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l1 = $r0[9];

        l0 = $r0[17];

        $l2 = l0 >>> 59;

        l1 = $l2 ^ l1;

        $l2 = l0 >>> 57;

        l1 = l1 ^ $l2;

        $l2 = l0 >>> 54;

        l1 = l1 ^ $l2;

        $l2 = l0 >>> 49;

        l1 = l1 ^ $l2;

        $l2 = $r0[8];

        $l3 = l0 << 5;

        $l2 = $l2 ^ $l3;

        $l3 = l0 << 7;

        $l2 = $l2 ^ $l3;

        $l3 = l0 << 10;

        $l2 = $l2 ^ $l3;

        l0 = l0 << 15;

        $l2 = $l2 ^ l0;

        i4 = 16;

     label1:
        if i4 < 10 goto label2;

        l0 = $r0[i4];

        $i5 = i4 + -8;

        $l3 = l0 >>> 59;

        $l2 = $l3 ^ $l2;

        $l3 = l0 >>> 57;

        $l2 = $l2 ^ $l3;

        $l3 = l0 >>> 54;

        $l2 = $l2 ^ $l3;

        $l3 = l0 >>> 49;

        $l2 = $l2 ^ $l3;

        $r1[$i5] = $l2;

        $i5 = i4 + -9;

        $l2 = $r0[$i5];

        $l3 = l0 << 5;

        $l2 = $l2 ^ $l3;

        $l3 = l0 << 7;

        $l2 = $l2 ^ $l3;

        $l3 = l0 << 10;

        $l2 = $l2 ^ $l3;

        l0 = l0 << 15;

        $l2 = $l2 ^ l0;

        i4 = i4 + -1;

        goto label1;

     label2:
        l0 = l1 >>> 59;

        l0 = l0 ^ $l2;

        $l2 = l1 >>> 57;

        l0 = l0 ^ $l2;

        $l2 = l1 >>> 54;

        l0 = l0 ^ $l2;

        $l2 = l1 >>> 49;

        l0 = l0 ^ $l2;

        $r1[1] = l0;

        l0 = $r0[0];

        $l2 = l1 << 5;

        l0 = l0 ^ $l2;

        $l2 = l1 << 7;

        l0 = l0 ^ $l2;

        $l2 = l1 << 10;

        l0 = l0 ^ $l2;

        l1 = l1 << 15;

        $l2 = l0 ^ l1;

        l1 = $r1[8];

        l0 = l1 >>> 59;

        $l2 = $l2 ^ l0;

        $l3 = l0 << 2;

        $l2 = $l2 ^ $l3;

        $l3 = l0 << 5;

        $l2 = $l2 ^ $l3;

        l0 = l0 << 10;

        l0 = $l2 ^ l0;

        $r1[0] = l0;

        l1 = 576460752303423487L & l1;

        $r1[8] = l1;

        return;
    }
    public static void reduce5(long[], int)
    {
        long[] $r0;
        int $i0, $i3;
        long l1, l2, $l4, $l5, $l6;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i3 = $i0 + 8;

        l2 = $r0[$i3];

        l1 = l2 >>> 59;

        $l4 = $r0[$i0];

        $l5 = l1 << 2;

        $l5 = $l5 ^ l1;

        $l6 = l1 << 5;

        $l5 = $l5 ^ $l6;

        l1 = l1 << 10;

        l1 = $l5 ^ l1;

        $l4 = $l4 ^ l1;

        $r0[$i0] = $l4;

        $i0 = $i0 + 8;

        l2 = 576460752303423487L & l2;

        $r0[$i0] = l2;

        return;
    }
    public static void square(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce(long[],long[])>($r2, $r1);

        return;
    }
    public static void squareAddToExt(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void addExt(long[],long[],long[])>($r1, $r2, $r1);

        return;
    }
    public static void squareN(long[], int, long[])
    {
        long[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat576: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce(long[],long[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void implSquare(long[],long[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT571Field: void reduce(long[],long[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
