org.spongycastle.math.ec.custom.sec.SecP521R1Field extends java.lang.Object
static final int[] P
private static final int P16
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[17];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = -1;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = -1;

        $r0[16] = 511;

        <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecP521R1Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecP521R1Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        $i1 = $r0[16];

        $i0 = $i0 + $i1;

        $i1 = $r1[16];

        $i0 = $i0 + $i1;

        if $i0 > 511 goto label1;

        if $i0 != 511 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean eq(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[])>(16, $r2);

        $i0 = $i0 + $i1;

        $i0 = $i0 & 511;

     label2:
        $r2[16] = $i0;

        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(16, $r0, $r1);

        $i0 = $r0[16];

        $i0 = $i1 + $i0;

        if $i0 > 511 goto label1;

        if $i0 != 511 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean eq(int,int[],int[])>(16, $r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[])>(16, $r1);

        $i0 = $i0 + $i1;

        $i0 = $i0 & 511;

     label2:
        $r1[16] = $i0;

        return;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat: int[] fromBigInteger(int,java.math.BigInteger)>(521, $r0);

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean eq(int,int[],int[])>(17, $r1, $r2);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: void zero(int,int[])>(17, $r1);

     label1:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[16];

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(16, $r0, i0, $r1);

        i0 = i0 >>> 1;

        $i1 = $i1 >>> 23;

        $i1 = i0 | $i1;

        $r1[16] = $i1;

        return;
    }
    protected static void implMultiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int i0, i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        staticinvoke <org.spongycastle.math.raw.Nat512: void mul(int[],int[],int[])>($r0, $r1, $r2);

        i0 = $r0[16];

        i1 = $r1[16];

        $i2 = staticinvoke <org.spongycastle.math.raw.Nat: int mul31BothAdd(int,int,int[],int,int[],int[],int)>(16, i0, $r1, i1, $r0, $r2, 16);

        i0 = i0 * i1;

        $i2 = $i2 + i0;

        $r2[32] = $i2;

        return;
    }
    protected static void implSquare(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.spongycastle.math.raw.Nat512: void square(int[],int[])>($r0, $r1);

        i0 = $r0[16];

        $i1 = i0 << 1;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWordAddTo(int,int,int[],int,int[],int)>(16, $i1, $r0, 0, $r1, 16);

        i0 = i0 * i0;

        i0 = $i1 + i0;

        $r1[32] = i0;

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(33);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void implMultiply(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isZero(int,int[])>(17, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: void zero(int,int[])>(17, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(17, $r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[32];

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBits(int,int[],int,int,int,int[],int)>(16, $r0, 16, 9, i0, $r1, 0);

        $i1 = $i1 >>> 23;

        i0 = i0 >>> 9;

        i0 = $i1 + i0;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>(16, $r0, $r1);

        i0 = i0 + $i1;

        if i0 > 511 goto label1;

        if i0 != 511 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean eq(int,int[],int[])>(16, $r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[])>(16, $r1);

        i0 = i0 + $i1;

        i0 = i0 & 511;

     label2:
        $r1[16] = i0;

        return;
    }
    public static void reduce23(int[])
    {
        int[] $r0, $r1;
        int i0, $i1;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 = $r0[16];

        $i1 = i0 >>> 9;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int addWordTo(int,int,int[])>(16, $i1, $r0);

        i0 = i0 & 511;

        i0 = $i1 + i0;

        if i0 > 511 goto label1;

        if i0 != 511 goto label2;

        $r1 = <org.spongycastle.math.ec.custom.sec.SecP521R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean eq(int,int[],int[])>(16, $r0, $r1);

        if $z0 == 0 goto label2;

     label1:
        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[])>(16, $r0);

        i0 = i0 + $i1;

        i0 = i0 & 511;

     label2:
        $r0[16] = i0;

        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(33);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void implSquare(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(33);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void implSquare(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void implSquare(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP521R1Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        $i1 = $r0[16];

        $i0 = $i0 + $i1;

        $i1 = $r1[16];

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label1;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int dec(int,int[])>(16, $r2);

        $i0 = $i0 + $i1;

        $i0 = $i0 & 511;

     label1:
        $r2[16] = $i0;

        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[16];

        $i1 = i0 << 23;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(16, $r0, $i1, $r1);

        i0 = i0 << 1;

        i0 = $i1 | i0;

        i0 = i0 & 511;

        $r1[16] = i0;

        return;
    }
