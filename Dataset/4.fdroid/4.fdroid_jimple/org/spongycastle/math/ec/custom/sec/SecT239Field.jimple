org.spongycastle.math.ec.custom.sec.SecT239Field extends java.lang.Object
private static final long M47
private static final long M60
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecT239Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecT239Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        $l0 = $r0[2];

        $l1 = $r1[2];

        $l0 = $l0 ^ $l1;

        $r2[2] = $l0;

        $l0 = $r0[3];

        $l1 = $r1[3];

        $l0 = $l0 ^ $l1;

        $r2[3] = $l0;

        return;
    }
    public static void addExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        $l0 = $r0[2];

        $l1 = $r1[2];

        $l0 = $l0 ^ $l1;

        $r2[2] = $l0;

        $l0 = $r0[3];

        $l1 = $r1[3];

        $l0 = $l0 ^ $l1;

        $r2[3] = $l0;

        $l0 = $r0[4];

        $l1 = $r1[4];

        $l0 = $l0 ^ $l1;

        $r2[4] = $l0;

        $l0 = $r0[5];

        $l1 = $r1[5];

        $l0 = $l0 ^ $l1;

        $r2[5] = $l0;

        $l0 = $r0[6];

        $l1 = $r1[6];

        $l0 = $l0 ^ $l1;

        $r2[6] = $l0;

        $l0 = $r0[7];

        $l1 = $r1[7];

        $l0 = $l0 ^ $l1;

        $r2[7] = $l0;

        return;
    }
    public static void addOne(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $l0 = $l0 ^ 1L;

        $r1[0] = $l0;

        $l0 = $r0[1];

        $r1[1] = $l0;

        $l0 = $r0[2];

        $r1[2] = $l0;

        $l0 = $r0[3];

        $r1[3] = $l0;

        return;
    }
    public static long[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        long[] $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] fromBigInteger64(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void reduce17(long[],int)>($r1, 0);

        return $r1;
    }
    protected static void implCompactExt(long[])
    {
        long[] $r0;
        long l0, l1, l2, l3, l4, l5, l6, l7, $l8;

        $r0 := @parameter0: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        l4 = $r0[4];

        l5 = $r0[5];

        l6 = $r0[6];

        l7 = $r0[7];

        $l8 = l1 << 60;

        l0 = $l8 ^ l0;

        $r0[0] = l0;

        l1 = l1 >>> 4;

        l0 = l2 << 56;

        l1 = l1 ^ l0;

        $r0[1] = l1;

        l2 = l2 >>> 8;

        l1 = l3 << 52;

        l2 = l2 ^ l1;

        $r0[2] = l2;

        l3 = l3 >>> 12;

        l2 = l4 << 48;

        l3 = l3 ^ l2;

        $r0[3] = l3;

        l4 = l4 >>> 16;

        l3 = l5 << 44;

        l4 = l4 ^ l3;

        $r0[4] = l4;

        l5 = l5 >>> 20;

        l4 = l6 << 40;

        l5 = l5 ^ l4;

        $r0[5] = l5;

        l6 = l6 >>> 24;

        l5 = l7 << 36;

        l6 = l6 ^ l5;

        $r0[6] = l6;

        l7 = l7 >>> 28;

        $r0[7] = l7;

        return;
    }
    protected static void implExpand(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, $l4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        $l4 = 1152921504606846975L & l0;

        $r1[0] = $l4;

        l0 = l0 >>> 60;

        $l4 = l1 << 4;

        l0 = l0 ^ $l4;

        l0 = l0 & 1152921504606846975L;

        $r1[1] = l0;

        l1 = l1 >>> 56;

        l0 = l2 << 8;

        l1 = l1 ^ l0;

        l1 = l1 & 1152921504606846975L;

        $r1[2] = l1;

        l2 = l2 >>> 52;

        l3 = l3 << 12;

        l3 = l2 ^ l3;

        $r1[3] = l3;

        return;
    }
    protected static void implMultiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3, $r4;
        long l0, l1, l2, l3, $l6, $l7;
        int i4, $i5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = newarray (long)[4];

        $r4 = newarray (long)[4];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implExpand(long[],long[])>($r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implExpand(long[],long[])>($r1, $r4);

        l0 = $r3[0];

        l1 = $r4[0];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 0);

        l0 = $r3[1];

        l1 = $r4[1];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 1);

        l0 = $r3[2];

        l1 = $r4[2];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 2);

        l0 = $r3[3];

        l1 = $r4[3];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 3);

        i4 = 5;

     label1:
        if i4 <= 0 goto label2;

        l0 = $r2[i4];

        $i5 = i4 + -1;

        l1 = $r2[$i5];

        l0 = l0 ^ l1;

        $r2[i4] = l0;

        i4 = i4 + -1;

        goto label1;

     label2:
        l0 = $r3[0];

        l1 = $r3[1];

        l0 = l0 ^ l1;

        l1 = $r4[0];

        l2 = $r4[1];

        l1 = l1 ^ l2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 1);

        l0 = $r3[2];

        l1 = $r3[3];

        l0 = l0 ^ l1;

        l1 = $r4[2];

        l2 = $r4[3];

        l1 = l1 ^ l2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l1, $r2, 3);

        i4 = 7;

     label3:
        if i4 <= 1 goto label4;

        l0 = $r2[i4];

        $i5 = i4 + -2;

        l1 = $r2[$i5];

        l0 = l0 ^ l1;

        $r2[i4] = l0;

        i4 = i4 + -1;

        goto label3;

     label4:
        l0 = $r3[0];

        l1 = $r3[2];

        l0 = l0 ^ l1;

        l1 = $r3[1];

        l2 = $r3[3];

        l1 = l1 ^ l2;

        l2 = $r4[0];

        l3 = $r4[2];

        l2 = l2 ^ l3;

        l3 = $r4[1];

        $l6 = $r4[3];

        l3 = l3 ^ $l6;

        $l6 = l0 ^ l1;

        $l7 = l2 ^ l3;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>($l6, $l7, $r2, 3);

        $r0 = newarray (long)[3];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l0, l2, $r0, 0);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMulwAcc(long,long,long[],int)>(l1, l3, $r0, 1);

        l2 = $r0[0];

        l1 = $r0[1];

        l0 = $r0[2];

        l3 = $r2[2];

        l3 = l3 ^ l2;

        $r2[2] = l3;

        l3 = $r2[3];

        l2 = l2 ^ l1;

        l2 = l3 ^ l2;

        $r2[3] = l2;

        l2 = $r2[4];

        l1 = l0 ^ l1;

        l1 = l2 ^ l1;

        $r2[4] = l1;

        l1 = $r2[5];

        l0 = l1 ^ l0;

        $r2[5] = l0;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implCompactExt(long[])>($r2);

        return;
    }
    protected static void implMulwAcc(long, long, long[], int)
    {
        long $l0, $l1, l3, $l4, l6, $l9;
        long[] $r0, r1;
        int $i2, i5, $i7, $i8;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: long[];

        $i2 := @parameter3: int;

        r1 = newarray (long)[8];

        r1[1] = $l1;

        $l4 = r1[1];

        $l4 = $l4 << 1;

        r1[2] = $l4;

        $l4 = r1[2];

        $l4 = $l4 ^ $l1;

        r1[3] = $l4;

        $l4 = r1[2];

        $l4 = $l4 << 1;

        r1[4] = $l4;

        $l4 = r1[4];

        $l4 = $l4 ^ $l1;

        r1[5] = $l4;

        $l4 = r1[3];

        $l4 = $l4 << 1;

        r1[6] = $l4;

        $l4 = r1[6];

        $l4 = $l4 ^ $l1;

        r1[7] = $l4;

        i5 = (int) $l0;

        l6 = 0L;

        $i7 = i5 & 7;

        $l4 = r1[$i7];

        i5 = i5 >>> 3;

        i5 = i5 & 7;

        l3 = r1[i5];

        l3 = l3 << 3;

        $l4 = $l4 ^ l3;

        i5 = 54;

     label1:
        l3 = $l0 >>> i5;

        $i7 = (int) l3;

        $i8 = $i7 & 7;

        l3 = r1[$i8];

        $i7 = $i7 >>> 3;

        $i7 = $i7 & 7;

        $l9 = r1[$i7];

        $l9 = $l9 << 3;

        l3 = l3 ^ $l9;

        $l9 = l3 << i5;

        $l4 = $l4 ^ $l9;

        $i7 = neg i5;

        l3 = l3 >>> $i7;

        l6 = l6 ^ l3;

        i5 = i5 + -6;

        if i5 > 0 goto label1;

        $l0 = 585610922974906400L & $l0;

        $l1 = $l1 << 4;

        $l1 = $l1 >> 63;

        $l0 = $l0 & $l1;

        $l0 = $l0 >>> 5;

        $l0 = l6 ^ $l0;

        $l1 = $r0[$i2];

        l6 = 1152921504606846975L & $l4;

        $l1 = $l1 ^ l6;

        $r0[$i2] = $l1;

        $i2 = $i2 + 1;

        $l1 = $r0[$i2];

        $l4 = $l4 >>> 60;

        $l0 = $l0 << 4;

        $l0 = $l4 ^ $l0;

        $l0 = $l1 ^ $l0;

        $r0[$i2] = $l0;

        return;
    }
    protected static void implSquare(long[], long[])
    {
        long[] $r0, $r1;
        long l0, $l2;
        int $i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l0 = $r0[0];

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>(l0, $r1, 0);

        l0 = $r0[1];

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>(l0, $r1, 2);

        l0 = $r0[2];

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>(l0, $r1, 4);

        l0 = $r0[3];

        $i1 = (int) l0;

        $l2 = staticinvoke <org.spongycastle.math.raw.Interleave: long expand32to64(int)>($i1);

        $r1[6] = $l2;

        l0 = l0 >>> 32;

        $i1 = (int) l0;

        $i1 = staticinvoke <org.spongycastle.math.raw.Interleave: int expand16to32(int)>($i1);

        l0 = (long) $i1;

        l0 = l0 & 4294967295L;

        $r1[7] = l0;

        return;
    }
    public static void invert(long[], long[])
    {
        long[] $r0, $r1, $r3, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean isZero64(long[])>($r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] create64()>();

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] create64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r3, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r3, 3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r4, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r0, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r4, 7, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r3, 14, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r4, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r0, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r4, 29, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r3, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r3, 59, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r4, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r4, $r0, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void squareN(long[],int,long[])>($r4, 119, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void square(long[],long[])>($r3, $r1);

        return;
    }
    public static void multiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void reduce(long[],long[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void addExt(long[],long[],long[])>($r2, $r3, $r2);

        return;
    }
    public static void reduce(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, $l8;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l2 = $r0[0];

        l3 = $r0[1];

        l4 = $r0[2];

        l5 = $r0[3];

        l0 = $r0[4];

        l6 = $r0[5];

        l7 = $r0[6];

        l1 = $r0[7];

        $l8 = l1 << 17;

        l5 = l5 ^ $l8;

        $l8 = l1 >>> 47;

        l0 = l0 ^ $l8;

        $l8 = l1 << 47;

        l6 = l6 ^ $l8;

        l1 = l1 >>> 17;

        l7 = l7 ^ l1;

        l1 = l7 << 17;

        l4 = l4 ^ l1;

        l1 = l7 >>> 47;

        l5 = l5 ^ l1;

        l1 = l7 << 47;

        l0 = l0 ^ l1;

        l7 = l7 >>> 17;

        l6 = l6 ^ l7;

        l7 = l6 << 17;

        l3 = l3 ^ l7;

        l7 = l6 >>> 47;

        l4 = l4 ^ l7;

        l7 = l6 << 47;

        l5 = l5 ^ l7;

        l6 = l6 >>> 17;

        l0 = l0 ^ l6;

        l6 = l0 << 17;

        l2 = l2 ^ l6;

        l6 = l0 >>> 47;

        l3 = l3 ^ l6;

        l6 = l0 << 47;

        l4 = l4 ^ l6;

        l0 = l0 >>> 17;

        l5 = l5 ^ l0;

        l0 = l5 >>> 47;

        l2 = l2 ^ l0;

        $r1[0] = l2;

        $r1[1] = l3;

        l2 = l0 << 30;

        l2 = l2 ^ l4;

        $r1[2] = l2;

        l2 = 140737488355327L & l5;

        $r1[3] = l2;

        return;
    }
    public static void reduce17(long[], int)
    {
        long[] $r0;
        int $i0, $i3;
        long l1, l2, $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i3 = $i0 + 3;

        l2 = $r0[$i3];

        l1 = l2 >>> 47;

        $l4 = $r0[$i0];

        $l4 = $l4 ^ l1;

        $r0[$i0] = $l4;

        $i3 = $i0 + 2;

        $l4 = $r0[$i3];

        l1 = l1 << 30;

        l1 = $l4 ^ l1;

        $r0[$i3] = l1;

        $i0 = $i0 + 3;

        l2 = 140737488355327L & l2;

        $r0[$i0] = l2;

        return;
    }
    public static void square(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void reduce(long[],long[])>($r2, $r1);

        return;
    }
    public static void squareAddToExt(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void addExt(long[],long[],long[])>($r1, $r2, $r1);

        return;
    }
    public static void squareN(long[], int, long[])
    {
        long[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void reduce(long[],long[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void implSquare(long[],long[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT239Field: void reduce(long[],long[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
