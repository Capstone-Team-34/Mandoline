org.spongycastle.math.ec.custom.djb.Curve25519Field extends java.lang.Object
private static final long M
static final int[] P
private static final int P7
private static final int[] PExt
private static final int PInv
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[8];

        $r0[0] = -19;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = 2147483647;

        <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P> = $r0;

        $r0 = newarray (int)[16];

        $r0[0] = 361;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = -19;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = 1073741823;

        <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.djb.Curve25519Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.djb.Curve25519Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r1, $r2);

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r2, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPFrom(int[])>($r2);

     label1:
        return;
    }
    public static void addExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPExtFrom(int[])>($r2);

     label1:
        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(8, $r0, $r1);

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPFrom(int[])>($r1);

     label1:
        return;
    }
    private static int addPExtTo(int[])
    {
        int[] $r0, $r1;
        int $i0;
        long $l1, $l2, $l4;
        byte $b3;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $r1 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(8, $r0, 1);

        $l1 = (long) $i0;

     label1:
        $i0 = $r0[8];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 - 19L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[8] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(15, $r0, 9);

        $l1 = (long) $i0;

     label2:
        $i0 = $r0[15];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $r1 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $i0 = $r1[15];

        $i0 = $i0 + 1;

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[15] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    private static int addPTo(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 - 19L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(7, $r0, 1);

        $l1 = (long) $i0;

     label1:
        $i0 = $r0[7];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + 2147483648L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[7] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] fromBigInteger(java.math.BigInteger)>($r0);

     label1:
        $r2 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r2);

        if $z0 == 0 goto label2;

        $r2 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int subFrom(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r2, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(8, $r1, 0);

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        staticinvoke <org.spongycastle.math.raw.Nat256: int mulAddTo(int[],int[],int[])>($r0, $r1, $r2);

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPExtFrom(int[])>($r2);

     label1:
        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean isZero(int[])>($r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat256: void zero(int[])>($r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1, i2, $i3;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[7];

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int,int[],int)>(8, $r0, 8, i0, $r1, 0);

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat256: int mulByWordAddTo(int,int[],int[])>(19, $r0, $r1);

        i2 = $i1 << 1;

        $i1 = $r1[7];

        $i3 = $i1 >>> 31;

        i0 = i0 >>> 31;

        i0 = $i3 - i0;

        i2 = i2 + i0;

        $i1 = $i1 & 2147483647;

        i2 = i2 * 19;

        i2 = staticinvoke <org.spongycastle.math.raw.Nat: int addWordTo(int,int,int[])>(7, i2, $r1);

        $i1 = $i1 + i2;

        $r1[7] = $i1;

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPFrom(int[])>($r1);

     label1:
        return;
    }
    public static void reduce27(int, int[])
    {
        int $i0, i1, i2;
        int[] $r0, $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i2 = $r0[7];

        i1 = $i0 << 1;

        $i0 = i2 >>> 31;

        i1 = i1 | $i0;

        $i0 = i2 & 2147483647;

        i2 = i1 * 19;

        i2 = staticinvoke <org.spongycastle.math.raw.Nat: int addWordTo(int,int,int[])>(7, i2, $r0);

        $i0 = $i0 + i2;

        $r0[7] = $i0;

        $r1 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPFrom(int[])>($r0);

     label1:
        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    private static int subPExtFrom(int[])
    {
        int[] $r0, $r1;
        int $i0;
        long $l1, $l2, $l4;
        byte $b3;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $r1 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 - $l2;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(8, $r0, 1);

        $l1 = (long) $i0;

     label1:
        $i0 = $r0[8];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + 19L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[8] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(15, $r0, 9);

        $l1 = (long) $i0;

     label2:
        $i0 = $r0[15];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $r1 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] PExt>;

        $i0 = $r1[15];

        $i0 = $i0 + 1;

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 - $l4;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[15] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    private static int subPFrom(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 + 19L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(7, $r0, 1);

        $l1 = (long) $i0;

     label1:
        $i0 = $r0[7];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - 2147483648L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[7] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int addPTo(int[])>($r2);

     label1:
        return;
    }
    public static void subtractExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int addPExtTo(int[])>($r2);

     label1:
        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        $r0 = <org.spongycastle.math.ec.custom.djb.Curve25519Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.djb.Curve25519Field: int subPFrom(int[])>($r1);

     label1:
        return;
    }
