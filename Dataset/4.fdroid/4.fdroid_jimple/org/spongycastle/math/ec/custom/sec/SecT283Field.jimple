org.spongycastle.math.ec.custom.sec.SecT283Field extends java.lang.Object
private static final long M27
private static final long M57
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecT283Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecT283Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        $l0 = $r0[2];

        $l1 = $r1[2];

        $l0 = $l0 ^ $l1;

        $r2[2] = $l0;

        $l0 = $r0[3];

        $l1 = $r1[3];

        $l0 = $l0 ^ $l1;

        $r2[3] = $l0;

        $l0 = $r0[4];

        $l1 = $r1[4];

        $l0 = $l0 ^ $l1;

        $r2[4] = $l0;

        return;
    }
    public static void addExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        $l0 = $r0[2];

        $l1 = $r1[2];

        $l0 = $l0 ^ $l1;

        $r2[2] = $l0;

        $l0 = $r0[3];

        $l1 = $r1[3];

        $l0 = $l0 ^ $l1;

        $r2[3] = $l0;

        $l0 = $r0[4];

        $l1 = $r1[4];

        $l0 = $l0 ^ $l1;

        $r2[4] = $l0;

        $l0 = $r0[5];

        $l1 = $r1[5];

        $l0 = $l0 ^ $l1;

        $r2[5] = $l0;

        $l0 = $r0[6];

        $l1 = $r1[6];

        $l0 = $l0 ^ $l1;

        $r2[6] = $l0;

        $l0 = $r0[7];

        $l1 = $r1[7];

        $l0 = $l0 ^ $l1;

        $r2[7] = $l0;

        $l0 = $r0[8];

        $l1 = $r1[8];

        $l0 = $l0 ^ $l1;

        $r2[8] = $l0;

        return;
    }
    public static void addOne(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $l0 = $l0 ^ 1L;

        $r1[0] = $l0;

        $l0 = $r0[1];

        $r1[1] = $l0;

        $l0 = $r0[2];

        $r1[2] = $l0;

        $l0 = $r0[3];

        $r1[3] = $l0;

        $l0 = $r0[4];

        $r1[4] = $l0;

        return;
    }
    public static long[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        long[] $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] fromBigInteger64(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void reduce37(long[],int)>($r1, 0);

        return $r1;
    }
    protected static void implCompactExt(long[])
    {
        long[] $r0;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, $l10;

        $r0 := @parameter0: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        l4 = $r0[4];

        l5 = $r0[5];

        l6 = $r0[6];

        l7 = $r0[7];

        l8 = $r0[8];

        l9 = $r0[9];

        $l10 = l1 << 57;

        l0 = $l10 ^ l0;

        $r0[0] = l0;

        l1 = l1 >>> 7;

        l0 = l2 << 50;

        l1 = l1 ^ l0;

        $r0[1] = l1;

        l2 = l2 >>> 14;

        l1 = l3 << 43;

        l2 = l2 ^ l1;

        $r0[2] = l2;

        l3 = l3 >>> 21;

        l2 = l4 << 36;

        l3 = l3 ^ l2;

        $r0[3] = l3;

        l4 = l4 >>> 28;

        l3 = l5 << 29;

        l4 = l4 ^ l3;

        $r0[4] = l4;

        l5 = l5 >>> 35;

        l4 = l6 << 22;

        l5 = l5 ^ l4;

        $r0[5] = l5;

        l6 = l6 >>> 42;

        l5 = l7 << 15;

        l6 = l6 ^ l5;

        $r0[6] = l6;

        l7 = l7 >>> 49;

        l6 = l8 << 8;

        l7 = l7 ^ l6;

        $r0[7] = l7;

        l8 = l8 >>> 56;

        l7 = l9 << 1;

        l8 = l8 ^ l7;

        $r0[8] = l8;

        l9 = l9 >>> 63;

        $r0[9] = l9;

        return;
    }
    protected static void implExpand(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, $l5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        l4 = $r0[4];

        $l5 = 144115188075855871L & l0;

        $r1[0] = $l5;

        l0 = l0 >>> 57;

        $l5 = l1 << 7;

        l0 = l0 ^ $l5;

        l0 = l0 & 144115188075855871L;

        $r1[1] = l0;

        l1 = l1 >>> 50;

        l0 = l2 << 14;

        l1 = l1 ^ l0;

        l1 = l1 & 144115188075855871L;

        $r1[2] = l1;

        l2 = l2 >>> 43;

        l1 = l3 << 21;

        l2 = l2 ^ l1;

        l2 = l2 & 144115188075855871L;

        $r1[3] = l2;

        l3 = l3 >>> 36;

        l4 = l4 << 28;

        l4 = l3 ^ l4;

        $r1[4] = l4;

        return;
    }
    protected static void implMultiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3, $r4;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, $l10, $l11;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = newarray (long)[5];

        $r4 = newarray (long)[5];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implExpand(long[],long[])>($r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implExpand(long[],long[])>($r1, $r4);

        $r0 = newarray (long)[26];

        l6 = $r3[0];

        l2 = $r4[0];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 0);

        l6 = $r3[1];

        l2 = $r4[1];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 2);

        l6 = $r3[2];

        l2 = $r4[2];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 4);

        l6 = $r3[3];

        l2 = $r4[3];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 6);

        l6 = $r3[4];

        l2 = $r4[4];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 8);

        l6 = $r3[0];

        l2 = $r3[1];

        l6 = l6 ^ l2;

        l2 = $r4[0];

        l9 = $r4[1];

        l2 = l2 ^ l9;

        l9 = $r3[0];

        l3 = $r3[2];

        l9 = l9 ^ l3;

        l3 = $r4[0];

        l7 = $r4[2];

        l3 = l3 ^ l7;

        l7 = $r3[2];

        l4 = $r3[4];

        l7 = l7 ^ l4;

        l4 = $r4[2];

        l8 = $r4[4];

        l4 = l4 ^ l8;

        l8 = $r3[3];

        l5 = $r3[4];

        l8 = l8 ^ l5;

        l5 = $r4[3];

        $l10 = $r4[4];

        l5 = l5 ^ $l10;

        $l10 = $r3[3];

        $l10 = l9 ^ $l10;

        $l11 = $r4[3];

        $l11 = l3 ^ $l11;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>($l10, $l11, $r0, 18);

        $l10 = $r3[1];

        $l10 = l7 ^ $l10;

        $l11 = $r4[1];

        $l11 = l4 ^ $l11;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>($l10, $l11, $r0, 20);

        $l10 = l6 ^ l8;

        $l11 = l2 ^ l5;

        l0 = $r3[2];

        l0 = $l10 ^ l0;

        l1 = $r4[2];

        l1 = $l11 ^ l1;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>($l10, $l11, $r0, 22);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l0, l1, $r0, 24);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l6, l2, $r0, 10);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l9, l3, $r0, 12);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l7, l4, $r0, 14);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMulw(long,long,long[],int)>(l8, l5, $r0, 16);

        l6 = $r0[0];

        $r2[0] = l6;

        l6 = $r0[9];

        $r2[9] = l6;

        l6 = $r0[0];

        l2 = $r0[1];

        l6 = l6 ^ l2;

        l2 = $r0[2];

        l2 = l6 ^ l2;

        l9 = $r0[10];

        l3 = l2 ^ l9;

        $r2[1] = l3;

        l9 = $r0[3];

        l7 = $r0[4];

        l7 = l9 ^ l7;

        l9 = $r0[11];

        l4 = $r0[12];

        l9 = l9 ^ l4;

        l9 = l7 ^ l9;

        l9 = l2 ^ l9;

        $r2[2] = l9;

        l6 = l6 ^ l7;

        l2 = $r0[5];

        l7 = $r0[6];

        l4 = l2 ^ l7;

        l6 = l6 ^ l4;

        l2 = $r0[8];

        l2 = l6 ^ l2;

        l6 = $r0[13];

        l7 = $r0[14];

        l6 = l6 ^ l7;

        l7 = l2 ^ l6;

        l8 = $r0[18];

        l5 = $r0[22];

        l8 = l8 ^ l5;

        l5 = $r0[24];

        l8 = l8 ^ l5;

        l7 = l7 ^ l8;

        $r2[3] = l7;

        l7 = $r0[7];

        l8 = $r0[8];

        l7 = l7 ^ l8;

        l8 = $r0[9];

        l8 = l7 ^ l8;

        l7 = $r0[17];

        l7 = l8 ^ l7;

        $r2[8] = l7;

        l4 = l8 ^ l4;

        l8 = $r0[15];

        l5 = $r0[16];

        l8 = l8 ^ l5;

        l4 = l4 ^ l8;

        $r2[7] = l4;

        l3 = l4 ^ l3;

        l4 = $r0[19];

        l8 = $r0[20];

        l4 = l4 ^ l8;

        l8 = $r0[25];

        l5 = $r0[24];

        l8 = l8 ^ l5;

        l5 = $r0[18];

        $l10 = $r0[23];

        l5 = l5 ^ $l10;

        l4 = l4 ^ l8;

        l8 = l4 ^ l5;

        l3 = l8 ^ l3;

        $r2[4] = l3;

        l9 = l9 ^ l7;

        l9 = l4 ^ l9;

        l3 = $r0[21];

        l7 = $r0[22];

        l3 = l3 ^ l7;

        l9 = l9 ^ l3;

        $r2[5] = l9;

        l9 = $r0[0];

        l2 = l2 ^ l9;

        l9 = $r0[9];

        l2 = l2 ^ l9;

        l6 = l2 ^ l6;

        l2 = $r0[21];

        l6 = l6 ^ l2;

        l2 = $r0[23];

        l6 = l6 ^ l2;

        l2 = $r0[25];

        l6 = l6 ^ l2;

        $r2[6] = l6;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implCompactExt(long[])>($r2);

        return;
    }
    protected static void implMulw(long, long, long[], int)
    {
        long $l0, $l1, l3, $l4, l6, $l9;
        long[] $r0, r1;
        int $i2, i5, i7, $i8;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: long[];

        $i2 := @parameter3: int;

        r1 = newarray (long)[8];

        r1[1] = $l1;

        $l4 = r1[1];

        $l4 = $l4 << 1;

        r1[2] = $l4;

        $l4 = r1[2];

        $l4 = $l4 ^ $l1;

        r1[3] = $l4;

        $l4 = r1[2];

        $l4 = $l4 << 1;

        r1[4] = $l4;

        $l4 = r1[4];

        $l4 = $l4 ^ $l1;

        r1[5] = $l4;

        $l4 = r1[3];

        $l4 = $l4 << 1;

        r1[6] = $l4;

        $l4 = r1[6];

        $l4 = $l4 ^ $l1;

        r1[7] = $l4;

        i5 = (int) $l0;

        l6 = 0L;

        i5 = i5 & 7;

        $l4 = r1[i5];

        i5 = 48;

     label1:
        l3 = $l0 >>> i5;

        i7 = (int) l3;

        $i8 = i7 & 7;

        l3 = r1[$i8];

        $i8 = i7 >>> 3;

        $i8 = $i8 & 7;

        $l9 = r1[$i8];

        $l9 = $l9 << 3;

        l3 = l3 ^ $l9;

        i7 = i7 >>> 6;

        i7 = i7 & 7;

        $l9 = r1[i7];

        $l9 = $l9 << 6;

        l3 = l3 ^ $l9;

        $l9 = l3 << i5;

        $l4 = $l4 ^ $l9;

        i7 = neg i5;

        l3 = l3 >>> i7;

        l6 = l6 ^ l3;

        i5 = i5 + -9;

        if i5 > 0 goto label1;

        $l0 = 72198606942111744L & $l0;

        $l1 = $l1 << 7;

        $l1 = $l1 >> 63;

        $l0 = $l0 & $l1;

        $l0 = $l0 >>> 8;

        $l0 = l6 ^ $l0;

        $l1 = 144115188075855871L & $l4;

        $r0[$i2] = $l1;

        $i2 = $i2 + 1;

        $l1 = $l4 >>> 57;

        $l0 = $l0 << 7;

        $l0 = $l1 ^ $l0;

        $r0[$i2] = $l0;

        return;
    }
    protected static void implSquare(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;
        int i1, $i2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        i1 = 0;

     label1:
        if i1 >= 4 goto label2;

        $l0 = $r0[i1];

        $i2 = i1 << 1;

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>($l0, $r1, $i2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $l0 = $r0[4];

        i1 = (int) $l0;

        $l0 = staticinvoke <org.spongycastle.math.raw.Interleave: long expand32to64(int)>(i1);

        $r1[8] = $l0;

        return;
    }
    public static void invert(long[], long[])
    {
        long[] $r0, $r1, $r3, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat320: boolean isZero64(long[])>($r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r3 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] create64()>();

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] create64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void square(long[],long[])>($r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r3, 2, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r4, 4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r3, 8, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void square(long[],long[])>($r4, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r4, $r0, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r4, 17, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void square(long[],long[])>($r3, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r3, 35, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r4, 70, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void square(long[],long[])>($r3, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r3, $r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void squareN(long[],int,long[])>($r3, 141, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void multiply(long[],long[],long[])>($r4, $r3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void square(long[],long[])>($r4, $r1);

        return;
    }
    public static void multiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void reduce(long[],long[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void addExt(long[],long[],long[])>($r2, $r3, $r2);

        return;
    }
    public static void reduce(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, $l9, $l10;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l5 = $r0[0];

        l0 = $r0[1];

        l6 = $r0[2];

        l7 = $r0[3];

        l8 = $r0[4];

        l1 = $r0[5];

        l2 = $r0[6];

        l3 = $r0[7];

        l4 = $r0[8];

        $l9 = l4 << 37;

        $l10 = l4 << 42;

        $l9 = $l9 ^ $l10;

        $l10 = l4 << 44;

        $l9 = $l9 ^ $l10;

        $l10 = l4 << 49;

        $l9 = $l9 ^ $l10;

        l7 = l7 ^ $l9;

        $l9 = l4 >>> 27;

        $l10 = l4 >>> 22;

        $l9 = $l9 ^ $l10;

        $l10 = l4 >>> 20;

        $l9 = $l9 ^ $l10;

        l4 = l4 >>> 15;

        l4 = $l9 ^ l4;

        l8 = l8 ^ l4;

        l4 = l3 << 37;

        $l9 = l3 << 42;

        l4 = l4 ^ $l9;

        $l9 = l3 << 44;

        l4 = l4 ^ $l9;

        $l9 = l3 << 49;

        l4 = l4 ^ $l9;

        l6 = l6 ^ l4;

        l4 = l3 >>> 27;

        $l9 = l3 >>> 22;

        l4 = l4 ^ $l9;

        $l9 = l3 >>> 20;

        l4 = l4 ^ $l9;

        l3 = l3 >>> 15;

        l3 = l4 ^ l3;

        l3 = l7 ^ l3;

        l7 = l2 << 37;

        l4 = l2 << 42;

        l7 = l7 ^ l4;

        l4 = l2 << 44;

        l7 = l7 ^ l4;

        l4 = l2 << 49;

        l7 = l7 ^ l4;

        l0 = l0 ^ l7;

        l7 = l2 >>> 27;

        l4 = l2 >>> 22;

        l7 = l7 ^ l4;

        l4 = l2 >>> 20;

        l7 = l7 ^ l4;

        l2 = l2 >>> 15;

        l2 = l7 ^ l2;

        l2 = l6 ^ l2;

        l6 = l1 << 37;

        l7 = l1 << 42;

        l6 = l6 ^ l7;

        l7 = l1 << 44;

        l6 = l6 ^ l7;

        l7 = l1 << 49;

        l6 = l6 ^ l7;

        l5 = l5 ^ l6;

        l6 = l1 >>> 27;

        l7 = l1 >>> 22;

        l6 = l6 ^ l7;

        l7 = l1 >>> 20;

        l6 = l6 ^ l7;

        l1 = l1 >>> 15;

        l1 = l6 ^ l1;

        l1 = l0 ^ l1;

        l0 = l8 >>> 27;

        l5 = l5 ^ l0;

        l6 = l0 << 5;

        l5 = l5 ^ l6;

        l6 = l0 << 7;

        l5 = l5 ^ l6;

        l0 = l0 << 12;

        l5 = l5 ^ l0;

        $r1[0] = l5;

        $r1[1] = l1;

        $r1[2] = l2;

        $r1[3] = l3;

        l1 = 134217727L & l8;

        $r1[4] = l1;

        return;
    }
    public static void reduce37(long[], int)
    {
        long[] $r0;
        int $i0, $i3;
        long l1, l2, $l4, $l5, $l6;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i3 = $i0 + 4;

        l2 = $r0[$i3];

        l1 = l2 >>> 27;

        $l4 = $r0[$i0];

        $l5 = l1 << 5;

        $l5 = $l5 ^ l1;

        $l6 = l1 << 7;

        $l5 = $l5 ^ $l6;

        l1 = l1 << 12;

        l1 = $l5 ^ l1;

        $l4 = $l4 ^ l1;

        $r0[$i0] = $l4;

        $i0 = $i0 + 4;

        l2 = 134217727L & l2;

        $r0[$i0] = l2;

        return;
    }
    public static void square(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(9);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void reduce(long[],long[])>($r2, $r1);

        return;
    }
    public static void squareAddToExt(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(9);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void addExt(long[],long[],long[])>($r1, $r2, $r1);

        return;
    }
    public static void squareN(long[], int, long[])
    {
        long[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(9);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void reduce(long[],long[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void implSquare(long[],long[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT283Field: void reduce(long[],long[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
