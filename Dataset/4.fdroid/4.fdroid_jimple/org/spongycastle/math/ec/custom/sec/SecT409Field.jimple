org.spongycastle.math.ec.custom.sec.SecT409Field extends java.lang.Object
private static final long M25
private static final long M59
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecT409Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecT409Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        $l0 = $r0[2];

        $l1 = $r1[2];

        $l0 = $l0 ^ $l1;

        $r2[2] = $l0;

        $l0 = $r0[3];

        $l1 = $r1[3];

        $l0 = $l0 ^ $l1;

        $r2[3] = $l0;

        $l0 = $r0[4];

        $l1 = $r1[4];

        $l0 = $l0 ^ $l1;

        $r2[4] = $l0;

        $l0 = $r0[5];

        $l1 = $r1[5];

        $l0 = $l0 ^ $l1;

        $r2[5] = $l0;

        $l0 = $r0[6];

        $l1 = $r1[6];

        $l0 = $l0 ^ $l1;

        $r2[6] = $l0;

        return;
    }
    public static void addExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l2;
        int i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        i1 = 0;

     label1:
        if i1 >= 13 goto label2;

        $l2 = $r0[i1];

        $l0 = $r1[i1];

        $l0 = $l2 ^ $l0;

        $r2[i1] = $l0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void addOne(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $l0 = $l0 ^ 1L;

        $r1[0] = $l0;

        $l0 = $r0[1];

        $r1[1] = $l0;

        $l0 = $r0[2];

        $r1[2] = $l0;

        $l0 = $r0[3];

        $r1[3] = $l0;

        $l0 = $r0[4];

        $r1[4] = $l0;

        $l0 = $r0[5];

        $r1[5] = $l0;

        $l0 = $r0[6];

        $r1[6] = $l0;

        return;
    }
    public static long[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        long[] $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] fromBigInteger64(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void reduce39(long[],int)>($r1, 0);

        return $r1;
    }
    protected static void implCompactExt(long[])
    {
        long[] $r0;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, $l14;

        $r0 := @parameter0: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        l4 = $r0[4];

        l5 = $r0[5];

        l6 = $r0[6];

        l7 = $r0[7];

        l8 = $r0[8];

        l9 = $r0[9];

        l10 = $r0[10];

        l11 = $r0[11];

        l12 = $r0[12];

        l13 = $r0[13];

        $l14 = l1 << 59;

        l0 = $l14 ^ l0;

        $r0[0] = l0;

        l1 = l1 >>> 5;

        l0 = l2 << 54;

        l1 = l1 ^ l0;

        $r0[1] = l1;

        l2 = l2 >>> 10;

        l1 = l3 << 49;

        l2 = l2 ^ l1;

        $r0[2] = l2;

        l3 = l3 >>> 15;

        l2 = l4 << 44;

        l3 = l3 ^ l2;

        $r0[3] = l3;

        l4 = l4 >>> 20;

        l3 = l5 << 39;

        l4 = l4 ^ l3;

        $r0[4] = l4;

        l5 = l5 >>> 25;

        l4 = l6 << 34;

        l5 = l5 ^ l4;

        $r0[5] = l5;

        l6 = l6 >>> 30;

        l5 = l7 << 29;

        l6 = l6 ^ l5;

        $r0[6] = l6;

        l7 = l7 >>> 35;

        l6 = l8 << 24;

        l7 = l7 ^ l6;

        $r0[7] = l7;

        l8 = l8 >>> 40;

        l7 = l9 << 19;

        l8 = l8 ^ l7;

        $r0[8] = l8;

        l9 = l9 >>> 45;

        l8 = l10 << 14;

        l9 = l9 ^ l8;

        $r0[9] = l9;

        l10 = l10 >>> 50;

        l9 = l11 << 9;

        l10 = l10 ^ l9;

        $r0[10] = l10;

        l11 = l11 >>> 55;

        l10 = l12 << 4;

        l11 = l11 ^ l10;

        l10 = l13 << 63;

        l11 = l11 ^ l10;

        $r0[11] = l11;

        l12 = l12 >>> 60;

        l13 = l13 >>> 1;

        l13 = l12 ^ l13;

        $r0[12] = l13;

        $r0[13] = 0L;

        return;
    }
    protected static void implExpand(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, $l7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l0 = $r0[0];

        l1 = $r0[1];

        l2 = $r0[2];

        l3 = $r0[3];

        l4 = $r0[4];

        l5 = $r0[5];

        l6 = $r0[6];

        $l7 = 576460752303423487L & l0;

        $r1[0] = $l7;

        l0 = l0 >>> 59;

        $l7 = l1 << 5;

        l0 = l0 ^ $l7;

        l0 = l0 & 576460752303423487L;

        $r1[1] = l0;

        l1 = l1 >>> 54;

        l0 = l2 << 10;

        l1 = l1 ^ l0;

        l1 = l1 & 576460752303423487L;

        $r1[2] = l1;

        l2 = l2 >>> 49;

        l1 = l3 << 15;

        l2 = l2 ^ l1;

        l2 = l2 & 576460752303423487L;

        $r1[3] = l2;

        l3 = l3 >>> 44;

        l2 = l4 << 20;

        l3 = l3 ^ l2;

        l3 = l3 & 576460752303423487L;

        $r1[4] = l3;

        l4 = l4 >>> 39;

        l3 = l5 << 25;

        l4 = l4 ^ l3;

        l4 = l4 & 576460752303423487L;

        $r1[5] = l4;

        l5 = l5 >>> 34;

        l6 = l6 << 30;

        l6 = l5 ^ l6;

        $r1[6] = l6;

        return;
    }
    protected static void implMultiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, r3, r4;
        long $l0;
        int i1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        r3 = newarray (long)[7];

        r4 = newarray (long)[7];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implExpand(long[],long[])>($r0, r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implExpand(long[],long[])>($r1, r4);

        i1 = 0;

     label1:
        if i1 >= 7 goto label2;

        $l0 = r4[i1];

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implMulwAcc(long[],long,long[],int)>(r3, $l0, $r2, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implCompactExt(long[])>($r2);

        return;
    }
    protected static void implMulwAcc(long[], long, long[], int)
    {
        long[] $r0, $r1, r2;
        long $l0, l2, l3, $l4, $l9;
        int $i1, i5, i6, $i7, $i8;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        r2 = newarray (long)[8];

        r2[1] = $l0;

        $l4 = r2[1];

        $l4 = $l4 << 1;

        r2[2] = $l4;

        $l4 = r2[2];

        $l4 = $l4 ^ $l0;

        r2[3] = $l4;

        $l4 = r2[2];

        $l4 = $l4 << 1;

        r2[4] = $l4;

        $l4 = r2[4];

        $l4 = $l4 ^ $l0;

        r2[5] = $l4;

        $l4 = r2[3];

        $l4 = $l4 << 1;

        r2[6] = $l4;

        $l4 = r2[6];

        $l0 = $l4 ^ $l0;

        r2[7] = $l0;

        i5 = 0;

     label1:
        if i5 >= 7 goto label3;

        l3 = $r0[i5];

        i6 = (int) l3;

        $l0 = 0L;

        $i7 = i6 & 7;

        $l4 = r2[$i7];

        i6 = i6 >>> 3;

        i6 = i6 & 7;

        l2 = r2[i6];

        l2 = l2 << 3;

        $l4 = $l4 ^ l2;

        i6 = 54;

     label2:
        l2 = l3 >>> i6;

        $i7 = (int) l2;

        $i8 = $i7 & 7;

        l2 = r2[$i8];

        $i7 = $i7 >>> 3;

        $i7 = $i7 & 7;

        $l9 = r2[$i7];

        $l9 = $l9 << 3;

        l2 = l2 ^ $l9;

        $l9 = l2 << i6;

        $l4 = $l4 ^ $l9;

        $i7 = neg i6;

        l2 = l2 >>> $i7;

        $l0 = $l0 ^ l2;

        i6 = i6 + -6;

        if i6 > 0 goto label2;

        i6 = $i1 + i5;

        l3 = $r1[i6];

        l2 = 576460752303423487L & $l4;

        l3 = l3 ^ l2;

        $r1[i6] = l3;

        i6 = $i1 + i5;

        i6 = i6 + 1;

        l3 = $r1[i6];

        $l4 = $l4 >>> 59;

        $l0 = $l0 << 5;

        $l0 = $l4 ^ $l0;

        $l0 = l3 ^ $l0;

        $r1[i6] = $l0;

        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }
    protected static void implSquare(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;
        int i1, $i2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        i1 = 0;

     label1:
        if i1 >= 6 goto label2;

        $l0 = $r0[i1];

        $i2 = i1 << 1;

        staticinvoke <org.spongycastle.math.raw.Interleave: void expand64To128(long,long[],int)>($l0, $r1, $i2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $l0 = $r0[6];

        i1 = (int) $l0;

        $l0 = staticinvoke <org.spongycastle.math.raw.Interleave: long expand32to64(int)>(i1);

        $r1[12] = $l0;

        return;
    }
    public static void invert(long[], long[])
    {
        long[] $r0, $r1, $r3, $r4, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat448: boolean isZero64(long[])>($r0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r3 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] create64()>();

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] create64()>();

        $r5 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] create64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void square(long[],long[])>($r0, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 1, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r4, 1, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 3, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 6, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 12, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r5);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r5, 24, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 24, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 48, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 96, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void squareN(long[],int,long[])>($r3, 192, $r4);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r4, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void multiply(long[],long[],long[])>($r3, $r5, $r1);

        return;
    }
    public static void multiply(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void reduce(long[],long[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(long[], long[], long[])
    {
        long[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat448: long[] createExt64()>();

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implMultiply(long[],long[],long[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void addExt(long[],long[],long[])>($r2, $r3, $r2);

        return;
    }
    public static void reduce(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, $l9, $l10;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l1 = $r0[0];

        l2 = $r0[1];

        l3 = $r0[2];

        l4 = $r0[3];

        l5 = $r0[4];

        l6 = $r0[5];

        l0 = $r0[6];

        l7 = $r0[7];

        l8 = $r0[12];

        $l9 = l8 << 39;

        l6 = l6 ^ $l9;

        $l9 = l8 >>> 25;

        $l10 = l8 << 62;

        $l9 = $l9 ^ $l10;

        l0 = l0 ^ $l9;

        l8 = l8 >>> 2;

        l7 = l7 ^ l8;

        $l9 = $r0[11];

        l8 = $l9 << 39;

        l5 = l5 ^ l8;

        l8 = $l9 >>> 25;

        $l10 = $l9 << 62;

        l8 = l8 ^ $l10;

        l8 = l6 ^ l8;

        l6 = $l9 >>> 2;

        l6 = l0 ^ l6;

        $l10 = $r0[10];

        l0 = $l10 << 39;

        l0 = l4 ^ l0;

        l4 = $l10 >>> 25;

        $l9 = $l10 << 62;

        l4 = l4 ^ $l9;

        $l9 = l5 ^ l4;

        l4 = $l10 >>> 2;

        l4 = l8 ^ l4;

        l8 = $r0[9];

        l5 = l8 << 39;

        l5 = l3 ^ l5;

        l3 = l8 >>> 25;

        $l10 = l8 << 62;

        l3 = l3 ^ $l10;

        l0 = l0 ^ l3;

        l3 = l8 >>> 2;

        l3 = $l9 ^ l3;

        $l9 = $r0[8];

        l8 = $l9 << 39;

        l2 = l2 ^ l8;

        l8 = $l9 >>> 25;

        $l10 = $l9 << 62;

        l8 = l8 ^ $l10;

        l8 = l5 ^ l8;

        l5 = $l9 >>> 2;

        l5 = l0 ^ l5;

        l0 = l7 << 39;

        l1 = l1 ^ l0;

        l0 = l7 >>> 25;

        $l9 = l7 << 62;

        l0 = l0 ^ $l9;

        l2 = l2 ^ l0;

        l7 = l7 >>> 2;

        l7 = l8 ^ l7;

        l0 = l6 >>> 25;

        l1 = l1 ^ l0;

        $r1[0] = l1;

        l1 = l0 << 23;

        l1 = l1 ^ l2;

        $r1[1] = l1;

        $r1[2] = l7;

        $r1[3] = l5;

        $r1[4] = l3;

        $r1[5] = l4;

        l1 = 33554431L & l6;

        $r1[6] = l1;

        return;
    }
    public static void reduce39(long[], int)
    {
        long[] $r0;
        int $i0, $i3;
        long l1, l2, $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i3 = $i0 + 6;

        l2 = $r0[$i3];

        l1 = l2 >>> 25;

        $l4 = $r0[$i0];

        $l4 = $l4 ^ l1;

        $r0[$i0] = $l4;

        $i3 = $i0 + 1;

        $l4 = $r0[$i3];

        l1 = l1 << 23;

        l1 = $l4 ^ l1;

        $r0[$i3] = l1;

        $i0 = $i0 + 6;

        l2 = 33554431L & l2;

        $r0[$i0] = l2;

        return;
    }
    public static void square(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(13);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void reduce(long[],long[])>($r2, $r1);

        return;
    }
    public static void squareAddToExt(long[], long[])
    {
        long[] $r0, $r1, $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(13);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void addExt(long[],long[],long[])>($r1, $r2, $r1);

        return;
    }
    public static void squareN(long[], int, long[])
    {
        long[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: long[] create64(int)>(13);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implSquare(long[],long[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void reduce(long[],long[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void implSquare(long[],long[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecT409Field: void reduce(long[],long[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
