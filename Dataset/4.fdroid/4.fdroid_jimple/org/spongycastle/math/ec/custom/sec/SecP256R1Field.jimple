org.spongycastle.math.ec.custom.sec.SecP256R1Field extends java.lang.Object
private static final long M
static final int[] P
private static final int P7
static final int[] PExt
private static final int PExt15
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[8];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 1;

        $r0[7] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P> = $r0;

        $r0 = newarray (int)[16];

        $r0[0] = 1;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = -2;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -2;

        $r0[7] = 1;

        $r0[8] = -2;

        $r0[9] = 1;

        $r0[10] = -2;

        $r0[11] = 1;

        $r0[12] = 1;

        $r0[13] = -2;

        $r0[14] = 2;

        $r0[15] = -2;

        <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecP256R1Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecP256R1Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void addPInvTo(int[])>($r2);

     label2:
        return;
    }
    public static void addExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[15];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt>;

        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(16, $r0, $r2);

     label2:
        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(8, $r0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
    private static void addPInvTo(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 + 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[3] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $i0 = $r0[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[4] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[5];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[5] = $i0;

        $l1 = $l1 >> 32;

     label2:
        $i0 = $r0[6];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[6] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[7];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[7] = $i0;

        return;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] fromBigInteger(java.math.BigInteger)>($r0);

        $i0 = $r1[7];

        if $i0 != -1 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r2);

        if $z0 == 0 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int subFrom(int[],int[])>($r2, $r1);

     label1:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r2, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(8, $r1, $i0);

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int mulAddTo(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[15];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt>;

        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(16, $r0, $r2);

     label2:
        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean isZero(int[])>($r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat256: void zero(int[])>($r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, $l11, $l12, $l13;
        int $i10;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i10 = $r0[8];

        $l11 = (long) $i10;

        $l11 = $l11 & 4294967295L;

        $i10 = $r0[9];

        l9 = (long) $i10;

        l2 = l9 & 4294967295L;

        $i10 = $r0[10];

        l9 = (long) $i10;

        l6 = l9 & 4294967295L;

        $i10 = $r0[11];

        l9 = (long) $i10;

        l4 = l9 & 4294967295L;

        $i10 = $r0[12];

        l9 = (long) $i10;

        l5 = l9 & 4294967295L;

        $i10 = $r0[13];

        l9 = (long) $i10;

        l7 = l9 & 4294967295L;

        $i10 = $r0[14];

        l9 = (long) $i10;

        l8 = l9 & 4294967295L;

        $i10 = $r0[15];

        l9 = (long) $i10;

        l9 = l9 & 4294967295L;

        $l11 = $l11 - 6L;

        l0 = $l11 + l2;

        l1 = l2 + l6;

        l2 = l6 + l4;

        l2 = l2 - l9;

        l3 = l4 + l5;

        l4 = l5 + l7;

        l5 = l7 + l8;

        l6 = l8 + l9;

        $i10 = $r0[0];

        $l12 = (long) $i10;

        $l12 = $l12 & 4294967295L;

        $l12 = $l12 + l0;

        $l12 = $l12 - l3;

        $l12 = $l12 - l5;

        $l12 = 0L + $l12;

        $i10 = (int) $l12;

        $r1[0] = $i10;

        $l12 = $l12 >> 32;

        $i10 = $r0[1];

        $l13 = (long) $i10;

        $l13 = $l13 & 4294967295L;

        $l13 = $l13 + l1;

        $l13 = $l13 - l4;

        $l13 = $l13 - l6;

        $l12 = $l12 + $l13;

        $i10 = (int) $l12;

        $r1[1] = $i10;

        $l12 = $l12 >> 32;

        $i10 = $r0[2];

        $l13 = (long) $i10;

        $l13 = $l13 & 4294967295L;

        $l13 = $l13 + l2;

        $l13 = $l13 - l5;

        $l12 = $l12 + $l13;

        $i10 = (int) $l12;

        $r1[2] = $i10;

        $l12 = $l12 >> 32;

        $i10 = $r0[3];

        $l13 = (long) $i10;

        $l13 = $l13 & 4294967295L;

        l3 = l3 << 1;

        l3 = $l13 + l3;

        l7 = l3 + l7;

        l7 = l7 - l9;

        l7 = l7 - l0;

        l7 = $l12 + l7;

        $i10 = (int) l7;

        $r1[3] = $i10;

        l7 = l7 >> 32;

        $i10 = $r0[4];

        l3 = (long) $i10;

        l3 = l3 & 4294967295L;

        $l12 = l4 << 1;

        l3 = l3 + $l12;

        l8 = l3 + l8;

        l8 = l8 - l1;

        l8 = l7 + l8;

        $i10 = (int) l8;

        $r1[4] = $i10;

        l8 = l8 >> 32;

        $i10 = $r0[5];

        l1 = (long) $i10;

        l1 = l1 & 4294967295L;

        l7 = l5 << 1;

        l1 = l1 + l7;

        l1 = l1 - l2;

        l8 = l8 + l1;

        $i10 = (int) l8;

        $r1[5] = $i10;

        l8 = l8 >> 32;

        $i10 = $r0[6];

        l1 = (long) $i10;

        l1 = l1 & 4294967295L;

        l6 = l6 << 1;

        l6 = l1 + l6;

        l5 = l6 + l5;

        l0 = l5 - l0;

        l0 = l8 + l0;

        $i10 = (int) l0;

        $r1[6] = $i10;

        l0 = l0 >> 32;

        $i10 = $r0[7];

        l5 = (long) $i10;

        l5 = l5 & 4294967295L;

        l9 = l9 << 1;

        l9 = l5 + l9;

        $l11 = l9 + $l11;

        $l11 = $l11 - l2;

        $l11 = $l11 - l4;

        $l11 = l0 + $l11;

        $i10 = (int) $l11;

        $r1[7] = $i10;

        $l11 = $l11 >> 32;

        $l11 = $l11 + 6L;

        $i10 = (int) $l11;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void reduce32(int,int[])>($i10, $r1);

        return;
    }
    public static void reduce32(int, int[])
    {
        int $i0;
        int[] $r0, $r1;
        long l1, $l2, $l4;
        boolean $z0;
        byte $b3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        l1 = 0L;

        if $i0 == 0 goto label3;

        l1 = (long) $i0;

        l1 = l1 & 4294967295L;

        $i0 = $r0[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + l1;

        $l2 = 0L + $l2;

        $i0 = (int) $l2;

        $r0[0] = $i0;

        $l2 = $l2 >> 32;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = $r0[1];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[1] = $i0;

        $l2 = $l2 >> 32;

        $i0 = $r0[2];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[2] = $i0;

        $l2 = $l2 >> 32;

     label1:
        $i0 = $r0[3];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 - l1;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[3] = $i0;

        $l2 = $l2 >> 32;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        $i0 = $r0[4];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[4] = $i0;

        $l2 = $l2 >> 32;

        $i0 = $r0[5];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[5] = $i0;

        $l2 = $l2 >> 32;

     label2:
        $i0 = $r0[6];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 - l1;

        $l2 = $l2 + $l4;

        $i0 = (int) $l2;

        $r0[6] = $i0;

        $l2 = $l2 >> 32;

        $i0 = $r0[7];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        l1 = $l4 + l1;

        l1 = $l2 + l1;

        $i0 = (int) l1;

        $r0[7] = $i0;

        l1 = l1 >> 32;

     label3:
        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label4;

        $i0 = $r0[7];

        if $i0 != -1 goto label5;

        $r1 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label5;

     label4:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void addPInvTo(int[])>($r0);

     label5:
        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    private static void subPInvFrom(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l3;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 - 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[3] = $i0;

        $l1 = $l1 >> 32;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $i0 = $r0[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[4] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[5];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[5] = $i0;

        $l1 = $l1 >> 32;

     label2:
        $i0 = $r0[6];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[6] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[7];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - 1L;

        $l1 = $l1 + $l3;

        $i0 = (int) $l1;

        $r0[7] = $i0;

        return;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void subPInvFrom(int[])>($r2);

     label1:
        return;
    }
    public static void subtractExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] PExt>;

        staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>(16, $r0, $r2);

     label1:
        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
