org.spongycastle.math.ec.custom.sec.SecP256K1Field extends java.lang.Object
static final int[] P
private static final int P7
static final int[] PExt
private static final int PExt15
private static final int[] PExtInv
private static final int PInv33
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[8];

        $r0[0] = -977;

        $r0[1] = -2;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P> = $r0;

        $r0 = newarray (int)[16];

        $r0[0] = 954529;

        $r0[1] = 1954;

        $r0[2] = 1;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = -1954;

        $r0[9] = -3;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExt> = $r0;

        $r0 = newarray (int)[10];

        $r0[0] = -954529;

        $r0[1] = -1955;

        $r0[2] = -2;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = 1953;

        $r0[9] = 2;

        <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecP256K1Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecP256K1Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.raw.Nat: int add33To(int,int,int[])>(8, 977, $r2);

     label2:
        return;
    }
    public static void addExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[15];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(16, $r2, $i0);

     label2:
        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(8, $r0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.raw.Nat: int add33To(int,int,int[])>(8, 977, $r1);

     label2:
        return;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] fromBigInteger(java.math.BigInteger)>($r0);

        $i0 = $r1[7];

        if $i0 != -1 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r2);

        if $z0 == 0 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int subFrom(int[],int[])>($r2, $r1);

     label1:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int add(int[],int[],int[])>($r0, $r2, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(8, $r1, $i0);

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256K1Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void multiplyAddToExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int mulAddTo(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[15];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(16, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(16, $r2, $i0);

     label2:
        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean isZero(int[])>($r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat256: void zero(int[])>($r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        long $l0;
        int $i1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $l0 = staticinvoke <org.spongycastle.math.raw.Nat256: long mul33Add(int,int[],int,int[],int,int[],int)>(977, $r0, 8, $r0, 0, $r1, 0);

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat256: int mul33DWordAdd(int,long,int[],int)>(977, $l0, $r1, 0);

        if $i1 != 0 goto label1;

        $i1 = $r1[7];

        if $i1 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.raw.Nat: int add33To(int,int,int[])>(8, 977, $r1);

     label2:
        return;
    }
    public static void reduce32(int, int[])
    {
        int $i0;
        int[] $r0, $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        if $i0 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int mul33WordAdd(int,int,int[],int)>(977, $i0, $r0, 0);

        if $i0 != 0 goto label2;

     label1:
        $i0 = $r0[7];

        if $i0 != -1 goto label3;

        $r1 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label3;

     label2:
        staticinvoke <org.spongycastle.math.raw.Nat: int add33To(int,int,int[])>(8, 977, $r0);

     label3:
        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256K1Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256K1Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP256K1Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int sub33From(int,int,int[])>(8, 977, $r2);

     label1:
        return;
    }
    public static void subtractExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(16, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(16, $r2, $i0);

     label1:
        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(8, $r0, 0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[7];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP256K1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.raw.Nat: int add33To(int,int,int[])>(8, 977, $r1);

     label2:
        return;
    }
