org.spongycastle.math.ec.custom.sec.SecP384R1Field extends java.lang.Object
private static final long M
static final int[] P
private static final int P11
static final int[] PExt
private static final int PExt23
private static final int[] PExtInv
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[12];

        $r0[0] = -1;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = -1;

        $r0[4] = -2;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = -1;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P> = $r0;

        $r0 = newarray (int)[24];

        $r0[0] = 1;

        $r0[1] = -2;

        $r0[2] = 0;

        $r0[3] = 2;

        $r0[4] = 0;

        $r0[5] = -2;

        $r0[6] = 0;

        $r0[7] = 2;

        $r0[8] = 1;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = -2;

        $r0[13] = 1;

        $r0[14] = 0;

        $r0[15] = -2;

        $r0[16] = -3;

        $r0[17] = -1;

        $r0[18] = -1;

        $r0[19] = -1;

        $r0[20] = -1;

        $r0[21] = -1;

        $r0[22] = -1;

        $r0[23] = -1;

        <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExt> = $r0;

        $r0 = newarray (int)[17];

        $r0[0] = -1;

        $r0[1] = 1;

        $r0[2] = -1;

        $r0[3] = -3;

        $r0[4] = -1;

        $r0[5] = 1;

        $r0[6] = -1;

        $r0[7] = -3;

        $r0[8] = -2;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = 1;

        $r0[13] = -2;

        $r0[14] = -1;

        $r0[15] = 1;

        $r0[16] = 2;

        <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.ec.custom.sec.SecP384R1Field r0;

        r0 := @this: org.spongycastle.math.ec.custom.sec.SecP384R1Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(12, $r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[11];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void addPInvTo(int[])>($r2);

     label2:
        return;
    }
    public static void addExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(24, $r0, $r1, $r2);

        if $i0 != 0 goto label1;

        $i0 = $r2[23];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExt>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(24, $r2, $r0);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(24, $r2, $i0);

     label2:
        return;
    }
    public static void addOne(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int inc(int,int[],int[])>(12, $r0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[11];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
    private static void addPInvTo(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l2;
        byte $b3;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 + 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 - 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[3] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[4] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(12, $r0, 5);

     label2:
        return;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.raw.Nat: int[] fromBigInteger(int,java.math.BigInteger)>(384, $r0);

        $i0 = $r1[11];

        if $i0 != -1 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r1, $r2);

        if $z0 == 0 goto label1;

        $r2 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(12, $r2, $r1);

     label1:
        return $r1;
    }
    public static void half(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int,int[])>(12, $r0, 0, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(12, $r0, $r2, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(12, $r1, $i0);

        return;
    }
    public static void multiply(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(24);

        staticinvoke <org.spongycastle.math.raw.Nat384: void mul(int[],int[],int[])>($r0, $r1, $r3);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void reduce(int[],int[])>($r3, $r2);

        return;
    }
    public static void negate(int[], int[])
    {
        int[] $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isZero(int,int[])>(12, $r0);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: void zero(int,int[])>(12, $r1);

        return;

     label1:
        $r2 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(12, $r2, $r0, $r1);

        return;
    }
    public static void reduce(int[], int[])
    {
        int[] $r0, $r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, $l15, $l16;
        int $i14;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i14 = $r0[16];

        l10 = (long) $i14;

        l7 = l10 & 4294967295L;

        $i14 = $r0[17];

        l10 = (long) $i14;

        l8 = l10 & 4294967295L;

        $i14 = $r0[18];

        l10 = (long) $i14;

        l9 = l10 & 4294967295L;

        $i14 = $r0[19];

        l10 = (long) $i14;

        l10 = l10 & 4294967295L;

        $i14 = $r0[20];

        l11 = (long) $i14;

        l11 = l11 & 4294967295L;

        $i14 = $r0[21];

        l6 = (long) $i14;

        l12 = l6 & 4294967295L;

        $i14 = $r0[22];

        l6 = (long) $i14;

        l6 = l6 & 4294967295L;

        $i14 = $r0[23];

        l5 = (long) $i14;

        l13 = l5 & 4294967295L;

        $i14 = $r0[12];

        l5 = (long) $i14;

        l5 = l5 & 4294967295L;

        l5 = l5 + l11;

        l0 = l5 - 1L;

        $i14 = $r0[13];

        l5 = (long) $i14;

        l5 = l5 & 4294967295L;

        l1 = l5 + l6;

        $i14 = $r0[14];

        l5 = (long) $i14;

        l5 = l5 & 4294967295L;

        l5 = l5 + l6;

        l2 = l5 + l13;

        $i14 = $r0[15];

        l5 = (long) $i14;

        l5 = l5 & 4294967295L;

        l3 = l5 + l13;

        l4 = l8 + l12;

        l5 = l12 - l13;

        l6 = l6 - l13;

        $i14 = $r0[0];

        $l15 = (long) $i14;

        $l15 = $l15 & 4294967295L;

        $l15 = $l15 + l0;

        $l15 = $l15 + l5;

        $l15 = 0L + $l15;

        $i14 = (int) $l15;

        $r1[0] = $i14;

        $l15 = $l15 >> 32;

        $i14 = $r0[1];

        $l16 = (long) $i14;

        $l16 = $l16 & 4294967295L;

        l13 = $l16 + l13;

        l13 = l13 - l0;

        l13 = l13 + l1;

        l13 = $l15 + l13;

        $i14 = (int) l13;

        $r1[1] = $i14;

        l13 = l13 >> 32;

        $i14 = $r0[2];

        $l15 = (long) $i14;

        $l15 = $l15 & 4294967295L;

        $l15 = $l15 - l12;

        $l15 = $l15 - l1;

        $l15 = $l15 + l2;

        l13 = l13 + $l15;

        $i14 = (int) l13;

        $r1[2] = $i14;

        l13 = l13 >> 32;

        $i14 = $r0[3];

        $l15 = (long) $i14;

        $l15 = $l15 & 4294967295L;

        $l15 = $l15 + l0;

        $l15 = $l15 - l2;

        $l15 = $l15 + l3;

        $l15 = $l15 + l5;

        l13 = l13 + $l15;

        $i14 = (int) l13;

        $r1[3] = $i14;

        l13 = l13 >> 32;

        $i14 = $r0[4];

        $l15 = (long) $i14;

        $l15 = $l15 & 4294967295L;

        $l15 = $l15 + l7;

        l12 = $l15 + l12;

        l12 = l12 + l0;

        l12 = l12 + l1;

        l12 = l12 - l3;

        l12 = l12 + l5;

        l12 = l13 + l12;

        $i14 = (int) l12;

        $r1[4] = $i14;

        l12 = l12 >> 32;

        $i14 = $r0[5];

        l0 = (long) $i14;

        l0 = l0 & 4294967295L;

        l0 = l0 - l7;

        l1 = l0 + l1;

        l1 = l1 + l2;

        l1 = l1 + l4;

        l1 = l12 + l1;

        $i14 = (int) l1;

        $r1[5] = $i14;

        l1 = l1 >> 32;

        $i14 = $r0[6];

        l12 = (long) $i14;

        l12 = l12 & 4294967295L;

        l12 = l12 + l9;

        l12 = l12 - l8;

        l2 = l12 + l2;

        l2 = l2 + l3;

        l2 = l1 + l2;

        $i14 = (int) l2;

        $r1[6] = $i14;

        l2 = l2 >> 32;

        $i14 = $r0[7];

        l1 = (long) $i14;

        l1 = l1 & 4294967295L;

        l1 = l1 + l7;

        l1 = l1 + l10;

        l1 = l1 - l9;

        l3 = l1 + l3;

        l3 = l2 + l3;

        $i14 = (int) l3;

        $r1[7] = $i14;

        l3 = l3 >> 32;

        $i14 = $r0[8];

        l2 = (long) $i14;

        l2 = l2 & 4294967295L;

        l7 = l2 + l7;

        l7 = l7 + l8;

        l7 = l7 + l11;

        l7 = l7 - l10;

        l7 = l3 + l7;

        $i14 = (int) l7;

        $r1[8] = $i14;

        l7 = l7 >> 32;

        $i14 = $r0[9];

        l8 = (long) $i14;

        l8 = l8 & 4294967295L;

        l8 = l8 + l9;

        l8 = l8 - l11;

        l8 = l8 + l4;

        l7 = l7 + l8;

        $i14 = (int) l7;

        $r1[9] = $i14;

        l7 = l7 >> 32;

        $i14 = $r0[10];

        l8 = (long) $i14;

        l8 = l8 & 4294967295L;

        l9 = l8 + l9;

        l9 = l9 + l10;

        l9 = l9 - l5;

        l9 = l9 + l6;

        l9 = l7 + l9;

        $i14 = (int) l9;

        $r1[10] = $i14;

        l9 = l9 >> 32;

        $i14 = $r0[11];

        l5 = (long) $i14;

        l5 = l5 & 4294967295L;

        l10 = l5 + l10;

        l10 = l10 + l11;

        l10 = l10 - l6;

        l10 = l9 + l10;

        $i14 = (int) l10;

        $r1[11] = $i14;

        l10 = l10 >> 32;

        l10 = l10 + 1L;

        $i14 = (int) l10;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void reduce32(int,int[])>($i14, $r1);

        return;
    }
    public static void reduce32(int, int[])
    {
        int $i0;
        int[] $r0, $r1;
        long l1, $l2, $l3;
        byte $b4;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        l1 = 0L;

        if $i0 == 0 goto label2;

        l1 = (long) $i0;

        l1 = l1 & 4294967295L;

        $i0 = $r0[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + l1;

        $l2 = 0L + $l2;

        $i0 = (int) $l2;

        $r0[0] = $i0;

        $l2 = $l2 >> 32;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 - l1;

        $l2 = $l2 + $l3;

        $i0 = (int) $l2;

        $r0[1] = $i0;

        $l2 = $l2 >> 32;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label1;

        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i0 = (int) $l2;

        $r0[2] = $i0;

        $l2 = $l2 >> 32;

     label1:
        $i0 = $r0[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 + l1;

        $l2 = $l2 + $l3;

        $i0 = (int) $l2;

        $r0[3] = $i0;

        $l2 = $l2 >> 32;

        $i0 = $r0[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        l1 = $l3 + l1;

        l1 = $l2 + l1;

        $i0 = (int) l1;

        $r0[4] = $i0;

        l1 = l1 >> 32;

     label2:
        $b4 = l1 cmp 0L;

        if $b4 == 0 goto label3;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>(12, $r0, 5);

        if $i0 != 0 goto label4;

     label3:
        $i0 = $r0[11];

        if $i0 != -1 goto label5;

        $r1 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r0, $r1);

        if $z0 == 0 goto label5;

     label4:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void addPInvTo(int[])>($r0);

     label5:
        return;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(24);

        staticinvoke <org.spongycastle.math.raw.Nat384: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void reduce(int[],int[])>($r2, $r1);

        return;
    }
    public static void squareN(int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(24);

        staticinvoke <org.spongycastle.math.raw.Nat384: void square(int[],int[])>($r0, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void reduce(int[],int[])>($r2, $r1);

     label1:
        $i0 = $i0 + -1;

        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat384: void square(int[],int[])>($r1, $r2);

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void reduce(int[],int[])>($r2, $r1);

        goto label1;

     label2:
        return;
    }
    private static void subPInvFrom(int[])
    {
        int[] $r0;
        int $i0;
        long $l1, $l2;
        byte $b3;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $l1 = $l1 - 1L;

        $i0 = (int) $l1;

        $r0[0] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 + 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[1] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label1;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[2] = $i0;

        $l1 = $l1 >> 32;

     label1:
        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 - 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[3] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 - 1L;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r0[4] = $i0;

        $l1 = $l1 >> 32;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(12, $r0, 5);

     label2:
        return;
    }
    public static void subtract(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(12, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void subPInvFrom(int[])>($r2);

     label1:
        return;
    }
    public static void subtractExt(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(24, $r0, $r1, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>($i0, $r0, $r2);

        if $i0 == 0 goto label1;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] PExtInv>;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>(24, $r2, $i0);

     label1:
        return;
    }
    public static void twice(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int[])>(12, $r0, 0, $r1);

        if $i0 != 0 goto label1;

        $i0 = $r1[11];

        if $i0 != -1 goto label2;

        $r0 = <org.spongycastle.math.ec.custom.sec.SecP384R1Field: int[] P>;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(12, $r1, $r0);

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <org.spongycastle.math.ec.custom.sec.SecP384R1Field: void addPInvTo(int[])>($r1);

     label2:
        return;
    }
