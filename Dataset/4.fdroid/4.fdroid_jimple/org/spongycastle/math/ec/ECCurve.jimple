org.spongycastle.math.ec.ECCurve extends java.lang.Object
public static final int COORD_AFFINE
public static final int COORD_HOMOGENEOUS
public static final int COORD_JACOBIAN
public static final int COORD_JACOBIAN_CHUDNOVSKY
public static final int COORD_JACOBIAN_MODIFIED
public static final int COORD_LAMBDA_AFFINE
public static final int COORD_LAMBDA_PROJECTIVE
public static final int COORD_SKEWED
protected org.spongycastle.math.ec.ECFieldElement a
protected org.spongycastle.math.ec.ECFieldElement b
protected java.math.BigInteger cofactor
protected int coord
protected org.spongycastle.math.ec.endo.ECEndomorphism endomorphism
protected org.spongycastle.math.field.FiniteField field
protected org.spongycastle.math.ec.ECMultiplier multiplier
protected java.math.BigInteger order
    protected void <init>(org.spongycastle.math.field.FiniteField)
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.field.FiniteField $r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.field.FiniteField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.ec.ECCurve: int coord> = 0;

        r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism endomorphism> = null;

        r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier multiplier> = null;

        r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField field> = $r1;

        return;
    }
    public static int[] getAllCoordinateSystems()
    {
        int[] $r0;

        $r0 = newarray (int)[8];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 2;

        $r0[3] = 3;

        $r0[4] = 4;

        $r0[5] = 5;

        $r0[6] = 6;

        $r0[7] = 7;

        return $r0;
    }
    protected void checkPoint(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECCurve r0, $r2;
        org.spongycastle.math.ec.ECPoint $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if r0 == $r2 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'point\' must be non-null and on this curve");

        throw $r3;

     label2:
        return;
    }
    protected void checkPoints(org.spongycastle.math.ec.ECPoint[])
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECPoint[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: void checkPoints(org.spongycastle.math.ec.ECPoint[],int,int)>($r1, 0, $i0);

        return;
    }
    protected void checkPoints(org.spongycastle.math.ec.ECPoint[], int, int)
    {
        org.spongycastle.math.ec.ECCurve r0, $r3;
        org.spongycastle.math.ec.ECPoint[] $r1;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.math.ec.ECPoint r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'points\' cannot be null");

        throw $r4;

     label1:
        if $i0 < 0 goto label2;

        if $i1 < 0 goto label2;

        $i2 = lengthof $r1;

        $i2 = $i2 - $i1;

        if $i0 <= $i2 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid range specified for \'points\'");

        throw $r4;

     label3:
        $i2 = 0;

     label4:
        if $i2 >= $i1 goto label6;

        $i3 = $i0 + $i2;

        r2 = $r1[$i3];

        if r2 == null goto label5;

        $r3 = virtualinvoke r2.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if r0 == $r3 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'points\' entries must be null or on this curve");

        throw $r4;

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        return;
    }
protected abstract org.spongycastle.math.ec.ECCurve cloneCurve() { 
// no body
} 
    public org.spongycastle.math.ec.ECCurve$Config configure()
    {
        org.spongycastle.math.ec.ECCurve r0;
        int $i0;
        org.spongycastle.math.ec.endo.ECEndomorphism $r1;
        org.spongycastle.math.ec.ECMultiplier $r2;
        org.spongycastle.math.ec.ECCurve$Config $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        entermonitor r0;

     label1:
        $r3 = new org.spongycastle.math.ec.ECCurve$Config;

        $i0 = r0.<org.spongycastle.math.ec.ECCurve: int coord>;

        $r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism endomorphism>;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier multiplier>;

        specialinvoke $r3.<org.spongycastle.math.ec.ECCurve$Config: void <init>(org.spongycastle.math.ec.ECCurve,int,org.spongycastle.math.ec.endo.ECEndomorphism,org.spongycastle.math.ec.ECMultiplier)>(r0, $i0, $r1, $r2);

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.GLVMultiplier $r1;
        org.spongycastle.math.ec.endo.ECEndomorphism $r2;
        boolean $z0;
        org.spongycastle.math.ec.endo.GLVEndomorphism $r3;
        org.spongycastle.math.ec.WNafL2RMultiplier $r4;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism endomorphism>;

        $z0 = $r2 instanceof org.spongycastle.math.ec.endo.GLVEndomorphism;

        if $z0 == 0 goto label1;

        $r1 = new org.spongycastle.math.ec.GLVMultiplier;

        $r2 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism endomorphism>;

        $r3 = (org.spongycastle.math.ec.endo.GLVEndomorphism) $r2;

        specialinvoke $r1.<org.spongycastle.math.ec.GLVMultiplier: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.endo.GLVEndomorphism)>(r0, $r3);

        return $r1;

     label1:
        $r4 = new org.spongycastle.math.ec.WNafL2RMultiplier;

        specialinvoke $r4.<org.spongycastle.math.ec.WNafL2RMultiplier: void <init>()>();

        return $r4;
    }
    public org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.math.ec.ECPoint $r3;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r1, $r2, 0);

        return $r3;
    }
    public org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger, java.math.BigInteger, boolean)
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger $r1, $r2;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r3, $r4;
        org.spongycastle.math.ec.ECPoint $r5;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r1);

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r2);

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean)>($r3, $r4, $z0);

        return $r5;
    }
protected abstract org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement, boolean) { 
// no body
} 
protected abstract org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement, org.spongycastle.math.ec.ECFieldElement[], boolean) { 
// no body
} 
    public org.spongycastle.math.ec.ECPoint decodePoint(byte[])
    {
        org.spongycastle.math.ec.ECCurve r0;
        byte[] $r1;
        int i0, i2, $i3;
        byte b1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.math.ec.ECPoint $r5, $r7;
        java.math.BigInteger $r6, $r8;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: byte[];

        $z0 = 1;

        i0 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        b1 = $r1[0];

        lookupswitch(b1)
        {
            case 0: goto label02;
            case 1: goto label01;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label01;
            case 6: goto label09;
            case 7: goto label09;
            default: goto label01;
        };

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid point encoding 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(b1, 16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label02:
        i0 = lengthof $r1;

        if i0 == 1 goto label03;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect length for infinity encoding");

        throw $r2;

     label03:
        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

     label04:
        if b1 == 0 goto label14;

        $z0 = virtualinvoke $r5.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label14;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid infinity encoding");

        throw $r2;

     label05:
        i2 = lengthof $r1;

        $i3 = i0 + 1;

        if i2 == $i3 goto label06;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect length for compressed encoding");

        throw $r2;

     label06:
        i2 = b1 & 1;

        $r6 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger fromUnsignedByteArray(byte[],int,int)>($r1, 1, i0);

        $r7 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger)>(i2, $r6);

        $r5 = $r7;

        $z0 = virtualinvoke $r7.<org.spongycastle.math.ec.ECPoint: boolean satisfiesCofactor()>();

        if $z0 != 0 goto label04;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid point");

        throw $r2;

     label07:
        i2 = lengthof $r1;

        $i3 = i0 * 2;

        $i3 = $i3 + 1;

        if i2 == $i3 goto label08;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect length for uncompressed encoding");

        throw $r2;

     label08:
        $r6 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger fromUnsignedByteArray(byte[],int,int)>($r1, 1, i0);

        i2 = i0 + 1;

        $r8 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger fromUnsignedByteArray(byte[],int,int)>($r1, i2, i0);

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger)>($r6, $r8);

        goto label04;

     label09:
        i2 = lengthof $r1;

        $i3 = i0 * 2;

        $i3 = $i3 + 1;

        if i2 == $i3 goto label10;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect length for hybrid encoding");

        throw $r2;

     label10:
        $r6 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger fromUnsignedByteArray(byte[],int,int)>($r1, 1, i0);

        i2 = i0 + 1;

        $r8 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger fromUnsignedByteArray(byte[],int,int)>($r1, i2, i0);

        $z1 = virtualinvoke $r8.<java.math.BigInteger: boolean testBit(int)>(0);

        if b1 != 7 goto label12;

     label11:
        if $z1 == $z0 goto label13;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Inconsistent Y coordinate in hybrid encoding");

        throw $r2;

     label12:
        $z0 = 0;

        goto label11;

     label13:
        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger)>($r6, $r8);

        goto label04;

     label14:
        return $r5;
    }
protected abstract org.spongycastle.math.ec.ECPoint decompressPoint(int, java.math.BigInteger) { 
// no body
} 
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.ec.ECCurve r0, $r2;
        boolean $z0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: java.lang.Object;

        if r0 == $r1 goto label1;

        $z0 = $r1 instanceof org.spongycastle.math.ec.ECCurve;

        if $z0 == 0 goto label2;

        $r2 = (org.spongycastle.math.ec.ECCurve) $r1;

        $z0 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean equals(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.math.ec.ECCurve r0, $r1;
        org.spongycastle.math.field.FiniteField $r2, $r3;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r4;
        java.math.BigInteger $r5, $r6;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        if r0 == $r1 goto label1;

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
public abstract org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) { 
// no body
} 
    public org.spongycastle.math.ec.ECFieldElement getA()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement a>;

        return r1;
    }
    public org.spongycastle.math.ec.ECFieldElement getB()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECFieldElement r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement b>;

        return r1;
    }
    public java.math.BigInteger getCofactor()
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger cofactor>;

        return r1;
    }
    public int getCoordinateSystem()
    {
        org.spongycastle.math.ec.ECCurve r0;
        int i0;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        i0 = r0.<org.spongycastle.math.ec.ECCurve: int coord>;

        return i0;
    }
    public org.spongycastle.math.ec.endo.ECEndomorphism getEndomorphism()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.endo.ECEndomorphism r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.endo.ECEndomorphism endomorphism>;

        return r1;
    }
    public org.spongycastle.math.field.FiniteField getField()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.field.FiniteField r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField field>;

        return r1;
    }
public abstract int getFieldSize() { 
// no body
} 
public abstract org.spongycastle.math.ec.ECPoint getInfinity() { 
// no body
} 
    public org.spongycastle.math.ec.ECMultiplier getMultiplier()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECMultiplier $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier multiplier>;

        if $r1 != null goto label2;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier()>();

        r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier multiplier> = $r1;

     label2:
        $r1 = r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECMultiplier multiplier>;

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public java.math.BigInteger getOrder()
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        r1 = r0.<org.spongycastle.math.ec.ECCurve: java.math.BigInteger order>;

        return r1;
    }
    public org.spongycastle.math.ec.PreCompInfo getPreCompInfo(org.spongycastle.math.ec.ECPoint, java.lang.String)
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.lang.String $r2;
        java.util.Hashtable r3;
        java.lang.Object $r4;
        org.spongycastle.math.ec.PreCompInfo $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: void checkPoint(org.spongycastle.math.ec.ECPoint)>($r1);

        entermonitor $r1;

     label1:
        r3 = $r1.<org.spongycastle.math.ec.ECPoint: java.util.Hashtable preCompTable>;

        if r3 != null goto label4;

        $r5 = null;

     label2:
        exitmonitor $r1;

     label3:
        return $r5;

     label4:
        $r4 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.spongycastle.math.ec.PreCompInfo) $r4;

        goto label2;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
    public int hashCode()
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.field.FiniteField $r1;
        int $i0, $i1;
        org.spongycastle.math.ec.ECFieldElement $r2;
        java.math.BigInteger $r3;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        $i1 = staticinvoke <org.spongycastle.util.Integers: int rotateLeft(int,int)>($i1, 8);

        $i0 = $i0 ^ $i1;

        $r2 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        $i1 = staticinvoke <org.spongycastle.util.Integers: int rotateLeft(int,int)>($i1, 16);

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECCurve r0, $r2;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.math.ec.ECFieldElement $r3;
        java.math.BigInteger $r4, $r5;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if r0 != $r2 goto label1;

        return $r1;

     label1:
        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        return $r1;

     label2:
        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $r5 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $z0 = $r1.<org.spongycastle.math.ec.ECPoint: boolean withCompression>;

        $r1 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r4, $r5, $z0);

        return $r1;
    }
    public void normalizeAll(org.spongycastle.math.ec.ECPoint[])
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECPoint[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[],int,int,org.spongycastle.math.ec.ECFieldElement)>($r1, 0, $i0, null);

        return;
    }
    public void normalizeAll(org.spongycastle.math.ec.ECPoint[], int, int, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECPoint[] $r1;
        int $i0, $i1, $i2, i3, $i4, $i5;
        org.spongycastle.math.ec.ECFieldElement $r2, $r6;
        int[] r3;
        org.spongycastle.math.ec.ECPoint r4;
        org.spongycastle.math.ec.ECFieldElement[] r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: org.spongycastle.math.ec.ECFieldElement;

        virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: void checkPoints(org.spongycastle.math.ec.ECPoint[],int,int)>($r1, $i0, $i1);

        $i2 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: int getCoordinateSystem()>();

        lookupswitch($i2)
        {
            case 0: goto label05;
            case 5: goto label05;
            default: goto label01;
        };

     label01:
        r5 = newarray (org.spongycastle.math.ec.ECFieldElement)[$i1];

        r3 = newarray (int)[$i1];

        i3 = 0;

        $i2 = 0;

     label02:
        if i3 >= $i1 goto label06;

        $i4 = $i0 + i3;

        r4 = $r1[$i4];

        if r4 == null goto label09;

        if $r2 != null goto label03;

        $z0 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: boolean isNormalized()>();

        if $z0 != 0 goto label09;

     label03:
        $r6 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getZCoord(int)>(0);

        r5[$i2] = $r6;

        $i4 = $i2 + 1;

        $i5 = $i0 + i3;

        r3[$i2] = $i5;

     label04:
        i3 = i3 + 1;

        $i2 = $i4;

        goto label02;

     label05:
        if $r2 == null goto label10;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'iso\' not valid for affine coordinates");

        throw $r7;

     label06:
        if $i2 != 0 goto label07;

        return;

     label07:
        staticinvoke <org.spongycastle.math.ec.ECAlgorithms: void montgomeryTrick(org.spongycastle.math.ec.ECFieldElement[],int,int,org.spongycastle.math.ec.ECFieldElement)>(r5, 0, $i2, $r2);

        $i1 = 0;

     label08:
        if $i1 >= $i2 goto label10;

        $i0 = r3[$i1];

        r4 = $r1[$i0];

        $r2 = r5[$i1];

        r4 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize(org.spongycastle.math.ec.ECFieldElement)>($r2);

        $r1[$i0] = r4;

        $i1 = $i1 + 1;

        goto label08;

     label09:
        $i4 = $i2;

        goto label04;

     label10:
        return;
    }
    public void setPreCompInfo(org.spongycastle.math.ec.ECPoint, java.lang.String, org.spongycastle.math.ec.PreCompInfo)
    {
        org.spongycastle.math.ec.ECCurve r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.lang.String $r2;
        org.spongycastle.math.ec.PreCompInfo $r3;
        java.util.Hashtable r4;
        java.lang.Throwable $r5;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.spongycastle.math.ec.PreCompInfo;

        virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: void checkPoint(org.spongycastle.math.ec.ECPoint)>($r1);

        entermonitor $r1;

     label1:
        r4 = $r1.<org.spongycastle.math.ec.ECPoint: java.util.Hashtable preCompTable>;

        if r4 != null goto label2;

        r4 = new java.util.Hashtable;

        specialinvoke r4.<java.util.Hashtable: void <init>(int)>(4);

        $r1.<org.spongycastle.math.ec.ECPoint: java.util.Hashtable preCompTable> = r4;

     label2:
        virtualinvoke r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        exitmonitor $r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public boolean supportsCoordinateSystem(int)
    {
        org.spongycastle.math.ec.ECCurve r0;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.math.ec.ECPoint $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r1, $r2);

        $z0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid point coordinates");

        throw $r4;

     label1:
        return $r3;
    }
    public org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger, java.math.BigInteger, boolean)
    {
        org.spongycastle.math.ec.ECCurve r0;
        java.math.BigInteger $r1, $r2;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r1, $r2, $z0);

        $z0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid point coordinates");

        throw $r4;

     label1:
        return $r3;
    }
