org.spongycastle.math.ec.LongArray extends java.lang.Object implements java.lang.Cloneable
private static final short[] INTERLEAVE2_TABLE
private static final int[] INTERLEAVE3_TABLE
private static final int[] INTERLEAVE4_TABLE
private static final int[] INTERLEAVE5_TABLE
private static final long[] INTERLEAVE7_TABLE
private static final java.lang.String ZEROES
static final byte[] bitLengths
private long[] m_ints
    static void <clinit>()
    {
        short[] $r0;
        int[] $r1;
        long[] $r2;
        byte[] $r3;

        $r0 = newarray (short)[256];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 4;

        $r0[3] = 5;

        $r0[4] = 16;

        $r0[5] = 17;

        $r0[6] = 20;

        $r0[7] = 21;

        $r0[8] = 64;

        $r0[9] = 65;

        $r0[10] = 68;

        $r0[11] = 69;

        $r0[12] = 80;

        $r0[13] = 81;

        $r0[14] = 84;

        $r0[15] = 85;

        $r0[16] = 256;

        $r0[17] = 257;

        $r0[18] = 260;

        $r0[19] = 261;

        $r0[20] = 272;

        $r0[21] = 273;

        $r0[22] = 276;

        $r0[23] = 277;

        $r0[24] = 320;

        $r0[25] = 321;

        $r0[26] = 324;

        $r0[27] = 325;

        $r0[28] = 336;

        $r0[29] = 337;

        $r0[30] = 340;

        $r0[31] = 341;

        $r0[32] = 1024;

        $r0[33] = 1025;

        $r0[34] = 1028;

        $r0[35] = 1029;

        $r0[36] = 1040;

        $r0[37] = 1041;

        $r0[38] = 1044;

        $r0[39] = 1045;

        $r0[40] = 1088;

        $r0[41] = 1089;

        $r0[42] = 1092;

        $r0[43] = 1093;

        $r0[44] = 1104;

        $r0[45] = 1105;

        $r0[46] = 1108;

        $r0[47] = 1109;

        $r0[48] = 1280;

        $r0[49] = 1281;

        $r0[50] = 1284;

        $r0[51] = 1285;

        $r0[52] = 1296;

        $r0[53] = 1297;

        $r0[54] = 1300;

        $r0[55] = 1301;

        $r0[56] = 1344;

        $r0[57] = 1345;

        $r0[58] = 1348;

        $r0[59] = 1349;

        $r0[60] = 1360;

        $r0[61] = 1361;

        $r0[62] = 1364;

        $r0[63] = 1365;

        $r0[64] = 4096;

        $r0[65] = 4097;

        $r0[66] = 4100;

        $r0[67] = 4101;

        $r0[68] = 4112;

        $r0[69] = 4113;

        $r0[70] = 4116;

        $r0[71] = 4117;

        $r0[72] = 4160;

        $r0[73] = 4161;

        $r0[74] = 4164;

        $r0[75] = 4165;

        $r0[76] = 4176;

        $r0[77] = 4177;

        $r0[78] = 4180;

        $r0[79] = 4181;

        $r0[80] = 4352;

        $r0[81] = 4353;

        $r0[82] = 4356;

        $r0[83] = 4357;

        $r0[84] = 4368;

        $r0[85] = 4369;

        $r0[86] = 4372;

        $r0[87] = 4373;

        $r0[88] = 4416;

        $r0[89] = 4417;

        $r0[90] = 4420;

        $r0[91] = 4421;

        $r0[92] = 4432;

        $r0[93] = 4433;

        $r0[94] = 4436;

        $r0[95] = 4437;

        $r0[96] = 5120;

        $r0[97] = 5121;

        $r0[98] = 5124;

        $r0[99] = 5125;

        $r0[100] = 5136;

        $r0[101] = 5137;

        $r0[102] = 5140;

        $r0[103] = 5141;

        $r0[104] = 5184;

        $r0[105] = 5185;

        $r0[106] = 5188;

        $r0[107] = 5189;

        $r0[108] = 5200;

        $r0[109] = 5201;

        $r0[110] = 5204;

        $r0[111] = 5205;

        $r0[112] = 5376;

        $r0[113] = 5377;

        $r0[114] = 5380;

        $r0[115] = 5381;

        $r0[116] = 5392;

        $r0[117] = 5393;

        $r0[118] = 5396;

        $r0[119] = 5397;

        $r0[120] = 5440;

        $r0[121] = 5441;

        $r0[122] = 5444;

        $r0[123] = 5445;

        $r0[124] = 5456;

        $r0[125] = 5457;

        $r0[126] = 5460;

        $r0[127] = 5461;

        $r0[128] = 16384;

        $r0[129] = 16385;

        $r0[130] = 16388;

        $r0[131] = 16389;

        $r0[132] = 16400;

        $r0[133] = 16401;

        $r0[134] = 16404;

        $r0[135] = 16405;

        $r0[136] = 16448;

        $r0[137] = 16449;

        $r0[138] = 16452;

        $r0[139] = 16453;

        $r0[140] = 16464;

        $r0[141] = 16465;

        $r0[142] = 16468;

        $r0[143] = 16469;

        $r0[144] = 16640;

        $r0[145] = 16641;

        $r0[146] = 16644;

        $r0[147] = 16645;

        $r0[148] = 16656;

        $r0[149] = 16657;

        $r0[150] = 16660;

        $r0[151] = 16661;

        $r0[152] = 16704;

        $r0[153] = 16705;

        $r0[154] = 16708;

        $r0[155] = 16709;

        $r0[156] = 16720;

        $r0[157] = 16721;

        $r0[158] = 16724;

        $r0[159] = 16725;

        $r0[160] = 17408;

        $r0[161] = 17409;

        $r0[162] = 17412;

        $r0[163] = 17413;

        $r0[164] = 17424;

        $r0[165] = 17425;

        $r0[166] = 17428;

        $r0[167] = 17429;

        $r0[168] = 17472;

        $r0[169] = 17473;

        $r0[170] = 17476;

        $r0[171] = 17477;

        $r0[172] = 17488;

        $r0[173] = 17489;

        $r0[174] = 17492;

        $r0[175] = 17493;

        $r0[176] = 17664;

        $r0[177] = 17665;

        $r0[178] = 17668;

        $r0[179] = 17669;

        $r0[180] = 17680;

        $r0[181] = 17681;

        $r0[182] = 17684;

        $r0[183] = 17685;

        $r0[184] = 17728;

        $r0[185] = 17729;

        $r0[186] = 17732;

        $r0[187] = 17733;

        $r0[188] = 17744;

        $r0[189] = 17745;

        $r0[190] = 17748;

        $r0[191] = 17749;

        $r0[192] = 20480;

        $r0[193] = 20481;

        $r0[194] = 20484;

        $r0[195] = 20485;

        $r0[196] = 20496;

        $r0[197] = 20497;

        $r0[198] = 20500;

        $r0[199] = 20501;

        $r0[200] = 20544;

        $r0[201] = 20545;

        $r0[202] = 20548;

        $r0[203] = 20549;

        $r0[204] = 20560;

        $r0[205] = 20561;

        $r0[206] = 20564;

        $r0[207] = 20565;

        $r0[208] = 20736;

        $r0[209] = 20737;

        $r0[210] = 20740;

        $r0[211] = 20741;

        $r0[212] = 20752;

        $r0[213] = 20753;

        $r0[214] = 20756;

        $r0[215] = 20757;

        $r0[216] = 20800;

        $r0[217] = 20801;

        $r0[218] = 20804;

        $r0[219] = 20805;

        $r0[220] = 20816;

        $r0[221] = 20817;

        $r0[222] = 20820;

        $r0[223] = 20821;

        $r0[224] = 21504;

        $r0[225] = 21505;

        $r0[226] = 21508;

        $r0[227] = 21509;

        $r0[228] = 21520;

        $r0[229] = 21521;

        $r0[230] = 21524;

        $r0[231] = 21525;

        $r0[232] = 21568;

        $r0[233] = 21569;

        $r0[234] = 21572;

        $r0[235] = 21573;

        $r0[236] = 21584;

        $r0[237] = 21585;

        $r0[238] = 21588;

        $r0[239] = 21589;

        $r0[240] = 21760;

        $r0[241] = 21761;

        $r0[242] = 21764;

        $r0[243] = 21765;

        $r0[244] = 21776;

        $r0[245] = 21777;

        $r0[246] = 21780;

        $r0[247] = 21781;

        $r0[248] = 21824;

        $r0[249] = 21825;

        $r0[250] = 21828;

        $r0[251] = 21829;

        $r0[252] = 21840;

        $r0[253] = 21841;

        $r0[254] = 21844;

        $r0[255] = 21845;

        <org.spongycastle.math.ec.LongArray: short[] INTERLEAVE2_TABLE> = $r0;

        $r1 = newarray (int)[128];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 8;

        $r1[3] = 9;

        $r1[4] = 64;

        $r1[5] = 65;

        $r1[6] = 72;

        $r1[7] = 73;

        $r1[8] = 512;

        $r1[9] = 513;

        $r1[10] = 520;

        $r1[11] = 521;

        $r1[12] = 576;

        $r1[13] = 577;

        $r1[14] = 584;

        $r1[15] = 585;

        $r1[16] = 4096;

        $r1[17] = 4097;

        $r1[18] = 4104;

        $r1[19] = 4105;

        $r1[20] = 4160;

        $r1[21] = 4161;

        $r1[22] = 4168;

        $r1[23] = 4169;

        $r1[24] = 4608;

        $r1[25] = 4609;

        $r1[26] = 4616;

        $r1[27] = 4617;

        $r1[28] = 4672;

        $r1[29] = 4673;

        $r1[30] = 4680;

        $r1[31] = 4681;

        $r1[32] = 32768;

        $r1[33] = 32769;

        $r1[34] = 32776;

        $r1[35] = 32777;

        $r1[36] = 32832;

        $r1[37] = 32833;

        $r1[38] = 32840;

        $r1[39] = 32841;

        $r1[40] = 33280;

        $r1[41] = 33281;

        $r1[42] = 33288;

        $r1[43] = 33289;

        $r1[44] = 33344;

        $r1[45] = 33345;

        $r1[46] = 33352;

        $r1[47] = 33353;

        $r1[48] = 36864;

        $r1[49] = 36865;

        $r1[50] = 36872;

        $r1[51] = 36873;

        $r1[52] = 36928;

        $r1[53] = 36929;

        $r1[54] = 36936;

        $r1[55] = 36937;

        $r1[56] = 37376;

        $r1[57] = 37377;

        $r1[58] = 37384;

        $r1[59] = 37385;

        $r1[60] = 37440;

        $r1[61] = 37441;

        $r1[62] = 37448;

        $r1[63] = 37449;

        $r1[64] = 262144;

        $r1[65] = 262145;

        $r1[66] = 262152;

        $r1[67] = 262153;

        $r1[68] = 262208;

        $r1[69] = 262209;

        $r1[70] = 262216;

        $r1[71] = 262217;

        $r1[72] = 262656;

        $r1[73] = 262657;

        $r1[74] = 262664;

        $r1[75] = 262665;

        $r1[76] = 262720;

        $r1[77] = 262721;

        $r1[78] = 262728;

        $r1[79] = 262729;

        $r1[80] = 266240;

        $r1[81] = 266241;

        $r1[82] = 266248;

        $r1[83] = 266249;

        $r1[84] = 266304;

        $r1[85] = 266305;

        $r1[86] = 266312;

        $r1[87] = 266313;

        $r1[88] = 266752;

        $r1[89] = 266753;

        $r1[90] = 266760;

        $r1[91] = 266761;

        $r1[92] = 266816;

        $r1[93] = 266817;

        $r1[94] = 266824;

        $r1[95] = 266825;

        $r1[96] = 294912;

        $r1[97] = 294913;

        $r1[98] = 294920;

        $r1[99] = 294921;

        $r1[100] = 294976;

        $r1[101] = 294977;

        $r1[102] = 294984;

        $r1[103] = 294985;

        $r1[104] = 295424;

        $r1[105] = 295425;

        $r1[106] = 295432;

        $r1[107] = 295433;

        $r1[108] = 295488;

        $r1[109] = 295489;

        $r1[110] = 295496;

        $r1[111] = 295497;

        $r1[112] = 299008;

        $r1[113] = 299009;

        $r1[114] = 299016;

        $r1[115] = 299017;

        $r1[116] = 299072;

        $r1[117] = 299073;

        $r1[118] = 299080;

        $r1[119] = 299081;

        $r1[120] = 299520;

        $r1[121] = 299521;

        $r1[122] = 299528;

        $r1[123] = 299529;

        $r1[124] = 299584;

        $r1[125] = 299585;

        $r1[126] = 299592;

        $r1[127] = 299593;

        <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE3_TABLE> = $r1;

        $r1 = newarray (int)[256];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 16;

        $r1[3] = 17;

        $r1[4] = 256;

        $r1[5] = 257;

        $r1[6] = 272;

        $r1[7] = 273;

        $r1[8] = 4096;

        $r1[9] = 4097;

        $r1[10] = 4112;

        $r1[11] = 4113;

        $r1[12] = 4352;

        $r1[13] = 4353;

        $r1[14] = 4368;

        $r1[15] = 4369;

        $r1[16] = 65536;

        $r1[17] = 65537;

        $r1[18] = 65552;

        $r1[19] = 65553;

        $r1[20] = 65792;

        $r1[21] = 65793;

        $r1[22] = 65808;

        $r1[23] = 65809;

        $r1[24] = 69632;

        $r1[25] = 69633;

        $r1[26] = 69648;

        $r1[27] = 69649;

        $r1[28] = 69888;

        $r1[29] = 69889;

        $r1[30] = 69904;

        $r1[31] = 69905;

        $r1[32] = 1048576;

        $r1[33] = 1048577;

        $r1[34] = 1048592;

        $r1[35] = 1048593;

        $r1[36] = 1048832;

        $r1[37] = 1048833;

        $r1[38] = 1048848;

        $r1[39] = 1048849;

        $r1[40] = 1052672;

        $r1[41] = 1052673;

        $r1[42] = 1052688;

        $r1[43] = 1052689;

        $r1[44] = 1052928;

        $r1[45] = 1052929;

        $r1[46] = 1052944;

        $r1[47] = 1052945;

        $r1[48] = 1114112;

        $r1[49] = 1114113;

        $r1[50] = 1114128;

        $r1[51] = 1114129;

        $r1[52] = 1114368;

        $r1[53] = 1114369;

        $r1[54] = 1114384;

        $r1[55] = 1114385;

        $r1[56] = 1118208;

        $r1[57] = 1118209;

        $r1[58] = 1118224;

        $r1[59] = 1118225;

        $r1[60] = 1118464;

        $r1[61] = 1118465;

        $r1[62] = 1118480;

        $r1[63] = 1118481;

        $r1[64] = 16777216;

        $r1[65] = 16777217;

        $r1[66] = 16777232;

        $r1[67] = 16777233;

        $r1[68] = 16777472;

        $r1[69] = 16777473;

        $r1[70] = 16777488;

        $r1[71] = 16777489;

        $r1[72] = 16781312;

        $r1[73] = 16781313;

        $r1[74] = 16781328;

        $r1[75] = 16781329;

        $r1[76] = 16781568;

        $r1[77] = 16781569;

        $r1[78] = 16781584;

        $r1[79] = 16781585;

        $r1[80] = 16842752;

        $r1[81] = 16842753;

        $r1[82] = 16842768;

        $r1[83] = 16842769;

        $r1[84] = 16843008;

        $r1[85] = 16843009;

        $r1[86] = 16843024;

        $r1[87] = 16843025;

        $r1[88] = 16846848;

        $r1[89] = 16846849;

        $r1[90] = 16846864;

        $r1[91] = 16846865;

        $r1[92] = 16847104;

        $r1[93] = 16847105;

        $r1[94] = 16847120;

        $r1[95] = 16847121;

        $r1[96] = 17825792;

        $r1[97] = 17825793;

        $r1[98] = 17825808;

        $r1[99] = 17825809;

        $r1[100] = 17826048;

        $r1[101] = 17826049;

        $r1[102] = 17826064;

        $r1[103] = 17826065;

        $r1[104] = 17829888;

        $r1[105] = 17829889;

        $r1[106] = 17829904;

        $r1[107] = 17829905;

        $r1[108] = 17830144;

        $r1[109] = 17830145;

        $r1[110] = 17830160;

        $r1[111] = 17830161;

        $r1[112] = 17891328;

        $r1[113] = 17891329;

        $r1[114] = 17891344;

        $r1[115] = 17891345;

        $r1[116] = 17891584;

        $r1[117] = 17891585;

        $r1[118] = 17891600;

        $r1[119] = 17891601;

        $r1[120] = 17895424;

        $r1[121] = 17895425;

        $r1[122] = 17895440;

        $r1[123] = 17895441;

        $r1[124] = 17895680;

        $r1[125] = 17895681;

        $r1[126] = 17895696;

        $r1[127] = 17895697;

        $r1[128] = 268435456;

        $r1[129] = 268435457;

        $r1[130] = 268435472;

        $r1[131] = 268435473;

        $r1[132] = 268435712;

        $r1[133] = 268435713;

        $r1[134] = 268435728;

        $r1[135] = 268435729;

        $r1[136] = 268439552;

        $r1[137] = 268439553;

        $r1[138] = 268439568;

        $r1[139] = 268439569;

        $r1[140] = 268439808;

        $r1[141] = 268439809;

        $r1[142] = 268439824;

        $r1[143] = 268439825;

        $r1[144] = 268500992;

        $r1[145] = 268500993;

        $r1[146] = 268501008;

        $r1[147] = 268501009;

        $r1[148] = 268501248;

        $r1[149] = 268501249;

        $r1[150] = 268501264;

        $r1[151] = 268501265;

        $r1[152] = 268505088;

        $r1[153] = 268505089;

        $r1[154] = 268505104;

        $r1[155] = 268505105;

        $r1[156] = 268505344;

        $r1[157] = 268505345;

        $r1[158] = 268505360;

        $r1[159] = 268505361;

        $r1[160] = 269484032;

        $r1[161] = 269484033;

        $r1[162] = 269484048;

        $r1[163] = 269484049;

        $r1[164] = 269484288;

        $r1[165] = 269484289;

        $r1[166] = 269484304;

        $r1[167] = 269484305;

        $r1[168] = 269488128;

        $r1[169] = 269488129;

        $r1[170] = 269488144;

        $r1[171] = 269488145;

        $r1[172] = 269488384;

        $r1[173] = 269488385;

        $r1[174] = 269488400;

        $r1[175] = 269488401;

        $r1[176] = 269549568;

        $r1[177] = 269549569;

        $r1[178] = 269549584;

        $r1[179] = 269549585;

        $r1[180] = 269549824;

        $r1[181] = 269549825;

        $r1[182] = 269549840;

        $r1[183] = 269549841;

        $r1[184] = 269553664;

        $r1[185] = 269553665;

        $r1[186] = 269553680;

        $r1[187] = 269553681;

        $r1[188] = 269553920;

        $r1[189] = 269553921;

        $r1[190] = 269553936;

        $r1[191] = 269553937;

        $r1[192] = 285212672;

        $r1[193] = 285212673;

        $r1[194] = 285212688;

        $r1[195] = 285212689;

        $r1[196] = 285212928;

        $r1[197] = 285212929;

        $r1[198] = 285212944;

        $r1[199] = 285212945;

        $r1[200] = 285216768;

        $r1[201] = 285216769;

        $r1[202] = 285216784;

        $r1[203] = 285216785;

        $r1[204] = 285217024;

        $r1[205] = 285217025;

        $r1[206] = 285217040;

        $r1[207] = 285217041;

        $r1[208] = 285278208;

        $r1[209] = 285278209;

        $r1[210] = 285278224;

        $r1[211] = 285278225;

        $r1[212] = 285278464;

        $r1[213] = 285278465;

        $r1[214] = 285278480;

        $r1[215] = 285278481;

        $r1[216] = 285282304;

        $r1[217] = 285282305;

        $r1[218] = 285282320;

        $r1[219] = 285282321;

        $r1[220] = 285282560;

        $r1[221] = 285282561;

        $r1[222] = 285282576;

        $r1[223] = 285282577;

        $r1[224] = 286261248;

        $r1[225] = 286261249;

        $r1[226] = 286261264;

        $r1[227] = 286261265;

        $r1[228] = 286261504;

        $r1[229] = 286261505;

        $r1[230] = 286261520;

        $r1[231] = 286261521;

        $r1[232] = 286265344;

        $r1[233] = 286265345;

        $r1[234] = 286265360;

        $r1[235] = 286265361;

        $r1[236] = 286265600;

        $r1[237] = 286265601;

        $r1[238] = 286265616;

        $r1[239] = 286265617;

        $r1[240] = 286326784;

        $r1[241] = 286326785;

        $r1[242] = 286326800;

        $r1[243] = 286326801;

        $r1[244] = 286327040;

        $r1[245] = 286327041;

        $r1[246] = 286327056;

        $r1[247] = 286327057;

        $r1[248] = 286330880;

        $r1[249] = 286330881;

        $r1[250] = 286330896;

        $r1[251] = 286330897;

        $r1[252] = 286331136;

        $r1[253] = 286331137;

        $r1[254] = 286331152;

        $r1[255] = 286331153;

        <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE4_TABLE> = $r1;

        $r1 = newarray (int)[128];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 32;

        $r1[3] = 33;

        $r1[4] = 1024;

        $r1[5] = 1025;

        $r1[6] = 1056;

        $r1[7] = 1057;

        $r1[8] = 32768;

        $r1[9] = 32769;

        $r1[10] = 32800;

        $r1[11] = 32801;

        $r1[12] = 33792;

        $r1[13] = 33793;

        $r1[14] = 33824;

        $r1[15] = 33825;

        $r1[16] = 1048576;

        $r1[17] = 1048577;

        $r1[18] = 1048608;

        $r1[19] = 1048609;

        $r1[20] = 1049600;

        $r1[21] = 1049601;

        $r1[22] = 1049632;

        $r1[23] = 1049633;

        $r1[24] = 1081344;

        $r1[25] = 1081345;

        $r1[26] = 1081376;

        $r1[27] = 1081377;

        $r1[28] = 1082368;

        $r1[29] = 1082369;

        $r1[30] = 1082400;

        $r1[31] = 1082401;

        $r1[32] = 33554432;

        $r1[33] = 33554433;

        $r1[34] = 33554464;

        $r1[35] = 33554465;

        $r1[36] = 33555456;

        $r1[37] = 33555457;

        $r1[38] = 33555488;

        $r1[39] = 33555489;

        $r1[40] = 33587200;

        $r1[41] = 33587201;

        $r1[42] = 33587232;

        $r1[43] = 33587233;

        $r1[44] = 33588224;

        $r1[45] = 33588225;

        $r1[46] = 33588256;

        $r1[47] = 33588257;

        $r1[48] = 34603008;

        $r1[49] = 34603009;

        $r1[50] = 34603040;

        $r1[51] = 34603041;

        $r1[52] = 34604032;

        $r1[53] = 34604033;

        $r1[54] = 34604064;

        $r1[55] = 34604065;

        $r1[56] = 34635776;

        $r1[57] = 34635777;

        $r1[58] = 34635808;

        $r1[59] = 34635809;

        $r1[60] = 34636800;

        $r1[61] = 34636801;

        $r1[62] = 34636832;

        $r1[63] = 34636833;

        $r1[64] = 1073741824;

        $r1[65] = 1073741825;

        $r1[66] = 1073741856;

        $r1[67] = 1073741857;

        $r1[68] = 1073742848;

        $r1[69] = 1073742849;

        $r1[70] = 1073742880;

        $r1[71] = 1073742881;

        $r1[72] = 1073774592;

        $r1[73] = 1073774593;

        $r1[74] = 1073774624;

        $r1[75] = 1073774625;

        $r1[76] = 1073775616;

        $r1[77] = 1073775617;

        $r1[78] = 1073775648;

        $r1[79] = 1073775649;

        $r1[80] = 1074790400;

        $r1[81] = 1074790401;

        $r1[82] = 1074790432;

        $r1[83] = 1074790433;

        $r1[84] = 1074791424;

        $r1[85] = 1074791425;

        $r1[86] = 1074791456;

        $r1[87] = 1074791457;

        $r1[88] = 1074823168;

        $r1[89] = 1074823169;

        $r1[90] = 1074823200;

        $r1[91] = 1074823201;

        $r1[92] = 1074824192;

        $r1[93] = 1074824193;

        $r1[94] = 1074824224;

        $r1[95] = 1074824225;

        $r1[96] = 1107296256;

        $r1[97] = 1107296257;

        $r1[98] = 1107296288;

        $r1[99] = 1107296289;

        $r1[100] = 1107297280;

        $r1[101] = 1107297281;

        $r1[102] = 1107297312;

        $r1[103] = 1107297313;

        $r1[104] = 1107329024;

        $r1[105] = 1107329025;

        $r1[106] = 1107329056;

        $r1[107] = 1107329057;

        $r1[108] = 1107330048;

        $r1[109] = 1107330049;

        $r1[110] = 1107330080;

        $r1[111] = 1107330081;

        $r1[112] = 1108344832;

        $r1[113] = 1108344833;

        $r1[114] = 1108344864;

        $r1[115] = 1108344865;

        $r1[116] = 1108345856;

        $r1[117] = 1108345857;

        $r1[118] = 1108345888;

        $r1[119] = 1108345889;

        $r1[120] = 1108377600;

        $r1[121] = 1108377601;

        $r1[122] = 1108377632;

        $r1[123] = 1108377633;

        $r1[124] = 1108378624;

        $r1[125] = 1108378625;

        $r1[126] = 1108378656;

        $r1[127] = 1108378657;

        <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE5_TABLE> = $r1;

        $r2 = newarray (long)[512];

        $r2[0] = 0L;

        $r2[1] = 1L;

        $r2[2] = 128L;

        $r2[3] = 129L;

        $r2[4] = 16384L;

        $r2[5] = 16385L;

        $r2[6] = 16512L;

        $r2[7] = 16513L;

        $r2[8] = 2097152L;

        $r2[9] = 2097153L;

        $r2[10] = 2097280L;

        $r2[11] = 2097281L;

        $r2[12] = 2113536L;

        $r2[13] = 2113537L;

        $r2[14] = 2113664L;

        $r2[15] = 2113665L;

        $r2[16] = 268435456L;

        $r2[17] = 268435457L;

        $r2[18] = 268435584L;

        $r2[19] = 268435585L;

        $r2[20] = 268451840L;

        $r2[21] = 268451841L;

        $r2[22] = 268451968L;

        $r2[23] = 268451969L;

        $r2[24] = 270532608L;

        $r2[25] = 270532609L;

        $r2[26] = 270532736L;

        $r2[27] = 270532737L;

        $r2[28] = 270548992L;

        $r2[29] = 270548993L;

        $r2[30] = 270549120L;

        $r2[31] = 270549121L;

        $r2[32] = 34359738368L;

        $r2[33] = 34359738369L;

        $r2[34] = 34359738496L;

        $r2[35] = 34359738497L;

        $r2[36] = 34359754752L;

        $r2[37] = 34359754753L;

        $r2[38] = 34359754880L;

        $r2[39] = 34359754881L;

        $r2[40] = 34361835520L;

        $r2[41] = 34361835521L;

        $r2[42] = 34361835648L;

        $r2[43] = 34361835649L;

        $r2[44] = 34361851904L;

        $r2[45] = 34361851905L;

        $r2[46] = 34361852032L;

        $r2[47] = 34361852033L;

        $r2[48] = 34628173824L;

        $r2[49] = 34628173825L;

        $r2[50] = 34628173952L;

        $r2[51] = 34628173953L;

        $r2[52] = 34628190208L;

        $r2[53] = 34628190209L;

        $r2[54] = 34628190336L;

        $r2[55] = 34628190337L;

        $r2[56] = 34630270976L;

        $r2[57] = 34630270977L;

        $r2[58] = 34630271104L;

        $r2[59] = 34630271105L;

        $r2[60] = 34630287360L;

        $r2[61] = 34630287361L;

        $r2[62] = 34630287488L;

        $r2[63] = 34630287489L;

        $r2[64] = 4398046511104L;

        $r2[65] = 4398046511105L;

        $r2[66] = 4398046511232L;

        $r2[67] = 4398046511233L;

        $r2[68] = 4398046527488L;

        $r2[69] = 4398046527489L;

        $r2[70] = 4398046527616L;

        $r2[71] = 4398046527617L;

        $r2[72] = 4398048608256L;

        $r2[73] = 4398048608257L;

        $r2[74] = 4398048608384L;

        $r2[75] = 4398048608385L;

        $r2[76] = 4398048624640L;

        $r2[77] = 4398048624641L;

        $r2[78] = 4398048624768L;

        $r2[79] = 4398048624769L;

        $r2[80] = 4398314946560L;

        $r2[81] = 4398314946561L;

        $r2[82] = 4398314946688L;

        $r2[83] = 4398314946689L;

        $r2[84] = 4398314962944L;

        $r2[85] = 4398314962945L;

        $r2[86] = 4398314963072L;

        $r2[87] = 4398314963073L;

        $r2[88] = 4398317043712L;

        $r2[89] = 4398317043713L;

        $r2[90] = 4398317043840L;

        $r2[91] = 4398317043841L;

        $r2[92] = 4398317060096L;

        $r2[93] = 4398317060097L;

        $r2[94] = 4398317060224L;

        $r2[95] = 4398317060225L;

        $r2[96] = 4432406249472L;

        $r2[97] = 4432406249473L;

        $r2[98] = 4432406249600L;

        $r2[99] = 4432406249601L;

        $r2[100] = 4432406265856L;

        $r2[101] = 4432406265857L;

        $r2[102] = 4432406265984L;

        $r2[103] = 4432406265985L;

        $r2[104] = 4432408346624L;

        $r2[105] = 4432408346625L;

        $r2[106] = 4432408346752L;

        $r2[107] = 4432408346753L;

        $r2[108] = 4432408363008L;

        $r2[109] = 4432408363009L;

        $r2[110] = 4432408363136L;

        $r2[111] = 4432408363137L;

        $r2[112] = 4432674684928L;

        $r2[113] = 4432674684929L;

        $r2[114] = 4432674685056L;

        $r2[115] = 4432674685057L;

        $r2[116] = 4432674701312L;

        $r2[117] = 4432674701313L;

        $r2[118] = 4432674701440L;

        $r2[119] = 4432674701441L;

        $r2[120] = 4432676782080L;

        $r2[121] = 4432676782081L;

        $r2[122] = 4432676782208L;

        $r2[123] = 4432676782209L;

        $r2[124] = 4432676798464L;

        $r2[125] = 4432676798465L;

        $r2[126] = 4432676798592L;

        $r2[127] = 4432676798593L;

        $r2[128] = 562949953421312L;

        $r2[129] = 562949953421313L;

        $r2[130] = 562949953421440L;

        $r2[131] = 562949953421441L;

        $r2[132] = 562949953437696L;

        $r2[133] = 562949953437697L;

        $r2[134] = 562949953437824L;

        $r2[135] = 562949953437825L;

        $r2[136] = 562949955518464L;

        $r2[137] = 562949955518465L;

        $r2[138] = 562949955518592L;

        $r2[139] = 562949955518593L;

        $r2[140] = 562949955534848L;

        $r2[141] = 562949955534849L;

        $r2[142] = 562949955534976L;

        $r2[143] = 562949955534977L;

        $r2[144] = 562950221856768L;

        $r2[145] = 562950221856769L;

        $r2[146] = 562950221856896L;

        $r2[147] = 562950221856897L;

        $r2[148] = 562950221873152L;

        $r2[149] = 562950221873153L;

        $r2[150] = 562950221873280L;

        $r2[151] = 562950221873281L;

        $r2[152] = 562950223953920L;

        $r2[153] = 562950223953921L;

        $r2[154] = 562950223954048L;

        $r2[155] = 562950223954049L;

        $r2[156] = 562950223970304L;

        $r2[157] = 562950223970305L;

        $r2[158] = 562950223970432L;

        $r2[159] = 562950223970433L;

        $r2[160] = 562984313159680L;

        $r2[161] = 562984313159681L;

        $r2[162] = 562984313159808L;

        $r2[163] = 562984313159809L;

        $r2[164] = 562984313176064L;

        $r2[165] = 562984313176065L;

        $r2[166] = 562984313176192L;

        $r2[167] = 562984313176193L;

        $r2[168] = 562984315256832L;

        $r2[169] = 562984315256833L;

        $r2[170] = 562984315256960L;

        $r2[171] = 562984315256961L;

        $r2[172] = 562984315273216L;

        $r2[173] = 562984315273217L;

        $r2[174] = 562984315273344L;

        $r2[175] = 562984315273345L;

        $r2[176] = 562984581595136L;

        $r2[177] = 562984581595137L;

        $r2[178] = 562984581595264L;

        $r2[179] = 562984581595265L;

        $r2[180] = 562984581611520L;

        $r2[181] = 562984581611521L;

        $r2[182] = 562984581611648L;

        $r2[183] = 562984581611649L;

        $r2[184] = 562984583692288L;

        $r2[185] = 562984583692289L;

        $r2[186] = 562984583692416L;

        $r2[187] = 562984583692417L;

        $r2[188] = 562984583708672L;

        $r2[189] = 562984583708673L;

        $r2[190] = 562984583708800L;

        $r2[191] = 562984583708801L;

        $r2[192] = 567347999932416L;

        $r2[193] = 567347999932417L;

        $r2[194] = 567347999932544L;

        $r2[195] = 567347999932545L;

        $r2[196] = 567347999948800L;

        $r2[197] = 567347999948801L;

        $r2[198] = 567347999948928L;

        $r2[199] = 567347999948929L;

        $r2[200] = 567348002029568L;

        $r2[201] = 567348002029569L;

        $r2[202] = 567348002029696L;

        $r2[203] = 567348002029697L;

        $r2[204] = 567348002045952L;

        $r2[205] = 567348002045953L;

        $r2[206] = 567348002046080L;

        $r2[207] = 567348002046081L;

        $r2[208] = 567348268367872L;

        $r2[209] = 567348268367873L;

        $r2[210] = 567348268368000L;

        $r2[211] = 567348268368001L;

        $r2[212] = 567348268384256L;

        $r2[213] = 567348268384257L;

        $r2[214] = 567348268384384L;

        $r2[215] = 567348268384385L;

        $r2[216] = 567348270465024L;

        $r2[217] = 567348270465025L;

        $r2[218] = 567348270465152L;

        $r2[219] = 567348270465153L;

        $r2[220] = 567348270481408L;

        $r2[221] = 567348270481409L;

        $r2[222] = 567348270481536L;

        $r2[223] = 567348270481537L;

        $r2[224] = 567382359670784L;

        $r2[225] = 567382359670785L;

        $r2[226] = 567382359670912L;

        $r2[227] = 567382359670913L;

        $r2[228] = 567382359687168L;

        $r2[229] = 567382359687169L;

        $r2[230] = 567382359687296L;

        $r2[231] = 567382359687297L;

        $r2[232] = 567382361767936L;

        $r2[233] = 567382361767937L;

        $r2[234] = 567382361768064L;

        $r2[235] = 567382361768065L;

        $r2[236] = 567382361784320L;

        $r2[237] = 567382361784321L;

        $r2[238] = 567382361784448L;

        $r2[239] = 567382361784449L;

        $r2[240] = 567382628106240L;

        $r2[241] = 567382628106241L;

        $r2[242] = 567382628106368L;

        $r2[243] = 567382628106369L;

        $r2[244] = 567382628122624L;

        $r2[245] = 567382628122625L;

        $r2[246] = 567382628122752L;

        $r2[247] = 567382628122753L;

        $r2[248] = 567382630203392L;

        $r2[249] = 567382630203393L;

        $r2[250] = 567382630203520L;

        $r2[251] = 567382630203521L;

        $r2[252] = 567382630219776L;

        $r2[253] = 567382630219777L;

        $r2[254] = 567382630219904L;

        $r2[255] = 567382630219905L;

        $r2[256] = 72057594037927936L;

        $r2[257] = 72057594037927937L;

        $r2[258] = 72057594037928064L;

        $r2[259] = 72057594037928065L;

        $r2[260] = 72057594037944320L;

        $r2[261] = 72057594037944321L;

        $r2[262] = 72057594037944448L;

        $r2[263] = 72057594037944449L;

        $r2[264] = 72057594040025088L;

        $r2[265] = 72057594040025089L;

        $r2[266] = 72057594040025216L;

        $r2[267] = 72057594040025217L;

        $r2[268] = 72057594040041472L;

        $r2[269] = 72057594040041473L;

        $r2[270] = 72057594040041600L;

        $r2[271] = 72057594040041601L;

        $r2[272] = 72057594306363392L;

        $r2[273] = 72057594306363393L;

        $r2[274] = 72057594306363520L;

        $r2[275] = 72057594306363521L;

        $r2[276] = 72057594306379776L;

        $r2[277] = 72057594306379777L;

        $r2[278] = 72057594306379904L;

        $r2[279] = 72057594306379905L;

        $r2[280] = 72057594308460544L;

        $r2[281] = 72057594308460545L;

        $r2[282] = 72057594308460672L;

        $r2[283] = 72057594308460673L;

        $r2[284] = 72057594308476928L;

        $r2[285] = 72057594308476929L;

        $r2[286] = 72057594308477056L;

        $r2[287] = 72057594308477057L;

        $r2[288] = 72057628397666304L;

        $r2[289] = 72057628397666305L;

        $r2[290] = 72057628397666432L;

        $r2[291] = 72057628397666433L;

        $r2[292] = 72057628397682688L;

        $r2[293] = 72057628397682689L;

        $r2[294] = 72057628397682816L;

        $r2[295] = 72057628397682817L;

        $r2[296] = 72057628399763456L;

        $r2[297] = 72057628399763457L;

        $r2[298] = 72057628399763584L;

        $r2[299] = 72057628399763585L;

        $r2[300] = 72057628399779840L;

        $r2[301] = 72057628399779841L;

        $r2[302] = 72057628399779968L;

        $r2[303] = 72057628399779969L;

        $r2[304] = 72057628666101760L;

        $r2[305] = 72057628666101761L;

        $r2[306] = 72057628666101888L;

        $r2[307] = 72057628666101889L;

        $r2[308] = 72057628666118144L;

        $r2[309] = 72057628666118145L;

        $r2[310] = 72057628666118272L;

        $r2[311] = 72057628666118273L;

        $r2[312] = 72057628668198912L;

        $r2[313] = 72057628668198913L;

        $r2[314] = 72057628668199040L;

        $r2[315] = 72057628668199041L;

        $r2[316] = 72057628668215296L;

        $r2[317] = 72057628668215297L;

        $r2[318] = 72057628668215424L;

        $r2[319] = 72057628668215425L;

        $r2[320] = 72061992084439040L;

        $r2[321] = 72061992084439041L;

        $r2[322] = 72061992084439168L;

        $r2[323] = 72061992084439169L;

        $r2[324] = 72061992084455424L;

        $r2[325] = 72061992084455425L;

        $r2[326] = 72061992084455552L;

        $r2[327] = 72061992084455553L;

        $r2[328] = 72061992086536192L;

        $r2[329] = 72061992086536193L;

        $r2[330] = 72061992086536320L;

        $r2[331] = 72061992086536321L;

        $r2[332] = 72061992086552576L;

        $r2[333] = 72061992086552577L;

        $r2[334] = 72061992086552704L;

        $r2[335] = 72061992086552705L;

        $r2[336] = 72061992352874496L;

        $r2[337] = 72061992352874497L;

        $r2[338] = 72061992352874624L;

        $r2[339] = 72061992352874625L;

        $r2[340] = 72061992352890880L;

        $r2[341] = 72061992352890881L;

        $r2[342] = 72061992352891008L;

        $r2[343] = 72061992352891009L;

        $r2[344] = 72061992354971648L;

        $r2[345] = 72061992354971649L;

        $r2[346] = 72061992354971776L;

        $r2[347] = 72061992354971777L;

        $r2[348] = 72061992354988032L;

        $r2[349] = 72061992354988033L;

        $r2[350] = 72061992354988160L;

        $r2[351] = 72061992354988161L;

        $r2[352] = 72062026444177408L;

        $r2[353] = 72062026444177409L;

        $r2[354] = 72062026444177536L;

        $r2[355] = 72062026444177537L;

        $r2[356] = 72062026444193792L;

        $r2[357] = 72062026444193793L;

        $r2[358] = 72062026444193920L;

        $r2[359] = 72062026444193921L;

        $r2[360] = 72062026446274560L;

        $r2[361] = 72062026446274561L;

        $r2[362] = 72062026446274688L;

        $r2[363] = 72062026446274689L;

        $r2[364] = 72062026446290944L;

        $r2[365] = 72062026446290945L;

        $r2[366] = 72062026446291072L;

        $r2[367] = 72062026446291073L;

        $r2[368] = 72062026712612864L;

        $r2[369] = 72062026712612865L;

        $r2[370] = 72062026712612992L;

        $r2[371] = 72062026712612993L;

        $r2[372] = 72062026712629248L;

        $r2[373] = 72062026712629249L;

        $r2[374] = 72062026712629376L;

        $r2[375] = 72062026712629377L;

        $r2[376] = 72062026714710016L;

        $r2[377] = 72062026714710017L;

        $r2[378] = 72062026714710144L;

        $r2[379] = 72062026714710145L;

        $r2[380] = 72062026714726400L;

        $r2[381] = 72062026714726401L;

        $r2[382] = 72062026714726528L;

        $r2[383] = 72062026714726529L;

        $r2[384] = 72620543991349248L;

        $r2[385] = 72620543991349249L;

        $r2[386] = 72620543991349376L;

        $r2[387] = 72620543991349377L;

        $r2[388] = 72620543991365632L;

        $r2[389] = 72620543991365633L;

        $r2[390] = 72620543991365760L;

        $r2[391] = 72620543991365761L;

        $r2[392] = 72620543993446400L;

        $r2[393] = 72620543993446401L;

        $r2[394] = 72620543993446528L;

        $r2[395] = 72620543993446529L;

        $r2[396] = 72620543993462784L;

        $r2[397] = 72620543993462785L;

        $r2[398] = 72620543993462912L;

        $r2[399] = 72620543993462913L;

        $r2[400] = 72620544259784704L;

        $r2[401] = 72620544259784705L;

        $r2[402] = 72620544259784832L;

        $r2[403] = 72620544259784833L;

        $r2[404] = 72620544259801088L;

        $r2[405] = 72620544259801089L;

        $r2[406] = 72620544259801216L;

        $r2[407] = 72620544259801217L;

        $r2[408] = 72620544261881856L;

        $r2[409] = 72620544261881857L;

        $r2[410] = 72620544261881984L;

        $r2[411] = 72620544261881985L;

        $r2[412] = 72620544261898240L;

        $r2[413] = 72620544261898241L;

        $r2[414] = 72620544261898368L;

        $r2[415] = 72620544261898369L;

        $r2[416] = 72620578351087616L;

        $r2[417] = 72620578351087617L;

        $r2[418] = 72620578351087744L;

        $r2[419] = 72620578351087745L;

        $r2[420] = 72620578351104000L;

        $r2[421] = 72620578351104001L;

        $r2[422] = 72620578351104128L;

        $r2[423] = 72620578351104129L;

        $r2[424] = 72620578353184768L;

        $r2[425] = 72620578353184769L;

        $r2[426] = 72620578353184896L;

        $r2[427] = 72620578353184897L;

        $r2[428] = 72620578353201152L;

        $r2[429] = 72620578353201153L;

        $r2[430] = 72620578353201280L;

        $r2[431] = 72620578353201281L;

        $r2[432] = 72620578619523072L;

        $r2[433] = 72620578619523073L;

        $r2[434] = 72620578619523200L;

        $r2[435] = 72620578619523201L;

        $r2[436] = 72620578619539456L;

        $r2[437] = 72620578619539457L;

        $r2[438] = 72620578619539584L;

        $r2[439] = 72620578619539585L;

        $r2[440] = 72620578621620224L;

        $r2[441] = 72620578621620225L;

        $r2[442] = 72620578621620352L;

        $r2[443] = 72620578621620353L;

        $r2[444] = 72620578621636608L;

        $r2[445] = 72620578621636609L;

        $r2[446] = 72620578621636736L;

        $r2[447] = 72620578621636737L;

        $r2[448] = 72624942037860352L;

        $r2[449] = 72624942037860353L;

        $r2[450] = 72624942037860480L;

        $r2[451] = 72624942037860481L;

        $r2[452] = 72624942037876736L;

        $r2[453] = 72624942037876737L;

        $r2[454] = 72624942037876864L;

        $r2[455] = 72624942037876865L;

        $r2[456] = 72624942039957504L;

        $r2[457] = 72624942039957505L;

        $r2[458] = 72624942039957632L;

        $r2[459] = 72624942039957633L;

        $r2[460] = 72624942039973888L;

        $r2[461] = 72624942039973889L;

        $r2[462] = 72624942039974016L;

        $r2[463] = 72624942039974017L;

        $r2[464] = 72624942306295808L;

        $r2[465] = 72624942306295809L;

        $r2[466] = 72624942306295936L;

        $r2[467] = 72624942306295937L;

        $r2[468] = 72624942306312192L;

        $r2[469] = 72624942306312193L;

        $r2[470] = 72624942306312320L;

        $r2[471] = 72624942306312321L;

        $r2[472] = 72624942308392960L;

        $r2[473] = 72624942308392961L;

        $r2[474] = 72624942308393088L;

        $r2[475] = 72624942308393089L;

        $r2[476] = 72624942308409344L;

        $r2[477] = 72624942308409345L;

        $r2[478] = 72624942308409472L;

        $r2[479] = 72624942308409473L;

        $r2[480] = 72624976397598720L;

        $r2[481] = 72624976397598721L;

        $r2[482] = 72624976397598848L;

        $r2[483] = 72624976397598849L;

        $r2[484] = 72624976397615104L;

        $r2[485] = 72624976397615105L;

        $r2[486] = 72624976397615232L;

        $r2[487] = 72624976397615233L;

        $r2[488] = 72624976399695872L;

        $r2[489] = 72624976399695873L;

        $r2[490] = 72624976399696000L;

        $r2[491] = 72624976399696001L;

        $r2[492] = 72624976399712256L;

        $r2[493] = 72624976399712257L;

        $r2[494] = 72624976399712384L;

        $r2[495] = 72624976399712385L;

        $r2[496] = 72624976666034176L;

        $r2[497] = 72624976666034177L;

        $r2[498] = 72624976666034304L;

        $r2[499] = 72624976666034305L;

        $r2[500] = 72624976666050560L;

        $r2[501] = 72624976666050561L;

        $r2[502] = 72624976666050688L;

        $r2[503] = 72624976666050689L;

        $r2[504] = 72624976668131328L;

        $r2[505] = 72624976668131329L;

        $r2[506] = 72624976668131456L;

        $r2[507] = 72624976668131457L;

        $r2[508] = 72624976668147712L;

        $r2[509] = 72624976668147713L;

        $r2[510] = 72624976668147840L;

        $r2[511] = 72624976668147841L;

        <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE> = $r2;

        $r3 = newarray (byte)[256];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 2;

        $r3[4] = 3;

        $r3[5] = 3;

        $r3[6] = 3;

        $r3[7] = 3;

        $r3[8] = 4;

        $r3[9] = 4;

        $r3[10] = 4;

        $r3[11] = 4;

        $r3[12] = 4;

        $r3[13] = 4;

        $r3[14] = 4;

        $r3[15] = 4;

        $r3[16] = 5;

        $r3[17] = 5;

        $r3[18] = 5;

        $r3[19] = 5;

        $r3[20] = 5;

        $r3[21] = 5;

        $r3[22] = 5;

        $r3[23] = 5;

        $r3[24] = 5;

        $r3[25] = 5;

        $r3[26] = 5;

        $r3[27] = 5;

        $r3[28] = 5;

        $r3[29] = 5;

        $r3[30] = 5;

        $r3[31] = 5;

        $r3[32] = 6;

        $r3[33] = 6;

        $r3[34] = 6;

        $r3[35] = 6;

        $r3[36] = 6;

        $r3[37] = 6;

        $r3[38] = 6;

        $r3[39] = 6;

        $r3[40] = 6;

        $r3[41] = 6;

        $r3[42] = 6;

        $r3[43] = 6;

        $r3[44] = 6;

        $r3[45] = 6;

        $r3[46] = 6;

        $r3[47] = 6;

        $r3[48] = 6;

        $r3[49] = 6;

        $r3[50] = 6;

        $r3[51] = 6;

        $r3[52] = 6;

        $r3[53] = 6;

        $r3[54] = 6;

        $r3[55] = 6;

        $r3[56] = 6;

        $r3[57] = 6;

        $r3[58] = 6;

        $r3[59] = 6;

        $r3[60] = 6;

        $r3[61] = 6;

        $r3[62] = 6;

        $r3[63] = 6;

        $r3[64] = 7;

        $r3[65] = 7;

        $r3[66] = 7;

        $r3[67] = 7;

        $r3[68] = 7;

        $r3[69] = 7;

        $r3[70] = 7;

        $r3[71] = 7;

        $r3[72] = 7;

        $r3[73] = 7;

        $r3[74] = 7;

        $r3[75] = 7;

        $r3[76] = 7;

        $r3[77] = 7;

        $r3[78] = 7;

        $r3[79] = 7;

        $r3[80] = 7;

        $r3[81] = 7;

        $r3[82] = 7;

        $r3[83] = 7;

        $r3[84] = 7;

        $r3[85] = 7;

        $r3[86] = 7;

        $r3[87] = 7;

        $r3[88] = 7;

        $r3[89] = 7;

        $r3[90] = 7;

        $r3[91] = 7;

        $r3[92] = 7;

        $r3[93] = 7;

        $r3[94] = 7;

        $r3[95] = 7;

        $r3[96] = 7;

        $r3[97] = 7;

        $r3[98] = 7;

        $r3[99] = 7;

        $r3[100] = 7;

        $r3[101] = 7;

        $r3[102] = 7;

        $r3[103] = 7;

        $r3[104] = 7;

        $r3[105] = 7;

        $r3[106] = 7;

        $r3[107] = 7;

        $r3[108] = 7;

        $r3[109] = 7;

        $r3[110] = 7;

        $r3[111] = 7;

        $r3[112] = 7;

        $r3[113] = 7;

        $r3[114] = 7;

        $r3[115] = 7;

        $r3[116] = 7;

        $r3[117] = 7;

        $r3[118] = 7;

        $r3[119] = 7;

        $r3[120] = 7;

        $r3[121] = 7;

        $r3[122] = 7;

        $r3[123] = 7;

        $r3[124] = 7;

        $r3[125] = 7;

        $r3[126] = 7;

        $r3[127] = 7;

        $r3[128] = 8;

        $r3[129] = 8;

        $r3[130] = 8;

        $r3[131] = 8;

        $r3[132] = 8;

        $r3[133] = 8;

        $r3[134] = 8;

        $r3[135] = 8;

        $r3[136] = 8;

        $r3[137] = 8;

        $r3[138] = 8;

        $r3[139] = 8;

        $r3[140] = 8;

        $r3[141] = 8;

        $r3[142] = 8;

        $r3[143] = 8;

        $r3[144] = 8;

        $r3[145] = 8;

        $r3[146] = 8;

        $r3[147] = 8;

        $r3[148] = 8;

        $r3[149] = 8;

        $r3[150] = 8;

        $r3[151] = 8;

        $r3[152] = 8;

        $r3[153] = 8;

        $r3[154] = 8;

        $r3[155] = 8;

        $r3[156] = 8;

        $r3[157] = 8;

        $r3[158] = 8;

        $r3[159] = 8;

        $r3[160] = 8;

        $r3[161] = 8;

        $r3[162] = 8;

        $r3[163] = 8;

        $r3[164] = 8;

        $r3[165] = 8;

        $r3[166] = 8;

        $r3[167] = 8;

        $r3[168] = 8;

        $r3[169] = 8;

        $r3[170] = 8;

        $r3[171] = 8;

        $r3[172] = 8;

        $r3[173] = 8;

        $r3[174] = 8;

        $r3[175] = 8;

        $r3[176] = 8;

        $r3[177] = 8;

        $r3[178] = 8;

        $r3[179] = 8;

        $r3[180] = 8;

        $r3[181] = 8;

        $r3[182] = 8;

        $r3[183] = 8;

        $r3[184] = 8;

        $r3[185] = 8;

        $r3[186] = 8;

        $r3[187] = 8;

        $r3[188] = 8;

        $r3[189] = 8;

        $r3[190] = 8;

        $r3[191] = 8;

        $r3[192] = 8;

        $r3[193] = 8;

        $r3[194] = 8;

        $r3[195] = 8;

        $r3[196] = 8;

        $r3[197] = 8;

        $r3[198] = 8;

        $r3[199] = 8;

        $r3[200] = 8;

        $r3[201] = 8;

        $r3[202] = 8;

        $r3[203] = 8;

        $r3[204] = 8;

        $r3[205] = 8;

        $r3[206] = 8;

        $r3[207] = 8;

        $r3[208] = 8;

        $r3[209] = 8;

        $r3[210] = 8;

        $r3[211] = 8;

        $r3[212] = 8;

        $r3[213] = 8;

        $r3[214] = 8;

        $r3[215] = 8;

        $r3[216] = 8;

        $r3[217] = 8;

        $r3[218] = 8;

        $r3[219] = 8;

        $r3[220] = 8;

        $r3[221] = 8;

        $r3[222] = 8;

        $r3[223] = 8;

        $r3[224] = 8;

        $r3[225] = 8;

        $r3[226] = 8;

        $r3[227] = 8;

        $r3[228] = 8;

        $r3[229] = 8;

        $r3[230] = 8;

        $r3[231] = 8;

        $r3[232] = 8;

        $r3[233] = 8;

        $r3[234] = 8;

        $r3[235] = 8;

        $r3[236] = 8;

        $r3[237] = 8;

        $r3[238] = 8;

        $r3[239] = 8;

        $r3[240] = 8;

        $r3[241] = 8;

        $r3[242] = 8;

        $r3[243] = 8;

        $r3[244] = 8;

        $r3[245] = 8;

        $r3[246] = 8;

        $r3[247] = 8;

        $r3[248] = 8;

        $r3[249] = 8;

        $r3[250] = 8;

        $r3[251] = 8;

        $r3[252] = 8;

        $r3[253] = 8;

        $r3[254] = 8;

        $r3[255] = 8;

        <org.spongycastle.math.ec.LongArray: byte[] bitLengths> = $r3;

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0;
        long[] $r1;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[$i0];

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r1;

        return;
    }
    public void <init>(java.math.BigInteger)
    {
        org.spongycastle.math.ec.LongArray r0;
        java.math.BigInteger $r1;
        int i0, i1, i2, i6;
        java.lang.IllegalArgumentException $r2;
        long[] $r3;
        byte[] $r4;
        byte b3, $b4;
        long l5, $l7;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label01;

        i1 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if i1 >= 0 goto label02;

     label01:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid F2m field value");

        throw $r2;

     label02:
        i1 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if i1 != 0 goto label03;

        $r3 = newarray (long)[1];

        $r3[0] = 0L;

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r3;

        return;

     label03:
        $r4 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        i2 = lengthof $r4;

        b3 = 0;

        $b4 = $r4[0];

        if $b4 != 0 goto label04;

        i2 = i2 + -1;

        b3 = 1;

     label04:
        i1 = i2 + 7;

        i1 = i1 / 8;

        $r3 = newarray (long)[i1];

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r3;

        i1 = i1 + -1;

        i2 = i2 % 8;

        i0 = i2 + b3;

        l5 = 0L;

        i2 = b3;

        if b3 >= i0 goto label07;

     label05:
        if i2 >= i0 goto label06;

        l5 = l5 << 8;

        b3 = $r4[i2];

        i6 = b3 & 255;

        $l7 = (long) i6;

        l5 = l5 | $l7;

        i2 = i2 + 1;

        goto label05;

     label06:
        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r3[i1] = l5;

        i1 = i1 + -1;

     label07:
        if i1 < 0 goto label10;

        l5 = 0L;

        i0 = 0;

        i6 = i2;

     label08:
        if i0 >= 8 goto label09;

        l5 = l5 << 8;

        i2 = i6 + 1;

        b3 = $r4[i6];

        i6 = b3 & 255;

        $l7 = (long) i6;

        l5 = l5 | $l7;

        i0 = i0 + 1;

        i6 = i2;

        goto label08;

     label09:
        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r3[i1] = l5;

        i1 = i1 + -1;

        i2 = i6;

        goto label07;

     label10:
        return;
    }
    public void <init>(long[])
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] $r1;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: long[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r1;

        return;
    }
    public void <init>(long[], int, int)
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 != 0 goto label1;

        $i2 = lengthof $r1;

        if $i1 != $i2 goto label1;

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r1;

        return;

     label1:
        $r2 = newarray (long)[$i1];

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r2;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, 0, $i1);

        return;
    }
    private static void add(long[], int, long[], int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4, $i6;
        long $l5, $l7;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        i4 = 0;

     label1:
        if i4 >= $i2 goto label2;

        $i3 = $i0 + i4;

        $l5 = $r0[$i3];

        $i6 = $i1 + i4;

        $l7 = $r1[$i6];

        $l5 = $l5 ^ $l7;

        $r0[$i3] = $l5;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
    private static void add(long[], int, long[], int, long[], int, int)
    {
        long[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        long $l7, $l8;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: long[];

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        i5 = 0;

     label1:
        if i5 >= $i3 goto label2;

        $i4 = $i2 + i5;

        $i6 = $i0 + i5;

        $l7 = $r0[$i6];

        $i6 = $i1 + i5;

        $l8 = $r1[$i6];

        $l7 = $l7 ^ $l8;

        $r2[$i4] = $l7;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private static void addBoth(long[], int, long[], int, long[], int, int)
    {
        long[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        long $l6, $l8, $l9;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: long[];

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        i5 = 0;

     label1:
        if i5 >= $i3 goto label2;

        $i4 = $i0 + i5;

        $l6 = $r0[$i4];

        $i7 = $i1 + i5;

        $l8 = $r1[$i7];

        $i7 = $i2 + i5;

        $l9 = $r2[$i7];

        $l8 = $l8 ^ $l9;

        $l6 = $l6 ^ $l8;

        $r0[$i4] = $l6;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private void addShiftedByBitsSafe(org.spongycastle.math.ec.LongArray, int, int)
    {
        org.spongycastle.math.ec.LongArray r0, $r1;
        int $i0, $i1, i2;
        long $l3, $l5;
        long[] $r2, $r3;
        byte $b4;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = $i0 + 63;

        i2 = $i0 >>> 6;

        $i0 = $i1 >>> 6;

        $i1 = $i1 & 63;

        if $i1 != 0 goto label1;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r3 = $r1.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,int)>($r2, $i0, $r3, 0, i2);

        return;

     label1:
        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r3 = $r1.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedUp(long[],int,long[],int,int,int)>($r2, $i0, $r3, 0, i2, $i1);

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = i2 + $i0;

        $l5 = $r2[$i0];

        $l3 = $l5 ^ $l3;

        $r2[$i0] = $l3;

     label2:
        return;
    }
    private static long addShiftedDown(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4, $i7;
        long l5, l6, $l8, $l9;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        i4 = 64 - $i3;

        l6 = 0L;

     label1:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label2;

        $i7 = $i1 + $i2;

        l5 = $r1[$i7];

        $i7 = $i0 + $i2;

        $l8 = $r0[$i7];

        $l9 = l5 >>> $i3;

        l6 = $l9 | l6;

        $l8 = $l8 ^ l6;

        $r0[$i7] = $l8;

        l6 = l5 << i4;

        goto label1;

     label2:
        return l6;
    }
    private static long addShiftedUp(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4, i7, $i8;
        long l5, l6, $l9, $l10;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        i4 = 64 - $i3;

        l6 = 0L;

        i7 = 0;

     label1:
        if i7 >= $i2 goto label2;

        $i8 = $i1 + i7;

        l5 = $r1[$i8];

        $i8 = $i0 + i7;

        $l9 = $r0[$i8];

        $l10 = l5 << $i3;

        l6 = $l10 | l6;

        $l9 = $l9 ^ l6;

        $r0[$i8] = $l9;

        l6 = l5 >>> i4;

        i7 = i7 + 1;

        goto label1;

     label2:
        return l6;
    }
    private static int bitLength(long)
    {
        long $l0, $l2;
        int i1, i3, i4;
        byte[] $r0;
        byte $b5;

        $l0 := @parameter0: long;

        $l2 = $l0 >>> 32;

        i1 = (int) $l2;

        if i1 != 0 goto label3;

        i1 = (int) $l0;

        i3 = 0;

     label1:
        i4 = i1 >>> 16;

        if i4 != 0 goto label5;

        i4 = i1 >>> 8;

        if i4 != 0 goto label4;

        $r0 = <org.spongycastle.math.ec.LongArray: byte[] bitLengths>;

        i1 = $r0[i1];

     label2:
        i3 = i3 + i1;

        return i3;

     label3:
        i3 = 32;

        goto label1;

     label4:
        $r0 = <org.spongycastle.math.ec.LongArray: byte[] bitLengths>;

        $b5 = $r0[i4];

        i1 = $b5 + 8;

        goto label2;

     label5:
        i1 = i4 >>> 8;

        if i1 != 0 goto label6;

        $r0 = <org.spongycastle.math.ec.LongArray: byte[] bitLengths>;

        $b5 = $r0[i4];

        i1 = $b5 + 16;

        goto label2;

     label6:
        $r0 = <org.spongycastle.math.ec.LongArray: byte[] bitLengths>;

        $b5 = $r0[i1];

        i1 = $b5 + 24;

        goto label2;
    }
    private int degreeFrom(int)
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0, $i3;
        long l1;
        long[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $i0 = $i0 + 62;

        $i0 = $i0 >>> 6;

     label1:
        if $i0 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = $i0 + -1;

        l1 = $r1[$i0];

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i3 = $i0 << 6;

        $i0 = staticinvoke <org.spongycastle.math.ec.LongArray: int bitLength(long)>(l1);

        $i0 = $i3 + $i0;

        return $i0;
    }
    private static void distribute(long[], int, int, int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2, $i3, i5, $i6;
        long l4, $l7;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i3 goto label2;

        $i6 = $i0 + i5;

        l4 = $r0[$i6];

        $i6 = $i1 + i5;

        $l7 = $r0[$i6];

        $l7 = $l7 ^ l4;

        $r0[$i6] = $l7;

        $i6 = $i2 + i5;

        $l7 = $r0[$i6];

        l4 = $l7 ^ l4;

        $r0[$i6] = l4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private static void flipBit(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, i3;
        long l2, $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i3 = $i1 >>> 6;

        $i1 = $i1 & 63;

        l2 = 1L << $i1;

        $i0 = $i0 + i3;

        $l4 = $r0[$i0];

        l2 = $l4 ^ l2;

        $r0[$i0] = l2;

        return;
    }
    private static void flipVector(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i5;
        long $l4, $l6;

        $r0 := @parameter0: long[];

        $i5 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 = $i2 >>> 6;

        $i5 = $i5 + $i3;

        $i3 = $i2 & 63;

        if $i3 != 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,int)>($r0, $i5, $r1, $i0, $i1);

        return;

     label1:
        $i2 = $i5 + 1;

        $i3 = 64 - $i3;

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedDown(long[],int,long[],int,int,int)>($r0, $i2, $r1, $i0, $i1, $i3);

        $l6 = $r0[$i5];

        $l4 = $l6 ^ $l4;

        $r0[$i5] = $l4;

        return;
    }
    private static void flipWord(long[], int, int, long)
    {
        long[] $r0;
        int $i0, $i1, $i4;
        long $l2, $l3, $l5;
        byte $b6;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l3 := @parameter3: long;

        $i4 = $i1 >>> 6;

        $i0 = $i0 + $i4;

        $i1 = $i1 & 63;

        if $i1 != 0 goto label1;

        $l2 = $r0[$i0];

        $l3 = $l2 ^ $l3;

        $r0[$i0] = $l3;

        return;

     label1:
        $l5 = $r0[$i0];

        $l2 = $l3 << $i1;

        $l2 = $l5 ^ $l2;

        $r0[$i0] = $l2;

        $i1 = 64 - $i1;

        $l3 = $l3 >>> $i1;

        $b6 = $l3 cmp 0L;

        if $b6 == 0 goto label2;

        $i0 = $i0 + 1;

        $l2 = $r0[$i0];

        $l3 = $l2 ^ $l3;

        $r0[$i0] = $l3;

     label2:
        return;
    }
    private static void interleave(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3;
        byte[] $r2;
        byte $b4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        lookupswitch($i3)
        {
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label3;
            case 6: goto label1;
            case 7: goto label4;
            default: goto label1;
        };

     label1:
        $r2 = <org.spongycastle.math.ec.LongArray: byte[] bitLengths>;

        $b4 = $r2[$i3];

        $i3 = $b4 + -1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void interleave2_n(long[],int,long[],int,int,int)>($r0, $i0, $r1, $i1, $i2, $i3);

        return;

     label2:
        staticinvoke <org.spongycastle.math.ec.LongArray: void interleave3(long[],int,long[],int,int)>($r0, $i0, $r1, $i1, $i2);

        return;

     label3:
        staticinvoke <org.spongycastle.math.ec.LongArray: void interleave5(long[],int,long[],int,int)>($r0, $i0, $r1, $i1, $i2);

        return;

     label4:
        staticinvoke <org.spongycastle.math.ec.LongArray: void interleave7(long[],int,long[],int,int)>($r0, $i0, $r1, $i1, $i2);

        return;
    }
    private static long interleave2_32to64(int)
    {
        int $i0, i1, $i4;
        short[] $r0;
        short $s2, $s3;
        long $l5, $l6;

        $i0 := @parameter0: int;

        $r0 = <org.spongycastle.math.ec.LongArray: short[] INTERLEAVE2_TABLE>;

        i1 = $i0 & 255;

        $s2 = $r0[i1];

        $r0 = <org.spongycastle.math.ec.LongArray: short[] INTERLEAVE2_TABLE>;

        i1 = $i0 >>> 8;

        i1 = i1 & 255;

        $s3 = $r0[i1];

        i1 = $s3 << 16;

        i1 = $s2 | i1;

        $r0 = <org.spongycastle.math.ec.LongArray: short[] INTERLEAVE2_TABLE>;

        $i4 = $i0 >>> 16;

        $i4 = $i4 & 255;

        $s2 = $r0[$i4];

        $r0 = <org.spongycastle.math.ec.LongArray: short[] INTERLEAVE2_TABLE>;

        $i0 = $i0 >>> 24;

        $s3 = $r0[$i0];

        $i0 = $s3 << 16;

        $i0 = $s2 | $i0;

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 << 32;

        $l6 = (long) i1;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 | $l6;

        return $l5;
    }
    private static long interleave2_n(long, int)
    {
        long $l0, $l3, $l4;
        int $i1, $i2;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

     label1:
        if $i1 <= 1 goto label2;

        $i1 = $i1 + -2;

        $i2 = (int) $l0;

        $i2 = $i2 & 65535;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave4_16to64(int)>($i2);

        $l4 = $l0 >>> 16;

        $i2 = (int) $l4;

        $i2 = $i2 & 65535;

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave4_16to64(int)>($i2);

        $l4 = $l4 << 1;

        $l3 = $l3 | $l4;

        $l4 = $l0 >>> 32;

        $i2 = (int) $l4;

        $i2 = $i2 & 65535;

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave4_16to64(int)>($i2);

        $l4 = $l4 << 2;

        $l3 = $l3 | $l4;

        $l0 = $l0 >>> 48;

        $i2 = (int) $l0;

        $i2 = $i2 & 65535;

        $l0 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave4_16to64(int)>($i2);

        $l0 = $l0 << 3;

        $l0 = $l3 | $l0;

        goto label1;

     label2:
        if $i1 <= 0 goto label3;

        $i1 = (int) $l0;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i1);

        $l0 = $l0 >>> 32;

        $i1 = (int) $l0;

        $l0 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i1);

        $l0 = $l0 << 1;

        $l0 = $l3 | $l0;

     label3:
        return $l0;
    }
    private static void interleave2_n(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, i6, $i7;
        long $l5;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $i4 = $i1 + i6;

        $i7 = $i0 + i6;

        $l5 = $r0[$i7];

        $l5 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_n(long,int)>($l5, $i3);

        $r1[$i4] = $l5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }
    private static long interleave3(long)
    {
        long $l0, l1, $l3;
        int $i2;

        $l0 := @parameter0: long;

        l1 = $l0 & -9223372036854775808L;

        $i2 = (int) $l0;

        $i2 = $i2 & 2097151;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_21to63(int)>($i2);

        l1 = $l3 | l1;

        $l3 = $l0 >>> 21;

        $i2 = (int) $l3;

        $i2 = $i2 & 2097151;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_21to63(int)>($i2);

        $l3 = $l3 << 1;

        l1 = l1 | $l3;

        $l0 = $l0 >>> 42;

        $i2 = (int) $l0;

        $i2 = $i2 & 2097151;

        $l0 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_21to63(int)>($i2);

        $l0 = $l0 << 2;

        $l0 = l1 | $l0;

        return $l0;
    }
    private static void interleave3(long[], int, long[], int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i5, $i6;
        long $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $i3 = $i1 + i5;

        $i6 = $i0 + i5;

        $l4 = $r0[$i6];

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3(long)>($l4);

        $r1[$i3] = $l4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private static long interleave3_13to65(int)
    {
        int $i0, i1;
        int[] $r0;
        long $l2, $l3;

        $i0 := @parameter0: int;

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE5_TABLE>;

        i1 = $i0 & 127;

        i1 = $r0[i1];

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE5_TABLE>;

        $i0 = $i0 >>> 7;

        $i0 = $r0[$i0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 35;

        $l3 = (long) i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    private static long interleave3_21to63(int)
    {
        int $i0, i1, i2;
        int[] $r0;
        long $l3, $l4;

        $i0 := @parameter0: int;

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE3_TABLE>;

        i1 = $i0 & 127;

        i1 = $r0[i1];

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE3_TABLE>;

        i2 = $i0 >>> 7;

        i2 = i2 & 127;

        i2 = $r0[i2];

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE3_TABLE>;

        $i0 = $i0 >>> 14;

        $i0 = $r0[$i0];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l3 = $l3 << 42;

        $l4 = (long) i2;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 << 21;

        $l3 = $l3 | $l4;

        $l4 = (long) i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 | $l4;

        return $l3;
    }
    private static long interleave4_16to64(int)
    {
        int $i0, i1;
        int[] $r0;
        long $l2, $l3;

        $i0 := @parameter0: int;

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE4_TABLE>;

        i1 = $i0 & 255;

        i1 = $r0[i1];

        $r0 = <org.spongycastle.math.ec.LongArray: int[] INTERLEAVE4_TABLE>;

        $i0 = $i0 >>> 8;

        $i0 = $r0[$i0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 32;

        $l3 = (long) i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    private static long interleave5(long)
    {
        long $l0, $l2, $l3;
        int $i1;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $i1 = $i1 & 8191;

        $l2 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_13to65(int)>($i1);

        $l3 = $l0 >>> 13;

        $i1 = (int) $l3;

        $i1 = $i1 & 8191;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_13to65(int)>($i1);

        $l3 = $l3 << 1;

        $l2 = $l2 | $l3;

        $l3 = $l0 >>> 26;

        $i1 = (int) $l3;

        $i1 = $i1 & 8191;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_13to65(int)>($i1);

        $l3 = $l3 << 2;

        $l2 = $l2 | $l3;

        $l3 = $l0 >>> 39;

        $i1 = (int) $l3;

        $i1 = $i1 & 8191;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_13to65(int)>($i1);

        $l3 = $l3 << 3;

        $l2 = $l2 | $l3;

        $l0 = $l0 >>> 52;

        $i1 = (int) $l0;

        $i1 = $i1 & 8191;

        $l0 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave3_13to65(int)>($i1);

        $l0 = $l0 << 4;

        $l0 = $l2 | $l0;

        return $l0;
    }
    private static void interleave5(long[], int, long[], int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i5, $i6;
        long $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $i3 = $i1 + i5;

        $i6 = $i0 + i5;

        $l4 = $r0[$i6];

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave5(long)>($l4);

        $r1[$i3] = $l4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private static long interleave7(long)
    {
        long $l0, l1, $l3;
        long[] $r0;
        int $i2;

        $l0 := @parameter0: long;

        l1 = $l0 & -9223372036854775808L;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $i2 = (int) $l0;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        l1 = $l3 | l1;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l3 = $l0 >>> 9;

        $i2 = (int) $l3;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        $l3 = $l3 << 1;

        l1 = l1 | $l3;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l3 = $l0 >>> 18;

        $i2 = (int) $l3;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        $l3 = $l3 << 2;

        l1 = l1 | $l3;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l3 = $l0 >>> 27;

        $i2 = (int) $l3;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        $l3 = $l3 << 3;

        l1 = l1 | $l3;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l3 = $l0 >>> 36;

        $i2 = (int) $l3;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        $l3 = $l3 << 4;

        l1 = l1 | $l3;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l3 = $l0 >>> 45;

        $i2 = (int) $l3;

        $i2 = $i2 & 511;

        $l3 = $r0[$i2];

        $l3 = $l3 << 5;

        l1 = l1 | $l3;

        $r0 = <org.spongycastle.math.ec.LongArray: long[] INTERLEAVE7_TABLE>;

        $l0 = $l0 >>> 54;

        $i2 = (int) $l0;

        $i2 = $i2 & 511;

        $l0 = $r0[$i2];

        $l0 = $l0 << 6;

        $l0 = l1 | $l0;

        return $l0;
    }
    private static void interleave7(long[], int, long[], int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i5, $i6;
        long $l4;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $i3 = $i1 + i5;

        $i6 = $i0 + i5;

        $l4 = $r0[$i6];

        $l4 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave7(long)>($l4);

        $r1[$i3] = $l4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private static void multiplyWord(long, long[], int, long[], int)
    {
        long[] $r0, $r1;
        int $i0, $i1, i5, $i6;
        long $l2, $l3, $l7;
        byte $b4;

        $l3 := @parameter0: long;

        $r0 := @parameter1: long[];

        $i0 := @parameter2: int;

        $r1 := @parameter3: long[];

        $i1 := @parameter4: int;

        $l2 = 1L & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,int)>($r1, $i1, $r0, 0, $i0);

     label1:
        i5 = 1;

     label2:
        $l3 = $l3 >>> 1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l2 = 1L & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label3;

        $l2 = staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedUp(long[],int,long[],int,int,int)>($r1, $i1, $r0, 0, $i0, i5);

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label3;

        $i6 = $i1 + $i0;

        $l7 = $r1[$i6];

        $l2 = $l7 ^ $l2;

        $r1[$i6] = $l2;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return;
    }
    private static void reduceBit(long[], int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        staticinvoke <org.spongycastle.math.ec.LongArray: void flipBit(long[],int,int)>($r0, $i0, $i1);

        $i1 = $i1 - $i2;

        $i2 = lengthof $r1;

     label1:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label2;

        $i3 = $r1[$i2];

        $i3 = $i3 + $i1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void flipBit(long[],int,int)>($r0, $i0, $i3);

        goto label1;

     label2:
        staticinvoke <org.spongycastle.math.ec.LongArray: void flipBit(long[],int,int)>($r0, $i0, $i1);

        return;
    }
    private static void reduceBitWise(long[], int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        boolean $z0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: int[];

     label1:
        $i2 = $i2 + -1;

        if $i2 < $i1 goto label2;

        $z0 = staticinvoke <org.spongycastle.math.ec.LongArray: boolean testBit(long[],int,int)>($r0, $i0, $i2);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceBit(long[],int,int,int,int[])>($r0, $i0, $i2, $i1, $r1);

        goto label1;

     label2:
        return;
    }
    private static int reduceInPlace(long[], int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        int[] $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i5 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i6 = $i1 + 63;

        $i6 = $i6 >>> 6;

        if $i5 >= $i6 goto label01;

        return $i5;

     label01:
        i2 = $i5 << 6;

        i4 = $i1 << 1;

        i4 = i4 + -1;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i4);

        i2 = $i7;

        i4 = $i5 << 6;

        i4 = i4 - $i7;

     label02:
        if i4 < 64 goto label03;

        $i5 = $i5 + -1;

        i4 = i4 + -64;

        goto label02;

     label03:
        $i8 = lengthof $r1;

        i3 = $i8 + -1;

        i3 = $r1[i3];

        if $i8 <= 1 goto label06;

        $i8 = $i8 + -2;

        $i8 = $r1[$i8];

     label04:
        i3 = i3 + 64;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, i3);

        $i7 = $i7 - i3;

        $i8 = $i1 - $i8;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8);

        i4 = $i7 + i4;

        i4 = i4 >> 6;

        if i4 <= 1 goto label08;

        i2 = $i5 - i4;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceVectorWise(long[],int,int,int,int,int[])>($r0, $i0, $i5, i2, $i1, $r1);

     label05:
        if $i5 <= i2 goto label07;

        $i5 = $i5 + -1;

        i4 = $i0 + $i5;

        $r0[i4] = 0L;

        goto label05;

     label06:
        $i8 = 0;

        goto label04;

     label07:
        i2 = i2 << 6;

     label08:
        if i2 <= i3 goto label09;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceWordWise(long[],int,int,int,int,int[])>($r0, $i0, $i5, i3, $i1, $r1);

        i2 = i3;

     label09:
        if i2 <= $i1 goto label10;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceBitWise(long[],int,int,int,int[])>($r0, $i0, i2, $i1, $r1);

     label10:
        return $i6;
    }
    private static org.spongycastle.math.ec.LongArray reduceResult(long[], int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        org.spongycastle.math.ec.LongArray $r2;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i1 = staticinvoke <org.spongycastle.math.ec.LongArray: int reduceInPlace(long[],int,int,int,int[])>($r0, $i0, $i1, $i2, $r1);

        $r2 = new org.spongycastle.math.ec.LongArray;

        specialinvoke $r2.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>($r0, $i0, $i1);

        return $r2;
    }
    private static void reduceVectorWise(long[], int, int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: int[];

        $i4 = $i2 << 6;

        $i3 = $i4 - $i3;

        $i4 = lengthof $r1;

     label1:
        $i4 = $i4 + -1;

        if $i4 < 0 goto label2;

        $i5 = $i0 + $i2;

        $i6 = $i1 - $i2;

        $i7 = $r1[$i4];

        $i7 = $i3 + $i7;

        staticinvoke <org.spongycastle.math.ec.LongArray: void flipVector(long[],int,long[],int,int,int)>($r0, $i0, $r0, $i5, $i6, $i7);

        goto label1;

     label2:
        $i4 = $i0 + $i2;

        $i1 = $i1 - $i2;

        staticinvoke <org.spongycastle.math.ec.LongArray: void flipVector(long[],int,long[],int,int,int)>($r0, $i0, $r0, $i4, $i1, $i3);

        return;
    }
    private static void reduceWord(long[], int, int, long, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i3, $i4;
        long $l2;
        int[] $r1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        $i3 := @parameter4: int;

        $r1 := @parameter5: int[];

        $i1 = $i1 - $i3;

        $i3 = lengthof $r1;

     label1:
        $i3 = $i3 + -1;

        if $i3 < 0 goto label2;

        $i4 = $r1[$i3];

        $i4 = $i4 + $i1;

        staticinvoke <org.spongycastle.math.ec.LongArray: void flipWord(long[],int,int,long)>($r0, $i0, $i4, $l2);

        goto label1;

     label2:
        staticinvoke <org.spongycastle.math.ec.LongArray: void flipWord(long[],int,int,long)>($r0, $i0, $i1, $l2);

        return;
    }
    private static void reduceWordWise(long[], int, int, int, int, int[])
    {
        long[] $r0;
        int $i0, $i1, $i2, i3, i4, $i5;
        int[] $r1;
        long l6, $l8, $l9;
        byte $b7;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r1 := @parameter5: int[];

        i4 = $i1 >>> 6;

     label1:
        i3 = i3 + -1;

        if i3 <= i4 goto label2;

        $i5 = $i0 + i3;

        l6 = $r0[$i5];

        $b7 = l6 cmp 0L;

        if $b7 == 0 goto label1;

        $i5 = $i0 + i3;

        $r0[$i5] = 0L;

        $i5 = i3 << 6;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceWord(long[],int,int,long,int,int[])>($r0, $i0, $i5, l6, $i2, $r1);

        goto label1;

     label2:
        i3 = $i1 & 63;

        $i5 = $i0 + i4;

        l6 = $r0[$i5];

        l6 = l6 >>> i3;

        $b7 = l6 cmp 0L;

        if $b7 == 0 goto label3;

        i4 = $i0 + i4;

        $l8 = $r0[i4];

        $l9 = l6 << i3;

        $l8 = $l8 ^ $l9;

        $r0[i4] = $l8;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceWord(long[],int,int,long,int,int[])>($r0, $i0, $i1, l6, $i2, $r1);

     label3:
        return;
    }
    private long[] resizedInts(int)
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0, $i1;
        long[] r1, $r2, $r3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        r1 = newarray (long)[$i0];

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i1 = lengthof $r3;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    private static long shiftUp(long[], int, int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2, i3, i6, $i7;
        long l4, l5, $l8;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = 64 - $i2;

        l5 = 0L;

        i6 = 0;

     label1:
        if i6 >= $i1 goto label2;

        $i7 = $i0 + i6;

        l4 = $r0[$i7];

        $i7 = $i0 + i6;

        $l8 = l4 << $i2;

        l5 = $l8 | l5;

        $r0[$i7] = l5;

        l5 = l4 >>> i3;

        i6 = i6 + 1;

        goto label1;

     label2:
        return l5;
    }
    private static long shiftUp(long[], int, long[], int, int, int)
    {
        long[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4, i7, $i8;
        long l5, l6, $l9;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: long[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        i4 = 64 - $i3;

        l6 = 0L;

        i7 = 0;

     label1:
        if i7 >= $i2 goto label2;

        $i8 = $i0 + i7;

        l5 = $r0[$i8];

        $i8 = $i1 + i7;

        $l9 = l5 << $i3;

        l6 = $l9 | l6;

        $r1[$i8] = l6;

        l6 = l5 >>> i4;

        i7 = i7 + 1;

        goto label1;

     label2:
        return l6;
    }
    private static void squareInPlace(long[], int, int, int[])
    {
        long[] $r0;
        int $i0, $i2, $i4;
        int[] $r1;
        long l1, $l3;

        $r0 := @parameter0: long[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i0 = $i2 << 1;

     label1:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label2;

        l1 = $r0[$i2];

        $i0 = $i0 + -1;

        $l3 = l1 >>> 32;

        $i4 = (int) $l3;

        $l3 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i4);

        $r0[$i0] = $l3;

        $i0 = $i0 + -1;

        $i4 = (int) l1;

        l1 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i4);

        $r0[$i0] = l1;

        goto label1;

     label2:
        return;
    }
    private static boolean testBit(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, i3;
        long l2, $l4;
        byte $b5;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i3 = $i1 >>> 6;

        $i1 = $i1 & 63;

        l2 = 1L << $i1;

        $i0 = $i0 + i3;

        $l4 = $r0[$i0];

        l2 = $l4 & l2;

        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.spongycastle.math.ec.LongArray addOne()
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        r0 = new org.spongycastle.math.ec.LongArray;

        $r1 = newarray (long)[1];

        $r1[0] = 1L;

        specialinvoke r0.<org.spongycastle.math.ec.LongArray: void <init>(long[])>($r1);

        return r0;

     label1:
        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        $r1 = specialinvoke r0.<org.spongycastle.math.ec.LongArray: long[] resizedInts(int)>($i0);

        $l1 = $r1[0];

        $l1 = $l1 ^ 1L;

        $r1[0] = $l1;

        r0 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r0.<org.spongycastle.math.ec.LongArray: void <init>(long[])>($r1);

        return r0;
    }
    public void addShiftedByWords(org.spongycastle.math.ec.LongArray, int)
    {
        org.spongycastle.math.ec.LongArray r0, $r1;
        int $i0, i1, $i2, $i3;
        long[] $r2, $r3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $i2 = virtualinvoke $r1.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if $i2 != 0 goto label1;

        return;

     label1:
        i1 = $i2 + $i0;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i3 = lengthof $r2;

        if i1 <= $i3 goto label2;

        $r2 = specialinvoke r0.<org.spongycastle.math.ec.LongArray: long[] resizedInts(int)>(i1);

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r2;

     label2:
        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r2 = $r1.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,int)>($r3, $i0, $r2, 0, $i2);

        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.math.ec.LongArray r0, $r1;
        long[] $r2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = new org.spongycastle.math.ec.LongArray;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[])>($r2);

        specialinvoke $r1.<org.spongycastle.math.ec.LongArray: void <init>(long[])>($r2);

        return $r1;
    }
    public int degree()
    {
        org.spongycastle.math.ec.LongArray r0;
        long l0;
        int $i1, $i3;
        long[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i1 = lengthof $r1;

     label1:
        if $i1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i1 = $i1 + -1;

        l0 = $r1[$i1];

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label1;

        $i3 = $i1 << 6;

        $i1 = staticinvoke <org.spongycastle.math.ec.LongArray: int bitLength(long)>(l0);

        $i1 = $i3 + $i1;

        return $i1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.ec.LongArray r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;
        long[] $r3;
        long $l2, $l3;
        byte $b4;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.math.ec.LongArray;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.math.ec.LongArray) $r1;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        $i1 = virtualinvoke r2.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if $i1 != $i0 goto label4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l2 = $r3[$i1];

        $r3 = r2.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l3 = $r3[$i1];

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public int getLength()
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public int getUsedLength()
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0;
        long[] $r1;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLengthFrom(int)>($i0);

        return $i0;
    }
    public int getUsedLengthFrom(int)
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] r1;
        int $i0, $i1;
        long $l2;
        byte $b3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i1 = lengthof r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = $i0;

        if $i0 >= 1 goto label1;

        return 0;

     label1:
        $l2 = r1[0];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

     label2:
        $i1 = $i1 + -1;

        $l2 = r1[$i1];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        $i0 = $i1 + 1;

        return $i0;

     label3:
        $i1 = $i1 + -1;

        $l2 = r1[$i1];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label4;

        $i0 = $i1 + 1;

        return $i0;

     label4:
        if $i1 > 0 goto label3;

        return 0;
    }
    public int hashCode()
    {
        org.spongycastle.math.ec.LongArray r0;
        long l0;
        int $i1, i2, i3, $i4;
        long[] $r1;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i1 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        i2 = 1;

        i3 = 0;

     label1:
        if i3 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l0 = $r1[i3];

        i2 = i2 * 31;

        $i4 = (int) l0;

        i2 = i2 ^ $i4;

        i2 = i2 * 31;

        l0 = l0 >>> 32;

        $i4 = (int) l0;

        i2 = i2 ^ $i4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }
    public boolean isOne()
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] r1;
        long $l0;
        byte $b1;
        int i2, $i3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l0 = r1[0];

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label1;

        return 0;

     label1:
        i2 = 1;

     label2:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label3;

        $l0 = r1[i2];

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label4;

        i2 = i2 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public boolean isZero()
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] r1;
        int i0, $i1;
        long $l2;
        byte $b3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $l2 = r1[i0];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public org.spongycastle.math.ec.LongArray modInverse(int, int[])
    {
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r9;
        org.spongycastle.math.ec.LongArray r1, r2, r4, r7;
        org.spongycastle.math.ec.LongArray[] r3, $r10;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r6;
        long[] $r8;

        r1 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i2 = virtualinvoke r1.<org.spongycastle.math.ec.LongArray: int degree()>();

        if $i2 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if $i2 != 1 goto label2;

        return r1;

     label2:
        $r6 = virtualinvoke r1.<org.spongycastle.math.ec.LongArray: java.lang.Object clone()>();

        r7 = (org.spongycastle.math.ec.LongArray) $r6;

        i1 = $i0 + 63;

        i1 = i1 >>> 6;

        r4 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r4.<org.spongycastle.math.ec.LongArray: void <init>(int)>(i1);

        $r8 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void reduceBit(long[],int,int,int,int[])>($r8, 0, $i0, $i0, $r0);

        r1 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r1.<org.spongycastle.math.ec.LongArray: void <init>(int)>(i1);

        $r8 = r1.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r8[0] = 1L;

        r2 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r2.<org.spongycastle.math.ec.LongArray: void <init>(int)>(i1);

        $r9 = newarray (int)[2];

        $r9[0] = $i2;

        $i0 = $i0 + 1;

        $r9[1] = $i0;

        $r10 = newarray (org.spongycastle.math.ec.LongArray)[2];

        $r10[0] = r7;

        $r10[1] = r4;

        $r0 = newarray (int)[2];

        $r0[0] = 1;

        $r0[1] = 0;

        r3 = newarray (org.spongycastle.math.ec.LongArray)[2];

        r3[0] = r1;

        r3[1] = r2;

        $i0 = 1;

        $i2 = $r9[1];

        i1 = $r0[1];

        $i3 = $r9[0];

        $i3 = $i2 - $i3;

     label3:
        if $i3 >= 0 goto label4;

        $i3 = neg $i3;

        $r9[$i0] = $i2;

        $r0[$i0] = i1;

        $i0 = 1 - $i0;

        $i2 = $r9[$i0];

        i1 = $r0[$i0];

     label4:
        r1 = $r10[$i0];

        $i4 = 1 - $i0;

        r2 = $r10[$i4];

        $i4 = 1 - $i0;

        $i4 = $r9[$i4];

        specialinvoke r1.<org.spongycastle.math.ec.LongArray: void addShiftedByBitsSafe(org.spongycastle.math.ec.LongArray,int,int)>(r2, $i4, $i3);

        r1 = $r10[$i0];

        $i4 = specialinvoke r1.<org.spongycastle.math.ec.LongArray: int degreeFrom(int)>($i2);

        if $i4 != 0 goto label5;

        $i0 = 1 - $i0;

        r1 = r3[$i0];

        return r1;

     label5:
        $i5 = 1 - $i0;

        $i5 = $r0[$i5];

        r1 = r3[$i0];

        $i6 = 1 - $i0;

        r2 = r3[$i6];

        specialinvoke r1.<org.spongycastle.math.ec.LongArray: void addShiftedByBitsSafe(org.spongycastle.math.ec.LongArray,int,int)>(r2, $i5, $i3);

        $i5 = $i5 + $i3;

        if $i5 <= i1 goto label7;

        i1 = $i5;

     label6:
        $i2 = $i4 - $i2;

        $i3 = $i3 + $i2;

        $i2 = $i4;

        goto label3;

     label7:
        if $i5 != i1 goto label6;

        r1 = r3[$i0];

        i1 = specialinvoke r1.<org.spongycastle.math.ec.LongArray: int degreeFrom(int)>(i1);

        goto label6;
    }
    public org.spongycastle.math.ec.LongArray modMultiply(org.spongycastle.math.ec.LongArray, int, int[])
    {
        org.spongycastle.math.ec.LongArray $r0, r3, r4, r5;
        int $i0, i2, i3, i4, i5, i6, i7, $i9;
        int[] $r1, $r7;
        long l1;
        long[] r2, $r6, $r8, $r9;
        byte $b8;

        r3 := @this: org.spongycastle.math.ec.LongArray;

        $r0 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        i4 = virtualinvoke r3.<org.spongycastle.math.ec.LongArray: int degree()>();

        i5 = i4;

        if i4 != 0 goto label01;

        return r3;

     label01:
        i2 = virtualinvoke $r0.<org.spongycastle.math.ec.LongArray: int degree()>();

        i3 = i2;

        if i2 != 0 goto label02;

        return $r0;

     label02:
        r4 = r3;

        r5 = $r0;

        if i4 <= i2 goto label03;

        r4 = $r0;

        r5 = r3;

        i5 = i2;

        i3 = i4;

     label03:
        i4 = i5 + 63;

        i4 = i4 >>> 6;

        i2 = i3 + 63;

        i2 = i2 >>> 6;

        i5 = i5 + i3;

        i5 = i5 + 62;

        i5 = i5 >>> 6;

        if i4 != 1 goto label05;

        r2 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l1 = r2[0];

        $b8 = l1 cmp 1L;

        if $b8 != 0 goto label04;

        return r5;

     label04:
        r2 = newarray (long)[i5];

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void multiplyWord(long,long[],int,long[],int)>(l1, $r6, i2, r2, 0);

        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>(r2, 0, i5, $i0, $r1);

        return r3;

     label05:
        i3 = i3 + 7;

        i3 = i3 + 63;

        i3 = i3 >>> 6;

        $r7 = newarray (int)[16];

        $i9 = i3 << 4;

        r2 = newarray (long)[$i9];

        $i9 = i3;

        $r7[1] = i3;

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i3, i2);

        i2 = 2;

     label06:
        if i2 >= 16 goto label09;

        $i9 = $i9 + i3;

        $r7[i2] = $i9;

        i6 = i2 & 1;

        if i6 != 0 goto label08;

        i6 = $i9 >>> 1;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, i6, r2, $i9, i3, 1);

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        i6 = $i9 - i3;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,long[],int,int)>(r2, i3, r2, i6, r2, $i9, i3);

        goto label07;

     label09:
        i2 = lengthof r2;

        $r6 = newarray (long)[i2];

        i2 = lengthof r2;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, 0, $r6, 0, i2, 4);

        $r8 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        i2 = i5 << 3;

        $r9 = newarray (long)[i2];

        i2 = 0;

     label10:
        if i2 >= i4 goto label13;

        l1 = $r8[i2];

        $i9 = i2;

     label11:
        i6 = (int) l1;

        i6 = i6 & 15;

        l1 = l1 >>> 4;

        i7 = (int) l1;

        i7 = i7 & 15;

        i6 = $r7[i6];

        i7 = $r7[i7];

        staticinvoke <org.spongycastle.math.ec.LongArray: void addBoth(long[],int,long[],int,long[],int,int)>($r9, $i9, r2, i6, $r6, i7, i3);

        l1 = l1 >>> 4;

        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label12;

        i2 = i2 + 1;

        goto label10;

     label12:
        $i9 = $i9 + i5;

        goto label11;

     label13:
        i4 = lengthof $r9;

     label14:
        i4 = i4 - i5;

        if i4 == 0 goto label15;

        i3 = i4 - i5;

        staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedUp(long[],int,long[],int,int,int)>($r9, i3, $r9, i4, i5, 8);

        goto label14;

     label15:
        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>($r9, 0, i5, $i0, $r1);

        return r3;
    }
    public org.spongycastle.math.ec.LongArray modMultiplyAlt(org.spongycastle.math.ec.LongArray, int, int[])
    {
        org.spongycastle.math.ec.LongArray $r0, r3, r4, r5;
        int $i0, i2, i3, i4, i5, i6, i7, i9, i10, $i11, i12;
        int[] $r1, $r7;
        long l1;
        long[] r2, $r6;
        byte $b8;

        r3 := @this: org.spongycastle.math.ec.LongArray;

        $r0 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        i3 = virtualinvoke r3.<org.spongycastle.math.ec.LongArray: int degree()>();

        i5 = i3;

        if i3 != 0 goto label01;

        return r3;

     label01:
        i6 = virtualinvoke $r0.<org.spongycastle.math.ec.LongArray: int degree()>();

        i4 = i6;

        if i6 != 0 goto label02;

        return $r0;

     label02:
        r4 = r3;

        r5 = $r0;

        if i3 <= i6 goto label03;

        r4 = $r0;

        r5 = r3;

        i5 = i6;

        i4 = i3;

     label03:
        i3 = i5 + 63;

        i3 = i3 >>> 6;

        i6 = i4 + 63;

        i2 = i6 >>> 6;

        i5 = i5 + i4;

        i5 = i5 + 62;

        i5 = i5 >>> 6;

        if i3 != 1 goto label05;

        r2 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l1 = r2[0];

        $b8 = l1 cmp 1L;

        if $b8 != 0 goto label04;

        return r5;

     label04:
        r2 = newarray (long)[i5];

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void multiplyWord(long,long[],int,long[],int)>(l1, $r6, i2, r2, 0);

        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>(r2, 0, i5, $i0, $r1);

        return r3;

     label05:
        goto label08;

     label06:
        i4 = i4 + 15;

        i4 = i4 + 63;

        i4 = i4 >>> 6;

        i6 = i4 * 8;

        $r7 = newarray (int)[16];

        $r7[0] = i3;

        i9 = i3 + i6;

        $r7[1] = i9;

        i10 = 2;

     label07:
        $i11 = lengthof $r7;

        if i10 >= $i11 goto label09;

        i9 = i9 + i5;

        $r7[i10] = i9;

        i10 = i10 + 1;

        goto label07;

     label08:
        goto label06;

     label09:
        i9 = i9 + i5;

        i9 = i9 + 1;

        r2 = newarray (long)[i9];

        $r6 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void interleave(long[],int,long[],int,int,int)>($r6, 0, r2, 0, i3, 4);

        i9 = i3;

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i3, i2);

        i2 = 1;

     label10:
        if i2 >= 8 goto label11;

        i9 = i9 + i4;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, i3, r2, i9, i4, i2);

        i2 = i2 + 1;

        goto label10;

     label11:
        i2 = 16 + -1;

        i9 = 0;

     label12:
        i10 = 0;

     label13:
        l1 = r2[i10];

        l1 = l1 >>> i9;

        $i11 = 0;

        i12 = i3;

     label14:
        i7 = (int) l1;

        i7 = i7 & i2;

        if i7 == 0 goto label15;

        i7 = $r7[i7];

        i7 = i7 + i10;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,int)>(r2, i7, r2, i12, i4);

     label15:
        $i11 = $i11 + 1;

        if $i11 != 8 goto label17;

        i10 = i10 + 1;

        if i10 < i3 goto label13;

        i9 = i9 + 32;

        if i9 < 64 goto label19;

        if i9 < 64 goto label18;

        i3 = lengthof $r7;

     label16:
        i3 = i3 + -1;

        if i3 <= 1 goto label21;

        l1 = (long) i3;

        l1 = l1 & 1L;

        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label20;

        i4 = i3 >>> 1;

        i6 = $r7[i4];

        i4 = $r7[i3];

        staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedUp(long[],int,long[],int,int,int)>(r2, i6, r2, i4, i5, 16);

        goto label16;

     label17:
        i12 = i12 + i4;

        l1 = l1 >>> 4;

        goto label14;

     label18:
        i9 = 64 - 4;

        i10 = i2 << 4;

        i2 = i2 & i10;

     label19:
        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,int,int)>(r2, i3, i6, 8);

        goto label12;

     label20:
        i4 = $r7[i3];

        i6 = i3 + -1;

        i6 = $r7[i6];

        i2 = $r7[1];

        staticinvoke <org.spongycastle.math.ec.LongArray: void distribute(long[],int,int,int,int)>(r2, i4, i6, i2, i5);

        goto label16;

     label21:
        i3 = $r7[1];

        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>(r2, i3, i5, $i0, $r1);

        return r3;
    }
    public org.spongycastle.math.ec.LongArray modMultiplyLD(org.spongycastle.math.ec.LongArray, int, int[])
    {
        org.spongycastle.math.ec.LongArray $r0, r3, r4, r5;
        int $i0, i2, i3, i4, i5, $i7, $i8, $i9, i10;
        int[] $r1, $r7;
        long l1;
        long[] r2, $r6, $r8, $r9;
        byte $b6;

        r3 := @this: org.spongycastle.math.ec.LongArray;

        $r0 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        i4 = virtualinvoke r3.<org.spongycastle.math.ec.LongArray: int degree()>();

        i5 = i4;

        if i4 != 0 goto label01;

        return r3;

     label01:
        i2 = virtualinvoke $r0.<org.spongycastle.math.ec.LongArray: int degree()>();

        i3 = i2;

        if i2 != 0 goto label02;

        return $r0;

     label02:
        r4 = r3;

        r5 = $r0;

        if i4 <= i2 goto label03;

        r4 = $r0;

        r5 = r3;

        i5 = i2;

        i3 = i4;

     label03:
        i4 = i5 + 63;

        i4 = i4 >>> 6;

        i2 = i3 + 63;

        i2 = i2 >>> 6;

        i5 = i5 + i3;

        i5 = i5 + 62;

        i5 = i5 >>> 6;

        if i4 != 1 goto label05;

        r2 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l1 = r2[0];

        $b6 = l1 cmp 1L;

        if $b6 != 0 goto label04;

        return r5;

     label04:
        r2 = newarray (long)[i5];

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void multiplyWord(long,long[],int,long[],int)>(l1, $r6, i2, r2, 0);

        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>(r2, 0, i5, $i0, $r1);

        return r3;

     label05:
        i3 = i3 + 7;

        i3 = i3 + 63;

        i3 = i3 >>> 6;

        $r7 = newarray (int)[16];

        $i7 = i3 << 4;

        r2 = newarray (long)[$i7];

        $i7 = i3;

        $r7[1] = i3;

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i3, i2);

        i2 = 2;

     label06:
        if i2 >= 16 goto label09;

        $i7 = $i7 + i3;

        $r7[i2] = $i7;

        $i8 = i2 & 1;

        if $i8 != 0 goto label08;

        $i8 = $i7 >>> 1;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, $i8, r2, $i7, i3, 1);

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        $i8 = $i7 - i3;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,long[],int,int)>(r2, i3, r2, $i8, r2, $i7, i3);

        goto label07;

     label09:
        i2 = lengthof r2;

        $r6 = newarray (long)[i2];

        i2 = lengthof r2;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, 0, $r6, 0, i2, 4);

        $r8 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r9 = newarray (long)[i5];

        i2 = 56;

     label10:
        if i2 < 0 goto label13;

        $i7 = 1;

     label11:
        if $i7 >= i4 goto label12;

        l1 = $r8[$i7];

        l1 = l1 >>> i2;

        $i9 = (int) l1;

        $i8 = $i9 & 15;

        $i9 = $i9 >>> 4;

        i10 = $i9 & 15;

        $i9 = $i7 + -1;

        $i8 = $r7[$i8];

        i10 = $r7[i10];

        staticinvoke <org.spongycastle.math.ec.LongArray: void addBoth(long[],int,long[],int,long[],int,int)>($r9, $i9, r2, $i8, $r6, i10, i3);

        $i7 = $i7 + 2;

        goto label11;

     label12:
        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,int,int)>($r9, 0, i5, 8);

        i2 = i2 + -8;

        goto label10;

     label13:
        i2 = 56;

     label14:
        if i2 < 0 goto label18;

        $i7 = 0;

     label15:
        if $i7 >= i4 goto label16;

        l1 = $r8[$i7];

        l1 = l1 >>> i2;

        $i9 = (int) l1;

        $i8 = $i9 & 15;

        $i9 = $i9 >>> 4;

        $i9 = $i9 & 15;

        $i8 = $r7[$i8];

        $i9 = $r7[$i9];

        staticinvoke <org.spongycastle.math.ec.LongArray: void addBoth(long[],int,long[],int,long[],int,int)>($r9, $i7, r2, $i8, $r6, $i9, i3);

        $i7 = $i7 + 2;

        goto label15;

     label16:
        if i2 <= 0 goto label17;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,int,int)>($r9, 0, i5, 8);

     label17:
        i2 = i2 + -8;

        goto label14;

     label18:
        r3 = staticinvoke <org.spongycastle.math.ec.LongArray: org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[])>($r9, 0, i5, $i0, $r1);

        return r3;
    }
    public org.spongycastle.math.ec.LongArray modReduce(int, int[])
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0, $i1;
        int[] $r1;
        long[] $r2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[])>($r2);

        $i1 = lengthof $r2;

        $i0 = staticinvoke <org.spongycastle.math.ec.LongArray: int reduceInPlace(long[],int,int,int,int[])>($r2, 0, $i1, $i0, $r1);

        r0 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r0.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>($r2, 0, $i0);

        return r0;
    }
    public org.spongycastle.math.ec.LongArray modSquare(int, int[])
    {
        int $i0, i1, i3, $i4, $i5;
        int[] $r0;
        long l2, $l6;
        long[] r1, $r3;
        org.spongycastle.math.ec.LongArray r2;

        r2 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = virtualinvoke r2.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if i1 != 0 goto label1;

        return r2;

     label1:
        i1 = i1 << 1;

        r1 = newarray (long)[i1];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r3 = r2.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i4 = i3 >>> 1;

        l2 = $r3[$i4];

        $i4 = i3 + 1;

        $i5 = (int) l2;

        $l6 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i5);

        r1[i3] = $l6;

        i3 = $i4 + 1;

        l2 = l2 >>> 32;

        $i5 = (int) l2;

        l2 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i5);

        r1[$i4] = l2;

        goto label2;

     label3:
        r2 = new org.spongycastle.math.ec.LongArray;

        i1 = lengthof r1;

        $i0 = staticinvoke <org.spongycastle.math.ec.LongArray: int reduceInPlace(long[],int,int,int,int[])>(r1, 0, i1, $i0, $r0);

        specialinvoke r2.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>(r1, 0, $i0);

        return r2;
    }
    public org.spongycastle.math.ec.LongArray modSquareN(int, int, int[])
    {
        int $i0, i1, $i2, $i3, i4;
        int[] $r0;
        long[] r1, $r3;
        org.spongycastle.math.ec.LongArray r2;

        r2 := @this: org.spongycastle.math.ec.LongArray;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i3 = virtualinvoke r2.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        i4 = $i3;

        if $i3 != 0 goto label1;

        return r2;

     label1:
        i1 = $i0 + 63;

        i1 = i1 >>> 6;

        i1 = i1 << 1;

        r1 = newarray (long)[i1];

        $r3 = r2.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i3);

     label2:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label3;

        staticinvoke <org.spongycastle.math.ec.LongArray: void squareInPlace(long[],int,int,int[])>(r1, i4, $i0, $r0);

        $i3 = lengthof r1;

        i4 = staticinvoke <org.spongycastle.math.ec.LongArray: int reduceInPlace(long[],int,int,int,int[])>(r1, 0, $i3, $i0, $r0);

        goto label2;

     label3:
        r2 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r2.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>(r1, 0, i4);

        return r2;
    }
    public org.spongycastle.math.ec.LongArray multiply(org.spongycastle.math.ec.LongArray, int, int[])
    {
        org.spongycastle.math.ec.LongArray $r0, r3, r4, r5;
        int $i0, i2, i3, i4, i5, i6, $i8;
        int[] $r1;
        long l1;
        long[] r2, $r6, $r7, r8;
        byte $b7;

        r3 := @this: org.spongycastle.math.ec.LongArray;

        $r0 := @parameter0: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i0 = virtualinvoke r3.<org.spongycastle.math.ec.LongArray: int degree()>();

        i4 = $i0;

        if $i0 != 0 goto label01;

        return r3;

     label01:
        i2 = virtualinvoke $r0.<org.spongycastle.math.ec.LongArray: int degree()>();

        i3 = i2;

        if i2 != 0 goto label02;

        return $r0;

     label02:
        r4 = r3;

        r5 = $r0;

        if $i0 <= i2 goto label03;

        r4 = $r0;

        r5 = r3;

        i4 = i2;

        i3 = $i0;

     label03:
        $i0 = i4 + 63;

        $i0 = $i0 >>> 6;

        i2 = i3 + 63;

        i2 = i2 >>> 6;

        i4 = i4 + i3;

        i4 = i4 + 62;

        i4 = i4 >>> 6;

        if $i0 != 1 goto label05;

        r2 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l1 = r2[0];

        $b7 = l1 cmp 1L;

        if $b7 != 0 goto label04;

        return r5;

     label04:
        r2 = newarray (long)[i4];

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <org.spongycastle.math.ec.LongArray: void multiplyWord(long,long[],int,long[],int)>(l1, $r6, i2, r2, 0);

        r3 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r3.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>(r2, 0, i4);

        return r3;

     label05:
        i3 = i3 + 7;

        i3 = i3 + 63;

        i3 = i3 >>> 6;

        $r1 = newarray (int)[16];

        $i8 = i3 << 4;

        r2 = newarray (long)[$i8];

        $i8 = i3;

        $r1[1] = i3;

        $r6 = r5.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i3, i2);

        i2 = 2;

     label06:
        if i2 >= 16 goto label09;

        $i8 = $i8 + i3;

        $r1[i2] = $i8;

        i5 = i2 & 1;

        if i5 != 0 goto label08;

        i5 = $i8 >>> 1;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, i5, r2, $i8, i3, 1);

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        i5 = $i8 - i3;

        staticinvoke <org.spongycastle.math.ec.LongArray: void add(long[],int,long[],int,long[],int,int)>(r2, i3, r2, i5, r2, $i8, i3);

        goto label07;

     label09:
        i2 = lengthof r2;

        $r6 = newarray (long)[i2];

        i2 = lengthof r2;

        staticinvoke <org.spongycastle.math.ec.LongArray: long shiftUp(long[],int,long[],int,int,int)>(r2, 0, $r6, 0, i2, 4);

        $r7 = r4.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        i2 = i4 << 3;

        r8 = newarray (long)[i2];

        i2 = 0;

     label10:
        if i2 >= $i0 goto label13;

        l1 = $r7[i2];

        $i8 = i2;

     label11:
        i5 = (int) l1;

        i5 = i5 & 15;

        l1 = l1 >>> 4;

        i6 = (int) l1;

        i6 = i6 & 15;

        i5 = $r1[i5];

        i6 = $r1[i6];

        staticinvoke <org.spongycastle.math.ec.LongArray: void addBoth(long[],int,long[],int,long[],int,int)>(r8, $i8, r2, i5, $r6, i6, i3);

        l1 = l1 >>> 4;

        $b7 = l1 cmp 0L;

        if $b7 != 0 goto label12;

        i2 = i2 + 1;

        goto label10;

     label12:
        $i8 = $i8 + i4;

        goto label11;

     label13:
        $i0 = lengthof r8;

     label14:
        $i0 = $i0 - i4;

        if $i0 == 0 goto label15;

        i3 = $i0 - i4;

        staticinvoke <org.spongycastle.math.ec.LongArray: long addShiftedUp(long[],int,long[],int,int,int)>(r8, i3, r8, $i0, i4, 8);

        goto label14;

     label15:
        r3 = new org.spongycastle.math.ec.LongArray;

        specialinvoke r3.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>(r8, 0, i4);

        return r3;
    }
    public void reduce(int, int[])
    {
        org.spongycastle.math.ec.LongArray r0;
        int $i0, $i1;
        int[] $r1;
        long[] r2, $r3;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i1 = lengthof r2;

        $i0 = staticinvoke <org.spongycastle.math.ec.LongArray: int reduceInPlace(long[],int,int,int,int[])>(r2, 0, $i1, $i0, $r1);

        $i1 = lengthof r2;

        if $i0 >= $i1 goto label1;

        $r3 = newarray (long)[$i0];

        r0.<org.spongycastle.math.ec.LongArray: long[] m_ints> = $r3;

        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 0, $i0);

     label1:
        return;
    }
    public org.spongycastle.math.ec.LongArray square(int, int[])
    {
        int $i0, i2, $i3, $i4;
        int[] $r0;
        long l1, $l5;
        long[] r1, $r3;
        org.spongycastle.math.ec.LongArray r2;

        r2 := @this: org.spongycastle.math.ec.LongArray;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i0 = virtualinvoke r2.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if $i0 != 0 goto label1;

        return r2;

     label1:
        $i0 = $i0 << 1;

        r1 = newarray (long)[$i0];

        i2 = 0;

     label2:
        if i2 >= $i0 goto label3;

        $r3 = r2.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i3 = i2 >>> 1;

        l1 = $r3[$i3];

        $i3 = i2 + 1;

        $i4 = (int) l1;

        $l5 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i4);

        r1[i2] = $l5;

        i2 = $i3 + 1;

        l1 = l1 >>> 32;

        $i4 = (int) l1;

        l1 = staticinvoke <org.spongycastle.math.ec.LongArray: long interleave2_32to64(int)>($i4);

        r1[$i3] = l1;

        goto label2;

     label3:
        r2 = new org.spongycastle.math.ec.LongArray;

        $i0 = lengthof r1;

        specialinvoke r2.<org.spongycastle.math.ec.LongArray: void <init>(long[],int,int)>(r1, 0, $i0);

        return r2;
    }
    public boolean testBitZero()
    {
        org.spongycastle.math.ec.LongArray r0;
        long[] $r1;
        int $i0;
        long $l1;
        byte $b2;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l1 = $r1[0];

        $l1 = $l1 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.math.BigInteger toBigInteger()
    {
        org.spongycastle.math.ec.LongArray r0;
        byte[] r1, r2;
        int i0, $i3, $i4, $i5, $i7;
        long l1, $l6;
        byte b2;
        long[] $r3;
        boolean z0;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i3 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if $i3 != 0 goto label01;

        $r4 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        return $r4;

     label01:
        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i4 = $i3 + -1;

        l1 = $r3[$i4];

        r2 = newarray (byte)[8];

        z0 = 0;

        i0 = 7;

        $i4 = 0;

     label02:
        if i0 < 0 goto label05;

        $i5 = i0 * 8;

        $l6 = l1 >>> $i5;

        $i5 = (int) $l6;

        b2 = (byte) $i5;

        if z0 != 0 goto label03;

        if b2 == 0 goto label12;

     label03:
        z0 = 1;

        $i5 = $i4 + 1;

        r2[$i4] = b2;

     label04:
        i0 = i0 + -1;

        $i4 = $i5;

        goto label02;

     label05:
        i0 = $i3 + -1;

        i0 = i0 * 8;

        i0 = i0 + $i4;

        r1 = newarray (byte)[i0];

        i0 = 0;

     label06:
        if i0 >= $i4 goto label07;

        b2 = r2[i0];

        r1[i0] = b2;

        i0 = i0 + 1;

        goto label06;

     label07:
        $i3 = $i3 + -2;

        i0 = $i4;

     label08:
        if $i3 < 0 goto label11;

        $r3 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        l1 = $r3[$i3];

        $i4 = 7;

     label09:
        if $i4 < 0 goto label10;

        $i7 = $i4 * 8;

        $l6 = l1 >>> $i7;

        $i7 = (int) $l6;

        b2 = (byte) $i7;

        r1[i0] = b2;

        $i4 = $i4 + -1;

        i0 = i0 + 1;

        goto label09;

     label10:
        $i3 = $i3 + -1;

        goto label08;

     label11:
        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r4;

     label12:
        $i5 = $i4;

        goto label04;
    }
    public java.lang.String toString()
    {
        org.spongycastle.math.ec.LongArray r0;
        java.lang.StringBuffer r1;
        int $i0, $i2;
        long[] $r2;
        long $l1;
        java.lang.String $r3, $r4;

        r0 := @this: org.spongycastle.math.ec.LongArray;

        $i0 = virtualinvoke r0.<org.spongycastle.math.ec.LongArray: int getUsedLength()>();

        if $i0 != 0 goto label1;

        return "0";

     label1:
        r1 = new java.lang.StringBuffer;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $i0 = $i0 + -1;

        $l1 = $r2[$i0];

        $r3 = staticinvoke <java.lang.Long: java.lang.String toBinaryString(long)>($l1);

        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

     label2:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label4;

        $r2 = r0.<org.spongycastle.math.ec.LongArray: long[] m_ints>;

        $l1 = $r2[$i0];

        $r3 = staticinvoke <java.lang.Long: java.lang.String toBinaryString(long)>($l1);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 >= 64 goto label3;

        $r4 = "0000000000000000000000000000000000000000000000000000000000000000";

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label2;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
