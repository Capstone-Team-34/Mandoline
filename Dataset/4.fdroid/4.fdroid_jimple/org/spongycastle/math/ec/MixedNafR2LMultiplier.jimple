org.spongycastle.math.ec.MixedNafR2LMultiplier extends org.spongycastle.math.ec.AbstractECMultiplier
protected int additionCoord
protected int doublingCoord
    public void <init>()
    {
        org.spongycastle.math.ec.MixedNafR2LMultiplier r0;

        r0 := @this: org.spongycastle.math.ec.MixedNafR2LMultiplier;

        specialinvoke r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: void <init>(int,int)>(2, 4);

        return;
    }
    public void <init>(int, int)
    {
        org.spongycastle.math.ec.MixedNafR2LMultiplier r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.math.ec.MixedNafR2LMultiplier;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.math.ec.AbstractECMultiplier: void <init>()>();

        r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: int additionCoord> = $i0;

        r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: int doublingCoord> = $i1;

        return;
    }
    protected org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve, int)
    {
        org.spongycastle.math.ec.MixedNafR2LMultiplier r0;
        int $i0, $i1;
        org.spongycastle.math.ec.ECCurve r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.math.ec.ECCurve$Config $r5;

        r0 := @this: org.spongycastle.math.ec.MixedNafR2LMultiplier;

        r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<org.spongycastle.math.ec.ECCurve: int getCoordinateSystem()>();

        if $i1 != $i0 goto label1;

        return r1;

     label1:
        $z0 = virtualinvoke r1.<org.spongycastle.math.ec.ECCurve: boolean supportsCoordinateSystem(int)>($i0);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Coordinate system ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported by this curve");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = virtualinvoke r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECCurve$Config configure()>();

        $r5 = virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve$Config: org.spongycastle.math.ec.ECCurve$Config setCoordinateSystem(int)>($i0);

        r1 = virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve$Config: org.spongycastle.math.ec.ECCurve create()>();

        return r1;
    }
    protected org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.math.ec.MixedNafR2LMultiplier r0;
        org.spongycastle.math.ec.ECPoint $r1, $r7, $r8, r9;
        java.math.BigInteger $r2;
        int i0, i1, $i2;
        org.spongycastle.math.ec.ECCurve $r3, $r4, $r5;
        int[] $r6;
        byte b3;

        r0 := @this: org.spongycastle.math.ec.MixedNafR2LMultiplier;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i2 = r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: int additionCoord>;

        $r4 = virtualinvoke r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve,int)>($r3, $i2);

        $i2 = r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: int doublingCoord>;

        $r5 = virtualinvoke r0.<org.spongycastle.math.ec.MixedNafR2LMultiplier: org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve,int)>($r3, $i2);

        $r6 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int[] generateCompactNaf(java.math.BigInteger)>($r2);

        $r7 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint getInfinity()>();

        $r1 = virtualinvoke $r5.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)>($r1);

        b3 = 0;

        $i2 = 0;

     label1:
        i0 = lengthof $r6;

        if $i2 >= i0 goto label3;

        i1 = $r6[$i2];

        i0 = i1 >> 16;

        i1 = 65535 & i1;

        i1 = b3 + i1;

        $r8 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint timesPow2(int)>(i1);

        $r1 = $r8;

        $r8 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)>($r8);

        r9 = $r8;

        if i0 >= 0 goto label2;

        r9 = virtualinvoke $r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

     label2:
        $r7 = virtualinvoke $r7.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>(r9);

        b3 = 1;

        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint)>($r7);

        return $r1;
    }
