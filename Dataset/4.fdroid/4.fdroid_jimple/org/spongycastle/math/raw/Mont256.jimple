org.spongycastle.math.raw.Mont256 extends java.lang.Object
private static final long M
    public void <init>()
    {
        org.spongycastle.math.raw.Mont256 r0;

        r0 := @this: org.spongycastle.math.raw.Mont256;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int inverse32(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 * $i0;

        $i1 = 2 - $i1;

        $i1 = $i0 * $i1;

        $i2 = $i0 * $i1;

        $i2 = 2 - $i2;

        $i1 = $i1 * $i2;

        $i2 = $i0 * $i1;

        $i2 = 2 - $i2;

        $i1 = $i1 * $i2;

        $i0 = $i0 * $i1;

        $i0 = 2 - $i0;

        $i0 = $i1 * $i0;

        return $i0;
    }
    public static void multAdd(int[], int[], int[], int[], int)
    {
        int[] $r0, $r1, $r2, $r3;
        int $i0, i4, $i5, $i6, $i11, $i13;
        long l1, l2, l3, l7, $l8, l9, $l10, $l12;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        $i0 := @parameter4: int;

        i4 = 0;

        $i5 = $r1[0];

        l3 = (long) $i5;

        l3 = l3 & 4294967295L;

        $i5 = 0;

     label1:
        if $i5 >= 8 goto label4;

        $i6 = $r2[0];

        l2 = (long) $i6;

        l1 = l2 & 4294967295L;

        $i6 = $r0[$i5];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        l7 = l2 * l3;

        $l8 = 4294967295L & l7;

        l9 = $l8 + l1;

        $i6 = (int) l9;

        $i6 = $i6 * $i0;

        l1 = (long) $i6;

        l1 = l1 & 4294967295L;

        $i6 = $r3[0];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l8 = l1 * $l8;

        $l10 = 4294967295L & $l8;

        l9 = l9 + $l10;

        l9 = l9 >>> 32;

        l7 = l7 >>> 32;

        l7 = l9 + l7;

        $l8 = $l8 >>> 32;

        l7 = l7 + $l8;

        $i6 = 1;

     label2:
        if $i6 >= 8 goto label3;

        $i11 = $r1[$i6];

        $l8 = (long) $i11;

        $l8 = $l8 & 4294967295L;

        $l8 = l2 * $l8;

        $i11 = $r3[$i6];

        l9 = (long) $i11;

        l9 = l9 & 4294967295L;

        l9 = l1 * l9;

        $l10 = 4294967295L & $l8;

        $l12 = 4294967295L & l9;

        $l10 = $l10 + $l12;

        $i11 = $r2[$i6];

        $l12 = (long) $i11;

        $l12 = $l12 & 4294967295L;

        $l10 = $l10 + $l12;

        l7 = l7 + $l10;

        $i11 = $i6 + -1;

        $i13 = (int) l7;

        $r2[$i11] = $i13;

        l7 = l7 >>> 32;

        $l8 = $l8 >>> 32;

        l7 = l7 + $l8;

        $l8 = l9 >>> 32;

        l7 = l7 + $l8;

        $i6 = $i6 + 1;

        goto label2;

     label3:
        l2 = (long) i4;

        l2 = l2 & 4294967295L;

        l2 = l7 + l2;

        i4 = (int) l2;

        $r2[7] = i4;

        l2 = l2 >>> 32;

        i4 = (int) l2;

        $i5 = $i5 + 1;

        goto label1;

     label4:
        if i4 != 0 goto label5;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r2, $r3);

        if $z0 == 0 goto label6;

     label5:
        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r2, $r3, $r2);

     label6:
        return;
    }
    public static void multAddXF(int[], int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;
        long l0, l1, l2, l3, l4, $l8, $l10, $l11;
        boolean $z0;
        int i5, $i6, $i7, $i9, $i12;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        i5 = 0;

        $i6 = $r1[0];

        l4 = (long) $i6;

        l4 = l4 & 4294967295L;

        $i6 = 0;

     label1:
        if $i6 >= 8 goto label4;

        $i7 = $r0[$i6];

        l3 = (long) $i7;

        l3 = l3 & 4294967295L;

        l2 = l3 * l4;

        $i7 = $r2[0];

        $l8 = (long) $i7;

        $l8 = $l8 & 4294967295L;

        $l8 = l2 + $l8;

        l2 = $l8 & 4294967295L;

        $l8 = $l8 >>> 32;

        $l8 = $l8 + l2;

        $i7 = 1;

     label2:
        if $i7 >= 8 goto label3;

        $i9 = $r1[$i7];

        l0 = (long) $i9;

        l0 = l0 & 4294967295L;

        l0 = l3 * l0;

        $i9 = $r3[$i7];

        l1 = (long) $i9;

        l1 = l1 & 4294967295L;

        l1 = l2 * l1;

        $l10 = 4294967295L & l0;

        $l11 = 4294967295L & l1;

        $l10 = $l10 + $l11;

        $i9 = $r2[$i7];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        $l10 = $l10 + $l11;

        $l8 = $l8 + $l10;

        $i9 = $i7 + -1;

        $i12 = (int) $l8;

        $r2[$i9] = $i12;

        $l8 = $l8 >>> 32;

        l0 = l0 >>> 32;

        $l8 = $l8 + l0;

        l0 = l1 >>> 32;

        $l8 = $l8 + l0;

        $i7 = $i7 + 1;

        goto label2;

     label3:
        l3 = (long) i5;

        l3 = l3 & 4294967295L;

        l3 = $l8 + l3;

        i5 = (int) l3;

        $r2[7] = i5;

        l3 = l3 >>> 32;

        i5 = (int) l3;

        $i6 = $i6 + 1;

        goto label1;

     label4:
        if i5 != 0 goto label5;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r2, $r3);

        if $z0 == 0 goto label6;

     label5:
        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r2, $r3, $r2);

     label6:
        return;
    }
    public static void reduce(int[], int[], int)
    {
        int[] $r0, $r1;
        int $i0, i2, i3, $i4, $i8;
        long l1, $l5, $l6, $l7;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= 8 goto label4;

        i2 = $r0[0];

        $i4 = i2 * $i0;

        l1 = (long) $i4;

        l1 = l1 & 4294967295L;

        $i4 = $r1[0];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l1;

        $l6 = (long) i2;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        $l5 = $l5 >>> 32;

        i2 = 1;

     label2:
        if i2 >= 8 goto label3;

        $i4 = $r1[i2];

        $l6 = (long) $i4;

        $l6 = $l6 & 4294967295L;

        $l6 = $l6 * l1;

        $i4 = $r0[i2];

        $l7 = (long) $i4;

        $l7 = $l7 & 4294967295L;

        $l6 = $l6 + $l7;

        $l5 = $l5 + $l6;

        $i4 = i2 + -1;

        $i8 = (int) $l5;

        $r0[$i4] = $i8;

        $l5 = $l5 >>> 32;

        i2 = i2 + 1;

        goto label2;

     label3:
        i2 = (int) $l5;

        $r0[7] = i2;

        i3 = i3 + 1;

        goto label1;

     label4:
        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label5;

        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r0, $r1, $r0);

     label5:
        return;
    }
    public static void reduceXF(int[], int[])
    {
        int[] $r0, $r1;
        long l0, l3, $l5, $l6;
        int i1, i2, $i4, $i7;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i2 = 0;

     label1:
        if i2 >= 8 goto label4;

        i1 = $r0[0];

        l0 = (long) i1;

        l0 = l0 & 4294967295L;

        l3 = l0;

        i1 = 1;

     label2:
        if i1 >= 8 goto label3;

        $i4 = $r1[i1];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l0;

        $i4 = $r0[i1];

        $l6 = (long) $i4;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        l3 = l3 + $l5;

        $i4 = i1 + -1;

        $i7 = (int) l3;

        $r0[$i4] = $i7;

        l3 = l3 >>> 32;

        i1 = i1 + 1;

        goto label2;

     label3:
        i1 = (int) l3;

        $r0[7] = i1;

        i2 = i2 + 1;

        goto label1;

     label4:
        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean gte(int[],int[])>($r0, $r1);

        if $z0 == 0 goto label5;

        staticinvoke <org.spongycastle.math.raw.Nat256: int sub(int[],int[],int[])>($r0, $r1, $r0);

     label5:
        return;
    }
