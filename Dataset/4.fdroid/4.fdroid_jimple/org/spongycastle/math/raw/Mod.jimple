org.spongycastle.math.raw.Mod extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.math.raw.Mod r0;

        r0 := @this: org.spongycastle.math.raw.Mod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void add(int[], int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        i0 = lengthof $r0;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>(i0, $r1, $r2, $r3);

        if $i1 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(i0, $r0, $r3);

     label1:
        return;
    }
    private static int getTrailingZeroes(int)
    {
        int $i0, $i1, i2;

        $i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label2;

        $i1 = $i1 >>> 1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i2;
    }
    public static int inverse32(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 * $i0;

        $i1 = 2 - $i1;

        $i1 = $i0 * $i1;

        $i2 = $i0 * $i1;

        $i2 = 2 - $i2;

        $i1 = $i1 * $i2;

        $i2 = $i0 * $i1;

        $i2 = 2 - $i2;

        $i1 = $i1 * $i2;

        $i0 = $i0 * $i1;

        $i0 = 2 - $i0;

        $i0 = $i1 * $i0;

        return $i0;
    }
    private static void inversionResult(int[], int, int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        if $i0 >= 0 goto label1;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.math.raw.Nat: int add(int,int[],int[],int[])>($i0, $r1, $r0, $r2);

        return;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }
    private static int inversionStep(int[], int[], int, int[], int)
    {
        int[] $r0, $r1, $r2;
        int $i0, i1, $i2, i3, $i4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: int[];

        $i2 := @parameter4: int;

        i1 = lengthof $r0;

        i3 = 0;

     label1:
        $i4 = $r1[0];

        if $i4 != 0 goto label2;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownWord(int,int[],int)>($i0, $r1, 0);

        i3 = i3 + 32;

        goto label1;

     label2:
        $i4 = $r1[0];

        $i4 = staticinvoke <org.spongycastle.math.raw.Mod: int getTrailingZeroes(int)>($i4);

        if $i4 <= 0 goto label3;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBits(int,int[],int,int)>($i0, $r1, $i4, 0);

        i3 = i3 + $i4;

     label3:
        $i0 = 0;

     label4:
        if $i0 >= i3 goto label7;

        $i4 = $r2[0];

        $i4 = $i4 & 1;

        if $i4 == 0 goto label5;

        if $i2 >= 0 goto label6;

        $i4 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>(i1, $r0, $r2);

        $i2 = $i2 + $i4;

     label5:
        staticinvoke <org.spongycastle.math.raw.Nat: int shiftDownBit(int,int[],int)>(i1, $r2, $i2);

        $i0 = $i0 + 1;

        goto label4;

     label6:
        $i4 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(i1, $r0, $r2);

        $i2 = $i2 + $i4;

        goto label5;

     label7:
        return $i2;
    }
    public static void invert(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r4, $r5, $r6;
        int i0, i1, $i2, i3, $i4;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        i0 = lengthof $r0;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isZero(int,int[])>(i0, $r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'x\' cannot be 0");

        throw $r3;

     label1:
        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isOne(int,int[])>(i0, $r1);

        if $z0 == 0 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, i0);

        return;

     label2:
        $r1 = staticinvoke <org.spongycastle.math.raw.Nat: int[] copy(int,int[])>(i0, $r1);

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(i0);

        $r4[0] = 1;

        i1 = 0;

        $i2 = $r1[0];

        $i2 = $i2 & 1;

        if $i2 != 0 goto label3;

        i1 = staticinvoke <org.spongycastle.math.raw.Mod: int inversionStep(int[],int[],int,int[],int)>($r0, $r1, i0, $r4, 0);

     label3:
        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isOne(int,int[])>(i0, $r1);

        if $z0 == 0 goto label4;

        staticinvoke <org.spongycastle.math.raw.Mod: void inversionResult(int[],int,int[],int[])>($r0, i1, $r4, $r2);

        return;

     label4:
        $r5 = staticinvoke <org.spongycastle.math.raw.Nat: int[] copy(int,int[])>(i0, $r0);

        $r6 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(i0);

        i3 = 0;

        $i2 = i0;

     label5:
        $i4 = $i2 + -1;

        $i4 = $r1[$i4];

        if $i4 != 0 goto label6;

        $i4 = $i2 + -1;

        $i4 = $r5[$i4];

        if $i4 != 0 goto label6;

        $i2 = $i2 + -1;

        goto label5;

     label6:
        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>($i2, $r1, $r5);

        if $z0 == 0 goto label7;

        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>($i2, $r5, $r1);

        $i4 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(i0, $r6, $r4);

        $i4 = $i4 - i3;

        i1 = i1 + $i4;

        $i4 = staticinvoke <org.spongycastle.math.raw.Mod: int inversionStep(int[],int[],int,int[],int)>($r0, $r1, $i2, $r4, i1);

        i1 = $i4;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isOne(int,int[])>($i2, $r1);

        if $z0 == 0 goto label5;

        staticinvoke <org.spongycastle.math.raw.Mod: void inversionResult(int[],int,int[],int[])>($r0, $i4, $r4, $r2);

        return;

     label7:
        staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>($i2, $r1, $r5);

        $i4 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int[])>(i0, $r4, $r6);

        $i4 = $i4 - i1;

        i3 = i3 + $i4;

        $i4 = staticinvoke <org.spongycastle.math.raw.Mod: int inversionStep(int[],int[],int,int[],int)>($r0, $r5, $i2, $r6, i3);

        i3 = $i4;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean isOne(int,int[])>($i2, $r5);

        if $z0 == 0 goto label5;

        staticinvoke <org.spongycastle.math.raw.Mod: void inversionResult(int[],int,int[],int[])>($r0, $i4, $r6, $r2);

        return;
    }
    public static int[] random(int[])
    {
        int[] $r0, $r2;
        int i0, $i1, $i2, $i3;
        java.util.Random r1;
        boolean $z0;

        $r0 := @parameter0: int[];

        i0 = lengthof $r0;

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>(i0);

        $i1 = i0 + -1;

        $i1 = $r0[$i1];

        $i2 = $i1 >>> 1;

        $i1 = $i1 | $i2;

        $i2 = $i1 >>> 2;

        $i1 = $i1 | $i2;

        $i2 = $i1 >>> 4;

        $i1 = $i1 | $i2;

        $i2 = $i1 >>> 8;

        $i1 = $i1 | $i2;

        $i2 = $i1 >>> 16;

        $i1 = $i1 | $i2;

     label1:
        $i2 = 0;

     label2:
        if $i2 == i0 goto label3;

        $i3 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        $r2[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $i2 = i0 + -1;

        $i3 = $r2[$i2];

        $i3 = $i3 & $i1;

        $r2[$i2] = $i3;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat: boolean gte(int,int[],int[])>(i0, $r2, $r0);

        if $z0 != 0 goto label1;

        return $r2;
    }
    public static void subtract(int[], int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        i0 = lengthof $r0;

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int sub(int,int[],int[],int[])>(i0, $r1, $r2, $r3);

        if $i1 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int[])>(i0, $r0, $r3);

     label1:
        return;
    }
