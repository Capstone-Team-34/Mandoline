org.spongycastle.math.raw.Nat512 extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.math.raw.Nat512 r0;

        r0 := @this: org.spongycastle.math.raw.Nat512;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void mul(int[], int[], int[])
    {
        int[] $r0, $r1, $r2, $r3, $r4;
        int i0, $i1;
        boolean $z0, $z1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int[],int[])>($r0, $r1, $r2);

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int,int[],int,int[],int)>($r0, 8, $r1, 8, $r2, 16);

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat256: int addToEachOther(int[],int,int[],int)>($r2, 8, $r2, 16);

        i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int addTo(int[],int,int[],int,int)>($r2, 0, $r2, 8, 0);

        i0 = $i1 + i0;

        i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int addTo(int[],int,int[],int,int)>($r2, 24, $r2, 16, i0);

        $i1 = $i1 + i0;

        $r3 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] create()>();

        $r4 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] create()>();

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean diff(int[],int,int[],int,int[],int)>($r0, 8, $r0, 0, $r3, 0);

        $z1 = staticinvoke <org.spongycastle.math.raw.Nat256: boolean diff(int[],int,int[],int,int[],int)>($r1, 8, $r1, 0, $r4, 0);

        if $z0 == $z1 goto label3;

        $z0 = 1;

     label1:
        $r0 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void mul(int[],int[],int[])>($r3, $r4, $r0);

        if $z0 == 0 goto label4;

        i0 = staticinvoke <org.spongycastle.math.raw.Nat: int addTo(int,int[],int,int[],int)>(16, $r0, 0, $r2, 8);

     label2:
        $i1 = $i1 + i0;

        staticinvoke <org.spongycastle.math.raw.Nat: int addWordAt(int,int,int[],int)>(32, $i1, $r2, 24);

        return;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        i0 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int,int[],int)>(16, $r0, 0, $r2, 8);

        goto label2;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1, $r2;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r0, $r1);

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int,int[],int)>($r0, 8, $r1, 16);

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat256: int addToEachOther(int[],int,int[],int)>($r1, 8, $r1, 16);

        i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int addTo(int[],int,int[],int,int)>($r1, 0, $r1, 8, 0);

        i0 = $i1 + i0;

        i0 = staticinvoke <org.spongycastle.math.raw.Nat256: int addTo(int[],int,int[],int,int)>($r1, 24, $r1, 16, i0);

        $i1 = $i1 + i0;

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] create()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: boolean diff(int[],int,int[],int,int[],int)>($r0, 8, $r0, 0, $r2, 0);

        $r0 = staticinvoke <org.spongycastle.math.raw.Nat256: int[] createExt()>();

        staticinvoke <org.spongycastle.math.raw.Nat256: void square(int[],int[])>($r2, $r0);

        i0 = staticinvoke <org.spongycastle.math.raw.Nat: int subFrom(int,int[],int,int[],int)>(16, $r0, 0, $r1, 8);

        $i1 = $i1 + i0;

        staticinvoke <org.spongycastle.math.raw.Nat: int addWordAt(int,int,int[],int)>(32, $i1, $r1, 24);

        return;
    }
