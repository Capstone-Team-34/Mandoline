org.spongycastle.math.raw.Nat320 extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.math.raw.Nat320 r0;

        r0 := @this: org.spongycastle.math.raw.Nat320;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void copy64(long[], long[])
    {
        long[] $r0, $r1;
        long $l0;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $r1[0] = $l0;

        $l0 = $r0[1];

        $r1[1] = $l0;

        $l0 = $r0[2];

        $r1[2] = $l0;

        $l0 = $r0[3];

        $r1[3] = $l0;

        $l0 = $r0[4];

        $r1[4] = $l0;

        return;
    }
    public static long[] create64()
    {
        long[] $r0;

        $r0 = newarray (long)[5];

        return $r0;
    }
    public static long[] createExt64()
    {
        long[] $r0;

        $r0 = newarray (long)[10];

        return $r0;
    }
    public static boolean eq64(long[], long[])
    {
        long[] $r0, $r1;
        long $l0, $l1;
        int i2;
        byte $b3;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        i2 = 4;

     label1:
        if i2 < 0 goto label3;

        $l0 = $r0[i2];

        $l1 = $r1[i2];

        $b3 = $l0 cmp $l1;

        if $b3 == 0 goto label2;

        return 0;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static long[] fromBigInteger64(java.math.BigInteger)
    {
        int i0, $i1;
        java.math.BigInteger $r0;
        java.lang.IllegalArgumentException $r1;
        long[] $r2;
        long $l2;

        $r0 := @parameter0: java.math.BigInteger;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i1 < 0 goto label1;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 320 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        $r2 = staticinvoke <org.spongycastle.math.raw.Nat320: long[] create64()>();

        $i1 = 0;

     label3:
        i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if i0 == 0 goto label4;

        $l2 = virtualinvoke $r0.<java.math.BigInteger: long longValue()>();

        $r2[$i1] = $l2;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(64);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r2;
    }
    public static boolean isOne64(long[])
    {
        long[] $r0;
        long $l0;
        byte $b1;
        int i2;

        $r0 := @parameter0: long[];

        $l0 = $r0[0];

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label1;

        return 0;

     label1:
        i2 = 1;

     label2:
        if i2 >= 5 goto label3;

        $l0 = $r0[i2];

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label4;

        i2 = i2 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static boolean isZero64(long[])
    {
        long[] $r0;
        long $l0;
        int i1;
        byte $b2;

        $r0 := @parameter0: long[];

        i1 = 0;

     label1:
        if i1 >= 5 goto label3;

        $l0 = $r0[i1];

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static java.math.BigInteger toBigInteger64(long[])
    {
        long[] $r0;
        byte[] r1;
        long l0;
        int i1, $i3;
        byte $b2;
        java.math.BigInteger $r2;

        $r0 := @parameter0: long[];

        r1 = newarray (byte)[40];

        i1 = 0;

     label1:
        if i1 >= 5 goto label3;

        l0 = $r0[i1];

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label2;

        $i3 = 4 - i1;

        $i3 = $i3 << 3;

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long,byte[],int)>(l0, r1, $i3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r2;
    }
