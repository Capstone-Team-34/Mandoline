org.spongycastle.math.raw.Nat extends java.lang.Object
private static final long M
    public void <init>()
    {
        org.spongycastle.math.raw.Nat r0;

        r0 := @this: org.spongycastle.math.raw.Nat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int add(int, int[], int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1, $r2;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r1[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r2[i2] = $i3;

        l1 = l1 >>> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int add33At(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $i3 = (int) $l4;

        $r0[$i2] = $i3;

        $l4 = $l4 >>> 32;

        $i1 = $i2 + 1;

        $i1 = $r0[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 + 1L;

        $l4 = $l4 + $l5;

        $i1 = $i2 + 1;

        $i3 = (int) $l4;

        $r0[$i1] = $i3;

        $l4 = $l4 >>> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i2 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, $i1);

        return $i0;
    }
    public static int add33At(int, int, int[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;
        long $l5, $l6;
        byte $b7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 = $i2 + $i3;

        $i4 = $r0[$i4];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        $i1 = $i2 + $i3;

        $i4 = (int) $l5;

        $r0[$i1] = $i4;

        $l5 = $l5 >>> 32;

        $i1 = $i2 + $i3;

        $i1 = $i1 + 1;

        $i1 = $r0[$i1];

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l6 = $l6 + 1L;

        $l5 = $l5 + $l6;

        $i1 = $i2 + $i3;

        $i1 = $i1 + 1;

        $i4 = (int) $l5;

        $r0[$i1] = $i4;

        $l5 = $l5 >>> 32;

        $b7 = $l5 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i3 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, $i1);

        return $i0;
    }
    public static int add33To(int, int, int[])
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3, $l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 = $r0[0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 + $l4;

        $i1 = (int) $l3;

        $r0[0] = $i1;

        $l3 = $l3 >>> 32;

        $i1 = $r0[1];

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 + 1L;

        $l3 = $l3 + $l4;

        $i1 = (int) $l3;

        $r0[1] = $i1;

        $l3 = $l3 >>> 32;

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, 2);

        return $i0;
    }
    public static int add33To(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $i3 = (int) $l4;

        $r0[$i2] = $i3;

        $l4 = $l4 >>> 32;

        $i1 = $i2 + 1;

        $i1 = $r0[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 + 1L;

        $l4 = $l4 + $l5;

        $i1 = $i2 + 1;

        $i3 = (int) $l4;

        $r0[$i1] = $i3;

        $l4 = $l4 >>> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, 2);

        return $i0;
    }
    public static int addBothTo(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, i5, $i6, $i9;
        int[] $r0, $r1, $r2;
        long l4, $l7, $l8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $i6 = $i1 + i5;

        $i6 = $r0[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $i6 = $i2 + i5;

        $i6 = $r1[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        $i6 = $i3 + i5;

        $i6 = $r2[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        l4 = l4 + $l7;

        $i6 = $i3 + i5;

        $i9 = (int) l4;

        $r2[$i6] = $i9;

        l4 = l4 >>> 32;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = (int) l4;

        return $i0;
    }
    public static int addBothTo(int, int[], int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1, $r2;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r1[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $i3 = $r2[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r2[i2] = $i3;

        l1 = l1 >>> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int addDWordAt(int, long, int[], int)
    {
        int $i0, $i2, $i3, $i6;
        long $l1, $l4, $l5;
        int[] $r0;
        byte $b7;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = $l1 & 4294967295L;

        $l4 = $l4 + $l5;

        $i6 = (int) $l4;

        $r0[$i2] = $i6;

        $l4 = $l4 >>> 32;

        $i3 = $i2 + 1;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l5 + $l1;

        $l1 = $l4 + $l1;

        $i3 = $i2 + 1;

        $i6 = (int) $l1;

        $r0[$i3] = $i6;

        $l1 = $l1 >>> 32;

        $b7 = $l1 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i2 = $i2 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, $i2);

        return $i0;
    }
    public static int addDWordAt(int, long, int[], int, int)
    {
        int $i0, $i2, $i3, $i4, $i7;
        long $l1, $l5, $l6;
        int[] $r0;
        byte $b8;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 = $i2 + $i3;

        $i4 = $r0[$i4];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l6 = $l1 & 4294967295L;

        $l5 = $l5 + $l6;

        $i4 = $i2 + $i3;

        $i7 = (int) $l5;

        $r0[$i4] = $i7;

        $l5 = $l5 >>> 32;

        $i4 = $i2 + $i3;

        $i4 = $i4 + 1;

        $i4 = $r0[$i4];

        $l6 = (long) $i4;

        $l6 = $l6 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l6 + $l1;

        $l1 = $l5 + $l1;

        $i4 = $i2 + $i3;

        $i4 = $i4 + 1;

        $i7 = (int) $l1;

        $r0[$i4] = $i7;

        $l1 = $l1 >>> 32;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label1;

        return 0;

     label1:
        $i3 = $i3 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, $i3);

        return $i0;
    }
    public static int addDWordTo(int, long, int[])
    {
        int $i0, $i2;
        long $l1, $l3, $l4;
        int[] $r0;
        byte $b5;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 = $r0[0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $l4 = $l1 & 4294967295L;

        $l3 = $l3 + $l4;

        $i2 = (int) $l3;

        $r0[0] = $i2;

        $l3 = $l3 >>> 32;

        $i2 = $r0[1];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l4 + $l1;

        $l1 = $l3 + $l1;

        $i2 = (int) $l1;

        $r0[1] = $i2;

        $l1 = $l1 >>> 32;

        $b5 = $l1 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, 2);

        return $i0;
    }
    public static int addDWordTo(int, long, int[], int)
    {
        int $i0, $i2, $i3, $i6;
        long $l1, $l4, $l5;
        int[] $r0;
        byte $b7;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = $l1 & 4294967295L;

        $l4 = $l4 + $l5;

        $i6 = (int) $l4;

        $r0[$i2] = $i6;

        $l4 = $l4 >>> 32;

        $i3 = $i2 + 1;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l5 + $l1;

        $l1 = $l4 + $l1;

        $i3 = $i2 + 1;

        $i6 = (int) $l1;

        $r0[$i3] = $i6;

        $l1 = $l1 >>> 32;

        $b7 = $l1 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, 2);

        return $i0;
    }
    public static int addTo(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, i4, $i5, $i8;
        int[] $r0, $r1;
        long l3, $l6, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        l3 = 0L;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $i5 = $i1 + i4;

        $i5 = $r0[$i5];

        $l6 = (long) $i5;

        $l6 = $l6 & 4294967295L;

        $i5 = $i2 + i4;

        $i5 = $r1[$i5];

        $l7 = (long) $i5;

        $l7 = $l7 & 4294967295L;

        $l6 = $l6 + $l7;

        l3 = l3 + $l6;

        $i5 = $i2 + i4;

        $i8 = (int) l3;

        $r1[$i5] = $i8;

        l3 = l3 >>> 32;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i0 = (int) l3;

        return $i0;
    }
    public static int addTo(int, int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r1[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r1[i2] = $i3;

        l1 = l1 >>> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int addWordAt(int, int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3, $l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $i1 = $r0[$i2];

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 + $l4;

        $i1 = (int) $l3;

        $r0[$i2] = $i1;

        $l3 = $l3 >>> 32;

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i2 + 1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, $i1);

        return $i0;
    }
    public static int addWordAt(int, int, int[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i6;
        int[] $r0;
        long $l4, $l5;
        byte $b7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $i1 = $i2 + $i3;

        $i1 = $r0[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $i6 = $i2 + $i3;

        $i1 = (int) $l4;

        $r0[$i6] = $i1;

        $l4 = $l4 >>> 32;

        $b7 = $l4 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i3 + 1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, $i1);

        return $i0;
    }
    public static int addWordTo(int, int, int[])
    {
        int $i0, $i1;
        int[] $r0;
        long $l2, $l3;
        byte $b4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $l2 = (long) $i1;

        $l2 = $l2 & 4294967295L;

        $i1 = $r0[0];

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i1 = (int) $l2;

        $r0[0] = $i1;

        $l2 = $l2 >>> 32;

        $b4 = $l2 cmp 0L;

        if $b4 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, 1);

        return $i0;
    }
    public static int addWordTo(int, int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3, $l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $i1 = $r0[$i2];

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 + $l4;

        $i1 = (int) $l3;

        $r0[$i2] = $i1;

        $l3 = $l3 >>> 32;

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>($i0, $r0, $i2, 1);

        return $i0;
    }
    public static void copy(int, int[], int[])
    {
        int $i0;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return;
    }
    public static int[] copy(int, int[])
    {
        int $i0;
        int[] $r0, r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        r1 = newarray (int)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static int[] create(int)
    {
        int $i0;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 = newarray (int)[$i0];

        return $r0;
    }
    public static long[] create64(int)
    {
        int $i0;
        long[] $r0;

        $i0 := @parameter0: int;

        $r0 = newarray (long)[$i0];

        return $r0;
    }
    public static int dec(int, int[])
    {
        int $i0, i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $i2 = $r0[i1];

        $i2 = $i2 + -1;

        $r0[i1] = $i2;

        if $i2 == -1 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }
    public static int dec(int, int[], int[])
    {
        int $i0, i1, i2;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i1 = $r0[i2];

        i1 = i1 + -1;

        $r1[i2] = i1;

        i2 = i2 + 1;

        if i1 == -1 goto label1;

     label2:
        if i2 >= $i0 goto label3;

        i1 = $r0[i2];

        $r1[i2] = i1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return 0;

     label4:
        return -1;
    }
    public static int decAt(int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = $r0[$i1];

        $i2 = $i2 + -1;

        $r0[$i1] = $i2;

        if $i2 == -1 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }
    public static int decAt(int, int[], int, int)
    {
        int $i0, $i1, $i2, i3, $i4;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = $i2;

     label1:
        if i3 >= $i0 goto label3;

        $i2 = $i1 + i3;

        $i4 = $r0[$i2];

        $i4 = $i4 + -1;

        $r0[$i2] = $i4;

        if $i4 == -1 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }
    public static boolean eq(int, int[], int[])
    {
        int $i0, i1, $i2;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        i1 = $i0 + -1;

     label1:
        if i1 < 0 goto label3;

        $i2 = $r0[i1];

        $i0 = $r1[i1];

        if $i2 == $i0 goto label2;

        return 0;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static int[] fromBigInteger(int, java.math.BigInteger)
    {
        int $i0, i1, $i2;
        java.math.BigInteger $r0;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.BigInteger;

        i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if i1 < 0 goto label1;

        i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if i1 <= $i0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        $i0 = $i0 + 31;

        $i0 = $i0 >> 5;

        $r2 = staticinvoke <org.spongycastle.math.raw.Nat: int[] create(int)>($i0);

        $i0 = 0;

     label3:
        i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if i1 == 0 goto label4;

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        $r2[$i0] = $i2;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(32);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r2;
    }
    public static int getBit(int[], int)
    {
        int[] $r0;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        return $i0;

     label1:
        i1 = $i0 >> 5;

        if i1 < 0 goto label2;

        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i0 = $i0 & 31;

        i1 = $r0[i1];

        $i0 = i1 >>> $i0;

        $i0 = $i0 & 1;

        return $i0;

     label2:
        return 0;
    }
    public static boolean gte(int, int[], int[])
    {
        int $i0, i1, i2;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        i1 = $r0[$i0];

        i1 = i1 ^ -2147483648;

        i2 = $r1[$i0];

        i2 = i2 ^ -2147483648;

        if i1 >= i2 goto label2;

        return 0;

     label2:
        if i1 > i2 goto label3;

        $i0 = $i0 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static int inc(int, int[])
    {
        int $i0, i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $i2 = $r0[i1];

        $i2 = $i2 + 1;

        $r0[i1] = $i2;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static int inc(int, int[], int[])
    {
        int $i0, i1, i2;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        i1 = $r0[i2];

        i1 = i1 + 1;

        $r1[i2] = i1;

        i2 = i2 + 1;

        if i1 == 0 goto label1;

     label2:
        if i2 >= $i0 goto label3;

        i1 = $r0[i2];

        $r1[i2] = i1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return 0;

     label4:
        return 1;
    }
    public static int incAt(int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = $r0[$i1];

        $i2 = $i2 + 1;

        $r0[$i1] = $i2;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static int incAt(int, int[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

     label1:
        if $i2 >= $i0 goto label3;

        $i3 = $i1 + $i2;

        $i4 = $r0[$i3];

        $i4 = $i4 + 1;

        $r0[$i3] = $i4;

        if $i4 == 0 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static boolean isOne(int, int[])
    {
        int $i0, $i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 = $r0[0];

        if $i1 == 1 goto label1;

        return 0;

     label1:
        $i1 = 1;

     label2:
        if $i1 >= $i0 goto label3;

        $i2 = $r0[$i1];

        if $i2 != 0 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static boolean isZero(int, int[])
    {
        int $i0, i1, $i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $i2 = $r0[i1];

        if $i2 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static void mul(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r0, $r1, $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        $i4 = $i3 + $i0;

        $i5 = $r0[$i1];

        $i5 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWord(int,int,int[],int,int[],int)>($i0, $i5, $r1, $i2, $r2, $i3);

        $r2[$i4] = $i5;

        $i4 = 1;

     label1:
        if $i4 >= $i0 goto label2;

        $i5 = $i3 + $i4;

        $i5 = $i5 + $i0;

        $i6 = $i1 + $i4;

        $i6 = $r0[$i6];

        $i7 = $i3 + $i4;

        $i6 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWordAddTo(int,int,int[],int,int[],int)>($i0, $i6, $r1, $i2, $r2, $i7);

        $r2[$i5] = $i6;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }
    public static void mul(int, int[], int[], int[])
    {
        int $i0, $i1, $i2, i3;
        int[] $r0, $r1, $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        $i2 = $r0[0];

        $i2 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWord(int,int,int[],int[])>($i0, $i2, $r1, $r2);

        $r2[$i0] = $i2;

        i3 = 1;

     label1:
        if i3 >= $i0 goto label2;

        $i2 = i3 + $i0;

        $i1 = $r0[i3];

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWordAddTo(int,int,int[],int,int[],int)>($i0, $i1, $r1, 0, $r2, i3);

        $r2[$i2] = $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static int mul31BothAdd(int, int, int[], int, int[], int[], int)
    {
        int $i0, $i1, $i2, $i3, $i9;
        int[] $r0, $r1, $r2;
        long l4, l5, l6, $l7, $l8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        l6 = 0L;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        l5 = (long) $i2;

        l5 = l5 & 4294967295L;

        $i1 = 0;

     label1:
        $i2 = $r0[$i1];

        $l7 = (long) $i2;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 * l4;

        $i2 = $r1[$i1];

        $l8 = (long) $i2;

        $l8 = $l8 & 4294967295L;

        $l8 = $l8 * l5;

        $l7 = $l7 + $l8;

        $i2 = $i3 + $i1;

        $i2 = $r2[$i2];

        $l8 = (long) $i2;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        l6 = l6 + $l7;

        $i2 = $i3 + $i1;

        $i9 = (int) l6;

        $r2[$i2] = $i9;

        l6 = l6 >>> 32;

        $i1 = $i1 + 1;

        if $i1 < $i0 goto label1;

        $i0 = (int) l6;

        return $i0;
    }
    public static int mulAddTo(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, i6, $i9;
        int[] $r0, $r1, $r2;
        long l5, $l7, $l8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i4 := @parameter6: int;

        l5 = 0L;

        i6 = 0;

     label1:
        if i6 >= $i0 goto label2;

        $i3 = $i1 + i6;

        $i3 = $r0[$i3];

        $i3 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWordAddTo(int,int,int[],int,int[],int)>($i0, $i3, $r1, $i2, $r2, $i4);

        $l7 = (long) $i3;

        $l7 = $l7 & 4294967295L;

        $i3 = $i4 + $i0;

        $i3 = $r2[$i3];

        $l8 = (long) $i3;

        $l8 = $l8 & 4294967295L;

        l5 = $l8 + l5;

        l5 = $l7 + l5;

        $i3 = $i4 + $i0;

        $i9 = (int) l5;

        $r2[$i3] = $i9;

        l5 = l5 >>> 32;

        $i4 = $i4 + 1;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i0 = (int) l5;

        return $i0;
    }
    public static int mulAddTo(int, int[], int[], int[])
    {
        int $i0, $i1, i3, $i6;
        int[] $r0, $r1, $r2;
        long l2, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        l2 = 0L;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $i1 = $r0[i3];

        $i1 = staticinvoke <org.spongycastle.math.raw.Nat: int mulWordAddTo(int,int,int[],int,int[],int)>($i0, $i1, $r1, 0, $r2, i3);

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $i1 = i3 + $i0;

        $i1 = $r2[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        l2 = $l5 + l2;

        l2 = $l4 + l2;

        $i1 = i3 + $i0;

        $i6 = (int) l2;

        $r2[$i1] = $i6;

        l2 = l2 >>> 32;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i0 = (int) l2;

        return $i0;
    }
    public static int mulWord(int, int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i6, $i8;
        int[] $r0, $r1;
        long l4, l5, $l7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i3 := @parameter5: int;

        l5 = 0L;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        $i1 = 0;

     label1:
        $i6 = $i2 + $i1;

        $i6 = $r0[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 * l4;

        l5 = l5 + $l7;

        $i6 = $i3 + $i1;

        $i8 = (int) l5;

        $r1[$i6] = $i8;

        l5 = l5 >>> 32;

        $i1 = $i1 + 1;

        if $i1 < $i0 goto label1;

        $i0 = (int) l5;

        return $i0;
    }
    public static int mulWord(int, int, int[], int[])
    {
        int $i0, $i1, $i4;
        int[] $r0, $r1;
        long l2, l3, $l5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $r1 := @parameter3: int[];

        l3 = 0L;

        l2 = (long) $i1;

        l2 = l2 & 4294967295L;

        $i1 = 0;

     label1:
        $i4 = $r0[$i1];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l2;

        l3 = l3 + $l5;

        $i4 = (int) l3;

        $r1[$i1] = $i4;

        l3 = l3 >>> 32;

        $i1 = $i1 + 1;

        if $i1 < $i0 goto label1;

        $i0 = (int) l3;

        return $i0;
    }
    public static int mulWordAddTo(int, int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i6, $i9;
        int[] $r0, $r1;
        long l4, l5, $l7, $l8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i3 := @parameter5: int;

        l5 = 0L;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        $i1 = 0;

     label1:
        $i6 = $i2 + $i1;

        $i6 = $r0[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 * l4;

        $i6 = $i3 + $i1;

        $i6 = $r1[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        l5 = l5 + $l7;

        $i6 = $i3 + $i1;

        $i9 = (int) l5;

        $r1[$i6] = $i9;

        l5 = l5 >>> 32;

        $i1 = $i1 + 1;

        if $i1 < $i0 goto label1;

        $i0 = (int) l5;

        return $i0;
    }
    public static int mulWordDwordAddAt(int, int, long, int[], int)
    {
        int $i0, $i1, $i3, $i7;
        long $l2, l4, $l5, $l6;
        int[] $r0;
        byte $b8;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r0 := @parameter3: int[];

        $i3 := @parameter4: int;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        $l5 = 4294967295L & $l2;

        $l5 = $l5 * l4;

        $i1 = $r0[$i3];

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        $l5 = 0L + $l5;

        $i7 = (int) $l5;

        $r0[$i3] = $i7;

        $l5 = $l5 >>> 32;

        $l2 = $l2 >>> 32;

        $l2 = $l2 * l4;

        $i1 = $i3 + 1;

        $i1 = $r0[$i1];

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        $l2 = $l2 + l4;

        $l2 = $l5 + $l2;

        $i1 = $i3 + 1;

        $i7 = (int) $l2;

        $r0[$i1] = $i7;

        $l2 = $l2 >>> 32;

        $i1 = $i3 + 2;

        $i1 = $r0[$i1];

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        $l2 = $l2 + l4;

        $i1 = $i3 + 2;

        $i7 = (int) $l2;

        $r0[$i1] = $i7;

        $l2 = $l2 >>> 32;

        $b8 = $l2 cmp 0L;

        if $b8 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i3 + 3;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int)>($i0, $r0, $i1);

        return $i0;
    }
    public static int shiftDownBit(int, int[], int)
    {
        int $i0, $i1, i2, $i3;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        i2 = $i0;

     label1:
        i2 = i2 + -1;

        if i2 < 0 goto label2;

        $i0 = $r0[i2];

        $i3 = $i0 >>> 1;

        $i1 = $i1 << 31;

        $i1 = $i3 | $i1;

        $r0[i2] = $i1;

        $i1 = $i0;

        goto label1;

     label2:
        $i0 = $i1 << 31;

        return $i0;
    }
    public static int shiftDownBit(int, int[], int, int)
    {
        int $i0, $i1, i2, $i3, $i4, $i5;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        i2 = $i1 + $i0;

        i2 = $r0[i2];

        $i4 = $i1 + $i0;

        $i5 = i2 >>> 1;

        $i3 = $i3 << 31;

        $i3 = $i5 | $i3;

        $r0[$i4] = $i3;

        $i3 = i2;

        goto label1;

     label2:
        $i0 = $i3 << 31;

        return $i0;
    }
    public static int shiftDownBit(int, int[], int, int, int[], int)
    {
        int $i0, $i1, $i2, i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i4 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i2 := @parameter5: int;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        i3 = $i1 + $i0;

        i3 = $r0[i3];

        $i5 = $i2 + $i0;

        $i6 = i3 >>> 1;

        $i4 = $i4 << 31;

        $i4 = $i6 | $i4;

        $r1[$i5] = $i4;

        $i4 = i3;

        goto label1;

     label2:
        $i0 = $i4 << 31;

        return $i0;
    }
    public static int shiftDownBit(int, int[], int, int[])
    {
        int $i0, $i1, i2, $i3;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        i2 = $i0;

     label1:
        i2 = i2 + -1;

        if i2 < 0 goto label2;

        $i0 = $r0[i2];

        $i3 = $i0 >>> 1;

        $i1 = $i1 << 31;

        $i1 = $i3 | $i1;

        $r1[i2] = $i1;

        $i1 = $i0;

        goto label1;

     label2:
        $i0 = $i1 << 31;

        return $i0;
    }
    public static int shiftDownBits(int, int[], int, int)
    {
        int $i0, $i1, $i2, i3, $i4, $i5;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = $i0;

     label1:
        i3 = i3 + -1;

        if i3 < 0 goto label2;

        $i0 = $r0[i3];

        $i4 = $i0 >>> $i1;

        $i5 = neg $i1;

        $i2 = $i2 << $i5;

        $i2 = $i4 | $i2;

        $r0[i3] = $i2;

        $i2 = $i0;

        goto label1;

     label2:
        $i0 = neg $i1;

        $i0 = $i2 << $i0;

        return $i0;
    }
    public static int shiftDownBits(int, int[], int, int, int)
    {
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i4 := @parameter4: int;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        i3 = $i1 + $i0;

        i3 = $r0[i3];

        $i5 = $i1 + $i0;

        $i6 = i3 >>> $i2;

        $i7 = neg $i2;

        $i4 = $i4 << $i7;

        $i4 = $i6 | $i4;

        $r0[$i5] = $i4;

        $i4 = i3;

        goto label1;

     label2:
        $i0 = neg $i2;

        $i0 = $i4 << $i0;

        return $i0;
    }
    public static int shiftDownBits(int, int[], int, int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i5 := @parameter4: int;

        $r1 := @parameter5: int[];

        $i3 := @parameter6: int;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        i4 = $i1 + $i0;

        i4 = $r0[i4];

        $i6 = $i3 + $i0;

        $i7 = i4 >>> $i2;

        $i8 = neg $i2;

        $i5 = $i5 << $i8;

        $i5 = $i7 | $i5;

        $r1[$i6] = $i5;

        $i5 = i4;

        goto label1;

     label2:
        $i0 = neg $i2;

        $i0 = $i5 << $i0;

        return $i0;
    }
    public static int shiftDownBits(int, int[], int, int, int[])
    {
        int $i0, $i1, $i2, i3, $i4, $i5;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: int[];

        i3 = $i0;

     label1:
        i3 = i3 + -1;

        if i3 < 0 goto label2;

        $i0 = $r0[i3];

        $i4 = $i0 >>> $i1;

        $i5 = neg $i1;

        $i2 = $i2 << $i5;

        $i2 = $i4 | $i2;

        $r1[i3] = $i2;

        $i2 = $i0;

        goto label1;

     label2:
        $i0 = neg $i1;

        $i0 = $i2 << $i0;

        return $i0;
    }
    public static int shiftDownWord(int, int[], int)
    {
        int $i0, $i1, i2;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        i2 = $i0;

     label1:
        i2 = i2 + -1;

        if i2 < 0 goto label2;

        $i0 = $r0[i2];

        $r0[i2] = $i1;

        $i1 = $i0;

        goto label1;

     label2:
        return $i1;
    }
    public static int shiftUpBit(int, int[], int)
    {
        int $i0, i1, $i2, i3, $i4;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i2 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        i1 = $r0[i3];

        $i4 = i1 << 1;

        $i2 = $i2 >>> 31;

        $i2 = $i4 | $i2;

        $r0[i3] = $i2;

        $i2 = i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i0 = $i2 >>> 31;

        return $i0;
    }
    public static int shiftUpBit(int, int[], int, int)
    {
        int $i0, $i1, i2, $i3, i4, $i5, $i6;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        i2 = $i1 + i4;

        i2 = $r0[i2];

        $i5 = $i1 + i4;

        $i6 = i2 << 1;

        $i3 = $i3 >>> 31;

        $i3 = $i6 | $i3;

        $r0[$i5] = $i3;

        $i3 = i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i0 = $i3 >>> 31;

        return $i0;
    }
    public static int shiftUpBit(int, int[], int, int, int[], int)
    {
        int $i0, $i1, $i2, i3, $i4, i5, $i6, $i7;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i4 := @parameter3: int;

        $r1 := @parameter4: int[];

        $i2 := @parameter5: int;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        i3 = $i1 + i5;

        i3 = $r0[i3];

        $i6 = $i2 + i5;

        $i7 = i3 << 1;

        $i4 = $i4 >>> 31;

        $i4 = $i7 | $i4;

        $r1[$i6] = $i4;

        $i4 = i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = $i4 >>> 31;

        return $i0;
    }
    public static int shiftUpBit(int, int[], int, int[])
    {
        int $i0, i1, $i2, i3, $i4;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i2 := @parameter2: int;

        $r1 := @parameter3: int[];

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        i1 = $r0[i3];

        $i4 = i1 << 1;

        $i2 = $i2 >>> 31;

        $i2 = $i4 | $i2;

        $r1[i3] = $i2;

        $i2 = i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i0 = $i2 >>> 31;

        return $i0;
    }
    public static long shiftUpBit64(int, long[], int, long, long[], int)
    {
        int $i0, $i1, $i2, i5, $i6;
        long[] $r0, $r1;
        long l3, $l4, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: long[];

        $i1 := @parameter2: int;

        $l4 := @parameter3: long;

        $r1 := @parameter4: long[];

        $i2 := @parameter5: int;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $i6 = $i1 + i5;

        l3 = $r0[$i6];

        $i6 = $i2 + i5;

        $l7 = l3 << 1;

        $l4 = $l4 >>> 63;

        $l4 = $l7 | $l4;

        $r1[$i6] = $l4;

        $l4 = l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $l4 = $l4 >>> 63;

        return $l4;
    }
    public static int shiftUpBits(int, int[], int, int)
    {
        int $i0, $i1, i2, $i3, i4, $i5, $i6;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        i2 = $r0[i4];

        $i5 = i2 << $i1;

        $i6 = neg $i1;

        $i3 = $i3 >>> $i6;

        $i3 = $i5 | $i3;

        $r0[i4] = $i3;

        $i3 = i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i0 = neg $i1;

        $i0 = $i3 >>> $i0;

        return $i0;
    }
    public static int shiftUpBits(int, int[], int, int, int)
    {
        int $i0, $i1, $i2, i3, $i4, i5, $i6, $i7, $i8;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i4 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        i3 = $i1 + i5;

        i3 = $r0[i3];

        $i6 = $i1 + i5;

        $i7 = i3 << $i2;

        $i8 = neg $i2;

        $i4 = $i4 >>> $i8;

        $i4 = $i7 | $i4;

        $r0[$i6] = $i4;

        $i4 = i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = neg $i2;

        $i0 = $i4 >>> $i0;

        return $i0;
    }
    public static int shiftUpBits(int, int[], int, int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i7, $i8, $i9;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i5 := @parameter4: int;

        $r1 := @parameter5: int[];

        $i3 := @parameter6: int;

        i6 = 0;

     label1:
        if i6 >= $i0 goto label2;

        i4 = $i1 + i6;

        i4 = $r0[i4];

        $i7 = $i3 + i6;

        $i8 = i4 << $i2;

        $i9 = neg $i2;

        $i5 = $i5 >>> $i9;

        $i5 = $i8 | $i5;

        $r1[$i7] = $i5;

        $i5 = i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i0 = neg $i2;

        $i0 = $i5 >>> $i0;

        return $i0;
    }
    public static int shiftUpBits(int, int[], int, int, int[])
    {
        int $i0, $i1, i2, $i3, i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: int[];

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        i2 = $r0[i4];

        $i5 = i2 << $i1;

        $i6 = neg $i1;

        $i3 = $i3 >>> $i6;

        $i3 = $i5 | $i3;

        $r1[i4] = $i3;

        $i3 = i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i0 = neg $i1;

        $i0 = $i3 >>> $i0;

        return $i0;
    }
    public static long shiftUpBits64(int, long[], int, int, long)
    {
        int $i0, $i1, $i2, i5, $i6, $i8;
        long[] $r0;
        long l3, $l4, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: long[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $l4 := @parameter4: long;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $i6 = $i1 + i5;

        l3 = $r0[$i6];

        $i6 = $i1 + i5;

        $l7 = l3 << $i2;

        $i8 = neg $i2;

        $l4 = $l4 >>> $i8;

        $l4 = $l7 | $l4;

        $r0[$i6] = $l4;

        $l4 = l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = neg $i2;

        $l4 = $l4 >>> $i0;

        return $l4;
    }
    public static long shiftUpBits64(int, long[], int, int, long, long[], int)
    {
        int $i0, $i1, $i2, $i3, i6, $i7, $i9;
        long[] $r0, $r1;
        long l4, $l5, $l8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: long[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $l5 := @parameter4: long;

        $r1 := @parameter5: long[];

        $i3 := @parameter6: int;

        i6 = 0;

     label1:
        if i6 >= $i0 goto label2;

        $i7 = $i1 + i6;

        l4 = $r0[$i7];

        $i7 = $i3 + i6;

        $l8 = l4 << $i2;

        $i9 = neg $i2;

        $l5 = $l5 >>> $i9;

        $l5 = $l8 | $l5;

        $r1[$i7] = $l5;

        $l5 = l4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i0 = neg $i2;

        $l5 = $l5 >>> $i0;

        return $l5;
    }
    public static void square(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, i3, $i5, i6, i7, $i8, $i10;
        int[] $r0, $r1;
        long l4, $l9;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        i3 = $i0 << 1;

        i6 = 0;

        $i5 = $i0;

        i7 = i3;

     label1:
        $i5 = $i5 + -1;

        $i8 = $i1 + $i5;

        $i8 = $r0[$i8];

        l4 = (long) $i8;

        l4 = l4 & 4294967295L;

        l4 = l4 * l4;

        i7 = i7 + -1;

        $i8 = $i2 + i7;

        i6 = i6 << 31;

        $l9 = l4 >>> 33;

        $i10 = (int) $l9;

        i6 = i6 | $i10;

        $r1[$i8] = i6;

        i7 = i7 + -1;

        i6 = $i2 + i7;

        $l9 = l4 >>> 1;

        $i8 = (int) $l9;

        $r1[i6] = $i8;

        i6 = (int) l4;

        if $i5 > 0 goto label1;

        i6 = 1;

     label2:
        if i6 >= $i0 goto label3;

        $i5 = staticinvoke <org.spongycastle.math.raw.Nat: int squareWordAdd(int[],int,int,int[],int)>($r0, $i1, i6, $r1, $i2);

        i7 = i6 << 1;

        staticinvoke <org.spongycastle.math.raw.Nat: int addWordAt(int,int,int[],int,int)>(i3, $i5, $r1, $i2, i7);

        i6 = i6 + 1;

        goto label2;

     label3:
        $i0 = $r0[$i1];

        $i0 = $i0 << 31;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int,int)>(i3, $r1, $i2, $i0);

        return;
    }
    public static void square(int, int[], int[])
    {
        int $i0, i1, $i3, i4, i5, $i6;
        int[] $r0, $r1;
        long l2, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        i1 = $i0 << 1;

        i4 = 0;

        $i3 = $i0;

        i5 = i1;

     label1:
        $i3 = $i3 + -1;

        $i6 = $r0[$i3];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        l2 = l2 * l2;

        i5 = i5 + -1;

        i4 = i4 << 31;

        $l7 = l2 >>> 33;

        $i6 = (int) $l7;

        i4 = i4 | $i6;

        $r1[i5] = i4;

        i5 = i5 + -1;

        $l7 = l2 >>> 1;

        i4 = (int) $l7;

        $r1[i5] = i4;

        i4 = (int) l2;

        if $i3 > 0 goto label1;

        i5 = 1;

     label2:
        if i5 >= $i0 goto label3;

        $i3 = staticinvoke <org.spongycastle.math.raw.Nat: int squareWordAdd(int[],int,int[])>($r0, i5, $r1);

        i4 = i5 << 1;

        staticinvoke <org.spongycastle.math.raw.Nat: int addWordAt(int,int,int[],int)>(i1, $i3, $r1, i4);

        i5 = i5 + 1;

        goto label2;

     label3:
        $i0 = $r0[0];

        $i0 = $i0 << 31;

        staticinvoke <org.spongycastle.math.raw.Nat: int shiftUpBit(int,int[],int)>(i1, $r1, $i0);

        return;
    }
    public static int squareWordAdd(int[], int, int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i3, $i5, $i6, $i9;
        long l2, l4, $l7, $l8;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i3 := @parameter4: int;

        l4 = 0L;

        $i5 = $i0 + $i1;

        $i5 = $r0[$i5];

        l2 = (long) $i5;

        l2 = l2 & 4294967295L;

        $i5 = 0;

     label1:
        $i6 = $i0 + $i5;

        $i6 = $r0[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $l7 = $l7 * l2;

        $i6 = $i1 + $i3;

        $i6 = $r1[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        l4 = l4 + $l7;

        $i6 = $i1 + $i3;

        $i9 = (int) l4;

        $r1[$i6] = $i9;

        l4 = l4 >>> 32;

        $i3 = $i3 + 1;

        $i5 = $i5 + 1;

        if $i5 < $i1 goto label1;

        $i0 = (int) l4;

        return $i0;
    }
    public static int squareWordAdd(int[], int, int[])
    {
        int[] $r0, $r1;
        int $i0, $i3, $i4, $i7;
        long l1, l2, $l5, $l6;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        l2 = 0L;

        $i3 = $r0[$i0];

        l1 = (long) $i3;

        l1 = l1 & 4294967295L;

        $i3 = 0;

     label1:
        $i4 = $r0[$i3];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l1;

        $i4 = $i0 + $i3;

        $i4 = $r1[$i4];

        $l6 = (long) $i4;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        l2 = l2 + $l5;

        $i4 = $i0 + $i3;

        $i7 = (int) l2;

        $r1[$i4] = $i7;

        l2 = l2 >>> 32;

        $i3 = $i3 + 1;

        if $i3 < $i0 goto label1;

        $i0 = (int) l2;

        return $i0;
    }
    public static int sub(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, i5, $i6, $i9;
        int[] $r0, $r1, $r2;
        long l4, $l7, $l8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $i6 = $i1 + i5;

        $i6 = $r0[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $i6 = $i2 + i5;

        $i6 = $r1[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 - $l8;

        l4 = l4 + $l7;

        $i6 = $i3 + i5;

        $i9 = (int) l4;

        $r2[$i6] = $i9;

        l4 = l4 >> 32;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = (int) l4;

        return $i0;
    }
    public static int sub(int, int[], int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1, $r2;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r0[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r1[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r2[i2] = $i3;

        l1 = l1 >> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int sub33At(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $i3 = (int) $l4;

        $r0[$i2] = $i3;

        $l4 = $l4 >> 32;

        $i1 = $i2 + 1;

        $i1 = $r0[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 - 1L;

        $l4 = $l4 + $l5;

        $i1 = $i2 + 1;

        $i3 = (int) $l4;

        $r0[$i1] = $i3;

        $l4 = $l4 >> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i2 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, $i1);

        return $i0;
    }
    public static int sub33At(int, int, int[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;
        long $l5, $l6;
        byte $b7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 = $i2 + $i3;

        $i4 = $r0[$i4];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 - $l6;

        $i1 = $i2 + $i3;

        $i4 = (int) $l5;

        $r0[$i1] = $i4;

        $l5 = $l5 >> 32;

        $i1 = $i2 + $i3;

        $i1 = $i1 + 1;

        $i1 = $r0[$i1];

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l6 = $l6 - 1L;

        $l5 = $l5 + $l6;

        $i1 = $i2 + $i3;

        $i1 = $i1 + 1;

        $i4 = (int) $l5;

        $r0[$i1] = $i4;

        $l5 = $l5 >> 32;

        $b7 = $l5 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i3 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, $i1);

        return $i0;
    }
    public static int sub33From(int, int, int[])
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3, $l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 = $r0[0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 - $l4;

        $i1 = (int) $l3;

        $r0[0] = $i1;

        $l3 = $l3 >> 32;

        $i1 = $r0[1];

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 - 1L;

        $l3 = $l3 + $l4;

        $i1 = (int) $l3;

        $r0[1] = $i1;

        $l3 = $l3 >> 32;

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, 2);

        return $i0;
    }
    public static int sub33From(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $i3 = (int) $l4;

        $r0[$i2] = $i3;

        $l4 = $l4 >> 32;

        $i1 = $i2 + 1;

        $i1 = $r0[$i1];

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 - 1L;

        $l4 = $l4 + $l5;

        $i1 = $i2 + 1;

        $i3 = (int) $l4;

        $r0[$i1] = $i3;

        $l4 = $l4 >> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, 2);

        return $i0;
    }
    public static int subBothFrom(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, i5, $i6, $i9;
        int[] $r0, $r1, $r2;
        long l4, $l7, $l8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $i6 = $i3 + i5;

        $i6 = $r2[$i6];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $i6 = $i1 + i5;

        $i6 = $r0[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 - $l8;

        $i6 = $i2 + i5;

        $i6 = $r1[$i6];

        $l8 = (long) $i6;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 - $l8;

        l4 = l4 + $l7;

        $i6 = $i3 + i5;

        $i9 = (int) l4;

        $r2[$i6] = $i9;

        l4 = l4 >> 32;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i0 = (int) l4;

        return $i0;
    }
    public static int subBothFrom(int, int[], int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1, $r2;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r2[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r0[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $i3 = $r1[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r2[i2] = $i3;

        l1 = l1 >> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int subDWordAt(int, long, int[], int)
    {
        int $i0, $i2, $i3, $i6;
        long $l1, $l4, $l5;
        int[] $r0;
        byte $b7;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = $l1 & 4294967295L;

        $l4 = $l4 - $l5;

        $i6 = (int) $l4;

        $r0[$i2] = $i6;

        $l4 = $l4 >> 32;

        $i3 = $i2 + 1;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l5 - $l1;

        $l1 = $l4 + $l1;

        $i3 = $i2 + 1;

        $i6 = (int) $l1;

        $r0[$i3] = $i6;

        $l1 = $l1 >> 32;

        $b7 = $l1 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i2 = $i2 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, $i2);

        return $i0;
    }
    public static int subDWordAt(int, long, int[], int, int)
    {
        int $i0, $i2, $i3, $i4, $i7;
        long $l1, $l5, $l6;
        int[] $r0;
        byte $b8;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 = $i2 + $i3;

        $i4 = $r0[$i4];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l6 = $l1 & 4294967295L;

        $l5 = $l5 - $l6;

        $i4 = $i2 + $i3;

        $i7 = (int) $l5;

        $r0[$i4] = $i7;

        $l5 = $l5 >> 32;

        $i4 = $i2 + $i3;

        $i4 = $i4 + 1;

        $i4 = $r0[$i4];

        $l6 = (long) $i4;

        $l6 = $l6 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l6 - $l1;

        $l1 = $l5 + $l1;

        $i4 = $i2 + $i3;

        $i4 = $i4 + 1;

        $i7 = (int) $l1;

        $r0[$i4] = $i7;

        $l1 = $l1 >> 32;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label1;

        return 0;

     label1:
        $i3 = $i3 + 2;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, $i3);

        return $i0;
    }
    public static int subDWordFrom(int, long, int[])
    {
        int $i0, $i2;
        long $l1, $l3, $l4;
        int[] $r0;
        byte $b5;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 = $r0[0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $l4 = $l1 & 4294967295L;

        $l3 = $l3 - $l4;

        $i2 = (int) $l3;

        $r0[0] = $i2;

        $l3 = $l3 >> 32;

        $i2 = $r0[1];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l4 - $l1;

        $l1 = $l3 + $l1;

        $i2 = (int) $l1;

        $r0[1] = $i2;

        $l1 = $l1 >> 32;

        $b5 = $l1 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, 2);

        return $i0;
    }
    public static int subDWordFrom(int, long, int[], int)
    {
        int $i0, $i2, $i3, $i6;
        long $l1, $l4, $l5;
        int[] $r0;
        byte $b7;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = $l1 & 4294967295L;

        $l4 = $l4 - $l5;

        $i6 = (int) $l4;

        $r0[$i2] = $i6;

        $l4 = $l4 >> 32;

        $i3 = $i2 + 1;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l1 = $l1 >>> 32;

        $l1 = $l5 - $l1;

        $l1 = $l4 + $l1;

        $i3 = $i2 + 1;

        $i6 = (int) $l1;

        $r0[$i3] = $i6;

        $l1 = $l1 >> 32;

        $b7 = $l1 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, 2);

        return $i0;
    }
    public static int subFrom(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, i4, $i5, $i8;
        int[] $r0, $r1;
        long l3, $l6, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        l3 = 0L;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $i5 = $i2 + i4;

        $i5 = $r1[$i5];

        $l6 = (long) $i5;

        $l6 = $l6 & 4294967295L;

        $i5 = $i1 + i4;

        $i5 = $r0[$i5];

        $l7 = (long) $i5;

        $l7 = $l7 & 4294967295L;

        $l6 = $l6 - $l7;

        l3 = l3 + $l6;

        $i5 = $i2 + i4;

        $i8 = (int) l3;

        $r1[$i5] = $i8;

        l3 = l3 >> 32;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i0 = (int) l3;

        return $i0;
    }
    public static int subFrom(int, int[], int[])
    {
        int $i0, i2, $i3;
        int[] $r0, $r1;
        long l1, $l4, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        l1 = 0L;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i3 = $r1[i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r0[i2];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        l1 = l1 + $l4;

        $i3 = (int) l1;

        $r1[i2] = $i3;

        l1 = l1 >> 32;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i0 = (int) l1;

        return $i0;
    }
    public static int subWordAt(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $i1 = (int) $l4;

        $r0[$i2] = $i1;

        $l4 = $l4 >> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i2 + 1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, $i1);

        return $i0;
    }
    public static int subWordAt(int, int, int[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;
        long $l5, $l6;
        byte $b7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 = $i2 + $i3;

        $i4 = $r0[$i4];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l6 = (long) $i1;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 - $l6;

        $i4 = $i2 + $i3;

        $i1 = (int) $l5;

        $r0[$i4] = $i1;

        $l5 = $l5 >> 32;

        $b7 = $l5 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i1 = $i3 + 1;

        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, $i1);

        return $i0;
    }
    public static int subWordFrom(int, int, int[])
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3, $l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 = $r0[0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $l4 = (long) $i1;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 - $l4;

        $i1 = (int) $l3;

        $r0[0] = $i1;

        $l3 = $l3 >> 32;

        $b5 = $l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int)>($i0, $r0, 1);

        return $i0;
    }
    public static int subWordFrom(int, int, int[], int)
    {
        int $i0, $i1, $i2, $i3;
        int[] $r0;
        long $l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        $i3 = $r0[$i2];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $l5 = (long) $i1;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $i1 = (int) $l4;

        $r0[$i2] = $i1;

        $l4 = $l4 >> 32;

        $b6 = $l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int decAt(int,int[],int,int)>($i0, $r0, $i2, 1);

        return $i0;
    }
    public static java.math.BigInteger toBigInteger(int, int[])
    {
        int $i0, i1, i2, $i3;
        int[] $r0;
        byte[] r1;
        java.math.BigInteger $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = $i0 << 2;

        r1 = newarray (byte)[i1];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        i1 = $r0[i2];

        if i1 == 0 goto label2;

        $i3 = $i0 + -1;

        $i3 = $i3 - i2;

        $i3 = $i3 << 2;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>(i1, r1, $i3);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r2;
    }
    public static void zero(int, int[])
    {
        int $i0, i1;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r0[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
