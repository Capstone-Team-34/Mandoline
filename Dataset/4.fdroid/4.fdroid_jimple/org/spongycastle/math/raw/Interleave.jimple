org.spongycastle.math.raw.Interleave extends java.lang.Object
private static final long M32
private static final long M64
    public void <init>()
    {
        org.spongycastle.math.raw.Interleave r0;

        r0 := @this: org.spongycastle.math.raw.Interleave;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int expand16to32(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i0 = $i0 & 65535;

        $i1 = $i0 << 8;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 16711935;

        $i1 = $i0 << 4;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 252645135;

        $i1 = $i0 << 2;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 858993459;

        $i1 = $i0 << 1;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 1431655765;

        return $i0;
    }
    public static long expand32to64(int)
    {
        int $i0, $i1, $i2;
        long $l3, $l4;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 8;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 & 65280;

        $i2 = $i1 << 8;

        $i1 = $i2 ^ $i1;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 4;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 & 15728880;

        $i2 = $i1 << 4;

        $i1 = $i2 ^ $i1;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 2;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 & 202116108;

        $i2 = $i1 << 2;

        $i1 = $i2 ^ $i1;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 1;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 & 572662306;

        $i2 = $i1 << 1;

        $i1 = $i2 ^ $i1;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 1;

        $l3 = (long) $i1;

        $l3 = $l3 & 1431655765L;

        $l3 = $l3 << 32;

        $l4 = (long) $i0;

        $l4 = $l4 & 1431655765L;

        $l3 = $l3 | $l4;

        return $l3;
    }
    public static void expand64To128(long, long[], int)
    {
        long[] $r0;
        int $i0;
        long $l1, $l2, $l3;

        $l1 := @parameter0: long;

        $r0 := @parameter1: long[];

        $i0 := @parameter2: int;

        $l2 = $l1 >>> 16;

        $l2 = $l2 ^ $l1;

        $l2 = $l2 & 4294901760L;

        $l3 = $l2 << 16;

        $l2 = $l3 ^ $l2;

        $l1 = $l1 ^ $l2;

        $l2 = $l1 >>> 8;

        $l2 = $l2 ^ $l1;

        $l2 = $l2 & 280375465148160L;

        $l3 = $l2 << 8;

        $l2 = $l3 ^ $l2;

        $l1 = $l1 ^ $l2;

        $l2 = $l1 >>> 4;

        $l2 = $l2 ^ $l1;

        $l2 = $l2 & 67555025218437360L;

        $l3 = $l2 << 4;

        $l2 = $l3 ^ $l2;

        $l1 = $l1 ^ $l2;

        $l2 = $l1 >>> 2;

        $l2 = $l2 ^ $l1;

        $l2 = $l2 & 868082074056920076L;

        $l3 = $l2 << 2;

        $l2 = $l3 ^ $l2;

        $l1 = $l1 ^ $l2;

        $l2 = $l1 >>> 1;

        $l2 = $l2 ^ $l1;

        $l2 = $l2 & 2459565876494606882L;

        $l3 = $l2 << 1;

        $l2 = $l3 ^ $l2;

        $l1 = $l1 ^ $l2;

        $l2 = 6148914691236517205L & $l1;

        $r0[$i0] = $l2;

        $i0 = $i0 + 1;

        $l1 = $l1 >>> 1;

        $l1 = $l1 & 6148914691236517205L;

        $r0[$i0] = $l1;

        return;
    }
    public static int expand8to16(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i0 = $i0 & 255;

        $i1 = $i0 << 4;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 3855;

        $i1 = $i0 << 2;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 13107;

        $i1 = $i0 << 1;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 21845;

        return $i0;
    }
