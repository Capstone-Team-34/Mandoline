org.spongycastle.math.raw.Nat160 extends java.lang.Object
private static final long M
    public void <init>()
    {
        org.spongycastle.math.raw.Nat160 r0;

        r0 := @this: org.spongycastle.math.raw.Nat160;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int add(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r2[0] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[1] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[2] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[3] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[4] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int addBothTo(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $i0 = $r2[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r2[0] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i0 = $r2[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[1] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i0 = $r2[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[2] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i0 = $r2[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[3] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $i0 = $r2[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[4] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int addTo(int[], int, int[], int, int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i6;
        long $l3, $l4, $l5;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $i2 = $r0[$i0];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $r1[$i1];

        $l5 = (long) $i2;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l3 = $l3 + $l4;

        $i6 = (int) $l3;

        $r1[$i1] = $i6;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 1;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 1;

        $i2 = $r1[$i2];

        $l5 = (long) $i2;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 1;

        $i6 = (int) $l3;

        $r1[$i2] = $i6;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 2;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 2;

        $i2 = $r1[$i2];

        $l5 = (long) $i2;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 2;

        $i6 = (int) $l3;

        $r1[$i2] = $i6;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 3;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 3;

        $i2 = $r1[$i2];

        $l5 = (long) $i2;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 3;

        $i6 = (int) $l3;

        $r1[$i2] = $i6;

        $l3 = $l3 >>> 32;

        $i0 = $i0 + 4;

        $i0 = $r0[$i0];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $i0 = $i1 + 4;

        $i0 = $r1[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l3 = $l3 + $l4;

        $i0 = $i1 + 4;

        $i1 = (int) $l3;

        $r1[$i0] = $i1;

        $l3 = $l3 >>> 32;

        $i0 = (int) $l3;

        return $i0;
    }
    public static int addTo(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 + $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r1[0] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[1] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[2] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[3] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 + $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[4] = $i0;

        $l1 = $l1 >>> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int addToEachOther(int[], int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i5;
        long $l3, $l4, $l6;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 = $r0[$i0];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $i2 = $r1[$i1];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 + $l4;

        $l3 = 0L + $l3;

        $i5 = (int) $l3;

        $r0[$i0] = $i5;

        $i5 = (int) $l3;

        $r1[$i1] = $i5;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 1;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 1;

        $i2 = $r1[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 + $l6;

        $l3 = $l3 + $l4;

        $i2 = $i0 + 1;

        $i5 = (int) $l3;

        $r0[$i2] = $i5;

        $i2 = $i1 + 1;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 2;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 2;

        $i2 = $r1[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 + $l6;

        $l3 = $l3 + $l4;

        $i2 = $i0 + 2;

        $i5 = (int) $l3;

        $r0[$i2] = $i5;

        $i2 = $i1 + 2;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 3;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 3;

        $i2 = $r1[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 + $l6;

        $l3 = $l3 + $l4;

        $i2 = $i0 + 3;

        $i5 = (int) $l3;

        $r0[$i2] = $i5;

        $i2 = $i1 + 3;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >>> 32;

        $i2 = $i0 + 4;

        $i2 = $r0[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i1 + 4;

        $i2 = $r1[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 + $l6;

        $l3 = $l3 + $l4;

        $i0 = $i0 + 4;

        $i2 = (int) $l3;

        $r0[$i0] = $i2;

        $i0 = $i1 + 4;

        $i1 = (int) $l3;

        $r1[$i0] = $i1;

        $l3 = $l3 >>> 32;

        $i0 = (int) $l3;

        return $i0;
    }
    public static void copy(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $r1[0] = $i0;

        $i0 = $r0[1];

        $r1[1] = $i0;

        $i0 = $r0[2];

        $r1[2] = $i0;

        $i0 = $r0[3];

        $r1[3] = $i0;

        $i0 = $r0[4];

        $r1[4] = $i0;

        return;
    }
    public static int[] create()
    {
        int[] $r0;

        $r0 = newarray (int)[5];

        return $r0;
    }
    public static int[] createExt()
    {
        int[] $r0;

        $r0 = newarray (int)[10];

        return $r0;
    }
    public static boolean diff(int[], int, int[], int, int[], int)
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: int[];

        $i2 := @parameter5: int;

        $z0 = staticinvoke <org.spongycastle.math.raw.Nat160: boolean gte(int[],int,int[],int)>($r0, $i0, $r1, $i1);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.math.raw.Nat160: int sub(int[],int,int[],int,int[],int)>($r0, $i0, $r1, $i1, $r2, $i2);

        return $z0;

     label1:
        staticinvoke <org.spongycastle.math.raw.Nat160: int sub(int[],int,int[],int,int[],int)>($r1, $i1, $r0, $i0, $r2, $i2);

        return $z0;
    }
    public static boolean eq(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i1 = 4;

     label1:
        if i1 < 0 goto label3;

        $i2 = $r0[i1];

        $i0 = $r1[i1];

        if $i2 == $i0 goto label2;

        return 0;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static int[] fromBigInteger(java.math.BigInteger)
    {
        int i0, $i1, $i2;
        java.math.BigInteger $r0;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i1 < 0 goto label1;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 160 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        $r2 = staticinvoke <org.spongycastle.math.raw.Nat160: int[] create()>();

        $i1 = 0;

     label3:
        i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if i0 == 0 goto label4;

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        $r2[$i1] = $i2;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(32);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r2;
    }
    public static int getBit(int[], int)
    {
        int[] $r0;
        int $i0, i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = $r0[0];

        $i0 = $i0 & 1;

        return $i0;

     label1:
        i1 = $i0 >> 5;

        if i1 < 0 goto label2;

        if i1 >= 5 goto label2;

        $i0 = $i0 & 31;

        i1 = $r0[i1];

        $i0 = i1 >>> $i0;

        $i0 = $i0 & 1;

        return $i0;

     label2:
        return 0;
    }
    public static boolean gte(int[], int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, i2, i3, i4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        i4 = 4;

     label1:
        if i4 < 0 goto label3;

        i2 = $i0 + i4;

        i2 = $r0[i2];

        i2 = i2 ^ -2147483648;

        i3 = $i1 + i4;

        i3 = $r1[i3];

        i3 = i3 ^ -2147483648;

        if i2 >= i3 goto label2;

        return 0;

     label2:
        if i2 > i3 goto label3;

        i4 = i4 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static boolean gte(int[], int[])
    {
        int[] $r0, $r1;
        int i0, i1, i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i2 = 4;

     label1:
        if i2 < 0 goto label3;

        i0 = $r0[i2];

        i0 = i0 ^ -2147483648;

        i1 = $r1[i2];

        i1 = i1 ^ -2147483648;

        if i0 >= i1 goto label2;

        return 0;

     label2:
        if i0 > i1 goto label3;

        i2 = i2 + -1;

        goto label1;

     label3:
        return 1;
    }
    public static boolean isOne(int[])
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 = $r0[0];

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $i0 = 1;

     label2:
        if $i0 >= 5 goto label3;

        $i1 = $r0[$i0];

        if $i1 != 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static boolean isZero(int[])
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 = 0;

     label1:
        if i0 >= 5 goto label3;

        $i1 = $r0[i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static void mul(int[], int, int[], int, int[], int)
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1, $i8, $i9, $i12;
        long l2, l3, l4, l5, l6, l7, $l10, $l11, $l13;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: int[];

        $i8 := @parameter5: int;

        $i9 = $r1[$i1];

        l3 = (long) $i9;

        l3 = l3 & 4294967295L;

        $i9 = $i1 + 1;

        $i9 = $r1[$i9];

        l4 = (long) $i9;

        l4 = l4 & 4294967295L;

        $i9 = $i1 + 2;

        $i9 = $r1[$i9];

        l5 = (long) $i9;

        l5 = l5 & 4294967295L;

        $i9 = $i1 + 3;

        $i9 = $r1[$i9];

        l6 = (long) $i9;

        l6 = l6 & 4294967295L;

        $i1 = $i1 + 4;

        $i1 = $r1[$i1];

        l7 = (long) $i1;

        l7 = l7 & 4294967295L;

        $i1 = $r0[$i0];

        l2 = (long) $i1;

        l2 = l2 & 4294967295L;

        $l10 = l2 * l3;

        $l10 = 0L + $l10;

        $i9 = (int) $l10;

        $r2[$i8] = $i9;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l4;

        $l10 = $l10 + $l11;

        $i1 = $i8 + 1;

        $i9 = (int) $l10;

        $r2[$i1] = $i9;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l5;

        $l10 = $l10 + $l11;

        $i1 = $i8 + 2;

        $i9 = (int) $l10;

        $r2[$i1] = $i9;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l6;

        $l10 = $l10 + $l11;

        $i1 = $i8 + 3;

        $i9 = (int) $l10;

        $r2[$i1] = $i9;

        $l10 = $l10 >>> 32;

        l2 = l2 * l7;

        l2 = $l10 + l2;

        $i1 = $i8 + 4;

        $i9 = (int) l2;

        $r2[$i1] = $i9;

        l2 = l2 >>> 32;

        $i1 = $i8 + 5;

        $i9 = (int) l2;

        $r2[$i1] = $i9;

        $i1 = 1;

     label1:
        if $i1 >= 5 goto label2;

        $i8 = $i8 + 1;

        $i9 = $i0 + $i1;

        $i9 = $r0[$i9];

        l2 = (long) $i9;

        l2 = l2 & 4294967295L;

        $l10 = l2 * l3;

        $i9 = $r2[$i8];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        $l10 = $l10 + $l11;

        $l10 = 0L + $l10;

        $i12 = (int) $l10;

        $r2[$i8] = $i12;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l4;

        $i9 = $i8 + 1;

        $i9 = $r2[$i9];

        $l13 = (long) $i9;

        $l13 = $l13 & 4294967295L;

        $l11 = $l11 + $l13;

        $l10 = $l10 + $l11;

        $i9 = $i8 + 1;

        $i12 = (int) $l10;

        $r2[$i9] = $i12;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l5;

        $i9 = $i8 + 2;

        $i9 = $r2[$i9];

        $l13 = (long) $i9;

        $l13 = $l13 & 4294967295L;

        $l11 = $l11 + $l13;

        $l10 = $l10 + $l11;

        $i9 = $i8 + 2;

        $i12 = (int) $l10;

        $r2[$i9] = $i12;

        $l10 = $l10 >>> 32;

        $l11 = l2 * l6;

        $i9 = $i8 + 3;

        $i9 = $r2[$i9];

        $l13 = (long) $i9;

        $l13 = $l13 & 4294967295L;

        $l11 = $l11 + $l13;

        $l10 = $l10 + $l11;

        $i9 = $i8 + 3;

        $i12 = (int) $l10;

        $r2[$i9] = $i12;

        $l10 = $l10 >>> 32;

        l2 = l2 * l7;

        $i9 = $i8 + 4;

        $i9 = $r2[$i9];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        l2 = l2 + $l11;

        l2 = $l10 + l2;

        $i9 = $i8 + 4;

        $i12 = (int) l2;

        $r2[$i9] = $i12;

        l2 = l2 >>> 32;

        $i9 = $i8 + 5;

        $i12 = (int) l2;

        $r2[$i9] = $i12;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void mul(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        long l0, l1, l2, l3, l4, l5, $l7, $l8, $l11;
        int $i6, $i9, $i10;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i6 = $r1[0];

        l1 = (long) $i6;

        l1 = l1 & 4294967295L;

        $i6 = $r1[1];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        $i6 = $r1[2];

        l3 = (long) $i6;

        l3 = l3 & 4294967295L;

        $i6 = $r1[3];

        l4 = (long) $i6;

        l4 = l4 & 4294967295L;

        $i6 = $r1[4];

        l5 = (long) $i6;

        l5 = l5 & 4294967295L;

        $i6 = $r0[0];

        l0 = (long) $i6;

        l0 = l0 & 4294967295L;

        $l7 = l0 * l1;

        $l7 = 0L + $l7;

        $i6 = (int) $l7;

        $r2[0] = $i6;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l2;

        $l7 = $l7 + $l8;

        $i6 = (int) $l7;

        $r2[1] = $i6;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l3;

        $l7 = $l7 + $l8;

        $i6 = (int) $l7;

        $r2[2] = $i6;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l4;

        $l7 = $l7 + $l8;

        $i6 = (int) $l7;

        $r2[3] = $i6;

        $l7 = $l7 >>> 32;

        l0 = l0 * l5;

        l0 = $l7 + l0;

        $i6 = (int) l0;

        $r2[4] = $i6;

        l0 = l0 >>> 32;

        $i6 = (int) l0;

        $r2[5] = $i6;

        $i6 = 1;

     label1:
        if $i6 >= 5 goto label2;

        $i9 = $r0[$i6];

        l0 = (long) $i9;

        l0 = l0 & 4294967295L;

        $l7 = l0 * l1;

        $i9 = $r2[$i6];

        $l8 = (long) $i9;

        $l8 = $l8 & 4294967295L;

        $l7 = $l7 + $l8;

        $l7 = 0L + $l7;

        $i10 = (int) $l7;

        $r2[$i6] = $i10;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l2;

        $i9 = $i6 + 1;

        $i9 = $r2[$i9];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        $l8 = $l8 + $l11;

        $l7 = $l7 + $l8;

        $i9 = $i6 + 1;

        $i10 = (int) $l7;

        $r2[$i9] = $i10;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l3;

        $i9 = $i6 + 2;

        $i9 = $r2[$i9];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        $l8 = $l8 + $l11;

        $l7 = $l7 + $l8;

        $i9 = $i6 + 2;

        $i10 = (int) $l7;

        $r2[$i9] = $i10;

        $l7 = $l7 >>> 32;

        $l8 = l0 * l4;

        $i9 = $i6 + 3;

        $i9 = $r2[$i9];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        $l8 = $l8 + $l11;

        $l7 = $l7 + $l8;

        $i9 = $i6 + 3;

        $i10 = (int) $l7;

        $r2[$i9] = $i10;

        $l7 = $l7 >>> 32;

        l0 = l0 * l5;

        $i9 = $i6 + 4;

        $i9 = $r2[$i9];

        $l8 = (long) $i9;

        $l8 = $l8 & 4294967295L;

        l0 = l0 + $l8;

        l0 = $l7 + l0;

        $i9 = $i6 + 4;

        $i10 = (int) l0;

        $r2[$i9] = $i10;

        l0 = l0 >>> 32;

        $i9 = $i6 + 5;

        $i10 = (int) l0;

        $r2[$i9] = $i10;

        $i6 = $i6 + 1;

        goto label1;

     label2:
        return;
    }
    public static long mul33Add(int, int[], int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i8;
        int[] $r0, $r1, $r2;
        long l4, l5, l6, $l7, $l9;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $r2 := @parameter5: int[];

        $i3 := @parameter6: int;

        l4 = (long) $i0;

        l4 = l4 & 4294967295L;

        $i0 = $r0[$i1];

        l6 = (long) $i0;

        l5 = l6 & 4294967295L;

        l6 = l4 * l5;

        $i0 = $r1[$i2];

        $l7 = (long) $i0;

        $l7 = $l7 & 4294967295L;

        l6 = l6 + $l7;

        l6 = 0L + l6;

        $i8 = (int) l6;

        $r2[$i3] = $i8;

        $l7 = l6 >>> 32;

        $i0 = $i1 + 1;

        $i0 = $r0[$i0];

        l6 = (long) $i0;

        l6 = l6 & 4294967295L;

        $l9 = l4 * l6;

        l5 = $l9 + l5;

        $i0 = $i2 + 1;

        $i0 = $r1[$i0];

        $l9 = (long) $i0;

        $l9 = $l9 & 4294967295L;

        l5 = l5 + $l9;

        l5 = $l7 + l5;

        $i0 = $i3 + 1;

        $i8 = (int) l5;

        $r2[$i0] = $i8;

        $l7 = l5 >>> 32;

        $i0 = $i1 + 2;

        $i0 = $r0[$i0];

        l5 = (long) $i0;

        l5 = l5 & 4294967295L;

        $l9 = l4 * l5;

        l6 = $l9 + l6;

        $i0 = $i2 + 2;

        $i0 = $r1[$i0];

        $l9 = (long) $i0;

        $l9 = $l9 & 4294967295L;

        l6 = l6 + $l9;

        l6 = $l7 + l6;

        $i0 = $i3 + 2;

        $i8 = (int) l6;

        $r2[$i0] = $i8;

        $l7 = l6 >>> 32;

        $i0 = $i1 + 3;

        $i0 = $r0[$i0];

        l6 = (long) $i0;

        l6 = l6 & 4294967295L;

        $l9 = l4 * l6;

        l5 = $l9 + l5;

        $i0 = $i2 + 3;

        $i0 = $r1[$i0];

        $l9 = (long) $i0;

        $l9 = $l9 & 4294967295L;

        l5 = l5 + $l9;

        l5 = $l7 + l5;

        $i0 = $i3 + 3;

        $i8 = (int) l5;

        $r2[$i0] = $i8;

        $l7 = l5 >>> 32;

        $i0 = $i1 + 4;

        $i0 = $r0[$i0];

        l5 = (long) $i0;

        l5 = l5 & 4294967295L;

        l4 = l4 * l5;

        l4 = l4 + l6;

        $i0 = $i2 + 4;

        $i0 = $r1[$i0];

        l6 = (long) $i0;

        l6 = l6 & 4294967295L;

        l4 = l4 + l6;

        l4 = $l7 + l4;

        $i0 = $i3 + 4;

        $i1 = (int) l4;

        $r2[$i0] = $i1;

        l4 = l4 >>> 32;

        l4 = l4 + l5;

        return l4;
    }
    public static int mul33DWordAdd(int, long, int[], int)
    {
        int $i0, $i2, $i7;
        long $l1, l3, l4, $l5, $l6;
        int[] $r0;
        byte $b8;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        l4 = (long) $i0;

        l3 = l4 & 4294967295L;

        l4 = $l1 & 4294967295L;

        $l5 = l3 * l4;

        $i0 = $r0[$i2];

        $l6 = (long) $i0;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 + $l6;

        $l5 = 0L + $l5;

        $i7 = (int) $l5;

        $r0[$i2] = $i7;

        $l5 = $l5 >>> 32;

        $l1 = $l1 >>> 32;

        l3 = l3 * $l1;

        l4 = l3 + l4;

        $i0 = $i2 + 1;

        $i0 = $r0[$i0];

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        l4 = l4 + l3;

        l4 = $l5 + l4;

        $i0 = $i2 + 1;

        $i7 = (int) l4;

        $r0[$i0] = $i7;

        l4 = l4 >>> 32;

        $i0 = $i2 + 2;

        $i0 = $r0[$i0];

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $l1 = l3 + $l1;

        $l1 = l4 + $l1;

        $i0 = $i2 + 2;

        $i7 = (int) $l1;

        $r0[$i0] = $i7;

        $l1 = $l1 >>> 32;

        $i0 = $i2 + 3;

        $i0 = $r0[$i0];

        l4 = (long) $i0;

        l4 = l4 & 4294967295L;

        $l1 = $l1 + l4;

        $i0 = $i2 + 3;

        $i7 = (int) $l1;

        $r0[$i0] = $i7;

        $l1 = $l1 >>> 32;

        $b8 = $l1 cmp 0L;

        if $b8 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>(5, $r0, $i2, 4);

        return $i0;
    }
    public static int mul33WordAdd(int, int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long l3, l4, $l5;
        byte $b6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        l4 = (long) $i0;

        l3 = l4 & 4294967295L;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        l3 = l4 * l3;

        $i0 = $r0[$i2];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        l3 = l3 + $l5;

        l3 = 0L + l3;

        $i1 = (int) l3;

        $r0[$i2] = $i1;

        l3 = l3 >>> 32;

        $i0 = $i2 + 1;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        l4 = $l5 + l4;

        l4 = l3 + l4;

        $i0 = $i2 + 1;

        $i1 = (int) l4;

        $r0[$i0] = $i1;

        l4 = l4 >>> 32;

        $i0 = $i2 + 2;

        $i0 = $r0[$i0];

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        l4 = l4 + l3;

        $i0 = $i2 + 2;

        $i1 = (int) l4;

        $r0[$i0] = $i1;

        l4 = l4 >>> 32;

        $b6 = l4 cmp 0L;

        if $b6 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>(5, $r0, $i2, 3);

        return $i0;
    }
    public static int mulAddTo(int[], int, int[], int, int[], int)
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1, $i8, $i9, $i13;
        long l2, l3, l4, l5, l6, l7, l10, $l11, $l12, $l14;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: int[];

        $i8 := @parameter5: int;

        $i9 = $r1[$i1];

        l3 = (long) $i9;

        l3 = l3 & 4294967295L;

        $i9 = $i1 + 1;

        $i9 = $r1[$i9];

        l4 = (long) $i9;

        l4 = l4 & 4294967295L;

        $i9 = $i1 + 2;

        $i9 = $r1[$i9];

        l5 = (long) $i9;

        l5 = l5 & 4294967295L;

        $i9 = $i1 + 3;

        $i9 = $r1[$i9];

        l6 = (long) $i9;

        l6 = l6 & 4294967295L;

        $i1 = $i1 + 4;

        $i1 = $r1[$i1];

        l7 = (long) $i1;

        l7 = l7 & 4294967295L;

        l10 = 0L;

        $i1 = 0;

     label1:
        if $i1 >= 5 goto label2;

        $i9 = $i0 + $i1;

        $i9 = $r0[$i9];

        l2 = (long) $i9;

        l2 = l2 & 4294967295L;

        $l11 = l2 * l3;

        $i9 = $r2[$i8];

        $l12 = (long) $i9;

        $l12 = $l12 & 4294967295L;

        $l11 = $l11 + $l12;

        $l11 = 0L + $l11;

        $i13 = (int) $l11;

        $r2[$i8] = $i13;

        $l11 = $l11 >>> 32;

        $l12 = l2 * l4;

        $i9 = $i8 + 1;

        $i9 = $r2[$i9];

        $l14 = (long) $i9;

        $l14 = $l14 & 4294967295L;

        $l12 = $l12 + $l14;

        $l11 = $l11 + $l12;

        $i9 = $i8 + 1;

        $i13 = (int) $l11;

        $r2[$i9] = $i13;

        $l11 = $l11 >>> 32;

        $l12 = l2 * l5;

        $i9 = $i8 + 2;

        $i9 = $r2[$i9];

        $l14 = (long) $i9;

        $l14 = $l14 & 4294967295L;

        $l12 = $l12 + $l14;

        $l11 = $l11 + $l12;

        $i9 = $i8 + 2;

        $i13 = (int) $l11;

        $r2[$i9] = $i13;

        $l11 = $l11 >>> 32;

        $l12 = l2 * l6;

        $i9 = $i8 + 3;

        $i9 = $r2[$i9];

        $l14 = (long) $i9;

        $l14 = $l14 & 4294967295L;

        $l12 = $l12 + $l14;

        $l11 = $l11 + $l12;

        $i9 = $i8 + 3;

        $i13 = (int) $l11;

        $r2[$i9] = $i13;

        $l11 = $l11 >>> 32;

        l2 = l2 * l7;

        $i9 = $i8 + 4;

        $i9 = $r2[$i9];

        $l12 = (long) $i9;

        $l12 = $l12 & 4294967295L;

        l2 = l2 + $l12;

        l2 = $l11 + l2;

        $i9 = $i8 + 4;

        $i13 = (int) l2;

        $r2[$i9] = $i13;

        l2 = l2 >>> 32;

        $i9 = $i8 + 5;

        $i9 = $r2[$i9];

        $l11 = (long) $i9;

        $l11 = $l11 & 4294967295L;

        l10 = $l11 + l10;

        l10 = l2 + l10;

        $i9 = $i8 + 5;

        $i13 = (int) l10;

        $r2[$i9] = $i13;

        l10 = l10 >>> 32;

        $i8 = $i8 + 1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i0 = (int) l10;

        return $i0;
    }
    public static int mulAddTo(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        long l0, l1, l2, l3, l4, l5, l7, $l9, $l10, $l12;
        int $i6, $i8, $i11;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i6 = $r1[0];

        l1 = (long) $i6;

        l1 = l1 & 4294967295L;

        $i6 = $r1[1];

        l2 = (long) $i6;

        l2 = l2 & 4294967295L;

        $i6 = $r1[2];

        l3 = (long) $i6;

        l3 = l3 & 4294967295L;

        $i6 = $r1[3];

        l4 = (long) $i6;

        l4 = l4 & 4294967295L;

        $i6 = $r1[4];

        l5 = (long) $i6;

        l5 = l5 & 4294967295L;

        l7 = 0L;

        $i6 = 0;

     label1:
        if $i6 >= 5 goto label2;

        $i8 = $r0[$i6];

        l0 = (long) $i8;

        l0 = l0 & 4294967295L;

        $l9 = l0 * l1;

        $i8 = $r2[$i6];

        $l10 = (long) $i8;

        $l10 = $l10 & 4294967295L;

        $l9 = $l9 + $l10;

        $l9 = 0L + $l9;

        $i11 = (int) $l9;

        $r2[$i6] = $i11;

        $l9 = $l9 >>> 32;

        $l10 = l0 * l2;

        $i8 = $i6 + 1;

        $i8 = $r2[$i8];

        $l12 = (long) $i8;

        $l12 = $l12 & 4294967295L;

        $l10 = $l10 + $l12;

        $l9 = $l9 + $l10;

        $i8 = $i6 + 1;

        $i11 = (int) $l9;

        $r2[$i8] = $i11;

        $l9 = $l9 >>> 32;

        $l10 = l0 * l3;

        $i8 = $i6 + 2;

        $i8 = $r2[$i8];

        $l12 = (long) $i8;

        $l12 = $l12 & 4294967295L;

        $l10 = $l10 + $l12;

        $l9 = $l9 + $l10;

        $i8 = $i6 + 2;

        $i11 = (int) $l9;

        $r2[$i8] = $i11;

        $l9 = $l9 >>> 32;

        $l10 = l0 * l4;

        $i8 = $i6 + 3;

        $i8 = $r2[$i8];

        $l12 = (long) $i8;

        $l12 = $l12 & 4294967295L;

        $l10 = $l10 + $l12;

        $l9 = $l9 + $l10;

        $i8 = $i6 + 3;

        $i11 = (int) $l9;

        $r2[$i8] = $i11;

        $l9 = $l9 >>> 32;

        l0 = l0 * l5;

        $i8 = $i6 + 4;

        $i8 = $r2[$i8];

        $l10 = (long) $i8;

        $l10 = $l10 & 4294967295L;

        l0 = l0 + $l10;

        l0 = $l9 + l0;

        $i8 = $i6 + 4;

        $i11 = (int) l0;

        $r2[$i8] = $i11;

        l0 = l0 >>> 32;

        $i8 = $i6 + 5;

        $i8 = $r2[$i8];

        $l9 = (long) $i8;

        $l9 = $l9 & 4294967295L;

        l7 = $l9 + l7;

        l7 = l0 + l7;

        $i8 = $i6 + 5;

        $i11 = (int) l7;

        $r2[$i8] = $i11;

        l7 = l7 >>> 32;

        $i6 = $i6 + 1;

        goto label1;

     label2:
        $i6 = (int) l7;

        return $i6;
    }
    public static int mulWord(int, int[], int[], int)
    {
        int $i0, $i1, $i4, $i6;
        int[] $r0, $r1;
        long l2, l3, $l5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        l3 = 0L;

        l2 = (long) $i0;

        l2 = l2 & 4294967295L;

        $i0 = 0;

     label1:
        $i4 = $r0[$i0];

        $l5 = (long) $i4;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l2;

        l3 = l3 + $l5;

        $i4 = $i1 + $i0;

        $i6 = (int) l3;

        $r1[$i4] = $i6;

        l3 = l3 >>> 32;

        $i0 = $i0 + 1;

        if $i0 < 5 goto label1;

        $i0 = (int) l3;

        return $i0;
    }
    public static int mulWordAddExt(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i6;
        int[] $r0, $r1;
        long l3, $l4, $l5, $l7;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $i0 = $r0[$i1];

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        $l4 = $l4 * l3;

        $i0 = $r1[$i2];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l4 = 0L + $l4;

        $i6 = (int) $l4;

        $r1[$i2] = $i6;

        $l4 = $l4 >>> 32;

        $i0 = $i1 + 1;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l3;

        $i0 = $i2 + 1;

        $i0 = $r1[$i0];

        $l7 = (long) $i0;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 + $l7;

        $l4 = $l4 + $l5;

        $i0 = $i2 + 1;

        $i6 = (int) $l4;

        $r1[$i0] = $i6;

        $l4 = $l4 >>> 32;

        $i0 = $i1 + 2;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l3;

        $i0 = $i2 + 2;

        $i0 = $r1[$i0];

        $l7 = (long) $i0;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 + $l7;

        $l4 = $l4 + $l5;

        $i0 = $i2 + 2;

        $i6 = (int) $l4;

        $r1[$i0] = $i6;

        $l4 = $l4 >>> 32;

        $i0 = $i1 + 3;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l5 = $l5 * l3;

        $i0 = $i2 + 3;

        $i0 = $r1[$i0];

        $l7 = (long) $i0;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 + $l7;

        $l4 = $l4 + $l5;

        $i0 = $i2 + 3;

        $i6 = (int) $l4;

        $r1[$i0] = $i6;

        $l4 = $l4 >>> 32;

        $i0 = $i1 + 4;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        l3 = $l5 * l3;

        $i0 = $i2 + 4;

        $i0 = $r1[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        l3 = l3 + $l5;

        l3 = $l4 + l3;

        $i0 = $i2 + 4;

        $i1 = (int) l3;

        $r1[$i0] = $i1;

        l3 = l3 >>> 32;

        $i0 = (int) l3;

        return $i0;
    }
    public static int mulWordDwordAdd(int, long, int[], int)
    {
        int $i0, $i2, $i6;
        long $l1, l3, $l4, $l5;
        int[] $r0;
        byte $b7;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $l4 = $l1 & 4294967295L;

        $l4 = $l4 * l3;

        $i0 = $r0[$i2];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 + $l5;

        $l4 = 0L + $l4;

        $i6 = (int) $l4;

        $r0[$i2] = $i6;

        $l4 = $l4 >>> 32;

        $l1 = $l1 >>> 32;

        $l1 = $l1 * l3;

        $i0 = $i2 + 1;

        $i0 = $r0[$i0];

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $l1 = $l1 + l3;

        $l1 = $l4 + $l1;

        $i0 = $i2 + 1;

        $i6 = (int) $l1;

        $r0[$i0] = $i6;

        $l1 = $l1 >>> 32;

        $i0 = $i2 + 2;

        $i0 = $r0[$i0];

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        $l1 = $l1 + l3;

        $i0 = $i2 + 2;

        $i6 = (int) $l1;

        $r0[$i0] = $i6;

        $l1 = $l1 >>> 32;

        $b7 = $l1 cmp 0L;

        if $b7 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>(5, $r0, $i2, 3);

        return $i0;
    }
    public static int mulWordsAdd(int, int, int[], int)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long l3, l4;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: int[];

        $i2 := @parameter3: int;

        l3 = (long) $i0;

        l3 = l3 & 4294967295L;

        l4 = (long) $i1;

        l4 = l4 & 4294967295L;

        l3 = l4 * l3;

        $i0 = $r0[$i2];

        l4 = (long) $i0;

        l4 = l4 & 4294967295L;

        l3 = l3 + l4;

        l3 = 0L + l3;

        $i1 = (int) l3;

        $r0[$i2] = $i1;

        l3 = l3 >>> 32;

        $i0 = $i2 + 1;

        $i0 = $r0[$i0];

        l4 = (long) $i0;

        l4 = l4 & 4294967295L;

        l3 = l3 + l4;

        $i0 = $i2 + 1;

        $i1 = (int) l3;

        $r0[$i0] = $i1;

        l3 = l3 >>> 32;

        $b5 = l3 cmp 0L;

        if $b5 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.spongycastle.math.raw.Nat: int incAt(int,int[],int,int)>(5, $r0, $i2, 2);

        return $i0;
    }
    public static void square(int[], int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, i2, i8, i9, i10, $i11;
        long l3, l4, l5, l6, l7, $l12, l13, l14, $l15, l16;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        i2 = $r0[$i0];

        l4 = (long) i2;

        l4 = l4 & 4294967295L;

        i8 = 0;

        i9 = 4;

        i10 = 10;

     label1:
        i2 = i9 + -1;

        i9 = $i0 + i9;

        i9 = $r0[i9];

        l3 = (long) i9;

        l3 = l3 & 4294967295L;

        l3 = l3 * l3;

        i10 = i10 + -1;

        i9 = $i1 + i10;

        i8 = i8 << 31;

        l5 = l3 >>> 33;

        $i11 = (int) l5;

        i8 = i8 | $i11;

        $r1[i9] = i8;

        i10 = i10 + -1;

        i8 = $i1 + i10;

        l5 = l3 >>> 1;

        i9 = (int) l5;

        $r1[i8] = i9;

        i8 = (int) l3;

        if i2 > 0 goto label2;

        l3 = l4 * l4;

        i2 = i8 << 31;

        l5 = (long) i2;

        l5 = l5 & 4294967295L;

        l6 = l3 >>> 33;

        l5 = l5 | l6;

        i8 = (int) l3;

        $r1[$i1] = i8;

        l3 = l3 >>> 32;

        i2 = (int) l3;

        i2 = i2 & 1;

        i8 = $i0 + 1;

        i8 = $r0[i8];

        l3 = (long) i8;

        l3 = l3 & 4294967295L;

        i8 = $i1 + 2;

        i8 = $r1[i8];

        l6 = (long) i8;

        l6 = l6 & 4294967295L;

        $l12 = l3 * l4;

        l5 = l5 + $l12;

        i8 = (int) l5;

        i10 = $i1 + 1;

        i9 = i8 << 1;

        i2 = i9 | i2;

        $r1[i10] = i2;

        i2 = i8 >>> 31;

        l5 = l5 >>> 32;

        l13 = l6 + l5;

        i8 = $i0 + 2;

        i8 = $r0[i8];

        l5 = (long) i8;

        l5 = l5 & 4294967295L;

        i8 = $i1 + 3;

        i8 = $r1[i8];

        l6 = (long) i8;

        $l12 = l6 & 4294967295L;

        i8 = $i1 + 4;

        i8 = $r1[i8];

        l6 = (long) i8;

        l6 = l6 & 4294967295L;

        l7 = l5 * l4;

        l13 = l13 + l7;

        i8 = (int) l13;

        i10 = $i1 + 2;

        i9 = i8 << 1;

        i2 = i9 | i2;

        $r1[i10] = i2;

        i2 = i8 >>> 31;

        l13 = l13 >>> 32;

        l7 = l5 * l3;

        l13 = l13 + l7;

        $l12 = $l12 + l13;

        l13 = $l12 >>> 32;

        l7 = l6 + l13;

        l14 = $l12 & 4294967295L;

        i8 = $i0 + 3;

        i8 = $r0[i8];

        l6 = (long) i8;

        l6 = l6 & 4294967295L;

        i8 = $i1 + 5;

        i8 = $r1[i8];

        $l12 = (long) i8;

        l13 = $l12 & 4294967295L;

        i8 = $i1 + 6;

        i8 = $r1[i8];

        $l12 = (long) i8;

        $l12 = $l12 & 4294967295L;

        $l15 = l6 * l4;

        l14 = l14 + $l15;

        i8 = (int) l14;

        i10 = $i1 + 3;

        i9 = i8 << 1;

        i2 = i9 | i2;

        $r1[i10] = i2;

        i2 = i8 >>> 31;

        l14 = l14 >>> 32;

        $l15 = l6 * l3;

        l14 = l14 + $l15;

        l7 = l7 + l14;

        l14 = l7 >>> 32;

        $l15 = l6 * l5;

        l14 = l14 + $l15;

        l13 = l13 + l14;

        l16 = l7 & 4294967295L;

        l7 = l13 >>> 32;

        l14 = $l12 + l7;

        $l15 = l13 & 4294967295L;

        $i0 = $i0 + 4;

        $i0 = $r0[$i0];

        $l12 = (long) $i0;

        l7 = $l12 & 4294967295L;

        $i0 = $i1 + 7;

        $i0 = $r1[$i0];

        $l12 = (long) $i0;

        l13 = $l12 & 4294967295L;

        $i0 = $i1 + 8;

        $i0 = $r1[$i0];

        $l12 = (long) $i0;

        $l12 = $l12 & 4294967295L;

        l4 = l7 * l4;

        l4 = l16 + l4;

        $i0 = (int) l4;

        i8 = $i1 + 4;

        i10 = $i0 << 1;

        i2 = i10 | i2;

        $r1[i8] = i2;

        i8 = $i0 >>> 31;

        l4 = l4 >>> 32;

        l3 = l7 * l3;

        l4 = l4 + l3;

        l4 = $l15 + l4;

        l3 = l4 >>> 32;

        l5 = l7 * l5;

        l3 = l3 + l5;

        l3 = l14 + l3;

        l5 = l3 >>> 32;

        l6 = l7 * l6;

        l5 = l5 + l6;

        l5 = l13 + l5;

        l6 = l5 >>> 32;

        l6 = $l12 + l6;

        $i0 = (int) l4;

        i2 = $i1 + 5;

        i10 = $i0 << 1;

        i8 = i10 | i8;

        $r1[i2] = i8;

        i8 = $i0 >>> 31;

        $i0 = (int) l3;

        i2 = $i1 + 6;

        i10 = $i0 << 1;

        i8 = i10 | i8;

        $r1[i2] = i8;

        i8 = $i0 >>> 31;

        $i0 = (int) l5;

        i2 = $i1 + 7;

        i10 = $i0 << 1;

        i8 = i10 | i8;

        $r1[i2] = i8;

        i8 = $i0 >>> 31;

        $i0 = (int) l6;

        i2 = $i1 + 8;

        i10 = $i0 << 1;

        i8 = i10 | i8;

        $r1[i2] = i8;

        $i0 = $i0 >>> 31;

        i2 = $i1 + 9;

        i2 = $r1[i2];

        l4 = l6 >> 32;

        i8 = (int) l4;

        i2 = i2 + i8;

        $i1 = $i1 + 9;

        i2 = i2 << 1;

        $i0 = i2 | $i0;

        $r1[$i1] = $i0;

        return;

     label2:
        i9 = i2;

        goto label1;
    }
    public static void square(int[], int[])
    {
        int[] $r0, $r1;
        int i0, i6, i7, i8;
        long l1, l2, l3, l4, l5, $l9, l10, l11, $l12, l13;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[0];

        l2 = (long) i0;

        l2 = l2 & 4294967295L;

        i6 = 0;

        i7 = 4;

        i8 = 10;

     label1:
        i0 = i7 + -1;

        i7 = $r0[i7];

        l1 = (long) i7;

        l1 = l1 & 4294967295L;

        l1 = l1 * l1;

        i8 = i8 + -1;

        i6 = i6 << 31;

        l3 = l1 >>> 33;

        i7 = (int) l3;

        i6 = i6 | i7;

        $r1[i8] = i6;

        i8 = i8 + -1;

        l3 = l1 >>> 1;

        i6 = (int) l3;

        $r1[i8] = i6;

        i6 = (int) l1;

        if i0 > 0 goto label2;

        l1 = l2 * l2;

        i0 = i6 << 31;

        l3 = (long) i0;

        l3 = l3 & 4294967295L;

        l4 = l1 >>> 33;

        l3 = l3 | l4;

        i0 = (int) l1;

        $r1[0] = i0;

        l1 = l1 >>> 32;

        i0 = (int) l1;

        i0 = i0 & 1;

        i6 = $r0[1];

        l1 = (long) i6;

        l1 = l1 & 4294967295L;

        i6 = $r1[2];

        l4 = (long) i6;

        l4 = l4 & 4294967295L;

        $l9 = l1 * l2;

        l3 = l3 + $l9;

        i6 = (int) l3;

        i8 = i6 << 1;

        i0 = i8 | i0;

        $r1[1] = i0;

        i0 = i6 >>> 31;

        l3 = l3 >>> 32;

        l10 = l4 + l3;

        i6 = $r0[2];

        l3 = (long) i6;

        l3 = l3 & 4294967295L;

        i6 = $r1[3];

        l4 = (long) i6;

        $l9 = l4 & 4294967295L;

        i6 = $r1[4];

        l4 = (long) i6;

        l4 = l4 & 4294967295L;

        l5 = l3 * l2;

        l10 = l10 + l5;

        i6 = (int) l10;

        i8 = i6 << 1;

        i0 = i8 | i0;

        $r1[2] = i0;

        i0 = i6 >>> 31;

        l10 = l10 >>> 32;

        l5 = l3 * l1;

        l10 = l10 + l5;

        $l9 = $l9 + l10;

        l10 = $l9 >>> 32;

        l5 = l4 + l10;

        l11 = $l9 & 4294967295L;

        i6 = $r0[3];

        l4 = (long) i6;

        l4 = l4 & 4294967295L;

        i6 = $r1[5];

        $l9 = (long) i6;

        l10 = $l9 & 4294967295L;

        i6 = $r1[6];

        $l9 = (long) i6;

        $l9 = $l9 & 4294967295L;

        $l12 = l4 * l2;

        l11 = l11 + $l12;

        i6 = (int) l11;

        i8 = i6 << 1;

        i0 = i8 | i0;

        $r1[3] = i0;

        i0 = i6 >>> 31;

        l11 = l11 >>> 32;

        $l12 = l4 * l1;

        l11 = l11 + $l12;

        l5 = l5 + l11;

        l11 = l5 >>> 32;

        $l12 = l4 * l3;

        l11 = l11 + $l12;

        l10 = l10 + l11;

        l13 = l5 & 4294967295L;

        l5 = l10 >>> 32;

        l11 = $l9 + l5;

        $l12 = l10 & 4294967295L;

        i6 = $r0[4];

        $l9 = (long) i6;

        l5 = $l9 & 4294967295L;

        i6 = $r1[7];

        $l9 = (long) i6;

        l10 = $l9 & 4294967295L;

        i6 = $r1[8];

        $l9 = (long) i6;

        $l9 = $l9 & 4294967295L;

        l2 = l5 * l2;

        l2 = l13 + l2;

        i6 = (int) l2;

        i8 = i6 << 1;

        i0 = i8 | i0;

        $r1[4] = i0;

        i6 = i6 >>> 31;

        l2 = l2 >>> 32;

        l1 = l5 * l1;

        l2 = l2 + l1;

        l2 = $l12 + l2;

        l1 = l2 >>> 32;

        l3 = l5 * l3;

        l1 = l1 + l3;

        l1 = l11 + l1;

        l3 = l1 >>> 32;

        l4 = l5 * l4;

        l3 = l3 + l4;

        l3 = l10 + l3;

        l4 = l3 >>> 32;

        l4 = $l9 + l4;

        i0 = (int) l2;

        i8 = i0 << 1;

        i6 = i8 | i6;

        $r1[5] = i6;

        i6 = i0 >>> 31;

        i0 = (int) l1;

        i8 = i0 << 1;

        i6 = i8 | i6;

        $r1[6] = i6;

        i6 = i0 >>> 31;

        i0 = (int) l3;

        i8 = i0 << 1;

        i6 = i8 | i6;

        $r1[7] = i6;

        i6 = i0 >>> 31;

        i0 = (int) l4;

        i8 = i0 << 1;

        i6 = i8 | i6;

        $r1[8] = i6;

        i0 = i0 >>> 31;

        i6 = $r1[9];

        l2 = l4 >> 32;

        i8 = (int) l2;

        i6 = i6 + i8;

        i6 = i6 << 1;

        i0 = i6 | i0;

        $r1[9] = i0;

        return;

     label2:
        i7 = i0;

        goto label1;
    }
    public static int sub(int[], int, int[], int, int[], int)
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i6;
        long $l4, $l5, $l7;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $r2 := @parameter4: int[];

        $i2 := @parameter5: int;

        $i3 = $r0[$i0];

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        $i3 = $r1[$i1];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $l4 = $l4 - $l5;

        $l4 = 0L + $l4;

        $i6 = (int) $l4;

        $r2[$i2] = $i6;

        $l4 = $l4 >> 32;

        $i3 = $i0 + 1;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $i3 = $i1 + 1;

        $i3 = $r1[$i3];

        $l7 = (long) $i3;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 - $l7;

        $l4 = $l4 + $l5;

        $i3 = $i2 + 1;

        $i6 = (int) $l4;

        $r2[$i3] = $i6;

        $l4 = $l4 >> 32;

        $i3 = $i0 + 2;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $i3 = $i1 + 2;

        $i3 = $r1[$i3];

        $l7 = (long) $i3;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 - $l7;

        $l4 = $l4 + $l5;

        $i3 = $i2 + 2;

        $i6 = (int) $l4;

        $r2[$i3] = $i6;

        $l4 = $l4 >> 32;

        $i3 = $i0 + 3;

        $i3 = $r0[$i3];

        $l5 = (long) $i3;

        $l5 = $l5 & 4294967295L;

        $i3 = $i1 + 3;

        $i3 = $r1[$i3];

        $l7 = (long) $i3;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 - $l7;

        $l4 = $l4 + $l5;

        $i3 = $i2 + 3;

        $i6 = (int) $l4;

        $r2[$i3] = $i6;

        $l4 = $l4 >> 32;

        $i0 = $i0 + 4;

        $i0 = $r0[$i0];

        $l5 = (long) $i0;

        $l5 = $l5 & 4294967295L;

        $i0 = $i1 + 4;

        $i0 = $r1[$i0];

        $l7 = (long) $i0;

        $l7 = $l7 & 4294967295L;

        $l5 = $l5 - $l7;

        $l4 = $l4 + $l5;

        $i0 = $i2 + 4;

        $i1 = (int) $l4;

        $r2[$i0] = $i1;

        $l4 = $l4 >> 32;

        $i0 = (int) $l4;

        return $i0;
    }
    public static int sub(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = $r0[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 - $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r2[0] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[1] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[2] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[3] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r0[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r1[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[4] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int subBothFrom(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = $r2[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r0[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 - $l2;

        $i0 = $r1[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 - $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r2[0] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r2[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $i0 = $r1[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[1] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r2[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $i0 = $r1[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[2] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r2[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $i0 = $r1[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[3] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r2[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $i0 = $r1[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r2[4] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static int subFrom(int[], int, int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i5;
        long $l3, $l4, $l6;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i1 := @parameter3: int;

        $i2 = $r1[$i1];

        $l3 = (long) $i2;

        $l3 = $l3 & 4294967295L;

        $i2 = $r0[$i0];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $l3 = $l3 - $l4;

        $l3 = 0L + $l3;

        $i5 = (int) $l3;

        $r1[$i1] = $i5;

        $l3 = $l3 >> 32;

        $i2 = $i1 + 1;

        $i2 = $r1[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i0 + 1;

        $i2 = $r0[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 - $l6;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 1;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >> 32;

        $i2 = $i1 + 2;

        $i2 = $r1[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i0 + 2;

        $i2 = $r0[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 - $l6;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 2;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >> 32;

        $i2 = $i1 + 3;

        $i2 = $r1[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i2 = $i0 + 3;

        $i2 = $r0[$i2];

        $l6 = (long) $i2;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 - $l6;

        $l3 = $l3 + $l4;

        $i2 = $i1 + 3;

        $i5 = (int) $l3;

        $r1[$i2] = $i5;

        $l3 = $l3 >> 32;

        $i2 = $i1 + 4;

        $i2 = $r1[$i2];

        $l4 = (long) $i2;

        $l4 = $l4 & 4294967295L;

        $i0 = $i0 + 4;

        $i0 = $r0[$i0];

        $l6 = (long) $i0;

        $l6 = $l6 & 4294967295L;

        $l4 = $l4 - $l6;

        $l3 = $l3 + $l4;

        $i0 = $i1 + 4;

        $i1 = (int) $l3;

        $r1[$i0] = $i1;

        $l3 = $l3 >> 32;

        $i0 = (int) $l3;

        return $i0;
    }
    public static int subFrom(int[], int[])
    {
        int[] $r0, $r1;
        int $i0;
        long $l1, $l2, $l3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r1[0];

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        $i0 = $r0[0];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 - $l2;

        $l1 = 0L + $l1;

        $i0 = (int) $l1;

        $r1[0] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r1[1];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[1];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[1] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r1[2];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[2];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[2] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r1[3];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[3];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[3] = $i0;

        $l1 = $l1 >> 32;

        $i0 = $r1[4];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $i0 = $r0[4];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 - $l3;

        $l1 = $l1 + $l2;

        $i0 = (int) $l1;

        $r1[4] = $i0;

        $l1 = $l1 >> 32;

        $i0 = (int) $l1;

        return $i0;
    }
    public static java.math.BigInteger toBigInteger(int[])
    {
        int[] $r0;
        byte[] r1;
        int i0, i1, $i2;
        java.math.BigInteger $r2;

        $r0 := @parameter0: int[];

        r1 = newarray (byte)[20];

        i1 = 0;

     label1:
        if i1 >= 5 goto label3;

        i0 = $r0[i1];

        if i0 == 0 goto label2;

        $i2 = 4 - i1;

        $i2 = $i2 << 2;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>(i0, r1, $i2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r2;
    }
    public static void zero(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        return;
    }
