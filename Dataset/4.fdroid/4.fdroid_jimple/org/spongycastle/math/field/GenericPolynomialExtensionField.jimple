org.spongycastle.math.field.GenericPolynomialExtensionField extends java.lang.Object implements org.spongycastle.math.field.PolynomialExtensionField
protected final org.spongycastle.math.field.Polynomial minimalPolynomial
protected final org.spongycastle.math.field.FiniteField subfield
    void <init>(org.spongycastle.math.field.FiniteField, org.spongycastle.math.field.Polynomial)
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        org.spongycastle.math.field.FiniteField $r1;
        org.spongycastle.math.field.Polynomial $r2;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r1 := @parameter0: org.spongycastle.math.field.FiniteField;

        $r2 := @parameter1: org.spongycastle.math.field.Polynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield> = $r1;

        r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.math.field.FiniteField $r3, $r4;
        org.spongycastle.math.field.Polynomial $r5, $r6;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.spongycastle.math.field.GenericPolynomialExtensionField;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.spongycastle.math.field.GenericPolynomialExtensionField) $r1;

        $r3 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        $r4 = r2.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        $r6 = r2.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.math.BigInteger getCharacteristic()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        java.math.BigInteger $r1;
        org.spongycastle.math.field.FiniteField $r2;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r2 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        return $r1;
    }
    public int getDegree()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        int $i0;
        org.spongycastle.math.field.Polynomial $r1;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r1 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.math.field.Polynomial: int getDegree()>();

        return $i0;
    }
    public int getDimension()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        org.spongycastle.math.field.FiniteField $r1;
        int $i0, $i1;
        org.spongycastle.math.field.Polynomial $r2;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r1 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.math.field.FiniteField: int getDimension()>();

        $r2 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        $i1 = interfaceinvoke $r2.<org.spongycastle.math.field.Polynomial: int getDegree()>();

        $i0 = $i0 * $i1;

        return $i0;
    }
    public org.spongycastle.math.field.Polynomial getMinimalPolynomial()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        org.spongycastle.math.field.Polynomial r1;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        r1 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        return r1;
    }
    public org.spongycastle.math.field.FiniteField getSubfield()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        org.spongycastle.math.field.FiniteField r1;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        r1 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.math.field.GenericPolynomialExtensionField r0;
        org.spongycastle.math.field.FiniteField $r1;
        int $i0, $i1;
        org.spongycastle.math.field.Polynomial $r2;

        r0 := @this: org.spongycastle.math.field.GenericPolynomialExtensionField;

        $r1 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.FiniteField subfield>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.spongycastle.math.field.GenericPolynomialExtensionField: org.spongycastle.math.field.Polynomial minimalPolynomial>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <org.spongycastle.util.Integers: int rotateLeft(int,int)>($i1, 16);

        $i0 = $i0 ^ $i1;

        return $i0;
    }
