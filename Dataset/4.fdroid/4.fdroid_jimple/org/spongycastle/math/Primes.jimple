org.spongycastle.math.Primes extends java.lang.Object
private static final java.math.BigInteger ONE
public static final int SMALL_FACTOR_LIMIT
private static final java.math.BigInteger THREE
private static final java.math.BigInteger TWO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.math.Primes: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.math.Primes: java.math.BigInteger TWO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        <org.spongycastle.math.Primes: java.math.BigInteger THREE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.math.Primes r0;

        r0 := @this: org.spongycastle.math.Primes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void checkCandidate(java.math.BigInteger, java.lang.String)
    {
        java.math.BigInteger $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i0 < 1 goto label1;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i0 >= 2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be non-null and >= 2");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        return;
    }
    public static org.spongycastle.math.Primes$MROutput enhancedMRProbablePrimeTest(java.math.BigInteger, java.security.SecureRandom, int)
    {
        java.math.BigInteger $r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.security.SecureRandom $r1;
        int $i0, $i1, i2, $i3;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.math.Primes$MROutput $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        $i0 := @parameter2: int;

        staticinvoke <org.spongycastle.math.Primes: void checkCandidate(java.math.BigInteger,java.lang.String)>($r0, "candidate");

        if $r1 != null goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'random\' cannot be null");

        throw $r2;

     label01:
        if $i0 >= 1 goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'iterations\' must be > 0");

        throw $r2;

     label02:
        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 != 2 goto label03;

        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$000()>();

        return $r3;

     label03:
        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label04;

        $r0 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$100(java.math.BigInteger)>($r0);

        return $r3;

     label04:
        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r4 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $r5 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r5 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $i1 = virtualinvoke $r4.<java.math.BigInteger: int getLowestSetBit()>();

        $r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        i2 = 0;

     label05:
        if i2 >= $i0 goto label14;

        $r7 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r7 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r7, $r5, $r1);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r0);

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $i3 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i3 <= 0 goto label06;

        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$100(java.math.BigInteger)>($r8);

        return $r3;

     label06:
        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r6, $r0);

        $r8 = $r7;

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label07;

        $z0 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label08;

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        $z0 = 0;

        $i3 = 1;

     label09:
        if $i3 >= $i1 goto label10;

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, $r0);

        $r8 = $r9;

        $z1 = virtualinvoke $r9.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label12;

        $z0 = 1;

     label10:
        if $z0 != 0 goto label07;

        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label11;

        $r7 = $r8;

        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r4 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r4, $r0);

        $r5 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label11;

        $r7 = $r4;

     label11:
        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r4 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $r0 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r0);

        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 <= 0 goto label13;

        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$100(java.math.BigInteger)>($r0);

        return $r3;

     label12:
        $r10 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r9.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label10;

        $r7 = $r9;

        $i3 = $i3 + 1;

        goto label09;

     label13:
        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$200()>();

        return $r3;

     label14:
        $r3 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput access$000()>();

        return $r3;
    }
    private static int extract32(byte[])
    {
        byte[] $r0;
        int i0, $i1, i2, i3, $i4;
        byte $b5;

        $r0 := @parameter0: byte[];

        i2 = 0;

        $i1 = lengthof $r0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(4, $i1);

        i3 = 0;

     label1:
        if i3 >= $i1 goto label2;

        i0 = lengthof $r0;

        $i4 = i3 + 1;

        i0 = i0 - $i4;

        $b5 = $r0[i0];

        i0 = $b5 & 255;

        $i4 = i3 * 8;

        i0 = i0 << $i4;

        i2 = i2 | i0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }
    public static org.spongycastle.math.Primes$STOutput generateSTRandomPrime(org.spongycastle.crypto.Digest, int, byte[])
    {
        org.spongycastle.crypto.Digest $r0;
        int $i0, $i1;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.math.Primes$STOutput $r3;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'hash\' cannot be null");

        throw $r2;

     label1:
        if $i0 >= 2 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'length\' must be >= 2");

        throw $r2;

     label2:
        if $r1 == null goto label3;

        $i1 = lengthof $r1;

        if $i1 != 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'inputSeed\' cannot be null or empty");

        throw $r2;

     label4:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        $r3 = staticinvoke <org.spongycastle.math.Primes: org.spongycastle.math.Primes$STOutput implSTRandomPrime(org.spongycastle.crypto.Digest,int,byte[])>($r0, $i0, $r1);

        return $r3;
    }
    public static boolean hasAnySmallFactors(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        staticinvoke <org.spongycastle.math.Primes: void checkCandidate(java.math.BigInteger,java.lang.String)>($r0, "candidate");

        $z0 = staticinvoke <org.spongycastle.math.Primes: boolean implHasAnySmallFactors(java.math.BigInteger)>($r0);

        return $z0;
    }
    private static void hash(org.spongycastle.crypto.Digest, byte[], byte[], int)
    {
        org.spongycastle.crypto.Digest $r0;
        byte[] $r1, $r2;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $i1 = lengthof $r1;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i1);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, $i0);

        return;
    }
    private static java.math.BigInteger hashGen(org.spongycastle.crypto.Digest, byte[], int)
    {
        org.spongycastle.crypto.Digest $r0;
        byte[] $r1, r2;
        int $i0, $i1, i2, i3;
        java.math.BigInteger $r3;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i2 = $i0 * $i1;

        r2 = newarray (byte)[i2];

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        i2 = i2 - $i1;

        staticinvoke <org.spongycastle.math.Primes: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r0, $r1, r2, i2);

        staticinvoke <org.spongycastle.math.Primes: void inc(byte[],int)>($r1, 1);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        return $r3;
    }
    private static boolean implHasAnySmallFactors(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        long $l0;
        int $i1, $i2;

        $r0 := @parameter0: java.math.BigInteger;

        $l0 = (long) 223092870;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 3;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 5;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 7;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 11;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 13;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 17;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 19;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 23;

        if $i1 == 0 goto label1;

        $l0 = (long) 58642669;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 % 29;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 31;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 37;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 41;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 43;

        if $i1 == 0 goto label1;

        $l0 = (long) 600662303;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 % 47;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 53;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 59;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 61;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 67;

        if $i1 == 0 goto label1;

        $l0 = (long) 33984931;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 % 71;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 73;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 79;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 83;

        if $i1 == 0 goto label1;

        $l0 = (long) 89809099;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 % 89;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 97;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 101;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 103;

        if $i1 == 0 goto label1;

        $l0 = (long) 167375713;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        $i2 = $i1 % 107;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 109;

        if $i2 == 0 goto label1;

        $i2 = $i1 % 113;

        if $i2 == 0 goto label1;

        $i1 = $i1 % 127;

        if $i1 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }
    private static boolean implMRProbablePrimeToBase(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, int, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4;
        int $i0, i1;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.math.BigInteger;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r0);

        $r2 = $r3;

        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        i1 = 1;

     label3:
        if i1 >= $i0 goto label6;

        $r3 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r0);

        $r2 = $r3;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        return 0;
    }
    private static org.spongycastle.math.Primes$STOutput implSTRandomPrime(org.spongycastle.crypto.Digest, int, byte[])
    {
        org.spongycastle.crypto.Digest $r0;
        int $i0, i2, i3, $i4, $i5, $i6;
        byte[] r1, $r2, r3;
        long l1;
        boolean $z0;
        org.spongycastle.math.Primes$STOutput $r4;
        java.math.BigInteger $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.IllegalStateException $r6;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        i2 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        if $i0 >= 33 goto label3;

        i3 = 0;

        r3 = newarray (byte)[i2];

        r1 = newarray (byte)[i2];

     label1:
        staticinvoke <org.spongycastle.math.Primes: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r0, $r2, r3, 0);

        staticinvoke <org.spongycastle.math.Primes: void inc(byte[],int)>($r2, 1);

        staticinvoke <org.spongycastle.math.Primes: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r0, $r2, r1, 0);

        staticinvoke <org.spongycastle.math.Primes: void inc(byte[],int)>($r2, 1);

        $i4 = staticinvoke <org.spongycastle.math.Primes: int extract32(byte[])>(r3);

        i2 = staticinvoke <org.spongycastle.math.Primes: int extract32(byte[])>(r1);

        $i4 = $i4 ^ i2;

        i2 = 32 - $i0;

        i2 = -1 >>> i2;

        $i4 = $i4 & i2;

        i2 = $i0 + -1;

        i2 = 1 << i2;

        i2 = i2 | 1;

        $i4 = $i4 | i2;

        i3 = i3 + 1;

        l1 = (long) $i4;

        l1 = l1 & 4294967295L;

        $z0 = staticinvoke <org.spongycastle.math.Primes: boolean isPrime32(long)>(l1);

        if $z0 == 0 goto label2;

        $r4 = new org.spongycastle.math.Primes$STOutput;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l1);

        specialinvoke $r4.<org.spongycastle.math.Primes$STOutput: void <init>(java.math.BigInteger,byte[],int,org.spongycastle.math.Primes$1)>($r5, $r2, i3, null);

        return $r4;

     label2:
        $i4 = $i0 * 4;

        if i3 <= $i4 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too many iterations in Shawe-Taylor Random_Prime Routine");

        throw $r6;

     label3:
        i3 = $i0 + 3;

        i3 = i3 / 2;

        $r4 = staticinvoke <org.spongycastle.math.Primes: org.spongycastle.math.Primes$STOutput implSTRandomPrime(org.spongycastle.crypto.Digest,int,byte[])>($r0, i3, $r2);

        $r5 = virtualinvoke $r4.<org.spongycastle.math.Primes$STOutput: java.math.BigInteger getPrime()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.math.Primes$STOutput: byte[] getPrimeSeed()>();

        i3 = virtualinvoke $r4.<org.spongycastle.math.Primes$STOutput: int getPrimeGenCounter()>();

        $i4 = i3;

        i2 = i2 * 8;

        $i5 = $i0 + -1;

        i2 = $i5 / i2;

        $i5 = i2 + 1;

        $r7 = staticinvoke <org.spongycastle.math.Primes: java.math.BigInteger hashGen(org.spongycastle.crypto.Digest,byte[],int)>($r0, $r2, $i5);

        $r8 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $i5 = $i0 + -1;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i5);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $i5 = $i0 + -1;

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i5);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r7);

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r8 = $r9;

        $i5 = 0;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r10 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

     label4:
        $i6 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        if $i6 <= $i0 goto label5;

        $r8 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $i6 = $i0 + -1;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i6);

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r7);

        $r9 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r8 = $r9;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r10 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

     label5:
        $i4 = $i4 + 1;

        $z0 = staticinvoke <org.spongycastle.math.Primes: boolean implHasAnySmallFactors(java.math.BigInteger)>($r9);

        if $z0 != 0 goto label6;

        $i6 = i2 + 1;

        $r10 = staticinvoke <org.spongycastle.math.Primes: java.math.BigInteger hashGen(org.spongycastle.crypto.Digest,byte[],int)>($r0, $r2, $i6);

        $r11 = <org.spongycastle.math.Primes: java.math.BigInteger THREE>;

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r11);

        $r11 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);

        l1 = (long) $i5;

        $r11 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l1);

        $r11 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);

        $r8 = $r11;

        $i5 = 0;

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r11, $r9);

        $r11 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r11);

        $r12 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r11.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label7;

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r5, $r9);

        $r11 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r10.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label7;

        $r4 = new org.spongycastle.math.Primes$STOutput;

        specialinvoke $r4.<org.spongycastle.math.Primes$STOutput: void <init>(java.math.BigInteger,byte[],int,org.spongycastle.math.Primes$1)>($r9, $r2, $i4, null);

        return $r4;

     label6:
        $i6 = i2 + 1;

        staticinvoke <org.spongycastle.math.Primes: void inc(byte[],int)>($r2, $i6);

     label7:
        $i6 = $i0 * 4;

        $i6 = $i6 + i3;

        if $i4 < $i6 goto label8;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too many iterations in Shawe-Taylor Random_Prime Routine");

        throw $r6;

     label8:
        $i5 = $i5 + 2;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        goto label4;
    }
    private static void inc(byte[], int)
    {
        byte[] $r0;
        int $i0, i1, $i3;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = lengthof $r0;

     label1:
        if $i0 <= 0 goto label2;

        i1 = i1 + -1;

        if i1 < 0 goto label2;

        $b2 = $r0[i1];

        $i3 = $b2 & 255;

        $i0 = $i0 + $i3;

        $b2 = (byte) $i0;

        $r0[i1] = $b2;

        $i0 = $i0 >>> 8;

        goto label1;

     label2:
        return;
    }
    public static boolean isMRProbablePrime(java.math.BigInteger, java.security.SecureRandom, int)
    {
        java.math.BigInteger $r0, $r3, $r4, $r5, $r6;
        java.security.SecureRandom $r1;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        $i0 := @parameter2: int;

        staticinvoke <org.spongycastle.math.Primes: void checkCandidate(java.math.BigInteger,java.lang.String)>($r0, "candidate");

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'random\' cannot be null");

        throw $r2;

     label1:
        if $i0 >= 1 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'iterations\' must be > 0");

        throw $r2;

     label2:
        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 != 2 goto label3;

        return 1;

     label3:
        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r3 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r4 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r4 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int getLowestSetBit()>();

        $r5 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        i2 = 0;

     label5:
        if i2 >= $i0 goto label7;

        $r6 = <org.spongycastle.math.Primes: java.math.BigInteger TWO>;

        $r6 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r6, $r4, $r1);

        $z0 = staticinvoke <org.spongycastle.math.Primes: boolean implMRProbablePrimeToBase(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,java.math.BigInteger)>($r0, $r3, $r5, $i1, $r6);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static boolean isMRProbablePrimeToBase(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r4;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        staticinvoke <org.spongycastle.math.Primes: void checkCandidate(java.math.BigInteger,java.lang.String)>($r0, "candidate");

        staticinvoke <org.spongycastle.math.Primes: void checkCandidate(java.math.BigInteger,java.lang.String)>($r1, "base");

        $r2 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'base\' must be < (\'candidate\' - 1)");

        throw $r3;

     label1:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i0 != 2 goto label2;

        return 1;

     label2:
        $r2 = <org.spongycastle.math.Primes: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int getLowestSetBit()>();

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

        $z0 = staticinvoke <org.spongycastle.math.Primes: boolean implMRProbablePrimeToBase(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,java.math.BigInteger)>($r0, $r2, $r4, $i0, $r1);

        return $z0;
    }
    private static boolean isPrime32(long)
    {
        long $l0, l1, $l2;
        long[] r0;
        byte $b3;
        java.lang.IllegalArgumentException $r1;
        int i4, $i5;

        $l0 := @parameter0: long;

        $l2 = $l0 >>> 32;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size limit exceeded");

        throw $r1;

     label01:
        $b3 = $l0 cmp 5L;

        if $b3 > 0 goto label04;

        $b3 = $l0 cmp 2L;

        if $b3 == 0 goto label02;

        $b3 = $l0 cmp 3L;

        if $b3 == 0 goto label02;

        $b3 = $l0 cmp 5L;

        if $b3 != 0 goto label03;

     label02:
        return 1;

     label03:
        return 0;

     label04:
        $l2 = 1L & $l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label05;

        $l2 = $l0 % 3L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label05;

        $l2 = $l0 % 5L;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label06;

     label05:
        return 0;

     label06:
        r0 = newarray (long)[8];

        r0[0] = 1L;

        r0[1] = 7L;

        r0[2] = 11L;

        r0[3] = 13L;

        r0[4] = 17L;

        r0[5] = 19L;

        r0[6] = 23L;

        r0[7] = 29L;

        $l2 = 0L;

        i4 = 1;

     label07:
        $i5 = lengthof r0;

        if i4 >= $i5 goto label10;

        l1 = r0[i4];

        l1 = $l2 + l1;

        l1 = $l0 % l1;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label09;

        $b3 = $l0 cmp 30L;

        if $b3 >= 0 goto label08;

        return 1;

     label08:
        return 0;

     label09:
        i4 = i4 + 1;

        goto label07;

     label10:
        $l2 = $l2 + 30L;

        l1 = $l2 * $l2;

        $b3 = l1 cmp $l0;

        if $b3 < 0 goto label11;

        return 1;

     label11:
        i4 = 0;

        goto label07;
    }
