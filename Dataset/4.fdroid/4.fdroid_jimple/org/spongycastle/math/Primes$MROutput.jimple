org.spongycastle.math.Primes$MROutput extends java.lang.Object
private java.math.BigInteger factor
private boolean provablyComposite
    private void <init>(boolean, java.math.BigInteger)
    {
        org.spongycastle.math.Primes$MROutput r0;
        boolean $z0;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.math.Primes$MROutput;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.math.BigInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.math.Primes$MROutput: boolean provablyComposite> = $z0;

        r0.<org.spongycastle.math.Primes$MROutput: java.math.BigInteger factor> = $r1;

        return;
    }
    static org.spongycastle.math.Primes$MROutput access$000()
    {
        org.spongycastle.math.Primes$MROutput $r0;

        $r0 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput probablyPrime()>();

        return $r0;
    }
    static org.spongycastle.math.Primes$MROutput access$100(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        org.spongycastle.math.Primes$MROutput $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput provablyCompositeWithFactor(java.math.BigInteger)>($r0);

        return $r1;
    }
    static org.spongycastle.math.Primes$MROutput access$200()
    {
        org.spongycastle.math.Primes$MROutput $r0;

        $r0 = staticinvoke <org.spongycastle.math.Primes$MROutput: org.spongycastle.math.Primes$MROutput provablyCompositeNotPrimePower()>();

        return $r0;
    }
    private static org.spongycastle.math.Primes$MROutput probablyPrime()
    {
        org.spongycastle.math.Primes$MROutput $r0;

        $r0 = new org.spongycastle.math.Primes$MROutput;

        specialinvoke $r0.<org.spongycastle.math.Primes$MROutput: void <init>(boolean,java.math.BigInteger)>(0, null);

        return $r0;
    }
    private static org.spongycastle.math.Primes$MROutput provablyCompositeNotPrimePower()
    {
        org.spongycastle.math.Primes$MROutput $r0;

        $r0 = new org.spongycastle.math.Primes$MROutput;

        specialinvoke $r0.<org.spongycastle.math.Primes$MROutput: void <init>(boolean,java.math.BigInteger)>(1, null);

        return $r0;
    }
    private static org.spongycastle.math.Primes$MROutput provablyCompositeWithFactor(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        org.spongycastle.math.Primes$MROutput $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = new org.spongycastle.math.Primes$MROutput;

        specialinvoke $r1.<org.spongycastle.math.Primes$MROutput: void <init>(boolean,java.math.BigInteger)>(1, $r0);

        return $r1;
    }
    public java.math.BigInteger getFactor()
    {
        org.spongycastle.math.Primes$MROutput r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.math.Primes$MROutput;

        r1 = r0.<org.spongycastle.math.Primes$MROutput: java.math.BigInteger factor>;

        return r1;
    }
    public boolean isNotPrimePower()
    {
        org.spongycastle.math.Primes$MROutput r0;
        boolean $z0;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.math.Primes$MROutput;

        $z0 = r0.<org.spongycastle.math.Primes$MROutput: boolean provablyComposite>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.spongycastle.math.Primes$MROutput: java.math.BigInteger factor>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isProvablyComposite()
    {
        org.spongycastle.math.Primes$MROutput r0;
        boolean z0;

        r0 := @this: org.spongycastle.math.Primes$MROutput;

        z0 = r0.<org.spongycastle.math.Primes$MROutput: boolean provablyComposite>;

        return z0;
    }
