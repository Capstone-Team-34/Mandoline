org.spongycastle.pkcs.bc.PKCS12PBEUtils extends java.lang.Object
private static java.util.Set desAlgs
private static java.util.Map keySizes
private static java.util.Set noIvAlgs
    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.HashSet $r1;
        java.util.Map $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        java.lang.Integer $r4;
        java.util.Set $r5;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set noIvAlgs> = $r1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set desAlgs> = $r1;

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(40);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set noIvAlgs>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r5 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set noIvAlgs>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r5 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set desAlgs>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r5 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set desAlgs>;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        return;
    }
    void <init>()
    {
        org.spongycastle.pkcs.bc.PKCS12PBEUtils r0;

        r0 := @this: org.spongycastle.pkcs.bc.PKCS12PBEUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static org.spongycastle.crypto.CipherParameters createCipherParameters(org.spongycastle.asn1.ASN1ObjectIdentifier, org.spongycastle.crypto.ExtendedDigest, int, org.spongycastle.asn1.pkcs.PKCS12PBEParams, char[])
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        org.spongycastle.crypto.ExtendedDigest $r1;
        int $i0, $i1;
        org.spongycastle.asn1.pkcs.PKCS12PBEParams $r2;
        char[] $r3;
        org.spongycastle.crypto.generators.PKCS12ParametersGenerator r4;
        byte[] $r5, $r6;
        java.math.BigInteger $r7;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r8, $r10;
        org.spongycastle.crypto.params.ParametersWithIV $r9;
        org.spongycastle.crypto.params.KeyParameter $r11;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 := @parameter1: org.spongycastle.crypto.ExtendedDigest;

        $i0 := @parameter2: int;

        $r2 := @parameter3: org.spongycastle.asn1.pkcs.PKCS12PBEParams;

        $r3 := @parameter4: char[];

        r4 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        specialinvoke r4.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r1);

        $r5 = staticinvoke <org.spongycastle.crypto.generators.PKCS12ParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r3);

        $r6 = virtualinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>();

        $r7 = virtualinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>();

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        virtualinvoke r4.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void init(byte[],byte[],int)>($r5, $r6, $i1);

        $z0 = staticinvoke <org.spongycastle.pkcs.bc.PKCS12PBEUtils: boolean hasNoIv(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <org.spongycastle.pkcs.bc.PKCS12PBEUtils: int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        $r8 = virtualinvoke r4.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        return $r8;

     label1:
        $i1 = staticinvoke <org.spongycastle.pkcs.bc.PKCS12PBEUtils: int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        $i0 = $i0 * 8;

        $r8 = virtualinvoke r4.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i1, $i0);

        $z0 = staticinvoke <org.spongycastle.pkcs.bc.PKCS12PBEUtils: boolean isDesAlg(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        if $z0 == 0 goto label2;

        $r9 = (org.spongycastle.crypto.params.ParametersWithIV) $r8;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r11 = (org.spongycastle.crypto.params.KeyParameter) $r10;

        $r5 = virtualinvoke $r11.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.crypto.params.DESedeParameters: void setOddParity(byte[])>($r5);

     label2:
        return $r8;
    }
    static org.spongycastle.operator.MacCalculator createMacCalculator(org.spongycastle.asn1.ASN1ObjectIdentifier, org.spongycastle.crypto.ExtendedDigest, org.spongycastle.asn1.pkcs.PKCS12PBEParams, char[])
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        org.spongycastle.crypto.ExtendedDigest $r1;
        org.spongycastle.asn1.pkcs.PKCS12PBEParams $r2;
        char[] $r3;
        org.spongycastle.crypto.macs.HMac r4;
        org.spongycastle.crypto.generators.PKCS12ParametersGenerator r5;
        byte[] $r6, $r7;
        java.math.BigInteger $r8;
        int $i0;
        org.spongycastle.crypto.CipherParameters $r9;
        org.spongycastle.crypto.params.KeyParameter r10;
        org.spongycastle.pkcs.bc.PKCS12PBEUtils$1 $r11;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 := @parameter1: org.spongycastle.crypto.ExtendedDigest;

        $r2 := @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams;

        $r3 := @parameter3: char[];

        r5 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r1);

        $r6 = staticinvoke <org.spongycastle.crypto.generators.PKCS12ParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r3);

        $r7 = virtualinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>();

        $r8 = virtualinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        virtualinvoke r5.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void init(byte[],byte[],int)>($r6, $r7, $i0);

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.ExtendedDigest: int getDigestSize()>();

        $i0 = $i0 * 8;

        $r9 = virtualinvoke r5.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i0);

        r10 = (org.spongycastle.crypto.params.KeyParameter) $r9;

        r4 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke r4.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r1);

        virtualinvoke r4.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>(r10);

        $r11 = new org.spongycastle.pkcs.bc.PKCS12PBEUtils$1;

        specialinvoke $r11.<org.spongycastle.pkcs.bc.PKCS12PBEUtils$1: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.pkcs.PKCS12PBEParams,org.spongycastle.crypto.macs.HMac,char[])>($r0, $r2, r4, $r3);

        return $r11;
    }
    static org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher getEngine(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0, $r1;
        boolean $z0;
        java.lang.Object r2;
        org.spongycastle.crypto.engines.DESedeEngine $r3;
        org.spongycastle.crypto.modes.CBCBlockCipher $r4;
        org.spongycastle.crypto.paddings.PKCS7Padding $r5;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r6;
        org.spongycastle.crypto.engines.RC2Engine $r7;
        java.lang.IllegalStateException $r8;
        org.spongycastle.crypto.BlockCipher $r9;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC>;

        $z0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC>;

        $z0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

     label1:
        $r3 = new org.spongycastle.crypto.engines.DESedeEngine;

        r2 = $r3;

        specialinvoke $r3.<org.spongycastle.crypto.engines.DESedeEngine: void <init>()>();

     label2:
        $r6 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r4 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        $r9 = (org.spongycastle.crypto.BlockCipher) r2;

        specialinvoke $r4.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r9);

        $r5 = new org.spongycastle.crypto.paddings.PKCS7Padding;

        specialinvoke $r5.<org.spongycastle.crypto.paddings.PKCS7Padding: void <init>()>();

        specialinvoke $r6.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r4, $r5);

        return $r6;

     label3:
        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC>;

        $z0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC>;

        $z0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

     label4:
        $r7 = new org.spongycastle.crypto.engines.RC2Engine;

        r2 = $r7;

        specialinvoke $r7.<org.spongycastle.crypto.engines.RC2Engine: void <init>()>();

        goto label2;

     label5:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown algorithm");

        throw $r8;
    }
    static int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Map keySizes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    static boolean hasNoIv(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set noIvAlgs>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
    static boolean isDesAlg(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.pkcs.bc.PKCS12PBEUtils: java.util.Set desAlgs>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
