org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest extends org.spongycastle.pkcs.PKCS10CertificationRequest
    public void <init>(org.spongycastle.asn1.pkcs.CertificationRequest)
    {
        org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest r0;
        org.spongycastle.asn1.pkcs.CertificationRequest $r1;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.CertificationRequest;

        specialinvoke r0.<org.spongycastle.pkcs.PKCS10CertificationRequest: void <init>(org.spongycastle.asn1.pkcs.CertificationRequest)>($r1);

        return;
    }
    public void <init>(org.spongycastle.pkcs.PKCS10CertificationRequest)
    {
        org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest r0;
        org.spongycastle.pkcs.PKCS10CertificationRequest $r1;
        org.spongycastle.asn1.pkcs.CertificationRequest $r2;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest;

        $r1 := @parameter0: org.spongycastle.pkcs.PKCS10CertificationRequest;

        $r2 = virtualinvoke $r1.<org.spongycastle.pkcs.PKCS10CertificationRequest: org.spongycastle.asn1.pkcs.CertificationRequest toASN1Structure()>();

        specialinvoke r0.<org.spongycastle.pkcs.PKCS10CertificationRequest: void <init>(org.spongycastle.asn1.pkcs.CertificationRequest)>($r2);

        return;
    }
    public void <init>(byte[]) throws java.io.IOException
    {
        org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.pkcs.PKCS10CertificationRequest: void <init>(byte[])>($r1);

        return;
    }
    public org.spongycastle.crypto.params.AsymmetricKeyParameter getPublicKey() throws org.spongycastle.pkcs.PKCSException
    {
        org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest r0;
        java.io.IOException r1;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.pkcs.PKCSException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest;

     label1:
        $r2 = virtualinvoke r0.<org.spongycastle.pkcs.bc.BcPKCS10CertificationRequest: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        $r3 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r2);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new org.spongycastle.pkcs.PKCSException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error extracting key encoding: ");

        $r6 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.pkcs.PKCSException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r1);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }
