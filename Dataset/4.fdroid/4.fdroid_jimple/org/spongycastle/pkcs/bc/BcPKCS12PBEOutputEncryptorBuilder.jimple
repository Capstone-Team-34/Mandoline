org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder extends java.lang.Object
private org.spongycastle.asn1.ASN1ObjectIdentifier algorithm
private org.spongycastle.crypto.ExtendedDigest digest
private org.spongycastle.crypto.BufferedBlockCipher engine
private int iterationCount
private java.security.SecureRandom random
    public void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        org.spongycastle.crypto.digests.SHA1Digest $r3;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.BlockCipher;

        $r3 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.ExtendedDigest)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, org.spongycastle.crypto.BlockCipher, org.spongycastle.crypto.ExtendedDigest)
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        org.spongycastle.crypto.ExtendedDigest $r3;
        org.spongycastle.crypto.paddings.PKCS7Padding $r4;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r5;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.BlockCipher;

        $r3 := @parameter2: org.spongycastle.crypto.ExtendedDigest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: int iterationCount> = 1024;

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm> = $r1;

        $r5 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        $r4 = new org.spongycastle.crypto.paddings.PKCS7Padding;

        specialinvoke $r4.<org.spongycastle.crypto.paddings.PKCS7Padding: void <init>()>();

        specialinvoke $r5.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r2, $r4);

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.BufferedBlockCipher engine> = $r5;

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.ExtendedDigest digest> = $r3;

        return;
    }
    static org.spongycastle.asn1.ASN1ObjectIdentifier access$000(org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder)
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier r1;

        $r0 := @parameter0: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        r1 = $r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm>;

        return r1;
    }
    static org.spongycastle.crypto.BufferedBlockCipher access$100(org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder)
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder $r0;
        org.spongycastle.crypto.BufferedBlockCipher r1;

        $r0 := @parameter0: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        r1 = $r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.BufferedBlockCipher engine>;

        return r1;
    }
    public org.spongycastle.operator.OutputEncryptor build(char[])
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder r0;
        char[] $r1;
        org.spongycastle.asn1.pkcs.PKCS12PBEParams r2;
        byte[] r3;
        java.security.SecureRandom $r4;
        int $i0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        org.spongycastle.crypto.ExtendedDigest $r6;
        org.spongycastle.crypto.BufferedBlockCipher $r7;
        org.spongycastle.crypto.CipherParameters $r8;
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder$1 $r9;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        $r1 := @parameter0: char[];

        $r4 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: java.security.SecureRandom random>;

        if $r4 != null goto label1;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: java.security.SecureRandom random> = $r4;

     label1:
        r3 = newarray (byte)[20];

        $r4 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: java.security.SecureRandom random>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        r2 = new org.spongycastle.asn1.pkcs.PKCS12PBEParams;

        $i0 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: int iterationCount>;

        specialinvoke r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(byte[],int)>(r3, $i0);

        $r5 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm>;

        $r6 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.ExtendedDigest digest>;

        $r7 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.BufferedBlockCipher engine>;

        $i0 = virtualinvoke $r7.<org.spongycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        $r8 = staticinvoke <org.spongycastle.pkcs.bc.PKCS12PBEUtils: org.spongycastle.crypto.CipherParameters createCipherParameters(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.crypto.ExtendedDigest,int,org.spongycastle.asn1.pkcs.PKCS12PBEParams,char[])>($r5, $r6, $i0, r2, $r1);

        $r7 = r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: org.spongycastle.crypto.BufferedBlockCipher engine>;

        virtualinvoke $r7.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r8);

        $r9 = new org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder$1;

        specialinvoke $r9.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder$1: void <init>(org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder,org.spongycastle.asn1.pkcs.PKCS12PBEParams,char[])>(r0, r2, $r1);

        return $r9;
    }
    public org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder setIterationCount(int)
    {
        org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder r0;
        int $i0;

        r0 := @this: org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.pkcs.bc.BcPKCS12PBEOutputEncryptorBuilder: int iterationCount> = $i0;

        return r0;
    }
