org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder extends java.lang.Object
private org.spongycastle.asn1.pkcs.PrivateKeyInfo privateKeyInfo
    public void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo)
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder: org.spongycastle.asn1.pkcs.PrivateKeyInfo privateKeyInfo> = $r1;

        return;
    }
    public org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo build(org.spongycastle.operator.OutputEncryptor)
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder r0;
        org.spongycastle.operator.OutputEncryptor $r1;
        java.io.ByteArrayOutputStream r2;
        java.io.IOException r3;
        java.io.OutputStream $r4;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r5;
        byte[] $r6;
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo $r7;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r8;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r9;
        java.lang.IllegalStateException $r10;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder;

        $r1 := @parameter0: org.spongycastle.operator.OutputEncryptor;

        r2 = new java.io.ByteArrayOutputStream;

     label1:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = interfaceinvoke $r1.<org.spongycastle.operator.OutputEncryptor: java.io.OutputStream getOutputStream(java.io.OutputStream)>(r2);

     label2:
        $r5 = r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfoBuilder: org.spongycastle.asn1.pkcs.PrivateKeyInfo privateKeyInfo>;

     label3:
        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: byte[] getEncoded()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r6);

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label4:
        $r7 = new org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        $r8 = new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo;

     label5:
        $r9 = interfaceinvoke $r1.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r6 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r9, $r6);

        specialinvoke $r7.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo)>($r8);

     label6:
        return $r7;

     label7:
        r3 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot encode privateKeyInfo");

        throw $r10;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
