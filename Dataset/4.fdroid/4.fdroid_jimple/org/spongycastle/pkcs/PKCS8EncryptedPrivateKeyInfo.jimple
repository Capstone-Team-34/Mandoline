org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo extends java.lang.Object
private org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo
    public void <init>(org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo)
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo r0;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r1;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo> = $r1;

        return;
    }
    public void <init>(byte[]) throws java.io.IOException
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo r0;
        byte[] $r1;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r2;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo parseBytes(byte[])>($r1);

        specialinvoke r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo)>($r2);

        return;
    }
    private static org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo parseBytes(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        org.spongycastle.asn1.ASN1Primitive $r1;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r2;
        java.lang.ClassCastException r3;
        org.spongycastle.cert.CertIOException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r7;

        $r0 := @parameter0: byte[];

     label1:
        $r1 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r0);

        $r2 = staticinvoke <org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo getInstance(java.lang.Object)>($r1);

     label2:
        return $r2;

     label3:
        r3 := @caughtexception;

        $r4 = new org.spongycastle.cert.CertIOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed data: ");

        $r6 = virtualinvoke r3.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.cert.CertIOException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r3);

        throw $r4;

     label4:
        r7 := @caughtexception;

        $r4 = new org.spongycastle.cert.CertIOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed data: ");

        $r6 = virtualinvoke r7.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.cert.CertIOException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r7);

        throw $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }
    public org.spongycastle.asn1.pkcs.PrivateKeyInfo decryptPrivateKeyInfo(org.spongycastle.operator.InputDecryptorProvider) throws org.spongycastle.pkcs.PKCSException
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo r0;
        org.spongycastle.operator.InputDecryptorProvider $r1;
        java.lang.Exception r2;
        java.io.ByteArrayInputStream r3;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r4;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r5;
        org.spongycastle.operator.InputDecryptor $r6;
        byte[] $r7;
        java.io.InputStream $r8;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r9;
        org.spongycastle.pkcs.PKCSException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        $r1 := @parameter0: org.spongycastle.operator.InputDecryptorProvider;

     label1:
        $r4 = r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo>;

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm()>();

        $r6 = interfaceinvoke $r1.<org.spongycastle.operator.InputDecryptorProvider: org.spongycastle.operator.InputDecryptor get(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r5);

     label2:
        r3 = new java.io.ByteArrayInputStream;

     label3:
        $r4 = r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo>;

        $r7 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: byte[] getEncryptedData()>();

        specialinvoke r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        $r8 = interfaceinvoke $r6.<org.spongycastle.operator.InputDecryptor: java.io.InputStream getInputStream(java.io.InputStream)>(r3);

        $r7 = staticinvoke <org.spongycastle.util.io.Streams: byte[] readAll(java.io.InputStream)>($r8);

        $r9 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r7);

     label4:
        return $r9;

     label5:
        r2 := @caughtexception;

        $r10 = new org.spongycastle.pkcs.PKCSException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to read encrypted data: ");

        $r12 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.spongycastle.pkcs.PKCSException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r2);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public byte[] getEncoded() throws java.io.IOException
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo r0;
        byte[] $r1;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo $r2;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        $r2 = r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: byte[] getEncoded()>();

        return $r1;
    }
    public org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo toASN1Structure()
    {
        org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo r0;
        org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo r1;

        r0 := @this: org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;

        r1 = r0.<org.spongycastle.pkcs.PKCS8EncryptedPrivateKeyInfo: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo encryptedPrivateKeyInfo>;

        return r1;
    }
