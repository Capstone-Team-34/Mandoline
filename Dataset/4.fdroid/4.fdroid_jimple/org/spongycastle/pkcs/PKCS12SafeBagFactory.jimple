org.spongycastle.pkcs.PKCS12SafeBagFactory extends java.lang.Object
private org.spongycastle.asn1.ASN1Sequence safeBagSeq
    public void <init>(org.spongycastle.asn1.pkcs.ContentInfo)
    {
        org.spongycastle.pkcs.PKCS12SafeBagFactory r0;
        org.spongycastle.asn1.pkcs.ContentInfo $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1OctetString $r6;
        byte[] $r7;
        org.spongycastle.asn1.ASN1Sequence $r8;

        r0 := @this: org.spongycastle.pkcs.PKCS12SafeBagFactory;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.ContentInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1ObjectIdentifier getContentType()>();

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier encryptedData>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("encryptedData requires constructor with decryptor.");

        throw $r4;

     label1:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable getContent()>();

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r7);

        r0.<org.spongycastle.pkcs.PKCS12SafeBagFactory: org.spongycastle.asn1.ASN1Sequence safeBagSeq> = $r8;

        return;
    }
    public void <init>(org.spongycastle.asn1.pkcs.ContentInfo, org.spongycastle.operator.InputDecryptorProvider) throws org.spongycastle.pkcs.PKCSException
    {
        org.spongycastle.pkcs.PKCS12SafeBagFactory r0;
        org.spongycastle.asn1.pkcs.ContentInfo $r1;
        org.spongycastle.operator.InputDecryptorProvider $r2;
        org.spongycastle.cms.CMSException r3;
        org.spongycastle.cms.CMSEncryptedData r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5, $r6;
        boolean $z0;
        org.spongycastle.asn1.cms.ContentInfo $r7;
        byte[] $r8;
        org.spongycastle.asn1.ASN1Sequence $r9;
        org.spongycastle.pkcs.PKCSException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.spongycastle.pkcs.PKCS12SafeBagFactory;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.ContentInfo;

        $r2 := @parameter1: org.spongycastle.operator.InputDecryptorProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1ObjectIdentifier getContentType()>();

        $r6 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier encryptedData>;

        $z0 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        r4 = new org.spongycastle.cms.CMSEncryptedData;

        $r7 = staticinvoke <org.spongycastle.asn1.cms.ContentInfo: org.spongycastle.asn1.cms.ContentInfo getInstance(java.lang.Object)>($r1);

        specialinvoke r4.<org.spongycastle.cms.CMSEncryptedData: void <init>(org.spongycastle.asn1.cms.ContentInfo)>($r7);

     label1:
        $r8 = virtualinvoke r4.<org.spongycastle.cms.CMSEncryptedData: byte[] getContent(org.spongycastle.operator.InputDecryptorProvider)>($r2);

        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r8);

     label2:
        r0.<org.spongycastle.pkcs.PKCS12SafeBagFactory: org.spongycastle.asn1.ASN1Sequence safeBagSeq> = $r9;

        return;

     label3:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.pkcs.PKCSException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to extract data: ");

        $r12 = virtualinvoke r3.<org.spongycastle.cms.CMSException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.spongycastle.pkcs.PKCSException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r3);

        throw $r10;

     label4:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("encryptedData requires constructor with decryptor.");

        throw $r13;

        catch org.spongycastle.cms.CMSException from label1 to label2 with label3;
    }
    public org.spongycastle.pkcs.PKCS12SafeBag[] getSafeBags()
    {
        org.spongycastle.pkcs.PKCS12SafeBagFactory r0;
        org.spongycastle.pkcs.PKCS12SafeBag[] r1;
        org.spongycastle.asn1.ASN1Sequence $r2;
        int $i0, $i1;
        org.spongycastle.pkcs.PKCS12SafeBag $r3;
        org.spongycastle.asn1.ASN1Encodable $r4;
        org.spongycastle.asn1.pkcs.SafeBag $r5;

        r0 := @this: org.spongycastle.pkcs.PKCS12SafeBagFactory;

        $r2 = r0.<org.spongycastle.pkcs.PKCS12SafeBagFactory: org.spongycastle.asn1.ASN1Sequence safeBagSeq>;

        $i0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r1 = newarray (org.spongycastle.pkcs.PKCS12SafeBag)[$i0];

        $i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pkcs.PKCS12SafeBagFactory: org.spongycastle.asn1.ASN1Sequence safeBagSeq>;

        $i1 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 == $i1 goto label2;

        $r3 = new org.spongycastle.pkcs.PKCS12SafeBag;

        $r2 = r0.<org.spongycastle.pkcs.PKCS12SafeBagFactory: org.spongycastle.asn1.ASN1Sequence safeBagSeq>;

        $r4 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r5 = staticinvoke <org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.pkcs.SafeBag getInstance(java.lang.Object)>($r4);

        specialinvoke $r3.<org.spongycastle.pkcs.PKCS12SafeBag: void <init>(org.spongycastle.asn1.pkcs.SafeBag)>($r5);

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
