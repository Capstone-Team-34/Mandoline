org.spongycastle.jcajce.spec.SkeinParameterSpec extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec
public static final int PARAM_TYPE_CONFIG
public static final int PARAM_TYPE_KEY
public static final int PARAM_TYPE_KEY_IDENTIFIER
public static final int PARAM_TYPE_MESSAGE
public static final int PARAM_TYPE_NONCE
public static final int PARAM_TYPE_OUTPUT
public static final int PARAM_TYPE_PERSONALISATION
public static final int PARAM_TYPE_PUBLIC_KEY
private java.util.Map parameters
    public void <init>()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.HashMap $r1;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: void <init>(java.util.Map)>($r1);

        return;
    }
    private void <init>(java.util.Map)
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters> = $r1;

        return;
    }
    void <init>(java.util.Map, org.spongycastle.jcajce.spec.SkeinParameterSpec$1)
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        org.spongycastle.jcajce.spec.SkeinParameterSpec$1 $r2;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.spongycastle.jcajce.spec.SkeinParameterSpec$1;

        specialinvoke r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: void <init>(java.util.Map)>($r1);

        return;
    }
    static java.util.Map access$000(org.spongycastle.jcajce.spec.SkeinParameterSpec)
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec $r0;
        java.util.Map r1;

        $r0 := @parameter0: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        r1 = $r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        return r1;
    }
    public byte[] getKey()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        return $r4;
    }
    public byte[] getKeyIdentifier()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(16);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        return $r4;
    }
    public byte[] getNonce()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(20);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        return $r4;
    }
    public java.util.Map getParameters()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map r1;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        return r1;
    }
    public byte[] getPersonalisation()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(8);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        return $r4;
    }
    public byte[] getPublicKey()
    {
        org.spongycastle.jcajce.spec.SkeinParameterSpec r0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.spec.SkeinParameterSpec;

        $r1 = r0.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map parameters>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(12);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        return $r4;
    }
