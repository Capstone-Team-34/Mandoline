org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder extends java.lang.Object implements org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder
    private void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder r0;
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1 $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder;

        $r1 := @parameter0: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder: void <init>()>();

        return;
    }
    private byte[] makeUnsigned(java.math.BigInteger)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder r0;
        java.math.BigInteger $r1;
        int $i0;
        byte[] $r2, r3;
        byte $b1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b1 = $r2[0];

        if $b1 != 0 goto label1;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, r3, 0, $i0);

        return r3;

     label1:
        return $r2;
    }
    public java.math.BigInteger[] decode(byte[]) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder r0;
        byte[] $r1, r2, r3;
        java.math.BigInteger[] r4;
        int $i0, $i1;
        java.math.BigInteger $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder;

        $r1 := @parameter0: byte[];

        r4 = newarray (java.math.BigInteger)[2];

        $i0 = lengthof $r1;

        $i0 = $i0 / 2;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i0 = $i0 / 2;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r3, 0, $i0);

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        r4[0] = $r5;

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        r4[1] = $r5;

        return r4;
    }
    public byte[] encode(java.math.BigInteger, java.math.BigInteger) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder r0;
        java.math.BigInteger $r1, $r2;
        byte[] $r3, $r4, r5;
        int $i0, $i1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder: byte[] makeUnsigned(java.math.BigInteger)>($r1);

        $r4 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder: byte[] makeUnsigned(java.math.BigInteger)>($r2);

        $i0 = lengthof $r3;

        $i1 = lengthof $r4;

        if $i0 <= $i1 goto label2;

        $i0 = lengthof $r3;

        $i0 = $i0 * 2;

        r5 = newarray (byte)[$i0];

     label1:
        $i0 = lengthof r5;

        $i0 = $i0 / 2;

        $i1 = lengthof $r3;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r5, $i0, $i1);

        $i0 = lengthof r5;

        $i1 = lengthof $r4;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, $i0, $i1);

        return r5;

     label2:
        $i0 = lengthof $r4;

        $i0 = $i0 * 2;

        r5 = newarray (byte)[$i0];

        goto label1;
    }
