org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$OldECIES extends org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$OldECIES r0;
        org.spongycastle.crypto.engines.OldIESEngine $r1;
        org.spongycastle.crypto.agreement.ECDHBasicAgreement $r2;
        org.spongycastle.crypto.generators.KDF2BytesGenerator $r3;
        org.spongycastle.crypto.digests.SHA1Digest $r4;
        org.spongycastle.crypto.macs.HMac $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$OldECIES;

        $r1 = new org.spongycastle.crypto.engines.OldIESEngine;

        $r2 = new org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        specialinvoke $r2.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: void <init>()>();

        $r3 = new org.spongycastle.crypto.generators.KDF2BytesGenerator;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r3.<org.spongycastle.crypto.generators.KDF2BytesGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        $r5 = new org.spongycastle.crypto.macs.HMac;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke $r5.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r4);

        specialinvoke $r1.<org.spongycastle.crypto.engines.OldIESEngine: void <init>(org.spongycastle.crypto.BasicAgreement,org.spongycastle.crypto.DerivationFunction,org.spongycastle.crypto.Mac)>($r2, $r3, $r5);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: void <init>(org.spongycastle.crypto.engines.IESEngine)>($r1);

        return;
    }
