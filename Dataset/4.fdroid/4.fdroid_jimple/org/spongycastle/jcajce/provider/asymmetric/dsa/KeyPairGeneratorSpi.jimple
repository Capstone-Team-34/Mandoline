org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi extends java.security.KeyPairGenerator
int certainty
org.spongycastle.crypto.generators.DSAKeyPairGenerator engine
boolean initialised
org.spongycastle.crypto.params.DSAKeyGenerationParameters param
java.security.SecureRandom random
int strength
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.DSAKeyPairGenerator $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("DSA");

        $r1 = new org.spongycastle.crypto.generators.DSAKeyPairGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DSAKeyPairGenerator engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: int strength> = 1024;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: int certainty> = 20;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: boolean initialised> = 0;

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.DSAParametersGenerator r1;
        boolean $z0;
        int $i0, $i1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.DSAKeyGenerationParameters $r3;
        org.spongycastle.crypto.params.DSAParameters $r4;
        org.spongycastle.crypto.generators.DSAKeyPairGenerator $r5;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r6;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r7;
        org.spongycastle.crypto.params.DSAPublicKeyParameters r8;
        org.spongycastle.crypto.params.DSAPrivateKeyParameters r9;
        java.security.KeyPair $r10;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey $r11;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey $r12;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: boolean initialised>;

        if $z0 != 0 goto label1;

        r1 = new org.spongycastle.crypto.generators.DSAParametersGenerator;

        specialinvoke r1.<org.spongycastle.crypto.generators.DSAParametersGenerator: void <init>()>();

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: int strength>;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: int certainty>;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        virtualinvoke r1.<org.spongycastle.crypto.generators.DSAParametersGenerator: void init(int,int,java.security.SecureRandom)>($i0, $i1, $r2);

        $r3 = new org.spongycastle.crypto.params.DSAKeyGenerationParameters;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        $r4 = virtualinvoke r1.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.params.DSAParameters generateParameters()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.DSAKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DSAParameters)>($r2, $r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DSAKeyGenerationParameters param> = $r3;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DSAKeyGenerationParameters param>;

        virtualinvoke $r5.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: boolean initialised> = 1;

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r8 = (org.spongycastle.crypto.params.DSAPublicKeyParameters) $r7;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r9 = (org.spongycastle.crypto.params.DSAPrivateKeyParameters) $r7;

        $r10 = new java.security.KeyPair;

        $r11 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey;

        specialinvoke $r11.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.crypto.params.DSAPublicKeyParameters)>(r8);

        $r12 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey;

        specialinvoke $r12.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(org.spongycastle.crypto.params.DSAPrivateKeyParameters)>(r9);

        specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12);

        return $r10;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi r0;
        int $i0, $i1;
        java.security.SecureRandom $r1;
        java.security.InvalidParameterException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        if $i0 < 512 goto label2;

        if $i0 > 4096 goto label2;

        if $i0 >= 1024 goto label1;

        $i1 = $i0 % 64;

        if $i1 != 0 goto label2;

     label1:
        if $i0 < 1024 goto label3;

        $i1 = $i0 % 1024;

        if $i1 == 0 goto label3;

     label2:
        $r2 = new java.security.InvalidParameterException;

        specialinvoke $r2.<java.security.InvalidParameterException: void <init>(java.lang.String)>("strength must be from 512 - 4096 and a multiple of 1024 above 1024");

        throw $r2;

     label3:
        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: int strength> = $i0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r1;

        return;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        java.security.spec.DSAParameterSpec r4;
        org.spongycastle.crypto.params.DSAKeyGenerationParameters $r5;
        org.spongycastle.crypto.params.DSAParameters $r6;
        java.math.BigInteger $r7, $r8, $r9;
        org.spongycastle.crypto.generators.DSAKeyPairGenerator $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 = $r1 instanceof java.security.spec.DSAParameterSpec;

        if $z0 != 0 goto label1;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a DSAParameterSpec");

        throw $r3;

     label1:
        r4 = (java.security.spec.DSAParameterSpec) $r1;

        $r5 = new org.spongycastle.crypto.params.DSAKeyGenerationParameters;

        $r6 = new org.spongycastle.crypto.params.DSAParameters;

        $r7 = virtualinvoke r4.<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()>();

        $r8 = virtualinvoke r4.<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()>();

        $r9 = virtualinvoke r4.<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r6.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r8, $r9);

        specialinvoke $r5.<org.spongycastle.crypto.params.DSAKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DSAParameters)>($r2, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DSAKeyGenerationParameters param> = $r5;

        $r10 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DSAKeyPairGenerator engine>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DSAKeyGenerationParameters param>;

        virtualinvoke $r10.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;
    }
