org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: void <init>()>();

        return;
    }
    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        java.lang.Exception r1, r2;
        java.security.spec.KeySpec r3;
        boolean $z0;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        byte[] $r5;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r6;
        java.security.PrivateKey $r7;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey $r8;
        org.spongycastle.asn1.pkcs.RSAPrivateKey $r9;
        org.spongycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        java.security.spec.RSAPrivateCrtKeySpec r13;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey $r14;
        java.security.spec.RSAPrivateKeySpec r15;
        java.security.spec.InvalidKeySpecException $r16;
        java.lang.Class $r17;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        r3 := @parameter0: java.security.spec.KeySpec;

        $z0 = r3 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z0 == 0 goto label7;

     label1:
        $r4 = (java.security.spec.PKCS8EncodedKeySpec) r3;

        $r5 = virtualinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $r6 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r5);

        $r7 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r6);

     label2:
        return $r7;

     label3:
        r1 := @caughtexception;

        $r8 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

     label4:
        $r4 = (java.security.spec.PKCS8EncodedKeySpec) r3;

        $r5 = virtualinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $r9 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPrivateKey: org.spongycastle.asn1.pkcs.RSAPrivateKey getInstance(java.lang.Object)>($r5);

        specialinvoke $r8.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(org.spongycastle.asn1.pkcs.RSAPrivateKey)>($r9);

     label5:
        return $r8;

     label6:
        r2 := @caughtexception;

        $r10 = new org.spongycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to process key spec: ");

        $r12 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.spongycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r1);

        throw $r10;

     label7:
        $z0 = r3 instanceof java.security.spec.RSAPrivateCrtKeySpec;

        if $z0 == 0 goto label8;

        $r8 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r13 = (java.security.spec.RSAPrivateCrtKeySpec) r3;

        specialinvoke $r8.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(java.security.spec.RSAPrivateCrtKeySpec)>(r13);

        return $r8;

     label8:
        $z0 = r3 instanceof java.security.spec.RSAPrivateKeySpec;

        if $z0 == 0 goto label9;

        $r14 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey;

        r15 = (java.security.spec.RSAPrivateKeySpec) r3;

        specialinvoke $r14.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>(java.security.spec.RSAPrivateKeySpec)>(r15);

        return $r14;

     label9:
        $r16 = new java.security.spec.InvalidKeySpecException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown KeySpec type: ");

        $r17 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r12);

        throw $r16;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        java.security.PublicKey $r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey $r3;
        java.security.spec.RSAPublicKeySpec r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof java.security.spec.RSAPublicKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey;

        r4 = (java.security.spec.RSAPublicKeySpec) r2;

        specialinvoke $r3.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey: void <init>(java.security.spec.RSAPublicKeySpec)>(r4);

        return $r3;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>(r2);

        return $r1;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2;
        boolean $z0;
        java.security.interfaces.RSAPublicKey r3;
        java.security.spec.RSAPublicKeySpec $r4;
        java.math.BigInteger $r5, $r6, $r11, $r12, $r13, $r14, $r15, $r16;
        java.security.interfaces.RSAPrivateKey r7;
        java.security.spec.RSAPrivateKeySpec $r8;
        java.security.interfaces.RSAPrivateCrtKey r9;
        java.security.spec.RSAPrivateCrtKeySpec $r10;
        java.security.spec.KeySpec $r17;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/RSAPublicKeySpec;");

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label1;

        r3 = (java.security.interfaces.RSAPublicKey) $r1;

        $r4 = new java.security.spec.RSAPublicKeySpec;

        $r5 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r4.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        return $r4;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/RSAPrivateKeySpec;");

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label2;

        r7 = (java.security.interfaces.RSAPrivateKey) $r1;

        $r8 = new java.security.spec.RSAPrivateKeySpec;

        $r5 = interfaceinvoke r7.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r6 = interfaceinvoke r7.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r8.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

        return $r8;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/RSAPrivateCrtKeySpec;");

        if $z0 == 0 goto label3;

        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z0 == 0 goto label3;

        r9 = (java.security.interfaces.RSAPrivateCrtKey) $r1;

        $r10 = new java.security.spec.RSAPrivateCrtKeySpec;

        $r5 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r6 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r11 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r12 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r13 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r14 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r15 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r16 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r10.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, $r11, $r12, $r13, $r14, $r15, $r16);

        return $r10;

     label3:
        $r17 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class)>($r1, $r2);

        return $r17;
    }
    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        java.security.Key r1;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey $r2;
        java.security.interfaces.RSAPublicKey r3;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey $r4;
        java.security.interfaces.RSAPrivateCrtKey r5;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey $r6;
        java.security.interfaces.RSAPrivateKey r7;
        java.security.InvalidKeyException $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        r1 := @parameter0: java.security.Key;

        $z0 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey;

        r3 = (java.security.interfaces.RSAPublicKey) r1;

        specialinvoke $r2.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey: void <init>(java.security.interfaces.RSAPublicKey)>(r3);

        return $r2;

     label1:
        $z0 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z0 == 0 goto label2;

        $r4 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r5 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(java.security.interfaces.RSAPrivateCrtKey)>(r5);

        return $r4;

     label2:
        $z0 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label3;

        $r6 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey;

        r7 = (java.security.interfaces.RSAPrivateKey) r1;

        specialinvoke $r6.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>(java.security.interfaces.RSAPrivateKey)>(r7);

        return $r6;

     label3:
        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key type unknown");

        throw $r8;
    }
    public java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        boolean $z0;
        org.spongycastle.asn1.ASN1Encodable $r4;
        org.spongycastle.asn1.pkcs.RSAPrivateKey $r5;
        java.math.BigInteger $r6;
        int $i0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey $r7;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey $r8;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: boolean isRsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r5 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPrivateKey: org.spongycastle.asn1.pkcs.RSAPrivateKey getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getCoefficient()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        if $i0 != 0 goto label1;

        $r7 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey;

        specialinvoke $r7.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>(org.spongycastle.asn1.pkcs.RSAPrivateKey)>($r5);

        return $r7;

     label1:
        $r8 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        specialinvoke $r8.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r1);

        return $r8;

     label2:
        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm identifier ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in key not recognised");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r9;
    }
    public java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: boolean isRsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r1);

        return $r4;

     label1:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm identifier ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in key not recognised");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }
