org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi extends java.security.SignatureSpi
private org.spongycastle.crypto.Digest contentDigest
private java.security.AlgorithmParameters engineParams
private final org.spongycastle.jcajce.util.JcaJceHelper helper
private boolean isRaw
private org.spongycastle.crypto.Digest mgfDigest
private java.security.spec.PSSParameterSpec originalSpec
private java.security.spec.PSSParameterSpec paramSpec
private org.spongycastle.crypto.signers.PSSSigner pss
private int saltLength
private org.spongycastle.crypto.AsymmetricBlockCipher signer
private byte trailer
    protected void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, java.security.spec.PSSParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        java.security.spec.PSSParameterSpec $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: java.security.spec.PSSParameterSpec;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,java.security.spec.PSSParameterSpec,boolean)>($r1, $r2, 0);

        return;
    }
    protected void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, java.security.spec.PSSParameterSpec, boolean)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        java.security.spec.PSSParameterSpec $r2;
        boolean $z0;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r3;
        java.lang.String $r4;
        org.spongycastle.crypto.Digest $r5;
        int $i0;
        byte $b1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: java.security.spec.PSSParameterSpec;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        $r3 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher signer> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec originalSpec> = $r2;

        if $r2 != null goto label2;

        $r2 = <java.security.spec.PSSParameterSpec: java.security.spec.PSSParameterSpec DEFAULT>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        $r4 = virtualinvoke $r2.<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest> = $r5;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        $i0 = virtualinvoke $r2.<java.security.spec.PSSParameterSpec: int getSaltLength()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: int saltLength> = $i0;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        $i0 = virtualinvoke $r2.<java.security.spec.PSSParameterSpec: int getTrailerField()>();

        $b1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte getTrailer(int)>($i0);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte trailer> = $b1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: boolean isRaw> = $z0;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: void setupContentDigest()>();

        return;

     label2:
        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec> = $r2;

        goto label1;
    }
    private byte getTrailer(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $i0 := @parameter0: int;

        if $i0 != 1 goto label1;

        return -68;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown trailer field");

        throw $r1;
    }
    private void setupContentDigest()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.Digest $r1;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: boolean isRaw>;

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest>;

        specialinvoke $r2.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest: void <init>(org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi,org.spongycastle.crypto.Digest)>(r0, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest contentDigest> = $r2;

        return;

     label1:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest contentDigest> = $r1;

        return;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineGetParameter unsupported");

        throw $r2;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        java.security.spec.PSSParameterSpec $r3;
        org.spongycastle.jcajce.util.JcaJceHelper $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.AlgorithmParameters engineParams>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>("PSS");

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.AlgorithmParameters engineParams> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.AlgorithmParameters engineParams>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.AlgorithmParameters engineParams>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.Digest $r1, $r7;
        int $i0;
        byte $b1;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        java.security.PrivateKey $r3;
        boolean $z0;
        java.security.InvalidKeyException $r4;
        org.spongycastle.crypto.signers.PSSSigner $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        java.security.interfaces.RSAPrivateKey $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r3 := @parameter0: java.security.PrivateKey;

        $z0 = $r3 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Supplied key is not a RSAPrivateKey instance");

        throw $r4;

     label1:
        $r5 = new org.spongycastle.crypto.signers.PSSSigner;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher signer>;

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest contentDigest>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest>;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: int saltLength>;

        $b1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte trailer>;

        specialinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,int,byte)>($r6, $r7, $r1, $i0, $b1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss> = $r5;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        $r8 = (java.security.interfaces.RSAPrivateKey) $r3;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey)>($r8);

        virtualinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r2);

        return;
    }
    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        java.security.SecureRandom $r1;
        int $i0;
        byte $b1;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        java.security.PrivateKey $r3;
        boolean $z0;
        java.security.InvalidKeyException $r4;
        org.spongycastle.crypto.signers.PSSSigner $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        org.spongycastle.crypto.Digest $r7, $r8;
        org.spongycastle.crypto.params.ParametersWithRandom $r9;
        java.security.interfaces.RSAPrivateKey $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r3 := @parameter0: java.security.PrivateKey;

        $r1 := @parameter1: java.security.SecureRandom;

        $z0 = $r3 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Supplied key is not a RSAPrivateKey instance");

        throw $r4;

     label1:
        $r5 = new org.spongycastle.crypto.signers.PSSSigner;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher signer>;

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest contentDigest>;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest>;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: int saltLength>;

        $b1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte trailer>;

        specialinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,int,byte)>($r6, $r7, $r8, $i0, $b1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss> = $r5;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        $r9 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r10 = (java.security.interfaces.RSAPrivateKey) $r3;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey)>($r10);

        specialinvoke $r9.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, $r1);

        virtualinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r9);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.Digest $r1, $r7;
        int $i0;
        byte $b1;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        java.security.PublicKey $r3;
        boolean $z0;
        java.security.InvalidKeyException $r4;
        org.spongycastle.crypto.signers.PSSSigner $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        java.security.interfaces.RSAPublicKey $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r3 := @parameter0: java.security.PublicKey;

        $z0 = $r3 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Supplied key is not a RSAPublicKey instance");

        throw $r4;

     label1:
        $r5 = new org.spongycastle.crypto.signers.PSSSigner;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher signer>;

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest contentDigest>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest>;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: int saltLength>;

        $b1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte trailer>;

        specialinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,int,byte)>($r6, $r7, $r1, $i0, $b1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss> = $r5;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        $r8 = (java.security.interfaces.RSAPublicKey) $r3;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey)>($r8);

        virtualinvoke $r5.<org.spongycastle.crypto.signers.PSSSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r2);

        return;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        boolean $z0;
        java.security.spec.PSSParameterSpec r2, $r3;
        java.lang.String $r4, $r5;
        java.security.InvalidAlgorithmParameterException $r6;
        java.lang.StringBuilder $r7;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r8;
        java.security.spec.MGF1ParameterSpec r9;
        org.spongycastle.crypto.Digest $r10;
        int $i0;
        byte $b1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $z0 = $r1 instanceof java.security.spec.PSSParameterSpec;

        if $z0 == 0 goto label6;

        r2 = (java.security.spec.PSSParameterSpec) $r1;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec originalSpec>;

        if $r3 == null goto label1;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec originalSpec>;

        $r4 = virtualinvoke $r3.<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r5 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: boolean isSameDigest(java.lang.String,java.lang.String)>($r4, $r5);

        if $z0 != 0 goto label1;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter must be using ");

        r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec originalSpec>;

        $r4 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label1:
        $r4 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("MGF1");

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()>();

        $r8 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_mgf1>;

        $r5 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown mask generation function specified");

        throw $r6;

     label2:
        $r1 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        $z0 = $r1 instanceof java.security.spec.MGF1ParameterSpec;

        if $z0 != 0 goto label3;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown MGF parameters");

        throw $r6;

     label3:
        $r1 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        r9 = (java.security.spec.MGF1ParameterSpec) $r1;

        $r4 = virtualinvoke r9.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r5 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: boolean isSameDigest(java.lang.String,java.lang.String)>($r4, $r5);

        if $z0 != 0 goto label4;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("digest algorithm for MGF should be the same as for PSS parameters.");

        throw $r6;

     label4:
        $r4 = virtualinvoke r9.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r10 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r4);

        if $r10 != null goto label5;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no match on MGF digest algorithm: ");

        $r4 = virtualinvoke r9.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label5:
        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec> = r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.Digest mgfDigest> = $r10;

        r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        $i0 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: int getSaltLength()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: int saltLength> = $i0;

        r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: java.security.spec.PSSParameterSpec paramSpec>;

        $i0 = virtualinvoke r2.<java.security.spec.PSSParameterSpec: int getTrailerField()>();

        $b1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte getTrailer(int)>($i0);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: byte trailer> = $b1;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: void setupContentDigest()>();

        return;

     label6:
        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Only PSSParameterSpec supported");

        throw $r6;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        org.spongycastle.crypto.CryptoException r1;
        org.spongycastle.crypto.signers.PSSSigner $r2;
        byte[] $r3;
        java.security.SignatureException $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

     label1:
        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.signers.PSSSigner: byte[] generateSignature()>();

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new java.security.SignatureException;

        $r5 = virtualinvoke r1.<org.spongycastle.crypto.CryptoException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.security.SignatureException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch org.spongycastle.crypto.CryptoException from label1 to label2 with label3;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        byte $b0;
        org.spongycastle.crypto.signers.PSSSigner $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        virtualinvoke $r1.<org.spongycastle.crypto.signers.PSSSigner: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.signers.PSSSigner $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        virtualinvoke $r2.<org.spongycastle.crypto.signers.PSSSigner: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi r0;
        byte[] $r1;
        boolean $z0;
        org.spongycastle.crypto.signers.PSSSigner $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi: org.spongycastle.crypto.signers.PSSSigner pss>;

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.signers.PSSSigner: boolean verifySignature(byte[])>($r1);

        return $z0;
    }
