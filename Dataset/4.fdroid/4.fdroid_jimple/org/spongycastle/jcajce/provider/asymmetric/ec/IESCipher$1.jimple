org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1 extends java.lang.Object implements org.spongycastle.crypto.KeyEncoder
final org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher this$0
final boolean val$usePointCompression
    void <init>(org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher, boolean)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1 r0;
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1;

        $r1 := @parameter0: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $z0 := @parameter1: boolean;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher this$0> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1: boolean val$usePointCompression> = $z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public byte[] getEncoded(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1 r0;
        boolean $z0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r2;
        org.spongycastle.math.ec.ECPoint $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1: boolean val$usePointCompression>;

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded(boolean)>($z0);

        return $r4;
    }
