org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi extends java.security.KeyPairGenerator
private static java.lang.Object lock
private static java.util.Hashtable params
int certainty
org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine
boolean initialised
org.spongycastle.crypto.params.DHKeyGenerationParameters param
java.security.SecureRandom random
int strength
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        java.lang.Object $r1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.lang.Object lock> = $r1;

        return;
    }
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("DH");

        $r1 = new org.spongycastle.crypto.generators.DHBasicKeyPairGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int strength> = 1024;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int certainty> = 20;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: boolean initialised> = 0;

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.DHParametersGenerator r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.util.Hashtable $r3;
        java.lang.Object $r4, $r20;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r5;
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator $r6;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r7;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r8;
        org.spongycastle.crypto.params.DHPublicKeyParameters r9;
        org.spongycastle.crypto.params.DHPrivateKeyParameters r10;
        java.security.KeyPair $r11;
        org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey $r12;
        org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey $r13;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r14;
        javax.crypto.spec.DHParameterSpec $r15;
        java.security.SecureRandom $r16;
        org.spongycastle.crypto.params.DHParameters $r17;
        java.math.BigInteger $r18, $r19;
        java.lang.Throwable $r21;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: boolean initialised>;

        if $z0 != 0 goto label02;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int strength>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i0);

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params>;

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label03;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.spongycastle.crypto.params.DHKeyGenerationParameters) $r4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r5;

     label01:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param>;

        virtualinvoke $r6.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: boolean initialised> = 1;

     label02:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine>;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r9 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r8;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r10 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) $r8;

        $r11 = new java.security.KeyPair;

        $r12 = new org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey;

        specialinvoke $r12.<org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>(r9);

        $r13 = new org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey: void <init>(org.spongycastle.crypto.params.DHPrivateKeyParameters)>(r10);

        specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r12, $r13);

        return $r11;

     label03:
        $r14 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int strength>;

        $r15 = interfaceinvoke $r14.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int)>($i0);

        if $r15 == null goto label04;

        $r5 = new org.spongycastle.crypto.params.DHKeyGenerationParameters;

        $r16 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        $r17 = new org.spongycastle.crypto.params.DHParameters;

        $r18 = virtualinvoke $r15.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r19 = virtualinvoke $r15.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $i0 = virtualinvoke $r15.<javax.crypto.spec.DHParameterSpec: int getL()>();

        specialinvoke $r17.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)>($r18, $r19, null, $i0);

        specialinvoke $r5.<org.spongycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r16, $r17);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r5;

        goto label01;

     label04:
        $r4 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.lang.Object lock>;

        entermonitor $r4;

     label05:
        $r3 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params>;

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params>;

        $r20 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.spongycastle.crypto.params.DHKeyGenerationParameters) $r20;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r5;

     label06:
        exitmonitor $r4;

     label07:
        goto label01;

     label08:
        $r21 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r21;

     label10:
        r1 = new org.spongycastle.crypto.generators.DHParametersGenerator;

        specialinvoke r1.<org.spongycastle.crypto.generators.DHParametersGenerator: void <init>()>();

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int strength>;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int certainty>;

        $r16 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        virtualinvoke r1.<org.spongycastle.crypto.generators.DHParametersGenerator: void init(int,int,java.security.SecureRandom)>($i0, $i1, $r16);

        $r5 = new org.spongycastle.crypto.params.DHKeyGenerationParameters;

        $r16 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        $r17 = virtualinvoke r1.<org.spongycastle.crypto.generators.DHParametersGenerator: org.spongycastle.crypto.params.DHParameters generateParameters()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r16, $r17);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r5;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.util.Hashtable params>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

     label11:
        goto label06;

        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi r0;
        int $i0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: int strength> = $i0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r1;

        return;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        javax.crypto.spec.DHParameterSpec r4;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r5;
        org.spongycastle.crypto.params.DHParameters $r6;
        java.math.BigInteger $r7, $r8;
        int $i0;
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 = $r1 instanceof javax.crypto.spec.DHParameterSpec;

        if $z0 != 0 goto label1;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a DHParameterSpec");

        throw $r3;

     label1:
        r4 = (javax.crypto.spec.DHParameterSpec) $r1;

        $r5 = new org.spongycastle.crypto.params.DHKeyGenerationParameters;

        $r6 = new org.spongycastle.crypto.params.DHParameters;

        $r7 = virtualinvoke r4.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r8 = virtualinvoke r4.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $i0 = virtualinvoke r4.<javax.crypto.spec.DHParameterSpec: int getL()>();

        specialinvoke $r6.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)>($r7, $r8, null, $i0);

        specialinvoke $r5.<org.spongycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r2, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r5;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: org.spongycastle.crypto.params.DHKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;
    }
