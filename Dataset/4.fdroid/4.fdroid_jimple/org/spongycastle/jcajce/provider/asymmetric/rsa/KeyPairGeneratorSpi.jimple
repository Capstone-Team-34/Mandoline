org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi extends java.security.KeyPairGenerator
static final java.math.BigInteger defaultPublicExponent
static final int defaultTests
org.spongycastle.crypto.generators.RSAKeyPairGenerator engine
org.spongycastle.crypto.params.RSAKeyGenerationParameters param
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(65537L);

        <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.math.BigInteger defaultPublicExponent> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi r0;
        java.security.SecureRandom $r1;
        org.spongycastle.crypto.generators.RSAKeyPairGenerator $r2;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r3;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("RSA");

        $r2 = new org.spongycastle.crypto.generators.RSAKeyPairGenerator;

        specialinvoke $r2.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.RSAKeyPairGenerator engine> = $r2;

        $r3 = new org.spongycastle.crypto.params.RSAKeyGenerationParameters;

        $r4 = <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.math.BigInteger defaultPublicExponent>;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r4, $r1, 2048, 112);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param> = $r3;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r2.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r3);

        return;
    }
    public void <init>(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>($r1);

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi r0;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey $r1;
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey $r2;
        org.spongycastle.crypto.generators.RSAKeyPairGenerator $r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.params.RSAKeyParameters r6;
        org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters r7;
        java.security.KeyPair $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r6 = (org.spongycastle.crypto.params.RSAKeyParameters) $r5;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r7 = (org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters) $r5;

        $r8 = new java.security.KeyPair;

        $r1 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey;

        specialinvoke $r1.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey: void <init>(org.spongycastle.crypto.params.RSAKeyParameters)>(r6);

        $r2 = new org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        specialinvoke $r2.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters)>(r7);

        specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2);

        return $r8;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi r0;
        int $i0;
        java.security.SecureRandom $r1;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r2;
        java.math.BigInteger $r3;
        org.spongycastle.crypto.generators.RSAKeyPairGenerator $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        $r2 = new org.spongycastle.crypto.params.RSAKeyGenerationParameters;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: java.math.BigInteger defaultPublicExponent>;

        specialinvoke $r2.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r3, $r1, $i0, 112);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param> = $r2;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r4.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r2);

        return;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        java.security.spec.RSAKeyGenParameterSpec r4;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r5;
        java.math.BigInteger $r6;
        int $i0;
        org.spongycastle.crypto.generators.RSAKeyPairGenerator $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 = $r1 instanceof java.security.spec.RSAKeyGenParameterSpec;

        if $z0 != 0 goto label1;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a RSAKeyGenParameterSpec");

        throw $r3;

     label1:
        r4 = (java.security.spec.RSAKeyGenParameterSpec) $r1;

        $r5 = new org.spongycastle.crypto.params.RSAKeyGenerationParameters;

        $r6 = virtualinvoke r4.<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()>();

        $i0 = virtualinvoke r4.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r6, $r2, $i0, 112);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param> = $r5;

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r7.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r5);

        return;
    }
