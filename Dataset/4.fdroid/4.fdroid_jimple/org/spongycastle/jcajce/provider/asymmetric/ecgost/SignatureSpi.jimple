org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi extends java.security.SignatureSpi implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
private org.spongycastle.crypto.Digest digest
private org.spongycastle.crypto.DSA signer
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        org.spongycastle.crypto.digests.GOST3411Digest $r1;
        org.spongycastle.crypto.signers.ECGOST3410Signer $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        $r1 = new org.spongycastle.crypto.digests.GOST3411Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.GOST3411Digest: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest> = $r1;

        $r2 = new org.spongycastle.crypto.signers.ECGOST3410Signer;

        specialinvoke $r2.<org.spongycastle.crypto.signers.ECGOST3410Signer: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer> = $r2;

        return;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.security.PrivateKey $r1;
        org.spongycastle.crypto.params.ParametersWithRandom $r2;
        java.security.SecureRandom $r3;
        boolean $z0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.crypto.DSA $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $z0 = $r1 instanceof org.spongycastle.jce.interfaces.ECKey;

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: java.security.SecureRandom appRandom>;

        if $r3 == null goto label3;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r2 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: java.security.SecureRandom appRandom>;

        specialinvoke $r2.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r4, $r3);

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r2);

        return;

     label2:
        $r4 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.GOST3410Util: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

        goto label1;

     label3:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r4);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.lang.Exception r1;
        java.security.PublicKey $r2;
        boolean $z0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.Digest $r4;
        org.spongycastle.crypto.DSA $r5;
        byte[] $r6;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r7;
        java.security.InvalidKeyException $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r2 := @parameter0: java.security.PublicKey;

        $z0 = $r2 instanceof org.spongycastle.jce.interfaces.ECPublicKey;

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r2);

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void reset()>();

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r5.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r3);

        return;

     label2:
        $z0 = $r2 instanceof org.spongycastle.jce.interfaces.GOST3410Key;

        if $z0 == 0 goto label3;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.GOST3410Util: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r2);

        goto label1;

     label3:
        $r6 = interfaceinvoke $r2.<java.security.PublicKey: byte[] getEncoded()>();

        $r7 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r6);

        $r2 = staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: java.security.PublicKey getPublicKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r7);

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r2);

     label4:
        goto label1;

     label5:
        r1 := @caughtexception;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r8;

        catch java.lang.Exception from label3 to label4 with label5;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        java.lang.Exception r1;
        byte[] r2, r3, $r8;
        org.spongycastle.crypto.Digest $r4;
        int $i0, $i2;
        org.spongycastle.crypto.DSA $r5;
        java.math.BigInteger[] $r6;
        java.math.BigInteger $r7;
        byte $b1;
        java.security.SignatureException $r9;
        java.lang.String $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label01:
        r3 = newarray (byte)[64];

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r7 = $r6[0];

        r2 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        $r7 = $r6[1];

        $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        $b1 = $r8[0];

     label02:
        if $b1 == 0 goto label12;

     label03:
        $i0 = lengthof $r8;

     label04:
        $i0 = 32 - $i0;

     label05:
        $i2 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r3, $i0, $i2);

     label06:
        $b1 = r2[0];

     label07:
        if $b1 == 0 goto label19;

     label08:
        $i0 = lengthof r2;

     label09:
        $i0 = 64 - $i0;

     label10:
        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, $i0, $i2);

     label11:
        return r3;

     label12:
        $i0 = lengthof $r8;

     label13:
        $i0 = $i0 + -1;

        $i0 = 32 - $i0;

     label14:
        $i2 = lengthof $r8;

     label15:
        $i2 = $i2 + -1;

     label16:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 1, r3, $i0, $i2);

     label17:
        goto label06;

     label18:
        r1 := @caughtexception;

        $r9 = new java.security.SignatureException;

        $r10 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label19:
        $i0 = lengthof r2;

     label20:
        $i0 = $i0 + -1;

        $i0 = 64 - $i0;

     label21:
        $i2 = lengthof r2;

     label22:
        $i2 = $i2 + -1;

     label23:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r3, $i0, $i2);

     label24:
        return r3;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Exception from label03 to label04 with label18;
        catch java.lang.Exception from label05 to label07 with label18;
        catch java.lang.Exception from label08 to label09 with label18;
        catch java.lang.Exception from label10 to label11 with label18;
        catch java.lang.Exception from label12 to label13 with label18;
        catch java.lang.Exception from label14 to label15 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label18;
        catch java.lang.Exception from label21 to label22 with label18;
        catch java.lang.Exception from label23 to label24 with label18;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi r0;
        byte[] $r1, r3, r4, r5;
        java.lang.Exception r2;
        java.math.BigInteger[] r6;
        org.spongycastle.crypto.Digest $r7;
        int $i0;
        java.math.BigInteger $r8, $r10;
        org.spongycastle.crypto.DSA $r9;
        boolean $z0;
        java.security.SignatureException $r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi;

        $r1 := @parameter0: byte[];

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label1:
        r4 = newarray (byte)[32];

        r5 = newarray (byte)[32];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r5, 0, 32);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 32, r4, 0, 32);

        r6 = newarray (java.math.BigInteger)[2];

     label2:
        $r8 = new java.math.BigInteger;

     label3:
        specialinvoke $r8.<java.math.BigInteger: void <init>(int,byte[])>(1, r4);

        r6[0] = $r8;

     label4:
        $r8 = new java.math.BigInteger;

     label5:
        specialinvoke $r8.<java.math.BigInteger: void <init>(int,byte[])>(1, r5);

        r6[1] = $r8;

     label6:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r8 = r6[0];

        $r10 = r6[1];

        $z0 = interfaceinvoke $r9.<org.spongycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r3, $r8, $r10);

        return $z0;

     label7:
        r2 := @caughtexception;

        $r11 = new java.security.SignatureException;

        specialinvoke $r11.<java.security.SignatureException: void <init>(java.lang.String)>("error decoding signature bytes.");

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
