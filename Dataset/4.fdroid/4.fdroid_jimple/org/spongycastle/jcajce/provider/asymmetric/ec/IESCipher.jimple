org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher extends javax.crypto.CipherSpi
private java.io.ByteArrayOutputStream buffer
private boolean dhaesMode
private org.spongycastle.crypto.engines.IESEngine engine
private java.security.AlgorithmParameters engineParam
private org.spongycastle.jce.spec.IESParameterSpec engineSpec
private final org.spongycastle.jcajce.util.JcaJceHelper helper
private int ivLength
private org.spongycastle.crypto.params.AsymmetricKeyParameter key
private org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter
private java.security.SecureRandom random
private int state
    public void <init>(org.spongycastle.crypto.engines.IESEngine)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        org.spongycastle.crypto.engines.IESEngine $r1;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: org.spongycastle.crypto.engines.IESEngine;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state> = -1;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: boolean dhaesMode> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int ivLength> = 0;

        return;
    }
    public void <init>(org.spongycastle.crypto.engines.IESEngine, int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        org.spongycastle.crypto.engines.IESEngine $r1;
        int $i0;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: org.spongycastle.crypto.engines.IESEngine;

        $i0 := @parameter1: int;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state> = -1;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: boolean dhaesMode> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int ivLength> = $i0;

        return;
    }
    public int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: byte[] engineDoFinal(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

        $i0 = lengthof $r1;

        return $i0;
    }
    public byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        byte[] $r1, $r7, $r8;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r4;
        java.lang.Object r5;
        org.spongycastle.jce.spec.IESParameterSpec $r6;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r9, $r13;
        org.spongycastle.crypto.params.ECKeyParameters $r10;
        org.spongycastle.crypto.params.ECDomainParameters $r11;
        org.spongycastle.crypto.engines.IESEngine $r12;
        java.lang.Exception r14, r17;
        java.lang.String $r15;
        java.security.SecureRandom $r16;
        boolean $z0;
        org.spongycastle.crypto.InvalidCipherTextException r19;
        org.spongycastle.crypto.params.IESWithCipherParameters $r20;
        org.spongycastle.crypto.params.ParametersWithIV $r21;
        javax.crypto.BadPaddingException $r22;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r23;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r24;
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1 $r25;
        org.spongycastle.crypto.generators.EphemeralKeyPairGenerator $r26;
        org.spongycastle.crypto.parsers.ECIESPublicKeyParser $r27;
        java.lang.IllegalStateException $r28;
        org.spongycastle.crypto.CipherParameters $r29;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 == 0 goto label01;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label01:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        $r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        $r20 = new org.spongycastle.crypto.params.IESWithCipherParameters;

        r5 = $r20;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $r7 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getDerivationV()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $r8 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getEncodingV()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $i0 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: int getMacKeySize()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $i1 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: int getCipherKeySize()>();

        specialinvoke $r20.<org.spongycastle.crypto.params.IESWithCipherParameters: void <init>(byte[],byte[],int,int)>($r7, $r8, $i0, $i1);

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $r7 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getNonce()>();

        if $r7 == null goto label02;

        $r21 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $r7 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getNonce()>();

        $r29 = (org.spongycastle.crypto.CipherParameters) $r20;

        specialinvoke $r21.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r29, $r7);

        r5 = $r21;

     label02:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r10 = (org.spongycastle.crypto.params.ECKeyParameters) $r9;

        $r11 = virtualinvoke $r10.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter>;

        if $r9 == null goto label13;

     label03:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

     label04:
        if $i0 == 1 goto label07;

     label05:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

     label06:
        if $i0 != 3 goto label10;

     label07:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter>;

        $r13 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r29 = (org.spongycastle.crypto.CipherParameters) r5;

        virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: void init(boolean,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters)>(1, $r9, $r13, $r29);

     label08:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $i0 = lengthof $r1;

        $r1 = virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label09:
        return $r1;

     label10:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r13 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter>;

        $r29 = (org.spongycastle.crypto.CipherParameters) r5;

        virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: void init(boolean,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters)>(0, $r9, $r13, $r29);

     label11:
        goto label08;

     label12:
        r14 := @caughtexception;

        $r22 = new javax.crypto.BadPaddingException;

        $r15 = virtualinvoke r14.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r22.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r15);

        throw $r22;

     label13:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i0 == 1 goto label14;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i0 != 3 goto label18;

     label14:
        $r23 = new org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke $r23.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        $r24 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r16 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.SecureRandom random>;

        specialinvoke $r24.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r11, $r16);

        virtualinvoke $r23.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r24);

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $z0 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: boolean getPointCompression()>();

        $r26 = new org.spongycastle.crypto.generators.EphemeralKeyPairGenerator;

        $r25 = new org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1;

        specialinvoke $r25.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$1: void <init>(org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher,boolean)>(r0, $z0);

        specialinvoke $r26.<org.spongycastle.crypto.generators.EphemeralKeyPairGenerator: void <init>(org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator,org.spongycastle.crypto.KeyEncoder)>($r23, $r25);

     label15:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r29 = (org.spongycastle.crypto.CipherParameters) r5;

        virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: void init(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.generators.EphemeralKeyPairGenerator)>($r9, $r29, $r26);

        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $i0 = lengthof $r1;

        $r1 = virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label16:
        return $r1;

     label17:
        r17 := @caughtexception;

        $r22 = new javax.crypto.BadPaddingException;

        $r15 = virtualinvoke r17.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r22.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r15);

        throw $r22;

     label18:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i0 == 2 goto label19;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i0 != 4 goto label27;

     label19:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r27 = new org.spongycastle.crypto.parsers.ECIESPublicKeyParser;

     label20:
        specialinvoke $r27.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: void <init>(org.spongycastle.crypto.params.ECDomainParameters)>($r11);

     label21:
        $r29 = (org.spongycastle.crypto.CipherParameters) r5;

     label22:
        virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: void init(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.KeyParser)>($r9, $r29, $r27);

     label23:
        $r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $i0 = lengthof $r1;

     label24:
        $r1 = virtualinvoke $r12.<org.spongycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label25:
        return $r1;

     label26:
        r19 := @caughtexception;

        $r22 = new javax.crypto.BadPaddingException;

        $r15 = virtualinvoke r19.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r22.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r15);

        throw $r22;

     label27:
        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r28;

        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label15 to label16 with label17;
        catch org.spongycastle.crypto.InvalidCipherTextException from label20 to label21 with label26;
        catch org.spongycastle.crypto.InvalidCipherTextException from label22 to label23 with label26;
        catch org.spongycastle.crypto.InvalidCipherTextException from label24 to label25 with label26;
    }
    public int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        org.spongycastle.crypto.engines.IESEngine $r1;
        org.spongycastle.crypto.BufferedBlockCipher $r2;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        if $r2 == null goto label1;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        return $i0;

     label1:
        return 0;
    }
    public byte[] engineGetIV()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        return null;
    }
    public int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        java.security.Key r1;
        boolean $z0;
        org.spongycastle.jce.interfaces.ECKey r2;
        org.spongycastle.jce.spec.ECParameterSpec $r3;
        org.spongycastle.math.ec.ECCurve $r4;
        int $i0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        r1 := @parameter0: java.security.Key;

        $z0 = r1 instanceof org.spongycastle.jce.interfaces.ECKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.jce.interfaces.ECKey) r1;

        $r3 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ECKey: org.spongycastle.jce.spec.ECParameterSpec getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        return $i0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an EC key");

        throw $r5;
    }
    public int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        int $i0, i1, $i2, $i3;
        org.spongycastle.crypto.engines.IESEngine $r1;
        org.spongycastle.crypto.Mac $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.jce.interfaces.ECKey $r4;
        org.spongycastle.jce.spec.ECParameterSpec $r5;
        org.spongycastle.math.ec.ECCurve $r6;
        org.spongycastle.crypto.BufferedBlockCipher $r7;
        java.io.ByteArrayOutputStream $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac getMac()>();

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        if $r3 == null goto label03;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key>;

        $r4 = (org.spongycastle.jce.interfaces.ECKey) $r3;

        $r5 = interfaceinvoke $r4.<org.spongycastle.jce.interfaces.ECKey: org.spongycastle.jce.spec.ECParameterSpec getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        i1 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        i1 = i1 + 7;

        i1 = i1 * 2;

        i1 = i1 / 8;

        i1 = i1 + 1;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        if $r7 != null goto label04;

     label01:
        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 == 1 goto label02;

        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 != 3 goto label09;

     label02:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        $i3 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: int size()>();

        $i2 = $i3 + $i2;

        $i2 = $i2 + i1;

        $i0 = $i2 + $i0;

        return $i0;

     label03:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r9;

     label04:
        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 == 1 goto label05;

        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 != 3 goto label06;

     label05:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        $i0 = virtualinvoke $r7.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

        goto label01;

     label06:
        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 == 2 goto label07;

        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 != 4 goto label08;

     label07:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        $i0 = $i0 - $i2;

        $i0 = $i0 - i1;

        $i0 = virtualinvoke $r7.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

        goto label01;

     label08:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r9;

     label09:
        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 == 2 goto label10;

        $i3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state>;

        if $i3 != 4 goto label11;

     label10:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        $i3 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: int size()>();

        $i2 = $i3 - $i2;

        $i2 = $i2 - i1;

        $i0 = $i2 + $i0;

        return $i0;

     label11:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r9;
    }
    public java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        org.spongycastle.jce.spec.IESParameterSpec $r3;
        org.spongycastle.jcajce.util.JcaJceHelper $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>("IES");

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        int $i0;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.lang.Exception r4;
        java.security.spec.AlgorithmParameterSpec r5;
        java.security.InvalidAlgorithmParameterException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r5 = null;

        if $r2 == null goto label2;

     label1:
        r5 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Lorg/spongycastle/jce/spec/IESParameterSpec;");

     label2:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.AlgorithmParameters engineParam> = $r2;

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r5, $r3);

        return;

     label3:
        r4 := @caughtexception;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot recognise parameters: ");

        $r8 = virtualinvoke r4.<java.lang.Exception: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t handle supplied parameter spec");

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        int $i0, $i1, $i2;
        java.security.SecureRandom $r1;
        java.security.Key r2;
        java.security.spec.AlgorithmParameterSpec r3;
        org.spongycastle.crypto.engines.IESEngine $r4;
        org.spongycastle.crypto.BufferedBlockCipher $r5;
        org.spongycastle.jce.spec.IESParameterSpec $r6;
        byte[] $r7;
        java.security.InvalidAlgorithmParameterException $r8;
        boolean $z0;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.security.PublicKey r11;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r12;
        java.io.ByteArrayOutputStream $r13;
        org.spongycastle.jce.interfaces.IESKey r14;
        java.security.PrivateKey $r15;
        java.security.InvalidKeyException $r16;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $i0 := @parameter0: int;

        r2 := @parameter1: java.security.Key;

        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r1 := @parameter3: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter> = null;

        if r3 != null goto label02;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.engines.IESEngine engine>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher getCipher()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.IESUtil: org.spongycastle.jce.spec.IESParameterSpec guessParameterSpec(org.spongycastle.crypto.BufferedBlockCipher)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec> = $r6;

     label01:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec>;

        $r7 = virtualinvoke $r6.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getNonce()>();

        if $r7 == null goto label05;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int ivLength>;

        if $i1 != 0 goto label04;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("NONCE present in IES Parameters when none required");

        throw $r8;

     label02:
        $z0 = r3 instanceof org.spongycastle.jce.spec.IESParameterSpec;

        if $z0 == 0 goto label03;

        $r6 = (org.spongycastle.jce.spec.IESParameterSpec) r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.jce.spec.IESParameterSpec engineSpec> = $r6;

        goto label01;

     label03:
        $r8 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("must be passed IES parameters");

        throw $r8;

     label04:
        $i1 = lengthof $r7;

        $i2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int ivLength>;

        if $i1 == $i2 goto label05;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NONCE in IES Parameters needs to be ");

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int ivLength>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes long");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label05:
        if $i0 == 1 goto label06;

        if $i0 != 3 goto label10;

     label06:
        $z0 = r2 instanceof java.security.PublicKey;

        if $z0 == 0 goto label08;

        r11 = (java.security.PublicKey) r2;

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r11);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key> = $r12;

     label07:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.security.SecureRandom random> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: int state> = $i0;

        $r13 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r13.<java.io.ByteArrayOutputStream: void reset()>();

        return;

     label08:
        $z0 = r2 instanceof org.spongycastle.jce.interfaces.IESKey;

        if $z0 == 0 goto label09;

        r14 = (org.spongycastle.jce.interfaces.IESKey) r2;

        r11 = interfaceinvoke r14.<org.spongycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r11);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key> = $r12;

        $r15 = interfaceinvoke r14.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r15);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter> = $r12;

        goto label07;

     label09:
        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed recipient\'s public EC key for encryption");

        throw $r16;

     label10:
        if $i0 == 2 goto label11;

        if $i0 != 4 goto label14;

     label11:
        $z0 = r2 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label12;

        $r15 = (java.security.PrivateKey) r2;

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r15);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key> = $r12;

        goto label07;

     label12:
        $z0 = r2 instanceof org.spongycastle.jce.interfaces.IESKey;

        if $z0 == 0 goto label13;

        r14 = (org.spongycastle.jce.interfaces.IESKey) r2;

        r11 = interfaceinvoke r14.<org.spongycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r11);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter> = $r12;

        $r15 = interfaceinvoke r14.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r15);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: org.spongycastle.crypto.params.AsymmetricKeyParameter key> = $r12;

        goto label07;

     label13:
        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed recipient\'s private EC key for decryption");

        throw $r16;

     label14:
        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed EC key");

        throw $r16;
    }
    public void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NONE");

        if $z0 == 0 goto label1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: boolean dhaesMode> = 0;

        return;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("DHAES");

        if $z0 == 0 goto label2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: boolean dhaesMode> = 1;

        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }
    public void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        java.lang.String $r1;
        boolean $z0;
        javax.crypto.NoSuchPaddingException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS5PADDING");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("PKCS7PADDING");

        if $z0 != 0 goto label2;

        $r2 = new javax.crypto.NoSuchPaddingException;

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>("padding not available with IESCipher");

        throw $r2;

     label2:
        return;
    }
    public int engineUpdate(byte[], int, int, byte[], int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }
    public byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return null;
    }
