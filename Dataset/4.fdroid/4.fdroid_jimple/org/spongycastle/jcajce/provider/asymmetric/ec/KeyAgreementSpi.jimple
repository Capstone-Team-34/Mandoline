org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi
private static final org.spongycastle.asn1.x9.X9IntegerConverter converter
private static final java.util.Hashtable des
private static final java.util.Hashtable oids
private org.spongycastle.crypto.BasicAgreement agreement
private java.lang.String kaAlgorithm
private org.spongycastle.crypto.DerivationFunction kdf
private org.spongycastle.jcajce.spec.MQVParameterSpec mqvParameters
private org.spongycastle.crypto.params.ECDomainParameters parameters
private java.math.BigInteger result
private byte[] ukmParameters
    static void <clinit>()
    {
        org.spongycastle.asn1.x9.X9IntegerConverter $r0;
        java.util.Hashtable $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        java.lang.String $r3;

        $r0 = new org.spongycastle.asn1.x9.X9IntegerConverter;

        specialinvoke $r0.<org.spongycastle.asn1.x9.X9IntegerConverter: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.asn1.x9.X9IntegerConverter converter> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids> = $r1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des> = $r1;

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids>;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("DESEDE", $r2);

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids>;

        $r2 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("AES", $r2);

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids>;

        $r2 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier desCBC>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("DES", $r2);

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("DES", "DES");

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("DESEDE", "DES");

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        $r2 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier desCBC>;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "DES");

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "DES");

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_CMS3DESwrap>;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "DES");

        return;
    }
    protected void <init>(java.lang.String, org.spongycastle.crypto.BasicAgreement, org.spongycastle.crypto.DerivationFunction)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        java.lang.String $r1;
        org.spongycastle.crypto.BasicAgreement $r2;
        org.spongycastle.crypto.DerivationFunction $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.crypto.BasicAgreement;

        $r3 := @parameter2: org.spongycastle.crypto.DerivationFunction;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.DerivationFunction kdf> = $r3;

        return;
    }
    private byte[] bigIntToBytes(java.math.BigInteger)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        java.math.BigInteger $r1;
        org.spongycastle.asn1.x9.X9IntegerConverter $r2, $r3;
        org.spongycastle.crypto.params.ECDomainParameters $r4;
        org.spongycastle.math.ec.ECCurve $r5;
        int $i0;
        byte[] $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.asn1.x9.X9IntegerConverter converter>;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.asn1.x9.X9IntegerConverter converter>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.params.ECDomainParameters parameters>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r3.<org.spongycastle.asn1.x9.X9IntegerConverter: int getByteLength(org.spongycastle.math.ec.ECCurve)>($r5);

        $r6 = virtualinvoke $r2.<org.spongycastle.asn1.x9.X9IntegerConverter: byte[] integerToBytes(java.math.BigInteger,int)>($r1, $i0);

        return $r6;
    }
    private static java.lang.String getSimpleName(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }
    private void initFromKey(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        org.spongycastle.crypto.params.MQVPrivateParameters r1;
        java.security.Key r2;
        java.security.spec.AlgorithmParameterSpec r3;
        byte[] $r4;
        org.spongycastle.crypto.BasicAgreement $r5;
        boolean $z0;
        java.security.InvalidKeyException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        org.spongycastle.jce.interfaces.MQVPrivateKey r9;
        java.security.PrivateKey $r10;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r11;
        org.spongycastle.crypto.params.ECPrivateKeyParameters r12, r13;
        org.spongycastle.crypto.params.ECPublicKeyParameters r14;
        java.security.PublicKey $r15;
        org.spongycastle.crypto.params.ECDomainParameters $r16;
        org.spongycastle.jcajce.spec.MQVParameterSpec r17;
        org.spongycastle.jcajce.spec.UserKeyingMaterialSpec r18;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        r2 := @parameter0: java.security.Key;

        r3 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r4 = null;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement>;

        $z0 = $r5 instanceof org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        if $z0 == 0 goto label5;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.jcajce.spec.MQVParameterSpec mqvParameters> = null;

        $z0 = r2 instanceof org.spongycastle.jce.interfaces.MQVPrivateKey;

        if $z0 != 0 goto label1;

        $z0 = r3 instanceof org.spongycastle.jcajce.spec.MQVParameterSpec;

        if $z0 != 0 goto label1;

        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/spongycastle/jcajce/spec/MQVParameterSpec;");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for initialisation");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        $z0 = r2 instanceof org.spongycastle.jce.interfaces.MQVPrivateKey;

        if $z0 == 0 goto label3;

        r9 = (org.spongycastle.jce.interfaces.MQVPrivateKey) r2;

        $r10 = interfaceinvoke r9.<org.spongycastle.jce.interfaces.MQVPrivateKey: java.security.PrivateKey getStaticPrivateKey()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        r12 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r11;

        $r10 = interfaceinvoke r9.<org.spongycastle.jce.interfaces.MQVPrivateKey: java.security.PrivateKey getEphemeralPrivateKey()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        r13 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r11;

        r14 = null;

        $r15 = interfaceinvoke r9.<org.spongycastle.jce.interfaces.MQVPrivateKey: java.security.PublicKey getEphemeralPublicKey()>();

        if $r15 == null goto label2;

        $r15 = interfaceinvoke r9.<org.spongycastle.jce.interfaces.MQVPrivateKey: java.security.PublicKey getEphemeralPublicKey()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r15);

        r14 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r11;

     label2:
        r1 = new org.spongycastle.crypto.params.MQVPrivateParameters;

        specialinvoke r1.<org.spongycastle.crypto.params.MQVPrivateParameters: void <init>(org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters)>(r12, r13, r14);

        $r16 = virtualinvoke r12.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.params.ECDomainParameters parameters> = $r16;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>(r1);

        return;

     label3:
        r17 = (org.spongycastle.jcajce.spec.MQVParameterSpec) r3;

        $r10 = (java.security.PrivateKey) r2;

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        r12 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r11;

        $r10 = virtualinvoke r17.<org.spongycastle.jcajce.spec.MQVParameterSpec: java.security.PrivateKey getEphemeralPrivateKey()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        r13 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r11;

        r14 = null;

        $r15 = virtualinvoke r17.<org.spongycastle.jcajce.spec.MQVParameterSpec: java.security.PublicKey getEphemeralPublicKey()>();

        if $r15 == null goto label4;

        $r15 = virtualinvoke r17.<org.spongycastle.jcajce.spec.MQVParameterSpec: java.security.PublicKey getEphemeralPublicKey()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r15);

        r14 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r11;

     label4:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.jcajce.spec.MQVParameterSpec mqvParameters> = r17;

        $r4 = virtualinvoke r17.<org.spongycastle.jcajce.spec.MQVParameterSpec: byte[] getUserKeyingMaterial()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] ukmParameters> = $r4;

        goto label2;

     label5:
        $z0 = r2 instanceof java.security.PrivateKey;

        if $z0 != 0 goto label6;

        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/spongycastle/jce/interfaces/ECPrivateKey;");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for initialisation");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label6:
        $r10 = (java.security.PrivateKey) r2;

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        r12 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r11;

        $r16 = virtualinvoke r12.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.params.ECDomainParameters parameters> = $r16;

        $z0 = r3 instanceof org.spongycastle.jcajce.spec.UserKeyingMaterialSpec;

        if $z0 == 0 goto label7;

        r18 = (org.spongycastle.jcajce.spec.UserKeyingMaterialSpec) r3;

        $r4 = virtualinvoke r18.<org.spongycastle.jcajce.spec.UserKeyingMaterialSpec: byte[] getUserKeyingMaterial()>();

     label7:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] ukmParameters> = $r4;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>(r12);

        return;
    }
    protected java.security.Key engineDoPhase(java.security.Key, boolean) throws java.security.InvalidKeyException, java.lang.IllegalStateException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        boolean $z0;
        java.security.Key r1;
        org.spongycastle.crypto.params.ECDomainParameters $r2;
        java.lang.StringBuilder $r3, $r14;
        java.lang.String $r4;
        org.spongycastle.crypto.BasicAgreement $r5;
        java.security.PublicKey r6;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r7;
        org.spongycastle.crypto.params.ECPublicKeyParameters r8, r10;
        org.spongycastle.jcajce.spec.MQVParameterSpec $r9;
        java.lang.Object r11;
        java.math.BigInteger $r12;
        org.spongycastle.jce.interfaces.MQVPublicKey r13;
        java.lang.IllegalStateException $r15;
        org.spongycastle.crypto.params.MQVPublicParameters $r16;
        java.security.InvalidKeyException $r17;
        org.spongycastle.crypto.CipherParameters $r18;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        r1 := @parameter0: java.security.Key;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.params.ECDomainParameters parameters>;

        if $r2 != null goto label1;

        $r15 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r15;

     label1:
        if $z0 != 0 goto label2;

        $r15 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can only be between two parties.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r15;

     label2:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement>;

        $z0 = $r5 instanceof org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        if $z0 == 0 goto label5;

        $z0 = r1 instanceof org.spongycastle.jce.interfaces.MQVPublicKey;

        if $z0 != 0 goto label4;

        r6 = (java.security.PublicKey) r1;

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r6);

        r8 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r7;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.jcajce.spec.MQVParameterSpec mqvParameters>;

        r6 = virtualinvoke $r9.<org.spongycastle.jcajce.spec.MQVParameterSpec: java.security.PublicKey getOtherPartyEphemeralKey()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r6);

        r10 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r7;

        $r16 = new org.spongycastle.crypto.params.MQVPublicParameters;

        r11 = $r16;

        specialinvoke $r16.<org.spongycastle.crypto.params.MQVPublicParameters: void <init>(org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters)>(r8, r10);

     label3:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.BasicAgreement agreement>;

        $r18 = (org.spongycastle.crypto.CipherParameters) r11;

        $r12 = interfaceinvoke $r5.<org.spongycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)>($r18);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.math.BigInteger result> = $r12;

        return null;

     label4:
        r13 = (org.spongycastle.jce.interfaces.MQVPublicKey) r1;

        r6 = interfaceinvoke r13.<org.spongycastle.jce.interfaces.MQVPublicKey: java.security.PublicKey getStaticKey()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r6);

        r8 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r7;

        r6 = interfaceinvoke r13.<org.spongycastle.jce.interfaces.MQVPublicKey: java.security.PublicKey getEphemeralKey()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r6);

        r10 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r7;

        $r16 = new org.spongycastle.crypto.params.MQVPublicParameters;

        r11 = $r16;

        specialinvoke $r16.<org.spongycastle.crypto.params.MQVPublicParameters: void <init>(org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters)>(r8, r10);

        goto label3;

     label5:
        $z0 = r1 instanceof java.security.PublicKey;

        if $z0 != 0 goto label6;

        $r17 = new java.security.InvalidKeyException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement requires ");

        $r4 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/spongycastle/jce/interfaces/ECPublicKey;");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for doPhase");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r4);

        throw $r17;

     label6:
        r6 = (java.security.PublicKey) r1;

        r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r6);

        goto label3;
    }
    protected int engineGenerateSecret(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        javax.crypto.ShortBufferException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] engineGenerateSecret()>();

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String kaAlgorithm>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key agreement: need ");

        $i0 = lengthof $r2;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, $i1);

        $i0 = lengthof $r2;

        return $i0;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        java.lang.String $r1, $r6, r7;
        org.spongycastle.crypto.params.KDFParameters r2;
        java.math.BigInteger $r3;
        byte[] $r4, r5, $r14;
        java.util.Hashtable $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r10;
        int $i0;
        org.spongycastle.crypto.DerivationFunction $r11;
        java.security.NoSuchAlgorithmException $r12;
        java.lang.StringBuilder $r13;
        javax.crypto.spec.SecretKeySpec $r15;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.math.BigInteger result>;

        $r4 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] bigIntToBytes(java.math.BigInteger)>($r3);

        r5 = $r4;

        $r6 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        r7 = $r1;

        $r8 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids>;

        $z0 = virtualinvoke $r8.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r8 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable oids>;

        $r9 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r6);

        $r10 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r9;

        r7 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

     label1:
        $i0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: int getKeySize(java.lang.String)>(r7);

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.DerivationFunction kdf>;

        if $r11 == null goto label5;

        if $i0 >= 0 goto label2;

        $r12 = new java.security.NoSuchAlgorithmException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown algorithm encountered: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r12;

     label2:
        $i0 = $i0 / 8;

        r5 = newarray (byte)[$i0];

        r2 = new org.spongycastle.crypto.params.KDFParameters;

        $r14 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] ukmParameters>;

        specialinvoke r2.<org.spongycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r4, $r14);

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r11.<org.spongycastle.crypto.DerivationFunction: void init(org.spongycastle.crypto.DerivationParameters)>(r2);

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.DerivationFunction kdf>;

        $i0 = lengthof r5;

        interfaceinvoke $r11.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r5, 0, $i0);

     label3:
        $r8 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.util.Hashtable des>;

        $z0 = virtualinvoke $r8.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r7);

        if $z0 == 0 goto label4;

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>(r5);

     label4:
        $r15 = new javax.crypto.spec.SecretKeySpec;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.lang.String getAlgorithm(java.lang.String)>($r1);

        specialinvoke $r15.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, $r1);

        return $r15;

     label5:
        if $i0 <= 0 goto label3;

        $i0 = $i0 / 8;

        r5 = newarray (byte)[$i0];

        $i0 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, 0, $i0);

        goto label3;
    }
    protected byte[] engineGenerateSecret() throws java.lang.IllegalStateException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        byte[] $r1;
        org.spongycastle.crypto.DerivationFunction $r2;
        java.lang.UnsupportedOperationException $r3;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: org.spongycastle.crypto.DerivationFunction kdf>;

        if $r2 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("KDF can only be used when algorithm is known");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: java.math.BigInteger result>;

        $r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: byte[] bigIntToBytes(java.math.BigInteger)>($r4);

        return $r1;
    }
    protected void engineInit(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r1, null);

        return;
    }
    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter2: java.security.SecureRandom;

        if $r2 == null goto label1;

        $z0 = $r2 instanceof org.spongycastle.jcajce.spec.MQVParameterSpec;

        if $z0 != 0 goto label1;

        $z0 = $r2 instanceof org.spongycastle.jcajce.spec.UserKeyingMaterialSpec;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r4.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("No algorithm parameters supported");

        throw $r4;

     label1:
        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r1, $r2);

        return;
    }
