org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi extends org.spongycastle.jcajce.provider.asymmetric.util.DSABase
    void <init>(org.spongycastle.crypto.Digest, org.spongycastle.crypto.DSA, org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.DSA $r2;
        org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.crypto.DSA;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: void <init>(org.spongycastle.crypto.Digest,org.spongycastle.crypto.DSA,org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder)>($r1, $r2, $r3);

        return;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi r0;
        java.security.PrivateKey $r1;
        org.spongycastle.crypto.params.ParametersWithRandom $r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.crypto.DSA $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $r4 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: java.security.SecureRandom appRandom>;

        if $r3 == null goto label1;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r2 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: java.security.SecureRandom appRandom>;

        specialinvoke $r2.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r4, $r3);

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r2);

        return;

     label1:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r4);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi r0;
        java.security.PublicKey $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.spongycastle.crypto.Digest $r3;
        org.spongycastle.crypto.DSA $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r1);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void reset()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r4.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r2);

        return;
    }
