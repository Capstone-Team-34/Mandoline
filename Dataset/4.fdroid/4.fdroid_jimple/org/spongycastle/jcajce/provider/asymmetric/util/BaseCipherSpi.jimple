org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi extends javax.crypto.CipherSpi
private java.lang.Class[] availableSpecs
protected java.security.AlgorithmParameters engineParams
private final org.spongycastle.jcajce.util.JcaJceHelper helper
private byte[] iv
private int ivSize
protected org.spongycastle.crypto.Wrapper wrapEngine
    protected void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.Class[] $r1;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r1[1] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r1[2] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r1[3] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }
    protected final java.security.AlgorithmParameters createParametersInstance(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String $r1;
        java.security.AlgorithmParameters $r2;
        org.spongycastle.jcajce.util.JcaJceHelper $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r2 = interfaceinvoke $r3.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>($r1);

        return $r2;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return 0;
    }
    protected byte[] engineGetIV()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $i0 := @parameter0: int;

        return -1;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }
    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String $r1;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.security.NoSuchAlgorithmException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String $r1;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }
    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        byte[] $r1;
        java.lang.String $r2;
        int $i0, $i1;
        javax.crypto.IllegalBlockSizeException r3;
        org.spongycastle.crypto.Wrapper $r4;
        javax.crypto.spec.SecretKeySpec r5;
        org.spongycastle.crypto.InvalidCipherTextException r6;
        java.security.InvalidKeyException $r7;
        javax.crypto.BadPaddingException r8;
        boolean $z0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r9;
        java.security.PrivateKey $r10;
        java.lang.StringBuilder $r11;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r12;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r13;
        java.lang.Exception r14;
        org.spongycastle.jcajce.util.JcaJceHelper $r15;
        java.security.KeyFactory $r16;
        java.security.spec.X509EncodedKeySpec $r17;
        java.security.PublicKey $r18;
        java.security.spec.PKCS8EncodedKeySpec $r19;
        java.security.NoSuchAlgorithmException r20;
        java.security.spec.InvalidKeySpecException r21;
        java.security.NoSuchProviderException r22;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.crypto.Wrapper wrapEngine>;

        if $r4 != null goto label03;

        $i1 = lengthof $r1;

     label01:
        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>($r1, 0, $i1);

     label02:
        if $i0 != 3 goto label09;

        r5 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r2);

        return r5;

     label03:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.crypto.Wrapper wrapEngine>;

        $i1 = lengthof $r1;

     label04:
        $r1 = interfaceinvoke $r4.<org.spongycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>($r1, 0, $i1);

     label05:
        goto label02;

     label06:
        r6 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke r6.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label07:
        r8 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke r8.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label08:
        r3 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label14;

        if $i0 != 2 goto label14;

     label10:
        $r9 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r1);

        $r10 = staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: java.security.PrivateKey getPrivateKey(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r9);

     label11:
        if $r10 != null goto label26;

        $r7 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm ");

        $r12 = virtualinvoke $r9.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label13:
        r14 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw $r7;

     label14:
        $r15 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>;

     label15:
        $r16 = interfaceinvoke $r15.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.KeyFactory createKeyFactory(java.lang.String)>($r2);

     label16:
        if $i0 != 1 goto label19;

        $r17 = new java.security.spec.X509EncodedKeySpec;

     label17:
        specialinvoke $r17.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r18 = virtualinvoke $r16.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r17);

     label18:
        return $r18;

     label19:
        if $i0 != 2 goto label25;

        $r19 = new java.security.spec.PKCS8EncodedKeySpec;

     label20:
        specialinvoke $r19.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r10 = virtualinvoke $r16.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r19);

     label21:
        return $r10;

     label22:
        r20 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r20.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label23:
        r21 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r21.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label24:
        r22 := @caughtexception;

        $r7 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke r22.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label25:
        $r7 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label26:
        return $r10;

        catch org.spongycastle.crypto.InvalidCipherTextException from label01 to label02 with label06;
        catch javax.crypto.BadPaddingException from label01 to label02 with label07;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label08;
        catch org.spongycastle.crypto.InvalidCipherTextException from label04 to label05 with label06;
        catch javax.crypto.BadPaddingException from label04 to label05 with label07;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label08;
        catch java.lang.Exception from label10 to label11 with label13;
        catch java.lang.Exception from label12 to label13 with label13;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label22;
        catch java.security.NoSuchAlgorithmException from label17 to label18 with label22;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label22;
        catch java.security.spec.InvalidKeySpecException from label15 to label16 with label23;
        catch java.security.spec.InvalidKeySpecException from label17 to label18 with label23;
        catch java.security.spec.InvalidKeySpecException from label20 to label21 with label23;
        catch java.security.NoSuchProviderException from label15 to label16 with label24;
        catch java.security.NoSuchProviderException from label17 to label18 with label24;
        catch java.security.NoSuchProviderException from label20 to label21 with label24;
    }
    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key $r1;
        javax.crypto.BadPaddingException r2;
        int $i0;
        byte[] $r3;
        java.security.InvalidKeyException $r4;
        org.spongycastle.crypto.Wrapper $r5;
        javax.crypto.IllegalBlockSizeException $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        $r1 := @parameter0: java.security.Key;

        $r3 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        if $r3 != null goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw $r4;

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.crypto.Wrapper wrapEngine>;

        if $r5 != null goto label4;

        $i0 = lengthof $r3;

     label2:
        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>($r3, 0, $i0);

     label3:
        return $r3;

     label4:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: org.spongycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof $r3;

     label5:
        $r3 = interfaceinvoke $r5.<org.spongycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>($r3, 0, $i0);

     label6:
        return $r3;

     label7:
        r2 := @caughtexception;

        $r6 = new javax.crypto.IllegalBlockSizeException;

        $r7 = virtualinvoke r2.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch javax.crypto.BadPaddingException from label2 to label3 with label7;
        catch javax.crypto.BadPaddingException from label5 to label6 with label7;
    }
