org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi
protected org.spongycastle.crypto.params.DSAParameterGenerationParameters params
protected java.security.SecureRandom random
protected int strength
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength> = 1024;

        return;
    }
    protected java.security.AlgorithmParameters engineGenerateParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi r0;
        java.lang.Exception r1;
        int $i0;
        org.spongycastle.crypto.generators.DSAParametersGenerator r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.DSAParameterGenerationParameters $r4;
        org.spongycastle.crypto.params.DSAParameters $r5;
        java.security.AlgorithmParameters $r6;
        java.security.spec.DSAParameterSpec $r7;
        java.math.BigInteger $r8, $r9, $r10;
        org.spongycastle.crypto.digests.SHA256Digest $r11;
        java.lang.RuntimeException $r12;
        java.lang.String $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength>;

        if $i0 > 1024 goto label08;

        r2 = new org.spongycastle.crypto.generators.DSAParametersGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: void <init>()>();

     label01:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random>;

        if $r3 != null goto label02;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random> = $r3;

     label02:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength>;

        if $i0 != 1024 goto label09;

        $r4 = new org.spongycastle.crypto.params.DSAParameterGenerationParameters;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random>;

        specialinvoke $r4.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: void <init>(int,int,int,java.security.SecureRandom)>(1024, 160, 80, $r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: org.spongycastle.crypto.params.DSAParameterGenerationParameters params> = $r4;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: org.spongycastle.crypto.params.DSAParameterGenerationParameters params>;

        virtualinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: void init(org.spongycastle.crypto.params.DSAParameterGenerationParameters)>($r4);

     label03:
        $r5 = virtualinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.params.DSAParameters generateParameters()>();

     label04:
        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>("DSA");

     label05:
        $r7 = new java.security.spec.DSAParameterSpec;

     label06:
        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r9 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r10 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        specialinvoke $r7.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r8, $r9, $r10);

        virtualinvoke $r6.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r7);

     label07:
        return $r6;

     label08:
        r2 = new org.spongycastle.crypto.generators.DSAParametersGenerator;

        $r11 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r11.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r11);

        goto label01;

     label09:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength>;

        if $i0 <= 1024 goto label10;

        $r4 = new org.spongycastle.crypto.params.DSAParameterGenerationParameters;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random>;

        specialinvoke $r4.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: void <init>(int,int,int,java.security.SecureRandom)>($i0, 256, 80, $r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: org.spongycastle.crypto.params.DSAParameterGenerationParameters params> = $r4;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: org.spongycastle.crypto.params.DSAParameterGenerationParameters params>;

        virtualinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: void init(org.spongycastle.crypto.params.DSAParameterGenerationParameters)>($r4);

        goto label03;

     label10:
        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random>;

        virtualinvoke r2.<org.spongycastle.crypto.generators.DSAParametersGenerator: void init(int,int,java.security.SecureRandom)>($i0, 20, $r3);

        goto label03;

     label11:
        r1 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r12;

        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Exception from label06 to label07 with label11;
    }
    protected void engineInit(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi r0;
        int $i0, $i1;
        java.security.SecureRandom $r1;
        java.security.InvalidParameterException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        if $i0 < 512 goto label1;

        if $i0 <= 3072 goto label2;

     label1:
        $r2 = new java.security.InvalidParameterException;

        specialinvoke $r2.<java.security.InvalidParameterException: void <init>(java.lang.String)>("strength must be from 512 - 3072");

        throw $r2;

     label2:
        if $i0 > 1024 goto label3;

        $i1 = $i0 % 64;

        if $i1 == 0 goto label3;

        $r2 = new java.security.InvalidParameterException;

        specialinvoke $r2.<java.security.InvalidParameterException: void <init>(java.lang.String)>("strength must be a multiple of 64 below 1024 bits.");

        throw $r2;

     label3:
        if $i0 <= 1024 goto label4;

        $i1 = $i0 % 1024;

        if $i1 == 0 goto label4;

        $r2 = new java.security.InvalidParameterException;

        specialinvoke $r2.<java.security.InvalidParameterException: void <init>(java.lang.String)>("strength must be a multiple of 1024 above 1024 bits.");

        throw $r2;

     label4:
        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: int strength> = $i0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi: java.security.SecureRandom random> = $r1;

        return;
    }
    protected void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("No supported AlgorithmParameterSpec for DSA parameter generation.");

        throw $r3;
    }
