org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi extends java.security.KeyPairGenerator
int certainty
org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine
boolean initialised
org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param
java.security.SecureRandom random
int strength
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("ElGamal");

        $r1 = new org.spongycastle.crypto.generators.ElGamalKeyPairGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int strength> = 1024;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int certainty> = 20;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: boolean initialised> = 0;

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.ElGamalParametersGenerator r1;
        boolean $z0;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r2;
        int $i0, $i1;
        javax.crypto.spec.DHParameterSpec $r3;
        org.spongycastle.crypto.params.ElGamalKeyGenerationParameters $r4;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.params.ElGamalParameters $r6;
        java.math.BigInteger $r7, $r8;
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator $r9;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r10;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r11;
        org.spongycastle.crypto.params.ElGamalPublicKeyParameters r12;
        org.spongycastle.crypto.params.ElGamalPrivateKeyParameters r13;
        java.security.KeyPair $r14;
        org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey $r15;
        org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey $r16;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: boolean initialised>;

        if $z0 != 0 goto label2;

        $r2 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int strength>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int)>($i0);

        if $r3 == null goto label3;

        $r4 = new org.spongycastle.crypto.params.ElGamalKeyGenerationParameters;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        $r6 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r7 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r8 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $i0 = virtualinvoke $r3.<javax.crypto.spec.DHParameterSpec: int getL()>();

        specialinvoke $r6.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r7, $r8, $i0);

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.ElGamalParameters)>($r5, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param> = $r4;

     label1:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: boolean initialised> = 1;

     label2:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine>;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r12 = (org.spongycastle.crypto.params.ElGamalPublicKeyParameters) $r11;

        $r11 = virtualinvoke $r10.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r13 = (org.spongycastle.crypto.params.ElGamalPrivateKeyParameters) $r11;

        $r14 = new java.security.KeyPair;

        $r15 = new org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey;

        specialinvoke $r15.<org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey: void <init>(org.spongycastle.crypto.params.ElGamalPublicKeyParameters)>(r12);

        $r16 = new org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey;

        specialinvoke $r16.<org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey: void <init>(org.spongycastle.crypto.params.ElGamalPrivateKeyParameters)>(r13);

        specialinvoke $r14.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r15, $r16);

        return $r14;

     label3:
        r1 = new org.spongycastle.crypto.generators.ElGamalParametersGenerator;

        specialinvoke r1.<org.spongycastle.crypto.generators.ElGamalParametersGenerator: void <init>()>();

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int strength>;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int certainty>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        virtualinvoke r1.<org.spongycastle.crypto.generators.ElGamalParametersGenerator: void init(int,int,java.security.SecureRandom)>($i0, $i1, $r5);

        $r4 = new org.spongycastle.crypto.params.ElGamalKeyGenerationParameters;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.SecureRandom random>;

        $r6 = virtualinvoke r1.<org.spongycastle.crypto.generators.ElGamalParametersGenerator: org.spongycastle.crypto.params.ElGamalParameters generateParameters()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.ElGamalParameters)>($r5, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param> = $r4;

        goto label1;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi r0;
        int $i0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: int strength> = $i0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r1;

        return;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        org.spongycastle.jce.spec.ElGamalParameterSpec r4;
        org.spongycastle.crypto.params.ElGamalKeyGenerationParameters $r5;
        org.spongycastle.crypto.params.ElGamalParameters $r6;
        java.math.BigInteger $r7, $r8;
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator $r9;
        javax.crypto.spec.DHParameterSpec r10;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 = $r1 instanceof org.spongycastle.jce.spec.ElGamalParameterSpec;

        if $z0 != 0 goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.DHParameterSpec;

        if $z0 != 0 goto label1;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a DHParameterSpec or an ElGamalParameterSpec");

        throw $r3;

     label1:
        $z0 = $r1 instanceof org.spongycastle.jce.spec.ElGamalParameterSpec;

        if $z0 == 0 goto label3;

        r4 = (org.spongycastle.jce.spec.ElGamalParameterSpec) $r1;

        $r5 = new org.spongycastle.crypto.params.ElGamalKeyGenerationParameters;

        $r6 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r7 = virtualinvoke r4.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getP()>();

        $r8 = virtualinvoke r4.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r6.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        specialinvoke $r5.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.ElGamalParameters)>($r2, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param> = $r5;

     label2:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine>;

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;

     label3:
        r10 = (javax.crypto.spec.DHParameterSpec) $r1;

        $r5 = new org.spongycastle.crypto.params.ElGamalKeyGenerationParameters;

        $r6 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r7 = virtualinvoke r10.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r8 = virtualinvoke r10.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $i0 = virtualinvoke r10.<javax.crypto.spec.DHParameterSpec: int getL()>();

        specialinvoke $r6.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r7, $r8, $i0);

        specialinvoke $r5.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.ElGamalParameters)>($r2, $r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param> = $r5;

        goto label2;
    }
