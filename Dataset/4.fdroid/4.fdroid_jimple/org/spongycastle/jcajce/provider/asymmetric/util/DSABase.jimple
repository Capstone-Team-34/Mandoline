org.spongycastle.jcajce.provider.asymmetric.util.DSABase extends java.security.SignatureSpi implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
protected org.spongycastle.crypto.Digest digest
protected org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder
protected org.spongycastle.crypto.DSA signer
    protected void <init>(org.spongycastle.crypto.Digest, org.spongycastle.crypto.DSA, org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.DSA $r2;
        org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.crypto.DSA;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.DSA signer> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder> = $r3;

        return;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        java.lang.Exception r1;
        byte[] r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;
        org.spongycastle.crypto.DSA $r4;
        java.math.BigInteger[] $r5;
        org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder $r6;
        java.math.BigInteger $r7, $r8;
        java.security.SignatureException $r9;
        java.lang.String $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.DSA signer>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder>;

        $r7 = $r5[0];

        $r8 = $r5[1];

        r2 = interfaceinvoke $r6.<org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder: byte[] encode(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

     label2:
        return r2;

     label3:
        r1 := @caughtexception;

        $r9 = new java.security.SignatureException;

        $r10 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.DSABase r0;
        byte[] $r1, r3;
        java.lang.Exception r2;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder $r5;
        java.math.BigInteger[] $r6;
        org.spongycastle.crypto.DSA $r7;
        java.math.BigInteger $r8, $r9;
        boolean $z0;
        java.security.SignatureException $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.DSABase;

        $r1 := @parameter0: byte[];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder: java.math.BigInteger[] decode(byte[])>($r1);

     label2:
        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.util.DSABase: org.spongycastle.crypto.DSA signer>;

        $r8 = $r6[0];

        $r9 = $r6[1];

        $z0 = interfaceinvoke $r7.<org.spongycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r3, $r8, $r9);

        return $z0;

     label3:
        r2 := @caughtexception;

        $r10 = new java.security.SignatureException;

        specialinvoke $r10.<java.security.SignatureException: void <init>(java.lang.String)>("error decoding signature bytes.");

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }
