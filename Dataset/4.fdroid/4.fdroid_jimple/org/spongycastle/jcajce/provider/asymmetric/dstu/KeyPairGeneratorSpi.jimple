org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi extends java.security.KeyPairGenerator
java.lang.String algorithm
java.lang.Object ecParams
org.spongycastle.crypto.generators.ECKeyPairGenerator engine
boolean initialised
org.spongycastle.crypto.params.ECKeyGenerationParameters param
java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi r0;
        org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("DSTU4145");

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams> = null;

        $r1 = new org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm> = "DSTU4145";

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.SecureRandom random> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised> = 0;

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.params.ECPublicKeyParameters r6;
        org.spongycastle.crypto.params.ECPrivateKeyParameters r7;
        java.lang.Object $r8;
        org.spongycastle.jce.spec.ECParameterSpec r9;
        org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey r10;
        java.security.KeyPair $r11;
        org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey $r12;
        java.security.spec.ECParameterSpec r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DSTU Key Pair Generator not initialised");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r6 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r5;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r7 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r5;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        $z0 = $r8 instanceof org.spongycastle.jce.spec.ECParameterSpec;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        r9 = (org.spongycastle.jce.spec.ECParameterSpec) $r8;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.jce.spec.ECParameterSpec)>($r1, r6, r9);

        $r11 = new java.security.KeyPair;

        $r12 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke $r12.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,org.spongycastle.jce.spec.ECParameterSpec)>($r1, r7, r10, r9);

        specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12);

        return $r11;

     label2:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        if $r8 != null goto label3;

        $r11 = new java.security.KeyPair;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters)>($r1, r6);

        $r12 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke $r12.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters)>($r1, r7);

        specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12);

        return $r11;

     label3:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        r13 = (java.security.spec.ECParameterSpec) $r8;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters,java.security.spec.ECParameterSpec)>($r1, r6, r13);

        $r11 = new java.security.KeyPair;

        $r12 = new org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.String algorithm>;

        specialinvoke $r12.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey,java.security.spec.ECParameterSpec)>($r1, r7, r10, r13);

        specialinvoke $r11.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r12);

        return $r11;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi r0;
        int $i0;
        java.security.SecureRandom $r1;
        java.security.InvalidAlgorithmParameterException r2;
        java.lang.Object $r3;
        java.security.spec.ECGenParameterSpec $r4;
        java.security.InvalidParameterException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.security.SecureRandom random> = $r1;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        if $r3 == null goto label4;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        $r4 = (java.security.spec.ECGenParameterSpec) $r3;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r4, $r1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r5 = new java.security.InvalidParameterException;

        specialinvoke $r5.<java.security.InvalidParameterException: void <init>(java.lang.String)>("key size not configurable.");

        throw $r5;

     label4:
        $r5 = new java.security.InvalidParameterException;

        specialinvoke $r5.<java.security.InvalidParameterException: void <init>(java.lang.String)>("unknown key size.");

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi r0;
        java.security.SecureRandom $r1;
        java.security.spec.AlgorithmParameterSpec r2;
        boolean $z0;
        org.spongycastle.jce.spec.ECParameterSpec r3;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        org.spongycastle.math.ec.ECCurve $r6;
        org.spongycastle.math.ec.ECPoint $r7;
        java.math.BigInteger $r8, $r13;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r9;
        java.security.spec.ECParameterSpec r10;
        java.security.spec.EllipticCurve $r11;
        java.security.spec.ECPoint $r12;
        int $i0;
        long $l1;
        java.security.spec.ECGenParameterSpec r14;
        java.lang.String $r15;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r16;
        java.security.InvalidAlgorithmParameterException $r17;
        java.lang.StringBuilder $r18;
        org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec r19;
        org.spongycastle.jce.spec.ECNamedCurveSpec $r20;
        byte[] $r21;
        java.lang.Object r22;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r23;
        java.lang.Class $r24;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi;

        r2 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r1 := @parameter1: java.security.SecureRandom;

        $z0 = r2 instanceof org.spongycastle.jce.spec.ECParameterSpec;

        if $z0 == 0 goto label1;

        r3 = (org.spongycastle.jce.spec.ECParameterSpec) r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams> = r2;

        $r4 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r5 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r6 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r8 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r6, $r7, $r8);

        specialinvoke $r4.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r5, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r4;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;

     label1:
        $z0 = r2 instanceof java.security.spec.ECParameterSpec;

        if $z0 == 0 goto label2;

        r10 = (java.security.spec.ECParameterSpec) r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams> = r2;

        $r11 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r11);

        $r12 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean)>($r6, $r12, 0);

        $r4 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r5 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r8 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $i0 = virtualinvoke r10.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $l1 = (long) $i0;

        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        specialinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8, $r13);

        specialinvoke $r4.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r5, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r4;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;

     label2:
        $z0 = r2 instanceof java.security.spec.ECGenParameterSpec;

        if $z0 != 0 goto label3;

        $z0 = r2 instanceof org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec;

        if $z0 == 0 goto label7;

     label3:
        $z0 = r2 instanceof java.security.spec.ECGenParameterSpec;

        if $z0 == 0 goto label5;

        r14 = (java.security.spec.ECGenParameterSpec) r2;

        $r15 = virtualinvoke r14.<java.security.spec.ECGenParameterSpec: java.lang.String getName()>();

     label4:
        $r16 = new org.spongycastle.asn1.ASN1ObjectIdentifier;

        specialinvoke $r16.<org.spongycastle.asn1.ASN1ObjectIdentifier: void <init>(java.lang.String)>($r15);

        $r5 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145NamedCurves: org.spongycastle.crypto.params.ECDomainParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r16);

        if $r5 != null goto label6;

        $r17 = new java.security.InvalidAlgorithmParameterException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown curve name: ");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label5:
        r19 = (org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec) r2;

        $r15 = virtualinvoke r19.<org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec: java.lang.String getName()>();

        goto label4;

     label6:
        $r20 = new org.spongycastle.jce.spec.ECNamedCurveSpec;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r13 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $r21 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: byte[] getSeed()>();

        specialinvoke $r20.<org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r15, $r6, $r7, $r8, $r13, $r21);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams> = $r20;

        r22 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams>;

        r10 = (java.security.spec.ECParameterSpec) r22;

        $r11 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r11);

        $r12 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean)>($r6, $r12, 0);

        $r4 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r5 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r8 = virtualinvoke r10.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $i0 = virtualinvoke r10.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $l1 = (long) $i0;

        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        specialinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8, $r13);

        specialinvoke $r4.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r5, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r4;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;

     label7:
        if r2 != null goto label8;

        $r23 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r3 = interfaceinvoke $r23.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        if r3 == null goto label8;

        $r23 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r3 = interfaceinvoke $r23.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: java.lang.Object ecParams> = r2;

        $r4 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r5 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r6 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r8 = virtualinvoke r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r6, $r7, $r8);

        specialinvoke $r4.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r5, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r4;

        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: org.spongycastle.crypto.params.ECKeyGenerationParameters param>;

        virtualinvoke $r9.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi: boolean initialised> = 1;

        return;

     label8:
        if r2 != null goto label9;

        $r23 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r3 = interfaceinvoke $r23.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        if r3 != null goto label9;

        $r17 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r17.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("null parameter passed but no implicitCA set");

        throw $r17;

     label9:
        $r17 = new java.security.InvalidAlgorithmParameterException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter object not a ECParameterSpec: ");

        $r24 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r15);

        throw $r17;
    }
