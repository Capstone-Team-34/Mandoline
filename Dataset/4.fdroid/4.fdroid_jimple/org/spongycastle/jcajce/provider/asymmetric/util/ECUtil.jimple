org.spongycastle.jcajce.provider.asymmetric.util.ECUtil extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.ECUtil r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.ECUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static int[] convertMidTerms(int[])
    {
        int[] $r0, r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: int[];

        r1 = newarray (int)[3];

        $i0 = lengthof $r0;

        if $i0 != 1 goto label1;

        $i0 = $r0[0];

        r1[0] = $i0;

        return r1;

     label1:
        $i0 = lengthof $r0;

        if $i0 == 3 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only Trinomials and pentanomials supported");

        throw $r2;

     label2:
        $i0 = $r0[0];

        $i1 = $r0[1];

        if $i0 >= $i1 goto label4;

        $i0 = $r0[0];

        $i1 = $r0[2];

        if $i0 >= $i1 goto label4;

        $i0 = $r0[0];

        r1[0] = $i0;

        $i0 = $r0[1];

        $i1 = $r0[2];

        if $i0 >= $i1 goto label3;

        $i0 = $r0[1];

        r1[1] = $i0;

        $i0 = $r0[2];

        r1[2] = $i0;

        return r1;

     label3:
        $i0 = $r0[2];

        r1[1] = $i0;

        $i0 = $r0[1];

        r1[2] = $i0;

        return r1;

     label4:
        $i0 = $r0[1];

        $i1 = $r0[2];

        if $i0 >= $i1 goto label6;

        $i0 = $r0[1];

        r1[0] = $i0;

        $i0 = $r0[0];

        $i1 = $r0[2];

        if $i0 >= $i1 goto label5;

        $i0 = $r0[0];

        r1[1] = $i0;

        $i0 = $r0[2];

        r1[2] = $i0;

        return r1;

     label5:
        $i0 = $r0[2];

        r1[1] = $i0;

        $i0 = $r0[0];

        r1[2] = $i0;

        return r1;

     label6:
        $i0 = $r0[2];

        r1[0] = $i0;

        $i0 = $r0[0];

        $i1 = $r0[1];

        if $i0 >= $i1 goto label7;

        $i0 = $r0[0];

        r1[1] = $i0;

        $i0 = $r0[1];

        r1[2] = $i0;

        return r1;

     label7:
        $i0 = $r0[1];

        r1[1] = $i0;

        $i0 = $r0[0];

        r1[2] = $i0;

        return r1;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey $r0;
        java.lang.Exception r1;
        boolean $z0;
        org.spongycastle.jce.interfaces.ECPrivateKey r2;
        org.spongycastle.jce.spec.ECParameterSpec $r3, r4;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r5;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r6;
        java.math.BigInteger $r7, $r11, $r12;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        org.spongycastle.math.ec.ECCurve $r9;
        org.spongycastle.math.ec.ECPoint $r10;
        byte[] $r13;
        java.security.interfaces.ECPrivateKey r14;
        java.security.spec.ECParameterSpec $r15;
        java.security.InvalidKeyException $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r19;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r20;

        $r0 := @parameter0: java.security.PrivateKey;

        $z0 = $r0 instanceof org.spongycastle.jce.interfaces.ECPrivateKey;

        if $z0 == 0 goto label02;

        r2 = (org.spongycastle.jce.interfaces.ECPrivateKey) $r0;

        $r3 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ECPrivateKey: org.spongycastle.jce.spec.ECParameterSpec getParameters()>();

        r4 = $r3;

        if $r3 != null goto label01;

        $r5 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r4 = interfaceinvoke $r5.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

     label01:
        $r6 = new org.spongycastle.crypto.params.ECPrivateKeyParameters;

        $r7 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ECPrivateKey: java.math.BigInteger getD()>();

        $r8 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke r4.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke r4.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke r4.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke r4.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke r4.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r6.<org.spongycastle.crypto.params.ECPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r6;

     label02:
        $z0 = $r0 instanceof java.security.interfaces.ECPrivateKey;

        if $z0 == 0 goto label03;

        r14 = (java.security.interfaces.ECPrivateKey) $r0;

        $r15 = interfaceinvoke r14.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean)>($r15, 0);

        $r6 = new org.spongycastle.crypto.params.ECPrivateKeyParameters;

        $r7 = interfaceinvoke r14.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r8 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r6.<org.spongycastle.crypto.params.ECPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r6;

     label03:
        $r13 = interfaceinvoke $r0.<java.security.PrivateKey: byte[] getEncoded()>();

     label04:
        if $r13 != null goto label07;

        $r16 = new java.security.InvalidKeyException;

     label05:
        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("no encoding for EC private key");

        throw $r16;

     label06:
        r1 := @caughtexception;

        $r16 = new java.security.InvalidKeyException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot identify EC private key: ");

        $r18 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label07:
        $r19 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r13);

        $r0 = staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: java.security.PrivateKey getPrivateKey(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r19);

     label08:
        $z0 = $r0 instanceof java.security.interfaces.ECPrivateKey;

        if $z0 == 0 goto label11;

     label09:
        $r20 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r0);

     label10:
        return $r20;

     label11:
        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify EC private key.");

        throw $r16;

        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Exception from label05 to label06 with label06;
        catch java.lang.Exception from label07 to label08 with label06;
        catch java.lang.Exception from label09 to label10 with label06;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.PublicKey $r0;
        java.lang.Exception r1;
        boolean $z0;
        org.spongycastle.jce.interfaces.ECPublicKey r2;
        org.spongycastle.jce.spec.ECParameterSpec $r3;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r4;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r5;
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r6;
        org.spongycastle.math.ec.ECPoint $r7, $r10;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        org.spongycastle.math.ec.ECCurve $r9;
        java.math.BigInteger $r11, $r12;
        byte[] $r13;
        java.security.interfaces.ECPublicKey r14;
        java.security.spec.ECParameterSpec $r15;
        java.security.spec.ECPoint $r16;
        java.security.InvalidKeyException $r17;
        java.lang.StringBuilder $r18;
        java.lang.String $r19;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r20;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r21;

        $r0 := @parameter0: java.security.PublicKey;

        $z0 = $r0 instanceof org.spongycastle.jce.interfaces.ECPublicKey;

        if $z0 == 0 goto label02;

        r2 = (org.spongycastle.jce.interfaces.ECPublicKey) $r0;

        $r3 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ECPublicKey: org.spongycastle.jce.spec.ECParameterSpec getParameters()>();

        if $r3 != null goto label01;

        $r4 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        $r3 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        $r5 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        r6 = (org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey) r2;

        $r7 = virtualinvoke r6.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint engineGetQ()>();

        $r8 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r5.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r5;

     label01:
        $r5 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r7 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ECPublicKey: org.spongycastle.math.ec.ECPoint getQ()>();

        $r8 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r5.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r5;

     label02:
        $z0 = $r0 instanceof java.security.interfaces.ECPublicKey;

        if $z0 == 0 goto label03;

        r14 = (java.security.interfaces.ECPublicKey) $r0;

        $r15 = interfaceinvoke r14.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean)>($r15, 0);

        $r5 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r15 = interfaceinvoke r14.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r16 = interfaceinvoke r14.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean)>($r15, $r16, 0);

        $r8 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r9 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $r12 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $r13 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r9, $r10, $r11, $r12, $r13);

        specialinvoke $r5.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r8);

        return $r5;

     label03:
        $r13 = interfaceinvoke $r0.<java.security.PublicKey: byte[] getEncoded()>();

     label04:
        if $r13 != null goto label07;

        $r17 = new java.security.InvalidKeyException;

     label05:
        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>("no encoding for EC public key");

        throw $r17;

     label06:
        r1 := @caughtexception;

        $r17 = new java.security.InvalidKeyException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot identify EC public key: ");

        $r19 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label07:
        $r20 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r13);

        $r0 = staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: java.security.PublicKey getPublicKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r20);

     label08:
        $z0 = $r0 instanceof java.security.interfaces.ECPublicKey;

        if $z0 == 0 goto label11;

     label09:
        $r21 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r0);

     label10:
        return $r21;

     label11:
        $r17 = new java.security.InvalidKeyException;

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>("cannot identify EC public key.");

        throw $r17;

        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Exception from label05 to label06 with label06;
        catch java.lang.Exception from label07 to label08 with label06;
        catch java.lang.Exception from label09 to label10 with label06;
    }
    public static java.lang.String getCurveName(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        java.lang.String $r1, r2;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.X962NamedCurves: java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.spongycastle.asn1.sec.SECNamedCurves: java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves: java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label2:
        if r2 != null goto label4;

        $r1 = staticinvoke <org.spongycastle.asn1.cryptopro.ECGOST3410NamedCurves: java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label3:
        return $r1;

     label4:
        return r2;
    }
    public static org.spongycastle.asn1.x9.X9ECParameters getNamedCurveByName(java.lang.String)
    {
        java.lang.String $r0;
        org.spongycastle.asn1.x9.X9ECParameters $r1, r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.spongycastle.crypto.ec.CustomNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.X962NamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <org.spongycastle.asn1.sec.SECNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

     label2:
        if r2 != null goto label4;

        $r1 = staticinvoke <org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

     label3:
        return $r1;

     label4:
        return r2;
    }
    public static org.spongycastle.asn1.x9.X9ECParameters getNamedCurveByOid(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        org.spongycastle.asn1.x9.X9ECParameters $r1, r2;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = staticinvoke <org.spongycastle.crypto.ec.CustomNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.X962NamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <org.spongycastle.asn1.sec.SECNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label2:
        if r2 != null goto label4;

        $r1 = staticinvoke <org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r0);

     label3:
        return $r1;

     label4:
        return r2;
    }
    public static org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(java.lang.String)
    {
        java.lang.String $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1, r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.X962NamedCurves: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>($r0);

        if $r1 != null goto label3;

        $r1 = staticinvoke <org.spongycastle.asn1.sec.SECNamedCurves: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>($r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>($r0);

     label1:
        if r2 != null goto label2;

        r2 = staticinvoke <org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>($r0);

     label2:
        if r2 != null goto label4;

        $r1 = staticinvoke <org.spongycastle.asn1.cryptopro.ECGOST3410NamedCurves: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>($r0);

     label3:
        return $r1;

     label4:
        return r2;
    }
    public static org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(org.spongycastle.jce.spec.ECParameterSpec)
    {
        org.spongycastle.jce.spec.ECParameterSpec $r0;
        java.util.Enumeration $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.String r3;
        org.spongycastle.asn1.x9.X9ECParameters $r4;
        java.math.BigInteger $r5, $r6;
        org.spongycastle.math.ec.ECCurve $r7, $r8;
        org.spongycastle.math.ec.ECPoint $r9, $r10;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r11;

        $r0 := @parameter0: org.spongycastle.jce.spec.ECParameterSpec;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: java.util.Enumeration getNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r4 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r6 = virtualinvoke $r0.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getH()>();

        $r6 = virtualinvoke $r0.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getH()>();

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r4.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r8 = virtualinvoke $r0.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r7.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r8);

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r4.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r10 = virtualinvoke $r0.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $z0 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: boolean equals(org.spongycastle.math.ec.ECPoint)>($r10);

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String)>(r3);

        return $r11;

     label2:
        return null;
    }
    public static int getOrderBitLength(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r2;
        org.spongycastle.jce.spec.ECParameterSpec $r3;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        if $r0 != null goto label2;

        $r2 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        if $r3 != null goto label1;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label1:
        $r0 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        return $i0;
    }
