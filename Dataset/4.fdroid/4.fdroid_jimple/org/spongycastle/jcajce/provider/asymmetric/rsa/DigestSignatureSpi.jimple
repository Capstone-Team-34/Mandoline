org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi extends java.security.SignatureSpi
private org.spongycastle.asn1.x509.AlgorithmIdentifier algId
private org.spongycastle.crypto.AsymmetricBlockCipher cipher
private org.spongycastle.crypto.Digest digest
    protected void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, org.spongycastle.crypto.Digest, org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        org.spongycastle.crypto.Digest $r2;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.asn1.DERNull $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r3;

        $r4 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r5 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r1, $r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier algId> = $r4;

        return;
    }
    protected void <init>(org.spongycastle.crypto.Digest, org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier algId> = null;

        return;
    }
    private byte[] derEncode(byte[]) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        org.spongycastle.asn1.x509.DigestInfo r1;
        byte[] $r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r2 := @parameter0: byte[];

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>;

        if $r3 != null goto label1;

        return $r2;

     label1:
        r1 = new org.spongycastle.asn1.x509.DigestInfo;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>;

        specialinvoke r1.<org.spongycastle.asn1.x509.DigestInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r3, $r2);

        $r2 = virtualinvoke r1.<org.spongycastle.asn1.x509.DigestInfo: byte[] getEncoded(java.lang.String)>("DER");

        return $r2;
    }
    private java.lang.String getType(java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.lang.String;

        return null;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        return null;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.security.PrivateKey $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.security.interfaces.RSAPrivateKey $r5;
        org.spongycastle.crypto.params.RSAKeyParameters $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.crypto.AsymmetricBlockCipher $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 != 0 goto label1;

        $r2 = new java.security.InvalidKeyException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supplied key (");

        $r4 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: java.lang.String getType(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a RSAPrivateKey instance");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = (java.security.interfaces.RSAPrivateKey) $r1;

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey)>($r5);

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void reset()>();

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r8.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r6);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.security.PublicKey $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.security.interfaces.RSAPublicKey $r5;
        org.spongycastle.crypto.params.RSAKeyParameters $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.crypto.AsymmetricBlockCipher $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.security.PublicKey;

        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 != 0 goto label1;

        $r2 = new java.security.InvalidKeyException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supplied key (");

        $r4 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: java.lang.String getType(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a RSAPublicKey instance");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = (java.security.interfaces.RSAPublicKey) $r1;

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey)>($r5);

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void reset()>();

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r8.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r6);

        return;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        byte[] r1;
        int $i0;
        org.spongycastle.crypto.Digest $r2;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        java.lang.ArrayIndexOutOfBoundsException r4;
        java.security.SignatureException $r5;
        java.lang.Exception r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

     label1:
        r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: byte[] derEncode(byte[])>(r1);

     label2:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = lengthof r1;

     label3:
        r1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r1, 0, $i0);

     label4:
        return r1;

     label5:
        r4 := @caughtexception;

        $r5 = new java.security.SignatureException;

        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>("key too small for signature type");

        throw $r5;

     label6:
        r6 := @caughtexception;

        $r5 = new java.security.SignatureException;

        $r7 = virtualinvoke r6.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>($r7);

        throw $r5;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.ArrayIndexOutOfBoundsException from label3 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label6;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi r0;
        byte[] $r1, r3, $r6;
        java.lang.Exception r2;
        int i0, i1, $i2, i4, $i5;
        boolean $z0;
        org.spongycastle.crypto.Digest $r4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        byte $b3, $b6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi;

        $r1 := @parameter0: byte[];

        $z0 = 1;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[i1];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label01:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        i1 = lengthof $r1;

        $r1 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, i1);

        $r6 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi: byte[] derEncode(byte[])>(r3);

     label02:
        i1 = lengthof $r1;

        i0 = lengthof $r6;

        if i1 != i0 goto label04;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r1, $r6);

        return $z0;

     label03:
        r2 := @caughtexception;

        return 0;

     label04:
        i1 = lengthof $r1;

        i0 = lengthof $r6;

        i0 = i0 + -2;

        if i1 != i0 goto label11;

        i1 = lengthof $r1;

        i0 = lengthof r3;

        i1 = i1 - i0;

        i1 = i1 + -2;

        i0 = lengthof $r6;

        $i2 = lengthof r3;

        i0 = i0 - $i2;

        i0 = i0 + -2;

        $b3 = $r6[1];

        $i2 = $b3 + -2;

        $b3 = (byte) $i2;

        $r6[1] = $b3;

        $b3 = $r6[3];

        $i2 = $b3 + -2;

        $b3 = (byte) $i2;

        $r6[3] = $b3;

        $i2 = 0;

        i4 = 0;

     label05:
        $i5 = lengthof r3;

        if i4 >= $i5 goto label06;

        $i5 = i1 + i4;

        $b3 = $r1[$i5];

        $i5 = i0 + i4;

        $b6 = $r6[$i5];

        $i5 = $b3 ^ $b6;

        $i2 = $i2 | $i5;

        i4 = i4 + 1;

        goto label05;

     label06:
        i0 = 0;

     label07:
        if i0 >= i1 goto label08;

        $b3 = $r1[i0];

        $b6 = $r6[i0];

        i4 = $b3 ^ $b6;

        $i2 = $i2 | i4;

        i0 = i0 + 1;

        goto label07;

     label08:
        if $i2 != 0 goto label10;

     label09:
        return $z0;

     label10:
        $z0 = 0;

        goto label09;

     label11:
        staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r6, $r6);

        return 0;

        catch java.lang.Exception from label01 to label02 with label03;
    }
