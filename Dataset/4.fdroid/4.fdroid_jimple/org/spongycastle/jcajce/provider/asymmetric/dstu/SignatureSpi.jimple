org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi extends java.security.SignatureSpi implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
private static byte[] DEFAULT_SBOX
private org.spongycastle.crypto.Digest digest
private org.spongycastle.crypto.DSA signer
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[128];

        $r0[0] = 10;

        $r0[1] = 9;

        $r0[2] = 13;

        $r0[3] = 6;

        $r0[4] = 14;

        $r0[5] = 11;

        $r0[6] = 4;

        $r0[7] = 5;

        $r0[8] = 15;

        $r0[9] = 1;

        $r0[10] = 3;

        $r0[11] = 12;

        $r0[12] = 7;

        $r0[13] = 0;

        $r0[14] = 8;

        $r0[15] = 2;

        $r0[16] = 8;

        $r0[17] = 0;

        $r0[18] = 12;

        $r0[19] = 4;

        $r0[20] = 9;

        $r0[21] = 6;

        $r0[22] = 7;

        $r0[23] = 11;

        $r0[24] = 2;

        $r0[25] = 3;

        $r0[26] = 1;

        $r0[27] = 15;

        $r0[28] = 5;

        $r0[29] = 14;

        $r0[30] = 10;

        $r0[31] = 13;

        $r0[32] = 15;

        $r0[33] = 6;

        $r0[34] = 5;

        $r0[35] = 8;

        $r0[36] = 14;

        $r0[37] = 11;

        $r0[38] = 10;

        $r0[39] = 4;

        $r0[40] = 12;

        $r0[41] = 0;

        $r0[42] = 3;

        $r0[43] = 7;

        $r0[44] = 2;

        $r0[45] = 9;

        $r0[46] = 1;

        $r0[47] = 13;

        $r0[48] = 3;

        $r0[49] = 8;

        $r0[50] = 13;

        $r0[51] = 9;

        $r0[52] = 6;

        $r0[53] = 11;

        $r0[54] = 15;

        $r0[55] = 0;

        $r0[56] = 2;

        $r0[57] = 5;

        $r0[58] = 12;

        $r0[59] = 10;

        $r0[60] = 4;

        $r0[61] = 14;

        $r0[62] = 1;

        $r0[63] = 7;

        $r0[64] = 15;

        $r0[65] = 8;

        $r0[66] = 14;

        $r0[67] = 9;

        $r0[68] = 7;

        $r0[69] = 2;

        $r0[70] = 0;

        $r0[71] = 13;

        $r0[72] = 12;

        $r0[73] = 6;

        $r0[74] = 1;

        $r0[75] = 5;

        $r0[76] = 11;

        $r0[77] = 4;

        $r0[78] = 3;

        $r0[79] = 10;

        $r0[80] = 2;

        $r0[81] = 8;

        $r0[82] = 9;

        $r0[83] = 7;

        $r0[84] = 5;

        $r0[85] = 15;

        $r0[86] = 0;

        $r0[87] = 11;

        $r0[88] = 12;

        $r0[89] = 1;

        $r0[90] = 13;

        $r0[91] = 14;

        $r0[92] = 10;

        $r0[93] = 3;

        $r0[94] = 6;

        $r0[95] = 4;

        $r0[96] = 3;

        $r0[97] = 8;

        $r0[98] = 11;

        $r0[99] = 5;

        $r0[100] = 6;

        $r0[101] = 4;

        $r0[102] = 14;

        $r0[103] = 10;

        $r0[104] = 2;

        $r0[105] = 12;

        $r0[106] = 1;

        $r0[107] = 7;

        $r0[108] = 9;

        $r0[109] = 15;

        $r0[110] = 13;

        $r0[111] = 0;

        $r0[112] = 1;

        $r0[113] = 2;

        $r0[114] = 3;

        $r0[115] = 14;

        $r0[116] = 6;

        $r0[117] = 13;

        $r0[118] = 11;

        $r0[119] = 8;

        $r0[120] = 15;

        $r0[121] = 10;

        $r0[122] = 12;

        $r0[123] = 5;

        $r0[124] = 7;

        $r0[125] = 9;

        $r0[126] = 0;

        $r0[127] = 4;

        <org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: byte[] DEFAULT_SBOX> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        org.spongycastle.crypto.signers.DSTU4145Signer $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        $r1 = new org.spongycastle.crypto.signers.DSTU4145Signer;

        specialinvoke $r1.<org.spongycastle.crypto.signers.DSTU4145Signer: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer> = $r1;

        return;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        boolean $z0;
        org.spongycastle.crypto.digests.GOST3411Digest $r4;
        byte[] $r5;
        org.spongycastle.crypto.DSA $r6;
        org.spongycastle.crypto.params.ParametersWithRandom $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $r3 = null;

        $z0 = $r1 instanceof org.spongycastle.jce.interfaces.ECKey;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

     label1:
        $r4 = new org.spongycastle.crypto.digests.GOST3411Digest;

        $r5 = <org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: byte[] DEFAULT_SBOX>;

        specialinvoke $r4.<org.spongycastle.crypto.digests.GOST3411Digest: void <init>(byte[])>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest> = $r4;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: java.security.SecureRandom appRandom>;

        if $r2 == null goto label2;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r7 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: java.security.SecureRandom appRandom>;

        specialinvoke $r7.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r3, $r2);

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r7);

        return;

     label2:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r3);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.lang.Exception r1;
        java.security.PublicKey r2, $r9;
        boolean $z0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.digests.GOST3411Digest $r4;
        org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey r5;
        byte[] $r6;
        org.spongycastle.crypto.DSA $r7;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r8;
        java.security.InvalidKeyException $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        r2 := @parameter0: java.security.PublicKey;

        $z0 = r2 instanceof org.spongycastle.jce.interfaces.ECPublicKey;

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r2);

     label1:
        $r4 = new org.spongycastle.crypto.digests.GOST3411Digest;

        r5 = (org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey) r2;

        $r6 = virtualinvoke r5.<org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey: byte[] getSbox()>();

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: byte[] expandSbox(byte[])>($r6);

        specialinvoke $r4.<org.spongycastle.crypto.digests.GOST3411Digest: void <init>(byte[])>($r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest> = $r4;

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r7.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r3);

        return;

     label2:
        $r6 = interfaceinvoke r2.<java.security.PublicKey: byte[] getEncoded()>();

        $r8 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r6);

        $r9 = staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: java.security.PublicKey getPublicKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r8);

     label3:
        r2 = $r9;

        $z0 = $r9 instanceof org.spongycastle.jce.interfaces.ECPublicKey;

        if $z0 == 0 goto label6;

     label4:
        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r9);

     label5:
        goto label1;

     label6:
        $r10 = new java.security.InvalidKeyException;

     label7:
        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r10;

     label8:
        r1 := @caughtexception;

        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r10;

        catch java.lang.Exception from label2 to label3 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label7 to label8 with label8;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        java.lang.Exception r1;
        byte[] r2, $r7, $r8;
        org.spongycastle.crypto.Digest $r3;
        int $i0, $i1;
        org.spongycastle.crypto.DSA $r4;
        java.math.BigInteger[] $r5;
        java.math.BigInteger $r6;
        org.spongycastle.asn1.DEROctetString $r9;
        java.security.SignatureException $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label01:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r6 = $r5[0];

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = $r5[1];

        $r8 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r7;

        $i1 = lengthof $r8;

     label02:
        if $i0 <= $i1 goto label15;

     label03:
        $i0 = lengthof $r7;

     label04:
        $i0 = $i0 * 2;

     label05:
        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

     label06:
        $i0 = $i0 / 2;

     label07:
        $i1 = lengthof $r8;

     label08:
        $i0 = $i0 - $i1;

     label09:
        $i1 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, $i0, $i1);

        $i0 = lengthof r2;

        $i1 = lengthof $r7;

     label10:
        $i0 = $i0 - $i1;

     label11:
        $i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, $i0, $i1);

     label12:
        $r9 = new org.spongycastle.asn1.DEROctetString;

     label13:
        specialinvoke $r9.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>(r2);

        r2 = virtualinvoke $r9.<org.spongycastle.asn1.DEROctetString: byte[] getEncoded()>();

     label14:
        return r2;

     label15:
        $i0 = lengthof $r8;

     label16:
        $i0 = $i0 * 2;

        goto label05;

     label17:
        r1 := @caughtexception;

        $r10 = new java.security.SignatureException;

        $r11 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r10.<java.security.SignatureException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        byte[] $r1, r3, r4, $r9;
        java.lang.Exception r2;
        java.math.BigInteger[] r5;
        org.spongycastle.crypto.Digest $r6;
        int $i0, $i1;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.ASN1OctetString $r8;
        java.math.BigInteger $r10, $r12;
        org.spongycastle.crypto.DSA $r11;
        boolean $z0;
        java.security.SignatureException $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: byte[];

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label01:
        $r7 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r1);

        $r8 = (org.spongycastle.asn1.ASN1OctetString) $r7;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $i0 = lengthof $r9;

     label02:
        $i0 = $i0 / 2;

     label03:
        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r9;

     label04:
        $i0 = $i0 / 2;

     label05:
        r4 = newarray (byte)[$i0];

        $i0 = lengthof $r9;

     label06:
        $i0 = $i0 / 2;

     label07:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r4, 0, $i0);

        $i0 = lengthof $r9;

     label08:
        $i0 = $i0 / 2;

     label09:
        $i1 = lengthof $r9;

     label10:
        $i1 = $i1 / 2;

     label11:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i0, $r1, 0, $i1);

        r5 = newarray (java.math.BigInteger)[2];

     label12:
        $r10 = new java.math.BigInteger;

     label13:
        specialinvoke $r10.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        r5[0] = $r10;

     label14:
        $r10 = new java.math.BigInteger;

     label15:
        specialinvoke $r10.<java.math.BigInteger: void <init>(int,byte[])>(1, r4);

        r5[1] = $r10;

     label16:
        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi: org.spongycastle.crypto.DSA signer>;

        $r10 = r5[0];

        $r12 = r5[1];

        $z0 = interfaceinvoke $r11.<org.spongycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r3, $r10, $r12);

        return $z0;

     label17:
        r2 := @caughtexception;

        $r13 = new java.security.SignatureException;

        specialinvoke $r13.<java.security.SignatureException: void <init>(java.lang.String)>("error decoding signature bytes.");

        throw $r13;

        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
    }
    byte[] expandSbox(byte[])
    {
        org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi r0;
        byte[] $r1, r2;
        int i0, $i1, $i3;
        byte $b2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi;

        $r1 := @parameter0: byte[];

        r2 = newarray (byte)[128];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $i1 = i0 * 2;

        $b2 = $r1[i0];

        $i3 = $b2 >> 4;

        $i3 = $i3 & 15;

        $b2 = (byte) $i3;

        r2[$i1] = $b2;

        $i1 = i0 * 2;

        $i1 = $i1 + 1;

        $b2 = $r1[i0];

        $i3 = $b2 & 15;

        $b2 = (byte) $i3;

        r2[$i1] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }
