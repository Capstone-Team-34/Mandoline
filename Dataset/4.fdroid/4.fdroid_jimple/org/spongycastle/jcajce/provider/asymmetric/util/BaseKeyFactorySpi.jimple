org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi extends java.security.KeyFactorySpi implements org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }
    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi r0;
        java.lang.Exception r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        java.security.spec.PKCS8EncodedKeySpec r3;
        byte[] $r4;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r5;
        java.security.PrivateKey $r6;
        java.security.spec.InvalidKeySpecException $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z0 == 0 goto label4;

     label1:
        r3 = (java.security.spec.PKCS8EncodedKeySpec) r2;

        $r4 = virtualinvoke r3.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $r5 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r5);

     label2:
        return $r6;

     label3:
        r1 := @caughtexception;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("encoded key spec not recognised");

        throw $r7;

     label4:
        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key spec not recognised");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi r0;
        java.lang.Exception r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        java.security.spec.X509EncodedKeySpec r3;
        byte[] $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        java.security.PublicKey $r6;
        java.security.spec.InvalidKeySpecException $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof java.security.spec.X509EncodedKeySpec;

        if $z0 == 0 goto label4;

     label1:
        r3 = (java.security.spec.X509EncodedKeySpec) r2;

        $r4 = virtualinvoke r3.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

        $r5 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r5);

     label2:
        return $r6;

     label3:
        r1 := @caughtexception;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("encoded key spec not recognised");

        throw $r7;

     label4:
        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key spec not recognised");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.String $r3;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        byte[] $r5;
        java.security.spec.X509EncodedKeySpec $r6;
        java.security.spec.InvalidKeySpecException $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/PKCS8EncodedKeySpec;");

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<java.security.Key: java.lang.String getFormat()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("PKCS#8");

        if $z0 == 0 goto label1;

        $r4 = new java.security.spec.PKCS8EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r5);

        return $r4;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/X509EncodedKeySpec;");

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.security.Key: java.lang.String getFormat()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("X.509");

        if $z0 == 0 goto label2;

        $r6 = new java.security.spec.X509EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r6.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5);

        return $r6;

     label2:
        $r7 = new java.security.spec.InvalidKeySpecException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not implemented yet ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r3);

        throw $r7;
    }
