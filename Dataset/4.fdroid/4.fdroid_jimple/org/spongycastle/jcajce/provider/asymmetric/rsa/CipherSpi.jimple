org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi
private java.io.ByteArrayOutputStream bOut
private org.spongycastle.crypto.AsymmetricBlockCipher cipher
private java.security.AlgorithmParameters engineParams
private final org.spongycastle.jcajce.util.JcaJceHelper helper
private java.security.spec.AlgorithmParameterSpec paramSpec
private boolean privateKeyOnly
private boolean publicKeyOnly
    public void <init>(javax.crypto.spec.OAEPParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        javax.crypto.spec.OAEPParameterSpec $r1;
        javax.crypto.NoSuchPaddingException r2;
        java.lang.String $r3;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r4;
        java.io.ByteArrayOutputStream $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: javax.crypto.spec.OAEPParameterSpec;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: void <init>()>();

        $r4 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r4.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = 0;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut> = $r5;

     label1:
        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r2.<javax.crypto.NoSuchPaddingException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;

        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: void <init>()>();

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = 0;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        return;
    }
    public void <init>(boolean, boolean, org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: void <init>()>();

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = 0;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = $z0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = $z1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        return;
    }
    private void initFromSpec(javax.crypto.spec.OAEPParameterSpec) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        javax.crypto.spec.OAEPParameterSpec $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.spec.MGF1ParameterSpec r3;
        java.lang.String $r4;
        org.spongycastle.crypto.Digest $r5;
        javax.crypto.NoSuchPaddingException $r6;
        java.lang.StringBuilder $r7;
        org.spongycastle.crypto.encodings.OAEPEncoding $r8;
        org.spongycastle.crypto.engines.RSABlindedEngine $r9;
        javax.crypto.spec.PSource $r10;
        javax.crypto.spec.PSource$PSpecified $r11;
        byte[] $r12;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: javax.crypto.spec.OAEPParameterSpec;

        $r2 = virtualinvoke $r1.<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        r3 = (java.security.spec.MGF1ParameterSpec) $r2;

        $r4 = virtualinvoke r3.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r4);

        if $r5 != null goto label1;

        $r6 = new javax.crypto.NoSuchPaddingException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no match on OAEP constructor for digest algorithm: ");

        $r4 = virtualinvoke r3.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label1:
        $r8 = new org.spongycastle.crypto.encodings.OAEPEncoding;

        $r9 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r9.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        $r10 = virtualinvoke $r1.<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()>();

        $r11 = (javax.crypto.spec.PSource$PSpecified) $r10;

        $r12 = virtualinvoke $r11.<javax.crypto.spec.PSource$PSpecified: byte[] getValue()>();

        specialinvoke $r8.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,byte[])>($r9, $r5, $r12);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r8;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec> = $r1;

        return;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        java.io.ByteArrayOutputStream $r4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        boolean $z0;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        byte $b3;
        javax.crypto.BadPaddingException $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        if $r1 == null goto label01;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label01:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $z0 = $r5 instanceof org.spongycastle.crypto.engines.RSABlindedEngine;

        if $z0 == 0 goto label02;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label03;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r6;

     label02:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if $i0 <= $i1 goto label03;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r6;

     label03:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

     label04:
        $r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label05:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = lengthof $r1;

     label06:
        $r1 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label07:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        $i0 = 0;

     label08:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label12;

        $i1 = $i2 + $i0;

        $b3 = $r1[$i0];

        $r2[$i1] = $b3;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        r3 := @caughtexception;

     label10:
        $r7 = new javax.crypto.BadPaddingException;

        $r8 = virtualinvoke r3.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r7.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label11:
        $r9 := @caughtexception;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        throw $r9;

     label12:
        $i0 = lengthof $r1;

        return $i0;

        catch org.spongycastle.crypto.InvalidCipherTextException from label04 to label05 with label09;
        catch org.spongycastle.crypto.InvalidCipherTextException from label06 to label07 with label09;
        catch java.lang.Throwable from label03 to label07 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }
    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        java.io.ByteArrayOutputStream $r3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        boolean $z0;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        javax.crypto.BadPaddingException $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 == null goto label01;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label01:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $z0 = $r4 instanceof org.spongycastle.crypto.engines.RSABlindedEngine;

        if $z0 == 0 goto label02;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label03;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r5;

     label02:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if $i0 <= $i1 goto label03;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r5;

     label03:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

     label04:
        $r1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label05:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

     label06:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void reset()>();

     label07:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = lengthof $r1;

     label08:
        $r1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label09:
        return $r1;

     label10:
        r2 := @caughtexception;

        $r6 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.spongycastle.crypto.InvalidCipherTextException from label04 to label05 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label06 to label07 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label08 to label09 with label10;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        java.lang.NullPointerException r1;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA Cipher not initialised");

        throw $r3;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        java.security.Key $r1;
        boolean $z0;
        java.security.interfaces.RSAPrivateKey r2;
        java.math.BigInteger $r3;
        int $i0;
        java.security.interfaces.RSAPublicKey r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label1;

        r2 = (java.security.interfaces.RSAPrivateKey) $r1;

        $r3 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label1:
        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label2;

        r4 = (java.security.interfaces.RSAPublicKey) $r1;

        $r3 = interfaceinvoke r4.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an RSA key!");

        throw $r5;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        int $i0;
        java.lang.NullPointerException r1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA Cipher not initialised");

        throw $r3;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        java.security.spec.AlgorithmParameterSpec $r3;
        org.spongycastle.jcajce.util.JcaJceHelper $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.AlgorithmParameters engineParams>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>("OAEP");

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.AlgorithmParameters engineParams> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.AlgorithmParameters engineParams>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.AlgorithmParameters engineParams>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        int $i0;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.spec.InvalidParameterSpecException r4;
        java.security.spec.AlgorithmParameterSpec r5;
        java.security.InvalidAlgorithmParameterException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r5 = null;

        if $r2 == null goto label2;

     label1:
        r5 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Ljavax/crypto/spec/OAEPParameterSpec;");

     label2:
        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.AlgorithmParameters engineParams> = $r2;

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r5, $r3);

        return;

     label3:
        r4 := @caughtexception;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot recognise parameters: ");

        $r8 = virtualinvoke r4.<java.security.spec.InvalidParameterSpecException: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r4);

        throw $r6;

        catch java.security.spec.InvalidParameterSpecException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.security.InvalidKeyException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new java.security.InvalidKeyException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Eeeek! ");

        $r6 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r3);

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        int $i0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2, $r29;
        java.security.Key r3;
        boolean $z0;
        java.security.interfaces.RSAPublicKey r4;
        org.spongycastle.crypto.params.RSAKeyParameters $r5;
        javax.crypto.spec.OAEPParameterSpec r6;
        java.lang.String $r7, $r9;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r8;
        java.security.interfaces.RSAPrivateKey r10;
        org.spongycastle.crypto.Digest $r11, $r14;
        java.lang.StringBuilder $r12, $r24;
        java.security.spec.MGF1ParameterSpec r13;
        javax.crypto.spec.PSource $r15;
        javax.crypto.spec.PSource$PSpecified $r16;
        byte[] $r17;
        org.spongycastle.crypto.AsymmetricBlockCipher $r18;
        java.lang.Object r19;
        java.io.ByteArrayOutputStream $r20;
        java.lang.Class $r21;
        java.security.InvalidKeyException $r22;
        java.security.InvalidAlgorithmParameterException $r23;
        org.spongycastle.crypto.engines.RSABlindedEngine $r25;
        org.spongycastle.crypto.encodings.OAEPEncoding $r26;
        org.spongycastle.crypto.params.ParametersWithRandom $r27;
        java.security.InvalidParameterException $r28;
        org.spongycastle.crypto.CipherParameters $r30;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $i0 := @parameter0: int;

        r3 := @parameter1: java.security.Key;

        $r1 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter3: java.security.SecureRandom;

        if $r1 == null goto label01;

        $z0 = $r1 instanceof javax.crypto.spec.OAEPParameterSpec;

        if $z0 == 0 goto label14;

     label01:
        $z0 = r3 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label04;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly>;

        if $z0 == 0 goto label02;

        if $i0 != 1 goto label02;

        $r22 = new java.security.InvalidKeyException;

        specialinvoke $r22.<java.security.InvalidKeyException: void <init>(java.lang.String)>("mode 1 requires RSAPrivateKey");

        throw $r22;

     label02:
        r4 = (java.security.interfaces.RSAPublicKey) r3;

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey)>(r4);

     label03:
        if $r1 == null goto label11;

        r6 = (javax.crypto.spec.OAEPParameterSpec) $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec> = $r1;

        $r7 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("MGF1");

        if $z0 != 0 goto label07;

        $r7 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()>();

        $r8 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_mgf1>;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label07;

        $r23 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown mask generation function specified");

        throw $r23;

     label04:
        $z0 = r3 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label06;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly>;

        if $z0 == 0 goto label05;

        if $i0 != 1 goto label05;

        $r22 = new java.security.InvalidKeyException;

        specialinvoke $r22.<java.security.InvalidKeyException: void <init>(java.lang.String)>("mode 2 requires RSAPublicKey");

        throw $r22;

     label05:
        r10 = (java.security.interfaces.RSAPrivateKey) r3;

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil: org.spongycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey)>(r10);

        goto label03;

     label06:
        $r22 = new java.security.InvalidKeyException;

        specialinvoke $r22.<java.security.InvalidKeyException: void <init>(java.lang.String)>("unknown key type passed to RSA");

        throw $r22;

     label07:
        $r1 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        $z0 = $r1 instanceof java.security.spec.MGF1ParameterSpec;

        if $z0 != 0 goto label08;

        $r23 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unkown MGF parameters");

        throw $r23;

     label08:
        $r7 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r7);

        if $r11 != null goto label09;

        $r23 = new java.security.InvalidAlgorithmParameterException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no match on digest algorithm: ");

        $r7 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r7);

        throw $r23;

     label09:
        $r1 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        r13 = (java.security.spec.MGF1ParameterSpec) $r1;

        $r7 = virtualinvoke r13.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r14 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r7);

        if $r14 != null goto label10;

        $r23 = new java.security.InvalidAlgorithmParameterException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no match on MGF digest algorithm: ");

        $r7 = virtualinvoke r13.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r7);

        throw $r23;

     label10:
        $r26 = new org.spongycastle.crypto.encodings.OAEPEncoding;

        $r25 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r25.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        $r15 = virtualinvoke r6.<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()>();

        $r16 = (javax.crypto.spec.PSource$PSpecified) $r15;

        $r17 = virtualinvoke $r16.<javax.crypto.spec.PSource$PSpecified: byte[] getValue()>();

        specialinvoke $r26.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,byte[])>($r25, $r11, $r14, $r17);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r26;

     label11:
        $r18 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $z0 = $r18 instanceof org.spongycastle.crypto.engines.RSABlindedEngine;

        if $z0 != 0 goto label18;

        if $r2 == null goto label15;

        $r27 = new org.spongycastle.crypto.params.ParametersWithRandom;

        r19 = $r27;

        specialinvoke $r27.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r5, $r2);

     label12:
        $r20 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r20.<java.io.ByteArrayOutputStream: void reset()>();

        lookupswitch($i0)
        {
            case 1: goto label16;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label17;
            default: goto label13;
        };

     label13:
        $r28 = new java.security.InvalidParameterException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown opmode ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed to RSA");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r7);

        throw $r28;

     label14:
        $r23 = new java.security.InvalidAlgorithmParameterException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown parameter type: ");

        $r21 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r7);

        throw $r23;

     label15:
        $r27 = new org.spongycastle.crypto.params.ParametersWithRandom;

        r19 = $r27;

        $r29 = new java.security.SecureRandom;

        specialinvoke $r29.<java.security.SecureRandom: void <init>()>();

        specialinvoke $r27.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r5, $r29);

        goto label12;

     label16:
        $r18 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $r30 = (org.spongycastle.crypto.CipherParameters) r19;

        interfaceinvoke $r18.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r30);

        return;

     label17:
        $r18 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $r30 = (org.spongycastle.crypto.CipherParameters) r19;

        interfaceinvoke $r18.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r30);

        return;

     label18:
        r19 = $r5;

        goto label12;
    }
    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.security.NoSuchAlgorithmException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NONE");

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = 1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = 0;

        return;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("2");

        if $z0 == 0 goto label3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean privateKeyOnly> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: boolean publicKeyOnly> = 1;

        return;

     label3:
        $r3 = new java.security.NoSuchAlgorithmException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        return;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.engines.RSABlindedEngine $r3;
        org.spongycastle.crypto.encodings.PKCS1Encoding $r4;
        org.spongycastle.crypto.encodings.ISO9796d1Encoding $r5;
        javax.crypto.spec.OAEPParameterSpec $r6;
        java.security.spec.MGF1ParameterSpec $r7;
        javax.crypto.spec.PSource$PSpecified $r8;
        javax.crypto.NoSuchPaddingException $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label01;

        $r3 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r3.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r3;

        return;

     label01:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS1PADDING");

        if $z0 == 0 goto label02;

        $r4 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r3 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r3.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke $r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r4;

        return;

     label02:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO9796-1PADDING");

        if $z0 == 0 goto label03;

        $r5 = new org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r3 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r3.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke $r5.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r5;

        return;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHMD5ANDMGF1PADDING");

        if $z0 == 0 goto label04;

        $r6 = new javax.crypto.spec.OAEPParameterSpec;

        $r7 = new java.security.spec.MGF1ParameterSpec;

        specialinvoke $r7.<java.security.spec.MGF1ParameterSpec: void <init>(java.lang.String)>("MD5");

        $r8 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r6.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("MD5", "MGF1", $r7, $r8);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label04:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPPADDING");

        if $z0 == 0 goto label05;

        $r6 = <javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.OAEPParameterSpec DEFAULT>;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label05:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA1ANDMGF1PADDING");

        if $z0 != 0 goto label06;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA-1ANDMGF1PADDING");

        if $z0 == 0 goto label07;

     label06:
        $r6 = <javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.OAEPParameterSpec DEFAULT>;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA224ANDMGF1PADDING");

        if $z0 != 0 goto label08;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA-224ANDMGF1PADDING");

        if $z0 == 0 goto label09;

     label08:
        $r6 = new javax.crypto.spec.OAEPParameterSpec;

        $r7 = new java.security.spec.MGF1ParameterSpec;

        specialinvoke $r7.<java.security.spec.MGF1ParameterSpec: void <init>(java.lang.String)>("SHA-224");

        $r8 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r6.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-224", "MGF1", $r7, $r8);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA256ANDMGF1PADDING");

        if $z0 != 0 goto label10;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA-256ANDMGF1PADDING");

        if $z0 == 0 goto label11;

     label10:
        $r6 = new javax.crypto.spec.OAEPParameterSpec;

        $r7 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA256>;

        $r8 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r6.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-256", "MGF1", $r7, $r8);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label11:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA384ANDMGF1PADDING");

        if $z0 != 0 goto label12;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA-384ANDMGF1PADDING");

        if $z0 == 0 goto label13;

     label12:
        $r6 = new javax.crypto.spec.OAEPParameterSpec;

        $r7 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA384>;

        $r8 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r6.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-384", "MGF1", $r7, $r8);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label13:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA512ANDMGF1PADDING");

        if $z0 != 0 goto label14;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA-512ANDMGF1PADDING");

        if $z0 == 0 goto label15;

     label14:
        $r6 = new javax.crypto.spec.OAEPParameterSpec;

        $r7 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA512>;

        $r8 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r6.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-512", "MGF1", $r7, $r8);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r6);

        return;

     label15:
        $r9 = new javax.crypto.NoSuchPaddingException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable with RSA.");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r9;
    }
    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        boolean $z0;
        java.lang.ArrayIndexOutOfBoundsException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $z0 = $r4 instanceof org.spongycastle.crypto.engines.RSABlindedEngine;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label2;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r5;

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if $i0 <= $i1 goto label2;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r5;

     label2:
        return 0;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        boolean $z0;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $z0 = $r3 instanceof org.spongycastle.crypto.engines.RSABlindedEngine;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label2;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r4;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: java.io.ByteArrayOutputStream bOut>;

        $i0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.CipherSpi: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if $i0 <= $i1 goto label2;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("too much data for RSA block");

        throw $r4;

     label2:
        return null;
    }
