org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi extends javax.crypto.CipherSpi
private java.lang.Class[] availableSpecs
private java.io.ByteArrayOutputStream buffer
private org.spongycastle.crypto.engines.IESEngine cipher
private java.security.AlgorithmParameters engineParam
private org.spongycastle.jce.spec.IESParameterSpec engineParams
private final org.spongycastle.jcajce.util.JcaJceHelper helper
private int state
    public void <init>(org.spongycastle.crypto.engines.IESEngine)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        org.spongycastle.crypto.engines.IESEngine $r1;
        org.spongycastle.jcajce.util.BCJcaJceHelper $r2;
        java.io.ByteArrayOutputStream $r3;
        java.lang.Class[] $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: org.spongycastle.crypto.engines.IESEngine;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r2 = new org.spongycastle.jcajce.util.BCJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.BCJcaJceHelper: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state> = -1;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams> = null;

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Lorg/spongycastle/jce/spec/IESParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.lang.Class[] availableSpecs> = $r4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.crypto.engines.IESEngine cipher> = $r1;

        return;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        java.io.ByteArrayOutputStream $r4;
        org.spongycastle.crypto.engines.IESEngine $r5;
        javax.crypto.BadPaddingException $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        if $i1 == 0 goto label01;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label01:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

     label02:
        $r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label03:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

     label04:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

     label05:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.crypto.engines.IESEngine cipher>;

        $i0 = lengthof $r1;

     label06:
        $r1 = virtualinvoke $r5.<org.spongycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label07:
        $i0 = lengthof $r1;

     label08:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

     label09:
        $i0 = lengthof $r1;

        return $i0;

     label10:
        r3 := @caughtexception;

        $r6 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke r3.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.spongycastle.crypto.InvalidCipherTextException from label02 to label03 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label04 to label05 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label06 to label07 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label08 to label09 with label10;
    }
    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        java.io.ByteArrayOutputStream $r3;
        org.spongycastle.crypto.engines.IESEngine $r4;
        javax.crypto.BadPaddingException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 == 0 goto label1;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

     label2:
        $r1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label3:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

     label4:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void reset()>();

     label5:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.crypto.engines.IESEngine cipher>;

        $i0 = lengthof $r1;

     label6:
        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label7:
        return $r1;

     label8:
        r2 := @caughtexception;

        $r5 = new javax.crypto.BadPaddingException;

        $r6 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.spongycastle.crypto.InvalidCipherTextException from label2 to label3 with label8;
        catch org.spongycastle.crypto.InvalidCipherTextException from label4 to label5 with label8;
        catch org.spongycastle.crypto.InvalidCipherTextException from label6 to label7 with label8;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        return 0;
    }
    protected byte[] engineGetIV()
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        return null;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        java.security.Key $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.jce.interfaces.IESKey r3;
        java.security.PrivateKey $r4;
        javax.crypto.interfaces.DHPrivateKey r5;
        java.math.BigInteger $r6;
        int $i0;
        org.spongycastle.jce.interfaces.ECPrivateKey r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof org.spongycastle.jce.interfaces.IESKey;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must be passed IE key");

        throw $r2;

     label1:
        r3 = (org.spongycastle.jce.interfaces.IESKey) $r1;

        $r4 = interfaceinvoke r3.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $z0 = $r4 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r5 = (javax.crypto.interfaces.DHPrivateKey) $r4;

        $r6 = interfaceinvoke r5.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $r4 = interfaceinvoke r3.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $z0 = $r4 instanceof org.spongycastle.jce.interfaces.ECPrivateKey;

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r7 = (org.spongycastle.jce.interfaces.ECPrivateKey) $r4;

        $r6 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.ECPrivateKey: java.math.BigInteger getD()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an IE key!");

        throw $r2;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state>;

        if $i1 == 1 goto label1;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state>;

        if $i1 != 3 goto label2;

     label1:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i0 = $i1 + $i0;

        $i0 = $i0 + 20;

        return $i0;

     label2:
        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state>;

        if $i1 == 2 goto label3;

        $i1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state>;

        if $i1 != 4 goto label4;

     label3:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i0 = $i1 + $i0;

        $i0 = $i0 + -20;

        return $i0;

     label4:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r2;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        org.spongycastle.jce.spec.IESParameterSpec $r3;
        org.spongycastle.jcajce.util.JcaJceHelper $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams>;

        if $r3 == null goto label2;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.jcajce.util.JcaJceHelper: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String)>("IES");

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        int $i0, i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.lang.Exception r4;
        java.security.spec.AlgorithmParameterSpec r5, $r8;
        java.lang.Class[] $r6;
        java.lang.Class $r7;
        java.security.InvalidAlgorithmParameterException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r5 = null;

        if $r2 == null goto label6;

        i1 = 0;

     label1:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r6;

        if i1 == $i2 goto label4;

     label2:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.lang.Class[] availableSpecs>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r7);

     label3:
        r5 = $r8;

     label4:
        if r5 != null goto label6;

        $r9 = new java.security.InvalidAlgorithmParameterException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r11 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label5:
        r4 := @caughtexception;

        i1 = i1 + 1;

        goto label1;

     label6:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.security.AlgorithmParameters engineParam> = $r2;

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r5, $r3);

        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

        if $i0 == 1 goto label1;

        if $i0 != 3 goto label4;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t handle null parameter spec in IES");

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        int $i0, $i1;
        java.security.Key $r1;
        byte[] r2, r3;
        java.lang.Object r5;
        java.security.SecureRandom r6, $r17;
        boolean $z0;
        org.spongycastle.jce.interfaces.IESKey r7;
        java.security.PublicKey $r8;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r9, $r11;
        java.security.PrivateKey $r10;
        org.spongycastle.jce.spec.IESParameterSpec r12;
        java.io.ByteArrayOutputStream $r13;
        java.io.PrintStream $r14;
        org.spongycastle.crypto.engines.IESEngine $r15;
        java.security.InvalidKeyException $r16;
        org.spongycastle.crypto.params.IESParameters $r18;
        java.security.InvalidAlgorithmParameterException $r19;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        r5 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r6 := @parameter3: java.security.SecureRandom;

        $z0 = $r1 instanceof org.spongycastle.jce.interfaces.IESKey;

        if $z0 != 0 goto label01;

        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed IES key");

        throw $r16;

     label01:
        if r5 != null goto label07;

        if $i0 == 1 goto label02;

        if $i0 != 3 goto label07;

     label02:
        r2 = newarray (byte)[16];

        r3 = newarray (byte)[16];

        if r6 != null goto label03;

        $r17 = new java.security.SecureRandom;

        r6 = $r17;

        specialinvoke $r17.<java.security.SecureRandom: void <init>()>();

     label03:
        virtualinvoke r6.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        virtualinvoke r6.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        r12 = new org.spongycastle.jce.spec.IESParameterSpec;

        r5 = r12;

        specialinvoke r12.<org.spongycastle.jce.spec.IESParameterSpec: void <init>(byte[],byte[],int)>(r2, r3, 128);

     label04:
        r7 = (org.spongycastle.jce.interfaces.IESKey) $r1;

        $r8 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $z0 = $r8 instanceof javax.crypto.interfaces.DHPublicKey;

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.DHUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r8);

        $r10 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.DHUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

     label05:
        r12 = (org.spongycastle.jce.spec.IESParameterSpec) r5;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams> = r12;

        $r18 = new org.spongycastle.crypto.params.IESParameters;

        r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams>;

        r2 = virtualinvoke r12.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getDerivationV()>();

        r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams>;

        r3 = virtualinvoke r12.<org.spongycastle.jce.spec.IESParameterSpec: byte[] getEncodingV()>();

        r12 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.jce.spec.IESParameterSpec engineParams>;

        $i1 = virtualinvoke r12.<org.spongycastle.jce.spec.IESParameterSpec: int getMacKeySize()>();

        specialinvoke $r18.<org.spongycastle.crypto.params.IESParameters: void <init>(byte[],byte[],int)>(r2, r3, $i1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: int state> = $i0;

        $r13 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r13.<java.io.ByteArrayOutputStream: void reset()>();

        lookupswitch($i0)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label06;
        };

     label06:
        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label07:
        $z0 = r5 instanceof org.spongycastle.jce.spec.IESParameterSpec;

        if $z0 != 0 goto label04;

        $r19 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r19.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("must be passed IES parameters");

        throw $r19;

     label08:
        $r8 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r8);

        $r10 = interfaceinvoke r7.<org.spongycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r11 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r10);

        goto label05;

     label09:
        $r15 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r15.<org.spongycastle.crypto.engines.IESEngine: void init(boolean,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters)>(1, $r11, $r9, $r18);

        return;

     label10:
        $r15 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: org.spongycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r15.<org.spongycastle.crypto.engines.IESEngine: void init(boolean,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters,org.spongycastle.crypto.CipherParameters)>(0, $r11, $r9, $r18);

        return;
    }
    protected void engineSetMode(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        java.lang.String $r1;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable with RSA.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }
    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ies.CipherSpi: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return null;
    }
