org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi
private org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher
private java.security.AlgorithmParameters engineParams
private java.security.spec.AlgorithmParameterSpec paramSpec
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: void <init>()>();

        $r2 = new org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        specialinvoke $r2.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher> = $r2;

        return;
    }
    private void initFromSpec(javax.crypto.spec.OAEPParameterSpec) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        javax.crypto.spec.OAEPParameterSpec $r1;
        org.spongycastle.crypto.engines.ElGamalEngine $r2;
        java.security.spec.AlgorithmParameterSpec $r3;
        java.security.spec.MGF1ParameterSpec r4;
        java.lang.String $r5;
        org.spongycastle.crypto.Digest $r6;
        javax.crypto.NoSuchPaddingException $r7;
        java.lang.StringBuilder $r8;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r9;
        org.spongycastle.crypto.encodings.OAEPEncoding $r10;
        javax.crypto.spec.PSource $r11;
        javax.crypto.spec.PSource$PSpecified $r12;
        byte[] $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: javax.crypto.spec.OAEPParameterSpec;

        $r3 = virtualinvoke $r1.<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()>();

        r4 = (java.security.spec.MGF1ParameterSpec) $r3;

        $r5 = virtualinvoke r4.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.util.DigestFactory: org.spongycastle.crypto.Digest getDigest(java.lang.String)>($r5);

        if $r6 != null goto label1;

        $r7 = new javax.crypto.NoSuchPaddingException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no match on OAEP constructor for digest algorithm: ");

        $r5 = virtualinvoke r4.<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label1:
        $r9 = new org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r10 = new org.spongycastle.crypto.encodings.OAEPEncoding;

        $r2 = new org.spongycastle.crypto.engines.ElGamalEngine;

        specialinvoke $r2.<org.spongycastle.crypto.engines.ElGamalEngine: void <init>()>();

        $r11 = virtualinvoke $r1.<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()>();

        $r12 = (javax.crypto.spec.PSource$PSpecified) $r11;

        $r13 = virtualinvoke $r12.<javax.crypto.spec.PSource$PSpecified: byte[] getValue()>();

        specialinvoke $r10.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,byte[])>($r2, $r6, $r13);

        specialinvoke $r9.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r10);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher> = $r9;

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec> = $r1;

        return;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r4;
        byte $b3;
        javax.crypto.BadPaddingException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        virtualinvoke $r4.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void processBytes(byte[],int,int)>($r1, $i0, $i1);

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

     label1:
        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] doFinal()>();

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label5;

        $i1 = $i2 + $i0;

        $b3 = $r1[$i0];

        $r2[$i1] = $b3;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        r3 := @caughtexception;

        $r5 = new javax.crypto.BadPaddingException;

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        $i0 = lengthof $r1;

        return $i0;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label4;
    }
    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r3;
        javax.crypto.BadPaddingException $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        virtualinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void processBytes(byte[],int,int)>($r1, $i0, $i1);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

     label1:
        $r1 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] doFinal()>();

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        $r4 = new javax.crypto.BadPaddingException;

        $r5 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r4.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        int $i0;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int getInputBlockSize()>();

        return $i0;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        java.security.Key $r1;
        boolean $z0;
        org.spongycastle.jce.interfaces.ElGamalKey r2;
        org.spongycastle.jce.spec.ElGamalParameterSpec $r3;
        java.math.BigInteger $r4;
        int $i0;
        javax.crypto.interfaces.DHKey r5;
        javax.crypto.spec.DHParameterSpec $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof org.spongycastle.jce.interfaces.ElGamalKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.jce.interfaces.ElGamalKey) $r1;

        $r3 = interfaceinvoke r2.<org.spongycastle.jce.interfaces.ElGamalKey: org.spongycastle.jce.spec.ElGamalParameterSpec getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label1:
        $z0 = $r1 instanceof javax.crypto.interfaces.DHKey;

        if $z0 == 0 goto label2;

        r5 = (javax.crypto.interfaces.DHKey) $r1;

        $r6 = interfaceinvoke r5.<javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r4 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an ElGamal key!");

        throw $r7;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        int $i0;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int getOutputBlockSize()>();

        return $i0;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        java.security.spec.AlgorithmParameterSpec $r3;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.AlgorithmParameters engineParams>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec>;

        if $r3 == null goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>("OAEP");

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.AlgorithmParameters engineParams> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.AlgorithmParameters engineParams>;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.spec.AlgorithmParameterSpec paramSpec>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: java.security.AlgorithmParameters engineParams>;

        return $r2;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        int $i0;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.InvalidAlgorithmParameterException $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        $r4 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r4.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("can\'t handle parameters in ElGamal");

        throw $r4;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

        return;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        int $i0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        java.security.Key r3;
        boolean $z0;
        java.security.PublicKey r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        java.lang.Object r6;
        java.lang.StringBuilder $r7, $r12;
        java.lang.String $r8;
        java.security.PrivateKey r9;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r10;
        org.spongycastle.crypto.params.ParametersWithRandom $r11;
        java.security.InvalidParameterException $r13;
        java.security.InvalidKeyException $r14;
        java.lang.IllegalArgumentException $r15;
        org.spongycastle.crypto.CipherParameters $r16;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $i0 := @parameter0: int;

        r3 := @parameter1: java.security.Key;

        $r1 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter3: java.security.SecureRandom;

        if $r1 != null goto label6;

        $z0 = r3 instanceof org.spongycastle.jce.interfaces.ElGamalPublicKey;

        if $z0 == 0 goto label4;

        r4 = (java.security.PublicKey) r3;

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r4);

     label1:
        if $r2 == null goto label9;

        $r11 = new org.spongycastle.crypto.params.ParametersWithRandom;

        r6 = $r11;

        specialinvoke $r11.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r5, $r2);

     label2:
        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label8;
            default: goto label3;
        };

     label3:
        $r13 = new java.security.InvalidParameterException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown opmode ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed to ElGamal");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label4:
        $z0 = r3 instanceof org.spongycastle.jce.interfaces.ElGamalPrivateKey;

        if $z0 == 0 goto label5;

        r9 = (java.security.PrivateKey) r3;

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>(r9);

        goto label1;

     label5:
        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String)>("unknown key type passed to ElGamal");

        throw $r14;

     label6:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r15;

     label7:
        $r10 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        $r16 = (org.spongycastle.crypto.CipherParameters) r6;

        virtualinvoke $r10.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r16);

        return;

     label8:
        $r10 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        $r16 = (org.spongycastle.crypto.CipherParameters) r6;

        virtualinvoke $r10.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r16);

        return;

     label9:
        r6 = $r5;

        goto label2;
    }
    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.security.NoSuchAlgorithmException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NONE");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.security.NoSuchAlgorithmException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        return;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r3;
        org.spongycastle.crypto.engines.ElGamalEngine $r4;
        org.spongycastle.crypto.encodings.PKCS1Encoding $r5;
        org.spongycastle.crypto.encodings.ISO9796d1Encoding $r6;
        javax.crypto.spec.OAEPParameterSpec $r7;
        java.security.spec.MGF1ParameterSpec $r8;
        javax.crypto.spec.PSource$PSpecified $r9;
        javax.crypto.NoSuchPaddingException $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label01;

        $r3 = new org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r4 = new org.spongycastle.crypto.engines.ElGamalEngine;

        specialinvoke $r4.<org.spongycastle.crypto.engines.ElGamalEngine: void <init>()>();

        specialinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r4);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher> = $r3;

        return;

     label01:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS1PADDING");

        if $z0 == 0 goto label02;

        $r3 = new org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r5 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r4 = new org.spongycastle.crypto.engines.ElGamalEngine;

        specialinvoke $r4.<org.spongycastle.crypto.engines.ElGamalEngine: void <init>()>();

        specialinvoke $r5.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r4);

        specialinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher> = $r3;

        return;

     label02:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO9796-1PADDING");

        if $z0 == 0 goto label03;

        $r3 = new org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r6 = new org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r4 = new org.spongycastle.crypto.engines.ElGamalEngine;

        specialinvoke $r4.<org.spongycastle.crypto.engines.ElGamalEngine: void <init>()>();

        specialinvoke $r6.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r4);

        specialinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher> = $r3;

        return;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPPADDING");

        if $z0 == 0 goto label04;

        $r7 = <javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.OAEPParameterSpec DEFAULT>;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label04:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHMD5ANDMGF1PADDING");

        if $z0 == 0 goto label05;

        $r7 = new javax.crypto.spec.OAEPParameterSpec;

        $r8 = new java.security.spec.MGF1ParameterSpec;

        specialinvoke $r8.<java.security.spec.MGF1ParameterSpec: void <init>(java.lang.String)>("MD5");

        $r9 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r7.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("MD5", "MGF1", $r8, $r9);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label05:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA1ANDMGF1PADDING");

        if $z0 == 0 goto label06;

        $r7 = <javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.OAEPParameterSpec DEFAULT>;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label06:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA224ANDMGF1PADDING");

        if $z0 == 0 goto label07;

        $r7 = new javax.crypto.spec.OAEPParameterSpec;

        $r8 = new java.security.spec.MGF1ParameterSpec;

        specialinvoke $r8.<java.security.spec.MGF1ParameterSpec: void <init>(java.lang.String)>("SHA-224");

        $r9 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r7.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-224", "MGF1", $r8, $r9);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA256ANDMGF1PADDING");

        if $z0 == 0 goto label08;

        $r7 = new javax.crypto.spec.OAEPParameterSpec;

        $r8 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA256>;

        $r9 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r7.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-256", "MGF1", $r8, $r9);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label08:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA384ANDMGF1PADDING");

        if $z0 == 0 goto label09;

        $r7 = new javax.crypto.spec.OAEPParameterSpec;

        $r8 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA384>;

        $r9 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r7.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-384", "MGF1", $r8, $r9);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OAEPWITHSHA512ANDMGF1PADDING");

        if $z0 == 0 goto label10;

        $r7 = new javax.crypto.spec.OAEPParameterSpec;

        $r8 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA512>;

        $r9 = <javax.crypto.spec.PSource$PSpecified: javax.crypto.spec.PSource$PSpecified DEFAULT>;

        specialinvoke $r7.<javax.crypto.spec.OAEPParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)>("SHA-512", "MGF1", $r8, $r9);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: void initFromSpec(javax.crypto.spec.OAEPParameterSpec)>($r7);

        return;

     label10:
        $r10 = new javax.crypto.NoSuchPaddingException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable with ElGamal.");

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r10;
    }
    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        virtualinvoke $r3.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void processBytes(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.elgamal.CipherSpi: org.spongycastle.crypto.BufferedAsymmetricBlockCipher cipher>;

        virtualinvoke $r2.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void processBytes(byte[],int,int)>($r1, $i0, $i1);

        return null;
    }
