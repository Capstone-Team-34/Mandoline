org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner extends java.security.SignatureSpi implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
private org.spongycastle.crypto.Digest digest
private java.security.SecureRandom random
private org.spongycastle.crypto.DSA signer
    protected void <init>(org.spongycastle.crypto.Digest, org.spongycastle.crypto.DSA)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.DSA $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.crypto.DSA;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.DSA signer> = $r2;

        return;
    }
    private java.math.BigInteger[] derDecode(byte[]) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        byte[] $r1;
        java.math.BigInteger[] $r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        org.spongycastle.asn1.ASN1Sequence r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        java.math.BigInteger $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: byte[];

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r1);

        r4 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r2 = newarray (java.math.BigInteger)[2];

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r2[0] = $r7;

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r2[1] = $r7;

        return $r2;
    }
    private byte[] derEncode(java.math.BigInteger, java.math.BigInteger) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.asn1.ASN1Integer[] r3;
        byte[] $r4;
        org.spongycastle.asn1.ASN1Integer $r5;
        org.spongycastle.asn1.DERSequence $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        r3 = newarray (org.spongycastle.asn1.ASN1Integer)[2];

        $r5 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r1);

        r3[0] = $r5;

        $r5 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r2);

        r3[1] = $r5;

        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable[])>(r3);

        $r4 = virtualinvoke $r6.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

        return $r4;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.security.PrivateKey $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        java.lang.Object r3;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.crypto.DSA $r6;
        org.spongycastle.crypto.params.ParametersWithRandom $r7;
        org.spongycastle.crypto.CipherParameters $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

        r3 = $r2;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: java.security.SecureRandom random>;

        if $r4 == null goto label1;

        $r7 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: java.security.SecureRandom random>;

        specialinvoke $r7.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, $r4);

        r3 = $r7;

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.DSA signer>;

        $r8 = (org.spongycastle.crypto.CipherParameters) r3;

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r8);

        return;
    }
    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: java.security.SecureRandom random> = $r2;

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: void engineInitSign(java.security.PrivateKey)>($r1);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey r1;
        java.security.PublicKey r2;
        boolean $z0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.Digest $r4;
        org.spongycastle.crypto.DSA $r5;
        byte[] $r6;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r7;
        java.security.InvalidKeyException $r8;
        java.lang.Exception r9, r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        r2 := @parameter0: java.security.PublicKey;

        $z0 = r2 instanceof java.security.interfaces.DSAKey;

        if $z0 == 0 goto label02;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r2);

     label01:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void reset()>();

        $r5 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.DSA signer>;

        interfaceinvoke $r5.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r3);

        return;

     label02:
        $r6 = interfaceinvoke r2.<java.security.PublicKey: byte[] getEncoded()>();

     label03:
        r1 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey;

     label04:
        $r7 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r6);

        specialinvoke r1.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r7);

     label05:
        $z0 = r1 instanceof java.security.interfaces.DSAKey;

        if $z0 == 0 goto label08;

     label06:
        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r1);

     label07:
        goto label01;

     label08:
        $r8 = new java.security.InvalidKeyException;

     label09:
        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r8;

     label10:
        r9 := @caughtexception;

     label11:
        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r8;

     label12:
        r10 := @caughtexception;

        goto label11;

        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label09 to label10 with label10;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        java.lang.Exception r1;
        byte[] r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;
        org.spongycastle.crypto.DSA $r4;
        java.math.BigInteger[] $r5;
        java.math.BigInteger $r6, $r7;
        java.security.SignatureException $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.DSA signer>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r6 = $r5[0];

        $r7 = $r5[1];

        r2 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: byte[] derEncode(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

     label2:
        return r2;

     label3:
        r1 := @caughtexception;

        $r8 = new java.security.SignatureException;

        $r9 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner r0;
        byte[] $r1, r3;
        java.lang.Exception r2;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        java.math.BigInteger[] $r5;
        org.spongycastle.crypto.DSA $r6;
        java.math.BigInteger $r7, $r8;
        boolean $z0;
        java.security.SignatureException $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner;

        $r1 := @parameter0: byte[];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label1:
        $r5 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: java.math.BigInteger[] derDecode(byte[])>($r1);

     label2:
        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner: org.spongycastle.crypto.DSA signer>;

        $r7 = $r5[0];

        $r8 = $r5[1];

        $z0 = interfaceinvoke $r6.<org.spongycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r3, $r7, $r8);

        return $z0;

     label3:
        r2 := @caughtexception;

        $r9 = new java.security.SignatureException;

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>("error decoding signature bytes.");

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
