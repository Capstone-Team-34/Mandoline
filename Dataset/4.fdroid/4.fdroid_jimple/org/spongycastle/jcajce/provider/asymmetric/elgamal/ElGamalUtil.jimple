org.spongycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey $r0;
        boolean $z0;
        org.spongycastle.jce.interfaces.ElGamalPrivateKey r1;
        org.spongycastle.crypto.params.ElGamalPrivateKeyParameters $r2;
        java.math.BigInteger $r3, $r6, $r7;
        org.spongycastle.crypto.params.ElGamalParameters $r4;
        org.spongycastle.jce.spec.ElGamalParameterSpec $r5;
        javax.crypto.interfaces.DHPrivateKey r8;
        javax.crypto.spec.DHParameterSpec $r9;
        java.security.InvalidKeyException $r10;

        $r0 := @parameter0: java.security.PrivateKey;

        $z0 = $r0 instanceof org.spongycastle.jce.interfaces.ElGamalPrivateKey;

        if $z0 == 0 goto label1;

        r1 = (org.spongycastle.jce.interfaces.ElGamalPrivateKey) $r0;

        $r2 = new org.spongycastle.crypto.params.ElGamalPrivateKeyParameters;

        $r3 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPrivateKey: java.math.BigInteger getX()>();

        $r4 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r5 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPrivateKey: org.spongycastle.jce.spec.ElGamalParameterSpec getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getP()>();

        $r5 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPrivateKey: org.spongycastle.jce.spec.ElGamalParameterSpec getParameters()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

        specialinvoke $r2.<org.spongycastle.crypto.params.ElGamalPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r3, $r4);

        return $r2;

     label1:
        $z0 = $r0 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z0 == 0 goto label2;

        r8 = (javax.crypto.interfaces.DHPrivateKey) $r0;

        $r2 = new org.spongycastle.crypto.params.ElGamalPrivateKeyParameters;

        $r3 = interfaceinvoke r8.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $r4 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r9 = interfaceinvoke r8.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r6 = virtualinvoke $r9.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r9 = interfaceinvoke r8.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r7 = virtualinvoke $r9.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

        specialinvoke $r2.<org.spongycastle.crypto.params.ElGamalPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r3, $r4);

        return $r2;

     label2:
        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify private key for El Gamal.");

        throw $r10;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.PublicKey $r0;
        boolean $z0;
        org.spongycastle.jce.interfaces.ElGamalPublicKey r1;
        org.spongycastle.crypto.params.ElGamalPublicKeyParameters $r2;
        java.math.BigInteger $r3, $r6, $r7;
        org.spongycastle.crypto.params.ElGamalParameters $r4;
        org.spongycastle.jce.spec.ElGamalParameterSpec $r5;
        javax.crypto.interfaces.DHPublicKey r8;
        javax.crypto.spec.DHParameterSpec $r9;
        java.security.InvalidKeyException $r10;

        $r0 := @parameter0: java.security.PublicKey;

        $z0 = $r0 instanceof org.spongycastle.jce.interfaces.ElGamalPublicKey;

        if $z0 == 0 goto label1;

        r1 = (org.spongycastle.jce.interfaces.ElGamalPublicKey) $r0;

        $r2 = new org.spongycastle.crypto.params.ElGamalPublicKeyParameters;

        $r3 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPublicKey: java.math.BigInteger getY()>();

        $r4 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r5 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPublicKey: org.spongycastle.jce.spec.ElGamalParameterSpec getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getP()>();

        $r5 = interfaceinvoke r1.<org.spongycastle.jce.interfaces.ElGamalPublicKey: org.spongycastle.jce.spec.ElGamalParameterSpec getParameters()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.jce.spec.ElGamalParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

        specialinvoke $r2.<org.spongycastle.crypto.params.ElGamalPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r3, $r4);

        return $r2;

     label1:
        $z0 = $r0 instanceof javax.crypto.interfaces.DHPublicKey;

        if $z0 == 0 goto label2;

        r8 = (javax.crypto.interfaces.DHPublicKey) $r0;

        $r2 = new org.spongycastle.crypto.params.ElGamalPublicKeyParameters;

        $r3 = interfaceinvoke r8.<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>();

        $r4 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r9 = interfaceinvoke r8.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r6 = virtualinvoke $r9.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r9 = interfaceinvoke r8.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r7 = virtualinvoke $r9.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

        specialinvoke $r2.<org.spongycastle.crypto.params.ElGamalPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r3, $r4);

        return $r2;

     label2:
        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify public key for El Gamal.");

        throw $r10;
    }
