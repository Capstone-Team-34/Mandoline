org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey extends org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey implements java.security.interfaces.RSAPrivateCrtKey
static final long serialVersionUID
private java.math.BigInteger crtCoefficient
private java.math.BigInteger primeExponentP
private java.math.BigInteger primeExponentQ
private java.math.BigInteger primeP
private java.math.BigInteger primeQ
private java.math.BigInteger publicExponent
    void <init>(java.security.interfaces.RSAPrivateCrtKey)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.security.interfaces.RSAPrivateCrtKey $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: java.security.interfaces.RSAPrivateCrtKey;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger modulus> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger publicExponent> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger privateExponent> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeP> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeQ> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentP> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentQ> = $r2;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger crtCoefficient> = $r2;

        return;
    }
    void <init>(java.security.spec.RSAPrivateCrtKeySpec)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.security.spec.RSAPrivateCrtKeySpec $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: java.security.spec.RSAPrivateCrtKeySpec;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>()>();

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger modulus> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger publicExponent> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrivateExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger privateExponent> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeP> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeQ> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentP> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentQ> = $r2;

        $r2 = virtualinvoke $r1.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger crtCoefficient> = $r2;

        return;
    }
    void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        org.spongycastle.asn1.ASN1Encodable $r2;
        org.spongycastle.asn1.pkcs.RSAPrivateKey $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r3 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPrivateKey: org.spongycastle.asn1.pkcs.RSAPrivateKey getInstance(java.lang.Object)>($r2);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: void <init>(org.spongycastle.asn1.pkcs.RSAPrivateKey)>($r3);

        return;
    }
    void <init>(org.spongycastle.asn1.pkcs.RSAPrivateKey)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        org.spongycastle.asn1.pkcs.RSAPrivateKey $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.RSAPrivateKey;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger modulus> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger publicExponent> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger privateExponent> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getPrime1()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeP> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getPrime2()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeQ> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getExponent1()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentP> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getExponent2()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentQ> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.RSAPrivateKey: java.math.BigInteger getCoefficient()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger crtCoefficient> = $r2;

        return;
    }
    void <init>(org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey: void <init>(org.spongycastle.crypto.params.RSAKeyParameters)>($r1);

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getPublicExponent()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger publicExponent> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeP> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeQ> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentP> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentQ> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQInv()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger crtCoefficient> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.lang.Object $r1;
        boolean $z0;
        java.security.interfaces.RSAPrivateCrtKey r2;
        java.math.BigInteger $r3, $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.security.interfaces.RSAPrivateCrtKey) $r1;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $r4 = interfaceinvoke r2.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.math.BigInteger getCrtCoefficient()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        return r1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        org.spongycastle.asn1.DERNull $r3;
        org.spongycastle.asn1.pkcs.RSAPrivateKey $r4;
        java.math.BigInteger $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        byte[] $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption>;

        $r3 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r2, $r3);

        $r4 = new org.spongycastle.asn1.pkcs.RSAPrivateKey;

        $r5 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r7 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r8 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r10 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r11 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r12 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r4.<org.spongycastle.asn1.pkcs.RSAPrivateKey: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12);

        $r13 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil: byte[] getEncodedPrivateKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r1, $r4);

        return $r13;
    }
    public java.lang.String getFormat()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        return "PKCS#8";
    }
    public java.math.BigInteger getPrimeExponentP()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        return r1;
    }
    public java.math.BigInteger getPrimeExponentQ()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        return r1;
    }
    public java.math.BigInteger getPrimeP()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeP>;

        return r1;
    }
    public java.math.BigInteger getPrimeQ()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        return r1;
    }
    public java.math.BigInteger getPublicExponent()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i0 = $i0 ^ $i1;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2, $r5;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String lineSeparator()>();

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RSA Private CRT Key");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("            modulus: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    public exponent: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   private exponent: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("             primeP: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("             primeQ: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     primeExponentP: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     primeExponentQ: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     crtCoefficient: ");

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
