org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey extends java.lang.Object implements java.security.interfaces.ECPublicKey org.spongycastle.jce.interfaces.ECPointEncoder org.spongycastle.jce.interfaces.ECPublicKey
static final long serialVersionUID
private java.lang.String algorithm
private transient org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration
private transient java.security.spec.ECParameterSpec ecSpec
private transient org.spongycastle.math.ec.ECPoint q
private boolean withCompression
    public void <init>(java.lang.String, java.security.spec.ECPublicKeySpec, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        java.security.spec.ECPublicKeySpec $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;
        java.security.spec.ECParameterSpec $r4;
        java.security.spec.ECPoint $r5;
        org.spongycastle.math.ec.ECPoint $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.spec.ECPublicKeySpec;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        $r4 = virtualinvoke $r2.<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r4;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r5 = virtualinvoke $r2.<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean)>($r4, $r5, 0);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r6;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r3;

        return;
    }
    void <init>(java.lang.String, org.spongycastle.asn1.x509.SubjectPublicKeyInfo, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r3;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r2);

        return;
    }
    public void <init>(java.lang.String, org.spongycastle.crypto.params.ECPublicKeyParameters, java.security.spec.ECParameterSpec, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r2;
        java.security.spec.ECParameterSpec $r3;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        org.spongycastle.math.ec.ECPoint $r6;
        org.spongycastle.math.ec.ECCurve $r7;
        byte[] $r8;
        java.security.spec.EllipticCurve $r9;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r3 := @parameter2: java.security.spec.ECParameterSpec;

        $r4 := @parameter3: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        $r6 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r6;

        if $r3 != null goto label2;

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: byte[] getSeed()>();

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[])>($r7, $r8);

        $r3 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>($r9, $r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r3;

     label1:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r4;

        return;

     label2:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r3;

        goto label1;
    }
    public void <init>(java.lang.String, org.spongycastle.crypto.params.ECPublicKeyParameters, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;
        org.spongycastle.math.ec.ECPoint $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r3;

        return;
    }
    public void <init>(java.lang.String, org.spongycastle.crypto.params.ECPublicKeyParameters, org.spongycastle.jce.spec.ECParameterSpec, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r2;
        org.spongycastle.jce.spec.ECParameterSpec $r3;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        org.spongycastle.math.ec.ECCurve $r6;
        byte[] $r7;
        java.security.spec.EllipticCurve $r8;
        java.security.spec.ECParameterSpec $r9;
        org.spongycastle.math.ec.ECPoint $r10;
        org.spongycastle.math.ec.ECFieldElement $r11;
        java.math.BigInteger $r12, $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r3 := @parameter2: org.spongycastle.jce.spec.ECParameterSpec;

        $r4 := @parameter3: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        if $r3 != null goto label2;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: byte[] getSeed()>();

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[])>($r6, $r7);

        $r9 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters)>($r8, $r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r9;

     label1:
        $r9 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r8 = virtualinvoke $r9.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r8);

        $r10 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r12 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r10 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r13 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r10 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r12, $r13);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r10;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r4;

        return;

     label2:
        $r6 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[])>($r6, $r7);

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec)>($r8, $r3);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r9;

        goto label1;
    }
    public void <init>(java.lang.String, org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0, $r2;
        java.lang.String $r1;
        org.spongycastle.math.ec.ECPoint $r3;
        java.security.spec.ECParameterSpec $r4;
        boolean $z0;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        $r3 = $r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r3;

        $r4 = $r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r4;

        $z0 = $r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression> = $z0;

        $r5 = $r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r5;

        return;
    }
    public void <init>(java.lang.String, org.spongycastle.jce.spec.ECPublicKeySpec, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1;
        org.spongycastle.jce.spec.ECPublicKeySpec $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;
        org.spongycastle.math.ec.ECPoint $r4;
        org.spongycastle.jce.spec.ECParameterSpec $r5;
        org.spongycastle.math.ec.ECCurve $r6;
        byte[] $r7;
        java.security.spec.EllipticCurve $r8;
        org.spongycastle.math.ec.ECFieldElement $r9;
        java.math.BigInteger $r10, $r11;
        java.security.spec.ECParameterSpec $r12;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.jce.spec.ECPublicKeySpec;

        $r3 := @parameter2: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r1;

        $r4 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.math.ec.ECPoint getQ()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r4;

        $r5 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.jce.spec.ECParameterSpec getParams()>();

        if $r5 == null goto label2;

        $r5 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.jce.spec.ECParameterSpec getParams()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r5 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.jce.spec.ECParameterSpec getParams()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.jce.spec.ECParameterSpec: byte[] getSeed()>();

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[])>($r6, $r7);

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r8);

        $r4 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.math.ec.ECPoint getQ()>();

        $r9 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r10 = virtualinvoke $r9.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.math.ec.ECPoint getQ()>();

        $r9 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r11 = virtualinvoke $r9.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r10, $r11);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r4;

        $r5 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECPublicKeySpec: org.spongycastle.jce.spec.ECParameterSpec getParams()>();

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec)>($r8, $r5);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r12;

     label1:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r3;

        return;

     label2:
        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r6 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        if $r6 != null goto label3;

        $r5 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r9 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r10 = virtualinvoke $r9.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r9 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $r11 = virtualinvoke $r9.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r4 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r10, $r11, 0);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r4;

     label3:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = null;

        goto label1;
    }
    public void <init>(java.security.interfaces.ECPublicKey, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.security.interfaces.ECPublicKey $r1;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r2;
        java.lang.String $r3;
        java.security.spec.ECParameterSpec $r4;
        java.security.spec.ECPoint $r5;
        org.spongycastle.math.ec.ECPoint $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.security.interfaces.ECPublicKey;

        $r2 := @parameter1: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = "EC";

        $r3 = interfaceinvoke $r1.<java.security.interfaces.ECPublicKey: java.lang.String getAlgorithm()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm> = $r3;

        $r4 = interfaceinvoke $r1.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r4;

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r5 = interfaceinvoke $r1.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean)>($r4, $r5, 0);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r6;

        return;
    }
    private java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve, org.spongycastle.crypto.params.ECDomainParameters)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.security.spec.EllipticCurve $r1;
        org.spongycastle.crypto.params.ECDomainParameters $r2;
        java.security.spec.ECParameterSpec $r3;
        java.security.spec.ECPoint $r4;
        org.spongycastle.math.ec.ECPoint $r5;
        org.spongycastle.math.ec.ECFieldElement $r6;
        java.math.BigInteger $r7, $r8;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.security.spec.EllipticCurve;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        $r3 = new java.security.spec.ECParameterSpec;

        $r4 = new java.security.spec.ECPoint;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r8 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        specialinvoke $r4.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        $r7 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r8 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        specialinvoke $r3.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r1, $r4, $r7, $i0);

        return $r3;
    }
    private void extractBytes(byte[], int, java.math.BigInteger)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        byte[] $r1, r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r2;
        byte $b4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.math.BigInteger;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        r3 = $r4;

        $i1 = lengthof $r4;

        if $i1 >= 32 goto label1;

        r3 = newarray (byte)[32];

        $i1 = lengthof r3;

        $i2 = lengthof $r4;

        $i1 = $i1 - $i2;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, $i1, $i2);

     label1:
        $i1 = 0;

     label2:
        if $i1 == 32 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof r3;

        $i3 = $i3 + -1;

        $i3 = $i3 - $i1;

        $b4 = r3[$i3];

        $r1[$i2] = $b4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }
    private void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r7;
        org.spongycastle.math.ec.ECCurve $r8;
        java.security.spec.ECParameterSpec $r9;
        org.spongycastle.asn1.DERBitString $r10;
        byte[] $r11;
        java.lang.Object r12;
        byte $b0;
        int $i1, $i2;
        org.spongycastle.math.ec.ECPoint $r13;
        org.spongycastle.asn1.x9.X962Parameters $r14;
        org.spongycastle.asn1.DEROctetString $r15;
        org.spongycastle.asn1.x9.X9IntegerConverter $r16;
        org.spongycastle.asn1.x9.X9ECPoint $r17;
        java.lang.IllegalArgumentException $r18;
        org.spongycastle.asn1.ASN1OctetString $r19;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r14 = new org.spongycastle.asn1.x9.X962Parameters;

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r6 = (org.spongycastle.asn1.ASN1Primitive) $r5;

        specialinvoke $r14.<org.spongycastle.asn1.x9.X962Parameters: void <init>(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        $r8 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve getCurve(org.spongycastle.jcajce.provider.config.ProviderConfiguration,org.spongycastle.asn1.x9.X962Parameters)>($r7, $r14);

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: java.security.spec.ECParameterSpec convertToSpec(org.spongycastle.asn1.x9.X962Parameters,org.spongycastle.math.ec.ECCurve)>($r14, $r8);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec> = $r9;

        $r10 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.DERBitString getPublicKeyData()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $r15 = new org.spongycastle.asn1.DEROctetString;

        r12 = $r15;

        specialinvoke $r15.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r11);

        $b0 = $r11[0];

        if $b0 != 4 goto label4;

        $b0 = $r11[1];

        $i1 = lengthof $r11;

        $i1 = $i1 + -2;

        if $b0 != $i1 goto label4;

        $b0 = $r11[2];

        if $b0 == 2 goto label1;

        $b0 = $r11[2];

        if $b0 != 3 goto label4;

     label1:
        $r16 = new org.spongycastle.asn1.x9.X9IntegerConverter;

        specialinvoke $r16.<org.spongycastle.asn1.x9.X9IntegerConverter: void <init>()>();

        $i1 = virtualinvoke $r16.<org.spongycastle.asn1.x9.X9IntegerConverter: int getByteLength(org.spongycastle.math.ec.ECCurve)>($r8);

        $i2 = lengthof $r11;

        $i2 = $i2 + -3;

        if $i1 < $i2 goto label4;

     label2:
        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r11);

     label3:
        r12 = (org.spongycastle.asn1.ASN1OctetString) $r6;

     label4:
        $r17 = new org.spongycastle.asn1.x9.X9ECPoint;

        $r19 = (org.spongycastle.asn1.ASN1OctetString) r12;

        specialinvoke $r17.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.asn1.ASN1OctetString)>($r8, $r19);

        $r13 = virtualinvoke $r17.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint getPoint()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q> = $r13;

        return;

     label5:
        r2 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("error recovering public key");

        throw $r18;

        catch java.io.IOException from label2 to label3 with label5;
    }
    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.io.ObjectInputStream $r1;
        java.lang.Object $r2;
        byte[] $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (byte[]) $r2;

        $r4 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r3);

        $r5 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r4);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r5);

        $r6 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r6;

        return;
    }
    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.io.ObjectOutputStream $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: byte[] getEncoded()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }
    public org.spongycastle.math.ec.ECPoint engineGetQ()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        org.spongycastle.math.ec.ECPoint r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        return r1;
    }
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        boolean $z0;
        java.security.spec.ECParameterSpec $r1;
        org.spongycastle.jce.spec.ECParameterSpec $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean)>($r1, $z0);

        return $r2;

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        $r2 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r3, $r4;
        org.spongycastle.jce.spec.ECParameterSpec $r5, $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey) $r1;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint engineGetQ()>();

        $r4 = virtualinvoke r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint engineGetQ()>();

        $z0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: boolean equals(org.spongycastle.math.ec.ECPoint)>($r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jce.spec.ECParameterSpec engineGetSpec()>();

        $r6 = virtualinvoke r2.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jce.spec.ECParameterSpec engineGetSpec()>();

        $z0 = virtualinvoke $r5.<org.spongycastle.jce.spec.ECParameterSpec: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public java.lang.String getAlgorithm()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.lang.String algorithm>;

        return r1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        org.spongycastle.asn1.x9.X9ECParameters r1;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo r2;
        java.security.spec.ECParameterSpec $r3;
        boolean $z0;
        org.spongycastle.jce.spec.ECNamedCurveSpec $r4;
        java.lang.String $r5;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r6, r7;
        org.spongycastle.asn1.x9.X962Parameters r8;
        org.spongycastle.math.ec.ECPoint $r9;
        org.spongycastle.math.ec.ECCurve $r10;
        org.spongycastle.asn1.x9.X9ECPoint $r11;
        org.spongycastle.math.ec.ECFieldElement $r12;
        java.math.BigInteger $r13, $r14;
        org.spongycastle.asn1.ASN1Primitive $r15;
        org.spongycastle.asn1.ASN1OctetString r16;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r17;
        byte[] $r18;
        org.spongycastle.asn1.DERNull $r19;
        java.security.spec.EllipticCurve $r20;
        java.security.spec.ECPoint $r21;
        int $i0;
        long $l1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $z0 = $r3 instanceof org.spongycastle.jce.spec.ECNamedCurveSpec;

        if $z0 == 0 goto label4;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r4 = (org.spongycastle.jce.spec.ECNamedCurveSpec) $r3;

        $r5 = virtualinvoke $r4.<org.spongycastle.jce.spec.ECNamedCurveSpec: java.lang.String getName()>();

        $r6 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.ECUtil: org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(java.lang.String)>($r5);

        r7 = $r6;

        if $r6 != null goto label1;

        r7 = new org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r4 = (org.spongycastle.jce.spec.ECNamedCurveSpec) $r3;

        $r5 = virtualinvoke $r4.<org.spongycastle.jce.spec.ECNamedCurveSpec: java.lang.String getName()>();

        specialinvoke r7.<org.spongycastle.asn1.ASN1ObjectIdentifier: void <init>(java.lang.String)>($r5);

     label1:
        r8 = new org.spongycastle.asn1.x9.X962Parameters;

        specialinvoke r8.<org.spongycastle.asn1.x9.X962Parameters: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier)>(r7);

     label2:
        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint engineGetQ()>();

        $r10 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        if $r3 != null goto label6;

        $r11 = new org.spongycastle.asn1.x9.X9ECPoint;

        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint getQ()>();

        $r12 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getXCoord()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint getQ()>();

        $r12 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getYCoord()>();

        $r14 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        $r9 = virtualinvoke $r10.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r13, $r14, $z0);

        specialinvoke $r11.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECPoint)>($r9);

        $r15 = virtualinvoke $r11.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r16 = (org.spongycastle.asn1.ASN1OctetString) $r15;

     label3:
        r2 = new org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r17 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r6 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey>;

        specialinvoke $r17.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r6, r8);

        $r18 = virtualinvoke r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        specialinvoke r2.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r17, $r18);

        $r18 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil: byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>(r2);

        return $r18;

     label4:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        if $r3 != null goto label5;

        r8 = new org.spongycastle.asn1.x9.X962Parameters;

        $r19 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke r8.<org.spongycastle.asn1.x9.X962Parameters: void <init>(org.spongycastle.asn1.ASN1Null)>($r19);

        goto label2;

     label5:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r20 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r10 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r20);

        r1 = new org.spongycastle.asn1.x9.X9ECParameters;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r21 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        $r9 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean)>($r10, $r21, $z0);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r13 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $i0 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $l1 = (long) $i0;

        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $r20 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r18 = virtualinvoke $r20.<java.security.spec.EllipticCurve: byte[] getSeed()>();

        specialinvoke r1.<org.spongycastle.asn1.x9.X9ECParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r10, $r9, $r13, $r14, $r18);

        r8 = new org.spongycastle.asn1.x9.X962Parameters;

        specialinvoke r8.<org.spongycastle.asn1.x9.X962Parameters: void <init>(org.spongycastle.asn1.x9.X9ECParameters)>(r1);

        goto label2;

     label6:
        $r11 = new org.spongycastle.asn1.x9.X9ECPoint;

        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint getQ()>();

        $r12 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r9 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint getQ()>();

        $r12 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r14 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        $r9 = virtualinvoke $r10.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean)>($r13, $r14, $z0);

        specialinvoke $r11.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECPoint)>($r9);

        $r15 = virtualinvoke $r11.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r16 = (org.spongycastle.asn1.ASN1OctetString) $r15;

        goto label3;
    }
    public java.lang.String getFormat()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        return "X.509";
    }
    public org.spongycastle.jce.spec.ECParameterSpec getParameters()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        boolean $z0;
        org.spongycastle.jce.spec.ECParameterSpec $r1;
        java.security.spec.ECParameterSpec $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression>;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean)>($r2, $z0);

        return $r1;
    }
    public java.security.spec.ECParameterSpec getParams()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.security.spec.ECParameterSpec r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        return r1;
    }
    public org.spongycastle.math.ec.ECPoint getQ()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.security.spec.ECParameterSpec $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: java.security.spec.ECParameterSpec ecSpec>;

        if $r2 != null goto label1;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint getDetachedPoint()>();

        return $r1;

     label1:
        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        return $r1;
    }
    public java.security.spec.ECPoint getW()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.security.spec.ECPoint $r1;
        org.spongycastle.math.ec.ECPoint $r2;
        org.spongycastle.math.ec.ECFieldElement $r3;
        java.math.BigInteger $r4, $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 = new java.security.spec.ECPoint;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r3 = virtualinvoke $r2.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r5 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        specialinvoke $r1.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        org.spongycastle.math.ec.ECPoint $r1;
        int $i0, $i1;
        org.spongycastle.jce.spec.ECParameterSpec $r2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint engineGetQ()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: int hashCode()>();

        $r2 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.jce.spec.ECParameterSpec engineGetSpec()>();

        $i1 = virtualinvoke $r2.<org.spongycastle.jce.spec.ECParameterSpec: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public void setPointFormat(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 = "UNCOMPRESSED";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: boolean withCompression> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public java.lang.String toString()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2, $r7;
        org.spongycastle.math.ec.ECPoint $r4;
        org.spongycastle.math.ec.ECFieldElement $r5;
        java.math.BigInteger $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String lineSeparator()>();

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EC Public Key");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("            X: ");

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("            Y: ");

        $r4 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: org.spongycastle.math.ec.ECPoint q>;

        $r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
