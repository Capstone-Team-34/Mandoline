org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1 extends java.lang.Object implements org.spongycastle.crypto.KeyEncoder
final org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher this$0
    void <init>(org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher)
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1 r0;
        org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1;

        $r1 := @parameter0: org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1: org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public byte[] getEncoded(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1 r0;
        byte[] r1, $r7;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.spongycastle.crypto.params.DHKeyParameters $r3;
        org.spongycastle.crypto.params.DHParameters $r4;
        java.math.BigInteger $r5;
        int $i0, $i1;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.IESCipher$1;

        $r2 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 = (org.spongycastle.crypto.params.DHKeyParameters) $r2;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.DHKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        r1 = newarray (byte)[$i0];

        $r6 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r2;

        $r5 = virtualinvoke $r6.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        $r7 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r5);

        $i0 = lengthof $r7;

        $i1 = lengthof r1;

        if $i0 <= $i1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Senders\'s public key longer than expected.");

        throw $r8;

     label1:
        $i0 = lengthof r1;

        $i1 = lengthof $r7;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, $i0, $i1);

        return r1;
    }
