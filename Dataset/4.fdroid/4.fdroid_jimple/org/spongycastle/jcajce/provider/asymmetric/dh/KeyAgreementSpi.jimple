org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi
private java.math.BigInteger g
private java.math.BigInteger p
private java.math.BigInteger result
private java.math.BigInteger x
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi: void <init>()>();

        return;
    }
    private byte[] bigIntToBytes(java.math.BigInteger)
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        java.math.BigInteger $r1, $r2;
        int i0, $i1, $i3;
        byte[] $r3, r4;
        byte $b2;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p>;

        i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        $r3 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $i1 = lengthof $r3;

        if $i1 != i0 goto label1;

        return $r3;

     label1:
        $b2 = $r3[0];

        if $b2 != 0 goto label2;

        $i1 = lengthof $r3;

        $i3 = i0 + 1;

        if $i1 != $i3 goto label2;

        i0 = lengthof $r3;

        i0 = i0 + -1;

        r4 = newarray (byte)[i0];

        i0 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 1, r4, 0, i0);

        return r4;

     label2:
        r4 = newarray (byte)[i0];

        i0 = lengthof r4;

        $i1 = lengthof $r3;

        i0 = i0 - $i1;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, i0, $i1);

        return r4;
    }
    protected java.security.Key engineDoPhase(java.security.Key, boolean) throws java.security.InvalidKeyException, java.lang.IllegalStateException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        boolean $z0, $z1;
        java.security.Key r1;
        java.math.BigInteger $r2, $r7, $r8;
        java.lang.IllegalStateException $r3;
        java.security.InvalidKeyException $r4;
        javax.crypto.interfaces.DHPublicKey r5, r9;
        javax.crypto.spec.DHParameterSpec $r6;
        org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        r1 := @parameter0: java.security.Key;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Diffie-Hellman not initialised.");

        throw $r3;

     label1:
        $z1 = r1 instanceof javax.crypto.interfaces.DHPublicKey;

        if $z1 != 0 goto label2;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("DHKeyAgreement doPhase requires DHPublicKey");

        throw $r4;

     label2:
        r5 = (javax.crypto.interfaces.DHPublicKey) r1;

        $r6 = interfaceinvoke r5.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r2 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger g>;

        $z1 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r5.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r2 = virtualinvoke $r6.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p>;

        $z1 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

     label3:
        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("DHPublicKey not for this KeyAgreement!");

        throw $r4;

     label4:
        if $z0 == 0 goto label5;

        r5 = (javax.crypto.interfaces.DHPublicKey) r1;

        $r2 = interfaceinvoke r5.<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>();

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result> = $r2;

        return null;

     label5:
        r9 = (javax.crypto.interfaces.DHPublicKey) r1;

        $r2 = interfaceinvoke r9.<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>();

        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result> = $r2;

        $r10 = new org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result>;

        $r6 = interfaceinvoke r5.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        specialinvoke $r10.<org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey: void <init>(java.math.BigInteger,javax.crypto.spec.DHParameterSpec)>($r2, $r6);

        return $r10;
    }
    protected int engineGenerateSecret(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.math.BigInteger $r3;
        java.lang.IllegalStateException $r4;
        javax.crypto.ShortBufferException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Diffie-Hellman not initialised.");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result>;

        $r2 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: byte[] bigIntToBytes(java.math.BigInteger)>($r3);

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label2;

        $r5 = new javax.crypto.ShortBufferException;

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("DHKeyAgreement - buffer too short");

        throw $r5;

     label2:
        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, $i1);

        $i0 = lengthof $r2;

        return $i0;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.lang.String)
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        java.lang.String $r1, $r5;
        byte[] r2, $r6;
        java.math.BigInteger $r3;
        java.lang.IllegalStateException $r4;
        int $i0;
        boolean $z0;
        javax.crypto.spec.SecretKeySpec $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Diffie-Hellman not initialised.");

        throw $r4;

     label1:
        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.lang.String getAlgorithm(java.lang.String)>($r1);

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result>;

        $r6 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: byte[] bigIntToBytes(java.math.BigInteger)>($r3);

        $i0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: int getKeySize(java.lang.String)>($r1);

        if $i0 <= 0 goto label3;

        $i0 = $i0 / 8;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i0);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("DES");

        if $z0 == 0 goto label2;

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>(r2);

     label2:
        $r7 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r5);

        return $r7;

     label3:
        $r7 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, $r5);

        return $r7;
    }
    protected byte[] engineGenerateSecret() throws java.lang.IllegalStateException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        byte[] $r1;
        java.math.BigInteger $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Diffie-Hellman not initialised.");

        throw $r3;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result>;

        $r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: byte[] bigIntToBytes(java.math.BigInteger)>($r2);

        return $r1;
    }
    protected void engineInit(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        boolean $z0;
        java.security.InvalidKeyException $r3;
        javax.crypto.interfaces.DHPrivateKey r4;
        javax.crypto.spec.DHParameterSpec $r5;
        java.math.BigInteger $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 = $r1 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z0 != 0 goto label1;

        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("DHKeyAgreement requires DHPrivateKey");

        throw $r3;

     label1:
        r4 = (javax.crypto.interfaces.DHPrivateKey) $r1;

        $r5 = interfaceinvoke r4.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r6 = virtualinvoke $r5.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p> = $r6;

        $r5 = interfaceinvoke r4.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r6 = virtualinvoke $r5.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger g> = $r6;

        $r6 = interfaceinvoke r4.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result> = $r6;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x> = $r6;

        return;
    }
    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;
        boolean $z0;
        java.security.InvalidKeyException $r4;
        javax.crypto.interfaces.DHPrivateKey r5;
        java.security.InvalidAlgorithmParameterException $r6;
        javax.crypto.spec.DHParameterSpec r7;
        java.math.BigInteger $r8;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter2: java.security.SecureRandom;

        $z0 = $r1 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("DHKeyAgreement requires DHPrivateKey for initialisation");

        throw $r4;

     label1:
        r5 = (javax.crypto.interfaces.DHPrivateKey) $r1;

        if $r2 == null goto label4;

        $z0 = $r2 instanceof javax.crypto.spec.DHParameterSpec;

        if $z0 != 0 goto label2;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("DHKeyAgreement only accepts DHParameterSpec");

        throw $r6;

     label2:
        r7 = (javax.crypto.spec.DHParameterSpec) $r2;

        $r8 = virtualinvoke r7.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p> = $r8;

        $r8 = virtualinvoke r7.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger g> = $r8;

     label3:
        $r8 = interfaceinvoke r5.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger result> = $r8;

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger x> = $r8;

        return;

     label4:
        r7 = interfaceinvoke r5.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r8 = virtualinvoke r7.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger p> = $r8;

        r7 = interfaceinvoke r5.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r8 = virtualinvoke r7.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi: java.math.BigInteger g> = $r8;

        goto label3;
    }
