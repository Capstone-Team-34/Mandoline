org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi extends org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: void <init>()>();

        return;
    }
    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        java.security.PrivateKey $r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey $r3;
        java.security.spec.DSAPrivateKeySpec r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof java.security.spec.DSAPrivateKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey;

        r4 = (java.security.spec.DSAPrivateKeySpec) r2;

        specialinvoke $r3.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(java.security.spec.DSAPrivateKeySpec)>(r4);

        return $r3;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>(r2);

        return $r1;
    }
    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        java.security.PublicKey $r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey $r3;
        java.security.spec.DSAPublicKeySpec r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof java.security.spec.DSAPublicKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey;

        r4 = (java.security.spec.DSAPublicKeySpec) r2;

        specialinvoke $r3.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(java.security.spec.DSAPublicKeySpec)>(r4);

        return $r3;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>(r2);

        return $r1;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2;
        boolean $z0;
        java.security.interfaces.DSAPublicKey r3;
        java.security.spec.DSAPublicKeySpec $r4;
        java.math.BigInteger $r5, $r7, $r8, $r9;
        java.security.interfaces.DSAParams $r6;
        java.security.interfaces.DSAPrivateKey r10;
        java.security.spec.DSAPrivateKeySpec $r11;
        java.security.spec.KeySpec $r12;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/DSAPublicKeySpec;");

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 == 0 goto label1;

        r3 = (java.security.interfaces.DSAPublicKey) $r1;

        $r4 = new java.security.spec.DSAPublicKeySpec;

        $r5 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r7 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r8 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r9 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r4.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r7, $r8, $r9);

        return $r4;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/security/spec/DSAPrivateKeySpec;");

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label2;

        r10 = (java.security.interfaces.DSAPrivateKey) $r1;

        $r11 = new java.security.spec.DSAPrivateKeySpec;

        $r5 = interfaceinvoke r10.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r6 = interfaceinvoke r10.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r7 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r6 = interfaceinvoke r10.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r8 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r6 = interfaceinvoke r10.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r9 = interfaceinvoke $r6.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r11.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r7, $r8, $r9);

        return $r11;

     label2:
        $r12 = specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class)>($r1, $r2);

        return $r12;
    }
    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        java.security.Key r1;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey $r2;
        java.security.interfaces.DSAPublicKey r3;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey $r4;
        java.security.interfaces.DSAPrivateKey r5;
        java.security.InvalidKeyException $r6;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        r1 := @parameter0: java.security.Key;

        $z0 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey;

        r3 = (java.security.interfaces.DSAPublicKey) r1;

        specialinvoke $r2.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(java.security.interfaces.DSAPublicKey)>(r3);

        return $r2;

     label1:
        $z0 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label2;

        $r4 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey;

        r5 = (java.security.interfaces.DSAPrivateKey) r1;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(java.security.interfaces.DSAPrivateKey)>(r5);

        return $r4;

     label2:
        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key type unknown");

        throw $r6;
    }
    public java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: boolean isDsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey: void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r1);

        return $r4;

     label1:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm identifier ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in key not recognised");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }
    public java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        boolean $z0;
        org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: boolean isDsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey: void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r1);

        return $r4;

     label1:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm identifier ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in key not recognised");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }
