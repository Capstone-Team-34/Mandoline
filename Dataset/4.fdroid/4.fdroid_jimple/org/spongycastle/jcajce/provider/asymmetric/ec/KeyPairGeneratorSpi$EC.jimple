org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC extends org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi
private static java.util.Hashtable ecParameters
java.lang.String algorithm
int certainty
org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration
java.lang.Object ecParams
org.spongycastle.crypto.generators.ECKeyPairGenerator engine
boolean initialised
org.spongycastle.crypto.params.ECKeyGenerationParameters param
java.security.SecureRandom random
int strength
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        java.security.spec.ECGenParameterSpec $r2;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters> = $r0;

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime192v1");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(239);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime239v1");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime256v1");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(224);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("P-224");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(384);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("P-384");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r0 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(521);

        $r2 = new java.security.spec.ECGenParameterSpec;

        specialinvoke $r2.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("P-521");

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi: void <init>(java.lang.String)>("EC");

        $r1 = new org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.generators.ECKeyPairGenerator engine> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int strength> = 239;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int certainty> = 50;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.SecureRandom random> = $r2;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: boolean initialised> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm> = "EC";

        $r3 = <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION>;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r3;

        return;
    }
    public void <init>(java.lang.String, org.spongycastle.jcajce.provider.config.ProviderConfiguration)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        java.lang.String $r1;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r2;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r3;
        java.security.SecureRandom $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.jcajce.provider.config.ProviderConfiguration;

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi: void <init>(java.lang.String)>($r1);

        $r3 = new org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke $r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.generators.ECKeyPairGenerator engine> = $r3;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = null;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int strength> = 239;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int certainty> = 50;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.SecureRandom random> = $r4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: boolean initialised> = 0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm> = $r1;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration> = $r2;

        return;
    }
    protected org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsBC(org.spongycastle.jce.spec.ECParameterSpec, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        org.spongycastle.jce.spec.ECParameterSpec $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r3;
        org.spongycastle.crypto.params.ECDomainParameters $r4;
        org.spongycastle.math.ec.ECCurve $r5;
        org.spongycastle.math.ec.ECPoint $r6;
        java.math.BigInteger $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $r1 := @parameter0: org.spongycastle.jce.spec.ECParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $r3 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r4 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r5 = virtualinvoke $r1.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r6 = virtualinvoke $r1.<org.spongycastle.jce.spec.ECParameterSpec: org.spongycastle.math.ec.ECPoint getG()>();

        $r7 = virtualinvoke $r1.<org.spongycastle.jce.spec.ECParameterSpec: java.math.BigInteger getN()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r5, $r6, $r7);

        specialinvoke $r3.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r4, $r2);

        return $r3;
    }
    protected org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsJCE(java.security.spec.ECParameterSpec, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        java.security.spec.ECParameterSpec $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.ECDomainParameters r3;
        java.security.spec.EllipticCurve $r4;
        org.spongycastle.math.ec.ECCurve $r5;
        java.security.spec.ECPoint $r6;
        org.spongycastle.math.ec.ECPoint $r7;
        java.math.BigInteger $r8, $r9;
        int $i0;
        long $l1;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r10;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $r1 := @parameter0: java.security.spec.ECParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $r4 = virtualinvoke $r1.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r4);

        $r6 = virtualinvoke $r1.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.util.EC5Util: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean)>($r5, $r6, 0);

        $r8 = virtualinvoke $r1.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $i0 = virtualinvoke $r1.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $l1 = (long) $i0;

        $r9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        r3 = new org.spongycastle.crypto.params.ECDomainParameters;

        specialinvoke r3.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)>($r5, $r7, $r8, $r9);

        $r10 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        specialinvoke $r10.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>(r3, $r2);

        return $r10;
    }
    protected org.spongycastle.jce.spec.ECNamedCurveSpec createNamedCurveSpec(java.lang.String) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        java.lang.String $r1, $r8;
        java.lang.IllegalArgumentException r2;
        org.spongycastle.asn1.x9.X9ECParameters $r3, r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        java.security.InvalidAlgorithmParameterException $r6;
        java.lang.StringBuilder $r7;
        org.spongycastle.jce.spec.ECNamedCurveSpec $r9;
        org.spongycastle.math.ec.ECCurve $r10;
        org.spongycastle.math.ec.ECPoint $r11;
        java.math.BigInteger $r12, $r13;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <org.spongycastle.jcajce.provider.asymmetric.ec.ECUtils: org.spongycastle.asn1.x9.X9ECParameters getDomainParametersFromName(java.lang.String)>($r1);

        r4 = $r3;

        if $r3 != null goto label6;

        $r5 = new org.spongycastle.asn1.ASN1ObjectIdentifier;

     label1:
        specialinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r5);

     label2:
        r4 = $r3;

        if $r3 != null goto label6;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown curve OID: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r8);

     label4:
        throw $r6;

     label5:
        r2 := @caughtexception;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown curve name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label6:
        $r9 = new org.spongycastle.jce.spec.ECNamedCurveSpec;

        $r10 = virtualinvoke r4.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r11 = virtualinvoke r4.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r12 = virtualinvoke r4.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r13 = virtualinvoke r4.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getH()>();

        specialinvoke $r9.<org.spongycastle.jce.spec.ECNamedCurveSpec: void <init>(java.lang.String,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r1, $r10, $r11, $r12, $r13, null);

        return $r9;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r1;
        boolean $z0;
        int $i0;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.params.ECPublicKeyParameters r6;
        org.spongycastle.crypto.params.ECPrivateKeyParameters r7;
        java.lang.Object $r8;
        org.spongycastle.jce.spec.ECParameterSpec r9;
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey r10;
        java.lang.String $r11;
        java.security.KeyPair $r12;
        org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey $r13;
        java.security.spec.ECParameterSpec r14;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $z0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: boolean initialised>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int strength>;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void initialize(int,java.security.SecureRandom)>($i0, $r2);

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r6 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r5;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r7 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r5;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams>;

        $z0 = $r8 instanceof org.spongycastle.jce.spec.ECParameterSpec;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams>;

        r9 = (org.spongycastle.jce.spec.ECParameterSpec) $r8;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.jce.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r6, r9, $r1);

        $r12 = new java.security.KeyPair;

        $r13 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,org.spongycastle.jce.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r7, r10, r9, $r1);

        specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13);

        return $r12;

     label2:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams>;

        if $r8 != null goto label3;

        $r12 = new java.security.KeyPair;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r6, $r1);

        $r13 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r7, $r1);

        specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13);

        return $r12;

     label3:
        $r8 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams>;

        r14 = (java.security.spec.ECParameterSpec) $r8;

        r10 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke r10.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPublicKeyParameters,java.security.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r6, r14, $r1);

        $r12 = new java.security.KeyPair;

        $r13 = new org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;

        $r11 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.String algorithm>;

        $r1 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey: void <init>(java.lang.String,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey,java.security.spec.ECParameterSpec,org.spongycastle.jcajce.provider.config.ProviderConfiguration)>($r11, r7, r10, r14, $r1);

        specialinvoke $r12.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r10, $r13);

        return $r12;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        int $i0;
        java.security.SecureRandom $r1;
        java.security.InvalidAlgorithmParameterException r2;
        java.util.Hashtable $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        java.security.spec.ECGenParameterSpec r6;
        java.security.InvalidParameterException $r7;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: int strength> = $i0;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.security.SecureRandom random> = $r1;

        $r3 = <org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.util.Hashtable ecParameters>;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i0);

        $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.security.spec.ECGenParameterSpec) $r5;

        if r6 != null goto label1;

        $r7 = new java.security.InvalidParameterException;

        specialinvoke $r7.<java.security.InvalidParameterException: void <init>(java.lang.String)>("unknown key size.");

        throw $r7;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r6, $r1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r7 = new java.security.InvalidParameterException;

        specialinvoke $r7.<java.security.InvalidParameterException: void <init>(java.lang.String)>("key size not configurable.");

        throw $r7;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        java.security.SecureRandom $r1;
        java.security.spec.AlgorithmParameterSpec r2;
        org.spongycastle.jcajce.provider.config.ProviderConfiguration $r3;
        org.spongycastle.jce.spec.ECParameterSpec $r4;
        java.security.InvalidAlgorithmParameterException $r5;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r6;
        org.spongycastle.crypto.generators.ECKeyPairGenerator $r7;
        boolean $z0;
        java.security.spec.ECParameterSpec r8;
        java.security.spec.ECGenParameterSpec r9;
        java.lang.String $r10;
        org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec r11;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        r2 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r1 := @parameter1: java.security.SecureRandom;

        if r2 != null goto label3;

        $r3 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.config.ProviderConfiguration: org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa()>();

        if $r4 != null goto label1;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("null parameter passed but no implicitCA set");

        throw $r5;

     label1:
        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = null;

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsBC(org.spongycastle.jce.spec.ECParameterSpec,java.security.SecureRandom)>($r4, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r6;

     label2:
        $r7 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.generators.ECKeyPairGenerator engine>;

        $r6 = r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters param>;

        virtualinvoke $r7.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r6);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: boolean initialised> = 1;

        return;

     label3:
        $z0 = r2 instanceof org.spongycastle.jce.spec.ECParameterSpec;

        if $z0 == 0 goto label4;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = r2;

        $r4 = (org.spongycastle.jce.spec.ECParameterSpec) r2;

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsBC(org.spongycastle.jce.spec.ECParameterSpec,java.security.SecureRandom)>($r4, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r6;

        goto label2;

     label4:
        $z0 = r2 instanceof java.security.spec.ECParameterSpec;

        if $z0 == 0 goto label5;

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = r2;

        r8 = (java.security.spec.ECParameterSpec) r2;

        $r6 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsJCE(java.security.spec.ECParameterSpec,java.security.SecureRandom)>(r8, $r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r6;

        goto label2;

     label5:
        $z0 = r2 instanceof java.security.spec.ECGenParameterSpec;

        if $z0 == 0 goto label6;

        r9 = (java.security.spec.ECGenParameterSpec) r2;

        $r10 = virtualinvoke r9.<java.security.spec.ECGenParameterSpec: java.lang.String getName()>();

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void initializeNamedCurve(java.lang.String,java.security.SecureRandom)>($r10, $r1);

        goto label2;

     label6:
        $z0 = r2 instanceof org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec;

        if $z0 == 0 goto label7;

        r11 = (org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec) r2;

        $r10 = virtualinvoke r11.<org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec: java.lang.String getName()>();

        virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: void initializeNamedCurve(java.lang.String,java.security.SecureRandom)>($r10, $r1);

        goto label2;

     label7:
        $r5 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a ECParameterSpec");

        throw $r5;
    }
    protected void initializeNamedCurve(java.lang.String, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC r0;
        java.lang.String $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.jce.spec.ECNamedCurveSpec $r3;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r4;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.SecureRandom;

        $r3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.jce.spec.ECNamedCurveSpec createNamedCurveSpec(java.lang.String)>($r1);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: java.lang.Object ecParams> = $r3;

        $r4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsJCE(java.security.spec.ECParameterSpec,java.security.SecureRandom)>($r3, $r2);

        r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC: org.spongycastle.crypto.params.ECKeyGenerationParameters param> = $r4;

        return;
    }
