org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil extends java.lang.Object
public static final org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids
    static void <clinit>()
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;

        $r0 = newarray (org.spongycastle.asn1.ASN1ObjectIdentifier)[2];

        $r1 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        $r0[0] = $r1;

        $r1 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1>;

        $r0[1] = $r1;

        <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil r0;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey $r0;
        org.spongycastle.crypto.params.DSAParameters $r1;
        boolean $z0;
        java.security.interfaces.DSAPrivateKey r2;
        org.spongycastle.crypto.params.DSAPrivateKeyParameters $r3;
        java.math.BigInteger $r4, $r6, $r7, $r8;
        java.security.interfaces.DSAParams $r5;
        java.security.InvalidKeyException $r9;

        $r0 := @parameter0: java.security.PrivateKey;

        $z0 = $r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label1;

        r2 = (java.security.interfaces.DSAPrivateKey) $r0;

        $r3 = new org.spongycastle.crypto.params.DSAPrivateKeyParameters;

        $r4 = interfaceinvoke r2.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r1 = new org.spongycastle.crypto.params.DSAParameters;

        $r5 = interfaceinvoke r2.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r6 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r5 = interfaceinvoke r2.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r7 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r5 = interfaceinvoke r2.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r8 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r1.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8);

        specialinvoke $r3.<org.spongycastle.crypto.params.DSAPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DSAParameters)>($r4, $r1);

        return $r3;

     label1:
        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify DSA private key.");

        throw $r9;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.PublicKey $r0;
        boolean $z0;
        java.security.interfaces.DSAPublicKey r1;
        org.spongycastle.crypto.params.DSAPublicKeyParameters $r2;
        java.math.BigInteger $r3, $r6, $r7, $r8;
        org.spongycastle.crypto.params.DSAParameters $r4;
        java.security.interfaces.DSAParams $r5;
        java.security.InvalidKeyException $r9;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.lang.String $r12;

        $r0 := @parameter0: java.security.PublicKey;

        $z0 = $r0 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 == 0 goto label1;

        r1 = (java.security.interfaces.DSAPublicKey) $r0;

        $r2 = new org.spongycastle.crypto.params.DSAPublicKeyParameters;

        $r3 = interfaceinvoke r1.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r4 = new org.spongycastle.crypto.params.DSAParameters;

        $r5 = interfaceinvoke r1.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r6 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r5 = interfaceinvoke r1.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r7 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r5 = interfaceinvoke r1.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r8 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8);

        specialinvoke $r2.<org.spongycastle.crypto.params.DSAPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DSAParameters)>($r3, $r4);

        return $r2;

     label1:
        $r9 = new java.security.InvalidKeyException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t identify DSA public key: ");

        $r11 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r12);

        throw $r9;
    }
    public static boolean isDsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0, $r2;
        boolean $z0;
        int i0, $i1;
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r1;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        i0 = 0;

     label1:
        $r1 = <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids>;

        $i1 = lengthof $r1;

        if i0 == $i1 goto label3;

        $r1 = <org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil: org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids>;

        $r2 = $r1[i0];

        $z0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
