org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256CKDF extends org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi
    public void <init>()
    {
        org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256CKDF r0;
        org.spongycastle.crypto.agreement.ECDHCBasicAgreement $r1;
        org.spongycastle.crypto.agreement.kdf.ConcatenationKDFGenerator $r2;
        org.spongycastle.crypto.digests.SHA256Digest $r3;

        r0 := @this: org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256CKDF;

        $r1 = new org.spongycastle.crypto.agreement.ECDHCBasicAgreement;

        specialinvoke $r1.<org.spongycastle.crypto.agreement.ECDHCBasicAgreement: void <init>()>();

        $r2 = new org.spongycastle.crypto.agreement.kdf.ConcatenationKDFGenerator;

        $r3 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r2.<org.spongycastle.crypto.agreement.kdf.ConcatenationKDFGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        specialinvoke r0.<org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi: void <init>(java.lang.String,org.spongycastle.crypto.BasicAgreement,org.spongycastle.crypto.DerivationFunction)>("ECDHwithSHA256CKDF", $r1, $r2);

        return;
    }
