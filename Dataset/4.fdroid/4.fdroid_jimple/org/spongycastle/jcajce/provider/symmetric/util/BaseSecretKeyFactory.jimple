org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory extends javax.crypto.SecretKeyFactorySpi implements org.spongycastle.jcajce.provider.symmetric.util.PBE
protected java.lang.String algName
protected org.spongycastle.asn1.ASN1ObjectIdentifier algOid
    protected void <init>(java.lang.String, org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory r0;
        java.lang.String $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.asn1.ASN1ObjectIdentifier;

        specialinvoke r0.<javax.crypto.SecretKeyFactorySpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: java.lang.String algName> = $r1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: org.spongycastle.asn1.ASN1ObjectIdentifier algOid> = $r2;

        return;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0;
        javax.crypto.SecretKey r2;
        java.security.spec.InvalidKeySpecException $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = r1 instanceof javax.crypto.spec.SecretKeySpec;

        if $z0 == 0 goto label1;

        r2 = (javax.crypto.SecretKey) r1;

        return r2;

     label1:
        $r3 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r3.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r3;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory r0;
        javax.crypto.SecretKey $r1;
        java.lang.Class $r2, $r8;
        java.lang.Exception r3;
        java.lang.Object[] r4;
        java.lang.Class[] r5;
        java.lang.String $r6;
        java.security.spec.InvalidKeySpecException $r7;
        boolean $z0;
        javax.crypto.spec.SecretKeySpec $r9;
        byte[] $r10;
        java.lang.reflect.Constructor $r11;
        java.lang.Object $r12;
        java.security.spec.KeySpec $r13;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory;

        $r1 := @parameter0: javax.crypto.SecretKey;

        $r2 := @parameter1: java.lang.Class;

        if $r2 != null goto label1;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec parameter is null");

        throw $r7;

     label1:
        if $r1 != null goto label2;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key parameter is null");

        throw $r7;

     label2:
        $r8 = class "Ljavax/crypto/spec/SecretKeySpec;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        $r9 = new javax.crypto.spec.SecretKeySpec;

        $r10 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: java.lang.String algName>;

        specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r10, $r6);

        return $r9;

     label3:
        r5 = newarray (java.lang.Class)[1];

        r5[0] = class "[B";

        $r11 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r5);

        r4 = newarray (java.lang.Object)[1];

        $r10 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        r4[0] = $r10;

        $r12 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r4);

        $r13 = (java.security.spec.KeySpec) $r12;

     label4:
        return $r13;

     label5:
        r3 := @caughtexception;

        $r7 = new java.security.spec.InvalidKeySpecException;

        $r6 = virtualinvoke r3.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r6);

        throw $r7;

        catch java.lang.Exception from label3 to label4 with label5;
    }
    protected javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory r0;
        javax.crypto.SecretKey $r1;
        java.security.InvalidKeyException $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        javax.crypto.spec.SecretKeySpec $r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory;

        $r1 := @parameter0: javax.crypto.SecretKey;

        if $r1 != null goto label1;

        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key parameter is null");

        throw $r2;

     label1:
        $r3 = interfaceinvoke $r1.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: java.lang.String algName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        $r2 = new java.security.InvalidKeyException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key not of type ");

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: java.lang.String algName>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r6 = new javax.crypto.spec.SecretKeySpec;

        $r7 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: java.lang.String algName>;

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, $r3);

        return $r6;
    }
