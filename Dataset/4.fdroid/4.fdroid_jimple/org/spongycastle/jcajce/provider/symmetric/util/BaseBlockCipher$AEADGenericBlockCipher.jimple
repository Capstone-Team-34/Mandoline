org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher extends java.lang.Object implements org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher
private static final java.lang.reflect.Constructor aeadBadTagConstructor
private org.spongycastle.crypto.modes.AEADBlockCipher cipher
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.reflect.Constructor $r1;

        $r0 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class access$000(java.lang.String)>("javax.crypto.AEADBadTagException");

        if $r0 == null goto label1;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: java.lang.reflect.Constructor findExceptionConstructor(java.lang.Class)>($r0);

        <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: java.lang.reflect.Constructor aeadBadTagConstructor> = $r1;

        return;

     label1:
        <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: java.lang.reflect.Constructor aeadBadTagConstructor> = null;

        return;
    }
    void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.modes.AEADBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher> = $r1;

        return;
    }
    private static java.lang.reflect.Constructor findExceptionConstructor(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.Exception r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Class[] $r3;

        $r0 := @parameter0: java.lang.Class;

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public int doFinal(byte[], int) throws java.lang.IllegalStateException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        org.spongycastle.crypto.modes.AEADBlockCipher $r3;
        java.lang.reflect.Constructor $r4;
        javax.crypto.BadPaddingException r5, $r9;
        java.lang.Object[] $r6;
        java.lang.String $r7;
        java.lang.Object $r8;
        java.lang.Exception $r10;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

     label1:
        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.modes.AEADBlockCipher: int doFinal(byte[],int)>($r1, $i0);

     label2:
        return $i0;

     label3:
        r2 := @caughtexception;

        $r4 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: java.lang.reflect.Constructor aeadBadTagConstructor>;

        if $r4 == null goto label7;

        r5 = null;

        $r4 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: java.lang.reflect.Constructor aeadBadTagConstructor>;

     label4:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        $r6[0] = $r7;

        $r8 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r9 = (javax.crypto.BadPaddingException) $r8;

     label5:
        r5 = $r9;

     label6:
        if r5 == null goto label7;

        throw r5;

     label7:
        r5 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke r5.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw r5;

     label8:
        $r10 := @caughtexception;

        goto label6;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label8;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.modes.AEADBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r3;
    }
    public int getOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.modes.AEADBlockCipher: int getOutputSize(int)>($i0);

        return $i0;
    }
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.modes.AEADBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.modes.AEADBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        return $r1;
    }
    public int getUpdateOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.modes.AEADBlockCipher: int getUpdateOutputSize(int)>($i0);

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.modes.AEADBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.modes.AEADBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public int processByte(byte, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        byte $b0;
        byte[] $r1;
        int $i1;
        org.spongycastle.crypto.modes.AEADBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.modes.AEADBlockCipher: int processByte(byte,byte[],int)>($b0, $r1, $i1);

        return $i1;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.modes.AEADBlockCipher $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.modes.AEADBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

        return $i0;
    }
    public void updateAAD(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.modes.AEADBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: org.spongycastle.crypto.modes.AEADBlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.modes.AEADBlockCipher: void processAADBytes(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean wrapOnNoPadding()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher r0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        return 0;
    }
