org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory extends org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory implements org.spongycastle.jcajce.provider.symmetric.util.PBE
private int digest
private boolean forCipher
private int ivSize
private int keySize
private int scheme
    public void <init>(java.lang.String, org.spongycastle.asn1.ASN1ObjectIdentifier, boolean, int, int, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory r0;
        java.lang.String $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1, $r2);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: boolean forCipher> = $z0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int scheme> = $i0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int digest> = $i1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int keySize> = $i2;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int ivSize> = $i3;

        return;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        javax.crypto.spec.PBEKeySpec r2;
        byte[] $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r4;
        java.lang.String $r5;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r6;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.CipherParameters $r7;
        java.security.spec.InvalidKeySpecException $r8;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.PBEKeySpec;

        if $z0 == 0 goto label4;

        r2 = (javax.crypto.spec.PBEKeySpec) $r1;

        $r3 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        if $r3 != null goto label1;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: java.lang.String algName>;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: org.spongycastle.asn1.ASN1ObjectIdentifier algOid>;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int scheme>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int keySize>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int ivSize>;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.spongycastle.crypto.CipherParameters)>($r5, $r6, $i0, $i1, $i2, $i3, r2, null);

        return $r4;

     label1:
        $z0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: boolean forCipher>;

        if $z0 == 0 goto label3;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int scheme>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int keySize>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int ivSize>;

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec,int,int,int,int)>(r2, $i0, $i1, $i2, $i3);

     label2:
        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: java.lang.String algName>;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: org.spongycastle.asn1.ASN1ObjectIdentifier algOid>;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int scheme>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int keySize>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int ivSize>;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.spongycastle.crypto.CipherParameters)>($r5, $r6, $i0, $i1, $i2, $i3, r2, $r7);

        return $r4;

     label3:
        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int scheme>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory: int keySize>;

        $r7 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int)>(r2, $i0, $i1, $i2);

        goto label2;

     label4:
        $r8 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r8.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r8;
    }
