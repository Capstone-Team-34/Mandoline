org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator extends org.spongycastle.jcajce.provider.symmetric.util.BaseKeyGenerator
    public void <init>()
    {
        org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        org.spongycastle.crypto.generators.DESKeyGenerator $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        $r1 = new org.spongycastle.crypto.generators.DESKeyGenerator;

        specialinvoke $r1.<org.spongycastle.crypto.generators.DESKeyGenerator: void <init>()>();

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: void <init>(java.lang.String,int,org.spongycastle.crypto.CipherKeyGenerator)>("DES", 64, $r1);

        return;
    }
    protected javax.crypto.SecretKey engineGenerateKey()
    {
        org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        int $i0;
        byte[] $r1;
        boolean $z0;
        org.spongycastle.crypto.CipherKeyGenerator $r2;
        org.spongycastle.crypto.KeyGenerationParameters $r3;
        java.security.SecureRandom $r4;
        javax.crypto.spec.SecretKeySpec $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        $z0 = r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: boolean uninitialised>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: org.spongycastle.crypto.CipherKeyGenerator engine>;

        $r3 = new org.spongycastle.crypto.KeyGenerationParameters;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: int defaultKeySize>;

        specialinvoke $r3.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r4, $i0);

        virtualinvoke $r2.<org.spongycastle.crypto.CipherKeyGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r3);

        r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: boolean uninitialised> = 0;

     label1:
        $r5 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: org.spongycastle.crypto.CipherKeyGenerator engine>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator: java.lang.String algName>;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r6);

        return $r5;
    }
    protected void engineInit(int, java.security.SecureRandom)
    {
        org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator r0;
        int $i0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DES$KeyGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseKeyGenerator: void engineInit(int,java.security.SecureRandom)>($i0, $r1);

        return;
    }
