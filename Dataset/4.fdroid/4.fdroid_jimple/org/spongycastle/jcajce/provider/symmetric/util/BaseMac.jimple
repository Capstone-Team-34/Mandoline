org.spongycastle.jcajce.provider.symmetric.util.BaseMac extends javax.crypto.MacSpi implements org.spongycastle.jcajce.provider.symmetric.util.PBE
private int keySize
private org.spongycastle.crypto.Mac macEngine
private int pbeHash
private int scheme
    protected void <init>(org.spongycastle.crypto.Mac)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        org.spongycastle.crypto.Mac $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 := @parameter0: org.spongycastle.crypto.Mac;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int scheme> = 2;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int pbeHash> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int keySize> = 160;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine> = $r1;

        return;
    }
    protected void <init>(org.spongycastle.crypto.Mac, int, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        org.spongycastle.crypto.Mac $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 := @parameter0: org.spongycastle.crypto.Mac;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int scheme> = 2;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int pbeHash> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int keySize> = 160;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine> = $r1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int scheme> = $i0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int pbeHash> = $i1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int keySize> = $i2;

        return;
    }
    private static java.util.Hashtable copyMap(java.util.Map)
    {
        java.util.Map $r0;
        java.util.Hashtable r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r5;

        $r0 := @parameter0: java.util.Map;

        r1 = new java.util.Hashtable;

        specialinvoke r1.<java.util.Hashtable: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        virtualinvoke r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        return r1;
    }
    protected byte[] engineDoFinal()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        byte[] r1;
        int $i0;
        org.spongycastle.crypto.Mac $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $i0 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: int engineGetMacLength()>();

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>(r1, 0);

        return r1;
    }
    protected int engineGetMacLength()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        int $i0;
        org.spongycastle.crypto.Mac $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int getMacSize()>();

        return $i0;
    }
    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec r2;
        boolean $z0;
        javax.crypto.SecretKey $r3;
        javax.crypto.spec.PBEParameterSpec $r4, r5;
        javax.crypto.interfaces.PBEKey $r6;
        byte[] $r7;
        int $i0;
        short s1;
        org.spongycastle.crypto.Mac $r8;
        java.lang.String $r9;
        org.spongycastle.crypto.CipherParameters $r10;
        java.lang.Object r11;
        java.lang.Exception r12, r13;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey r14;
        org.spongycastle.crypto.params.KeyParameter $r15, $r23;
        javax.crypto.spec.IvParameterSpec r16;
        org.spongycastle.crypto.params.SkeinParameters$Builder $r17, $r25;
        org.spongycastle.jcajce.spec.SkeinParameterSpec r18;
        java.util.Map $r19;
        java.util.Hashtable $r20;
        java.security.InvalidKeyException $r21;
        java.security.InvalidAlgorithmParameterException $r22;
        org.spongycastle.crypto.params.ParametersWithIV $r24;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if $r1 != null goto label01;

        $r21 = new java.security.InvalidKeyException;

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key is null");

        throw $r21;

     label01:
        $z0 = $r1 instanceof org.spongycastle.jcajce.PKCS12Key;

        if $z0 == 0 goto label11;

     label02:
        $r3 = (javax.crypto.SecretKey) $r1;

     label03:
        $r4 = (javax.crypto.spec.PBEParameterSpec) r2;

     label04:
        r5 = $r4;

        $z0 = $r3 instanceof javax.crypto.interfaces.PBEKey;

        if $z0 == 0 goto label05;

        if $r4 != null goto label05;

        $r4 = new javax.crypto.spec.PBEParameterSpec;

        r5 = $r4;

        $r6 = (javax.crypto.interfaces.PBEKey) $r3;

        $r7 = interfaceinvoke $r6.<javax.crypto.interfaces.PBEKey: byte[] getSalt()>();

        $r6 = (javax.crypto.interfaces.PBEKey) $r3;

        $i0 = interfaceinvoke $r6.<javax.crypto.interfaces.PBEKey: int getIterationCount()>();

        specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r7, $i0);

     label05:
        $i0 = 1;

        s1 = 160;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        $r9 = interfaceinvoke $r8.<org.spongycastle.crypto.Mac: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("GOST");

        if $z0 == 0 goto label10;

        $i0 = 6;

        s1 = 256;

     label06:
        r11 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.SecretKey,int,int,int,javax.crypto.spec.PBEParameterSpec)>($r3, 2, $i0, s1, r5);

     label07:
        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        $r10 = (org.spongycastle.crypto.CipherParameters) r11;

        interfaceinvoke $r8.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r10);

        return;

     label08:
        r12 := @caughtexception;

        $r21 = new java.security.InvalidKeyException;

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("PKCS12 requires a SecretKey/PBEKey");

        throw $r21;

     label09:
        r13 := @caughtexception;

        $r22 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r22.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PKCS12 requires a PBEParameterSpec");

        throw $r22;

     label10:
        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        $r9 = interfaceinvoke $r8.<org.spongycastle.crypto.Mac: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("SHA256");

        if $z0 == 0 goto label06;

        $i0 = 4;

        s1 = 256;

        goto label06;

     label11:
        $z0 = $r1 instanceof org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        if $z0 == 0 goto label14;

        r14 = (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1;

        $r10 = virtualinvoke r14.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        if $r10 == null goto label12;

        r11 = virtualinvoke r14.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        goto label07;

     label12:
        $z0 = r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label13;

        r11 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEMacParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec)>(r14, r2);

        goto label07;

     label13:
        $r22 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r22.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r22;

     label14:
        $z0 = r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label15;

        $r24 = new org.spongycastle.crypto.params.ParametersWithIV;

        r11 = $r24;

        $r23 = new org.spongycastle.crypto.params.KeyParameter;

        $r7 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r23.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r7);

        r16 = (javax.crypto.spec.IvParameterSpec) r2;

        $r7 = virtualinvoke r16.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r24.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r23, $r7);

        goto label07;

     label15:
        $z0 = r2 instanceof org.spongycastle.jcajce.spec.SkeinParameterSpec;

        if $z0 == 0 goto label16;

        $r25 = new org.spongycastle.crypto.params.SkeinParameters$Builder;

        r18 = (org.spongycastle.jcajce.spec.SkeinParameterSpec) r2;

        $r19 = virtualinvoke r18.<org.spongycastle.jcajce.spec.SkeinParameterSpec: java.util.Map getParameters()>();

        $r20 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.BaseMac: java.util.Hashtable copyMap(java.util.Map)>($r19);

        specialinvoke $r25.<org.spongycastle.crypto.params.SkeinParameters$Builder: void <init>(java.util.Hashtable)>($r20);

        $r7 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $r17 = virtualinvoke $r25.<org.spongycastle.crypto.params.SkeinParameters$Builder: org.spongycastle.crypto.params.SkeinParameters$Builder setKey(byte[])>($r7);

        r11 = virtualinvoke $r17.<org.spongycastle.crypto.params.SkeinParameters$Builder: org.spongycastle.crypto.params.SkeinParameters build()>();

        goto label07;

     label16:
        if r2 != null goto label17;

        $r15 = new org.spongycastle.crypto.params.KeyParameter;

        r11 = $r15;

        $r7 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r15.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r7);

        goto label07;

     label17:
        $r22 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r22.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r22;

        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Exception from label03 to label04 with label09;
    }
    protected void engineReset()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        org.spongycastle.crypto.Mac $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void reset()>();

        return;
    }
    protected void engineUpdate(byte)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        byte $b0;
        org.spongycastle.crypto.Mac $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseMac r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Mac $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseMac: org.spongycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
