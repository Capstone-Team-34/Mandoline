org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2 extends org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory
private int scheme
    public void <init>(java.lang.String, int)
    {
        org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2 r0;
        java.lang.String $r1;
        int $i0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_PBKDF2>;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1, $r2);

        r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int scheme> = $i0;

        return;
    }
    private int getDigestCode(org.spongycastle.asn1.ASN1ObjectIdentifier) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2 r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1, $r2;
        boolean $z0;
        java.security.spec.InvalidKeySpecException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 = <org.spongycastle.asn1.cryptopro.CryptoProObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411Hmac>;

        $z0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 6;

     label1:
        $r2 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA1>;

        $z0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = new java.security.spec.InvalidKeySpecException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid KeySpec: unknown PRF algorithm ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2 r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        javax.crypto.spec.PBEKeySpec r2;
        byte[] $r3;
        java.security.spec.InvalidKeySpecException $r4;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        char[] $r7;
        java.lang.IllegalArgumentException $r8;
        org.spongycastle.jcajce.spec.PBKDF2KeySpec r9;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r10;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r11;
        org.spongycastle.crypto.CipherParameters $r12;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r13;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.PBEKeySpec;

        if $z0 == 0 goto label6;

        r2 = (javax.crypto.spec.PBEKeySpec) $r1;

        $r3 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        if $r3 != null goto label1;

        $r4 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r4.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("missing required salt");

        throw $r4;

     label1:
        $i0 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        if $i0 > 0 goto label2;

        $r4 = new java.security.spec.InvalidKeySpecException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positive iteration count required: ");

        $i0 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $i0 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        if $i0 > 0 goto label3;

        $r4 = new java.security.spec.InvalidKeySpecException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positive key length required: ");

        $i0 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        $r7 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $i0 = lengthof $r7;

        if $i0 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password empty");

        throw $r8;

     label4:
        $z0 = r2 instanceof org.spongycastle.jcajce.spec.PBKDF2KeySpec;

        if $z0 == 0 goto label5;

        r9 = (org.spongycastle.jcajce.spec.PBKDF2KeySpec) r2;

        $r10 = virtualinvoke r9.<org.spongycastle.jcajce.spec.PBKDF2KeySpec: org.spongycastle.asn1.x509.AlgorithmIdentifier getPrf()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $i0 = specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int getDigestCode(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r11);

        $i1 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int scheme>;

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int)>(r2, $i2, $i0, $i1);

        $r13 = new org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: java.lang.String algName>;

        $r11 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: org.spongycastle.asn1.ASN1ObjectIdentifier algOid>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int scheme>;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.spongycastle.crypto.CipherParameters)>($r6, $r11, $i2, $i0, $i1, -1, r2, $r12);

        return $r13;

     label5:
        $i0 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int scheme>;

        $r12 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int)>(r2, $i1, 1, $i0);

        $r13 = new org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: java.lang.String algName>;

        $r11 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: org.spongycastle.asn1.ASN1ObjectIdentifier algOid>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2: int scheme>;

        specialinvoke $r13.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.spongycastle.crypto.CipherParameters)>($r6, $r11, $i1, 1, $i0, -1, r2, $r12);

        return $r13;

     label6:
        $r4 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r4.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r4;
    }
