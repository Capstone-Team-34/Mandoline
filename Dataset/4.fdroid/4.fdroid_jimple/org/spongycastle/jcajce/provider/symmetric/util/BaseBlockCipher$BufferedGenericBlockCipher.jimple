org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher extends java.lang.Object implements org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher
private org.spongycastle.crypto.BufferedBlockCipher cipher
    void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        specialinvoke $r2.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r2;

        return;
    }
    void <init>(org.spongycastle.crypto.BlockCipher, org.spongycastle.crypto.paddings.BlockCipherPadding)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.paddings.BlockCipherPadding $r2;
        org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.paddings.BlockCipherPadding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;

        specialinvoke $r3.<org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r1, $r2);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r3;

        return;
    }
    void <init>(org.spongycastle.crypto.BufferedBlockCipher)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BufferedBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r1;

        return;
    }
    public int doFinal(byte[], int) throws java.lang.IllegalStateException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        org.spongycastle.crypto.BufferedBlockCipher $r3;
        javax.crypto.BadPaddingException $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

     label1:
        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r1, $i0);

     label2:
        return $i0;

     label3:
        r2 := @caughtexception;

        $r4 = new javax.crypto.BadPaddingException;

        $r5 = virtualinvoke r2.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r4.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r3;
    }
    public int getOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

        return $i0;
    }
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.BufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        return $r1;
    }
    public int getUpdateOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getUpdateOutputSize(int)>($i0);

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.BufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public int processByte(byte, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        byte $b0;
        byte[] $r1;
        int $i1;
        org.spongycastle.crypto.BufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i1 = virtualinvoke $r2.<org.spongycastle.crypto.BufferedBlockCipher: int processByte(byte,byte[],int)>($b0, $r1, $i1);

        return $i1;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BufferedBlockCipher $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

        return $i0;
    }
    public void updateAAD(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("AAD is not supported in the current mode.");

        throw $r2;
    }
    public boolean wrapOnNoPadding()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher r0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $z0 = $r1 instanceof org.spongycastle.crypto.modes.CTSBlockCipher;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
