org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher extends org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher implements org.spongycastle.jcajce.provider.symmetric.util.PBE
private java.lang.Class[] availableSpecs
private org.spongycastle.crypto.StreamCipher cipher
private int digest
private int ivLength
private org.spongycastle.crypto.params.ParametersWithIV ivParam
private int keySizeInBits
private java.lang.String pbeAlgorithm
private javax.crypto.spec.PBEParameterSpec pbeSpec
    protected void <init>(org.spongycastle.crypto.StreamCipher, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        org.spongycastle.crypto.StreamCipher $r1;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: org.spongycastle.crypto.StreamCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: void <init>(org.spongycastle.crypto.StreamCipher,int,int,int)>($r1, $i0, -1, -1);

        return;
    }
    protected void <init>(org.spongycastle.crypto.StreamCipher, int, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        org.spongycastle.crypto.StreamCipher $r1;
        int $i0, $i1, $i2;
        java.lang.Class[] $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: org.spongycastle.crypto.StreamCipher;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r2[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2[2] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r2[3] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.Class[] availableSpecs> = $r2;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher> = $r1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int ivLength> = $i0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int keySizeInBits> = $i1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int digest> = $i2;

        return;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        javax.crypto.ShortBufferException $r3;
        org.spongycastle.crypto.StreamCipher $r4;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too short for input.");

        throw $r3;

     label1:
        if $i1 == 0 goto label2;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label2:
        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.StreamCipher: void reset()>();

        return $i1;
    }
    protected byte[] engineDoFinal(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.StreamCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: byte[] engineUpdate(byte[],int,int)>($r1, $i0, $i1);

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.StreamCipher: void reset()>();

        return $r1;

     label1:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.StreamCipher: void reset()>();

        $r1 = newarray (byte)[0];

        return $r1;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        return 0;
    }
    protected byte[] engineGetIV()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        byte[] $r1;
        org.spongycastle.crypto.params.ParametersWithIV $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        return $r1;

     label1:
        return null;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        $i0 = $i0 * 8;

        return $i0;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $i0 := @parameter0: int;

        return $i0;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        java.lang.Exception r1;
        java.security.AlgorithmParameters $r2;
        javax.crypto.spec.PBEParameterSpec $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.security.AlgorithmParameters engineParams>;

        if $r2 != null goto label4;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.String pbeAlgorithm>;

        $r2 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>($r4);

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        virtualinvoke $r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r3);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        return null;

     label4:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.security.AlgorithmParameters engineParams>;

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        int $i0, i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.lang.Exception r4;
        java.security.spec.AlgorithmParameterSpec r5, $r8;
        java.lang.Class[] $r6;
        java.lang.Class $r7;
        java.security.InvalidAlgorithmParameterException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r5 = null;

        if $r2 == null goto label6;

        i1 = 0;

     label1:
        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r6;

        if i1 == $i2 goto label4;

     label2:
        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.Class[] availableSpecs>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r7);

     label3:
        r5 = $r8;

     label4:
        if r5 != null goto label6;

        $r9 = new java.security.InvalidAlgorithmParameterException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r11 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label5:
        r4 := @caughtexception;

        i1 = i1 + 1;

        goto label1;

     label6:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r5, $r3);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.security.AlgorithmParameters engineParams> = $r2;

        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.lang.String $r4;
        java.security.InvalidKeyException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r4 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r4);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        int $i0, $i1, $i2, $i3;
        java.security.Key $r1;
        java.security.SecureRandom $r2, r15;
        javax.crypto.spec.PBEParameterSpec $r3, $r24;
        java.lang.Exception r4;
        byte[] r5;
        org.spongycastle.crypto.params.ParametersWithIV r6, $r16;
        java.security.spec.AlgorithmParameterSpec r7;
        boolean $z0;
        java.lang.StringBuilder $r8, $r22;
        java.lang.String $r9;
        org.spongycastle.jcajce.PKCS12Key r10;
        org.spongycastle.jcajce.PKCS12KeyWithParameters $r11;
        org.spongycastle.crypto.StreamCipher $r12;
        org.spongycastle.crypto.CipherParameters $r13;
        java.lang.Object r14;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey r18;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r19;
        org.spongycastle.crypto.params.KeyParameter $r20, $r27;
        javax.crypto.spec.IvParameterSpec r21;
        java.security.InvalidKeyException $r23;
        java.security.InvalidParameterException $r25;
        java.security.InvalidAlgorithmParameterException $r26;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        r7 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter3: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.security.AlgorithmParameters engineParams> = null;

        $z0 = $r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label01;

        $r23 = new java.security.InvalidKeyException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key for algorithm ");

        $r9 = interfaceinvoke $r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not suitable for symmetric enryption.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r23;

     label01:
        $z0 = $r1 instanceof org.spongycastle.jcajce.PKCS12Key;

        if $z0 == 0 goto label10;

        r10 = (org.spongycastle.jcajce.PKCS12Key) $r1;

        $r3 = (javax.crypto.spec.PBEParameterSpec) r7;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r3;

        $z0 = r10 instanceof org.spongycastle.jcajce.PKCS12KeyWithParameters;

        if $z0 == 0 goto label02;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r3 != null goto label02;

        $r24 = new javax.crypto.spec.PBEParameterSpec;

        $r11 = (org.spongycastle.jcajce.PKCS12KeyWithParameters) r10;

        r5 = virtualinvoke $r11.<org.spongycastle.jcajce.PKCS12KeyWithParameters: byte[] getSalt()>();

        $r11 = (org.spongycastle.jcajce.PKCS12KeyWithParameters) r10;

        $i1 = virtualinvoke $r11.<org.spongycastle.jcajce.PKCS12KeyWithParameters: int getIterationCount()>();

        specialinvoke $r24.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r5, $i1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r24;

     label02:
        r5 = virtualinvoke r10.<org.spongycastle.jcajce.PKCS12Key: byte[] getEncoded()>();

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int digest>;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int keySizeInBits>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int ivLength>;

        $i3 = $i3 * 8;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        $r9 = interfaceinvoke $r12.<org.spongycastle.crypto.StreamCipher: java.lang.String getAlgorithmName()>();

        r14 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(byte[],int,int,int,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r5, 2, $i2, $i1, $i3, $r3, $r9);

     label03:
        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int ivLength>;

        if $i1 == 0 goto label06;

        $z0 = r14 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label06;

        r15 = $r2;

        if $r2 != null goto label04;

        $r2 = new java.security.SecureRandom;

        r15 = $r2;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

     label04:
        if $i0 == 1 goto label05;

        if $i0 != 3 goto label20;

     label05:
        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int ivLength>;

        r5 = newarray (byte)[$i1];

        virtualinvoke r15.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

        $r16 = new org.spongycastle.crypto.params.ParametersWithIV;

        r6 = $r16;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        specialinvoke $r16.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, r5);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r16;

        r14 = r6;

     label06:
        lookupswitch($i0)
        {
            case 1: goto label21;
            case 2: goto label23;
            case 3: goto label21;
            case 4: goto label23;
            default: goto label07;
        };

     label07:
        $r25 = new java.security.InvalidParameterException;

        $r22 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown opmode ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r9);

        throw $r25;

     label09:
        r4 := @caughtexception;

        $r23 = new java.security.InvalidKeyException;

        $r9 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r23;

     label10:
        $z0 = $r1 instanceof org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        if $z0 == 0 goto label16;

        r18 = (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1;

        $r19 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        if $r19 == null goto label13;

        $r19 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        $r9 = virtualinvoke $r19.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.String pbeAlgorithm> = $r9;

     label11:
        $r13 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        if $r13 == null goto label14;

        r14 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        $r24 = new javax.crypto.spec.PBEParameterSpec;

        r5 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: byte[] getSalt()>();

        $i1 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getIterationCount()>();

        specialinvoke $r24.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r5, $i1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r24;

     label12:
        $i1 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getIvSize()>();

        if $i1 == 0 goto label03;

        r6 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = r6;

        goto label03;

     label13:
        $r9 = virtualinvoke r18.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: java.lang.String getAlgorithm()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: java.lang.String pbeAlgorithm> = $r9;

        goto label11;

     label14:
        $z0 = r7 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label15;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        $r9 = interfaceinvoke $r12.<org.spongycastle.crypto.StreamCipher: java.lang.String getAlgorithmName()>();

        r14 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r18, r7, $r9);

        $r3 = (javax.crypto.spec.PBEParameterSpec) r7;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r3;

        goto label12;

     label15:
        $r26 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r26.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r26;

     label16:
        if r7 != null goto label18;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: int digest>;

        if $i1 <= 0 goto label17;

        $r23 = new java.security.InvalidKeyException;

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Algorithm requires a PBE key");

        throw $r23;

     label17:
        $r20 = new org.spongycastle.crypto.params.KeyParameter;

        r14 = $r20;

        r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r20.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r5);

        goto label03;

     label18:
        $z0 = r7 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label19;

        r6 = new org.spongycastle.crypto.params.ParametersWithIV;

        r14 = r6;

        $r27 = new org.spongycastle.crypto.params.KeyParameter;

        r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r27.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r5);

        r21 = (javax.crypto.spec.IvParameterSpec) r7;

        r5 = virtualinvoke r21.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke r6.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r27, r5);

        r6 = (org.spongycastle.crypto.params.ParametersWithIV) r6;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = r6;

        goto label03;

     label19:
        $r26 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r26.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r26;

     label20:
        $r26 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r26.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw $r26;

     label21:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        interfaceinvoke $r12.<org.spongycastle.crypto.StreamCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r13);

     label22:
        return;

     label23:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        interfaceinvoke $r12.<org.spongycastle.crypto.StreamCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r13);

     label24:
        return;

        catch java.lang.Exception from label08 to label09 with label09;
        catch java.lang.Exception from label21 to label22 with label09;
        catch java.lang.Exception from label23 to label24 with label09;
    }
    protected void engineSetMode(java.lang.String)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ECB");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        java.lang.String $r1;
        boolean $z0;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NoPadding");

        if $z0 != 0 goto label1;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }
    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.spongycastle.crypto.DataLengthException r3;
        java.lang.String $r4;
        javax.crypto.ShortBufferException $r5;
        org.spongycastle.crypto.StreamCipher $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label1;

        $r5 = new javax.crypto.ShortBufferException;

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too short for input.");

        throw $r5;

     label1:
        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

     label2:
        interfaceinvoke $r6.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label3:
        return $i1;

     label4:
        r3 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r7;

        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label4;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher r0;
        byte[] $r1, r3;
        int $i0, $i1;
        org.spongycastle.crypto.StreamCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r3 = newarray (byte)[$i1];

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseStreamCipher: org.spongycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r3, 0);

        return r3;
    }
