org.spongycastle.jcajce.provider.symmetric.util.PBE$Util extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.jcajce.provider.symmetric.util.PBE$Util r0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.PBE$Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static byte[] convertPassword(int, javax.crypto.spec.PBEKeySpec)
    {
        int $i0;
        javax.crypto.spec.PBEKeySpec $r0;
        char[] $r1;
        byte[] $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: javax.crypto.spec.PBEKeySpec;

        if $i0 != 2 goto label1;

        $r1 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $r2 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r1);

        return $r2;

     label1:
        if $i0 == 5 goto label2;

        if $i0 != 4 goto label3;

     label2:
        $r1 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $r2 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToUTF8Bytes(char[])>($r1);

        return $r2;

     label3:
        $r1 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $r2 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r1);

        return $r2;
    }
    private static org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int, int)
    {
        int $i0, $i1;
        java.lang.IllegalStateException $r0;
        org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator r1;
        org.spongycastle.crypto.digests.MD2Digest $r2;
        org.spongycastle.crypto.digests.MD5Digest $r3;
        org.spongycastle.crypto.digests.SHA1Digest $r4;
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r5;
        org.spongycastle.crypto.digests.RIPEMD160Digest $r6;
        org.spongycastle.crypto.digests.TigerDigest $r7;
        org.spongycastle.crypto.digests.SHA256Digest $r8;
        org.spongycastle.crypto.digests.GOST3411Digest $r9;
        org.spongycastle.crypto.generators.PKCS12ParametersGenerator r10;
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r11;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == 0 goto label01;

        if $i0 != 4 goto label06;

     label01:
        lookupswitch($i1)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label03;
            default: goto label02;
        };

     label02:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("PKCS5 scheme 1 only supports MD2, MD5 and SHA1.");

        throw $r0;

     label03:
        r1 = new org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD2Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD2Digest: void <init>()>();

        specialinvoke r1.<org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r1;

     label04:
        r1 = new org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r1.<org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r1;

     label05:
        r1 = new org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r1.<org.spongycastle.crypto.generators.PKCS5S1ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        return r1;

     label06:
        if $i0 == 1 goto label07;

        if $i0 != 5 goto label16;

     label07:
        lookupswitch($i1)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label09;
            case 6: goto label15;
            default: goto label08;
        };

     label08:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown digest scheme for PBE PKCS5S2 encryption.");

        throw $r0;

     label09:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD2Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD2Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r5;

     label10:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r5;

     label11:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        return r5;

     label12:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r6 = new org.spongycastle.crypto.digests.RIPEMD160Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.RIPEMD160Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r6);

        return r5;

     label13:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r7 = new org.spongycastle.crypto.digests.TigerDigest;

        specialinvoke $r7.<org.spongycastle.crypto.digests.TigerDigest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r7);

        return r5;

     label14:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r8 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r8.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r8);

        return r5;

     label15:
        r5 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r9 = new org.spongycastle.crypto.digests.GOST3411Digest;

        specialinvoke $r9.<org.spongycastle.crypto.digests.GOST3411Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r9);

        return r5;

     label16:
        if $i0 != 2 goto label25;

        lookupswitch($i1)
        {
            case 0: goto label19;
            case 1: goto label20;
            case 2: goto label21;
            case 3: goto label22;
            case 4: goto label23;
            case 5: goto label18;
            case 6: goto label24;
            default: goto label17;
        };

     label17:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unknown digest scheme for PBE encryption.");

        throw $r0;

     label18:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r2 = new org.spongycastle.crypto.digests.MD2Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD2Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r2);

        return r10;

     label19:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        return r10;

     label20:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        return r10;

     label21:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r6 = new org.spongycastle.crypto.digests.RIPEMD160Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.RIPEMD160Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r6);

        return r10;

     label22:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r7 = new org.spongycastle.crypto.digests.TigerDigest;

        specialinvoke $r7.<org.spongycastle.crypto.digests.TigerDigest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r7);

        return r10;

     label23:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r8 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r8.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r8);

        return r10;

     label24:
        r10 = new org.spongycastle.crypto.generators.PKCS12ParametersGenerator;

        $r9 = new org.spongycastle.crypto.digests.GOST3411Digest;

        specialinvoke $r9.<org.spongycastle.crypto.digests.GOST3411Digest: void <init>()>();

        specialinvoke r10.<org.spongycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r9);

        return r10;

     label25:
        r11 = new org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke r11.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: void <init>()>();

        return r11;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.SecretKey, int, int, int, javax.crypto.spec.PBEParameterSpec)
    {
        javax.crypto.SecretKey $r0;
        int $i0, $i1, $i2;
        javax.crypto.spec.PBEParameterSpec $r1;
        org.spongycastle.crypto.PBEParametersGenerator $r2;
        byte[] $r3, $r4, $r5;
        org.spongycastle.crypto.CipherParameters $r6;

        $r0 := @parameter0: javax.crypto.SecretKey;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: javax.crypto.spec.PBEParameterSpec;

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r3 = interfaceinvoke $r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r4 = interfaceinvoke $r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r5 = virtualinvoke $r1.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke $r1.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r2.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r4, $r5, $i0);

        $r6 = virtualinvoke $r2.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i2);

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 == $i1 goto label2;

        $r3[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r6;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec, int, int, int)
    {
        javax.crypto.spec.PBEKeySpec $r0;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.PBEParametersGenerator $r1;
        byte[] $r2, $r3;
        org.spongycastle.crypto.CipherParameters $r4;

        $r0 := @parameter0: javax.crypto.spec.PBEKeySpec;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: byte[] convertPassword(int,javax.crypto.spec.PBEKeySpec)>($i0, $r0);

        $r3 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        $i0 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        virtualinvoke $r1.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r2, $r3, $i0);

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i2);

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r4;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEMacParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.spec.PBEParameterSpec r3;
        int $i0, $i1;
        org.spongycastle.crypto.PBEParametersGenerator $r4;
        byte[] $r5, $r6;
        org.spongycastle.crypto.CipherParameters $r7;

        $r0 := @parameter0: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r2;

     label2:
        r3 = (javax.crypto.spec.PBEParameterSpec) $r1;

        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getType()>();

        $i1 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getDigest()>();

        $r4 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: byte[] getEncoded()>();

        $r6 = virtualinvoke r3.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r4.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r5, $r6, $i0);

        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getKeySize()>();

        $r7 = virtualinvoke $r4.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i0);

        $i0 = 0;

     label3:
        $i1 = lengthof $r5;

        if $i0 == $i1 goto label4;

        $r5[$i0] = 0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r7;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec, int, int, int, int)
    {
        javax.crypto.spec.PBEKeySpec $r0;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.PBEParametersGenerator $r1;
        byte[] $r2, $r3;
        org.spongycastle.crypto.CipherParameters $r4;

        $r0 := @parameter0: javax.crypto.spec.PBEKeySpec;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r2 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: byte[] convertPassword(int,javax.crypto.spec.PBEKeySpec)>($i0, $r0);

        $r3 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        $i0 = virtualinvoke $r0.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        virtualinvoke $r1.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r2, $r3, $i0);

        if $i3 == 0 goto label3;

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i2, $i3);

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i2);

        goto label1;

     label4:
        return $r4;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, java.security.spec.AlgorithmParameterSpec, java.lang.String)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.String $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.spec.PBEParameterSpec r4;
        int $i0, $i1;
        org.spongycastle.crypto.PBEParametersGenerator $r5;
        byte[] $r6, $r7;
        org.spongycastle.crypto.CipherParameters $r8, $r10;
        org.spongycastle.crypto.params.ParametersWithIV $r9;
        org.spongycastle.crypto.params.KeyParameter r11;

        $r0 := @parameter0: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter2: java.lang.String;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r3;

     label2:
        r4 = (javax.crypto.spec.PBEParameterSpec) $r1;

        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getType()>();

        $i1 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getDigest()>();

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r6 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: byte[] getEncoded()>();

        $z0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: boolean shouldTryWrongPKCS12()>();

        if $z0 == 0 goto label3;

        $r6 = newarray (byte)[2];

     label3:
        $r7 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r6, $r7, $i0);

        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getIvSize()>();

        if $i0 == 0 goto label7;

        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getKeySize()>();

        $i1 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getIvSize()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i0, $i1);

     label4:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES");

        if $z0 == 0 goto label5;

        $z0 = $r8 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label8;

        $r9 = (org.spongycastle.crypto.params.ParametersWithIV) $r8;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r11 = (org.spongycastle.crypto.params.KeyParameter) $r10;

        $r7 = virtualinvoke r11.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r7);

     label5:
        $i0 = 0;

     label6:
        $i1 = lengthof $r6;

        if $i0 == $i1 goto label9;

        $r6[$i0] = 0;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $i0 = virtualinvoke $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: int getKeySize()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        goto label4;

     label8:
        r11 = (org.spongycastle.crypto.params.KeyParameter) $r8;

        $r7 = virtualinvoke r11.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r7);

        goto label5;

     label9:
        return $r8;
    }
    public static org.spongycastle.crypto.CipherParameters makePBEParameters(byte[], int, int, int, int, java.security.spec.AlgorithmParameterSpec, java.lang.String) throws java.security.InvalidAlgorithmParameterException
    {
        byte[] $r0, $r6;
        int $i0, $i1, $i2, $i3;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.String $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        javax.crypto.spec.PBEParameterSpec r4;
        org.spongycastle.crypto.PBEParametersGenerator $r5;
        org.spongycastle.crypto.CipherParameters $r7, $r9;
        org.spongycastle.crypto.params.ParametersWithIV $r8;
        org.spongycastle.crypto.params.KeyParameter r10;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter6: java.lang.String;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Need a PBEParameter spec with a PBE key.");

        throw $r3;

     label2:
        r4 = (javax.crypto.spec.PBEParameterSpec) $r1;

        $r5 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int)>($i0, $i1);

        $r6 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()>();

        $i0 = virtualinvoke r4.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();

        virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r0, $r6, $i0);

        if $i3 == 0 goto label6;

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int,int)>($i2, $i3);

     label3:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("DES");

        if $z0 == 0 goto label4;

        $z0 = $r7 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label7;

        $r8 = (org.spongycastle.crypto.params.ParametersWithIV) $r7;

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r10 = (org.spongycastle.crypto.params.KeyParameter) $r9;

        $r6 = virtualinvoke r10.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r6);

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label8;

        $r0[$i0] = 0;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i2);

        goto label3;

     label7:
        r10 = (org.spongycastle.crypto.params.KeyParameter) $r7;

        $r6 = virtualinvoke r10.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.spongycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r6);

        goto label4;

     label8:
        return $r7;
    }
