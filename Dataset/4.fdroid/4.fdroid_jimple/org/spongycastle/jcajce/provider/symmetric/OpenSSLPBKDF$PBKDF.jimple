org.spongycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF extends org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory
    public void <init>()
    {
        org.spongycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF r0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier)>("PBKDF-OpenSSL", null);

        return;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF r0;
        java.security.spec.KeySpec $r1;
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r2;
        boolean $z0;
        javax.crypto.spec.PBEKeySpec r3;
        byte[] $r4, $r10;
        java.security.spec.InvalidKeySpecException $r5;
        int $i0;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        char[] $r8;
        java.lang.IllegalArgumentException $r9;
        javax.crypto.spec.SecretKeySpec $r11;
        org.spongycastle.crypto.CipherParameters $r12;
        org.spongycastle.crypto.params.KeyParameter $r13;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.PBEKeySpec;

        if $z0 == 0 goto label5;

        r3 = (javax.crypto.spec.PBEKeySpec) $r1;

        $r4 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        if $r4 != null goto label1;

        $r5 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("missing required salt");

        throw $r5;

     label1:
        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        if $i0 > 0 goto label2;

        $r5 = new java.security.spec.InvalidKeySpecException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positive iteration count required: ");

        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        if $i0 > 0 goto label3;

        $r5 = new java.security.spec.InvalidKeySpecException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positive key length required: ");

        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label3:
        $r8 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $i0 = lengthof $r8;

        if $i0 != 0 goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password empty");

        throw $r9;

     label4:
        r2 = new org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: void <init>()>();

        $r8 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: char[] getPassword()>();

        $r4 = staticinvoke <org.spongycastle.util.Strings: byte[] toByteArray(char[])>($r8);

        $r10 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        virtualinvoke r2.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: void init(byte[],byte[])>($r4, $r10);

        $r11 = new javax.crypto.spec.SecretKeySpec;

        $i0 = virtualinvoke r3.<javax.crypto.spec.PBEKeySpec: int getKeyLength()>();

        $r12 = virtualinvoke r2.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        $r13 = (org.spongycastle.crypto.params.KeyParameter) $r12;

        $r4 = virtualinvoke $r13.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke $r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "OpenSSLPBKDF");

        return $r11;

     label5:
        $r5 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r5;
    }
