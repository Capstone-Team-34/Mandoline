org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher extends org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher implements org.spongycastle.jcajce.provider.symmetric.util.PBE
private static final java.lang.Class gcmSpecClass
private org.spongycastle.crypto.params.AEADParameters aeadParams
private java.lang.Class[] availableSpecs
private org.spongycastle.crypto.BlockCipher baseEngine
private org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher
private int digest
private org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider engineProvider
private boolean fixedIv
private int ivLength
private org.spongycastle.crypto.params.ParametersWithIV ivParam
private int keySizeInBits
private java.lang.String modeName
private boolean padded
private java.lang.String pbeAlgorithm
private javax.crypto.spec.PBEParameterSpec pbeSpec
private int scheme
    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class lookup(java.lang.String)>("javax.crypto.spec.GCMParameterSpec");

        <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass> = $r0;

        return;
    }
    protected void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r4;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r3 = newarray (java.lang.Class)[6];

        $r3[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r3[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r3[2] = $r2;

        $r3[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r3[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r3[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r1;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;
    }
    protected void <init>(org.spongycastle.crypto.BlockCipher, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r4;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r3 = newarray (java.lang.Class)[6];

        $r3[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r3[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r3[2] = $r2;

        $r3[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r3[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r3[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r1;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        $i0 = $i0 / 8;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        return;
    }
    protected void <init>(org.spongycastle.crypto.BlockCipher, int, int, int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r4;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r3 = newarray (java.lang.Class)[6];

        $r3[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r3[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r3[2] = $r2;

        $r3[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r3[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r3[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = $i0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int digest> = $i1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int keySizeInBits> = $i2;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i3;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;
    }
    protected void <init>(org.spongycastle.crypto.BufferedBlockCipher, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;
        int $i0;
        java.lang.Class $r2;
        org.spongycastle.crypto.BlockCipher $r3;
        java.lang.Class[] $r4;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BufferedBlockCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r4 = newarray (java.lang.Class)[6];

        $r4[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r4[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r4[2] = $r2;

        $r4[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r4[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r4[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r4;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r3;

        $r5 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        specialinvoke $r5.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r5;

        $i0 = $i0 / 8;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        return;
    }
    protected void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        org.spongycastle.crypto.BlockCipher $r4;
        int $i0;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.modes.AEADBlockCipher;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r3 = newarray (java.lang.Class)[6];

        $r3[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r3[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r3[2] = $r2;

        $r3[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r3[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r3[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        $r4 = interfaceinvoke $r1.<org.spongycastle.crypto.modes.AEADBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r4;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r5 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        specialinvoke $r5.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r5;

        return;
    }
    protected void <init>(org.spongycastle.crypto.modes.AEADBlockCipher, boolean, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r1;
        boolean $z0;
        int $i0;
        java.lang.Class $r2;
        org.spongycastle.crypto.BlockCipher $r3;
        java.lang.Class[] $r4;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.modes.AEADBlockCipher;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r4 = newarray (java.lang.Class)[6];

        $r4[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r4[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r4[2] = $r2;

        $r4[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r4[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r4[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r4;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        $r3 = interfaceinvoke $r1.<org.spongycastle.crypto.modes.AEADBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = $z0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r5 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        specialinvoke $r5.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r5;

        return;
    }
    protected void <init>(org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        org.spongycastle.crypto.BlockCipher $r4;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher: void <init>()>();

        $r3 = newarray (java.lang.Class)[6];

        $r3[0] = class "Ljavax/crypto/spec/RC2ParameterSpec;";

        $r3[1] = class "Ljavax/crypto/spec/RC5ParameterSpec;";

        $r2 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $r3[2] = $r2;

        $r3[3] = class "Ljavax/crypto/spec/IvParameterSpec;";

        $r3[4] = class "Ljavax/crypto/spec/PBEParameterSpec;";

        $r3[5] = class "Lorg/spongycastle/jcajce/spec/GOST28147ParameterSpec;";

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs> = $r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme> = -1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv> = 1;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = null;

        $r4 = interfaceinvoke $r1.<org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider: org.spongycastle.crypto.BlockCipher get()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine> = $r4;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider engineProvider> = $r1;

        $r5 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r4 = interfaceinvoke $r1.<org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider: org.spongycastle.crypto.BlockCipher get()>();

        specialinvoke $r5.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r5;

        return;
    }
    static java.lang.Class access$000(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class lookup(java.lang.String)>($r0);

        return $r1;
    }
    private org.spongycastle.crypto.CipherParameters adjustParameters(java.security.spec.AlgorithmParameterSpec, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        org.spongycastle.crypto.CipherParameters r2, $r4;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithIV $r3;
        javax.crypto.spec.IvParameterSpec r5;
        byte[] $r6;
        org.spongycastle.jcajce.spec.GOST28147ParameterSpec r7;
        org.spongycastle.crypto.params.ParametersWithSBox r8;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z0 = r2 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label2;

        $r3 = (org.spongycastle.crypto.params.ParametersWithIV) r2;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $z0 = $r1 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label1;

        r5 = (javax.crypto.spec.IvParameterSpec) $r1;

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r6 = virtualinvoke r5.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r4, $r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r3;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        return $r3;

     label1:
        $z0 = $r1 instanceof org.spongycastle.jcajce.spec.GOST28147ParameterSpec;

        if $z0 == 0 goto label5;

        r7 = (org.spongycastle.jcajce.spec.GOST28147ParameterSpec) $r1;

        r8 = new org.spongycastle.crypto.params.ParametersWithSBox;

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getSbox()>();

        specialinvoke r8.<org.spongycastle.crypto.params.ParametersWithSBox: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r2, $r6);

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        if $r6 == null goto label4;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i0 == 0 goto label4;

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r4, $r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r3;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        return $r3;

     label2:
        $z0 = $r1 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label3;

        r5 = (javax.crypto.spec.IvParameterSpec) $r1;

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r6 = virtualinvoke r5.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r2, $r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r3;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        return $r3;

     label3:
        $z0 = $r1 instanceof org.spongycastle.jcajce.spec.GOST28147ParameterSpec;

        if $z0 == 0 goto label5;

        r7 = (org.spongycastle.jcajce.spec.GOST28147ParameterSpec) $r1;

        r8 = new org.spongycastle.crypto.params.ParametersWithSBox;

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getSbox()>();

        specialinvoke r8.<org.spongycastle.crypto.params.ParametersWithSBox: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r2, $r6);

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        if $r6 == null goto label4;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i0 == 0 goto label4;

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r6 = virtualinvoke r7.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r8, $r6);

        return $r3;

     label4:
        return r8;

     label5:
        return r2;
    }
    private boolean isAEADModeName(java.lang.String)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = "CCM";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "EAX";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "GCM";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "OCB";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static java.lang.Class lookup(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Exception r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;

        $r0 := @parameter0: java.lang.String;

        $r2 = class "Lorg/spongycastle/jcajce/provider/symmetric/util/BaseBlockCipher;";

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i5;
        javax.crypto.ShortBufferException $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r4;
        org.spongycastle.crypto.OutputLengthException r5;
        javax.crypto.IllegalBlockSizeException $r6;
        java.lang.String $r7;
        org.spongycastle.crypto.DataLengthException r8;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        i3 = 0;

        $i4 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int engineGetOutputSize(int)>($i1);

        $i4 = $i4 + $i2;

        $i5 = lengthof $r2;

        if $i4 <= $i5 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too short for input.");

        throw $r3;

     label1:
        if $i1 == 0 goto label4;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

     label2:
        $i0 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label3:
        i3 = $i0;

     label4:
        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $i0 = $i2 + i3;

     label5:
        $i0 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int doFinal(byte[],int)>($r2, $i0);

     label6:
        $i0 = $i0 + i3;

        return $i0;

     label7:
        r5 := @caughtexception;

        $r6 = new javax.crypto.IllegalBlockSizeException;

        $r7 = virtualinvoke r5.<org.spongycastle.crypto.OutputLengthException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label8:
        r8 := @caughtexception;

        $r6 = new javax.crypto.IllegalBlockSizeException;

        $r7 = virtualinvoke r8.<org.spongycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.spongycastle.crypto.OutputLengthException from label2 to label3 with label7;
        catch org.spongycastle.crypto.OutputLengthException from label5 to label6 with label7;
        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label8;
        catch org.spongycastle.crypto.DataLengthException from label5 to label6 with label8;
    }
    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        byte[] $r1, r3;
        int $i0, $i1, i2, $i3;
        org.spongycastle.crypto.DataLengthException r2;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r4;
        javax.crypto.IllegalBlockSizeException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = 0;

        $i3 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int engineGetOutputSize(int)>($i1);

        r3 = newarray (byte)[$i3];

        if $i1 == 0 goto label1;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        i2 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r3, 0);

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

     label2:
        $i0 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int doFinal(byte[],int)>(r3, i2);

     label3:
        $i0 = i2 + $i0;

        $i1 = lengthof r3;

        if $i0 != $i1 goto label5;

        return r3;

     label4:
        r2 := @caughtexception;

        $r5 = new javax.crypto.IllegalBlockSizeException;

        $r6 = virtualinvoke r2.<org.spongycastle.crypto.DataLengthException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        $r1 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, 0, $i0);

        return $r1;

        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label4;
    }
    protected int engineGetBlockSize()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        return $i0;
    }
    protected byte[] engineGetIV()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        org.spongycastle.crypto.params.AEADParameters $r1;
        byte[] $r2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.AEADParameters: byte[] getNonce()>();

        return $r2;

     label1:
        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        if $r3 == null goto label2;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        $r2 = virtualinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        return $r2;

     label2:
        return null;
    }
    protected int engineGetKeySize(java.security.Key)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        $i0 = $i0 * 8;

        return $i0;
    }
    protected int engineGetOutputSize(int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        int $i0;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r1;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int getOutputSize(int)>($i0);

        return $i0;
    }
    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.security.AlgorithmParameters $r1;
        javax.crypto.spec.PBEParameterSpec $r2;
        java.lang.String $r3, r8;
        java.lang.Exception r4, r10, r14;
        org.spongycastle.crypto.params.ParametersWithIV $r5;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r6;
        org.spongycastle.crypto.BlockCipher $r7;
        int $i0;
        byte[] $r9;
        java.lang.RuntimeException $r11;
        org.spongycastle.crypto.params.AEADParameters $r12;
        org.spongycastle.asn1.cms.GCMParameters $r13;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams>;

        if $r1 != null goto label02;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r2 == null goto label04;

     label01:
        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm>;

        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>($r3);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams> = $r1;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams>;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        virtualinvoke $r1.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r2);

     label02:
        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams>;

        return $r1;

     label03:
        r4 := @caughtexception;

        return null;

     label04:
        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        if $r5 == null goto label08;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r3 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        r8 = $r3;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(47);

        if $i0 < 0 goto label05;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(47);

        r8 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label05:
        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>(r8);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams> = $r1;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams>;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam>;

        $r9 = virtualinvoke $r5.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        virtualinvoke $r1.<java.security.AlgorithmParameters: void init(byte[])>($r9);

     label06:
        goto label02;

     label07:
        r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r3 = virtualinvoke r10.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label08:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams>;

        if $r12 == null goto label02;

     label09:
        $r1 = virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters createParametersInstance(java.lang.String)>("GCM");

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams> = $r1;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams>;

     label10:
        $r13 = new org.spongycastle.asn1.cms.GCMParameters;

     label11:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams>;

        $r9 = virtualinvoke $r12.<org.spongycastle.crypto.params.AEADParameters: byte[] getNonce()>();

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams>;

        $i0 = virtualinvoke $r12.<org.spongycastle.crypto.params.AEADParameters: int getMacSize()>();

     label12:
        $i0 = $i0 / 8;

     label13:
        specialinvoke $r13.<org.spongycastle.asn1.cms.GCMParameters: void <init>(byte[],int)>($r9, $i0);

        $r9 = virtualinvoke $r13.<org.spongycastle.asn1.cms.GCMParameters: byte[] getEncoded()>();

        virtualinvoke $r1.<java.security.AlgorithmParameters: void init(byte[])>($r9);

     label14:
        goto label02;

     label15:
        r14 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r3 = virtualinvoke r14.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r11;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }
    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        int $i0, i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.spec.AlgorithmParameterSpec r4, $r7;
        java.lang.Class[] $r5;
        java.lang.Class $r6;
        java.security.InvalidAlgorithmParameterException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.lang.Exception $r11;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        r4 = null;

        if $r2 == null goto label6;

        i1 = 0;

     label1:
        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r5;

        if i1 == $i2 goto label5;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs>;

        $r6 = $r5[i1];

        if $r6 != null goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class[] availableSpecs>;

        $r6 = $r5[i1];

        $r7 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r6);

     label4:
        r4 = $r7;

     label5:
        if r4 != null goto label6;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r10 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label6:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, r4, $r3);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams> = $r2;

        return;

     label7:
        $r11 := @caughtexception;

        goto label2;

        catch java.lang.Exception from label3 to label4 with label7;
    }
    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.lang.String $r4;
        java.security.InvalidKeyException $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r4 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r4);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.security.Key $r1;
        java.security.SecureRandom $r2, r22, $r45;
        java.security.spec.AlgorithmParameterSpec r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r40;
        java.lang.String $r5;
        org.spongycastle.crypto.BlockCipher $r6;
        javax.crypto.SecretKey $r7;
        javax.crypto.spec.PBEParameterSpec $r8, $r43;
        javax.crypto.interfaces.PBEKey $r9;
        byte[] $r10;
        java.lang.Exception r11, r25, r39;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r12;
        org.spongycastle.crypto.CipherParameters $r13;
        java.lang.Object r14, r23;
        org.spongycastle.crypto.params.ParametersWithIV $r15, r21, $r44;
        javax.crypto.spec.IvParameterSpec r16;
        org.spongycastle.jcajce.PBKDF1Key r17;
        org.spongycastle.jcajce.PBKDF1KeyWithParameters $r18;
        org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey r19;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r20;
        org.spongycastle.jcajce.spec.GOST28147ParameterSpec r26, r28;
        org.spongycastle.crypto.params.KeyParameter $r27, $r49;
        javax.crypto.spec.RC2ParameterSpec r29, r30;
        javax.crypto.spec.RC5ParameterSpec r31, r32;
        java.lang.Class $r33;
        java.lang.Class[] $r34;
        java.lang.reflect.Method $r35, $r36;
        java.lang.Object[] $r37;
        java.lang.Integer $r38;
        java.security.InvalidKeyException $r41;
        java.security.InvalidAlgorithmParameterException $r42;
        org.spongycastle.crypto.params.ParametersWithRandom $r46;
        java.security.InvalidParameterException $r47;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$1 $r48;
        org.spongycastle.crypto.params.ParametersWithSBox $r50;
        org.spongycastle.crypto.params.RC2Parameters $r51;
        org.spongycastle.crypto.params.RC5Parameters $r52;
        org.spongycastle.crypto.params.AEADParameters $r53;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter3: java.security.SecureRandom;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.security.AlgorithmParameters engineParams> = null;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams> = null;

        $z0 = $r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label01;

        $r41 = new java.security.InvalidKeyException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key for algorithm ");

        $r5 = interfaceinvoke $r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not suitable for symmetric enryption.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r5);

        throw $r41;

     label01:
        if r3 != null goto label02;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("RC5-64");

        if $z0 == 0 goto label02;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RC5 requires an RC5ParametersSpec to be passed in.");

        throw $r42;

     label02:
        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        if $i1 == 2 goto label03;

        $z0 = $r1 instanceof org.spongycastle.jcajce.PKCS12Key;

        if $z0 == 0 goto label10;

     label03:
        $r7 = (javax.crypto.SecretKey) $r1;

     label04:
        $z0 = r3 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label05;

        $r8 = (javax.crypto.spec.PBEParameterSpec) r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r8;

     label05:
        $z0 = $r7 instanceof javax.crypto.interfaces.PBEKey;

        if $z0 == 0 goto label06;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r8 != null goto label06;

        $r43 = new javax.crypto.spec.PBEParameterSpec;

        $r9 = (javax.crypto.interfaces.PBEKey) $r7;

        $r10 = interfaceinvoke $r9.<javax.crypto.interfaces.PBEKey: byte[] getSalt()>();

        $r9 = (javax.crypto.interfaces.PBEKey) $r7;

        $i1 = interfaceinvoke $r9.<javax.crypto.interfaces.PBEKey: int getIterationCount()>();

        specialinvoke $r43.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r10, $i1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r43;

     label06:
        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r8 != null goto label08;

        $z0 = $r7 instanceof javax.crypto.interfaces.PBEKey;

        if $z0 != 0 goto label08;

        $r41 = new java.security.InvalidKeyException;

        specialinvoke $r41.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Algorithm requires a PBE key");

        throw $r41;

     label07:
        r11 := @caughtexception;

        $r41 = new java.security.InvalidKeyException;

        specialinvoke $r41.<java.security.InvalidKeyException: void <init>(java.lang.String)>("PKCS12 requires a SecretKey/PBEKey");

        throw $r41;

     label08:
        $r10 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int keySizeInBits>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        $i3 = $i3 * 8;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r5 = interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: java.lang.String getAlgorithmName()>();

        $r13 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(byte[],int,int,int,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r10, 2, $i1, $i2, $i3, $r8, $r5);

        r14 = $r13;

        $z0 = $r13 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label09;

        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) $r13;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

     label09:
        $z0 = r3 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label37;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == 0 goto label36;

        r16 = (javax.crypto.spec.IvParameterSpec) r3;

        $r10 = virtualinvoke r16.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        $i1 = lengthof $r10;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == $i2 goto label25;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $z0 = $r12 instanceof org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        if $z0 != 0 goto label25;

        $z0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean fixedIv>;

        if $z0 == 0 goto label25;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IV must be ");

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes long.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r5);

        throw $r42;

     label10:
        $z0 = $r1 instanceof org.spongycastle.jcajce.PBKDF1Key;

        if $z0 == 0 goto label13;

        r17 = (org.spongycastle.jcajce.PBKDF1Key) $r1;

        $z0 = r3 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label11;

        $r8 = (javax.crypto.spec.PBEParameterSpec) r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r8;

     label11:
        $z0 = r17 instanceof org.spongycastle.jcajce.PBKDF1KeyWithParameters;

        if $z0 == 0 goto label12;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r8 != null goto label12;

        $r43 = new javax.crypto.spec.PBEParameterSpec;

        $r18 = (org.spongycastle.jcajce.PBKDF1KeyWithParameters) r17;

        $r10 = virtualinvoke $r18.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: byte[] getSalt()>();

        $r18 = (org.spongycastle.jcajce.PBKDF1KeyWithParameters) r17;

        $i1 = virtualinvoke $r18.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: int getIterationCount()>();

        specialinvoke $r43.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r10, $i1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r43;

     label12:
        $r10 = virtualinvoke r17.<org.spongycastle.jcajce.PBKDF1Key: byte[] getEncoded()>();

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int digest>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int keySizeInBits>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        $i3 = $i3 * 8;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r5 = interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: java.lang.String getAlgorithmName()>();

        $r13 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(byte[],int,int,int,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r10, 0, $i1, $i2, $i3, $r8, $r5);

        r14 = $r13;

        $z0 = $r13 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label09;

        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) $r13;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label09;

     label13:
        $z0 = $r1 instanceof org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey;

        if $z0 == 0 goto label19;

        r19 = (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1;

        $r20 = virtualinvoke r19.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        if $r20 == null goto label16;

        $r20 = virtualinvoke r19.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        $r5 = virtualinvoke $r20.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = $r5;

     label14:
        $r13 = virtualinvoke r19.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        if $r13 == null goto label17;

        $r13 = virtualinvoke r19.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: org.spongycastle.crypto.CipherParameters getParam()>();

        r14 = specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.CipherParameters adjustParameters(java.security.spec.AlgorithmParameterSpec,org.spongycastle.crypto.CipherParameters)>(r3, $r13);

     label15:
        $z0 = r14 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label09;

        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label09;

     label16:
        $r5 = virtualinvoke r19.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: java.lang.String getAlgorithm()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String pbeAlgorithm> = $r5;

        goto label14;

     label17:
        $z0 = r3 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label18;

        $r8 = (javax.crypto.spec.PBEParameterSpec) r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r8;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        r14 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r19, r3, $r5);

        goto label15;

     label18:
        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r42;

     label19:
        $z0 = $r1 instanceof javax.crypto.interfaces.PBEKey;

        if $z0 == 0 goto label21;

        $r9 = (javax.crypto.interfaces.PBEKey) $r1;

        $r8 = (javax.crypto.spec.PBEParameterSpec) r3;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r8;

        $z0 = $r9 instanceof org.spongycastle.jcajce.PKCS12KeyWithParameters;

        if $z0 == 0 goto label20;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r8 != null goto label20;

        $r43 = new javax.crypto.spec.PBEParameterSpec;

        $r10 = interfaceinvoke $r9.<javax.crypto.interfaces.PBEKey: byte[] getSalt()>();

        $i1 = interfaceinvoke $r9.<javax.crypto.interfaces.PBEKey: int getIterationCount()>();

        specialinvoke $r43.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r10, $i1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r43;

     label20:
        $r10 = interfaceinvoke $r9.<javax.crypto.interfaces.PBEKey: byte[] getEncoded()>();

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        $i2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int digest>;

        $i3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int keySizeInBits>;

        $i4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        $i4 = $i4 * 8;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r5 = interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: java.lang.String getAlgorithmName()>();

        $r13 = staticinvoke <org.spongycastle.jcajce.provider.symmetric.util.PBE$Util: org.spongycastle.crypto.CipherParameters makePBEParameters(byte[],int,int,int,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r10, $i1, $i2, $i3, $i4, $r8, $r5);

        r14 = $r13;

        $z0 = $r13 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label09;

        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) $r13;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label09;

     label21:
        $z0 = $r1 instanceof org.spongycastle.jcajce.spec.RepeatedSecretKeySpec;

        if $z0 != 0 goto label24;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        if $i1 == 0 goto label22;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        if $i1 == 4 goto label22;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        if $i1 == 1 goto label22;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>;

        if $i1 != 5 goto label23;

     label22:
        $r41 = new java.security.InvalidKeyException;

        specialinvoke $r41.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Algorithm requires a PBE key");

        throw $r41;

     label23:
        $r27 = new org.spongycastle.crypto.params.KeyParameter;

        r14 = $r27;

        $r10 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r27.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r10);

        goto label09;

     label24:
        r14 = null;

        goto label09;

     label25:
        $z0 = r14 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label35;

        $r44 = new org.spongycastle.crypto.params.ParametersWithIV;

        r21 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        $r13 = virtualinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r10 = virtualinvoke r16.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r44.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = $r44;

     label26:
        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

     label27:
        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == 0 goto label70;

        $z0 = r14 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label70;

        $z0 = r14 instanceof org.spongycastle.crypto.params.AEADParameters;

        if $z0 != 0 goto label70;

        r22 = $r2;

        if $r2 != null goto label28;

        $r45 = new java.security.SecureRandom;

        r22 = $r45;

        specialinvoke $r45.<java.security.SecureRandom: void <init>()>();

     label28:
        if $i0 == 1 goto label29;

        if $i0 != 3 goto label64;

     label29:
        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        $r10 = newarray (byte)[$i1];

        virtualinvoke r22.<java.security.SecureRandom: void nextBytes(byte[])>($r10);

        $r15 = new org.spongycastle.crypto.params.ParametersWithIV;

        r23 = $r15;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        specialinvoke $r15.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) $r15;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

     label30:
        if $r2 == null goto label69;

        $z0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean padded>;

        if $z0 == 0 goto label69;

        $r46 = new org.spongycastle.crypto.params.ParametersWithRandom;

        r14 = $r46;

        $r13 = (org.spongycastle.crypto.CipherParameters) r23;

        specialinvoke $r46.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r13, $r2);

     label31:
        lookupswitch($i0)
        {
            case 1: goto label65;
            case 2: goto label67;
            case 3: goto label65;
            case 4: goto label67;
            default: goto label32;
        };

     label32:
        $r47 = new java.security.InvalidParameterException;

        $r40 = new java.lang.StringBuilder;

     label33:
        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown opmode ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r5);

        throw $r47;

     label34:
        r25 := @caughtexception;

        $r48 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$1;

        $r5 = virtualinvoke r25.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r48.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$1: void <init>(org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher,java.lang.String,java.lang.Exception)>(r0, $r5, r25);

        throw $r48;

     label35:
        r21 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = virtualinvoke r16.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        specialinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = r21;

        goto label26;

     label36:
        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        if $r5 == null goto label27;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label27;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("ECB mode does not use an IV");

        throw $r42;

     label37:
        $z0 = r3 instanceof org.spongycastle.jcajce.spec.GOST28147ParameterSpec;

        if $z0 == 0 goto label40;

        r26 = (org.spongycastle.jcajce.spec.GOST28147ParameterSpec) r3;

        $r50 = new org.spongycastle.crypto.params.ParametersWithSBox;

        r14 = $r50;

        $r49 = new org.spongycastle.crypto.params.KeyParameter;

        $r10 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r49.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r10);

        r28 = (org.spongycastle.jcajce.spec.GOST28147ParameterSpec) r3;

        $r10 = virtualinvoke r28.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getSbox()>();

        specialinvoke $r50.<org.spongycastle.crypto.params.ParametersWithSBox: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r49, $r10);

        $r10 = virtualinvoke r26.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        if $r10 == null goto label27;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == 0 goto label27;

        $z0 = $r50 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label39;

        $r44 = new org.spongycastle.crypto.params.ParametersWithIV;

        r21 = (org.spongycastle.crypto.params.ParametersWithIV) $r50;

        $r13 = virtualinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r10 = virtualinvoke r26.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        specialinvoke $r44.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = $r44;

     label38:
        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label27;

     label39:
        r21 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = virtualinvoke r26.<org.spongycastle.jcajce.spec.GOST28147ParameterSpec: byte[] getIV()>();

        $r13 = (org.spongycastle.crypto.CipherParameters) $r50;

        specialinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = r21;

        goto label38;

     label40:
        $z0 = r3 instanceof javax.crypto.spec.RC2ParameterSpec;

        if $z0 == 0 goto label43;

        r29 = (javax.crypto.spec.RC2ParameterSpec) r3;

        $r51 = new org.spongycastle.crypto.params.RC2Parameters;

        r14 = $r51;

        $r10 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        r30 = (javax.crypto.spec.RC2ParameterSpec) r3;

        $i1 = virtualinvoke r30.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();

        specialinvoke $r51.<org.spongycastle.crypto.params.RC2Parameters: void <init>(byte[],int)>($r10, $i1);

        $r10 = virtualinvoke r29.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        if $r10 == null goto label27;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == 0 goto label27;

        $z0 = $r51 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label42;

        $r44 = new org.spongycastle.crypto.params.ParametersWithIV;

        r21 = (org.spongycastle.crypto.params.ParametersWithIV) $r51;

        $r13 = virtualinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r10 = virtualinvoke r29.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        specialinvoke $r44.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = $r44;

     label41:
        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label27;

     label42:
        r21 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = virtualinvoke r29.<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()>();

        $r13 = (org.spongycastle.crypto.CipherParameters) $r51;

        specialinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = r21;

        goto label41;

     label43:
        $z0 = r3 instanceof javax.crypto.spec.RC5ParameterSpec;

        if $z0 == 0 goto label49;

        r31 = (javax.crypto.spec.RC5ParameterSpec) r3;

        $r52 = new org.spongycastle.crypto.params.RC5Parameters;

        r14 = $r52;

        $r10 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        r32 = (javax.crypto.spec.RC5ParameterSpec) r3;

        $i1 = virtualinvoke r32.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();

        specialinvoke $r52.<org.spongycastle.crypto.params.RC5Parameters: void <init>(byte[],int)>($r10, $i1);

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("RC5");

        if $z0 == 0 goto label45;

        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("RC5-32");

        if $z0 == 0 goto label44;

        $i1 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        if $i1 == 32 goto label46;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RC5 already set up for a word size of 32 not ");

        $i0 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r5);

        throw $r42;

     label44:
        $r6 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("RC5-64");

        if $z0 == 0 goto label46;

        $i1 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        if $i1 == 64 goto label46;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RC5 already set up for a word size of 64 not ");

        $i0 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: int getWordSize()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r5);

        throw $r42;

     label45:
        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RC5 parameters passed to a cipher that is not RC5.");

        throw $r42;

     label46:
        $r10 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        if $r10 == null goto label27;

        $i1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i1 == 0 goto label27;

        $z0 = $r52 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label48;

        $r44 = new org.spongycastle.crypto.params.ParametersWithIV;

        r21 = (org.spongycastle.crypto.params.ParametersWithIV) $r52;

        $r13 = virtualinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r10 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        specialinvoke $r44.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = $r44;

     label47:
        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.ParametersWithIV ivParam> = $r15;

        goto label27;

     label48:
        r21 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = virtualinvoke r31.<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()>();

        $r13 = (org.spongycastle.crypto.CipherParameters) $r52;

        specialinvoke r21.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, $r10);

        r14 = r21;

        goto label47;

     label49:
        $r33 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        if $r33 == null goto label63;

        $r33 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

        $z0 = virtualinvoke $r33.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 == 0 goto label63;

        $r5 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean isAEADModeName(java.lang.String)>($r5);

        if $z0 != 0 goto label50;

        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $z0 = $r12 instanceof org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        if $z0 != 0 goto label50;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("GCMParameterSpec can only be used with AEAD modes.");

        throw $r42;

     label50:
        $r33 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

     label51:
        $r34 = newarray (java.lang.Class)[0];

        $r35 = virtualinvoke $r33.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getTLen", $r34);

     label52:
        $r33 = <org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.Class gcmSpecClass>;

     label53:
        $r34 = newarray (java.lang.Class)[0];

        $r36 = virtualinvoke $r33.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getIV", $r34);

     label54:
        $z0 = r14 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label60;

     label55:
        $r15 = (org.spongycastle.crypto.params.ParametersWithIV) r14;

        $r13 = virtualinvoke $r15.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r27 = (org.spongycastle.crypto.params.KeyParameter) $r13;

     label56:
        $r53 = new org.spongycastle.crypto.params.AEADParameters;

        r14 = $r53;

     label57:
        $r37 = newarray (java.lang.Object)[0];

        r23 = virtualinvoke $r35.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r37);

        $r38 = (java.lang.Integer) r23;

        $i1 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        $r37 = newarray (java.lang.Object)[0];

        r23 = virtualinvoke $r36.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r37);

        $r10 = (byte[]) r23;

     label58:
        specialinvoke $r53.<org.spongycastle.crypto.params.AEADParameters: void <init>(org.spongycastle.crypto.params.KeyParameter,int,byte[])>($r27, $i1, $r10);

        $r53 = (org.spongycastle.crypto.params.AEADParameters) $r53;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.params.AEADParameters aeadParams> = $r53;

     label59:
        goto label27;

     label60:
        $r27 = (org.spongycastle.crypto.params.KeyParameter) r14;

     label61:
        goto label56;

     label62:
        r39 := @caughtexception;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Cannot process GCMParameterSpec.");

        throw $r42;

     label63:
        if r3 == null goto label27;

        $z0 = r3 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 != 0 goto label27;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r42;

     label64:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("PGPCFB");

        if $i1 >= 0 goto label70;

        $r42 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r42.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw $r42;

     label65:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r13);

     label66:
        return;

     label67:
        $r12 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r13 = (org.spongycastle.crypto.CipherParameters) r14;

        interfaceinvoke $r12.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r13);

     label68:
        return;

     label69:
        r14 = r23;

        goto label31;

     label70:
        r23 = r14;

        goto label30;

        catch java.lang.Exception from label03 to label04 with label07;
        catch java.lang.Exception from label33 to label34 with label34;
        catch java.lang.Exception from label51 to label52 with label62;
        catch java.lang.Exception from label53 to label54 with label62;
        catch java.lang.Exception from label55 to label56 with label62;
        catch java.lang.Exception from label57 to label58 with label62;
        catch java.lang.Exception from label58 to label59 with label62;
        catch java.lang.Exception from label60 to label61 with label62;
        catch java.lang.Exception from label65 to label66 with label34;
        catch java.lang.Exception from label67 to label68 with label34;
    }
    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r3;
        org.spongycastle.crypto.BlockCipher $r4, $r7;
        int $i0;
        org.spongycastle.crypto.modes.CBCBlockCipher $r5;
        org.spongycastle.crypto.modes.OFBBlockCipher $r6;
        org.spongycastle.crypto.modes.CFBBlockCipher $r8;
        org.spongycastle.crypto.modes.PGPCFBBlockCipher $r9;
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher $r10;
        java.lang.IllegalArgumentException $r11;
        org.spongycastle.crypto.BufferedBlockCipher $r12;
        org.spongycastle.crypto.modes.SICBlockCipher $r13;
        org.spongycastle.crypto.modes.GOFBBlockCipher $r14;
        org.spongycastle.crypto.modes.GCFBBlockCipher $r15;
        org.spongycastle.crypto.modes.CTSBlockCipher $r16;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher $r17;
        org.spongycastle.crypto.modes.CCMBlockCipher $r18;
        org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider $r19;
        org.spongycastle.crypto.modes.OCBBlockCipher $r20;
        java.security.NoSuchAlgorithmException $r21;
        java.lang.StringBuilder $r22;
        org.spongycastle.crypto.modes.EAXBlockCipher $r23;
        org.spongycastle.crypto.modes.GCMBlockCipher $r24;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName> = $r2;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ECB");

        if $z0 == 0 goto label01;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label01:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("CBC");

        if $z0 == 0 goto label02;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r5 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r5.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label02:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("OFB");

        if $z0 == 0 goto label04;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 3 goto label03;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r6 = new org.spongycastle.crypto.modes.OFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r6.<org.spongycastle.crypto.modes.OFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r4, $i0);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label03:
        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r6 = new org.spongycastle.crypto.modes.OFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r7 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke $r6.<org.spongycastle.crypto.modes.OFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r4, $i0);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label04:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("CFB");

        if $z0 == 0 goto label06;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 3 goto label05;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r8 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r8.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r4, $i0);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r8);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label05:
        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r8 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r7 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke $r8.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r4, $i0);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r8);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label06:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("PGP");

        if $z0 == 0 goto label07;

        $r1 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PGPCFBwithIV");

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r9 = new org.spongycastle.crypto.modes.PGPCFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r9.<org.spongycastle.crypto.modes.PGPCFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,boolean)>($r4, $z0);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r9);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label07:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OpenPGPCFB");

        if $z0 == 0 goto label08;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r10 = new org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r10.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r10);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label08:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("SIC");

        if $z0 == 0 goto label10;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $i0 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength>;

        if $i0 >= 16 goto label09;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Warning: SIC-Mode can become a twotime-pad if the blocksize of the cipher is too small. Use a cipher with a block size of at least 128 bits (e.g. AES)");

        throw $r11;

     label09:
        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r12 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r13 = new org.spongycastle.crypto.modes.SICBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r13.<org.spongycastle.crypto.modes.SICBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r12.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r13);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r12);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label10:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("CTR");

        if $z0 == 0 goto label11;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r12 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r13 = new org.spongycastle.crypto.modes.SICBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r13.<org.spongycastle.crypto.modes.SICBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r12.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r13);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r12);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label11:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("GOFB");

        if $z0 == 0 goto label12;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r12 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r14 = new org.spongycastle.crypto.modes.GOFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r14.<org.spongycastle.crypto.modes.GOFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r12.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r14);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r12);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label12:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("GCFB");

        if $z0 == 0 goto label13;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r12 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r15 = new org.spongycastle.crypto.modes.GCFBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r15.<org.spongycastle.crypto.modes.GCFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r12.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r15);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r12);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label13:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("CTS");

        if $z0 == 0 goto label14;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r3 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r16 = new org.spongycastle.crypto.modes.CTSBlockCipher;

        $r5 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r5.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r16.<org.spongycastle.crypto.modes.CTSBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r5);

        specialinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r16);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r3;

        return;

     label14:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("CCM");

        if $z0 == 0 goto label15;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 13;

        $r17 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r18 = new org.spongycastle.crypto.modes.CCMBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r18.<org.spongycastle.crypto.modes.CCMBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r17.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r18);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r17;

        return;

     label15:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("OCB");

        if $z0 == 0 goto label17;

        $r19 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider engineProvider>;

        if $r19 == null goto label16;

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = 15;

        $r17 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r20 = new org.spongycastle.crypto.modes.OCBBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $r19 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider engineProvider>;

        $r7 = interfaceinvoke $r19.<org.spongycastle.jcajce.provider.symmetric.util.BlockCipherProvider: org.spongycastle.crypto.BlockCipher get()>();

        specialinvoke $r20.<org.spongycastle.crypto.modes.OCBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.BlockCipher)>($r4, $r7);

        specialinvoke $r17.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r20);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r17;

        return;

     label16:
        $r21 = new java.security.NoSuchAlgorithmException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r21;

     label17:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("EAX");

        if $z0 == 0 goto label18;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r17 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r23 = new org.spongycastle.crypto.modes.EAXBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r23.<org.spongycastle.crypto.modes.EAXBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r17.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r23);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r17;

        return;

     label18:
        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("GCM");

        if $z0 == 0 goto label19;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int ivLength> = $i0;

        $r17 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher;

        $r24 = new org.spongycastle.crypto.modes.GCMBlockCipher;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.crypto.BlockCipher baseEngine>;

        specialinvoke $r24.<org.spongycastle.crypto.modes.GCMBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r4);

        specialinvoke $r17.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher: void <init>(org.spongycastle.crypto.modes.AEADBlockCipher)>($r24);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r17;

        return;

     label19:
        $r21 = new java.security.NoSuchAlgorithmException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r21;
    }
    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.lang.String $r1, $r2, $r8;
        boolean $z0;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher $r4;
        org.spongycastle.crypto.BufferedBlockCipher $r5;
        org.spongycastle.crypto.BlockCipher $r6;
        org.spongycastle.crypto.modes.CTSBlockCipher $r7;
        javax.crypto.NoSuchPaddingException $r9;
        org.spongycastle.crypto.paddings.ZeroBytePadding $r10;
        org.spongycastle.crypto.paddings.ISO10126d2Padding $r11;
        org.spongycastle.crypto.paddings.X923Padding $r12;
        org.spongycastle.crypto.paddings.ISO7816d4Padding $r13;
        org.spongycastle.crypto.paddings.TBCPadding $r14;
        java.lang.StringBuilder $r15;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NOPADDING");

        if $z0 == 0 goto label01;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $z0 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: boolean wrapOnNoPadding()>();

        if $z0 == 0 goto label14;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r5 = new org.spongycastle.crypto.BufferedBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r5);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label01:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("WITHCTS");

        if $z0 == 0 goto label02;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r7 = new org.spongycastle.crypto.modes.CTSBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r7.<org.spongycastle.crypto.modes.CTSBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BufferedBlockCipher)>($r7);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label02:
        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean padded> = 1;

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: java.lang.String modeName>;

        $z0 = specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: boolean isAEADModeName(java.lang.String)>($r8);

        if $z0 == 0 goto label03;

        $r9 = new javax.crypto.NoSuchPaddingException;

        specialinvoke $r9.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>("Only NoPadding can be used with AEAD modes.");

        throw $r9;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS5PADDING");

        if $z0 != 0 goto label04;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("PKCS7PADDING");

        if $z0 == 0 goto label05;

     label04:
        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r6);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label05:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ZEROBYTEPADDING");

        if $z0 == 0 goto label06;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r10 = new org.spongycastle.crypto.paddings.ZeroBytePadding;

        specialinvoke $r10.<org.spongycastle.crypto.paddings.ZeroBytePadding: void <init>()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r6, $r10);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label06:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO10126PADDING");

        if $z0 != 0 goto label07;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO10126-2PADDING");

        if $z0 == 0 goto label08;

     label07:
        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r11 = new org.spongycastle.crypto.paddings.ISO10126d2Padding;

        specialinvoke $r11.<org.spongycastle.crypto.paddings.ISO10126d2Padding: void <init>()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r6, $r11);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label08:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("X9.23PADDING");

        if $z0 != 0 goto label09;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("X923PADDING");

        if $z0 == 0 goto label10;

     label09:
        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r12 = new org.spongycastle.crypto.paddings.X923Padding;

        specialinvoke $r12.<org.spongycastle.crypto.paddings.X923Padding: void <init>()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r6, $r12);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label10:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO7816-4PADDING");

        if $z0 != 0 goto label11;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ISO9797-1PADDING");

        if $z0 == 0 goto label12;

     label11:
        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r13 = new org.spongycastle.crypto.paddings.ISO7816d4Padding;

        specialinvoke $r13.<org.spongycastle.crypto.paddings.ISO7816d4Padding: void <init>()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r6, $r13);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label12:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("TBCPADDING");

        if $z0 == 0 goto label13;

        $r4 = new org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $r6 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r14 = new org.spongycastle.crypto.paddings.TBCPadding;

        specialinvoke $r14.<org.spongycastle.crypto.paddings.TBCPadding: void <init>()>();

        specialinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,org.spongycastle.crypto.paddings.BlockCipherPadding)>($r6, $r14);

        r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher> = $r4;

        return;

     label13:
        $r9 = new javax.crypto.NoSuchPaddingException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r9;

     label14:
        return;
    }
    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.spongycastle.crypto.DataLengthException r3;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r4;
        javax.crypto.ShortBufferException $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $i3 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int getUpdateOutputSize(int)>($i1);

        $i3 = $i3 + $i2;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label1;

        $r5 = new javax.crypto.ShortBufferException;

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output buffer too short for input.");

        throw $r5;

     label1:
        $r4 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

     label2:
        $i0 = interfaceinvoke $r4.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label3:
        return $i0;

     label4:
        r3 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r3.<org.spongycastle.crypto.DataLengthException: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.spongycastle.crypto.DataLengthException from label2 to label3 with label4;
    }
    protected byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r3;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $i2 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int getUpdateOutputSize(int)>($i1);

        if $i2 <= 0 goto label3;

        r2 = newarray (byte)[$i2];

        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r2, 0);

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = lengthof r2;

        if $i0 == $i1 goto label2;

        $r1 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, 0, $i0);

        return $r1;

     label2:
        return r2;

     label3:
        $r3 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        interfaceinvoke $r3.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, null, 0);

        return null;
    }
    protected void engineUpdateAAD(java.nio.ByteBuffer)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        java.nio.ByteBuffer $r1;
        int i0, i1, $i2;
        byte[] $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        i1 = i1 + i0;

        i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        i0 = i0 - $i2;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: void engineUpdateAAD(byte[],int,int)>($r2, i1, i0);

        return;
    }
    protected void engineUpdateAAD(byte[], int, int)
    {
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher $r2;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher: void updateAAD(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
