org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory extends org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory
    public void <init>()
    {
        org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory r0;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory;

        specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: void <init>(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier)>("DESede", null);

        return;
    }
    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        javax.crypto.spec.DESedeKeySpec r2;
        javax.crypto.spec.SecretKeySpec $r3;
        byte[] $r4;
        javax.crypto.SecretKey $r5;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.DESedeKeySpec;

        if $z0 == 0 goto label1;

        r2 = (javax.crypto.spec.DESedeKeySpec) $r1;

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = virtualinvoke r2.<javax.crypto.spec.DESedeKeySpec: byte[] getKey()>();

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "DESede");

        return $r3;

     label1:
        $r5 = specialinvoke r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>($r1);

        return $r5;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory r0;
        javax.crypto.SecretKey $r1;
        java.lang.Class $r2, $r6;
        java.lang.Exception r3;
        byte[] r4, $r9;
        java.security.spec.InvalidKeySpecException $r5;
        boolean $z0;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.String $r8;
        int $i0;
        javax.crypto.spec.DESedeKeySpec $r10;

        r0 := @this: org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory;

        $r1 := @parameter0: javax.crypto.SecretKey;

        $r2 := @parameter1: java.lang.Class;

        if $r2 != null goto label01;

        $r5 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec parameter is null");

        throw $r5;

     label01:
        if $r1 != null goto label02;

        $r5 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key parameter is null");

        throw $r5;

     label02:
        $r6 = class "Ljavax/crypto/spec/SecretKeySpec;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label03;

        $r7 = new javax.crypto.spec.SecretKeySpec;

        r4 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r8 = r0.<org.spongycastle.jcajce.provider.symmetric.DESede$KeyFactory: java.lang.String algName>;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, $r8);

        return $r7;

     label03:
        $r6 = class "Ljavax/crypto/spec/DESedeKeySpec;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label14;

        $r9 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label04:
        $i0 = lengthof $r9;

     label05:
        if $i0 != 16 goto label11;

     label06:
        r4 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r4, 0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r4, 16, 8);

     label07:
        $r10 = new javax.crypto.spec.DESedeKeySpec;

     label08:
        specialinvoke $r10.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>(r4);

     label09:
        return $r10;

     label10:
        r3 := @caughtexception;

        $r5 = new java.security.spec.InvalidKeySpecException;

        $r8 = virtualinvoke r3.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label11:
        $r10 = new javax.crypto.spec.DESedeKeySpec;

     label12:
        specialinvoke $r10.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>($r9);

     label13:
        return $r10;

     label14:
        $r5 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r5.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r5;

        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label12 to label13 with label10;
    }
