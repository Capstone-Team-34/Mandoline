org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore extends org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi
    public void <init>()
    {
        org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore r0;

        r0 := @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore;

        specialinvoke r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: void <init>(int)>(1);

        return;
    }
    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore r0;
        java.io.InputStream $r1;
        char[] $r2;
        byte[] r3, r8;
        javax.crypto.CipherInputStream r4;
        java.io.DataInputStream r5;
        org.spongycastle.crypto.io.DigestInputStream r6;
        org.spongycastle.crypto.digests.SHA1Digest r7;
        java.util.Hashtable $r9;
        int $i0, $i1;
        java.io.IOException $r10;
        java.lang.String r11;
        javax.crypto.Cipher $r12;
        boolean $z0;

        r0 := @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: char[];

        $r9 = r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: java.util.Hashtable table>;

        virtualinvoke $r9.<java.util.Hashtable: void clear()>();

        if $r1 != null goto label1;

        return;

     label1:
        r5 = new java.io.DataInputStream;

        specialinvoke r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        if $i0 == 2 goto label2;

        if $i0 == 0 goto label2;

        if $i0 == 1 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Wrong version of key store.");

        throw $r10;

     label2:
        $i1 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        r3 = newarray (byte)[$i1];

        $i1 = lengthof r3;

        if $i1 == 20 goto label3;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r10;

     label3:
        virtualinvoke r5.<java.io.DataInputStream: void readFully(byte[])>(r3);

        $i1 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        if $i1 < 0 goto label4;

        if $i1 <= 4096 goto label5;

     label4:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r10;

     label5:
        if $i0 != 0 goto label7;

        r11 = "OldPBEWithSHAAndTwofish-CBC";

     label6:
        $r12 = virtualinvoke r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>(r11, 2, $r2, r3, $i1);

        r4 = new javax.crypto.CipherInputStream;

        specialinvoke r4.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r5, $r12);

        r7 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke r7.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        r6 = new org.spongycastle.crypto.io.DigestInputStream;

        specialinvoke r6.<org.spongycastle.crypto.io.DigestInputStream: void <init>(java.io.InputStream,org.spongycastle.crypto.Digest)>(r4, r7);

        virtualinvoke r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: void loadStore(java.io.InputStream)>(r6);

        $i0 = interfaceinvoke r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        interfaceinvoke r7.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i0 = interfaceinvoke r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r8 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>(r4, r8);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>(r3, r8);

        if $z0 != 0 goto label8;

        $r9 = r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: java.util.Hashtable table>;

        virtualinvoke $r9.<java.util.Hashtable: void clear()>();

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("KeyStore integrity check failed.");

        throw $r10;

     label7:
        r11 = "PBEWithSHAAndTwofish-CBC";

        goto label6;

     label8:
        return;
    }
    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException
    {
        org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore r0;
        java.io.OutputStream $r1;
        char[] $r2;
        byte[] r3;
        int i0, $i1;
        javax.crypto.CipherOutputStream r4;
        java.io.DataOutputStream r5;
        org.spongycastle.crypto.io.DigestOutputStream r6;
        java.security.SecureRandom $r7;
        javax.crypto.Cipher $r8;
        org.spongycastle.crypto.digests.SHA1Digest $r9;
        org.spongycastle.util.io.TeeOutputStream $r10;

        r0 := @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: char[];

        r5 = new java.io.DataOutputStream;

        specialinvoke r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        r3 = newarray (byte)[20];

        $r7 = r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: java.security.SecureRandom random>;

        i0 = virtualinvoke $r7.<java.security.SecureRandom: int nextInt()>();

        i0 = i0 & 1023;

        i0 = i0 + 1024;

        $r7 = r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        $i1 = r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: int version>;

        virtualinvoke r5.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $i1 = lengthof r3;

        virtualinvoke r5.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke r5.<java.io.DataOutputStream: void write(byte[])>(r3);

        virtualinvoke r5.<java.io.DataOutputStream: void writeInt(int)>(i0);

        $r8 = virtualinvoke r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>("PBEWithSHAAndTwofish-CBC", 1, $r2, r3, i0);

        r4 = new javax.crypto.CipherOutputStream;

        specialinvoke r4.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>(r5, $r8);

        r6 = new org.spongycastle.crypto.io.DigestOutputStream;

        $r9 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r9.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r6.<org.spongycastle.crypto.io.DigestOutputStream: void <init>(org.spongycastle.crypto.Digest)>($r9);

        $r10 = new org.spongycastle.util.io.TeeOutputStream;

        specialinvoke $r10.<org.spongycastle.util.io.TeeOutputStream: void <init>(java.io.OutputStream,java.io.OutputStream)>(r4, r6);

        virtualinvoke r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore: void saveStore(java.io.OutputStream)>($r10);

        r3 = virtualinvoke r6.<org.spongycastle.crypto.io.DigestOutputStream: byte[] getDigest()>();

        virtualinvoke r4.<javax.crypto.CipherOutputStream: void write(byte[])>(r3);

        virtualinvoke r4.<javax.crypto.CipherOutputStream: void close()>();

        return;
    }
