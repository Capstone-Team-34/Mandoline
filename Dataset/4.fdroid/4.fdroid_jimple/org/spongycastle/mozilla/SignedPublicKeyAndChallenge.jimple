org.spongycastle.mozilla.SignedPublicKeyAndChallenge extends java.lang.Object implements org.spongycastle.util.Encodable
protected final org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq
    protected void <init>(org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge)
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r1;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 := @parameter0: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq> = $r1;

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        byte[] $r1;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r2;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge getInstance(java.lang.Object)>($r1);

        r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq> = $r2;

        return;
    }
    public java.lang.String getChallenge()
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r1;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r2;
        org.spongycastle.asn1.DERIA5String $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.mozilla.PublicKeyAndChallenge: org.spongycastle.asn1.DERIA5String getChallenge()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.DERIA5String: java.lang.String getString()>();

        return $r4;
    }
    public byte[] getEncoded() throws java.io.IOException
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 = virtualinvoke r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge toASN1Structure()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: byte[] getEncoded()>();

        return $r2;
    }
    public java.security.PublicKey getPublicKey(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        java.lang.String $r1, $r11;
        org.spongycastle.asn1.DERBitString r2;
        java.lang.Exception r3;
        java.security.spec.X509EncodedKeySpec r4;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r5;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r6;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r7;
        byte[] $r8;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r9;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r10;
        java.security.KeyFactory $r12;
        java.security.PublicKey $r13;
        java.security.InvalidKeyException $r14;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 := @parameter0: java.lang.String;

        $r5 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.mozilla.PublicKeyAndChallenge: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        r2 = new org.spongycastle.asn1.DERBitString;

     label1:
        specialinvoke r2.<org.spongycastle.asn1.DERBitString: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r7);

     label2:
        r4 = new java.security.spec.X509EncodedKeySpec;

     label3:
        $r8 = virtualinvoke r2.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        specialinvoke r4.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r8);

        $r9 = virtualinvoke $r7.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r12 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r11, $r1);

        $r13 = virtualinvoke $r12.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r4);

     label4:
        return $r13;

     label5:
        r3 := @caughtexception;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String)>("error encoding public key");

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r1;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r2;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r2 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        return $r1;
    }
    public org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r1;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r2;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r3;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.mozilla.PublicKeyAndChallenge: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        return $r3;
    }
    public boolean isSignatureValid(org.spongycastle.operator.ContentVerifierProvider) throws org.spongycastle.operator.OperatorCreationException, java.io.IOException
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.operator.ContentVerifierProvider $r1;
        org.spongycastle.asn1.DEROutputStream r2;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.operator.ContentVerifier $r5;
        java.io.OutputStream $r6;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r7;
        org.spongycastle.asn1.DERBitString $r8;
        byte[] $r9;
        boolean $z0;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 := @parameter0: org.spongycastle.operator.ContentVerifierProvider;

        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm()>();

        $r5 = interfaceinvoke $r1.<org.spongycastle.operator.ContentVerifierProvider: org.spongycastle.operator.ContentVerifier get(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r4);

        $r6 = interfaceinvoke $r5.<org.spongycastle.operator.ContentVerifier: java.io.OutputStream getOutputStream()>();

        r2 = new org.spongycastle.asn1.DEROutputStream;

        specialinvoke r2.<org.spongycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r6);

        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r7 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        virtualinvoke r2.<org.spongycastle.asn1.DEROutputStream: void writeObject(org.spongycastle.asn1.ASN1Encodable)>($r7);

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r8 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.DERBitString getSignature()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = interfaceinvoke $r5.<org.spongycastle.operator.ContentVerifier: boolean verify(byte[])>($r9);

        return $z0;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.ASN1Primitive $r1;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r2;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r2 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        return $r1;
    }
    public org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge toASN1Structure()
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge r1;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        r1 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        return r1;
    }
    public boolean verify() throws java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        boolean $z0;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $z0 = virtualinvoke r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: boolean verify(java.lang.String)>(null);

        return $z0;
    }
    public boolean verify(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.NoSuchProviderException, java.security.InvalidKeyException
    {
        org.spongycastle.mozilla.SignedPublicKeyAndChallenge r0;
        java.lang.String $r1, $r6;
        java.lang.Exception r2;
        org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        java.security.Signature $r7;
        java.security.PublicKey $r8;
        org.spongycastle.asn1.mozilla.PublicKeyAndChallenge $r9;
        byte[] $r10;
        org.spongycastle.asn1.DERBitString $r11;
        boolean $z0;
        java.security.InvalidKeyException $r12;

        r0 := @this: org.spongycastle.mozilla.SignedPublicKeyAndChallenge;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label4;

        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6);

     label1:
        $r8 = virtualinvoke r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: java.security.PublicKey getPublicKey(java.lang.String)>($r1);

        virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r8);

     label2:
        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r9 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge()>();

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.mozilla.PublicKeyAndChallenge: byte[] getEncoded()>();

        virtualinvoke $r7.<java.security.Signature: void update(byte[])>($r10);

        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r11 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.DERBitString getSignature()>();

        $r10 = virtualinvoke $r11.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r10);

     label3:
        return $z0;

     label4:
        $r3 = r0.<org.spongycastle.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge spkacSeq>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.mozilla.SignedPublicKeyAndChallenge: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r6, $r1);

        goto label1;

     label5:
        r2 := @caughtexception;

        $r12 = new java.security.InvalidKeyException;

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>("error encoding public key");

        throw $r12;

        catch java.lang.Exception from label2 to label3 with label5;
    }
