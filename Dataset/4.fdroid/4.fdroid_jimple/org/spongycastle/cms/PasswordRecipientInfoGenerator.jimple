org.spongycastle.cms.PasswordRecipientInfoGenerator extends java.lang.Object implements org.spongycastle.cms.RecipientInfoGenerator
private int blockSize
private org.spongycastle.asn1.ASN1ObjectIdentifier kekAlgorithm
private org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm
private int keySize
protected char[] password
private java.security.SecureRandom random
private int schemeID
    protected void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, char[])
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        char[] $r2;
        int $i0, $i1;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: char[];

        $i0 = staticinvoke <org.spongycastle.cms.PasswordRecipientInfoGenerator: int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1);

        $r3 = <org.spongycastle.cms.PasswordRecipientInformation: java.util.Map BLOCKSIZES>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,char[],int,int)>($r1, $r2, $i0, $i1);

        return;
    }
    protected void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, char[], int, int)
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        char[] $r2;
        int $i0, $i1;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: char[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: char[] password> = $r2;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int schemeID> = 1;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier kekAlgorithm> = $r1;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int keySize> = $i0;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int blockSize> = $i1;

        return;
    }
    private static int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.asn1.ASN1ObjectIdentifier $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.Integer r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        int $i0;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.spongycastle.cms.PasswordRecipientInformation: java.util.Map KEYSIZES>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (java.lang.Integer) $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find key size for algorithm: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }
protected abstract byte[] calculateDerivedKey(int, org.spongycastle.asn1.x509.AlgorithmIdentifier, int) throws org.spongycastle.cms.CMSException { 
// no body
} 
    public org.spongycastle.asn1.cms.RecipientInfo generate(org.spongycastle.operator.GenericKey) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        org.spongycastle.operator.GenericKey $r1;
        org.spongycastle.asn1.DEROctetString r2, $r10;
        byte[] r3, r5;
        org.spongycastle.asn1.x509.AlgorithmIdentifier r4, $r14;
        org.spongycastle.asn1.ASN1EncodableVector r6;
        int $i0, $i1;
        java.security.SecureRandom $r7;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r8;
        org.spongycastle.asn1.pkcs.PBKDF2Params $r9;
        org.spongycastle.asn1.DERSequence $r11;
        org.spongycastle.asn1.cms.RecipientInfo $r12;
        org.spongycastle.asn1.cms.PasswordRecipientInfo $r13;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $r1 := @parameter0: org.spongycastle.operator.GenericKey;

        $i0 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int blockSize>;

        r3 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: java.security.SecureRandom random>;

        if $r7 != null goto label1;

        $r7 = new java.security.SecureRandom;

        specialinvoke $r7.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: java.security.SecureRandom random> = $r7;

     label1:
        $r7 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        r4 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm>;

        if r4 != null goto label2;

        r5 = newarray (byte)[20];

        $r7 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

        r4 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r8 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_PBKDF2>;

        $r9 = new org.spongycastle.asn1.pkcs.PBKDF2Params;

        specialinvoke $r9.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(byte[],int)>(r5, 1024);

        specialinvoke r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r8, $r9);

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm> = r4;

     label2:
        $i0 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int schemeID>;

        r4 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm>;

        $i1 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int keySize>;

        r5 = virtualinvoke r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: byte[] calculateDerivedKey(int,org.spongycastle.asn1.x509.AlgorithmIdentifier,int)>($i0, r4, $i1);

        r4 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r8 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier kekAlgorithm>;

        r2 = new org.spongycastle.asn1.DEROctetString;

        specialinvoke r2.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>(r3);

        specialinvoke r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r8, r2);

        r5 = virtualinvoke r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: byte[] generateEncryptedBytes(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[],org.spongycastle.operator.GenericKey)>(r4, r5, $r1);

        r2 = new org.spongycastle.asn1.DEROctetString;

        specialinvoke r2.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>(r5);

        r6 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r6.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r8 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier kekAlgorithm>;

        virtualinvoke r6.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r10 = new org.spongycastle.asn1.DEROctetString;

        specialinvoke $r10.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>(r3);

        virtualinvoke r6.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r10);

        r4 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r8 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_PWRI_KEK>;

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r6);

        specialinvoke r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r8, $r11);

        $r12 = new org.spongycastle.asn1.cms.RecipientInfo;

        $r13 = new org.spongycastle.asn1.cms.PasswordRecipientInfo;

        $r14 = r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm>;

        specialinvoke $r13.<org.spongycastle.asn1.cms.PasswordRecipientInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1OctetString)>($r14, r4, r2);

        specialinvoke $r12.<org.spongycastle.asn1.cms.RecipientInfo: void <init>(org.spongycastle.asn1.cms.PasswordRecipientInfo)>($r13);

        return $r12;
    }
protected abstract byte[] generateEncryptedBytes(org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[], org.spongycastle.operator.GenericKey) throws org.spongycastle.cms.CMSException { 
// no body
} 
    public org.spongycastle.cms.PasswordRecipientInfoGenerator setPasswordConversionScheme(int)
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        int $i0;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: int schemeID> = $i0;

        return r0;
    }
    public org.spongycastle.cms.PasswordRecipientInfoGenerator setSaltAndIterationCount(byte[], int)
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        org.spongycastle.asn1.pkcs.PBKDF2Params $r4;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_PBKDF2>;

        $r4 = new org.spongycastle.asn1.pkcs.PBKDF2Params;

        specialinvoke $r4.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(byte[],int)>($r1, $i0);

        specialinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r3, $r4);

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm> = $r2;

        return r0;
    }
    public org.spongycastle.cms.PasswordRecipientInfoGenerator setSecureRandom(java.security.SecureRandom)
    {
        org.spongycastle.cms.PasswordRecipientInfoGenerator r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.cms.PasswordRecipientInfoGenerator;

        $r1 := @parameter0: java.security.SecureRandom;

        r0.<org.spongycastle.cms.PasswordRecipientInfoGenerator: java.security.SecureRandom random> = $r1;

        return r0;
    }
