org.spongycastle.cms.bc.BcPasswordRecipient extends java.lang.Object implements org.spongycastle.cms.PasswordRecipient
private char[] password
private int schemeID
    void <init>(char[])
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        char[] $r1;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        $r1 := @parameter0: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cms.bc.BcPasswordRecipient: int schemeID> = 1;

        r0.<org.spongycastle.cms.bc.BcPasswordRecipient: char[] password> = $r1;

        return;
    }
    public byte[] calculateDerivedKey(int, org.spongycastle.asn1.x509.AlgorithmIdentifier, int) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        int $i0, $i1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r2;
        org.spongycastle.asn1.ASN1Encodable $r3;
        org.spongycastle.asn1.pkcs.PBKDF2Params $r4;
        char[] $r5;
        byte[] $r6, $r7;
        java.math.BigInteger $r8;
        org.spongycastle.crypto.CipherParameters $r9;
        org.spongycastle.crypto.params.KeyParameter $r10;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $i1 := @parameter2: int;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r4 = staticinvoke <org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.pkcs.PBKDF2Params getInstance(java.lang.Object)>($r3);

        if $i0 != 0 goto label2;

        $r5 = r0.<org.spongycastle.cms.bc.BcPasswordRecipient: char[] password>;

        $r6 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r5);

     label1:
        r2 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>()>();

        $r7 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.PBKDF2Params: byte[] getSalt()>();

        $r8 = virtualinvoke $r4.<org.spongycastle.asn1.pkcs.PBKDF2Params: java.math.BigInteger getIterationCount()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        virtualinvoke r2.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void init(byte[],byte[],int)>($r6, $r7, $i0);

        $r9 = virtualinvoke r2.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i1);

        $r10 = (org.spongycastle.crypto.params.KeyParameter) $r9;

        $r6 = virtualinvoke $r10.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        return $r6;

     label2:
        $r5 = r0.<org.spongycastle.cms.bc.BcPasswordRecipient: char[] password>;

        $r6 = staticinvoke <org.spongycastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToUTF8Bytes(char[])>($r5);

        goto label1;
    }
    protected org.spongycastle.crypto.params.KeyParameter extractSecretKey(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[], byte[]) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;
        byte[] $r3, $r4;
        org.spongycastle.crypto.InvalidCipherTextException r5;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r6;
        org.spongycastle.crypto.Wrapper $r7;
        org.spongycastle.crypto.params.ParametersWithIV $r8;
        org.spongycastle.crypto.params.KeyParameter $r9;
        org.spongycastle.asn1.ASN1Encodable $r10;
        org.spongycastle.asn1.ASN1OctetString $r11;
        int $i0;
        org.spongycastle.cms.CMSException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r7 = staticinvoke <org.spongycastle.cms.bc.EnvelopedDataHelper: org.spongycastle.crypto.Wrapper createRFC3211Wrapper(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r6);

        $r8 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r9 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r9.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        $r10 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r11 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r10);

        $r3 = virtualinvoke $r11.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        specialinvoke $r8.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r9, $r3);

        interfaceinvoke $r7.<org.spongycastle.crypto.Wrapper: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r8);

        $r9 = new org.spongycastle.crypto.params.KeyParameter;

        $i0 = lengthof $r4;

     label1:
        $r3 = interfaceinvoke $r7.<org.spongycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>($r4, 0, $i0);

        specialinvoke $r9.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

     label2:
        return $r9;

     label3:
        r5 := @caughtexception;

        $r12 = new org.spongycastle.cms.CMSException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to unwrap key: ");

        $r14 = virtualinvoke r5.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.spongycastle.cms.CMSException: void <init>(java.lang.String,java.lang.Exception)>($r14, r5);

        throw $r12;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }
    public char[] getPassword()
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        char[] r1;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        r1 = r0.<org.spongycastle.cms.bc.BcPasswordRecipient: char[] password>;

        return r1;
    }
    public int getPasswordConversionScheme()
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        int i0;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        i0 = r0.<org.spongycastle.cms.bc.BcPasswordRecipient: int schemeID>;

        return i0;
    }
    public org.spongycastle.cms.bc.BcPasswordRecipient setPasswordConversionScheme(int)
    {
        org.spongycastle.cms.bc.BcPasswordRecipient r0;
        int $i0;

        r0 := @this: org.spongycastle.cms.bc.BcPasswordRecipient;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.cms.bc.BcPasswordRecipient: int schemeID> = $i0;

        return r0;
    }
