org.spongycastle.cms.CMSProcessableInputStream extends java.lang.Object implements org.spongycastle.cms.CMSProcessable org.spongycastle.cms.CMSReadable
private java.io.InputStream input
private boolean used
    public void <init>(java.io.InputStream)
    {
        org.spongycastle.cms.CMSProcessableInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.spongycastle.cms.CMSProcessableInputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cms.CMSProcessableInputStream: boolean used> = 0;

        r0.<org.spongycastle.cms.CMSProcessableInputStream: java.io.InputStream input> = $r1;

        return;
    }
    private void checkSingleUsage()
    {
        org.spongycastle.cms.CMSProcessableInputStream r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.cms.CMSProcessableInputStream;

        entermonitor r0;

     label1:
        $z0 = r0.<org.spongycastle.cms.CMSProcessableInputStream: boolean used>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CMSProcessableInputStream can only be used once");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        r0.<org.spongycastle.cms.CMSProcessableInputStream: boolean used> = 1;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    public java.lang.Object getContent()
    {
        org.spongycastle.cms.CMSProcessableInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.spongycastle.cms.CMSProcessableInputStream;

        $r1 = virtualinvoke r0.<org.spongycastle.cms.CMSProcessableInputStream: java.io.InputStream getInputStream()>();

        return $r1;
    }
    public java.io.InputStream getInputStream()
    {
        org.spongycastle.cms.CMSProcessableInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.spongycastle.cms.CMSProcessableInputStream;

        specialinvoke r0.<org.spongycastle.cms.CMSProcessableInputStream: void checkSingleUsage()>();

        r1 = r0.<org.spongycastle.cms.CMSProcessableInputStream: java.io.InputStream input>;

        return r1;
    }
    public void write(java.io.OutputStream) throws java.io.IOException, org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.CMSProcessableInputStream r0;
        java.io.OutputStream $r1;
        java.io.InputStream $r2;

        r0 := @this: org.spongycastle.cms.CMSProcessableInputStream;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.spongycastle.cms.CMSProcessableInputStream: void checkSingleUsage()>();

        $r2 = r0.<org.spongycastle.cms.CMSProcessableInputStream: java.io.InputStream input>;

        staticinvoke <org.spongycastle.util.io.Streams: void pipeAll(java.io.InputStream,java.io.OutputStream)>($r2, $r1);

        $r2 = r0.<org.spongycastle.cms.CMSProcessableInputStream: java.io.InputStream input>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        return;
    }
