org.spongycastle.cms.CMSEnvelopedDataGenerator extends org.spongycastle.cms.CMSEnvelopedGenerator
    public void <init>()
    {
        org.spongycastle.cms.CMSEnvelopedDataGenerator r0;

        r0 := @this: org.spongycastle.cms.CMSEnvelopedDataGenerator;

        specialinvoke r0.<org.spongycastle.cms.CMSEnvelopedGenerator: void <init>()>();

        return;
    }
    private org.spongycastle.cms.CMSEnvelopedData doGenerate(org.spongycastle.cms.CMSTypedData, org.spongycastle.operator.OutputEncryptor) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.CMSEnvelopedDataGenerator r0;
        org.spongycastle.cms.CMSTypedData $r1;
        org.spongycastle.operator.OutputEncryptor $r2;
        java.io.ByteArrayOutputStream r3;
        org.spongycastle.asn1.cms.ContentInfo r4;
        java.io.IOException r5;
        org.spongycastle.asn1.cms.EncryptedContentInfo r6;
        org.spongycastle.asn1.BEROctetString r7;
        org.spongycastle.asn1.ASN1EncodableVector r8, $r26;
        org.spongycastle.asn1.DERSet $r9;
        java.util.List $r10;
        boolean $z0;
        java.lang.IllegalStateException $r11;
        java.io.OutputStream $r12;
        byte[] $r13;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r14;
        org.spongycastle.operator.GenericKey $r15;
        java.util.Iterator $r16;
        java.lang.Object $r17;
        org.spongycastle.cms.RecipientInfoGenerator r18;
        org.spongycastle.asn1.cms.RecipientInfo $r19;
        org.spongycastle.cms.CMSException $r20;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r21;
        org.spongycastle.asn1.BERSet r22;
        org.spongycastle.cms.CMSAttributeTableGenerator $r23;
        java.util.HashMap $r24;
        org.spongycastle.asn1.cms.AttributeTable $r25;
        org.spongycastle.asn1.cms.EnvelopedData $r27;
        org.spongycastle.asn1.cms.OriginatorInfo $r28;
        org.spongycastle.cms.CMSEnvelopedData $r29;

        r0 := @this: org.spongycastle.cms.CMSEnvelopedDataGenerator;

        $r1 := @parameter0: org.spongycastle.cms.CMSTypedData;

        $r2 := @parameter1: org.spongycastle.operator.OutputEncryptor;

        $r10 = r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: java.util.List oldRecipientInfoGenerators>;

        $z0 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can only use addRecipientGenerator() with this method");

        throw $r11;

     label1:
        r8 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r8.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r3 = new java.io.ByteArrayOutputStream;

        specialinvoke r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        $r12 = interfaceinvoke $r2.<org.spongycastle.operator.OutputEncryptor: java.io.OutputStream getOutputStream(java.io.OutputStream)>(r3);

        interfaceinvoke $r1.<org.spongycastle.cms.CMSTypedData: void write(java.io.OutputStream)>($r12);

        virtualinvoke $r12.<java.io.OutputStream: void close()>();

     label3:
        $r13 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r14 = interfaceinvoke $r2.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        r7 = new org.spongycastle.asn1.BEROctetString;

        specialinvoke r7.<org.spongycastle.asn1.BEROctetString: void <init>(byte[])>($r13);

        $r15 = interfaceinvoke $r2.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.operator.GenericKey getKey()>();

        $r10 = r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: java.util.List recipientInfoGenerators>;

        $r16 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.spongycastle.cms.RecipientInfoGenerator) $r17;

        $r19 = interfaceinvoke r18.<org.spongycastle.cms.RecipientInfoGenerator: org.spongycastle.asn1.cms.RecipientInfo generate(org.spongycastle.operator.GenericKey)>($r15);

        virtualinvoke r8.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r19);

        goto label4;

     label5:
        r5 := @caughtexception;

        $r20 = new org.spongycastle.cms.CMSException;

        specialinvoke $r20.<org.spongycastle.cms.CMSException: void <init>(java.lang.String)>("");

        throw $r20;

     label6:
        r6 = new org.spongycastle.asn1.cms.EncryptedContentInfo;

        $r21 = interfaceinvoke $r1.<org.spongycastle.cms.CMSTypedData: org.spongycastle.asn1.ASN1ObjectIdentifier getContentType()>();

        specialinvoke r6.<org.spongycastle.asn1.cms.EncryptedContentInfo: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1OctetString)>($r21, $r14, r7);

        r22 = null;

        $r23 = r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: org.spongycastle.cms.CMSAttributeTableGenerator unprotectedAttributeGenerator>;

        if $r23 == null goto label7;

        $r23 = r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: org.spongycastle.cms.CMSAttributeTableGenerator unprotectedAttributeGenerator>;

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        $r25 = interfaceinvoke $r23.<org.spongycastle.cms.CMSAttributeTableGenerator: org.spongycastle.asn1.cms.AttributeTable getAttributes(java.util.Map)>($r24);

        r22 = new org.spongycastle.asn1.BERSet;

        $r26 = virtualinvoke $r25.<org.spongycastle.asn1.cms.AttributeTable: org.spongycastle.asn1.ASN1EncodableVector toASN1EncodableVector()>();

        specialinvoke r22.<org.spongycastle.asn1.BERSet: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>($r26);

     label7:
        r4 = new org.spongycastle.asn1.cms.ContentInfo;

        $r21 = <org.spongycastle.asn1.cms.CMSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier envelopedData>;

        $r27 = new org.spongycastle.asn1.cms.EnvelopedData;

        $r28 = r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo>;

        $r9 = new org.spongycastle.asn1.DERSet;

        specialinvoke $r9.<org.spongycastle.asn1.DERSet: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r8);

        specialinvoke $r27.<org.spongycastle.asn1.cms.EnvelopedData: void <init>(org.spongycastle.asn1.cms.OriginatorInfo,org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.cms.EncryptedContentInfo,org.spongycastle.asn1.ASN1Set)>($r28, $r9, r6, r22);

        specialinvoke r4.<org.spongycastle.asn1.cms.ContentInfo: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r21, $r27);

        $r29 = new org.spongycastle.cms.CMSEnvelopedData;

        specialinvoke $r29.<org.spongycastle.cms.CMSEnvelopedData: void <init>(org.spongycastle.asn1.cms.ContentInfo)>(r4);

        return $r29;

        catch java.io.IOException from label2 to label3 with label5;
    }
    public org.spongycastle.cms.CMSEnvelopedData generate(org.spongycastle.cms.CMSTypedData, org.spongycastle.operator.OutputEncryptor) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cms.CMSEnvelopedDataGenerator r0;
        org.spongycastle.cms.CMSTypedData $r1;
        org.spongycastle.operator.OutputEncryptor $r2;
        org.spongycastle.cms.CMSEnvelopedData $r3;

        r0 := @this: org.spongycastle.cms.CMSEnvelopedDataGenerator;

        $r1 := @parameter0: org.spongycastle.cms.CMSTypedData;

        $r2 := @parameter1: org.spongycastle.operator.OutputEncryptor;

        $r3 = specialinvoke r0.<org.spongycastle.cms.CMSEnvelopedDataGenerator: org.spongycastle.cms.CMSEnvelopedData doGenerate(org.spongycastle.cms.CMSTypedData,org.spongycastle.operator.OutputEncryptor)>($r1, $r2);

        return $r3;
    }
