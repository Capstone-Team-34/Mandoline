org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator extends org.spongycastle.cms.KeyTransRecipientInfoGenerator
private static final byte[] ANONYMOUS_SENDER
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] decode(java.lang.String)>("0c14416e6f6e796d6f75732053656e64657220202020");

        <org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: byte[] ANONYMOUS_SENDER> = $r0;

        return;
    }
    public void <init>(java.security.cert.X509Certificate, java.lang.String, int) throws java.security.cert.CertificateEncodingException
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;
        int $i0;
        org.spongycastle.asn1.cms.IssuerAndSerialNumber $r3;
        org.spongycastle.asn1.x509.Certificate $r4;
        org.spongycastle.cert.jcajce.JcaX509CertificateHolder $r5;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = new org.spongycastle.asn1.cms.IssuerAndSerialNumber;

        $r5 = new org.spongycastle.cert.jcajce.JcaX509CertificateHolder;

        specialinvoke $r5.<org.spongycastle.cert.jcajce.JcaX509CertificateHolder: void <init>(java.security.cert.X509Certificate)>($r1);

        $r4 = virtualinvoke $r5.<org.spongycastle.cert.jcajce.JcaX509CertificateHolder: org.spongycastle.asn1.x509.Certificate toASN1Structure()>();

        specialinvoke $r3.<org.spongycastle.asn1.cms.IssuerAndSerialNumber: void <init>(org.spongycastle.asn1.x509.Certificate)>($r4);

        specialinvoke r0.<org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: void <init>(java.security.cert.X509Certificate,org.spongycastle.asn1.cms.IssuerAndSerialNumber,java.lang.String,int)>($r1, $r3, $r2, $i0);

        return;
    }
    private void <init>(java.security.cert.X509Certificate, org.spongycastle.asn1.cms.IssuerAndSerialNumber, java.lang.String, int) throws java.security.cert.CertificateEncodingException
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        java.security.cert.X509Certificate $r1;
        org.spongycastle.asn1.cms.IssuerAndSerialNumber $r2;
        java.lang.String $r3;
        int $i0;
        org.spongycastle.operator.jcajce.JceKTSKeyWrapper $r4;
        byte[] $r5, $r6;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: org.spongycastle.asn1.cms.IssuerAndSerialNumber;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 = new org.spongycastle.operator.jcajce.JceKTSKeyWrapper;

        $r5 = <org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: byte[] ANONYMOUS_SENDER>;

        $r6 = staticinvoke <org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: byte[] getEncodedRecipID(org.spongycastle.asn1.cms.IssuerAndSerialNumber)>($r2);

        specialinvoke $r4.<org.spongycastle.operator.jcajce.JceKTSKeyWrapper: void <init>(java.security.cert.X509Certificate,java.lang.String,int,byte[],byte[])>($r1, $r3, $i0, $r5, $r6);

        specialinvoke r0.<org.spongycastle.cms.KeyTransRecipientInfoGenerator: void <init>(org.spongycastle.asn1.cms.IssuerAndSerialNumber,org.spongycastle.operator.AsymmetricKeyWrapper)>($r2, $r4);

        return;
    }
    public void <init>(java.security.cert.X509Certificate, org.spongycastle.asn1.x509.AlgorithmIdentifier) throws java.security.cert.CertificateEncodingException
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        java.security.cert.X509Certificate $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        org.spongycastle.asn1.cms.IssuerAndSerialNumber $r3;
        org.spongycastle.cert.jcajce.JcaX509CertificateHolder $r4;
        org.spongycastle.asn1.x509.Certificate $r5;
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper $r6;
        java.security.PublicKey $r7;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 = new org.spongycastle.asn1.cms.IssuerAndSerialNumber;

        $r4 = new org.spongycastle.cert.jcajce.JcaX509CertificateHolder;

        specialinvoke $r4.<org.spongycastle.cert.jcajce.JcaX509CertificateHolder: void <init>(java.security.cert.X509Certificate)>($r1);

        $r5 = virtualinvoke $r4.<org.spongycastle.cert.jcajce.JcaX509CertificateHolder: org.spongycastle.asn1.x509.Certificate toASN1Structure()>();

        specialinvoke $r3.<org.spongycastle.asn1.cms.IssuerAndSerialNumber: void <init>(org.spongycastle.asn1.x509.Certificate)>($r5);

        $r6 = new org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r7 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        specialinvoke $r6.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.PublicKey)>($r2, $r7);

        specialinvoke r0.<org.spongycastle.cms.KeyTransRecipientInfoGenerator: void <init>(org.spongycastle.asn1.cms.IssuerAndSerialNumber,org.spongycastle.operator.AsymmetricKeyWrapper)>($r3, $r6);

        return;
    }
    public void <init>(byte[], java.security.PublicKey, java.lang.String, int)
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        byte[] $r1, $r5, $r6;
        java.security.PublicKey $r2;
        java.lang.String $r3;
        int $i0;
        org.spongycastle.operator.jcajce.JceKTSKeyWrapper $r4;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.security.PublicKey;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 = new org.spongycastle.operator.jcajce.JceKTSKeyWrapper;

        $r5 = <org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: byte[] ANONYMOUS_SENDER>;

        $r6 = staticinvoke <org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: byte[] getEncodedSubKeyId(byte[])>($r1);

        specialinvoke $r4.<org.spongycastle.operator.jcajce.JceKTSKeyWrapper: void <init>(java.security.PublicKey,java.lang.String,int,byte[],byte[])>($r2, $r3, $i0, $r5, $r6);

        specialinvoke r0.<org.spongycastle.cms.KeyTransRecipientInfoGenerator: void <init>(byte[],org.spongycastle.operator.AsymmetricKeyWrapper)>($r1, $r4);

        return;
    }
    public void <init>(byte[], org.spongycastle.asn1.x509.AlgorithmIdentifier, java.security.PublicKey)
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        byte[] $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2;
        java.security.PublicKey $r3;
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper $r4;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter2: java.security.PublicKey;

        $r4 = new org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        specialinvoke $r4.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.PublicKey)>($r2, $r3);

        specialinvoke r0.<org.spongycastle.cms.KeyTransRecipientInfoGenerator: void <init>(byte[],org.spongycastle.operator.AsymmetricKeyWrapper)>($r1, $r4);

        return;
    }
    private static byte[] getEncodedRecipID(org.spongycastle.asn1.cms.IssuerAndSerialNumber) throws java.security.cert.CertificateEncodingException
    {
        org.spongycastle.asn1.cms.IssuerAndSerialNumber $r0;
        java.io.IOException r1;
        byte[] $r2;
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$1 $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: org.spongycastle.asn1.cms.IssuerAndSerialNumber;

     label1:
        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.cms.IssuerAndSerialNumber: byte[] getEncoded(java.lang.String)>("DER");

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot process extracted IssuerAndSerialNumber: ");

        $r5 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$1: void <init>(java.lang.String,java.io.IOException)>($r5, r1);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }
    private static byte[] getEncodedSubKeyId(byte[])
    {
        byte[] $r0;
        java.io.IOException r1;
        org.spongycastle.asn1.DEROctetString $r2;
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$2 $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: byte[];

        $r2 = new org.spongycastle.asn1.DEROctetString;

     label1:
        specialinvoke $r2.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r0);

        $r0 = virtualinvoke $r2.<org.spongycastle.asn1.DEROctetString: byte[] getEncoded()>();

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $r3 = new org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot process subject key identifier: ");

        $r5 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$2: void <init>(java.lang.String,java.io.IOException)>($r5, r1);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator setProvider(java.lang.String)
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        java.lang.String $r1;
        org.spongycastle.operator.AsymmetricKeyWrapper $r2;
        org.spongycastle.operator.jcajce.JceKTSKeyWrapper $r3;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: org.spongycastle.operator.AsymmetricKeyWrapper wrapper>;

        $r3 = (org.spongycastle.operator.jcajce.JceKTSKeyWrapper) $r2;

        virtualinvoke $r3.<org.spongycastle.operator.jcajce.JceKTSKeyWrapper: org.spongycastle.operator.jcajce.JceKTSKeyWrapper setProvider(java.lang.String)>($r1);

        return r0;
    }
    public org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator setProvider(java.security.Provider)
    {
        org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator r0;
        java.security.Provider $r1;
        org.spongycastle.operator.AsymmetricKeyWrapper $r2;
        org.spongycastle.operator.jcajce.JceKTSKeyWrapper $r3;

        r0 := @this: org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator;

        $r1 := @parameter0: java.security.Provider;

        $r2 = r0.<org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator: org.spongycastle.operator.AsymmetricKeyWrapper wrapper>;

        $r3 = (org.spongycastle.operator.jcajce.JceKTSKeyWrapper) $r2;

        virtualinvoke $r3.<org.spongycastle.operator.jcajce.JceKTSKeyWrapper: org.spongycastle.operator.jcajce.JceKTSKeyWrapper setProvider(java.security.Provider)>($r1);

        return r0;
    }
