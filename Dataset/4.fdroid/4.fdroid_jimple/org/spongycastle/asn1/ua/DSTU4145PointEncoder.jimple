org.spongycastle.asn1.ua.DSTU4145PointEncoder extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.asn1.ua.DSTU4145PointEncoder r0;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145PointEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.math.ec.ECPoint decodePoint(org.spongycastle.math.ec.ECCurve, byte[])
    {
        org.spongycastle.math.ec.ECCurve $r0;
        byte[] $r1;
        int $i0;
        byte $b1;
        long $l2;
        java.math.BigInteger $r2, $r9;
        org.spongycastle.math.ec.ECFieldElement $r3, $r4, r5, $r6, $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        org.spongycastle.math.ec.ECPoint $r10;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $b1 = $r1[$i0];

        $i0 = $b1 & 1;

        $l2 = (long) $i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r2);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $r4 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r2);

        r5 = $r4;

        $r6 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement trace(org.spongycastle.math.ec.ECFieldElement)>($r4);

        $r7 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        r5 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement addOne()>();

     label1:
        $r4 = null;

        $z0 = virtualinvoke r5.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement sqrt()>();

     label2:
        if $r4 != null goto label5;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid point compression");

        throw $r8;

     label3:
        $r6 = virtualinvoke r5.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement invert()>();

        $r7 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r7);

        $r7 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>($r7);

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>(r5);

        $r6 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>($r0, $r6);

        $r7 = $r6;

        if $r6 == null goto label2;

        $r4 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement trace(org.spongycastle.math.ec.ECFieldElement)>($r6);

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label4;

        $r7 = virtualinvoke $r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement addOne()>();

     label4:
        $r4 = virtualinvoke r5.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r7);

        goto label2;

     label5:
        $r2 = virtualinvoke r5.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r9 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r10 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r2, $r9);

        return $r10;
    }
    public static byte[] encodePoint(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.math.ec.ECPoint $r0;
        org.spongycastle.math.ec.ECFieldElement $r1, $r3;
        byte[] $r2;
        boolean $z0;
        int $i0, $i2;
        byte $b1;

        $r0 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r1 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement)>($r1);

        $r1 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement trace(org.spongycastle.math.ec.ECFieldElement)>($r1);

        $z0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: boolean isOne()>();

        if $z0 == 0 goto label1;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $b1 = $r2[$i0];

        $i2 = $b1 | 1;

        $b1 = (byte) $i2;

        $r2[$i0] = $b1;

        return $r2;

     label1:
        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $b1 = $r2[$i0];

        $i2 = $b1 & 254;

        $b1 = (byte) $i2;

        $r2[$i0] = $b1;

     label2:
        return $r2;
    }
    private static org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve, org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        java.util.Random r1;
        org.spongycastle.math.ec.ECFieldElement r2, $r4, $r5, r6, r7, $r8;
        boolean $z0;
        java.math.BigInteger $r3;
        int $i0, i1, $i2;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        r2 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $z0 = virtualinvoke r2.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r3 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $r4 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r3);

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke r2.<org.spongycastle.math.ec.ECFieldElement: int getFieldSize()>();

     label2:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, r1);

        $r5 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r3);

        r6 = $r4;

        r7 = r2;

        i1 = 1;

     label3:
        $i2 = $i0 + -1;

        if i1 > $i2 goto label4;

        r7 = virtualinvoke r7.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        r6 = virtualinvoke r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r8 = virtualinvoke r7.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r5);

        r6 = virtualinvoke r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>($r8);

        r7 = virtualinvoke r7.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        $z0 = virtualinvoke r7.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 != 0 goto label5;

        return null;

     label5:
        $r5 = virtualinvoke r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        $r5 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>(r6);

        $z0 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 != 0 goto label2;

        return r6;
    }
    private static org.spongycastle.math.ec.ECFieldElement trace(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.math.ec.ECFieldElement $r0, r1;
        int i0, $i1;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        r1 = $r0;

        i0 = 1;

     label1:
        $i1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECFieldElement: int getFieldSize()>();

        if i0 >= $i1 goto label2;

        r1 = virtualinvoke r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement square()>();

        r1 = virtualinvoke r1.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement)>($r0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
