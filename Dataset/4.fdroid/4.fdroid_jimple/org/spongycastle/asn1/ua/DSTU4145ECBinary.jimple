org.spongycastle.asn1.ua.DSTU4145ECBinary extends org.spongycastle.asn1.ASN1Object
org.spongycastle.asn1.ASN1Integer a
org.spongycastle.asn1.ASN1OctetString b
org.spongycastle.asn1.ASN1OctetString bp
org.spongycastle.asn1.ua.DSTU4145BinaryField f
org.spongycastle.asn1.ASN1Integer n
java.math.BigInteger version
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        java.math.BigInteger $r2;
        int i0;
        org.spongycastle.asn1.ASN1Encodable $r3;
        boolean $z0;
        org.spongycastle.asn1.ASN1TaggedObject r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        org.spongycastle.asn1.ua.DSTU4145BinaryField $r7;
        org.spongycastle.asn1.ASN1OctetString $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: java.math.BigInteger version> = $r2;

        i0 = 0;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1TaggedObject;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        r4 = (org.spongycastle.asn1.ASN1TaggedObject) $r3;

        $z0 = virtualinvoke r4.<org.spongycastle.asn1.ASN1TaggedObject: boolean isExplicit()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r4.<org.spongycastle.asn1.ASN1TaggedObject: int getTagNo()>();

        if i0 != 0 goto label2;

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1TaggedObject: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: java.math.BigInteger version> = $r2;

        i0 = 1;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r7 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145BinaryField: org.spongycastle.asn1.ua.DSTU4145BinaryField getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ua.DSTU4145BinaryField f> = $r7;

        i0 = i0 + 1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer a> = $r6;

        i0 = i0 + 1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString b> = $r8;

        i0 = i0 + 1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer n> = $r6;

        i0 = i0 + 1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString bp> = $r8;

        return;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object parse error");

        throw $r9;
    }
    public void <init>(org.spongycastle.crypto.params.ECDomainParameters)
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;
        java.math.BigInteger $r2;
        org.spongycastle.math.ec.ECCurve $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.math.field.FiniteField $r5;
        org.spongycastle.math.field.PolynomialExtensionField r6;
        org.spongycastle.math.field.Polynomial $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.asn1.ua.DSTU4145BinaryField $r9;
        org.spongycastle.asn1.ASN1Integer $r10;
        org.spongycastle.math.ec.ECFieldElement $r11;
        org.spongycastle.asn1.DEROctetString $r12;
        byte[] $r13;
        org.spongycastle.math.ec.ECPoint $r14;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r1 := @parameter0: org.spongycastle.crypto.params.ECDomainParameters;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: java.math.BigInteger version> = $r2;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isF2mCurve(org.spongycastle.math.ec.ECCurve)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only binary domain is possible");

        throw $r4;

     label1:
        $r5 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        r6 = (org.spongycastle.math.field.PolynomialExtensionField) $r5;

        $r7 = interfaceinvoke r6.<org.spongycastle.math.field.PolynomialExtensionField: org.spongycastle.math.field.Polynomial getMinimalPolynomial()>();

        $r8 = interfaceinvoke $r7.<org.spongycastle.math.field.Polynomial: int[] getExponentsPresent()>();

        $i0 = lengthof $r8;

        if $i0 != 3 goto label3;

        $r9 = new org.spongycastle.asn1.ua.DSTU4145BinaryField;

        $i0 = $r8[2];

        $i1 = $r8[1];

        specialinvoke $r9.<org.spongycastle.asn1.ua.DSTU4145BinaryField: void <init>(int,int)>($i0, $i1);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ua.DSTU4145BinaryField f> = $r9;

     label2:
        $r10 = new org.spongycastle.asn1.ASN1Integer;

        $r11 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r2 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        specialinvoke $r10.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r2);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer a> = $r10;

        $r12 = new org.spongycastle.asn1.DEROctetString;

        $r11 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r13 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        specialinvoke $r12.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r13);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString b> = $r12;

        $r10 = new org.spongycastle.asn1.ASN1Integer;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        specialinvoke $r10.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r2);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer n> = $r10;

        $r12 = new org.spongycastle.asn1.DEROctetString;

        $r14 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r13 = staticinvoke <org.spongycastle.asn1.ua.DSTU4145PointEncoder: byte[] encodePoint(org.spongycastle.math.ec.ECPoint)>($r14);

        specialinvoke $r12.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r13);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString bp> = $r12;

        return;

     label3:
        $i0 = lengthof $r8;

        if $i0 != 5 goto label4;

        $r9 = new org.spongycastle.asn1.ua.DSTU4145BinaryField;

        $i0 = $r8[4];

        $i1 = $r8[1];

        $i2 = $r8[2];

        $i3 = $r8[3];

        specialinvoke $r9.<org.spongycastle.asn1.ua.DSTU4145BinaryField: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ua.DSTU4145BinaryField f> = $r9;

        goto label2;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("curve must have a trinomial or pentanomial basis");

        throw $r4;
    }
    public static org.spongycastle.asn1.ua.DSTU4145ECBinary getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.asn1.ua.DSTU4145ECBinary r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.asn1.ua.DSTU4145ECBinary;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.asn1.ua.DSTU4145ECBinary) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.asn1.ua.DSTU4145ECBinary: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public java.math.BigInteger getA()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        java.math.BigInteger $r1;
        org.spongycastle.asn1.ASN1Integer $r2;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r2 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer a>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        return $r1;
    }
    public byte[] getB()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.asn1.ASN1OctetString $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r1 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString b>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        return $r2;
    }
    public org.spongycastle.asn1.ua.DSTU4145BinaryField getField()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.asn1.ua.DSTU4145BinaryField r1;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        r1 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ua.DSTU4145BinaryField f>;

        return r1;
    }
    public byte[] getG()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.asn1.ASN1OctetString $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r1 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString bp>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        return $r2;
    }
    public java.math.BigInteger getN()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        java.math.BigInteger $r1;
        org.spongycastle.asn1.ASN1Integer $r2;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        $r2 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer n>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        return $r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.asn1.ua.DSTU4145ECBinary r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Integer $r2;
        java.math.BigInteger $r3, $r4;
        int $i0;
        org.spongycastle.asn1.DERTaggedObject $r5;
        org.spongycastle.asn1.ua.DSTU4145BinaryField $r6;
        org.spongycastle.asn1.ASN1OctetString $r7;
        org.spongycastle.asn1.DERSequence $r8;

        r0 := @this: org.spongycastle.asn1.ua.DSTU4145ECBinary;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r3 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: java.math.BigInteger version>;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 == 0 goto label1;

        $r5 = new org.spongycastle.asn1.DERTaggedObject;

        $r2 = new org.spongycastle.asn1.ASN1Integer;

        $r3 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: java.math.BigInteger version>;

        specialinvoke $r2.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r3);

        specialinvoke $r5.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, 0, $r2);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

     label1:
        $r6 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ua.DSTU4145BinaryField f>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r2 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer a>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r7 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString b>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r2 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1Integer n>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r7 = r0.<org.spongycastle.asn1.ua.DSTU4145ECBinary: org.spongycastle.asn1.ASN1OctetString bp>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r8;
    }
