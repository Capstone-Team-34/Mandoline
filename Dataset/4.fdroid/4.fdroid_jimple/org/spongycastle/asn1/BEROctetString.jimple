org.spongycastle.asn1.BEROctetString extends org.spongycastle.asn1.ASN1OctetString
private static final int MAX_LENGTH
private org.spongycastle.asn1.ASN1OctetString[] octs
    public void <init>(byte[])
    {
        org.spongycastle.asn1.BEROctetString r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1OctetString: void <init>(byte[])>($r1);

        return;
    }
    public void <init>(org.spongycastle.asn1.ASN1OctetString[])
    {
        org.spongycastle.asn1.BEROctetString r0;
        org.spongycastle.asn1.ASN1OctetString[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1OctetString[];

        $r2 = staticinvoke <org.spongycastle.asn1.BEROctetString: byte[] toBytes(org.spongycastle.asn1.ASN1OctetString[])>($r1);

        specialinvoke r0.<org.spongycastle.asn1.ASN1OctetString: void <init>(byte[])>($r2);

        r0.<org.spongycastle.asn1.BEROctetString: org.spongycastle.asn1.ASN1OctetString[] octs> = $r1;

        return;
    }
    static org.spongycastle.asn1.ASN1OctetString[] access$000(org.spongycastle.asn1.BEROctetString)
    {
        org.spongycastle.asn1.BEROctetString $r0;
        org.spongycastle.asn1.ASN1OctetString[] r1;

        $r0 := @parameter0: org.spongycastle.asn1.BEROctetString;

        r1 = $r0.<org.spongycastle.asn1.BEROctetString: org.spongycastle.asn1.ASN1OctetString[] octs>;

        return r1;
    }
    static org.spongycastle.asn1.BEROctetString fromSequence(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        int i0, i1;
        org.spongycastle.asn1.ASN1OctetString[] r1;
        java.util.Enumeration $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.spongycastle.asn1.ASN1OctetString $r4;
        org.spongycastle.asn1.BEROctetString $r5;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        i0 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r1 = newarray (org.spongycastle.asn1.ASN1OctetString)[i0];

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        i1 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        r1[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new org.spongycastle.asn1.BEROctetString;

        specialinvoke $r5.<org.spongycastle.asn1.BEROctetString: void <init>(org.spongycastle.asn1.ASN1OctetString[])>(r1);

        return $r5;
    }
    private java.util.Vector generateOcts()
    {
        org.spongycastle.asn1.BEROctetString r0;
        byte[] r1, $r3;
        java.util.Vector r2;
        int $i0, i1, $i2;
        org.spongycastle.asn1.DEROctetString $r4;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

        i1 = 0;

     label1:
        r1 = r0.<org.spongycastle.asn1.BEROctetString: byte[] string>;

        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $i0 = i1 + 1000;

        r1 = r0.<org.spongycastle.asn1.BEROctetString: byte[] string>;

        $i2 = lengthof r1;

        if $i0 <= $i2 goto label3;

        r1 = r0.<org.spongycastle.asn1.BEROctetString: byte[] string>;

        $i0 = lengthof r1;

     label2:
        $i0 = $i0 - i1;

        r1 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.asn1.BEROctetString: byte[] string>;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i1, r1, 0, $i0);

        $r4 = new org.spongycastle.asn1.DEROctetString;

        specialinvoke $r4.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>(r1);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        i1 = i1 + 1000;

        goto label1;

     label3:
        $i0 = i1 + 1000;

        goto label2;

     label4:
        return r2;
    }
    private static byte[] toBytes(org.spongycastle.asn1.ASN1OctetString[])
    {
        org.spongycastle.asn1.ASN1OctetString[] $r0;
        java.io.ByteArrayOutputStream r1;
        int i0, $i1;
        org.spongycastle.asn1.ASN1OctetString r2;
        org.spongycastle.asn1.DEROctetString r3;
        byte[] $r4;
        java.lang.ClassCastException r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;
        java.io.IOException r10;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1OctetString[];

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 == $i1 goto label7;

        r2 = $r0[i0];

     label2:
        r3 = (org.spongycastle.asn1.DEROctetString) r2;

     label3:
        $r4 = virtualinvoke r3.<org.spongycastle.asn1.DEROctetString: byte[] getOctets()>();

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[])>($r4);

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r2 = $r0[i0];

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found in input should only contain DEROctetString");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label6:
        r10 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception converting octets ");

        $r9 = virtualinvoke r10.<java.io.IOException: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label7:
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

        catch java.lang.ClassCastException from label2 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
    }
    public void encode(org.spongycastle.asn1.ASN1OutputStream) throws java.io.IOException
    {
        org.spongycastle.asn1.BEROctetString r0;
        org.spongycastle.asn1.ASN1OutputStream $r1;
        java.util.Enumeration $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.spongycastle.asn1.ASN1Encodable $r4;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1OutputStream;

        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void write(int)>(36);

        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void write(int)>(128);

        $r2 = virtualinvoke r0.<org.spongycastle.asn1.BEROctetString: java.util.Enumeration getObjects()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (org.spongycastle.asn1.ASN1Encodable) $r3;

        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void writeObject(org.spongycastle.asn1.ASN1Encodable)>($r4);

        goto label1;

     label2:
        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void write(int)>(0);

        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void write(int)>(0);

        return;
    }
    int encodedLength() throws java.io.IOException
    {
        org.spongycastle.asn1.BEROctetString r0;
        int i0, $i1;
        java.util.Enumeration $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.spongycastle.asn1.ASN1Encodable $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        i0 = 0;

        $r1 = virtualinvoke r0.<org.spongycastle.asn1.BEROctetString: java.util.Enumeration getObjects()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = (org.spongycastle.asn1.ASN1Encodable) $r2;

        $r4 = interfaceinvoke $r3.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $i1 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Primitive: int encodedLength()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        i0 = i0 + 2;

        i0 = i0 + 2;

        return i0;
    }
    public java.util.Enumeration getObjects()
    {
        org.spongycastle.asn1.BEROctetString r0;
        org.spongycastle.asn1.ASN1OctetString[] $r1;
        java.util.Vector $r2;
        java.util.Enumeration $r3;
        org.spongycastle.asn1.BEROctetString$1 $r4;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        $r1 = r0.<org.spongycastle.asn1.BEROctetString: org.spongycastle.asn1.ASN1OctetString[] octs>;

        if $r1 != null goto label1;

        $r2 = specialinvoke r0.<org.spongycastle.asn1.BEROctetString: java.util.Vector generateOcts()>();

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r3;

     label1:
        $r4 = new org.spongycastle.asn1.BEROctetString$1;

        specialinvoke $r4.<org.spongycastle.asn1.BEROctetString$1: void <init>(org.spongycastle.asn1.BEROctetString)>(r0);

        return $r4;
    }
    public byte[] getOctets()
    {
        org.spongycastle.asn1.BEROctetString r0;
        byte[] r1;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        r1 = r0.<org.spongycastle.asn1.BEROctetString: byte[] string>;

        return r1;
    }
    boolean isConstructed()
    {
        org.spongycastle.asn1.BEROctetString r0;

        r0 := @this: org.spongycastle.asn1.BEROctetString;

        return 1;
    }
