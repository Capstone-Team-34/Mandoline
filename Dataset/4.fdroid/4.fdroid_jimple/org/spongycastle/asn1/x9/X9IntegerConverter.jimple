org.spongycastle.asn1.x9.X9IntegerConverter extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.asn1.x9.X9IntegerConverter r0;

        r0 := @this: org.spongycastle.asn1.x9.X9IntegerConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int getByteLength(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.asn1.x9.X9IntegerConverter r0;
        org.spongycastle.math.ec.ECCurve $r1;
        int $i0;

        r0 := @this: org.spongycastle.asn1.x9.X9IntegerConverter;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $i0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }
    public int getByteLength(org.spongycastle.math.ec.ECFieldElement)
    {
        org.spongycastle.asn1.x9.X9IntegerConverter r0;
        org.spongycastle.math.ec.ECFieldElement $r1;
        int $i0;

        r0 := @this: org.spongycastle.asn1.x9.X9IntegerConverter;

        $r1 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $i0 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: int getFieldSize()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }
    public byte[] integerToBytes(java.math.BigInteger, int)
    {
        org.spongycastle.asn1.x9.X9IntegerConverter r0;
        java.math.BigInteger $r1;
        int $i0, $i1;
        byte[] $r2, r3;

        r0 := @this: org.spongycastle.asn1.x9.X9IntegerConverter;

        $r1 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label1;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof $r2;

        $i1 = lengthof r3;

        $i0 = $i0 - $i1;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, r3, 0, $i1);

        return r3;

     label1:
        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label2;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof r3;

        $i1 = lengthof $r2;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, $i0, $i1);

        return r3;

     label2:
        return $r2;
    }
