org.spongycastle.asn1.x9.X9ECPoint extends org.spongycastle.asn1.ASN1Object
private org.spongycastle.math.ec.ECCurve c
private final org.spongycastle.asn1.ASN1OctetString encoding
private org.spongycastle.math.ec.ECPoint p
    public void <init>(org.spongycastle.math.ec.ECCurve, org.spongycastle.asn1.ASN1OctetString)
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        org.spongycastle.asn1.ASN1OctetString $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: org.spongycastle.asn1.ASN1OctetString;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        specialinvoke r0.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECCurve,byte[])>($r1, $r3);

        return;
    }
    public void <init>(org.spongycastle.math.ec.ECCurve, byte[])
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.math.ec.ECCurve $r1;
        byte[] $r2;
        org.spongycastle.asn1.DEROctetString $r3;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECCurve c> = $r1;

        $r3 = new org.spongycastle.asn1.DEROctetString;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        specialinvoke $r3.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r2);

        r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding> = $r3;

        return;
    }
    public void <init>(org.spongycastle.math.ec.ECPoint)
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.math.ec.ECPoint $r1;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        specialinvoke r0.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECPoint,boolean)>($r1, 0);

        return;
    }
    public void <init>(org.spongycastle.math.ec.ECPoint, boolean)
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.math.ec.ECPoint $r1, $r2;
        boolean $z0;
        org.spongycastle.asn1.DEROctetString $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint p> = $r2;

        $r3 = new org.spongycastle.asn1.DEROctetString;

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded(boolean)>($z0);

        specialinvoke $r3.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r4);

        r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding> = $r3;

        return;
    }
    public org.spongycastle.math.ec.ECPoint getPoint()
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        org.spongycastle.asn1.ASN1OctetString $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint p>;

        if $r1 != null goto label1;

        $r2 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECCurve c>;

        $r3 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r1 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>($r4);

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint p> = $r1;

     label1:
        $r1 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint p>;

        return $r1;
    }
    public byte[] getPointEncoding()
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.asn1.ASN1OctetString $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r1 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        return $r2;
    }
    public boolean isPointCompressed()
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        byte[] $r1;
        org.spongycastle.asn1.ASN1OctetString $r2;
        int $i0;
        byte $b1;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        $r2 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label2;

        $b1 = $r1[0];

        if $b1 == 2 goto label1;

        $b1 = $r1[0];

        if $b1 != 3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.asn1.x9.X9ECPoint r0;
        org.spongycastle.asn1.ASN1OctetString r1;

        r0 := @this: org.spongycastle.asn1.x9.X9ECPoint;

        r1 = r0.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.asn1.ASN1OctetString encoding>;

        return r1;
    }
