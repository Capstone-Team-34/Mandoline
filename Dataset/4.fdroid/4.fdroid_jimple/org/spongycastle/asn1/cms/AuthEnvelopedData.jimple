org.spongycastle.asn1.cms.AuthEnvelopedData extends org.spongycastle.asn1.ASN1Object
private org.spongycastle.asn1.ASN1Set authAttrs
private org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo
private org.spongycastle.asn1.ASN1OctetString mac
private org.spongycastle.asn1.cms.OriginatorInfo originatorInfo
private org.spongycastle.asn1.ASN1Set recipientInfos
private org.spongycastle.asn1.ASN1Set unauthAttrs
private org.spongycastle.asn1.ASN1Integer version
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        int i0, $i1;
        org.spongycastle.asn1.ASN1Encodable $r2;
        org.spongycastle.asn1.ASN1Primitive $r3, r7;
        org.spongycastle.asn1.ASN1Integer r4;
        java.math.BigInteger $r5;
        java.lang.IllegalArgumentException $r6;
        boolean $z0;
        org.spongycastle.asn1.ASN1TaggedObject r8;
        org.spongycastle.asn1.cms.OriginatorInfo $r9;
        org.spongycastle.asn1.ASN1Set $r10;
        org.spongycastle.asn1.cms.EncryptedContentInfo $r11;
        org.spongycastle.asn1.ASN1OctetString $r12;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r13, $r14;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r3 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r4 = (org.spongycastle.asn1.ASN1Integer) $r3;

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Integer version> = r4;

        r4 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Integer version>;

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        if $i1 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AuthEnvelopedData version number must be 0");

        throw $r6;

     label1:
        $i1 = 1 + 1;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r3 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r7 = $r3;

        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1TaggedObject;

        if $z0 == 0 goto label2;

        r8 = (org.spongycastle.asn1.ASN1TaggedObject) $r3;

        $r9 = staticinvoke <org.spongycastle.asn1.cms.OriginatorInfo: org.spongycastle.asn1.cms.OriginatorInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>(r8, 0);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo> = $r9;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        r7 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $i1 = $i1 + 1;

     label2:
        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object)>(r7);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos> = $r10;

        $r10 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos>;

        i0 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Set: int size()>();

        if i0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AuthEnvelopedData requires at least 1 RecipientInfo");

        throw $r6;

     label3:
        i0 = $i1 + 1;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        $r3 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r11 = staticinvoke <org.spongycastle.asn1.cms.EncryptedContentInfo: org.spongycastle.asn1.cms.EncryptedContentInfo getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo> = $r11;

        $i1 = i0 + 1;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r7 = $r3;

        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1TaggedObject;

        if $z0 == 0 goto label5;

        r8 = (org.spongycastle.asn1.ASN1TaggedObject) $r3;

        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>(r8, 0);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs> = $r10;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        r7 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $i1 = $i1 + 1;

     label4:
        $r12 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>(r7);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1OctetString mac> = $r12;

        i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i0 <= $i1 goto label7;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        $r3 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        r8 = (org.spongycastle.asn1.ASN1TaggedObject) $r3;

        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>(r8, 0);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set unauthAttrs> = $r10;

        return;

     label5:
        $r11 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo>;

        $r13 = virtualinvoke $r11.<org.spongycastle.asn1.cms.EncryptedContentInfo: org.spongycastle.asn1.ASN1ObjectIdentifier getContentType()>();

        $r14 = <org.spongycastle.asn1.cms.CMSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier data>;

        $z0 = virtualinvoke $r13.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label4;

        $r10 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs>;

        if $r10 == null goto label6;

        $r10 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs>;

        i0 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Set: int size()>();

        if i0 != 0 goto label4;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authAttrs must be present with non-data content");

        throw $r6;

     label7:
        return;
    }
    public void <init>(org.spongycastle.asn1.cms.OriginatorInfo, org.spongycastle.asn1.ASN1Set, org.spongycastle.asn1.cms.EncryptedContentInfo, org.spongycastle.asn1.ASN1Set, org.spongycastle.asn1.ASN1OctetString, org.spongycastle.asn1.ASN1Set)
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.cms.OriginatorInfo $r1;
        org.spongycastle.asn1.ASN1Set $r2, $r4, $r6;
        org.spongycastle.asn1.cms.EncryptedContentInfo $r3;
        org.spongycastle.asn1.ASN1OctetString $r5;
        org.spongycastle.asn1.ASN1Integer $r7;
        int $i0;
        java.lang.IllegalArgumentException $r8;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r9, $r10;
        boolean $z0;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        $r1 := @parameter0: org.spongycastle.asn1.cms.OriginatorInfo;

        $r2 := @parameter1: org.spongycastle.asn1.ASN1Set;

        $r3 := @parameter2: org.spongycastle.asn1.cms.EncryptedContentInfo;

        $r4 := @parameter3: org.spongycastle.asn1.ASN1Set;

        $r5 := @parameter4: org.spongycastle.asn1.ASN1OctetString;

        $r6 := @parameter5: org.spongycastle.asn1.ASN1Set;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r7 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r7.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>(0L);

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Integer version> = $r7;

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo> = $r1;

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos> = $r2;

        $r2 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos>;

        $i0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Set: int size()>();

        if $i0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AuthEnvelopedData requires at least 1 RecipientInfo");

        throw $r8;

     label1:
        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo> = $r3;

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs> = $r4;

        $r9 = virtualinvoke $r3.<org.spongycastle.asn1.cms.EncryptedContentInfo: org.spongycastle.asn1.ASN1ObjectIdentifier getContentType()>();

        $r10 = <org.spongycastle.asn1.cms.CMSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier data>;

        $z0 = virtualinvoke $r9.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label3;

        if $r4 == null goto label2;

        $i0 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Set: int size()>();

        if $i0 != 0 goto label3;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authAttrs must be present with non-data content");

        throw $r8;

     label3:
        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1OctetString mac> = $r5;

        r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set unauthAttrs> = $r6;

        return;
    }
    public static org.spongycastle.asn1.cms.AuthEnvelopedData getInstance(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        org.spongycastle.asn1.cms.AuthEnvelopedData r1;
        org.spongycastle.asn1.ASN1Sequence r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.spongycastle.asn1.cms.AuthEnvelopedData;

        if $z0 == 0 goto label2;

     label1:
        r1 = (org.spongycastle.asn1.cms.AuthEnvelopedData) r0;

        return r1;

     label2:
        $z0 = r0 instanceof org.spongycastle.asn1.ASN1Sequence;

        if $z0 == 0 goto label3;

        r1 = new org.spongycastle.asn1.cms.AuthEnvelopedData;

        r2 = (org.spongycastle.asn1.ASN1Sequence) r0;

        specialinvoke r1.<org.spongycastle.asn1.cms.AuthEnvelopedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>(r2);

        return r1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid AuthEnvelopedData: ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }
    public static org.spongycastle.asn1.cms.AuthEnvelopedData getInstance(org.spongycastle.asn1.ASN1TaggedObject, boolean)
    {
        org.spongycastle.asn1.ASN1TaggedObject $r0;
        boolean $z0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        org.spongycastle.asn1.cms.AuthEnvelopedData $r2;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1TaggedObject;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r0, $z0);

        $r2 = staticinvoke <org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.AuthEnvelopedData getInstance(java.lang.Object)>($r1);

        return $r2;
    }
    public org.spongycastle.asn1.ASN1Set getAuthAttrs()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1Set r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs>;

        return r1;
    }
    public org.spongycastle.asn1.cms.EncryptedContentInfo getAuthEncryptedContentInfo()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.cms.EncryptedContentInfo r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1OctetString getMac()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1OctetString r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1OctetString mac>;

        return r1;
    }
    public org.spongycastle.asn1.cms.OriginatorInfo getOriginatorInfo()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.cms.OriginatorInfo r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Set getRecipientInfos()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1Set r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Set getUnauthAttrs()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1Set r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set unauthAttrs>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Integer getVersion()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1Integer r1;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Integer version>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.asn1.cms.AuthEnvelopedData r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Integer $r2;
        org.spongycastle.asn1.cms.OriginatorInfo $r3;
        org.spongycastle.asn1.DERTaggedObject $r4;
        org.spongycastle.asn1.ASN1Set $r5;
        org.spongycastle.asn1.cms.EncryptedContentInfo $r6;
        org.spongycastle.asn1.ASN1OctetString $r7;
        org.spongycastle.asn1.BERSequence $r8;

        r0 := @this: org.spongycastle.asn1.cms.AuthEnvelopedData;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r2 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Integer version>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r3 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo>;

        if $r3 == null goto label1;

        $r4 = new org.spongycastle.asn1.DERTaggedObject;

        $r3 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.OriginatorInfo originatorInfo>;

        specialinvoke $r4.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, 0, $r3);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

     label1:
        $r5 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set recipientInfos>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r6 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r5 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs>;

        if $r5 == null goto label2;

        $r4 = new org.spongycastle.asn1.DERTaggedObject;

        $r5 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set authAttrs>;

        specialinvoke $r4.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, 1, $r5);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

     label2:
        $r7 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1OctetString mac>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r5 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set unauthAttrs>;

        if $r5 == null goto label3;

        $r4 = new org.spongycastle.asn1.DERTaggedObject;

        $r5 = r0.<org.spongycastle.asn1.cms.AuthEnvelopedData: org.spongycastle.asn1.ASN1Set unauthAttrs>;

        specialinvoke $r4.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, 2, $r5);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

     label3:
        $r8 = new org.spongycastle.asn1.BERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.BERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r8;
    }
