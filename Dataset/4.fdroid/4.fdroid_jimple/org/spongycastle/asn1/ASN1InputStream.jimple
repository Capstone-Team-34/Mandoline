org.spongycastle.asn1.ASN1InputStream extends java.io.FilterInputStream implements org.spongycastle.asn1.BERTags
private final boolean lazyEvaluate
private final int limit
private final byte[][] tmpBuffers
    public void <init>(java.io.InputStream)
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.asn1.StreamUtil: int findLimit(java.io.InputStream)>($r1);

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int)>($r1, $i0);

        return;
    }
    public void <init>(java.io.InputStream, int)
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>($r1, $i0, 0);

        return;
    }
    public void <init>(java.io.InputStream, int, boolean)
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        java.io.InputStream $r1;
        int $i0;
        boolean $z0;
        byte[][] $r2;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<org.spongycastle.asn1.ASN1InputStream: int limit> = $i0;

        r0.<org.spongycastle.asn1.ASN1InputStream: boolean lazyEvaluate> = $z0;

        $r2 = newarray (byte[])[11];

        r0.<org.spongycastle.asn1.ASN1InputStream: byte[][] tmpBuffers> = $r2;

        return;
    }
    public void <init>(java.io.InputStream, boolean)
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        java.io.InputStream $r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.spongycastle.asn1.StreamUtil: int findLimit(java.io.InputStream)>($r1);

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>($r1, $i0, $z0);

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        byte[] $r1;
        java.io.ByteArrayInputStream $r2;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: byte[];

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $i0 = lengthof $r1;

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int)>($r2, $i0);

        return;
    }
    public void <init>(byte[], boolean)
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        byte[] $r1;
        boolean $z0;
        java.io.ByteArrayInputStream $r2;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $i0 = lengthof $r1;

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>($r2, $i0, $z0);

        return;
    }
    static org.spongycastle.asn1.ASN1Primitive createPrimitiveDERObject(int, org.spongycastle.asn1.DefiniteLengthInputStream, byte[][]) throws java.io.IOException
    {
        int $i0;
        org.spongycastle.asn1.DefiniteLengthInputStream $r0;
        byte[][] $r1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.asn1.DERBitString $r5;
        org.spongycastle.asn1.DERBMPString $r6;
        char[] $r7;
        byte[] $r8;
        org.spongycastle.asn1.ASN1Boolean $r9;
        org.spongycastle.asn1.ASN1Enumerated $r10;
        org.spongycastle.asn1.ASN1GeneralizedTime $r11;
        org.spongycastle.asn1.DERGeneralString $r12;
        org.spongycastle.asn1.DERIA5String $r13;
        org.spongycastle.asn1.ASN1Integer $r14;
        org.spongycastle.asn1.DERNumericString $r15;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r16;
        org.spongycastle.asn1.DEROctetString $r17;
        org.spongycastle.asn1.DERPrintableString $r18;
        org.spongycastle.asn1.DERT61String $r19;
        org.spongycastle.asn1.DERUniversalString $r20;
        org.spongycastle.asn1.ASN1UTCTime $r21;
        org.spongycastle.asn1.DERUTF8String $r22;
        org.spongycastle.asn1.DERVisibleString $r23;
        org.spongycastle.asn1.DERNull r24;

        $i0 := @parameter0: int;

        $r0 := @parameter1: org.spongycastle.asn1.DefiniteLengthInputStream;

        $r1 := @parameter2: byte[][];

        lookupswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label09;
            case 3: goto label02;
            case 4: goto label13;
            case 5: goto label10;
            case 6: goto label12;
            case 7: goto label01;
            case 8: goto label01;
            case 9: goto label01;
            case 10: goto label05;
            case 11: goto label01;
            case 12: goto label18;
            case 13: goto label01;
            case 14: goto label01;
            case 15: goto label01;
            case 16: goto label01;
            case 17: goto label01;
            case 18: goto label11;
            case 19: goto label14;
            case 20: goto label15;
            case 21: goto label01;
            case 22: goto label08;
            case 23: goto label17;
            case 24: goto label06;
            case 25: goto label01;
            case 26: goto label19;
            case 27: goto label07;
            case 28: goto label16;
            case 29: goto label01;
            case 30: goto label03;
            default: goto label01;
        };

     label01:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown tag ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label02:
        $i0 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int getRemaining()>();

        $r5 = staticinvoke <org.spongycastle.asn1.DERBitString: org.spongycastle.asn1.DERBitString fromInputStream(int,java.io.InputStream)>($i0, $r0);

        return $r5;

     label03:
        $r6 = new org.spongycastle.asn1.DERBMPString;

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: char[] getBMPCharBuffer(org.spongycastle.asn1.DefiniteLengthInputStream)>($r0);

        specialinvoke $r6.<org.spongycastle.asn1.DERBMPString: void <init>(char[])>($r7);

        return $r6;

     label04:
        $r8 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: byte[] getBuffer(org.spongycastle.asn1.DefiniteLengthInputStream,byte[][])>($r0, $r1);

        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Boolean: org.spongycastle.asn1.ASN1Boolean fromOctetString(byte[])>($r8);

        return $r9;

     label05:
        $r8 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: byte[] getBuffer(org.spongycastle.asn1.DefiniteLengthInputStream,byte[][])>($r0, $r1);

        $r10 = staticinvoke <org.spongycastle.asn1.ASN1Enumerated: org.spongycastle.asn1.ASN1Enumerated fromOctetString(byte[])>($r8);

        return $r10;

     label06:
        $r11 = new org.spongycastle.asn1.ASN1GeneralizedTime;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r11.<org.spongycastle.asn1.ASN1GeneralizedTime: void <init>(byte[])>($r8);

        return $r11;

     label07:
        $r12 = new org.spongycastle.asn1.DERGeneralString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r12.<org.spongycastle.asn1.DERGeneralString: void <init>(byte[])>($r8);

        return $r12;

     label08:
        $r13 = new org.spongycastle.asn1.DERIA5String;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r13.<org.spongycastle.asn1.DERIA5String: void <init>(byte[])>($r8);

        return $r13;

     label09:
        $r14 = new org.spongycastle.asn1.ASN1Integer;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r14.<org.spongycastle.asn1.ASN1Integer: void <init>(byte[],boolean)>($r8, 0);

        return $r14;

     label10:
        r24 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        return r24;

     label11:
        $r15 = new org.spongycastle.asn1.DERNumericString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r15.<org.spongycastle.asn1.DERNumericString: void <init>(byte[])>($r8);

        return $r15;

     label12:
        $r8 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: byte[] getBuffer(org.spongycastle.asn1.DefiniteLengthInputStream,byte[][])>($r0, $r1);

        $r16 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier fromOctetString(byte[])>($r8);

        return $r16;

     label13:
        $r17 = new org.spongycastle.asn1.DEROctetString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r17.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r8);

        return $r17;

     label14:
        $r18 = new org.spongycastle.asn1.DERPrintableString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r18.<org.spongycastle.asn1.DERPrintableString: void <init>(byte[])>($r8);

        return $r18;

     label15:
        $r19 = new org.spongycastle.asn1.DERT61String;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r19.<org.spongycastle.asn1.DERT61String: void <init>(byte[])>($r8);

        return $r19;

     label16:
        $r20 = new org.spongycastle.asn1.DERUniversalString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r20.<org.spongycastle.asn1.DERUniversalString: void <init>(byte[])>($r8);

        return $r20;

     label17:
        $r21 = new org.spongycastle.asn1.ASN1UTCTime;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r21.<org.spongycastle.asn1.ASN1UTCTime: void <init>(byte[])>($r8);

        return $r21;

     label18:
        $r22 = new org.spongycastle.asn1.DERUTF8String;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r22.<org.spongycastle.asn1.DERUTF8String: void <init>(byte[])>($r8);

        return $r22;

     label19:
        $r23 = new org.spongycastle.asn1.DERVisibleString;

        $r8 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r23.<org.spongycastle.asn1.DERVisibleString: void <init>(byte[])>($r8);

        return $r23;
    }
    private static char[] getBMPCharBuffer(org.spongycastle.asn1.DefiniteLengthInputStream) throws java.io.IOException
    {
        org.spongycastle.asn1.DefiniteLengthInputStream $r0;
        char[] r1;
        int i0, $i1, i2, $i3;
        char $c4;

        $r0 := @parameter0: org.spongycastle.asn1.DefiniteLengthInputStream;

        i0 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int getRemaining()>();

        i0 = i0 / 2;

        r1 = newarray (char)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $i3 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int read()>();

        if $i3 >= 0 goto label2;

        return r1;

     label2:
        $i1 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int read()>();

        if $i1 < 0 goto label3;

        $i3 = $i3 << 8;

        $i1 = $i1 & 255;

        $i1 = $i3 | $i1;

        $c4 = (char) $i1;

        r1[i2] = $c4;

        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }
    private static byte[] getBuffer(org.spongycastle.asn1.DefiniteLengthInputStream, byte[][]) throws java.io.IOException
    {
        org.spongycastle.asn1.DefiniteLengthInputStream $r0;
        byte[][] $r1;
        int $i0, $i1, $i2;
        byte[] r2;

        $r0 := @parameter0: org.spongycastle.asn1.DefiniteLengthInputStream;

        $r1 := @parameter1: byte[][];

        $i1 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int getRemaining()>();

        $i2 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: int getRemaining()>();

        $i0 = lengthof $r1;

        if $i2 >= $i0 goto label2;

        r2 = $r1[$i1];

        if r2 != null goto label1;

        r2 = newarray (byte)[$i1];

        $r1[$i1] = r2;

     label1:
        staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>($r0, r2);

        return r2;

     label2:
        r2 = virtualinvoke $r0.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        return r2;
    }
    static int readLength(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, i1, i2, i3, $i4;
        java.io.EOFException $r1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        i2 = i1;

        if i1 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("EOF found when length expected");

        throw $r1;

     label1:
        if i1 != 128 goto label2;

        return -1;

     label2:
        if i1 <= 127 goto label8;

        i1 = i1 & 127;

        if i1 <= 4 goto label3;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DER length more than 4 bytes: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label3:
        i2 = 0;

        i3 = 0;

     label4:
        if i3 >= i1 goto label6;

        $i4 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i4 >= 0 goto label5;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("EOF found reading length");

        throw $r1;

     label5:
        i2 = i2 << 8;

        i2 = i2 + $i4;

        i3 = i3 + 1;

        goto label4;

     label6:
        if i2 >= 0 goto label7;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("corrupted stream - negative length found");

        throw $r2;

     label7:
        if i2 < $i0 goto label8;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("corrupted stream - out of bounds length found");

        throw $r2;

     label8:
        return i2;
    }
    static int readTagNumber(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, i2;
        java.io.IOException $r1;
        java.io.EOFException $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i0 = $i0 & 31;

        if $i0 != 31 goto label4;

        $i0 = 0;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        i2 = $i1;

        $i1 = $i1 & 127;

        if $i1 != 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("corrupted stream - invalid high tag number found");

        throw $r1;

     label1:
        if i2 < 0 goto label2;

        $i1 = i2 & 128;

        if $i1 == 0 goto label2;

        i2 = i2 & 127;

        $i0 = $i0 | i2;

        $i0 = $i0 << 7;

        i2 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        goto label1;

     label2:
        if i2 >= 0 goto label3;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>("EOF found inside tag value.");

        throw $r2;

     label3:
        i2 = i2 & 127;

        $i0 = $i0 | i2;

     label4:
        return $i0;
    }
    org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        org.spongycastle.asn1.DefiniteLengthInputStream $r1;
        org.spongycastle.asn1.ASN1EncodableVector $r2;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: org.spongycastle.asn1.DefiniteLengthInputStream;

        r0 = new org.spongycastle.asn1.ASN1InputStream;

        specialinvoke r0.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>($r1);

        $r2 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1EncodableVector buildEncodableVector()>();

        return $r2;
    }
    org.spongycastle.asn1.ASN1EncodableVector buildEncodableVector() throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Primitive $r2;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

     label1:
        $r2 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        if $r2 == null goto label2;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        goto label1;

     label2:
        return r1;
    }
    protected org.spongycastle.asn1.ASN1Primitive buildObject(int, int, int) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.asn1.DefiniteLengthInputStream r1;
        org.spongycastle.asn1.ASN1OctetString[] r2;
        boolean z0;
        org.spongycastle.asn1.DERApplicationSpecific $r3;
        byte[] $r4;
        org.spongycastle.asn1.ASN1StreamParser $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        org.spongycastle.asn1.ASN1EncodableVector $r10;
        org.spongycastle.asn1.ASN1Encodable $r11;
        org.spongycastle.asn1.ASN1OctetString $r12;
        org.spongycastle.asn1.BEROctetString $r13;
        org.spongycastle.asn1.LazyEncodedSequence $r14;
        org.spongycastle.asn1.ASN1Sequence $r15;
        org.spongycastle.asn1.ASN1Set $r16;
        org.spongycastle.asn1.DERExternal $r17;
        byte[][] $r18;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $i0 & 32;

        if $i3 == 0 goto label02;

        z0 = 1;

     label01:
        r1 = new org.spongycastle.asn1.DefiniteLengthInputStream;

        specialinvoke r1.<org.spongycastle.asn1.DefiniteLengthInputStream: void <init>(java.io.InputStream,int)>(r0, $i2);

        $i2 = $i0 & 64;

        if $i2 == 0 goto label03;

        $r3 = new org.spongycastle.asn1.DERApplicationSpecific;

        $r4 = virtualinvoke r1.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r3.<org.spongycastle.asn1.DERApplicationSpecific: void <init>(boolean,int,byte[])>(z0, $i1, $r4);

        return $r3;

     label02:
        z0 = 0;

        goto label01;

     label03:
        $i0 = $i0 & 128;

        if $i0 == 0 goto label04;

        $r5 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1StreamParser: org.spongycastle.asn1.ASN1Primitive readTaggedObject(boolean,int)>(z0, $i1);

        return $r6;

     label04:
        if z0 == 0 goto label13;

        lookupswitch($i1)
        {
            case 4: goto label06;
            case 8: goto label12;
            case 16: goto label09;
            case 17: goto label11;
            default: goto label05;
        };

     label05:
        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown tag ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label06:
        $r10 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream)>(r1);

        $i0 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1EncodableVector: int size()>();

        r2 = newarray (org.spongycastle.asn1.ASN1OctetString)[$i0];

        $i0 = 0;

     label07:
        $i1 = lengthof r2;

        if $i0 == $i1 goto label08;

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1EncodableVector: org.spongycastle.asn1.ASN1Encodable get(int)>($i0);

        $r12 = (org.spongycastle.asn1.ASN1OctetString) $r11;

        r2[$i0] = $r12;

        $i0 = $i0 + 1;

        goto label07;

     label08:
        $r13 = new org.spongycastle.asn1.BEROctetString;

        specialinvoke $r13.<org.spongycastle.asn1.BEROctetString: void <init>(org.spongycastle.asn1.ASN1OctetString[])>(r2);

        return $r13;

     label09:
        z0 = r0.<org.spongycastle.asn1.ASN1InputStream: boolean lazyEvaluate>;

        if z0 == 0 goto label10;

        $r14 = new org.spongycastle.asn1.LazyEncodedSequence;

        $r4 = virtualinvoke r1.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r14.<org.spongycastle.asn1.LazyEncodedSequence: void <init>(byte[])>($r4);

        return $r14;

     label10:
        $r10 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream)>(r1);

        $r15 = staticinvoke <org.spongycastle.asn1.DERFactory: org.spongycastle.asn1.ASN1Sequence createSequence(org.spongycastle.asn1.ASN1EncodableVector)>($r10);

        return $r15;

     label11:
        $r10 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream)>(r1);

        $r16 = staticinvoke <org.spongycastle.asn1.DERFactory: org.spongycastle.asn1.ASN1Set createSet(org.spongycastle.asn1.ASN1EncodableVector)>($r10);

        return $r16;

     label12:
        $r17 = new org.spongycastle.asn1.DERExternal;

        $r10 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream)>(r1);

        specialinvoke $r17.<org.spongycastle.asn1.DERExternal: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>($r10);

        return $r17;

     label13:
        $r18 = r0.<org.spongycastle.asn1.ASN1InputStream: byte[][] tmpBuffers>;

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive createPrimitiveDERObject(int,org.spongycastle.asn1.DefiniteLengthInputStream,byte[][])>($i1, r1, $r18);

        return $r6;
    }
    int getLimit()
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        int i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        i0 = r0.<org.spongycastle.asn1.ASN1InputStream: int limit>;

        return i0;
    }
    protected void readFully(byte[]) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.EOFException $r2;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $r1 := @parameter0: byte[];

        $i0 = staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>(r0, $r1);

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>("EOF encountered in middle of object");

        throw $r2;

     label1:
        return;
    }
    protected int readLength() throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $i0 = r0.<org.spongycastle.asn1.ASN1InputStream: int limit>;

        $i0 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readLength(java.io.InputStream,int)>(r0, $i0);

        return $i0;
    }
    public org.spongycastle.asn1.ASN1Primitive readObject() throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1InputStream r0;
        java.lang.IllegalArgumentException r1;
        org.spongycastle.asn1.IndefiniteLengthInputStream r2;
        org.spongycastle.asn1.ASN1StreamParser r3;
        int $i0, $i1, $i2;
        java.io.IOException $r4;
        boolean z0;
        org.spongycastle.asn1.BERApplicationSpecificParser $r5;
        org.spongycastle.asn1.ASN1Primitive $r6;
        org.spongycastle.asn1.BERTaggedObjectParser $r7;
        org.spongycastle.asn1.BEROctetStringParser $r8;
        org.spongycastle.asn1.BERSequenceParser $r9;
        org.spongycastle.asn1.BERSetParser $r10;
        org.spongycastle.asn1.DERExternalParser $r11;
        org.spongycastle.asn1.ASN1Exception $r12;

        r0 := @this: org.spongycastle.asn1.ASN1InputStream;

        $i0 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: int read()>();

        if $i0 > 0 goto label02;

        if $i0 != 0 goto label01;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("unexpected end-of-contents marker");

        throw $r4;

     label01:
        return null;

     label02:
        $i1 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>(r0, $i0);

        $i2 = $i0 & 32;

        if $i2 == 0 goto label04;

        z0 = 1;

     label03:
        $i2 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: int readLength()>();

        if $i2 >= 0 goto label13;

        if z0 != 0 goto label05;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("indefinite-length primitive encoding encountered");

        throw $r4;

     label04:
        z0 = 0;

        goto label03;

     label05:
        r2 = new org.spongycastle.asn1.IndefiniteLengthInputStream;

        $i2 = r0.<org.spongycastle.asn1.ASN1InputStream: int limit>;

        specialinvoke r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>(r0, $i2);

        r3 = new org.spongycastle.asn1.ASN1StreamParser;

        $i2 = r0.<org.spongycastle.asn1.ASN1InputStream: int limit>;

        specialinvoke r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>(r2, $i2);

        $i2 = $i0 & 64;

        if $i2 == 0 goto label06;

        $r5 = new org.spongycastle.asn1.BERApplicationSpecificParser;

        specialinvoke $r5.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i1, r3);

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label06:
        $i0 = $i0 & 128;

        if $i0 == 0 goto label07;

        $r7 = new org.spongycastle.asn1.BERTaggedObjectParser;

        specialinvoke $r7.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i1, r3);

        $r6 = virtualinvoke $r7.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label07:
        lookupswitch($i1)
        {
            case 4: goto label09;
            case 8: goto label12;
            case 16: goto label10;
            case 17: goto label11;
            default: goto label08;
        };

     label08:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("unknown BER object encountered");

        throw $r4;

     label09:
        $r8 = new org.spongycastle.asn1.BEROctetStringParser;

        specialinvoke $r8.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r3);

        $r6 = virtualinvoke $r8.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label10:
        $r9 = new org.spongycastle.asn1.BERSequenceParser;

        specialinvoke $r9.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r3);

        $r6 = virtualinvoke $r9.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label11:
        $r10 = new org.spongycastle.asn1.BERSetParser;

        specialinvoke $r10.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r3);

        $r6 = virtualinvoke $r10.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label12:
        $r11 = new org.spongycastle.asn1.DERExternalParser;

        specialinvoke $r11.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r3);

        $r6 = virtualinvoke $r11.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        return $r6;

     label13:
        $r6 = virtualinvoke r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i0, $i1, $i2);

     label14:
        return $r6;

     label15:
        r1 := @caughtexception;

        $r12 = new org.spongycastle.asn1.ASN1Exception;

        specialinvoke $r12.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String,java.lang.Throwable)>("corrupted stream detected", r1);

        throw $r12;

        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
    }
