org.spongycastle.asn1.cmp.PKIFailureInfo extends org.spongycastle.asn1.DERBitString
public static final int ADD_INFO_NOT_AVAILABLE
public static final int BAD_ALG
public static final int BAD_CERT_ID
public static final int BAD_DATA_FORMAT
public static final int BAD_MESSAGE_CHECK
public static final int BAD_POP
public static final int BAD_REQUEST
public static final int BAD_TIME
public static final int INCORRECT_DATA
public static final int MISSING_TIME_STAMP
public static final int SYSTEM_FAILURE
public static final int TIME_NOT_AVAILABLE
public static final int UNACCEPTED_EXTENSION
public static final int UNACCEPTED_POLICY
public static final int WRONG_AUTHORITY
public static final int addInfoNotAvailable
public static final int badAlg
public static final int badCertId
public static final int badCertTemplate
public static final int badDataFormat
public static final int badMessageCheck
public static final int badPOP
public static final int badRecipientNonce
public static final int badRequest
public static final int badSenderNonce
public static final int badTime
public static final int certConfirmed
public static final int certRevoked
public static final int duplicateCertReq
public static final int incorrectData
public static final int missingTimeStamp
public static final int notAuthorized
public static final int signerNotTrusted
public static final int systemFailure
public static final int systemUnavail
public static final int timeNotAvailable
public static final int transactionIdInUse
public static final int unacceptedExtension
public static final int unacceptedPolicy
public static final int unsupportedVersion
public static final int wrongAuthority
public static final int wrongIntegrity
    public void <init>(int)
    {
        org.spongycastle.asn1.'cmp'.PKIFailureInfo r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.spongycastle.asn1.'cmp'.PKIFailureInfo;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.spongycastle.asn1.'cmp'.PKIFailureInfo: byte[] getBytes(int)>($i0);

        $i0 = staticinvoke <org.spongycastle.asn1.'cmp'.PKIFailureInfo: int getPadBits(int)>($i0);

        specialinvoke r0.<org.spongycastle.asn1.DERBitString: void <init>(byte[],int)>($r1, $i0);

        return;
    }
    public void <init>(org.spongycastle.asn1.DERBitString)
    {
        org.spongycastle.asn1.'cmp'.PKIFailureInfo r0;
        org.spongycastle.asn1.DERBitString $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.asn1.'cmp'.PKIFailureInfo;

        $r1 := @parameter0: org.spongycastle.asn1.DERBitString;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.DERBitString: int getPadBits()>();

        specialinvoke r0.<org.spongycastle.asn1.DERBitString: void <init>(byte[],int)>($r2, $i0);

        return;
    }
    public java.lang.String toString()
    {
        org.spongycastle.asn1.'cmp'.PKIFailureInfo r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.asn1.'cmp'.PKIFailureInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PKIFailureInfo: 0x");

        $i0 = virtualinvoke r0.<org.spongycastle.asn1.'cmp'.PKIFailureInfo: int intValue()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
