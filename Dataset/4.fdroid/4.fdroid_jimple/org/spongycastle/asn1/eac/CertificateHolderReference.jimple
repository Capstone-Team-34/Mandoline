org.spongycastle.asn1.eac.CertificateHolderReference extends java.lang.Object
private static final java.lang.String ReferenceEncoding
private java.lang.String countryCode
private java.lang.String holderMnemonic
private java.lang.String sequenceNumber
    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String countryCode> = $r1;

        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String holderMnemonic> = $r2;

        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String sequenceNumber> = $r3;

        return;
    }
    void <init>(byte[])
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        byte[] $r1;
        java.lang.String r2, $r4;
        java.io.UnsupportedEncodingException r3;
        int $i0;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new java.lang.String;

     label01:
        specialinvoke r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "ISO-8859-1");

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

     label02:
        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String countryCode> = $r4;

     label03:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label04:
        $i0 = $i0 + -5;

     label05:
        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(2, $i0);

     label06:
        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String holderMnemonic> = $r4;

     label07:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label08:
        $i0 = $i0 + -5;

     label09:
        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label10:
        r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String sequenceNumber> = r2;

        return;

     label11:
        r3 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        r2 = virtualinvoke r3.<java.io.UnsupportedEncodingException: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label11;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label11;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label11;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label11;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label11;
    }
    public java.lang.String getCountryCode()
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        r1 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String countryCode>;

        return r1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        byte[] $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String countryCode>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String holderMnemonic>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String sequenceNumber>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        return $r4;

     label3:
        r1 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r1.<java.io.UnsupportedEncodingException: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public java.lang.String getHolderMnemonic()
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        r1 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String holderMnemonic>;

        return r1;
    }
    public java.lang.String getSequenceNumber()
    {
        org.spongycastle.asn1.eac.CertificateHolderReference r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.asn1.eac.CertificateHolderReference;

        r1 = r0.<org.spongycastle.asn1.eac.CertificateHolderReference: java.lang.String sequenceNumber>;

        return r1;
    }
