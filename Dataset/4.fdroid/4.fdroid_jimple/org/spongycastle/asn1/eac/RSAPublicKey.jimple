org.spongycastle.asn1.eac.RSAPublicKey extends org.spongycastle.asn1.eac.PublicKeyDataObject
private static int exponentValid
private static int modulusValid
private java.math.BigInteger exponent
private java.math.BigInteger modulus
private org.spongycastle.asn1.ASN1ObjectIdentifier usage
private int valid
    static void <clinit>()
    {
        <org.spongycastle.asn1.eac.RSAPublicKey: int modulusValid> = 1;

        <org.spongycastle.asn1.eac.RSAPublicKey: int exponentValid> = 2;

        return;
    }
    public void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.math.BigInteger $r2, $r3;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        specialinvoke r0.<org.spongycastle.asn1.eac.PublicKeyDataObject: void <init>()>();

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid> = 0;

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier usage> = $r1;

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger modulus> = $r2;

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger exponent> = $r3;

        return;
    }
    void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        java.util.Enumeration $r2;
        java.lang.Object $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r4;
        boolean $z0;
        org.spongycastle.asn1.eac.UnsignedInteger $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.eac.PublicKeyDataObject: void <init>()>();

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid> = 0;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier usage> = $r4;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = staticinvoke <org.spongycastle.asn1.eac.UnsignedInteger: org.spongycastle.asn1.eac.UnsignedInteger getInstance(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r5.<org.spongycastle.asn1.eac.UnsignedInteger: int getTagNo()>();

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label2;
        };

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown DERTaggedObject :");

        $i0 = virtualinvoke $r5.<org.spongycastle.asn1.eac.UnsignedInteger: int getTagNo()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-> not an Iso7816RSAPublicKeyStructure");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label3:
        specialinvoke r0.<org.spongycastle.asn1.eac.RSAPublicKey: void setModulus(org.spongycastle.asn1.eac.UnsignedInteger)>($r5);

        goto label1;

     label4:
        specialinvoke r0.<org.spongycastle.asn1.eac.RSAPublicKey: void setExponent(org.spongycastle.asn1.eac.UnsignedInteger)>($r5);

        goto label1;

     label5:
        $i0 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid>;

        if $i0 == 3 goto label6;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing argument -> not an Iso7816RSAPublicKeyStructure");

        throw $r6;

     label6:
        return;
    }
    private void setExponent(org.spongycastle.asn1.eac.UnsignedInteger)
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.eac.UnsignedInteger $r1;
        java.math.BigInteger $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.eac.UnsignedInteger;

        $i0 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid>;

        $i1 = <org.spongycastle.asn1.eac.RSAPublicKey: int exponentValid>;

        $i0 = $i0 & $i1;

        if $i0 != 0 goto label1;

        $i0 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid>;

        $i1 = <org.spongycastle.asn1.eac.RSAPublicKey: int exponentValid>;

        $i0 = $i0 | $i1;

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid> = $i0;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.eac.UnsignedInteger: java.math.BigInteger getValue()>();

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger exponent> = $r2;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exponent already set");

        throw $r3;
    }
    private void setModulus(org.spongycastle.asn1.eac.UnsignedInteger)
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.eac.UnsignedInteger $r1;
        java.math.BigInteger $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.eac.UnsignedInteger;

        $i0 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid>;

        $i1 = <org.spongycastle.asn1.eac.RSAPublicKey: int modulusValid>;

        $i0 = $i0 & $i1;

        if $i0 != 0 goto label1;

        $i0 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid>;

        $i1 = <org.spongycastle.asn1.eac.RSAPublicKey: int modulusValid>;

        $i0 = $i0 | $i1;

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: int valid> = $i0;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.eac.UnsignedInteger: java.math.BigInteger getValue()>();

        r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger modulus> = $r2;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Modulus already set");

        throw $r3;
    }
    public java.math.BigInteger getModulus()
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        r1 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger modulus>;

        return r1;
    }
    public java.math.BigInteger getPublicExponent()
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        r1 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger exponent>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1ObjectIdentifier getUsage()
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier r1;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        r1 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier usage>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.asn1.eac.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        org.spongycastle.asn1.eac.UnsignedInteger $r3;
        java.math.BigInteger $r4;
        org.spongycastle.asn1.DERSequence $r5;

        r0 := @this: org.spongycastle.asn1.eac.RSAPublicKey;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r2 = r0.<org.spongycastle.asn1.eac.RSAPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier usage>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r3 = new org.spongycastle.asn1.eac.UnsignedInteger;

        $r4 = virtualinvoke r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger getModulus()>();

        specialinvoke $r3.<org.spongycastle.asn1.eac.UnsignedInteger: void <init>(int,java.math.BigInteger)>(1, $r4);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

        $r3 = new org.spongycastle.asn1.eac.UnsignedInteger;

        $r4 = virtualinvoke r0.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r3.<org.spongycastle.asn1.eac.UnsignedInteger: void <init>(int,java.math.BigInteger)>(2, $r4);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

        $r5 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r5.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r5;
    }
