org.spongycastle.asn1.pkcs.RSAPublicKey extends org.spongycastle.asn1.ASN1Object
private java.math.BigInteger modulus
private java.math.BigInteger publicExponent
    public void <init>(java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.asn1.pkcs.RSAPublicKey r0;
        java.math.BigInteger $r1, $r2;

        r0 := @this: org.spongycastle.asn1.pkcs.RSAPublicKey;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger modulus> = $r1;

        r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger publicExponent> = $r2;

        return;
    }
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.asn1.pkcs.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Enumeration $r5;
        java.lang.Object $r6;
        org.spongycastle.asn1.ASN1Integer $r7;
        java.math.BigInteger $r8;

        r0 := @this: org.spongycastle.asn1.pkcs.RSAPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad sequence size: ");

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getPositiveValue()>();

        r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger modulus> = $r8;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getPositiveValue()>();

        r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger publicExponent> = $r8;

        return;
    }
    public static org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.asn1.pkcs.RSAPublicKey r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.asn1.pkcs.RSAPublicKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.asn1.pkcs.RSAPublicKey) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.asn1.pkcs.RSAPublicKey;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.asn1.pkcs.RSAPublicKey: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public static org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(org.spongycastle.asn1.ASN1TaggedObject, boolean)
    {
        org.spongycastle.asn1.ASN1TaggedObject $r0;
        boolean $z0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        org.spongycastle.asn1.pkcs.RSAPublicKey $r2;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1TaggedObject;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r0, $z0);

        $r2 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPublicKey: org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object)>($r1);

        return $r2;
    }
    public java.math.BigInteger getModulus()
    {
        org.spongycastle.asn1.pkcs.RSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.asn1.pkcs.RSAPublicKey;

        r1 = r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger modulus>;

        return r1;
    }
    public java.math.BigInteger getPublicExponent()
    {
        org.spongycastle.asn1.pkcs.RSAPublicKey r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.asn1.pkcs.RSAPublicKey;

        r1 = r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger publicExponent>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.asn1.pkcs.RSAPublicKey r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Integer $r2;
        java.math.BigInteger $r3;
        org.spongycastle.asn1.DERSequence $r4;

        r0 := @this: org.spongycastle.asn1.pkcs.RSAPublicKey;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r2 = new org.spongycastle.asn1.ASN1Integer;

        $r3 = virtualinvoke r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getModulus()>();

        specialinvoke $r2.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r3);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r2 = new org.spongycastle.asn1.ASN1Integer;

        $r3 = virtualinvoke r0.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r2.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r3);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r2);

        $r4 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r4.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r4;
    }
