org.spongycastle.asn1.LazyEncodedSequence extends org.spongycastle.asn1.ASN1Sequence
private byte[] encoded
    void <init>(byte[]) throws java.io.IOException
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: void <init>()>();

        r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded> = $r1;

        return;
    }
    private void parse()
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        org.spongycastle.asn1.LazyConstructionEnumeration r1;
        byte[] $r2;
        boolean $z0;
        java.util.Vector $r3;
        java.lang.Object $r4;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        r1 = new org.spongycastle.asn1.LazyConstructionEnumeration;

        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        specialinvoke r1.<org.spongycastle.asn1.LazyConstructionEnumeration: void <init>(byte[])>($r2);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.spongycastle.asn1.LazyEncodedSequence: java.util.Vector seq>;

        $r4 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        goto label1;

     label2:
        r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded> = null;

        return;
    }
    void encode(org.spongycastle.asn1.ASN1OutputStream) throws java.io.IOException
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        org.spongycastle.asn1.ASN1OutputStream $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1Primitive $r3;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1OutputStream;

        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        virtualinvoke $r1.<org.spongycastle.asn1.ASN1OutputStream: void writeEncoded(int,byte[])>(48, $r2);

        return;

     label1:
        $r3 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Primitive toDLObject()>();

        virtualinvoke $r3.<org.spongycastle.asn1.ASN1Primitive: void encode(org.spongycastle.asn1.ASN1OutputStream)>($r1);

        return;
    }
    int encodedLength() throws java.io.IOException
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.asn1.ASN1Primitive $r2;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        $i0 = lengthof $r1;

        $i0 = staticinvoke <org.spongycastle.asn1.StreamUtil: int calculateBodyLength(int)>($i0);

        $i0 = $i0 + 1;

        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        return $i0;

     label1:
        $r2 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Primitive toDLObject()>();

        $i0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Primitive: int encodedLength()>();

        return $i0;
    }
    public org.spongycastle.asn1.ASN1Encodable getObjectAt(int)
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        int $i0;
        org.spongycastle.asn1.ASN1Encodable $r1;
        byte[] $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r2 == null goto label2;

        specialinvoke r0.<org.spongycastle.asn1.LazyEncodedSequence: void parse()>();

     label2:
        $r1 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    public java.util.Enumeration getObjects()
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        byte[] $r1;
        java.util.Enumeration $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        org.spongycastle.asn1.LazyConstructionEnumeration $r5;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r1 != null goto label4;

        $r2 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

     label2:
        $r3 = $r2;

     label3:
        exitmonitor r0;

        $r2 = (java.util.Enumeration) $r3;

        return $r2;

     label4:
        $r5 = new org.spongycastle.asn1.LazyConstructionEnumeration;

        $r3 = $r5;

        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        specialinvoke $r5.<org.spongycastle.asn1.LazyConstructionEnumeration: void <init>(byte[])>($r1);

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public int size()
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        int $i0;
        byte[] $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r1 == null goto label2;

        specialinvoke r0.<org.spongycastle.asn1.LazyEncodedSequence: void parse()>();

     label2:
        $i0 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: int size()>();

     label3:
        exitmonitor r0;

        return $i0;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    org.spongycastle.asn1.ASN1Primitive toDERObject()
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        org.spongycastle.asn1.ASN1Primitive $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r2 == null goto label1;

        specialinvoke r0.<org.spongycastle.asn1.LazyEncodedSequence: void parse()>();

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Primitive toDERObject()>();

        return $r1;
    }
    org.spongycastle.asn1.ASN1Primitive toDLObject()
    {
        org.spongycastle.asn1.LazyEncodedSequence r0;
        org.spongycastle.asn1.ASN1Primitive $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.asn1.LazyEncodedSequence;

        $r2 = r0.<org.spongycastle.asn1.LazyEncodedSequence: byte[] encoded>;

        if $r2 == null goto label1;

        specialinvoke r0.<org.spongycastle.asn1.LazyEncodedSequence: void parse()>();

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Primitive toDLObject()>();

        return $r1;
    }
