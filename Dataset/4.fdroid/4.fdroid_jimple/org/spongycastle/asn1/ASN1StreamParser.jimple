org.spongycastle.asn1.ASN1StreamParser extends java.lang.Object
private final java.io.InputStream _in
private final int _limit
private final byte[][] tmpBuffers
    public void <init>(java.io.InputStream)
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $r1 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.asn1.StreamUtil: int findLimit(java.io.InputStream)>($r1);

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r1, $i0);

        return;
    }
    public void <init>(java.io.InputStream, int)
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        java.io.InputStream $r1;
        int $i0;
        byte[][] $r2;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in> = $r1;

        r0.<org.spongycastle.asn1.ASN1StreamParser: int _limit> = $i0;

        $r2 = newarray (byte[])[11];

        r0.<org.spongycastle.asn1.ASN1StreamParser: byte[][] tmpBuffers> = $r2;

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        byte[] $r1;
        java.io.ByteArrayInputStream $r2;
        int $i0;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $r1 := @parameter0: byte[];

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $i0 = lengthof $r1;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0);

        return;
    }
    private void set00Check(boolean)
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        boolean $z0, $z1;
        java.io.InputStream $r1;
        org.spongycastle.asn1.IndefiniteLengthInputStream $r2;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $z1 = $r1 instanceof org.spongycastle.asn1.IndefiniteLengthInputStream;

        if $z1 == 0 goto label1;

        $r1 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $r2 = (org.spongycastle.asn1.IndefiniteLengthInputStream) $r1;

        virtualinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void setEofOn00(boolean)>($z0);

     label1:
        return;
    }
    org.spongycastle.asn1.ASN1Encodable readImplicit(boolean, int) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        boolean $z0, $z1;
        int $i0;
        org.spongycastle.asn1.ASN1Encodable $r1;
        java.io.InputStream $r2;
        java.io.IOException $r3;
        org.spongycastle.asn1.ASN1Exception $r4;
        org.spongycastle.asn1.DERSetParser $r5;
        org.spongycastle.asn1.DERSequenceParser $r6;
        org.spongycastle.asn1.BEROctetStringParser $r7;
        org.spongycastle.asn1.DEROctetStringParser $r8;
        org.spongycastle.asn1.DefiniteLengthInputStream $r9;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $z1 = $r2 instanceof org.spongycastle.asn1.IndefiniteLengthInputStream;

        if $z1 == 0 goto label02;

        if $z0 != 0 goto label01;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("indefinite-length primitive encoding encountered");

        throw $r3;

     label01:
        $r1 = virtualinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: org.spongycastle.asn1.ASN1Encodable readIndef(int)>($i0);

        return $r1;

     label02:
        if $z0 == 0 goto label07;

        lookupswitch($i0)
        {
            case 4: goto label06;
            case 16: goto label05;
            case 17: goto label04;
            default: goto label03;
        };

     label03:
        $r4 = new org.spongycastle.asn1.ASN1Exception;

        specialinvoke $r4.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String)>("implicit tagging not implemented");

        throw $r4;

     label04:
        $r5 = new org.spongycastle.asn1.DERSetParser;

        specialinvoke $r5.<org.spongycastle.asn1.DERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r5;

     label05:
        $r6 = new org.spongycastle.asn1.DERSequenceParser;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r6;

     label06:
        $r7 = new org.spongycastle.asn1.BEROctetStringParser;

        specialinvoke $r7.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r7;

     label07:
        lookupswitch($i0)
        {
            case 4: goto label09;
            case 16: goto label11;
            case 17: goto label10;
            default: goto label08;
        };

     label08:
        goto label03;

     label09:
        $r8 = new org.spongycastle.asn1.DEROctetStringParser;

        $r2 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $r9 = (org.spongycastle.asn1.DefiniteLengthInputStream) $r2;

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetStringParser: void <init>(org.spongycastle.asn1.DefiniteLengthInputStream)>($r9);

        return $r8;

     label10:
        $r4 = new org.spongycastle.asn1.ASN1Exception;

        specialinvoke $r4.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String)>("sequences must use constructed encoding (see X.690 8.9.1/8.10.1)");

        throw $r4;

     label11:
        $r4 = new org.spongycastle.asn1.ASN1Exception;

        specialinvoke $r4.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String)>("sets must use constructed encoding (see X.690 8.11.1/8.12.1)");

        throw $r4;
    }
    org.spongycastle.asn1.ASN1Encodable readIndef(int) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        int $i0;
        org.spongycastle.asn1.ASN1Exception $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.spongycastle.asn1.DERExternalParser $r4;
        org.spongycastle.asn1.BEROctetStringParser $r5;
        org.spongycastle.asn1.BERSequenceParser $r6;
        org.spongycastle.asn1.BERSetParser $r7;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 4: goto label3;
            case 8: goto label2;
            case 16: goto label4;
            case 17: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.asn1.ASN1Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown BER object encountered: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new org.spongycastle.asn1.DERExternalParser;

        specialinvoke $r4.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r4;

     label3:
        $r5 = new org.spongycastle.asn1.BEROctetStringParser;

        specialinvoke $r5.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r5;

     label4:
        $r6 = new org.spongycastle.asn1.BERSequenceParser;

        specialinvoke $r6.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r6;

     label5:
        $r7 = new org.spongycastle.asn1.BERSetParser;

        specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r7;
    }
    public org.spongycastle.asn1.ASN1Encodable readObject() throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1StreamParser r0, r4;
        org.spongycastle.asn1.DefiniteLengthInputStream r1;
        java.lang.IllegalArgumentException r2;
        org.spongycastle.asn1.IndefiniteLengthInputStream r3;
        boolean z0;
        java.io.InputStream $r5;
        int $i0, $i1, $i2;
        java.io.IOException $r6;
        org.spongycastle.asn1.BERApplicationSpecificParser $r7;
        org.spongycastle.asn1.BERTaggedObjectParser $r8;
        org.spongycastle.asn1.ASN1Encodable $r9;
        org.spongycastle.asn1.DERApplicationSpecific $r10;
        byte[] $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;
        org.spongycastle.asn1.BEROctetStringParser $r14;
        org.spongycastle.asn1.DERSequenceParser $r15;
        org.spongycastle.asn1.DERSetParser $r16;
        org.spongycastle.asn1.DERExternalParser $r17;
        byte[][] $r18;
        org.spongycastle.asn1.ASN1Primitive $r19;
        org.spongycastle.asn1.DEROctetStringParser $r20;
        org.spongycastle.asn1.ASN1Exception $r21;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        z0 = 0;

        $r5 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read()>();

        if $i0 != -1 goto label01;

        return null;

     label01:
        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void set00Check(boolean)>(0);

        $r5 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $i1 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r5, $i0);

        $i2 = $i0 & 32;

        if $i2 == 0 goto label02;

        z0 = 1;

     label02:
        $r5 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $i2 = r0.<org.spongycastle.asn1.ASN1StreamParser: int _limit>;

        $i2 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readLength(java.io.InputStream,int)>($r5, $i2);

        if $i2 >= 0 goto label06;

        if z0 != 0 goto label03;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("indefinite-length primitive encoding encountered");

        throw $r6;

     label03:
        r3 = new org.spongycastle.asn1.IndefiniteLengthInputStream;

        $r5 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $i2 = r0.<org.spongycastle.asn1.ASN1StreamParser: int _limit>;

        specialinvoke r3.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r5, $i2);

        r4 = new org.spongycastle.asn1.ASN1StreamParser;

        $i2 = r0.<org.spongycastle.asn1.ASN1StreamParser: int _limit>;

        specialinvoke r4.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>(r3, $i2);

        $i2 = $i0 & 64;

        if $i2 == 0 goto label04;

        $r7 = new org.spongycastle.asn1.BERApplicationSpecificParser;

        specialinvoke $r7.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i1, r4);

        return $r7;

     label04:
        $i0 = $i0 & 128;

        if $i0 == 0 goto label05;

        $r8 = new org.spongycastle.asn1.BERTaggedObjectParser;

        specialinvoke $r8.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i1, r4);

        return $r8;

     label05:
        $r9 = virtualinvoke r4.<org.spongycastle.asn1.ASN1StreamParser: org.spongycastle.asn1.ASN1Encodable readIndef(int)>($i1);

        return $r9;

     label06:
        r1 = new org.spongycastle.asn1.DefiniteLengthInputStream;

        $r5 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        specialinvoke r1.<org.spongycastle.asn1.DefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r5, $i2);

        $i2 = $i0 & 64;

        if $i2 == 0 goto label07;

        $r10 = new org.spongycastle.asn1.DERApplicationSpecific;

        $r11 = virtualinvoke r1.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r10.<org.spongycastle.asn1.DERApplicationSpecific: void <init>(boolean,int,byte[])>(z0, $i1, $r11);

        return $r10;

     label07:
        $i0 = $i0 & 128;

        if $i0 == 0 goto label08;

        $r8 = new org.spongycastle.asn1.BERTaggedObjectParser;

        r0 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r8.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(z0, $i1, r0);

        return $r8;

     label08:
        if z0 == 0 goto label14;

        lookupswitch($i1)
        {
            case 4: goto label10;
            case 8: goto label13;
            case 16: goto label11;
            case 17: goto label12;
            default: goto label09;
        };

     label09:
        $r6 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown tag ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label10:
        $r14 = new org.spongycastle.asn1.BEROctetStringParser;

        r0 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r14.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r14;

     label11:
        $r15 = new org.spongycastle.asn1.DERSequenceParser;

        r0 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r15.<org.spongycastle.asn1.DERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r15;

     label12:
        $r16 = new org.spongycastle.asn1.DERSetParser;

        r0 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r16.<org.spongycastle.asn1.DERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r16;

     label13:
        $r17 = new org.spongycastle.asn1.DERExternalParser;

        r0 = new org.spongycastle.asn1.ASN1StreamParser;

        specialinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r17.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>(r0);

        return $r17;

     label14:
        lookupswitch($i1)
        {
            case 4: goto label18;
            default: goto label15;
        };

     label15:
        $r18 = r0.<org.spongycastle.asn1.ASN1StreamParser: byte[][] tmpBuffers>;

     label16:
        $r19 = staticinvoke <org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive createPrimitiveDERObject(int,org.spongycastle.asn1.DefiniteLengthInputStream,byte[][])>($i1, r1, $r18);

     label17:
        return $r19;

     label18:
        $r20 = new org.spongycastle.asn1.DEROctetStringParser;

        specialinvoke $r20.<org.spongycastle.asn1.DEROctetStringParser: void <init>(org.spongycastle.asn1.DefiniteLengthInputStream)>(r1);

        return $r20;

     label19:
        r2 := @caughtexception;

        $r21 = new org.spongycastle.asn1.ASN1Exception;

        specialinvoke $r21.<org.spongycastle.asn1.ASN1Exception: void <init>(java.lang.String,java.lang.Throwable)>("corrupted stream detected", r2);

        throw $r21;

        catch java.lang.IllegalArgumentException from label16 to label17 with label19;
    }
    org.spongycastle.asn1.ASN1Primitive readTaggedObject(boolean, int) throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        boolean $z0;
        int $i0, $i1;
        java.io.InputStream r1;
        org.spongycastle.asn1.DefiniteLengthInputStream r2;
        org.spongycastle.asn1.DERTaggedObject $r3;
        org.spongycastle.asn1.DEROctetString $r4;
        byte[] $r5;
        org.spongycastle.asn1.ASN1EncodableVector $r6;
        org.spongycastle.asn1.BERTaggedObject $r7;
        org.spongycastle.asn1.ASN1Encodable $r8;
        org.spongycastle.asn1.BERSequence $r9;
        org.spongycastle.asn1.ASN1Sequence $r10;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        if $z0 != 0 goto label1;

        r1 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        r2 = (org.spongycastle.asn1.DefiniteLengthInputStream) r1;

        $r3 = new org.spongycastle.asn1.DERTaggedObject;

        $r4 = new org.spongycastle.asn1.DEROctetString;

        $r5 = virtualinvoke r2.<org.spongycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>();

        specialinvoke $r4.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r5);

        specialinvoke $r3.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, $i0, $r4);

        return $r3;

     label1:
        $r6 = virtualinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: org.spongycastle.asn1.ASN1EncodableVector readVector()>();

        r1 = r0.<org.spongycastle.asn1.ASN1StreamParser: java.io.InputStream _in>;

        $z0 = r1 instanceof org.spongycastle.asn1.IndefiniteLengthInputStream;

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1EncodableVector: int size()>();

        if $i1 != 1 goto label2;

        $r7 = new org.spongycastle.asn1.BERTaggedObject;

        $r8 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1EncodableVector: org.spongycastle.asn1.ASN1Encodable get(int)>(0);

        specialinvoke $r7.<org.spongycastle.asn1.BERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, $i0, $r8);

        return $r7;

     label2:
        $r7 = new org.spongycastle.asn1.BERTaggedObject;

        $r9 = staticinvoke <org.spongycastle.asn1.BERFactory: org.spongycastle.asn1.BERSequence createSequence(org.spongycastle.asn1.ASN1EncodableVector)>($r6);

        specialinvoke $r7.<org.spongycastle.asn1.BERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, $i0, $r9);

        return $r7;

     label3:
        $i1 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1EncodableVector: int size()>();

        if $i1 != 1 goto label4;

        $r3 = new org.spongycastle.asn1.DERTaggedObject;

        $r8 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1EncodableVector: org.spongycastle.asn1.ASN1Encodable get(int)>(0);

        specialinvoke $r3.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, $i0, $r8);

        return $r3;

     label4:
        $r3 = new org.spongycastle.asn1.DERTaggedObject;

        $r10 = staticinvoke <org.spongycastle.asn1.DERFactory: org.spongycastle.asn1.ASN1Sequence createSequence(org.spongycastle.asn1.ASN1EncodableVector)>($r6);

        specialinvoke $r3.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, $i0, $r10);

        return $r3;
    }
    org.spongycastle.asn1.ASN1EncodableVector readVector() throws java.io.IOException
    {
        org.spongycastle.asn1.ASN1StreamParser r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        org.spongycastle.asn1.ASN1Encodable $r2;
        boolean $z0;
        org.spongycastle.asn1.InMemoryRepresentable r3;
        org.spongycastle.asn1.ASN1Primitive $r4;

        r0 := @this: org.spongycastle.asn1.ASN1StreamParser;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

     label1:
        $r2 = virtualinvoke r0.<org.spongycastle.asn1.ASN1StreamParser: org.spongycastle.asn1.ASN1Encodable readObject()>();

        if $r2 == null goto label3;

        $z0 = $r2 instanceof org.spongycastle.asn1.InMemoryRepresentable;

        if $z0 == 0 goto label2;

        r3 = (org.spongycastle.asn1.InMemoryRepresentable) $r2;

        $r4 = interfaceinvoke r3.<org.spongycastle.asn1.InMemoryRepresentable: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>();

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

        goto label1;

     label2:
        $r4 = interfaceinvoke $r2.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

        goto label1;

     label3:
        return r1;
    }
