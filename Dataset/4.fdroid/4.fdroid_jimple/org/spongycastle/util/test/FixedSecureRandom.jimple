org.spongycastle.util.test.FixedSecureRandom extends java.security.SecureRandom
private byte[] _data
private int _index
private int _intPad
    public void <init>(boolean, byte[])
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        boolean $z0;
        byte[] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        $r2 = newarray (byte[])[1];

        $r2[0] = $r1;

        specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>($z0, $r2);

        return;
    }
    public void <init>(boolean, byte[][])
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        boolean $z0;
        byte[][] $r1;
        java.io.ByteArrayOutputStream r2;
        java.io.IOException r3;
        byte[] $r4;
        int i0, $i1;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[][];

        specialinvoke r0.<java.security.SecureRandom: void <init>()>();

        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 == $i1 goto label5;

        $r4 = $r1[i0];

     label2:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r4);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r3 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t save value array.");

        throw $r5;

     label5:
        $r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.spongycastle.util.test.FixedSecureRandom: byte[] _data> = $r4;

        if $z0 == 0 goto label6;

        $r4 = r0.<org.spongycastle.util.test.FixedSecureRandom: byte[] _data>;

        i0 = lengthof $r4;

        i0 = i0 % 4;

        r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad> = i0;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
    public void <init>(byte[])
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        byte[] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $r1 := @parameter0: byte[];

        $r2 = newarray (byte[])[1];

        $r2[0] = $r1;

        specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>(0, $r2);

        return;
    }
    public void <init>(byte[][])
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $r1 := @parameter0: byte[][];

        specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: void <init>(boolean,byte[][])>(0, $r1);

        return;
    }
    private int nextValue()
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $r1 = r0.<org.spongycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i0 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _index>;

        $i1 = $i0 + 1;

        r0.<org.spongycastle.util.test.FixedSecureRandom: int _index> = $i1;

        $b2 = $r1[$i0];

        $i0 = $b2 & 255;

        return $i0;
    }
    public boolean isExhausted()
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        int $i0, $i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $i0 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _index>;

        $r1 = r0.<org.spongycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void nextBytes(byte[])
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        byte[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.util.test.FixedSecureRandom: byte[] _data>;

        $i1 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _index>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r1, 0, $i0);

        $i0 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _index>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.util.test.FixedSecureRandom: int _index> = $i0;

        return;
    }
    public int nextInt()
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i0 = $i0 << 24;

        $i1 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i1 = $i1 << 16;

        $i0 = $i0 | $i1;

        $i1 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad>;

        if $i1 != 2 goto label2;

        $i1 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad>;

        $i1 = $i1 + -1;

        r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad> = $i1;

     label1:
        $i1 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad>;

        if $i1 != 1 goto label3;

        $i1 = r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad>;

        $i1 = $i1 + -1;

        r0.<org.spongycastle.util.test.FixedSecureRandom: int _intPad> = $i1;

        return $i0;

     label2:
        $i1 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i1 = $i1 << 8;

        $i0 = $i0 | $i1;

        goto label1;

     label3:
        $i1 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $i0 = $i0 | $i1;

        return $i0;
    }
    public long nextLong()
    {
        org.spongycastle.util.test.FixedSecureRandom r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.spongycastle.util.test.FixedSecureRandom;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l1 = (long) $i0;

        $l1 = $l1 << 56;

        $l1 = 0L | $l1;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 48;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 40;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 32;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 24;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 16;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l2 = $l2 << 8;

        $l1 = $l1 | $l2;

        $i0 = specialinvoke r0.<org.spongycastle.util.test.FixedSecureRandom: int nextValue()>();

        $l2 = (long) $i0;

        $l1 = $l1 | $l2;

        return $l1;
    }
