org.spongycastle.util.test.SimpleTest extends java.lang.Object implements org.spongycastle.util.test.Test
    public void <init>()
    {
        org.spongycastle.util.test.SimpleTest r0;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected static void runTest(org.spongycastle.util.test.Test)
    {
        org.spongycastle.util.test.Test $r0;
        java.io.PrintStream $r1;

        $r0 := @parameter0: org.spongycastle.util.test.Test;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.spongycastle.util.test.SimpleTest: void runTest(org.spongycastle.util.test.Test,java.io.PrintStream)>($r0, $r1);

        return;
    }
    protected static void runTest(org.spongycastle.util.test.Test, java.io.PrintStream)
    {
        org.spongycastle.util.test.Test $r0;
        java.io.PrintStream $r1;
        org.spongycastle.util.test.TestResult $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: org.spongycastle.util.test.Test;

        $r1 := @parameter1: java.io.PrintStream;

        $r2 = interfaceinvoke $r0.<org.spongycastle.util.test.Test: org.spongycastle.util.test.TestResult perform()>();

        $r3 = interfaceinvoke $r2.<org.spongycastle.util.test.TestResult: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r2.<org.spongycastle.util.test.TestResult: java.lang.Throwable getException()>();

        if $r4 == null goto label1;

        $r4 = interfaceinvoke $r2.<org.spongycastle.util.test.TestResult: java.lang.Throwable getException()>();

        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r1);

     label1:
        return;
    }
    private org.spongycastle.util.test.TestResult success()
    {
        org.spongycastle.util.test.SimpleTest r0;
        org.spongycastle.util.test.TestResult $r1;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        $r1 = staticinvoke <org.spongycastle.util.test.SimpleTestResult: org.spongycastle.util.test.TestResult successful(org.spongycastle.util.test.Test,java.lang.String)>(r0, "Okay");

        return $r1;
    }
    protected boolean areEqual(byte[], byte[])
    {
        org.spongycastle.util.test.SimpleTest r0;
        byte[] $r1, $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r1, $r2);

        return $z0;
    }
    protected void fail(java.lang.String)
    {
        org.spongycastle.util.test.SimpleTest r0;
        java.lang.String $r1;
        org.spongycastle.util.test.TestFailedException $r2;
        org.spongycastle.util.test.TestResult $r3;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.util.test.TestFailedException;

        $r3 = staticinvoke <org.spongycastle.util.test.SimpleTestResult: org.spongycastle.util.test.TestResult failed(org.spongycastle.util.test.Test,java.lang.String)>(r0, $r1);

        specialinvoke $r2.<org.spongycastle.util.test.TestFailedException: void <init>(org.spongycastle.util.test.TestResult)>($r3);

        throw $r2;
    }
    protected void fail(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.spongycastle.util.test.SimpleTest r0;
        java.lang.String $r1;
        java.lang.Object $r2, $r3;
        org.spongycastle.util.test.TestFailedException $r4;
        org.spongycastle.util.test.TestResult $r5;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 = new org.spongycastle.util.test.TestFailedException;

        $r5 = staticinvoke <org.spongycastle.util.test.SimpleTestResult: org.spongycastle.util.test.TestResult failed(org.spongycastle.util.test.Test,java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2, $r3);

        specialinvoke $r4.<org.spongycastle.util.test.TestFailedException: void <init>(org.spongycastle.util.test.TestResult)>($r5);

        throw $r4;
    }
    protected void fail(java.lang.String, java.lang.Throwable)
    {
        org.spongycastle.util.test.SimpleTest r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        org.spongycastle.util.test.TestFailedException $r3;
        org.spongycastle.util.test.TestResult $r4;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = new org.spongycastle.util.test.TestFailedException;

        $r4 = staticinvoke <org.spongycastle.util.test.SimpleTestResult: org.spongycastle.util.test.TestResult failed(org.spongycastle.util.test.Test,java.lang.String,java.lang.Throwable)>(r0, $r1, $r2);

        specialinvoke $r3.<org.spongycastle.util.test.TestFailedException: void <init>(org.spongycastle.util.test.TestResult)>($r4);

        throw $r3;
    }
public abstract java.lang.String getName() { 
// no body
} 
    public org.spongycastle.util.test.TestResult perform()
    {
        org.spongycastle.util.test.SimpleTest r0;
        org.spongycastle.util.test.TestResult $r1;
        org.spongycastle.util.test.TestFailedException r2;
        java.lang.Exception r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.util.test.SimpleTest;

     label1:
        virtualinvoke r0.<org.spongycastle.util.test.SimpleTest: void performTest()>();

        $r1 = specialinvoke r0.<org.spongycastle.util.test.SimpleTest: org.spongycastle.util.test.TestResult success()>();

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        $r1 = virtualinvoke r2.<org.spongycastle.util.test.TestFailedException: org.spongycastle.util.test.TestResult getResult()>();

        return $r1;

     label4:
        r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = staticinvoke <org.spongycastle.util.test.SimpleTestResult: org.spongycastle.util.test.TestResult failed(org.spongycastle.util.test.Test,java.lang.String,java.lang.Throwable)>(r0, $r5, r3);

        return $r1;

        catch org.spongycastle.util.test.TestFailedException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }
public abstract void performTest() throws java.lang.Exception { 
// no body
} 
