org.spongycastle.util.encoders.HexTranslator extends java.lang.Object implements org.spongycastle.util.encoders.Translator
private static final byte[] hexTable
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.spongycastle.util.encoders.HexTranslator: byte[] hexTable> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.util.encoders.HexTranslator r0;

        r0 := @this: org.spongycastle.util.encoders.HexTranslator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int decode(byte[], int, int, byte[], int)
    {
        org.spongycastle.util.encoders.HexTranslator r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i4, i5, $i6;
        byte b2, b3;

        r0 := @this: org.spongycastle.util.encoders.HexTranslator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i4 := @parameter4: int;

        $i1 = $i1 / 2;

        i5 = 0;

     label1:
        if i5 >= $i1 goto label6;

        $i6 = i5 * 2;

        $i6 = $i6 + $i0;

        b2 = $r1[$i6];

        $i6 = i5 * 2;

        $i6 = $i6 + $i0;

        $i6 = $i6 + 1;

        b3 = $r1[$i6];

        if b2 >= 97 goto label4;

        $i6 = b2 + -48;

        $i6 = $i6 << 4;

        b2 = (byte) $i6;

        $r2[$i4] = b2;

     label2:
        if b3 >= 97 goto label5;

        b2 = $r2[$i4];

        $i6 = b3 + -48;

        b3 = (byte) $i6;

        $i6 = b2 + b3;

        b3 = (byte) $i6;

        $r2[$i4] = b3;

     label3:
        $i4 = $i4 + 1;

        i5 = i5 + 1;

        goto label1;

     label4:
        $i6 = b2 + -97;

        $i6 = $i6 + 10;

        $i6 = $i6 << 4;

        b2 = (byte) $i6;

        $r2[$i4] = b2;

        goto label2;

     label5:
        b2 = $r2[$i4];

        $i6 = b3 + -97;

        $i6 = $i6 + 10;

        b3 = (byte) $i6;

        $i6 = b2 + b3;

        b3 = (byte) $i6;

        $r2[$i4] = b3;

        goto label3;

     label6:
        return $i1;
    }
    public int encode(byte[], int, int, byte[], int)
    {
        org.spongycastle.util.encoders.HexTranslator r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1, $i2, i3, i4, $i5, $i7;
        byte $b6;

        r0 := @this: org.spongycastle.util.encoders.HexTranslator;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i1 := @parameter4: int;

        i3 = 0;

        i4 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $i5 = $i1 + i4;

        $r3 = <org.spongycastle.util.encoders.HexTranslator: byte[] hexTable>;

        $b6 = $r1[$i2];

        $i7 = $b6 >> 4;

        $i7 = $i7 & 15;

        $b6 = $r3[$i7];

        $r2[$i5] = $b6;

        $i5 = $i1 + i4;

        $i5 = $i5 + 1;

        $r3 = <org.spongycastle.util.encoders.HexTranslator: byte[] hexTable>;

        $b6 = $r1[$i2];

        $i7 = $b6 & 15;

        $b6 = $r3[$i7];

        $r2[$i5] = $b6;

        $i2 = $i2 + 1;

        i3 = i3 + 1;

        i4 = i4 + 2;

        goto label1;

     label2:
        $i2 = $i0 * 2;

        return $i2;
    }
    public int getDecodedBlockSize()
    {
        org.spongycastle.util.encoders.HexTranslator r0;

        r0 := @this: org.spongycastle.util.encoders.HexTranslator;

        return 1;
    }
    public int getEncodedBlockSize()
    {
        org.spongycastle.util.encoders.HexTranslator r0;

        r0 := @this: org.spongycastle.util.encoders.HexTranslator;

        return 2;
    }
