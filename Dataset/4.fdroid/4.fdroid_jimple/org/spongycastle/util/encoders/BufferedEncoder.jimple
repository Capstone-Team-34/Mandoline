org.spongycastle.util.encoders.BufferedEncoder extends java.lang.Object
protected byte[] buf
protected int bufOff
protected org.spongycastle.util.encoders.Translator translator
    public void <init>(org.spongycastle.util.encoders.Translator, int)
    {
        org.spongycastle.util.encoders.BufferedEncoder r0;
        org.spongycastle.util.encoders.Translator $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.util.encoders.BufferedEncoder;

        $r1 := @parameter0: org.spongycastle.util.encoders.Translator;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.util.encoders.BufferedEncoder: org.spongycastle.util.encoders.Translator translator> = $r1;

        $i1 = interfaceinvoke $r1.<org.spongycastle.util.encoders.Translator: int getEncodedBlockSize()>();

        $i1 = $i0 % $i1;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer size not multiple of input block size");

        throw $r2;

     label1:
        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf> = $r3;

        r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

        return;
    }
    public int processByte(byte, byte[], int)
    {
        org.spongycastle.util.encoders.BufferedEncoder r0;
        byte $b0;
        byte[] $r1, $r2, $r4;
        int $i1, $i2, $i3;
        org.spongycastle.util.encoders.Translator $r3;

        r0 := @this: org.spongycastle.util.encoders.BufferedEncoder;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff> = $i3;

        $r2[$i2] = $b0;

        $i2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        $r2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i3 = lengthof $r2;

        if $i2 != $i3 goto label1;

        $r3 = r0.<org.spongycastle.util.encoders.BufferedEncoder: org.spongycastle.util.encoders.Translator translator>;

        $r2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $r4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i2 = lengthof $r4;

        $i1 = interfaceinvoke $r3.<org.spongycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>($r2, 0, $i2, $r1, $i1);

        r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

        return $i1;

     label1:
        return 0;
    }
    public int processBytes(byte[], int, int, byte[], int)
    {
        org.spongycastle.util.encoders.BufferedEncoder r0;
        byte[] $r1, $r2, $r4, $r6;
        int i0, $i1, $i2, $i3, i4, $i5;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.util.encoders.Translator $r5;

        r0 := @this: org.spongycastle.util.encoders.BufferedEncoder;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i3 := @parameter4: int;

        if $i2 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        i4 = 0;

        $r4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        i0 = lengthof $r4;

        $i5 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        i0 = i0 - $i5;

        if $i2 <= i0 goto label2;

        $r4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        i4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r4, i4, i0);

        $r5 = r0.<org.spongycastle.util.encoders.BufferedEncoder: org.spongycastle.util.encoders.Translator translator>;

        $r4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $r6 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        i4 = lengthof $r6;

        i4 = interfaceinvoke $r5.<org.spongycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>($r4, 0, i4, $r2, $i3);

        r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff> = 0;

        $i2 = $i2 - i0;

        $i1 = $i1 + i0;

        i0 = $i3 + i4;

        $r4 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i3 = lengthof $r4;

        $i3 = $i2 % $i3;

        $i3 = $i2 - $i3;

        $r5 = r0.<org.spongycastle.util.encoders.BufferedEncoder: org.spongycastle.util.encoders.Translator translator>;

        i0 = interfaceinvoke $r5.<org.spongycastle.util.encoders.Translator: int encode(byte[],int,int,byte[],int)>($r1, $i1, $i3, $r2, i0);

        i4 = i4 + i0;

        $i2 = $i2 - $i3;

        $i1 = $i1 + $i3;

     label2:
        if $i2 == 0 goto label3;

        $r2 = r0.<org.spongycastle.util.encoders.BufferedEncoder: byte[] buf>;

        $i3 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i3, $i2);

        $i1 = r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff>;

        $i1 = $i1 + $i2;

        r0.<org.spongycastle.util.encoders.BufferedEncoder: int bufOff> = $i1;

     label3:
        return i4;
    }
