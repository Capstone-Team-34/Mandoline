org.spongycastle.util.BigIntegers extends java.lang.Object
private static final int MAX_ITERATIONS
private static final java.math.BigInteger ZERO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.util.BigIntegers: java.math.BigInteger ZERO> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.util.BigIntegers r0;

        r0 := @this: org.spongycastle.util.BigIntegers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] asUnsignedByteArray(int, java.math.BigInteger)
    {
        int $i0, i1;
        java.math.BigInteger $r0;
        byte[] r1, $r2;
        byte b2, $b3;
        java.lang.IllegalArgumentException $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.BigInteger;

        b2 = 0;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        i1 = lengthof $r2;

        if i1 != $i0 goto label1;

        return $r2;

     label1:
        $b3 = $r2[0];

        if $b3 != 0 goto label2;

        b2 = 1;

     label2:
        i1 = lengthof $r2;

        i1 = i1 - b2;

        if i1 <= $i0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("standard length exceeded for value");

        throw $r3;

     label3:
        r1 = newarray (byte)[$i0];

        $i0 = lengthof r1;

        $i0 = $i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, b2, r1, $i0, i1);

        return r1;
    }
    public static byte[] asUnsignedByteArray(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int $i0;
        byte[] $r1, r2;
        byte $b1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b1 = $r1[0];

        if $b1 != 0 goto label1;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r2, 0, $i0);

        return r2;

     label1:
        return $r1;
    }
    public static java.math.BigInteger createRandomInRange(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, r2, r3;
        java.security.SecureRandom $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;

        r3 := @parameter0: java.math.BigInteger;

        $r0 := @parameter1: java.math.BigInteger;

        $r1 := @parameter2: java.security.SecureRandom;

        $i0 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i0 < 0 goto label1;

        if $i0 <= 0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'min\' may not be greater than \'max\'");

        throw $r4;

     label1:
        $i0 = virtualinvoke r3.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label2;

        r2 = <org.spongycastle.util.BigIntegers: java.math.BigInteger ZERO>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r3);

        $r0 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r2, $r0, $r1);

        r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r3);

        return r3;

     label2:
        $i0 = 0;

     label3:
        if $i0 >= 1000 goto label5;

        r2 = new java.math.BigInteger;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        specialinvoke r2.<java.math.BigInteger: void <init>(int,java.util.Random)>($i1, $r1);

        $i1 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);

        if $i1 < 0 goto label4;

        $i1 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i1 > 0 goto label4;

        return r2;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        r2 = new java.math.BigInteger;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r3);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + -1;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r1);

        r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r3);

     label6:
        return r3;
    }
    public static java.math.BigInteger fromUnsignedByteArray(byte[])
    {
        byte[] $r0;
        java.math.BigInteger $r1;

        $r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        return $r1;
    }
    public static java.math.BigInteger fromUnsignedByteArray(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2;
        java.math.BigInteger $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = $r0;

        if $i0 != 0 goto label1;

        $i2 = lengthof $r0;

        if $i1 == $i2 goto label2;

     label1:
        r1 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

     label2:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r2;
    }
