org.spongycastle.util.Arrays extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.util.Arrays r0;

        r0 := @this: org.spongycastle.util.Arrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] append(byte[], byte)
    {
        byte[] $r0, r1;
        byte $b0;
        int i1, $i2;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        if $r0 != null goto label1;

        $r0 = newarray (byte)[1];

        $r0[0] = $b0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        r1[i1] = $b0;

        return r1;
    }
    public static int[] append(int[], int)
    {
        int[] $r0, r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r0 = newarray (int)[1];

        $r0[0] = $i0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (int)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        r1[i1] = $i0;

        return r1;
    }
    public static short[] append(short[], short)
    {
        short[] $r0, r1;
        short $s0;
        int i1, $i2;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        if $r0 != null goto label1;

        $r0 = newarray (short)[1];

        $r0[0] = $s0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (short)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        r1[i1] = $s0;

        return r1;
    }
    public static boolean areEqual(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label7;

        $b2 = $r0[$i0];

        $b3 = $r1[$i0];

        if $b2 == $b3 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static boolean areEqual(char[], char[])
    {
        char[] $r0, $r1;
        int $i0, $i1;
        char $c2, $c3;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: char[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label7;

        $c2 = $r0[$i0];

        $c3 = $r1[$i0];

        if $c2 == $c3 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static boolean areEqual(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label7;

        $i1 = $r0[$i0];

        $i2 = $r1[$i0];

        if $i1 == $i2 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static boolean areEqual(long[], long[])
    {
        long[] $r0, $r1;
        long $l0, $l3;
        int $i1, $i2;
        byte $b4;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof $r0;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label4;

        return 0;

     label4:
        $i1 = 0;

     label5:
        $i2 = lengthof $r0;

        if $i1 == $i2 goto label7;

        $l3 = $r0[$i1];

        $l0 = $r1[$i1];

        $b4 = $l3 cmp $l0;

        if $b4 == 0 goto label6;

        return 0;

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static boolean areEqual(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;
        java.lang.Object r2, r3;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label8;

        r2 = $r0[$i0];

        r3 = $r1[$i0];

        if r2 != null goto label6;

        if r3 == null goto label7;

        return 0;

     label6:
        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $i0 = $i0 + 1;

        goto label5;

     label8:
        return 1;
    }
    public static boolean areEqual(boolean[], boolean[])
    {
        boolean[] $r0, $r1;
        int $i0, $i1;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $r1 := @parameter1: boolean[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label7;

        $z0 = $r0[$i0];

        $z1 = $r1[$i0];

        if $z0 == $z1 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }
    public static byte[] clone(byte[])
    {
        byte[] $r0, r1;
        int $i0;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static byte[] clone(byte[], byte[])
    {
        byte[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        if r1 == null goto label2;

        $i1 = lengthof r1;

        $i0 = lengthof $r0;

        if $i1 == $i0 goto label3;

     label2:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r0);

        return $r0;

     label3:
        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static char[] clone(char[])
    {
        char[] $r0, r1;
        int $i0;

        $r0 := @parameter0: char[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (char)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static int[] clone(int[])
    {
        int[] $r0, r1;
        int $i0;

        $r0 := @parameter0: int[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static long[] clone(long[])
    {
        long[] $r0, r1;
        int $i0;

        $r0 := @parameter0: long[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (long)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static long[] clone(long[], long[])
    {
        long[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        if $r0 != null goto label1;

        return null;

     label1:
        if r1 == null goto label2;

        $i1 = lengthof r1;

        $i0 = lengthof $r0;

        if $i1 == $i0 goto label3;

     label2:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[])>($r0);

        return $r0;

     label3:
        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static java.math.BigInteger[] clone(java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0, r1;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (java.math.BigInteger)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static short[] clone(short[])
    {
        short[] $r0, r1;
        int $i0;

        $r0 := @parameter0: short[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (short)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static byte[][] clone(byte[][])
    {
        byte[][] $r0, r1;
        byte[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof r1;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    public static byte[][][] clone(byte[][][])
    {
        byte[][][] $r0, r1;
        byte[][] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[][])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof r1;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[][] clone(byte[][])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    public static byte[] concatenate(byte[], byte[])
    {
        byte[] $r0, $r1, r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        return r2;

     label1:
        if $r1 == null goto label2;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r0;

     label2:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r0);

        return $r0;
    }
    public static byte[] concatenate(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2, r3;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r3, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, $i0, $i1);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, $i0, $i1);

        return r3;

     label1:
        if $r1 != null goto label2;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r0, $r2);

        return $r0;

     label2:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r0, $r1);

        return $r0;
    }
    public static byte[] concatenate(byte[], byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2, $r3, r4;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        if $r0 == null goto label1;

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        if $r3 == null goto label1;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        r4 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r4, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, $i0, $i1);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r4, $i0, $i1);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, $i0, $i1);

        return r4;

     label1:
        if $r3 != null goto label2;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r0, $r1, $r2);

        return $r0;

     label2:
        if $r2 != null goto label3;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r0, $r1, $r3);

        return $r0;

     label3:
        if $r1 != null goto label4;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r0, $r2, $r3);

        return $r0;

     label4:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r1, $r2, $r3);

        return $r0;
    }
    public static int[] concatenate(int[], int[])
    {
        int[] $r0, $r1, r2;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        if $r0 != null goto label1;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r0;

     label1:
        if $r1 != null goto label2;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r0);

        return $r0;

     label2:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r2 = newarray (int)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        return r2;
    }
    public static boolean constantTimeAreEqual(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;
        byte $b3, $b4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

        $i1 = 0;

     label5:
        $i2 = lengthof $r0;

        if $i1 == $i2 goto label6;

        $b3 = $r0[$i1];

        $b4 = $r1[$i1];

        $i2 = $b3 ^ $b4;

        $i0 = $i0 | $i2;

        $i1 = $i1 + 1;

        goto label5;

     label6:
        if $i0 == 0 goto label7;

        return 0;

     label7:
        return 1;
    }
    public static boolean contains(int[], int)
    {
        int[] $r0;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label3;

        $i2 = $r0[i1];

        if $i2 != $i0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static boolean contains(short[], short)
    {
        short[] $r0;
        short $s0, $s3;
        int i1, $i2;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label3;

        $s3 = $r0[i1];

        if $s3 != $s0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static byte[] copyOf(byte[], int)
    {
        byte[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        r1 = newarray (byte)[$i0];

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static char[] copyOf(char[], int)
    {
        char[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        r1 = newarray (char)[$i0];

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static int[] copyOf(int[], int)
    {
        int[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        r1 = newarray (int)[$i0];

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static long[] copyOf(long[], int)
    {
        long[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        r1 = newarray (long)[$i0];

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static java.math.BigInteger[] copyOf(java.math.BigInteger[], int)
    {
        java.math.BigInteger[] $r0, r1;
        int $i0, $i1;

        $r0 := @parameter0: java.math.BigInteger[];

        $i0 := @parameter1: int;

        r1 = newarray (java.math.BigInteger)[$i0];

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;

     label1:
        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static byte[] copyOfRange(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int getLength(int,int)>($i0, $i1);

        r1 = newarray (byte)[$i1];

        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static int[] copyOfRange(int[], int, int)
    {
        int[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int getLength(int,int)>($i0, $i1);

        r1 = newarray (int)[$i1];

        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static long[] copyOfRange(long[], int, int)
    {
        long[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int getLength(int,int)>($i0, $i1);

        r1 = newarray (long)[$i1];

        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static java.math.BigInteger[] copyOfRange(java.math.BigInteger[], int, int)
    {
        java.math.BigInteger[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.math.BigInteger[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int getLength(int,int)>($i0, $i1);

        r1 = newarray (java.math.BigInteger)[$i1];

        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        if $i2 >= $i1 goto label1;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static void fill(byte[], byte)
    {
        byte[] $r0;
        byte $b0;
        int $i1, i2;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        i2 = 0;

     label1:
        $i1 = lengthof $r0;

        if i2 >= $i1 goto label2;

        $r0[i2] = $b0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static void fill(char[], char)
    {
        char[] $r0;
        char $c0;
        int $i1, i2;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        i2 = 0;

     label1:
        $i1 = lengthof $r0;

        if i2 >= $i1 goto label2;

        $r0[i2] = $c0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static void fill(int[], int)
    {
        int[] $r0;
        int $i0, $i1, i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        i2 = 0;

     label1:
        $i1 = lengthof $r0;

        if i2 >= $i1 goto label2;

        $r0[i2] = $i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static void fill(long[], long)
    {
        long[] $r0;
        long $l0;
        int $i1, i2;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        i2 = 0;

     label1:
        $i1 = lengthof $r0;

        if i2 >= $i1 goto label2;

        $r0[i2] = $l0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static void fill(short[], short)
    {
        short[] $r0;
        short $s0;
        int $i1, i2;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        i2 = 0;

     label1:
        $i1 = lengthof $r0;

        if i2 >= $i1 goto label2;

        $r0[i2] = $s0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    private static int getLength(int, int)
    {
        int $i0, $i1, i2;
        java.lang.StringBuffer r0, $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i1 - $i0;

        if i2 >= 0 goto label1;

        r0 = new java.lang.StringBuffer;

        specialinvoke r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" > ");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return i2;
    }
    public static int hashCode(byte[])
    {
        byte[] $r0;
        byte $b0;
        int i1, i2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof $r0;

        i2 = i1 + 1;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        i2 = i2 * 257;

        $b0 = $r0[i1];

        i2 = i2 ^ $b0;

        goto label2;

     label3:
        return i2;
    }
    public static int hashCode(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, i2, $i3;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        i2 = $i1;

        $i1 = $i1 + 1;

     label2:
        i2 = i2 + -1;

        if i2 < 0 goto label3;

        $i1 = $i1 * 257;

        $i3 = $i0 + i2;

        $b4 = $r0[$i3];

        $i1 = $i1 ^ $b4;

        goto label2;

     label3:
        return $i1;
    }
    public static int hashCode(char[])
    {
        char[] $r0;
        char $c0;
        int i1, i2;

        $r0 := @parameter0: char[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof $r0;

        i2 = i1 + 1;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        i2 = i2 * 257;

        $c0 = $r0[i1];

        i2 = i2 ^ $c0;

        goto label2;

     label3:
        return i2;
    }
    public static int hashCode(int[])
    {
        int[] $r0;
        int $i0, i1, i2;

        $r0 := @parameter0: int[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof $r0;

        $i0 = i1 + 1;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        i2 = $i0 * 257;

        $i0 = $r0[i1];

        $i0 = i2 ^ $i0;

        goto label2;

     label3:
        return $i0;
    }
    public static int hashCode(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        i2 = $i1;

        $i1 = $i1 + 1;

     label2:
        i2 = i2 + -1;

        if i2 < 0 goto label3;

        $i1 = $i1 * 257;

        $i3 = $i0 + i2;

        $i3 = $r0[$i3];

        $i1 = $i1 ^ $i3;

        goto label2;

     label3:
        return $i1;
    }
    public static int hashCode(long[])
    {
        long[] $r0;
        long l0;
        int i1, i2, $i3;

        $r0 := @parameter0: long[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof $r0;

        i2 = i1 + 1;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        l0 = $r0[i1];

        i2 = i2 * 257;

        $i3 = (int) l0;

        i2 = i2 ^ $i3;

        i2 = i2 * 257;

        l0 = l0 >>> 32;

        $i3 = (int) l0;

        i2 = i2 ^ $i3;

        goto label2;

     label3:
        return i2;
    }
    public static int hashCode(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, i3, $i4;
        long l2;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        i3 = $i1;

        $i1 = $i1 + 1;

     label2:
        i3 = i3 + -1;

        if i3 < 0 goto label3;

        $i4 = $i0 + i3;

        l2 = $r0[$i4];

        $i1 = $i1 * 257;

        $i4 = (int) l2;

        $i1 = $i1 ^ $i4;

        $i1 = $i1 * 257;

        l2 = l2 >>> 32;

        $i4 = (int) l2;

        $i1 = $i1 ^ $i4;

        goto label2;

     label3:
        return $i1;
    }
    public static int hashCode(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0, i1, i2;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof $r0;

        $i0 = i1 + 1;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        i2 = $i0 * 257;

        $r1 = $r0[i1];

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = i2 ^ $i0;

        goto label2;

     label3:
        return $i0;
    }
    public static int hashCode(short[])
    {
        short[] $r0;
        int i0, i1, $i3;
        short $s2;

        $r0 := @parameter0: short[];

        if $r0 != null goto label1;

        return 0;

     label1:
        i0 = lengthof $r0;

        i1 = i0 + 1;

     label2:
        i0 = i0 + -1;

        if i0 < 0 goto label3;

        i1 = i1 * 257;

        $s2 = $r0[i0];

        $i3 = $s2 & 255;

        i1 = i1 ^ $i3;

        goto label2;

     label3:
        return i1;
    }
    public static int hashCode(int[][])
    {
        int[][] $r0;
        int $i0, i1, $i2;
        int[] $r1;

        $r0 := @parameter0: int[][];

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 == $i2 goto label2;

        $i2 = $i0 * 257;

        $r1 = $r0[i1];

        $i0 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(int[])>($r1);

        $i0 = $i2 + $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public static int hashCode(short[][])
    {
        short[][] $r0;
        int $i0, i1, $i2;
        short[] $r1;

        $r0 := @parameter0: short[][];

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 == $i2 goto label2;

        $i2 = $i0 * 257;

        $r1 = $r0[i1];

        $i0 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(short[])>($r1);

        $i0 = $i2 + $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public static int hashCode(short[][][])
    {
        short[][][] $r0;
        int $i0, i1, $i2;
        short[][] $r1;

        $r0 := @parameter0: short[][][];

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 == $i2 goto label2;

        $i2 = $i0 * 257;

        $r1 = $r0[i1];

        $i0 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(short[][])>($r1);

        $i0 = $i2 + $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public static byte[] prepend(byte[], byte)
    {
        byte[] $r0, r1;
        byte $b0;
        int i1, $i2;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        if $r0 != null goto label1;

        $r0 = newarray (byte)[1];

        $r0[0] = $b0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 1, i1);

        r1[0] = $b0;

        return r1;
    }
    public static int[] prepend(int[], int)
    {
        int[] $r0, r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r0 = newarray (int)[1];

        $r0[0] = $i0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (int)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 1, i1);

        r1[0] = $i0;

        return r1;
    }
    public static short[] prepend(short[], short)
    {
        short[] $r0, r1;
        short $s0;
        int i1, $i2;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        if $r0 != null goto label1;

        $r0 = newarray (short)[1];

        $r0[0] = $s0;

        return $r0;

     label1:
        i1 = lengthof $r0;

        $i2 = i1 + 1;

        r1 = newarray (short)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 1, i1);

        r1[0] = $s0;

        return r1;
    }
    public static byte[] reverse(byte[])
    {
        byte[] $r0, r1;
        byte $b0;
        int i1, i2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        i1 = lengthof $r0;

        r1 = newarray (byte)[i1];

        i2 = 0;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        $b0 = $r0[i2];

        r1[i1] = $b0;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }
    public static int[] reverse(int[])
    {
        int[] $r0, r1;
        int $i0, i1, i2;

        $r0 := @parameter0: int[];

        if $r0 != null goto label1;

        return null;

     label1:
        i1 = lengthof $r0;

        r1 = newarray (int)[i1];

        $i0 = 0;

     label2:
        i1 = i1 + -1;

        if i1 < 0 goto label3;

        i2 = $i0 + 1;

        $i0 = $r0[$i0];

        r1[i1] = $i0;

        $i0 = i2;

        goto label2;

     label3:
        return r1;
    }
