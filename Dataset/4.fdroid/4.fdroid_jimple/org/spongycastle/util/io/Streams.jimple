org.spongycastle.util.io.Streams extends java.lang.Object
private static int BUFFER_SIZE
    static void <clinit>()
    {
        <org.spongycastle.util.io.Streams: int BUFFER_SIZE> = 4096;

        return;
    }
    public void <init>()
    {
        org.spongycastle.util.io.Streams r0;

        r0 := @this: org.spongycastle.util.io.Streams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void drain(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = <org.spongycastle.util.io.Streams: int BUFFER_SIZE>;

        r1 = newarray (byte)[$i0];

     label1:
        $i0 = lengthof r1;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i0);

        if $i0 >= 0 goto label1;

        return;
    }
    public static void pipeAll(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        byte[] r2;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = <org.spongycastle.util.io.Streams: int BUFFER_SIZE>;

        r2 = newarray (byte)[$i0];

     label1:
        $i0 = lengthof r2;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, $i0);

        if $i0 < 0 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        goto label1;

     label2:
        return;
    }
    public static long pipeAllLimited(java.io.InputStream, long, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        long $l0, $l1, l3, $l4;
        java.io.OutputStream $r1;
        byte[] r2;
        int $i2;
        byte $b5;
        org.spongycastle.util.io.StreamOverflowException $r3;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.io.OutputStream;

        l3 = 0L;

        $i2 = <org.spongycastle.util.io.Streams: int BUFFER_SIZE>;

        r2 = newarray (byte)[$i2];

     label1:
        $i2 = lengthof r2;

        $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, $i2);

        if $i2 < 0 goto label3;

        $l4 = $l0 - l3;

        $l1 = (long) $i2;

        $b5 = $l4 cmp $l1;

        if $b5 >= 0 goto label2;

        $r3 = new org.spongycastle.util.io.StreamOverflowException;

        specialinvoke $r3.<org.spongycastle.util.io.StreamOverflowException: void <init>(java.lang.String)>("Data Overflow");

        throw $r3;

     label2:
        $l1 = (long) $i2;

        l3 = l3 + $l1;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i2);

        goto label1;

     label3:
        return l3;
    }
    public static byte[] readAll(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.spongycastle.util.io.Streams: void pipeAll(java.io.InputStream,java.io.OutputStream)>($r0, r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static byte[] readAllLimited(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        java.io.ByteArrayOutputStream r1;
        long $l1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $l1 = (long) $i0;

        staticinvoke <org.spongycastle.util.io.Streams: long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream)>($r0, $l1, r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $i0 = staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[],int,int)>($r0, $r1, 0, $i0);

        return $i0;
    }
    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, i4;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        i4 = 0;

     label1:
        if i4 >= $i1 goto label3;

        $i2 = $i0 + i4;

        $i3 = $i1 - i4;

        $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, $i2, $i3);

        if $i2 >= 0 goto label2;

        return i4;

     label2:
        i4 = i4 + $i2;

        goto label1;

     label3:
        return i4;
    }
