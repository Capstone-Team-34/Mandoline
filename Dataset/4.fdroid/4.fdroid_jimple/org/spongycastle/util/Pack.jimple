org.spongycastle.util.Pack extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.util.Pack r0;

        r0 := @this: org.spongycastle.util.Pack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int bigEndianToInt(byte[], int)
    {
        byte[] $r0;
        int $i0, i2, $i3;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        i2 = $b1 << 24;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 & 255;

        $i0 = i2 | $i0;

        return $i0;
    }
    public static void bigEndianToInt(byte[], int, int[])
    {
        byte[] $r0;
        int[] $r1;
        int $i0, $i1, i2;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r0, $i1);

        $r1[i2] = $i0;

        $i1 = $i1 + 4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static long bigEndianToLong(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r0, $i0);

        $i0 = $i0 + 4;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r0, $i0);

        $l2 = (long) $i1;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 32;

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    public static void bigEndianToLong(byte[], int, long[])
    {
        byte[] $r0;
        long[] $r1;
        int $i0, $i2, i3;
        long $l1;

        $r0 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $r1 := @parameter2: long[];

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $l1 = staticinvoke <org.spongycastle.util.Pack: long bigEndianToLong(byte[],int)>($r0, $i2);

        $r1[i3] = $l1;

        $i2 = $i2 + 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static void intToBigEndian(int, byte[], int)
    {
        int $i0, $i1, $i2;
        byte[] $r0;
        byte $b3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i0 >>> 24;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i1 = $i1 + 1;

        $i2 = $i0 >>> 16;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i1 = $i1 + 1;

        $i2 = $i0 >>> 8;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i1 = $i1 + 1;

        $b3 = (byte) $i0;

        $r0[$i1] = $b3;

        return;
    }
    public static void intToBigEndian(int[], byte[], int)
    {
        int[] $r0;
        byte[] $r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i2 = $r0[i1];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i2, $r1, $i0);

        $i0 = $i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static byte[] intToBigEndian(int)
    {
        int $i0;
        byte[] r0;

        $i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, r0, 0);

        return r0;
    }
    public static byte[] intToBigEndian(int[])
    {
        int[] $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i0 = $i0 * 4;

        r1 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static void intToLittleEndian(int, byte[], int)
    {
        int $i0, $i1, $i3;
        byte[] $r0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = (byte) $i0;

        $r0[$i1] = $b2;

        $i1 = $i1 + 1;

        $i3 = $i0 >>> 8;

        $b2 = (byte) $i3;

        $r0[$i1] = $b2;

        $i1 = $i1 + 1;

        $i3 = $i0 >>> 16;

        $b2 = (byte) $i3;

        $r0[$i1] = $b2;

        $i1 = $i1 + 1;

        $i0 = $i0 >>> 24;

        $b2 = (byte) $i0;

        $r0[$i1] = $b2;

        return;
    }
    public static void intToLittleEndian(int[], byte[], int)
    {
        int[] $r0;
        byte[] $r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i2 = $r0[i1];

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int,byte[],int)>($i2, $r1, $i0);

        $i0 = $i0 + 4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static byte[] intToLittleEndian(int)
    {
        int $i0;
        byte[] r0;

        $i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int,byte[],int)>($i0, r0, 0);

        return r0;
    }
    public static byte[] intToLittleEndian(int[])
    {
        int[] $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i0 = $i0 * 4;

        r1 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static int littleEndianToInt(byte[], int)
    {
        byte[] $r0;
        int $i0, i2, $i3;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        i2 = $b1 & 255;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 << 24;

        $i0 = i2 | $i0;

        return $i0;
    }
    public static void littleEndianToInt(byte[], int, int[])
    {
        byte[] $r0;
        int[] $r1;
        int $i0, $i1, i2;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r0, $i1);

        $r1[i2] = $i0;

        $i1 = $i1 + 4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public static void littleEndianToInt(byte[], int, int[], int, int)
    {
        byte[] $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, i5;

        $r0 := @parameter0: byte[];

        $i4 := @parameter1: int;

        $r1 := @parameter2: int[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        i5 = 0;

     label1:
        if i5 >= $i1 goto label2;

        $i2 = $i0 + i5;

        $i3 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r0, $i4);

        $r1[$i2] = $i3;

        $i4 = $i4 + 4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    public static long littleEndianToLong(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r0, $i0);

        $i0 = $i0 + 4;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r0, $i0);

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 32;

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    public static void littleEndianToLong(byte[], int, long[])
    {
        byte[] $r0;
        long[] $r1;
        int $i0, $i2, i3;
        long $l1;

        $r0 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $r1 := @parameter2: long[];

        i3 = 0;

     label1:
        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $l1 = staticinvoke <org.spongycastle.util.Pack: long littleEndianToLong(byte[],int)>($r0, $i2);

        $r1[i3] = $l1;

        $i2 = $i2 + 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static void longToBigEndian(long, byte[], int)
    {
        long $l0, $l2;
        byte[] $r0;
        int $i1, $i3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 32;

        $i3 = (int) $l2;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i3, $r0, $i1);

        $l0 = 4294967295L & $l0;

        $i3 = (int) $l0;

        $i1 = $i1 + 4;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i3, $r0, $i1);

        return;
    }
    public static void longToBigEndian(long[], byte[], int)
    {
        long[] $r0;
        byte[] $r1;
        int $i0, $i2, i3;
        long $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: byte[];

        $i2 := @parameter2: int;

        i3 = 0;

     label1:
        $i0 = lengthof $r0;

        if i3 >= $i0 goto label2;

        $l1 = $r0[i3];

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long,byte[],int)>($l1, $r1, $i2);

        $i2 = $i2 + 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static byte[] longToBigEndian(long)
    {
        long $l0;
        byte[] r0;

        $l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long,byte[],int)>($l0, r0, 0);

        return r0;
    }
    public static byte[] longToBigEndian(long[])
    {
        long[] $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 = lengthof $r0;

        $i0 = $i0 * 8;

        r1 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static void longToLittleEndian(long, byte[], int)
    {
        long $l0, $l2;
        byte[] $r0;
        int $i1, $i3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = 4294967295L & $l0;

        $i3 = (int) $l2;

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int,byte[],int)>($i3, $r0, $i1);

        $l0 = $l0 >>> 32;

        $i3 = (int) $l0;

        $i1 = $i1 + 4;

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int,byte[],int)>($i3, $r0, $i1);

        return;
    }
    public static void longToLittleEndian(long[], byte[], int)
    {
        long[] $r0;
        byte[] $r1;
        int $i0, $i2, i3;
        long $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: byte[];

        $i2 := @parameter2: int;

        i3 = 0;

     label1:
        $i0 = lengthof $r0;

        if i3 >= $i0 goto label2;

        $l1 = $r0[i3];

        staticinvoke <org.spongycastle.util.Pack: void longToLittleEndian(long,byte[],int)>($l1, $r1, $i2);

        $i2 = $i2 + 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static byte[] longToLittleEndian(long)
    {
        long $l0;
        byte[] r0;

        $l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        staticinvoke <org.spongycastle.util.Pack: void longToLittleEndian(long,byte[],int)>($l0, r0, 0);

        return r0;
    }
    public static byte[] longToLittleEndian(long[])
    {
        long[] $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: long[];

        $i0 = lengthof $r0;

        $i0 = $i0 * 8;

        r1 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.util.Pack: void longToLittleEndian(long[],byte[],int)>($r0, r1, 0);

        return r1;
    }
