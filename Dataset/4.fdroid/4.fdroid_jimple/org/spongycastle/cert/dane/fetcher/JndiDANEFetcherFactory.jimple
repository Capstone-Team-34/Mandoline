org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory extends java.lang.Object implements org.spongycastle.cert.dane.DANEEntryFetcherFactory
private static final java.lang.String DANE_TYPE
private java.util.List dnsServerList
private boolean isAuthoritative
    public void <init>()
    {
        org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory r0;
        java.util.ArrayList $r1;

        r0 := @this: org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: java.util.List dnsServerList> = $r1;

        return;
    }
    public org.spongycastle.cert.dane.DANEEntryFetcher build(java.lang.String)
    {
        org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory r0;
        java.lang.String $r1, $r4;
        java.lang.StringBuffer r2;
        java.util.Hashtable r3;
        boolean $z0;
        java.util.List $r5;
        int $i0;
        java.util.Iterator $r6;
        java.lang.StringBuilder $r7;
        java.lang.Object $r8;
        org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory$1 $r9;

        r0 := @this: org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory;

        $r1 := @parameter0: java.lang.String;

        r3 = new java.util.Hashtable;

        specialinvoke r3.<java.util.Hashtable: void <init>()>();

        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");

        $z0 = r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: boolean isAuthoritative>;

        if $z0 == 0 goto label4;

        $r4 = "true";

     label1:
        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.naming.authoritative", $r4);

        $r5 = r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: java.util.List dnsServerList>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        $r5 = r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: java.util.List dnsServerList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dns://");

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label2;

     label4:
        $r4 = "false";

        goto label1;

     label5:
        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.naming.provider.url", $r4);

     label6:
        $r9 = new org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory$1;

        specialinvoke $r9.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory$1: void <init>(org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory,java.util.Hashtable,java.lang.String)>(r0, r3, $r1);

        return $r9;
    }
    public org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory setAuthoritative(boolean)
    {
        org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory r0;
        boolean $z0;

        r0 := @this: org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory;

        $z0 := @parameter0: boolean;

        r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: boolean isAuthoritative> = $z0;

        return r0;
    }
    public org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory usingDNSServer(java.lang.String)
    {
        org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory r0;
        java.lang.String $r1;
        java.util.List $r2;

        r0 := @this: org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.spongycastle.cert.dane.fetcher.JndiDANEFetcherFactory: java.util.List dnsServerList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
