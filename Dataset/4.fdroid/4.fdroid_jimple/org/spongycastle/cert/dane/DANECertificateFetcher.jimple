org.spongycastle.cert.dane.DANECertificateFetcher extends java.lang.Object
private final org.spongycastle.cert.dane.DANEEntryFetcherFactory fetcherFactory
private final org.spongycastle.cert.dane.DANEEntrySelectorFactory selectorFactory
    public void <init>(org.spongycastle.cert.dane.DANEEntryFetcherFactory, org.spongycastle.operator.DigestCalculator)
    {
        org.spongycastle.cert.dane.DANECertificateFetcher r0;
        org.spongycastle.cert.dane.DANEEntryFetcherFactory $r1;
        org.spongycastle.operator.DigestCalculator $r2;
        org.spongycastle.cert.dane.DANEEntrySelectorFactory $r3;

        r0 := @this: org.spongycastle.cert.dane.DANECertificateFetcher;

        $r1 := @parameter0: org.spongycastle.cert.dane.DANEEntryFetcherFactory;

        $r2 := @parameter1: org.spongycastle.operator.DigestCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.dane.DANECertificateFetcher: org.spongycastle.cert.dane.DANEEntryFetcherFactory fetcherFactory> = $r1;

        $r3 = new org.spongycastle.cert.dane.DANEEntrySelectorFactory;

        specialinvoke $r3.<org.spongycastle.cert.dane.DANEEntrySelectorFactory: void <init>(org.spongycastle.operator.DigestCalculator)>($r2);

        r0.<org.spongycastle.cert.dane.DANECertificateFetcher: org.spongycastle.cert.dane.DANEEntrySelectorFactory selectorFactory> = $r3;

        return;
    }
    public java.util.List fetch(java.lang.String) throws org.spongycastle.cert.dane.DANEException
    {
        org.spongycastle.cert.dane.DANECertificateFetcher r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        org.spongycastle.cert.dane.DANEEntrySelectorFactory $r3;
        org.spongycastle.cert.dane.DANEEntrySelector $r4;
        org.spongycastle.cert.dane.DANEEntryFetcherFactory $r5;
        org.spongycastle.cert.dane.DANEEntryFetcher $r6;
        java.util.List $r7;
        int $i0;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.spongycastle.cert.dane.DANEEntry r10;
        org.spongycastle.cert.X509CertificateHolder $r11;

        r0 := @this: org.spongycastle.cert.dane.DANECertificateFetcher;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.spongycastle.cert.dane.DANECertificateFetcher: org.spongycastle.cert.dane.DANEEntrySelectorFactory selectorFactory>;

        $r4 = virtualinvoke $r3.<org.spongycastle.cert.dane.DANEEntrySelectorFactory: org.spongycastle.cert.dane.DANEEntrySelector createSelector(java.lang.String)>($r1);

        $r5 = r0.<org.spongycastle.cert.dane.DANECertificateFetcher: org.spongycastle.cert.dane.DANEEntryFetcherFactory fetcherFactory>;

        $r1 = virtualinvoke $r4.<org.spongycastle.cert.dane.DANEEntrySelector: java.lang.String getDomainName()>();

        $r6 = interfaceinvoke $r5.<org.spongycastle.cert.dane.DANEEntryFetcherFactory: org.spongycastle.cert.dane.DANEEntryFetcher build(java.lang.String)>($r1);

        $r7 = interfaceinvoke $r6.<org.spongycastle.cert.dane.DANEEntryFetcher: java.util.List getEntries()>();

        r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.spongycastle.cert.dane.DANEEntry) $r9;

        $z0 = virtualinvoke $r4.<org.spongycastle.cert.dane.DANEEntrySelector: boolean match(java.lang.Object)>(r10);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r10.<org.spongycastle.cert.dane.DANEEntry: org.spongycastle.cert.X509CertificateHolder getCertificate()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r7;
    }
