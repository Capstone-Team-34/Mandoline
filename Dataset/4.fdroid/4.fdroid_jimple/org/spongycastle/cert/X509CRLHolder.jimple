org.spongycastle.cert.X509CRLHolder extends java.lang.Object implements org.spongycastle.util.Encodable
private org.spongycastle.asn1.x509.Extensions extensions
private boolean isIndirect
private org.spongycastle.asn1.x509.GeneralNames issuerName
private org.spongycastle.asn1.x509.CertificateList x509CRL
    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.cert.X509CRLHolder r0;
        java.io.InputStream $r1;
        org.spongycastle.asn1.x509.CertificateList $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList parseStream(java.io.InputStream)>($r1);

        specialinvoke r0.<org.spongycastle.cert.X509CRLHolder: void <init>(org.spongycastle.asn1.x509.CertificateList)>($r2);

        return;
    }
    public void <init>(org.spongycastle.asn1.x509.CertificateList)
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.x509.CertificateList $r1;
        org.spongycastle.asn1.x509.GeneralName $r2;
        org.spongycastle.asn1.x509.TBSCertList $r3;
        org.spongycastle.asn1.x509.Extensions $r4;
        boolean $z0;
        org.spongycastle.asn1.x509.GeneralNames $r5;
        org.spongycastle.asn1.x500.X500Name $r6;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.CertificateList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL> = $r1;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.TBSCertList getTBSCertList()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.TBSCertList: org.spongycastle.asn1.x509.Extensions getExtensions()>();

        r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions> = $r4;

        $r4 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        $z0 = staticinvoke <org.spongycastle.cert.X509CRLHolder: boolean isIndirectCRL(org.spongycastle.asn1.x509.Extensions)>($r4);

        r0.<org.spongycastle.cert.X509CRLHolder: boolean isIndirect> = $z0;

        $r5 = new org.spongycastle.asn1.x509.GeneralNames;

        $r2 = new org.spongycastle.asn1.x509.GeneralName;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x500.X500Name getIssuer()>();

        specialinvoke $r2.<org.spongycastle.asn1.x509.GeneralName: void <init>(org.spongycastle.asn1.x500.X500Name)>($r6);

        specialinvoke $r5.<org.spongycastle.asn1.x509.GeneralNames: void <init>(org.spongycastle.asn1.x509.GeneralName)>($r2);

        r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.GeneralNames issuerName> = $r5;

        return;
    }
    public void <init>(byte[]) throws java.io.IOException
    {
        org.spongycastle.cert.X509CRLHolder r0;
        byte[] $r1;
        org.spongycastle.asn1.x509.CertificateList $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: byte[];

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $r2 = staticinvoke <org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList parseStream(java.io.InputStream)>($r3);

        specialinvoke r0.<org.spongycastle.cert.X509CRLHolder: void <init>(org.spongycastle.asn1.x509.CertificateList)>($r2);

        return;
    }
    private static boolean isIndirectCRL(org.spongycastle.asn1.x509.Extensions)
    {
        org.spongycastle.asn1.x509.Extensions $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        org.spongycastle.asn1.x509.Extension $r2;
        org.spongycastle.asn1.ASN1Encodable $r3;
        org.spongycastle.asn1.x509.IssuingDistributionPoint $r4;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.asn1.x509.Extensions;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint>;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1);

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1Encodable getParsedValue()>();

        $r4 = staticinvoke <org.spongycastle.asn1.x509.IssuingDistributionPoint: org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object)>($r3);

        $z0 = virtualinvoke $r4.<org.spongycastle.asn1.x509.IssuingDistributionPoint: boolean isIndirectCRL()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    private static org.spongycastle.asn1.x509.CertificateList parseStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.spongycastle.asn1.ASN1InputStream $r1;
        org.spongycastle.asn1.ASN1Primitive $r2;
        org.spongycastle.asn1.x509.CertificateList $r3;
        java.lang.ClassCastException r4;
        org.spongycastle.cert.CertIOException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.IllegalArgumentException r8;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new org.spongycastle.asn1.ASN1InputStream;

     label1:
        specialinvoke $r1.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,boolean)>($r0, 1);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        $r3 = staticinvoke <org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.CertificateList getInstance(java.lang.Object)>($r2);

     label2:
        return $r3;

     label3:
        r4 := @caughtexception;

        $r5 = new org.spongycastle.cert.CertIOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed data: ");

        $r7 = virtualinvoke r4.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.spongycastle.cert.CertIOException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r4);

        throw $r5;

     label4:
        r8 := @caughtexception;

        $r5 = new org.spongycastle.cert.CertIOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed data: ");

        $r7 = virtualinvoke r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.spongycastle.cert.CertIOException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r8);

        throw $r5;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.cert.X509CRLHolder r0, r3;
        java.lang.Object $r1;
        org.spongycastle.asn1.x509.CertificateList $r2, $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.spongycastle.cert.X509CRLHolder;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = (org.spongycastle.cert.X509CRLHolder) $r1;

        $r4 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r2 = r3.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $z0 = virtualinvoke $r4.<org.spongycastle.asn1.x509.CertificateList: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
    public java.util.Set getCriticalExtensionOIDs()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        java.util.Set $r1;
        org.spongycastle.asn1.x509.Extensions $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r2 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        $r1 = staticinvoke <org.spongycastle.cert.CertUtils: java.util.Set getCriticalExtensionOIDs(org.spongycastle.asn1.x509.Extensions)>($r2);

        return $r1;
    }
    public byte[] getEncoded() throws java.io.IOException
    {
        org.spongycastle.cert.X509CRLHolder r0;
        byte[] $r1;
        org.spongycastle.asn1.x509.CertificateList $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r2 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.x509.CertificateList: byte[] getEncoded()>();

        return $r1;
    }
    public org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        org.spongycastle.asn1.x509.Extension $r2;
        org.spongycastle.asn1.x509.Extensions $r3;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r3 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        if $r3 == null goto label1;

        $r3 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        $r2 = virtualinvoke $r3.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1);

        return $r2;

     label1:
        return null;
    }
    public java.util.List getExtensionOIDs()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        java.util.List $r1;
        org.spongycastle.asn1.x509.Extensions $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r2 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        $r1 = staticinvoke <org.spongycastle.cert.CertUtils: java.util.List getExtensionOIDs(org.spongycastle.asn1.x509.Extensions)>($r2);

        return $r1;
    }
    public org.spongycastle.asn1.x509.Extensions getExtensions()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.x509.Extensions r1;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        r1 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        return r1;
    }
    public org.spongycastle.asn1.x500.X500Name getIssuer()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.x509.CertificateList $r1;
        org.spongycastle.asn1.x500.X500Name $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x500.X500Name getIssuer()>();

        $r2 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r2);

        return $r2;
    }
    public java.util.Set getNonCriticalExtensionOIDs()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        java.util.Set $r1;
        org.spongycastle.asn1.x509.Extensions $r2;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r2 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        $r1 = staticinvoke <org.spongycastle.cert.CertUtils: java.util.Set getNonCriticalExtensionOIDs(org.spongycastle.asn1.x509.Extensions)>($r2);

        return $r1;
    }
    public org.spongycastle.cert.X509CRLEntryHolder getRevokedCertificate(java.math.BigInteger)
    {
        org.spongycastle.cert.X509CRLHolder r0;
        java.math.BigInteger $r1, $r8;
        org.spongycastle.asn1.x509.GeneralNames r2;
        org.spongycastle.asn1.x509.CertificateList $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.spongycastle.asn1.x509.TBSCertList$CRLEntry r6;
        org.spongycastle.asn1.ASN1Integer $r7;
        org.spongycastle.cert.X509CRLEntryHolder $r9;
        org.spongycastle.asn1.x509.Extensions $r10;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r11;
        org.spongycastle.asn1.x509.Extension $r12;
        org.spongycastle.asn1.ASN1Encodable $r13;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: java.math.BigInteger;

        r2 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.GeneralNames issuerName>;

        $r3 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.CertificateList: java.util.Enumeration getRevokedCertificateEnumeration()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (org.spongycastle.asn1.x509.TBSCertList$CRLEntry) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.asn1.x509.TBSCertList$CRLEntry: org.spongycastle.asn1.ASN1Integer getUserCertificate()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $z0 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r9 = new org.spongycastle.cert.X509CRLEntryHolder;

        $z0 = r0.<org.spongycastle.cert.X509CRLHolder: boolean isIndirect>;

        specialinvoke $r9.<org.spongycastle.cert.X509CRLEntryHolder: void <init>(org.spongycastle.asn1.x509.TBSCertList$CRLEntry,boolean,org.spongycastle.asn1.x509.GeneralNames)>(r6, $z0, r2);

        return $r9;

     label2:
        $z0 = r0.<org.spongycastle.cert.X509CRLHolder: boolean isIndirect>;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r6.<org.spongycastle.asn1.x509.TBSCertList$CRLEntry: boolean hasExtensions()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r6.<org.spongycastle.asn1.x509.TBSCertList$CRLEntry: org.spongycastle.asn1.x509.Extensions getExtensions()>();

        $r11 = <org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1ObjectIdentifier certificateIssuer>;

        $r12 = virtualinvoke $r10.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r11);

        if $r12 == null goto label1;

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.x509.Extension: org.spongycastle.asn1.ASN1Encodable getParsedValue()>();

        r2 = staticinvoke <org.spongycastle.asn1.x509.GeneralNames: org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object)>($r13);

        goto label1;

     label3:
        return null;
    }
    public java.util.Collection getRevokedCertificates()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.cert.X509CRLEntryHolder r1;
        java.util.ArrayList r2;
        org.spongycastle.asn1.x509.CertificateList $r3;
        org.spongycastle.asn1.x509.TBSCertList$CRLEntry[] $r4;
        int $i0;
        org.spongycastle.asn1.x509.GeneralNames r5;
        java.util.Enumeration $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.spongycastle.asn1.x509.TBSCertList$CRLEntry r8;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r3 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates()>();

        r2 = new java.util.ArrayList;

        $i0 = lengthof $r4;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.GeneralNames issuerName>;

        $r3 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r6 = virtualinvoke $r3.<org.spongycastle.asn1.x509.CertificateList: java.util.Enumeration getRevokedCertificateEnumeration()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (org.spongycastle.asn1.x509.TBSCertList$CRLEntry) $r7;

        r1 = new org.spongycastle.cert.X509CRLEntryHolder;

        $z0 = r0.<org.spongycastle.cert.X509CRLHolder: boolean isIndirect>;

        specialinvoke r1.<org.spongycastle.cert.X509CRLEntryHolder: void <init>(org.spongycastle.asn1.x509.TBSCertList$CRLEntry,boolean,org.spongycastle.asn1.x509.GeneralNames)>(r8, $z0, r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        r5 = virtualinvoke r1.<org.spongycastle.cert.X509CRLEntryHolder: org.spongycastle.asn1.x509.GeneralNames getCertificateIssuer()>();

        goto label1;

     label2:
        return r2;
    }
    public boolean hasExtensions()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.x509.Extensions $r1;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.Extensions extensions>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        int $i0;
        org.spongycastle.asn1.x509.CertificateList $r1;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.x509.CertificateList: int hashCode()>();

        return $i0;
    }
    public boolean isSignatureValid(org.spongycastle.operator.ContentVerifierProvider) throws org.spongycastle.cert.CertException
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.operator.ContentVerifierProvider $r1;
        org.spongycastle.asn1.DEROutputStream r2;
        java.lang.Exception r3;
        org.spongycastle.asn1.x509.CertificateList $r4;
        org.spongycastle.asn1.x509.TBSCertList $r5;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r6, $r7;
        boolean $z0;
        org.spongycastle.cert.CertException $r8;
        org.spongycastle.operator.ContentVerifier $r9;
        java.io.OutputStream $r10;
        org.spongycastle.asn1.DERBitString $r11;
        byte[] $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        $r1 := @parameter0: org.spongycastle.operator.ContentVerifierProvider;

        $r4 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.TBSCertList getTBSCertList()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.TBSCertList: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignature()>();

        $r4 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r7 = virtualinvoke $r4.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm()>();

        $z0 = staticinvoke <org.spongycastle.cert.CertUtils: boolean isAlgIdEqual(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r6, $r7);

        if $z0 != 0 goto label1;

        $r8 = new org.spongycastle.cert.CertException;

        specialinvoke $r8.<org.spongycastle.cert.CertException: void <init>(java.lang.String)>("signature invalid - algorithm identifier mismatch");

        throw $r8;

     label1:
        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.TBSCertList: org.spongycastle.asn1.x509.AlgorithmIdentifier getSignature()>();

        $r9 = interfaceinvoke $r1.<org.spongycastle.operator.ContentVerifierProvider: org.spongycastle.operator.ContentVerifier get(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r6);

        $r10 = interfaceinvoke $r9.<org.spongycastle.operator.ContentVerifier: java.io.OutputStream getOutputStream()>();

     label2:
        r2 = new org.spongycastle.asn1.DEROutputStream;

     label3:
        specialinvoke r2.<org.spongycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r10);

        virtualinvoke r2.<org.spongycastle.asn1.DEROutputStream: void writeObject(org.spongycastle.asn1.ASN1Encodable)>($r5);

        virtualinvoke $r10.<java.io.OutputStream: void close()>();

     label4:
        $r4 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        $r11 = virtualinvoke $r4.<org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.DERBitString getSignature()>();

        $r12 = virtualinvoke $r11.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = interfaceinvoke $r9.<org.spongycastle.operator.ContentVerifier: boolean verify(byte[])>($r12);

        return $z0;

     label5:
        r3 := @caughtexception;

        $r8 = new org.spongycastle.cert.CertException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to process signature: ");

        $r14 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.spongycastle.cert.CertException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r3);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public org.spongycastle.asn1.x509.CertificateList toASN1Structure()
    {
        org.spongycastle.cert.X509CRLHolder r0;
        org.spongycastle.asn1.x509.CertificateList r1;

        r0 := @this: org.spongycastle.cert.X509CRLHolder;

        r1 = r0.<org.spongycastle.cert.X509CRLHolder: org.spongycastle.asn1.x509.CertificateList x509CRL>;

        return r1;
    }
