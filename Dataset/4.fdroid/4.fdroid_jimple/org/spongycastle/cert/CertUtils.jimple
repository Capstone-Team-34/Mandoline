org.spongycastle.cert.CertUtils extends java.lang.Object
private static java.util.List EMPTY_LIST
private static java.util.Set EMPTY_SET
    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        <org.spongycastle.cert.CertUtils: java.util.Set EMPTY_SET> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        <org.spongycastle.cert.CertUtils: java.util.List EMPTY_LIST> = $r3;

        return;
    }
    void <init>()
    {
        org.spongycastle.cert.CertUtils r0;

        r0 := @this: org.spongycastle.cert.CertUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void addExtension(org.spongycastle.asn1.x509.ExtensionsGenerator, org.spongycastle.asn1.ASN1ObjectIdentifier, boolean, org.spongycastle.asn1.ASN1Encodable) throws org.spongycastle.cert.CertIOException
    {
        org.spongycastle.asn1.x509.ExtensionsGenerator $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        boolean $z0;
        org.spongycastle.asn1.ASN1Encodable $r2;
        java.io.IOException r3;
        org.spongycastle.cert.CertIOException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: org.spongycastle.asn1.x509.ExtensionsGenerator;

        $r1 := @parameter1: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: org.spongycastle.asn1.ASN1Encodable;

     label1:
        virtualinvoke $r0.<org.spongycastle.asn1.x509.ExtensionsGenerator: void addExtension(org.spongycastle.asn1.ASN1ObjectIdentifier,boolean,org.spongycastle.asn1.ASN1Encodable)>($r1, $z0, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new org.spongycastle.cert.CertIOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot encode extension: ");

        $r6 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.cert.CertIOException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }
    static boolean[] bitStringToBoolean(org.spongycastle.asn1.DERBitString)
    {
        org.spongycastle.asn1.DERBitString $r0;
        int $i0, $i1;
        byte[] $r1;
        boolean[] r2;
        byte $b2;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.asn1.DERBitString;

        if $r0 == null goto label4;

        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $i1 = lengthof $r1;

        $i1 = $i1 * 8;

        $i0 = virtualinvoke $r0.<org.spongycastle.asn1.DERBitString: int getPadBits()>();

        $i1 = $i1 - $i0;

        r2 = newarray (boolean)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        $i0 = $i1 / 8;

        $b2 = $r1[$i0];

        $i0 = $i1 % 8;

        $i0 = 128 >>> $i0;

        $i0 = $b2 & $i0;

        if $i0 == 0 goto label3;

        $z0 = 1;

     label2:
        r2[$i1] = $z0;

        $i1 = $i1 + 1;

        goto label1;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        return null;

     label5:
        return r2;
    }
    static org.spongycastle.asn1.DERBitString booleanToBitString(boolean[])
    {
        boolean[] $r0;
        byte[] r1;
        int i0, $i2, $i3;
        byte $b1;
        boolean $z0;
        org.spongycastle.asn1.DERBitString $r2;

        $r0 := @parameter0: boolean[];

        i0 = lengthof $r0;

        i0 = i0 + 7;

        i0 = i0 / 8;

        r1 = newarray (byte)[i0];

        i0 = 0;

     label1:
        $i2 = lengthof $r0;

        if i0 == $i2 goto label4;

        $i2 = i0 / 8;

        $b1 = r1[$i2];

        $z0 = $r0[i0];

        if $z0 == 0 goto label3;

        $i3 = i0 % 8;

        $i3 = 7 - $i3;

        $i3 = 1 << $i3;

     label2:
        $i3 = $i3 | $b1;

        $b1 = (byte) $i3;

        r1[$i2] = $b1;

        i0 = i0 + 1;

        goto label1;

     label3:
        $i3 = 0;

        goto label2;

     label4:
        i0 = lengthof $r0;

        i0 = i0 % 8;

        if i0 != 0 goto label5;

        $r2 = new org.spongycastle.asn1.DERBitString;

        specialinvoke $r2.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>(r1);

        return $r2;

     label5:
        $r2 = new org.spongycastle.asn1.DERBitString;

        i0 = 8 - i0;

        specialinvoke $r2.<org.spongycastle.asn1.DERBitString: void <init>(byte[],int)>(r1, i0);

        return $r2;
    }
    private static org.spongycastle.asn1.x509.AttributeCertificate generateAttrStructure(org.spongycastle.asn1.x509.AttributeCertificateInfo, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[])
    {
        org.spongycastle.asn1.x509.AttributeCertificateInfo $r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        org.spongycastle.asn1.x509.AttributeCertificate $r4;
        org.spongycastle.asn1.DERBitString $r5;
        org.spongycastle.asn1.DERSequence $r6;

        $r0 := @parameter0: org.spongycastle.asn1.x509.AttributeCertificateInfo;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter2: byte[];

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r0);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r1);

        $r5 = new org.spongycastle.asn1.DERBitString;

        specialinvoke $r5.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r4 = staticinvoke <org.spongycastle.asn1.x509.AttributeCertificate: org.spongycastle.asn1.x509.AttributeCertificate getInstance(java.lang.Object)>($r6);

        return $r4;
    }
    private static org.spongycastle.asn1.x509.CertificateList generateCRLStructure(org.spongycastle.asn1.x509.TBSCertList, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[])
    {
        org.spongycastle.asn1.x509.TBSCertList $r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        org.spongycastle.asn1.x509.CertificateList $r4;
        org.spongycastle.asn1.DERBitString $r5;
        org.spongycastle.asn1.DERSequence $r6;

        $r0 := @parameter0: org.spongycastle.asn1.x509.TBSCertList;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter2: byte[];

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r0);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r1);

        $r5 = new org.spongycastle.asn1.DERBitString;

        specialinvoke $r5.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r4 = staticinvoke <org.spongycastle.asn1.x509.CertificateList: org.spongycastle.asn1.x509.CertificateList getInstance(java.lang.Object)>($r6);

        return $r4;
    }
    static org.spongycastle.cert.X509AttributeCertificateHolder generateFullAttrCert(org.spongycastle.operator.ContentSigner, org.spongycastle.asn1.x509.AttributeCertificateInfo)
    {
        org.spongycastle.operator.ContentSigner $r0;
        org.spongycastle.asn1.x509.AttributeCertificateInfo $r1;
        java.io.IOException r2;
        org.spongycastle.cert.X509AttributeCertificateHolder $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        byte[] $r5;
        org.spongycastle.asn1.x509.AttributeCertificate $r6;
        java.lang.IllegalStateException $r7;

        $r0 := @parameter0: org.spongycastle.operator.ContentSigner;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AttributeCertificateInfo;

        $r3 = new org.spongycastle.cert.X509AttributeCertificateHolder;

     label1:
        $r4 = interfaceinvoke $r0.<org.spongycastle.operator.ContentSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r5 = staticinvoke <org.spongycastle.cert.CertUtils: byte[] generateSig(org.spongycastle.operator.ContentSigner,org.spongycastle.asn1.ASN1Encodable)>($r0, $r1);

        $r6 = staticinvoke <org.spongycastle.cert.CertUtils: org.spongycastle.asn1.x509.AttributeCertificate generateAttrStructure(org.spongycastle.asn1.x509.AttributeCertificateInfo,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r4, $r5);

        specialinvoke $r3.<org.spongycastle.cert.X509AttributeCertificateHolder: void <init>(org.spongycastle.asn1.x509.AttributeCertificate)>($r6);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot produce attribute certificate signature");

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }
    static org.spongycastle.cert.X509CRLHolder generateFullCRL(org.spongycastle.operator.ContentSigner, org.spongycastle.asn1.x509.TBSCertList)
    {
        org.spongycastle.operator.ContentSigner $r0;
        org.spongycastle.asn1.x509.TBSCertList $r1;
        java.io.IOException r2;
        org.spongycastle.cert.X509CRLHolder $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        byte[] $r5;
        org.spongycastle.asn1.x509.CertificateList $r6;
        java.lang.IllegalStateException $r7;

        $r0 := @parameter0: org.spongycastle.operator.ContentSigner;

        $r1 := @parameter1: org.spongycastle.asn1.x509.TBSCertList;

        $r3 = new org.spongycastle.cert.X509CRLHolder;

     label1:
        $r4 = interfaceinvoke $r0.<org.spongycastle.operator.ContentSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r5 = staticinvoke <org.spongycastle.cert.CertUtils: byte[] generateSig(org.spongycastle.operator.ContentSigner,org.spongycastle.asn1.ASN1Encodable)>($r0, $r1);

        $r6 = staticinvoke <org.spongycastle.cert.CertUtils: org.spongycastle.asn1.x509.CertificateList generateCRLStructure(org.spongycastle.asn1.x509.TBSCertList,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r4, $r5);

        specialinvoke $r3.<org.spongycastle.cert.X509CRLHolder: void <init>(org.spongycastle.asn1.x509.CertificateList)>($r6);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot produce certificate signature");

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }
    static org.spongycastle.cert.X509CertificateHolder generateFullCert(org.spongycastle.operator.ContentSigner, org.spongycastle.asn1.x509.TBSCertificate)
    {
        org.spongycastle.operator.ContentSigner $r0;
        org.spongycastle.asn1.x509.TBSCertificate $r1;
        java.io.IOException r2;
        org.spongycastle.cert.X509CertificateHolder $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        byte[] $r5;
        org.spongycastle.asn1.x509.Certificate $r6;
        java.lang.IllegalStateException $r7;

        $r0 := @parameter0: org.spongycastle.operator.ContentSigner;

        $r1 := @parameter1: org.spongycastle.asn1.x509.TBSCertificate;

        $r3 = new org.spongycastle.cert.X509CertificateHolder;

     label1:
        $r4 = interfaceinvoke $r0.<org.spongycastle.operator.ContentSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r5 = staticinvoke <org.spongycastle.cert.CertUtils: byte[] generateSig(org.spongycastle.operator.ContentSigner,org.spongycastle.asn1.ASN1Encodable)>($r0, $r1);

        $r6 = staticinvoke <org.spongycastle.cert.CertUtils: org.spongycastle.asn1.x509.Certificate generateStructure(org.spongycastle.asn1.x509.TBSCertificate,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r4, $r5);

        specialinvoke $r3.<org.spongycastle.cert.X509CertificateHolder: void <init>(org.spongycastle.asn1.x509.Certificate)>($r6);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot produce certificate signature");

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }
    private static byte[] generateSig(org.spongycastle.operator.ContentSigner, org.spongycastle.asn1.ASN1Encodable) throws java.io.IOException
    {
        org.spongycastle.operator.ContentSigner $r0;
        org.spongycastle.asn1.ASN1Encodable $r1;
        org.spongycastle.asn1.DEROutputStream r2;
        java.io.OutputStream $r3;
        byte[] $r4;

        $r0 := @parameter0: org.spongycastle.operator.ContentSigner;

        $r1 := @parameter1: org.spongycastle.asn1.ASN1Encodable;

        $r3 = interfaceinvoke $r0.<org.spongycastle.operator.ContentSigner: java.io.OutputStream getOutputStream()>();

        r2 = new org.spongycastle.asn1.DEROutputStream;

        specialinvoke r2.<org.spongycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke r2.<org.spongycastle.asn1.DEROutputStream: void writeObject(org.spongycastle.asn1.ASN1Encodable)>($r1);

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        $r4 = interfaceinvoke $r0.<org.spongycastle.operator.ContentSigner: byte[] getSignature()>();

        return $r4;
    }
    private static org.spongycastle.asn1.x509.Certificate generateStructure(org.spongycastle.asn1.x509.TBSCertificate, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[])
    {
        org.spongycastle.asn1.x509.TBSCertificate $r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        org.spongycastle.asn1.x509.Certificate $r4;
        org.spongycastle.asn1.DERBitString $r5;
        org.spongycastle.asn1.DERSequence $r6;

        $r0 := @parameter0: org.spongycastle.asn1.x509.TBSCertificate;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter2: byte[];

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r0);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r1);

        $r5 = new org.spongycastle.asn1.DERBitString;

        specialinvoke $r5.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r4 = staticinvoke <org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.Certificate getInstance(java.lang.Object)>($r6);

        return $r4;
    }
    static java.util.Set getCriticalExtensionOIDs(org.spongycastle.asn1.x509.Extensions)
    {
        org.spongycastle.asn1.x509.Extensions $r0;
        java.util.HashSet $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r2;
        java.util.List $r3;
        java.util.Set $r4;

        $r0 := @parameter0: org.spongycastle.asn1.x509.Extensions;

        if $r0 != null goto label1;

        $r4 = <org.spongycastle.cert.CertUtils: java.util.Set EMPTY_SET>;

        return $r4;

     label1:
        $r1 = new java.util.HashSet;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.ASN1ObjectIdentifier[] getCriticalExtensionOIDs()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r4;
    }
    static java.util.List getExtensionOIDs(org.spongycastle.asn1.x509.Extensions)
    {
        org.spongycastle.asn1.x509.Extensions $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r1;
        java.util.List $r2;

        $r0 := @parameter0: org.spongycastle.asn1.x509.Extensions;

        if $r0 != null goto label1;

        $r2 = <org.spongycastle.cert.CertUtils: java.util.List EMPTY_LIST>;

        return $r2;

     label1:
        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r2;
    }
    static java.util.Set getNonCriticalExtensionOIDs(org.spongycastle.asn1.x509.Extensions)
    {
        org.spongycastle.asn1.x509.Extensions $r0;
        java.util.HashSet $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier[] $r2;
        java.util.List $r3;
        java.util.Set $r4;

        $r0 := @parameter0: org.spongycastle.asn1.x509.Extensions;

        if $r0 != null goto label1;

        $r4 = <org.spongycastle.cert.CertUtils: java.util.Set EMPTY_SET>;

        return $r4;

     label1:
        $r1 = new java.util.HashSet;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.x509.Extensions: org.spongycastle.asn1.ASN1ObjectIdentifier[] getNonCriticalExtensionOIDs()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r4;
    }
    static boolean isAlgIdEqual(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier)
    {
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r0, $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2, $r3;
        boolean $z0;
        org.spongycastle.asn1.ASN1Encodable $r4, $r6;
        org.spongycastle.asn1.DERNull $r5;

        $r0 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r1 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        if $r4 != null goto label3;

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        if $r4 == null goto label2;

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r5 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

     label2:
        return 1;

     label3:
        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        if $r4 != null goto label5;

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        if $r4 == null goto label4;

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r5 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

     label4:
        return 1;

     label5:
        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        return $z0;

     label6:
        return 0;
    }
    static java.util.Date recoverDate(org.spongycastle.asn1.ASN1GeneralizedTime)
    {
        org.spongycastle.asn1.ASN1GeneralizedTime $r0;
        java.text.ParseException r1;
        java.util.Date $r2;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1GeneralizedTime;

     label1:
        $r2 = virtualinvoke $r0.<org.spongycastle.asn1.ASN1GeneralizedTime: java.util.Date getDate()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to recover date: ");

        $r5 = virtualinvoke r1.<java.text.ParseException: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

        catch java.text.ParseException from label1 to label2 with label3;
    }
