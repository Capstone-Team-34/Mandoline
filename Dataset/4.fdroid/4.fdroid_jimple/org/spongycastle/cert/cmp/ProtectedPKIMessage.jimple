org.spongycastle.cert.cmp.ProtectedPKIMessage extends java.lang.Object
private org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage
    void <init>(org.spongycastle.asn1.'cmp'.PKIMessage)
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.'cmp'.PKIMessage $r1;
        org.spongycastle.asn1.'cmp'.PKIHeader $r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 := @parameter0: org.spongycastle.asn1.'cmp'.PKIMessage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.'cmp'.PKIHeader: org.spongycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg()>();

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PKIMessage not protected");

        throw $r4;

     label1:
        r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage> = $r1;

        return;
    }
    public void <init>(org.spongycastle.cert.'cmp'.GeneralPKIMessage)
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.cert.'cmp'.GeneralPKIMessage $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.asn1.'cmp'.PKIMessage $r3;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 := @parameter0: org.spongycastle.cert.'cmp'.GeneralPKIMessage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.cert.'cmp'.GeneralPKIMessage: boolean hasProtection()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PKIMessage not protected");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.cert.'cmp'.GeneralPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage toASN1Structure()>();

        r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage> = $r3;

        return;
    }
    private boolean verifySignature(byte[], org.spongycastle.operator.ContentVerifier) throws java.io.IOException
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        byte[] $r1, $r9;
        org.spongycastle.operator.ContentVerifier $r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        org.spongycastle.asn1.'cmp'.PKIMessage $r4;
        org.spongycastle.asn1.'cmp'.PKIHeader $r5;
        org.spongycastle.asn1.'cmp'.PKIBody $r6;
        java.io.OutputStream $r7;
        org.spongycastle.asn1.DERSequence $r8;
        boolean $z0;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.operator.ContentVerifier;

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r4 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r4 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r6 = virtualinvoke $r4.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIBody getBody()>();

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r7 = interfaceinvoke $r2.<org.spongycastle.operator.ContentVerifier: java.io.OutputStream getOutputStream()>();

        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[])>($r9);

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

        $z0 = interfaceinvoke $r2.<org.spongycastle.operator.ContentVerifier: boolean verify(byte[])>($r1);

        return $z0;
    }
    public org.spongycastle.asn1.'cmp'.PKIBody getBody()
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.'cmp'.PKIBody $r1;
        org.spongycastle.asn1.'cmp'.PKIMessage $r2;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r2 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIBody getBody()>();

        return $r1;
    }
    public org.spongycastle.cert.X509CertificateHolder[] getCertificates()
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.'cmp'.PKIMessage $r1;
        org.spongycastle.asn1.'cmp'.CMPCertificate[] $r2;
        org.spongycastle.cert.X509CertificateHolder[] r3;
        int $i0, $i1;
        org.spongycastle.cert.X509CertificateHolder $r4;
        org.spongycastle.asn1.'cmp'.CMPCertificate $r5;
        org.spongycastle.asn1.x509.Certificate $r6;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.CMPCertificate[] getExtraCerts()>();

        if $r2 != null goto label1;

        r3 = newarray (org.spongycastle.cert.X509CertificateHolder)[0];

        return r3;

     label1:
        $i0 = lengthof $r2;

        r3 = newarray (org.spongycastle.cert.X509CertificateHolder)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label3;

        $r4 = new org.spongycastle.cert.X509CertificateHolder;

        $r5 = $r2[$i0];

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.'cmp'.CMPCertificate: org.spongycastle.asn1.x509.Certificate getX509v3PKCert()>();

        specialinvoke $r4.<org.spongycastle.cert.X509CertificateHolder: void <init>(org.spongycastle.asn1.x509.Certificate)>($r6);

        r3[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r3;
    }
    public org.spongycastle.asn1.'cmp'.PKIHeader getHeader()
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.'cmp'.PKIHeader $r1;
        org.spongycastle.asn1.'cmp'.PKIMessage $r2;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r2 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r1 = virtualinvoke $r2.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        return $r1;
    }
    public boolean hasPasswordBasedMacProtection()
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1, $r5;
        org.spongycastle.asn1.'cmp'.PKIMessage $r2;
        org.spongycastle.asn1.'cmp'.PKIHeader $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r2 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.'cmp'.PKIHeader: org.spongycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r1 = <org.spongycastle.asn1.'cmp'.CMPObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier passwordBasedMac>;

        $z0 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }
    public org.spongycastle.asn1.'cmp'.PKIMessage toASN1Structure()
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.asn1.'cmp'.PKIMessage r1;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        r1 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        return r1;
    }
    public boolean verify(org.spongycastle.cert.crmf.PKMACBuilder, char[]) throws org.spongycastle.cert.'cmp'.CMPException
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.cert.crmf.PKMACBuilder $r1;
        char[] $r2;
        java.lang.Exception r3;
        org.spongycastle.asn1.ASN1EncodableVector r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5, $r9;
        org.spongycastle.asn1.'cmp'.PKIMessage $r6;
        org.spongycastle.asn1.'cmp'.PKIHeader $r7;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r8;
        boolean $z0;
        org.spongycastle.cert.'cmp'.CMPException $r10;
        org.spongycastle.asn1.ASN1Encodable $r11;
        org.spongycastle.asn1.'cmp'.PBMParameter $r12;
        org.spongycastle.operator.MacCalculator $r13;
        java.io.OutputStream $r14;
        org.spongycastle.asn1.'cmp'.PKIBody $r15;
        org.spongycastle.asn1.DERSequence $r16;
        byte[] $r17, $r19;
        org.spongycastle.asn1.DERBitString $r18;
        java.lang.StringBuilder $r20;
        java.lang.String $r21;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 := @parameter0: org.spongycastle.cert.crmf.PKMACBuilder;

        $r2 := @parameter1: char[];

        $r5 = <org.spongycastle.asn1.'cmp'.CMPObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier passwordBasedMac>;

        $r6 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.'cmp'.PKIHeader: org.spongycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $z0 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label1;

        $r10 = new org.spongycastle.cert.'cmp'.CMPException;

        specialinvoke $r10.<org.spongycastle.cert.'cmp'.CMPException: void <init>(java.lang.String)>("protection algorithm not mac based");

        throw $r10;

     label1:
        $r6 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.'cmp'.PKIHeader: org.spongycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg()>();

        $r11 = virtualinvoke $r8.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r12 = staticinvoke <org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.'cmp'.PBMParameter getInstance(java.lang.Object)>($r11);

        virtualinvoke $r1.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACBuilder setParameters(org.spongycastle.asn1.'cmp'.PBMParameter)>($r12);

        $r13 = virtualinvoke $r1.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.operator.MacCalculator build(char[])>($r2);

        $r14 = interfaceinvoke $r13.<org.spongycastle.operator.MacCalculator: java.io.OutputStream getOutputStream()>();

     label2:
        r4 = new org.spongycastle.asn1.ASN1EncodableVector;

     label3:
        specialinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r6 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r6 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r15 = virtualinvoke $r6.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIBody getBody()>();

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r15);

     label4:
        $r16 = new org.spongycastle.asn1.DERSequence;

     label5:
        specialinvoke $r16.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r4);

        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

        virtualinvoke $r14.<java.io.OutputStream: void write(byte[])>($r17);

        virtualinvoke $r14.<java.io.OutputStream: void close()>();

        $r17 = interfaceinvoke $r13.<org.spongycastle.operator.MacCalculator: byte[] getMac()>();

        $r6 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r18 = virtualinvoke $r6.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.DERBitString getProtection()>();

        $r19 = virtualinvoke $r18.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r17, $r19);

     label6:
        return $z0;

     label7:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.cert.'cmp'.CMPException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to verify MAC: ");

        $r21 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.spongycastle.cert.'cmp'.CMPException: void <init>(java.lang.String,java.lang.Throwable)>($r21, r3);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
    public boolean verify(org.spongycastle.operator.ContentVerifierProvider) throws org.spongycastle.cert.'cmp'.CMPException
    {
        org.spongycastle.cert.'cmp'.ProtectedPKIMessage r0;
        org.spongycastle.operator.ContentVerifierProvider $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.'cmp'.PKIMessage $r3;
        org.spongycastle.asn1.'cmp'.PKIHeader $r4;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r5;
        org.spongycastle.operator.ContentVerifier $r6;
        org.spongycastle.asn1.DERBitString $r7;
        byte[] $r8;
        boolean $z0;
        org.spongycastle.cert.'cmp'.CMPException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.cert.'cmp'.ProtectedPKIMessage;

        $r1 := @parameter0: org.spongycastle.operator.ContentVerifierProvider;

     label1:
        $r3 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.'cmp'.PKIHeader getHeader()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.'cmp'.PKIHeader: org.spongycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg()>();

        $r6 = interfaceinvoke $r1.<org.spongycastle.operator.ContentVerifierProvider: org.spongycastle.operator.ContentVerifier get(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r5);

        $r3 = r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: org.spongycastle.asn1.'cmp'.PKIMessage pkiMessage>;

        $r7 = virtualinvoke $r3.<org.spongycastle.asn1.'cmp'.PKIMessage: org.spongycastle.asn1.DERBitString getProtection()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = specialinvoke r0.<org.spongycastle.cert.'cmp'.ProtectedPKIMessage: boolean verifySignature(byte[],org.spongycastle.operator.ContentVerifier)>($r8, $r6);

     label2:
        return $z0;

     label3:
        r2 := @caughtexception;

        $r9 = new org.spongycastle.cert.'cmp'.CMPException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to verify signature: ");

        $r11 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.cert.'cmp'.CMPException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
