org.spongycastle.cert.crmf.PKIArchiveControlBuilder extends java.lang.Object
private org.spongycastle.cms.CMSEnvelopedDataGenerator envGen
private org.spongycastle.cms.CMSProcessableByteArray keyContent
    public void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo, org.spongycastle.asn1.x509.GeneralName)
    {
        org.spongycastle.cert.crmf.PKIArchiveControlBuilder r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        org.spongycastle.asn1.x509.GeneralName $r2;
        java.io.IOException r3;
        org.spongycastle.asn1.crmf.EncKeyWithID r4;
        byte[] $r5;
        org.spongycastle.cms.CMSProcessableByteArray $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        org.spongycastle.cms.CMSEnvelopedDataGenerator $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: org.spongycastle.cert.crmf.PKIArchiveControlBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r2 := @parameter1: org.spongycastle.asn1.x509.GeneralName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new org.spongycastle.asn1.crmf.EncKeyWithID;

        specialinvoke r4.<org.spongycastle.asn1.crmf.EncKeyWithID: void <init>(org.spongycastle.asn1.pkcs.PrivateKeyInfo,org.spongycastle.asn1.x509.GeneralName)>($r1, $r2);

        $r6 = new org.spongycastle.cms.CMSProcessableByteArray;

        $r7 = <org.spongycastle.asn1.crmf.CRMFObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_encKeyWithID>;

     label1:
        $r5 = virtualinvoke r4.<org.spongycastle.asn1.crmf.EncKeyWithID: byte[] getEncoded()>();

        specialinvoke $r6.<org.spongycastle.cms.CMSProcessableByteArray: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,byte[])>($r7, $r5);

     label2:
        r0.<org.spongycastle.cert.crmf.PKIArchiveControlBuilder: org.spongycastle.cms.CMSProcessableByteArray keyContent> = $r6;

        $r8 = new org.spongycastle.cms.CMSEnvelopedDataGenerator;

        specialinvoke $r8.<org.spongycastle.cms.CMSEnvelopedDataGenerator: void <init>()>();

        r0.<org.spongycastle.cert.crmf.PKIArchiveControlBuilder: org.spongycastle.cms.CMSEnvelopedDataGenerator envGen> = $r8;

        return;

     label3:
        r3 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unable to encode key and general name info");

        throw $r9;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public org.spongycastle.cert.crmf.PKIArchiveControlBuilder addRecipientGenerator(org.spongycastle.cms.RecipientInfoGenerator)
    {
        org.spongycastle.cert.crmf.PKIArchiveControlBuilder r0;
        org.spongycastle.cms.RecipientInfoGenerator $r1;
        org.spongycastle.cms.CMSEnvelopedDataGenerator $r2;

        r0 := @this: org.spongycastle.cert.crmf.PKIArchiveControlBuilder;

        $r1 := @parameter0: org.spongycastle.cms.RecipientInfoGenerator;

        $r2 = r0.<org.spongycastle.cert.crmf.PKIArchiveControlBuilder: org.spongycastle.cms.CMSEnvelopedDataGenerator envGen>;

        virtualinvoke $r2.<org.spongycastle.cms.CMSEnvelopedDataGenerator: void addRecipientInfoGenerator(org.spongycastle.cms.RecipientInfoGenerator)>($r1);

        return r0;
    }
    public org.spongycastle.cert.crmf.PKIArchiveControl build(org.spongycastle.operator.OutputEncryptor) throws org.spongycastle.cms.CMSException
    {
        org.spongycastle.cert.crmf.PKIArchiveControlBuilder r0;
        org.spongycastle.operator.OutputEncryptor $r1;
        org.spongycastle.asn1.crmf.EncryptedKey $r2;
        org.spongycastle.cms.CMSEnvelopedDataGenerator $r3;
        org.spongycastle.cms.CMSProcessableByteArray $r4;
        org.spongycastle.cms.CMSEnvelopedData $r5;
        org.spongycastle.asn1.cms.ContentInfo $r6;
        org.spongycastle.asn1.ASN1Encodable $r7;
        org.spongycastle.asn1.cms.EnvelopedData $r8;
        org.spongycastle.cert.crmf.PKIArchiveControl $r9;
        org.spongycastle.asn1.crmf.PKIArchiveOptions $r10;

        r0 := @this: org.spongycastle.cert.crmf.PKIArchiveControlBuilder;

        $r1 := @parameter0: org.spongycastle.operator.OutputEncryptor;

        $r3 = r0.<org.spongycastle.cert.crmf.PKIArchiveControlBuilder: org.spongycastle.cms.CMSEnvelopedDataGenerator envGen>;

        $r4 = r0.<org.spongycastle.cert.crmf.PKIArchiveControlBuilder: org.spongycastle.cms.CMSProcessableByteArray keyContent>;

        $r5 = virtualinvoke $r3.<org.spongycastle.cms.CMSEnvelopedDataGenerator: org.spongycastle.cms.CMSEnvelopedData generate(org.spongycastle.cms.CMSTypedData,org.spongycastle.operator.OutputEncryptor)>($r4, $r1);

        $r6 = virtualinvoke $r5.<org.spongycastle.cms.CMSEnvelopedData: org.spongycastle.asn1.cms.ContentInfo toASN1Structure()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.cms.ContentInfo: org.spongycastle.asn1.ASN1Encodable getContent()>();

        $r8 = staticinvoke <org.spongycastle.asn1.cms.EnvelopedData: org.spongycastle.asn1.cms.EnvelopedData getInstance(java.lang.Object)>($r7);

        $r9 = new org.spongycastle.cert.crmf.PKIArchiveControl;

        $r10 = new org.spongycastle.asn1.crmf.PKIArchiveOptions;

        $r2 = new org.spongycastle.asn1.crmf.EncryptedKey;

        specialinvoke $r2.<org.spongycastle.asn1.crmf.EncryptedKey: void <init>(org.spongycastle.asn1.cms.EnvelopedData)>($r8);

        specialinvoke $r10.<org.spongycastle.asn1.crmf.PKIArchiveOptions: void <init>(org.spongycastle.asn1.crmf.EncryptedKey)>($r2);

        specialinvoke $r9.<org.spongycastle.cert.crmf.PKIArchiveControl: void <init>(org.spongycastle.asn1.crmf.PKIArchiveOptions)>($r10);

        return $r9;
    }
