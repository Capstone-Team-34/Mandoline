org.spongycastle.cert.crmf.PKMACValueVerifier extends java.lang.Object
private final org.spongycastle.cert.crmf.PKMACBuilder builder
    public void <init>(org.spongycastle.cert.crmf.PKMACBuilder)
    {
        org.spongycastle.cert.crmf.PKMACValueVerifier r0;
        org.spongycastle.cert.crmf.PKMACBuilder $r1;

        r0 := @this: org.spongycastle.cert.crmf.PKMACValueVerifier;

        $r1 := @parameter0: org.spongycastle.cert.crmf.PKMACBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.PKMACValueVerifier: org.spongycastle.cert.crmf.PKMACBuilder builder> = $r1;

        return;
    }
    public boolean isValid(org.spongycastle.asn1.crmf.PKMACValue, char[], org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.PKMACValueVerifier r0;
        org.spongycastle.asn1.crmf.PKMACValue $r1;
        char[] $r2;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r3;
        java.io.IOException r4;
        org.spongycastle.cert.crmf.PKMACBuilder $r5;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r6;
        org.spongycastle.asn1.ASN1Encodable $r7;
        org.spongycastle.asn1.'cmp'.PBMParameter $r8;
        org.spongycastle.operator.MacCalculator $r9;
        java.io.OutputStream $r10;
        byte[] $r11, $r13;
        org.spongycastle.asn1.DERBitString $r12;
        boolean $z0;
        org.spongycastle.cert.crmf.CRMFException $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;

        r0 := @this: org.spongycastle.cert.crmf.PKMACValueVerifier;

        $r1 := @parameter0: org.spongycastle.asn1.crmf.PKMACValue;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r5 = r0.<org.spongycastle.cert.crmf.PKMACValueVerifier: org.spongycastle.cert.crmf.PKMACBuilder builder>;

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.crmf.PKMACValue: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgId()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r8 = staticinvoke <org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.'cmp'.PBMParameter getInstance(java.lang.Object)>($r7);

        virtualinvoke $r5.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACBuilder setParameters(org.spongycastle.asn1.'cmp'.PBMParameter)>($r8);

        $r5 = r0.<org.spongycastle.cert.crmf.PKMACValueVerifier: org.spongycastle.cert.crmf.PKMACBuilder builder>;

        $r9 = virtualinvoke $r5.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.operator.MacCalculator build(char[])>($r2);

        $r10 = interfaceinvoke $r9.<org.spongycastle.operator.MacCalculator: java.io.OutputStream getOutputStream()>();

     label1:
        $r11 = virtualinvoke $r3.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: byte[] getEncoded(java.lang.String)>("DER");

        virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r11);

        virtualinvoke $r10.<java.io.OutputStream: void close()>();

     label2:
        $r11 = interfaceinvoke $r9.<org.spongycastle.operator.MacCalculator: byte[] getMac()>();

        $r12 = virtualinvoke $r1.<org.spongycastle.asn1.crmf.PKMACValue: org.spongycastle.asn1.DERBitString getValue()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r11, $r13);

        return $z0;

     label3:
        r4 := @caughtexception;

        $r14 = new org.spongycastle.cert.crmf.CRMFException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception encoding mac input: ");

        $r16 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>($r16, r4);

        throw $r14;

        catch java.io.IOException from label1 to label2 with label3;
    }
