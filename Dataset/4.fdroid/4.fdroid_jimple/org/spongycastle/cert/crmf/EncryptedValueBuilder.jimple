org.spongycastle.cert.crmf.EncryptedValueBuilder extends java.lang.Object
private org.spongycastle.operator.OutputEncryptor encryptor
private org.spongycastle.cert.crmf.EncryptedValuePadder padder
private org.spongycastle.operator.KeyWrapper wrapper
    public void <init>(org.spongycastle.operator.KeyWrapper, org.spongycastle.operator.OutputEncryptor)
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        org.spongycastle.operator.KeyWrapper $r1;
        org.spongycastle.operator.OutputEncryptor $r2;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: org.spongycastle.operator.KeyWrapper;

        $r2 := @parameter1: org.spongycastle.operator.OutputEncryptor;

        specialinvoke r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: void <init>(org.spongycastle.operator.KeyWrapper,org.spongycastle.operator.OutputEncryptor,org.spongycastle.cert.crmf.EncryptedValuePadder)>($r1, $r2, null);

        return;
    }
    public void <init>(org.spongycastle.operator.KeyWrapper, org.spongycastle.operator.OutputEncryptor, org.spongycastle.cert.crmf.EncryptedValuePadder)
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        org.spongycastle.operator.KeyWrapper $r1;
        org.spongycastle.operator.OutputEncryptor $r2;
        org.spongycastle.cert.crmf.EncryptedValuePadder $r3;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: org.spongycastle.operator.KeyWrapper;

        $r2 := @parameter1: org.spongycastle.operator.OutputEncryptor;

        $r3 := @parameter2: org.spongycastle.cert.crmf.EncryptedValuePadder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.KeyWrapper wrapper> = $r1;

        r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.OutputEncryptor encryptor> = $r2;

        r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.cert.crmf.EncryptedValuePadder padder> = $r3;

        return;
    }
    private org.spongycastle.asn1.crmf.EncryptedValue encryptData(byte[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        byte[] $r1;
        org.spongycastle.asn1.DERBitString r2, r3;
        java.io.ByteArrayOutputStream r4;
        org.spongycastle.operator.OutputEncryptor $r5;
        java.io.OutputStream $r6;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r7, $r10;
        org.spongycastle.operator.KeyWrapper $r8;
        org.spongycastle.operator.GenericKey $r9;
        org.spongycastle.asn1.crmf.EncryptedValue $r11;
        java.io.IOException r12;
        org.spongycastle.cert.crmf.CRMFException $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        org.spongycastle.operator.OperatorException r16;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: byte[];

        r4 = new java.io.ByteArrayOutputStream;

        specialinvoke r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.OutputEncryptor encryptor>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.operator.OutputEncryptor: java.io.OutputStream getOutputStream(java.io.OutputStream)>(r4);

     label1:
        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r1);

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

     label2:
        $r5 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.OutputEncryptor encryptor>;

        $r7 = interfaceinvoke $r5.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r8 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.KeyWrapper wrapper>;

        $r5 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.OutputEncryptor encryptor>;

     label3:
        $r9 = interfaceinvoke $r5.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.operator.GenericKey getKey()>();

        interfaceinvoke $r8.<org.spongycastle.operator.KeyWrapper: byte[] generateWrappedKey(org.spongycastle.operator.GenericKey)>($r9);

     label4:
        r2 = new org.spongycastle.asn1.DERBitString;

        $r8 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.KeyWrapper wrapper>;

        $r5 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.OutputEncryptor encryptor>;

     label5:
        $r9 = interfaceinvoke $r5.<org.spongycastle.operator.OutputEncryptor: org.spongycastle.operator.GenericKey getKey()>();

        $r1 = interfaceinvoke $r8.<org.spongycastle.operator.KeyWrapper: byte[] generateWrappedKey(org.spongycastle.operator.GenericKey)>($r9);

        specialinvoke r2.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r1);

     label6:
        $r8 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.operator.KeyWrapper wrapper>;

        $r10 = interfaceinvoke $r8.<org.spongycastle.operator.KeyWrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        r3 = new org.spongycastle.asn1.DERBitString;

        $r1 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke r3.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r1);

        $r11 = new org.spongycastle.asn1.crmf.EncryptedValue;

        specialinvoke $r11.<org.spongycastle.asn1.crmf.EncryptedValue: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.DERBitString,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1OctetString,org.spongycastle.asn1.DERBitString)>(null, $r7, r2, $r10, null, r3);

        return $r11;

     label7:
        r12 := @caughtexception;

        $r13 = new org.spongycastle.cert.crmf.CRMFException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot process data: ");

        $r15 = virtualinvoke r12.<java.io.IOException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r12);

        throw $r13;

     label8:
        r16 := @caughtexception;

        $r13 = new org.spongycastle.cert.crmf.CRMFException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot wrap key: ");

        $r15 = virtualinvoke r16.<org.spongycastle.operator.OperatorException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r16);

        throw $r13;

        catch java.io.IOException from label1 to label2 with label7;
        catch org.spongycastle.operator.OperatorException from label3 to label4 with label8;
        catch org.spongycastle.operator.OperatorException from label5 to label6 with label8;
    }
    private byte[] padData(byte[])
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        byte[] $r1;
        org.spongycastle.cert.crmf.EncryptedValuePadder $r2;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.cert.crmf.EncryptedValuePadder padder>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.cert.crmf.EncryptedValuePadder padder>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.cert.crmf.EncryptedValuePadder: byte[] getPaddedData(byte[])>($r1);

     label1:
        return $r1;
    }
    public org.spongycastle.asn1.crmf.EncryptedValue build(org.spongycastle.cert.X509CertificateHolder) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        org.spongycastle.cert.X509CertificateHolder $r1;
        java.io.IOException r2;
        byte[] $r3;
        org.spongycastle.asn1.crmf.EncryptedValue $r4;
        org.spongycastle.cert.crmf.CRMFException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: org.spongycastle.cert.X509CertificateHolder;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.cert.X509CertificateHolder: byte[] getEncoded()>();

        $r3 = specialinvoke r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: byte[] padData(byte[])>($r3);

        $r4 = specialinvoke r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.asn1.crmf.EncryptedValue encryptData(byte[])>($r3);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new org.spongycastle.cert.crmf.CRMFException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot encode certificate: ");

        $r7 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r2);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public org.spongycastle.asn1.crmf.EncryptedValue build(char[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.EncryptedValueBuilder r0;
        char[] $r1;
        byte[] $r2;
        org.spongycastle.asn1.crmf.EncryptedValue $r3;

        r0 := @this: org.spongycastle.cert.crmf.EncryptedValueBuilder;

        $r1 := @parameter0: char[];

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(char[])>($r1);

        $r2 = specialinvoke r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: byte[] padData(byte[])>($r2);

        $r3 = specialinvoke r0.<org.spongycastle.cert.crmf.EncryptedValueBuilder: org.spongycastle.asn1.crmf.EncryptedValue encryptData(byte[])>($r2);

        return $r3;
    }
