org.spongycastle.cert.crmf.PKMACBuilder extends java.lang.Object
private org.spongycastle.cert.crmf.PKMACValuesCalculator calculator
private int iterationCount
private org.spongycastle.asn1.x509.AlgorithmIdentifier mac
private int maxIterations
private org.spongycastle.asn1.x509.AlgorithmIdentifier owf
private org.spongycastle.asn1.'cmp'.PBMParameter parameters
private java.security.SecureRandom random
private int saltLength
    private void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, int, org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.cert.crmf.PKMACValuesCalculator)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;
        int $i0;
        org.spongycastle.cert.crmf.PKMACValuesCalculator $r3;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter3: org.spongycastle.cert.crmf.PKMACValuesCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int saltLength> = 20;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.x509.AlgorithmIdentifier owf> = $r1;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int iterationCount> = $i0;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.x509.AlgorithmIdentifier mac> = $r2;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACValuesCalculator calculator> = $r3;

        return;
    }
    public void <init>(org.spongycastle.cert.crmf.PKMACValuesCalculator)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        org.spongycastle.cert.crmf.PKMACValuesCalculator $r1;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r2, $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r4;
        org.spongycastle.asn1.DERNull $r5;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: org.spongycastle.cert.crmf.PKMACValuesCalculator;

        $r2 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r4 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier idSHA1>;

        specialinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r4);

        $r3 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r4 = <org.spongycastle.asn1.iana.IANAObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier hmacSHA1>;

        $r5 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r3.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r4, $r5);

        specialinvoke r0.<org.spongycastle.cert.crmf.PKMACBuilder: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,int,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.cert.crmf.PKMACValuesCalculator)>($r2, 1000, $r3, $r1);

        return;
    }
    public void <init>(org.spongycastle.cert.crmf.PKMACValuesCalculator, int)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        org.spongycastle.cert.crmf.PKMACValuesCalculator $r1;
        int $i0;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: org.spongycastle.cert.crmf.PKMACValuesCalculator;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int saltLength> = 20;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int maxIterations> = $i0;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACValuesCalculator calculator> = $r1;

        return;
    }
    static org.spongycastle.cert.crmf.PKMACValuesCalculator access$000(org.spongycastle.cert.crmf.PKMACBuilder)
    {
        org.spongycastle.cert.crmf.PKMACBuilder $r0;
        org.spongycastle.cert.crmf.PKMACValuesCalculator r1;

        $r0 := @parameter0: org.spongycastle.cert.crmf.PKMACBuilder;

        r1 = $r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACValuesCalculator calculator>;

        return r1;
    }
    private void checkIterationCountCeiling(int)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: int maxIterations>;

        if $i1 <= 0 goto label1;

        $i1 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: int maxIterations>;

        if $i0 <= $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iteration count exceeds limit (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $i0 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: int maxIterations>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return;
    }
    private org.spongycastle.operator.MacCalculator genCalculator(org.spongycastle.asn1.'cmp'.PBMParameter, char[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        org.spongycastle.asn1.'cmp'.PBMParameter $r1;
        char[] $r2;
        byte[] $r3, $r5, r6;
        org.spongycastle.asn1.ASN1OctetString $r4;
        int $i0, $i1;
        org.spongycastle.cert.crmf.PKMACValuesCalculator $r7;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r8, $r9;
        org.spongycastle.asn1.ASN1Integer $r10;
        java.math.BigInteger $r11;
        org.spongycastle.cert.crmf.PKMACBuilder$1 $r12;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.'cmp'.PBMParameter;

        $r2 := @parameter1: char[];

        $r3 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(char[])>($r2);

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.ASN1OctetString getSalt()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $i0 = lengthof $r3;

        $i1 = lengthof $r5;

        $i0 = $i0 + $i1;

        r6 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r6, 0, $i0);

        $i0 = lengthof $r3;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, $i0, $i1);

        $r7 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACValuesCalculator calculator>;

        $r8 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.x509.AlgorithmIdentifier getOwf()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.x509.AlgorithmIdentifier getMac()>();

        interfaceinvoke $r7.<org.spongycastle.cert.crmf.PKMACValuesCalculator: void setup(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r8, $r9);

        $r10 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.ASN1Integer getIterationCount()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r11.<java.math.BigInteger: int intValue()>();

     label1:
        $r7 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.cert.crmf.PKMACValuesCalculator calculator>;

        $r3 = interfaceinvoke $r7.<org.spongycastle.cert.crmf.PKMACValuesCalculator: byte[] calculateDigest(byte[])>(r6);

        r6 = $r3;

        $i0 = $i0 + -1;

        if $i0 > 0 goto label1;

        $r12 = new org.spongycastle.cert.crmf.PKMACBuilder$1;

        specialinvoke $r12.<org.spongycastle.cert.crmf.PKMACBuilder$1: void <init>(org.spongycastle.cert.crmf.PKMACBuilder,org.spongycastle.asn1.'cmp'.PBMParameter,byte[])>(r0, $r1, $r3);

        return $r12;
    }
    public org.spongycastle.operator.MacCalculator build(char[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        char[] $r1;
        byte[] r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3, $r4;
        int $i0;
        org.spongycastle.asn1.'cmp'.PBMParameter $r5;
        org.spongycastle.operator.MacCalculator $r6;
        java.security.SecureRandom $r7;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: char[];

        $r5 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.'cmp'.PBMParameter parameters>;

        if $r5 == null goto label1;

        $r5 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.'cmp'.PBMParameter parameters>;

        $r6 = specialinvoke r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.operator.MacCalculator genCalculator(org.spongycastle.asn1.'cmp'.PBMParameter,char[])>($r5, $r1);

        return $r6;

     label1:
        $i0 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: int saltLength>;

        r2 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: java.security.SecureRandom random>;

        if $r7 != null goto label2;

        $r7 = new java.security.SecureRandom;

        specialinvoke $r7.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: java.security.SecureRandom random> = $r7;

     label2:
        $r7 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        $r5 = new org.spongycastle.asn1.'cmp'.PBMParameter;

        $r3 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.x509.AlgorithmIdentifier owf>;

        $i0 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: int iterationCount>;

        $r4 = r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.x509.AlgorithmIdentifier mac>;

        specialinvoke $r5.<org.spongycastle.asn1.'cmp'.PBMParameter: void <init>(byte[],org.spongycastle.asn1.x509.AlgorithmIdentifier,int,org.spongycastle.asn1.x509.AlgorithmIdentifier)>(r2, $r3, $i0, $r4);

        $r6 = specialinvoke r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.operator.MacCalculator genCalculator(org.spongycastle.asn1.'cmp'.PBMParameter,char[])>($r5, $r1);

        return $r6;
    }
    public org.spongycastle.cert.crmf.PKMACBuilder setIterationCount(int)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $i0 := @parameter0: int;

        if $i0 >= 100 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iteration count must be at least 100");

        throw $r1;

     label1:
        specialinvoke r0.<org.spongycastle.cert.crmf.PKMACBuilder: void checkIterationCountCeiling(int)>($i0);

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int iterationCount> = $i0;

        return r0;
    }
    public org.spongycastle.cert.crmf.PKMACBuilder setParameters(org.spongycastle.asn1.'cmp'.PBMParameter)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        org.spongycastle.asn1.'cmp'.PBMParameter $r1;
        org.spongycastle.asn1.ASN1Integer $r2;
        java.math.BigInteger $r3;
        int $i0;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.'cmp'.PBMParameter;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.'cmp'.PBMParameter: org.spongycastle.asn1.ASN1Integer getIterationCount()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        specialinvoke r0.<org.spongycastle.cert.crmf.PKMACBuilder: void checkIterationCountCeiling(int)>($i0);

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: org.spongycastle.asn1.'cmp'.PBMParameter parameters> = $r1;

        return r0;
    }
    public org.spongycastle.cert.crmf.PKMACBuilder setSaltLength(int)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $i0 := @parameter0: int;

        if $i0 >= 8 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("salt length must be at least 8 bytes");

        throw $r1;

     label1:
        r0.<org.spongycastle.cert.crmf.PKMACBuilder: int saltLength> = $i0;

        return r0;
    }
    public org.spongycastle.cert.crmf.PKMACBuilder setSecureRandom(java.security.SecureRandom)
    {
        org.spongycastle.cert.crmf.PKMACBuilder r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.cert.crmf.PKMACBuilder;

        $r1 := @parameter0: java.security.SecureRandom;

        r0.<org.spongycastle.cert.crmf.PKMACBuilder: java.security.SecureRandom random> = $r1;

        return r0;
    }
