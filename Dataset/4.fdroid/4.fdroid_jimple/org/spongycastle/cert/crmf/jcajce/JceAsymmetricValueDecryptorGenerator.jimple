org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator extends java.lang.Object implements org.spongycastle.cert.crmf.ValueDecryptorGenerator
private org.spongycastle.cert.crmf.jcajce.CRMFHelper helper
private java.security.PrivateKey recipientKey
    public void <init>(java.security.PrivateKey)
    {
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator r0;
        java.security.PrivateKey $r1;
        org.spongycastle.cert.crmf.jcajce.CRMFHelper $r2;
        org.spongycastle.jcajce.util.DefaultJcaJceHelper $r3;

        r0 := @this: org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.cert.crmf.jcajce.CRMFHelper;

        $r3 = new org.spongycastle.jcajce.util.DefaultJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.DefaultJcaJceHelper: void <init>()>();

        specialinvoke $r2.<org.spongycastle.cert.crmf.jcajce.CRMFHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: org.spongycastle.cert.crmf.jcajce.CRMFHelper helper> = $r2;

        r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: java.security.PrivateKey recipientKey> = $r1;

        return;
    }
    private java.security.Key extractSecretKey(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;
        byte[] $r3;
        org.spongycastle.cert.crmf.jcajce.CRMFHelper $r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        javax.crypto.Cipher $r6;
        java.security.PrivateKey $r7;
        java.lang.String $r8;
        java.security.Key $r9;
        javax.crypto.spec.SecretKeySpec r10;
        java.security.GeneralSecurityException $r11;
        java.lang.IllegalStateException $r12;
        java.lang.UnsupportedOperationException $r13;
        java.security.ProviderException $r14;
        java.security.InvalidKeyException r15;
        org.spongycastle.cert.crmf.CRMFException $r16;
        javax.crypto.IllegalBlockSizeException r17;
        javax.crypto.BadPaddingException r18;

        r0 := @this: org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter2: byte[];

        $r4 = r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: org.spongycastle.cert.crmf.jcajce.CRMFHelper helper>;

     label01:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.cert.crmf.jcajce.CRMFHelper: javax.crypto.Cipher createCipher(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r5);

     label02:
        $r7 = r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: java.security.PrivateKey recipientKey>;

     label03:
        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(4, $r7);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r9 = virtualinvoke $r6.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r3, $r8, 3);

     label04:
        if $r9 != null goto label22;

        $r7 = r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: java.security.PrivateKey recipientKey>;

     label05:
        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r7);

     label06:
        r10 = new javax.crypto.spec.SecretKeySpec;

     label07:
        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        $r5 = virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        specialinvoke r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r8);

     label08:
        return r10;

     label09:
        $r11 := @caughtexception;

        $r9 = null;

        goto label04;

     label10:
        $r12 := @caughtexception;

        $r9 = null;

        goto label04;

     label11:
        $r13 := @caughtexception;

        $r9 = null;

        goto label04;

     label12:
        $r14 := @caughtexception;

        $r9 = null;

        goto label04;

     label13:
        r15 := @caughtexception;

     label14:
        $r16 = new org.spongycastle.cert.crmf.CRMFException;

        specialinvoke $r16.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>("key invalid in message.", r15);

        throw $r16;

     label15:
        r17 := @caughtexception;

     label16:
        $r16 = new org.spongycastle.cert.crmf.CRMFException;

        specialinvoke $r16.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>("illegal blocksize in message.", r17);

        throw $r16;

     label17:
        r18 := @caughtexception;

     label18:
        $r16 = new org.spongycastle.cert.crmf.CRMFException;

        specialinvoke $r16.<org.spongycastle.cert.crmf.CRMFException: void <init>(java.lang.String,java.lang.Throwable)>("bad padding in message.", r18);

        throw $r16;

     label19:
        r18 := @caughtexception;

        goto label18;

     label20:
        r17 := @caughtexception;

        goto label16;

     label21:
        r15 := @caughtexception;

        goto label14;

     label22:
        return $r9;

        catch java.security.InvalidKeyException from label01 to label02 with label13;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label15;
        catch javax.crypto.BadPaddingException from label01 to label02 with label17;
        catch java.security.GeneralSecurityException from label03 to label04 with label09;
        catch java.lang.IllegalStateException from label03 to label04 with label10;
        catch java.lang.UnsupportedOperationException from label03 to label04 with label11;
        catch java.security.ProviderException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label21;
        catch java.security.InvalidKeyException from label07 to label08 with label21;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label20;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label20;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch javax.crypto.BadPaddingException from label07 to label08 with label19;
    }
    public org.spongycastle.operator.InputDecryptor getValueDecryptor(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;
        byte[] $r3;
        java.security.Key $r4;
        org.spongycastle.cert.crmf.jcajce.CRMFHelper $r5;
        javax.crypto.Cipher $r6;
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator$1 $r7;

        r0 := @this: org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r3 := @parameter2: byte[];

        $r4 = specialinvoke r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: java.security.Key extractSecretKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r2, $r3);

        $r5 = r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: org.spongycastle.cert.crmf.jcajce.CRMFHelper helper>;

        $r6 = virtualinvoke $r5.<org.spongycastle.cert.crmf.jcajce.CRMFHelper: javax.crypto.Cipher createContentCipher(java.security.Key,org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r4, $r2);

        $r7 = new org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator$1;

        specialinvoke $r7.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator$1: void <init>(org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator,org.spongycastle.asn1.x509.AlgorithmIdentifier,javax.crypto.Cipher)>(r0, $r2, $r6);

        return $r7;
    }
    public org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator setProvider(java.lang.String)
    {
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator r0;
        java.lang.String $r1;
        org.spongycastle.cert.crmf.jcajce.CRMFHelper $r2;
        org.spongycastle.jcajce.util.NamedJcaJceHelper $r3;

        r0 := @this: org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.cert.crmf.jcajce.CRMFHelper;

        $r3 = new org.spongycastle.jcajce.util.NamedJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.NamedJcaJceHelper: void <init>(java.lang.String)>($r1);

        specialinvoke $r2.<org.spongycastle.cert.crmf.jcajce.CRMFHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: org.spongycastle.cert.crmf.jcajce.CRMFHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator setProvider(java.security.Provider)
    {
        org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator r0;
        java.security.Provider $r1;
        org.spongycastle.cert.crmf.jcajce.CRMFHelper $r2;
        org.spongycastle.jcajce.util.ProviderJcaJceHelper $r3;

        r0 := @this: org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator;

        $r1 := @parameter0: java.security.Provider;

        $r2 = new org.spongycastle.cert.crmf.jcajce.CRMFHelper;

        $r3 = new org.spongycastle.jcajce.util.ProviderJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.ProviderJcaJceHelper: void <init>(java.security.Provider)>($r1);

        specialinvoke $r2.<org.spongycastle.cert.crmf.jcajce.CRMFHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.cert.crmf.jcajce.JceAsymmetricValueDecryptorGenerator: org.spongycastle.cert.crmf.jcajce.CRMFHelper helper> = $r2;

        return r0;
    }
