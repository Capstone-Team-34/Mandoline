org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder extends java.lang.Object
private org.spongycastle.asn1.crmf.CertRequest certRequest
private org.spongycastle.asn1.x509.GeneralName name
private org.spongycastle.asn1.x509.SubjectPublicKeyInfo pubKeyInfo
private org.spongycastle.asn1.crmf.PKMACValue publicKeyMAC
    public void <init>(org.spongycastle.asn1.crmf.CertRequest)
    {
        org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder r0;
        org.spongycastle.asn1.crmf.CertRequest $r1;

        r0 := @this: org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.crmf.CertRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.CertRequest certRequest> = $r1;

        return;
    }
    public void <init>(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)
    {
        org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;

        r0 := @this: org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.SubjectPublicKeyInfo pubKeyInfo> = $r1;

        return;
    }
    public org.spongycastle.asn1.crmf.POPOSigningKey build(org.spongycastle.operator.ContentSigner)
    {
        org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder r0;
        org.spongycastle.operator.ContentSigner $r1;
        org.spongycastle.asn1.DERBitString $r2;
        org.spongycastle.asn1.x509.GeneralName $r3;
        org.spongycastle.asn1.crmf.PKMACValue $r4;
        java.lang.IllegalStateException $r5;
        org.spongycastle.asn1.crmf.CertRequest $r6;
        org.spongycastle.asn1.crmf.POPOSigningKeyInput r7;
        java.io.OutputStream $r8;
        org.spongycastle.asn1.crmf.POPOSigningKey $r9;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r10;
        byte[] $r11;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r12;

        r0 := @this: org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder;

        $r1 := @parameter0: org.spongycastle.operator.ContentSigner;

        $r3 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.GeneralName name>;

        if $r3 == null goto label1;

        $r4 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.PKMACValue publicKeyMAC>;

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("name and publicKeyMAC cannot both be set.");

        throw $r5;

     label1:
        $r6 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.CertRequest certRequest>;

        if $r6 == null goto label3;

        r7 = null;

        $r6 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.CertRequest certRequest>;

        $r8 = interfaceinvoke $r1.<org.spongycastle.operator.ContentSigner: java.io.OutputStream getOutputStream()>();

        staticinvoke <org.spongycastle.cert.crmf.CRMFUtil: void derEncodeToStream(org.spongycastle.asn1.ASN1Encodable,java.io.OutputStream)>($r6, $r8);

     label2:
        $r9 = new org.spongycastle.asn1.crmf.POPOSigningKey;

        $r10 = interfaceinvoke $r1.<org.spongycastle.operator.ContentSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r2 = new org.spongycastle.asn1.DERBitString;

        $r11 = interfaceinvoke $r1.<org.spongycastle.operator.ContentSigner: byte[] getSignature()>();

        specialinvoke $r2.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r11);

        specialinvoke $r9.<org.spongycastle.asn1.crmf.POPOSigningKey: void <init>(org.spongycastle.asn1.crmf.POPOSigningKeyInput,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.DERBitString)>(r7, $r10, $r2);

        return $r9;

     label3:
        $r3 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.GeneralName name>;

        if $r3 == null goto label4;

        r7 = new org.spongycastle.asn1.crmf.POPOSigningKeyInput;

        $r3 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.GeneralName name>;

        $r12 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.SubjectPublicKeyInfo pubKeyInfo>;

        specialinvoke r7.<org.spongycastle.asn1.crmf.POPOSigningKeyInput: void <init>(org.spongycastle.asn1.x509.GeneralName,org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r3, $r12);

        $r8 = interfaceinvoke $r1.<org.spongycastle.operator.ContentSigner: java.io.OutputStream getOutputStream()>();

        staticinvoke <org.spongycastle.cert.crmf.CRMFUtil: void derEncodeToStream(org.spongycastle.asn1.ASN1Encodable,java.io.OutputStream)>(r7, $r8);

        goto label2;

     label4:
        r7 = new org.spongycastle.asn1.crmf.POPOSigningKeyInput;

        $r4 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.PKMACValue publicKeyMAC>;

        $r12 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.SubjectPublicKeyInfo pubKeyInfo>;

        specialinvoke r7.<org.spongycastle.asn1.crmf.POPOSigningKeyInput: void <init>(org.spongycastle.asn1.crmf.PKMACValue,org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r4, $r12);

        $r8 = interfaceinvoke $r1.<org.spongycastle.operator.ContentSigner: java.io.OutputStream getOutputStream()>();

        staticinvoke <org.spongycastle.cert.crmf.CRMFUtil: void derEncodeToStream(org.spongycastle.asn1.ASN1Encodable,java.io.OutputStream)>(r7, $r8);

        goto label2;
    }
    public org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder setPublicKeyMac(org.spongycastle.cert.crmf.PKMACValueGenerator, char[]) throws org.spongycastle.cert.crmf.CRMFException
    {
        org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder r0;
        org.spongycastle.cert.crmf.PKMACValueGenerator $r1;
        char[] $r2;
        org.spongycastle.asn1.crmf.PKMACValue $r3;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r4;

        r0 := @this: org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder;

        $r1 := @parameter0: org.spongycastle.cert.crmf.PKMACValueGenerator;

        $r2 := @parameter1: char[];

        $r4 = r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.SubjectPublicKeyInfo pubKeyInfo>;

        $r3 = virtualinvoke $r1.<org.spongycastle.cert.crmf.PKMACValueGenerator: org.spongycastle.asn1.crmf.PKMACValue generate(char[],org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r2, $r4);

        r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.crmf.PKMACValue publicKeyMAC> = $r3;

        return r0;
    }
    public org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder setSender(org.spongycastle.asn1.x509.GeneralName)
    {
        org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder r0;
        org.spongycastle.asn1.x509.GeneralName $r1;

        r0 := @this: org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.GeneralName;

        r0.<org.spongycastle.cert.crmf.ProofOfPossessionSigningKeyBuilder: org.spongycastle.asn1.x509.GeneralName name> = $r1;

        return r0;
    }
