org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder extends java.lang.Object implements org.spongycastle.cert.crmf.EncryptedValuePadder
private org.spongycastle.crypto.Digest dig
private int length
private java.security.SecureRandom random
    public void <init>(int)
    {
        org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder r0;
        int $i0;

        r0 := @this: org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: void <init>(int,java.security.SecureRandom)>($i0, null);

        return;
    }
    public void <init>(int, java.security.SecureRandom)
    {
        org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder r0;
        int $i0;
        java.security.SecureRandom $r1;
        org.spongycastle.crypto.digests.SHA1Digest $r2;

        r0 := @this: org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig> = $r2;

        r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: int length> = $i0;

        r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: java.security.SecureRandom random> = $r1;

        return;
    }
    public byte[] getPaddedData(byte[])
    {
        org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder r0;
        byte[] $r1, r2, r3, r5;
        org.spongycastle.crypto.generators.MGF1BytesGenerator r4;
        int $i0, $i1, $i4;
        org.spongycastle.crypto.Digest $r6;
        java.security.SecureRandom $r7;
        org.spongycastle.crypto.params.MGFParameters $r8;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder;

        $r1 := @parameter0: byte[];

        $i0 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: int length>;

        r2 = newarray (byte)[$i0];

        $r6 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        $i0 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[$i0];

        $i0 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: int length>;

        $r6 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        $i1 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i0 = $i0 - $i1;

        r3 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: java.security.SecureRandom random>;

        if $r7 != null goto label1;

        $r7 = new java.security.SecureRandom;

        specialinvoke $r7.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: java.security.SecureRandom random> = $r7;

     label1:
        $r7 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

        r4 = new org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $r6 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        specialinvoke r4.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void <init>(org.spongycastle.crypto.Digest)>($r6);

        $r8 = new org.spongycastle.crypto.params.MGFParameters;

        specialinvoke $r8.<org.spongycastle.crypto.params.MGFParameters: void <init>(byte[])>(r5);

        virtualinvoke r4.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void init(org.spongycastle.crypto.DerivationParameters)>($r8);

        $i0 = lengthof r3;

        virtualinvoke r4.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int generateBytes(byte[],int,int)>(r3, 0, $i0);

        $i0 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r2, 0, $i0);

        $i0 = lengthof r5;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        $i0 = lengthof r5;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

     label2:
        $i1 = lengthof r2;

        if $i0 == $i1 goto label3;

        $r7 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: java.security.SecureRandom random>;

        $i1 = virtualinvoke $r7.<java.security.SecureRandom: int nextInt(int)>(255);

        $i1 = $i1 + 1;

        $b2 = (byte) $i1;

        r2[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof r3;

        if $i0 == $i1 goto label5;

        $i1 = lengthof r5;

        $i1 = $i1 + $i0;

        $b2 = r2[$i1];

        $b3 = r3[$i0];

        $i4 = $b2 ^ $b3;

        $b2 = (byte) $i4;

        r2[$i1] = $b2;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        return r2;
    }
    public byte[] getUnpaddedData(byte[])
    {
        org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder r0;
        byte[] $r1, r2, r4;
        org.spongycastle.crypto.generators.MGF1BytesGenerator r3;
        byte $b0, $b3;
        org.spongycastle.crypto.Digest $r5;
        int $i1, $i2, $i4;
        org.spongycastle.crypto.params.MGFParameters $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder;

        $r1 := @parameter0: byte[];

        $r5 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        $i1 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r4 = newarray (byte)[$i1];

        $i1 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: int length>;

        $r5 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 - $i2;

        r2 = newarray (byte)[$i1];

        $i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, 0, $i1);

        r3 = new org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $r5 = r0.<org.spongycastle.cert.crmf.bc.BcFixedLengthMGF1Padder: org.spongycastle.crypto.Digest dig>;

        specialinvoke r3.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void <init>(org.spongycastle.crypto.Digest)>($r5);

        $r6 = new org.spongycastle.crypto.params.MGFParameters;

        specialinvoke $r6.<org.spongycastle.crypto.params.MGFParameters: void <init>(byte[])>(r4);

        virtualinvoke r3.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void init(org.spongycastle.crypto.DerivationParameters)>($r6);

        $i1 = lengthof r2;

        virtualinvoke r3.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int generateBytes(byte[],int,int)>(r2, 0, $i1);

        $i1 = 0;

     label1:
        $i2 = lengthof r2;

        if $i1 == $i2 goto label2;

        $i2 = lengthof r4;

        $i2 = $i2 + $i1;

        $b3 = $r1[$i2];

        $b0 = r2[$i1];

        $i4 = $b3 ^ $b0;

        $b0 = (byte) $i4;

        $r1[$i2] = $b0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = 0;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label3:
        $i4 = lengthof r4;

        if $i2 == $i4 goto label4;

        $b0 = $r1[$i2];

        if $b0 != 0 goto label5;

        $i1 = $i2;

     label4:
        if $i1 != 0 goto label6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("bad padding in encoding");

        throw $r7;

     label5:
        $i2 = $i2 + -1;

        goto label3;

     label6:
        $i2 = lengthof r4;

        $i1 = $i1 - $i2;

        r2 = newarray (byte)[$i1];

        $i1 = lengthof r4;

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r2, 0, $i2);

        return r2;
    }
