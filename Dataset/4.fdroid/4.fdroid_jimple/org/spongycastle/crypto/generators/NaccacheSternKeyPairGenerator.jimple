org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private static final java.math.BigInteger ONE
private static int[] smallPrimes
private org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param
    static void <clinit>()
    {
        java.math.BigInteger $r0;
        int[] $r1;

        $r1 = newarray (int)[101];

        $r1[0] = 3;

        $r1[1] = 5;

        $r1[2] = 7;

        $r1[3] = 11;

        $r1[4] = 13;

        $r1[5] = 17;

        $r1[6] = 19;

        $r1[7] = 23;

        $r1[8] = 29;

        $r1[9] = 31;

        $r1[10] = 37;

        $r1[11] = 41;

        $r1[12] = 43;

        $r1[13] = 47;

        $r1[14] = 53;

        $r1[15] = 59;

        $r1[16] = 61;

        $r1[17] = 67;

        $r1[18] = 71;

        $r1[19] = 73;

        $r1[20] = 79;

        $r1[21] = 83;

        $r1[22] = 89;

        $r1[23] = 97;

        $r1[24] = 101;

        $r1[25] = 103;

        $r1[26] = 107;

        $r1[27] = 109;

        $r1[28] = 113;

        $r1[29] = 127;

        $r1[30] = 131;

        $r1[31] = 137;

        $r1[32] = 139;

        $r1[33] = 149;

        $r1[34] = 151;

        $r1[35] = 157;

        $r1[36] = 163;

        $r1[37] = 167;

        $r1[38] = 173;

        $r1[39] = 179;

        $r1[40] = 181;

        $r1[41] = 191;

        $r1[42] = 193;

        $r1[43] = 197;

        $r1[44] = 199;

        $r1[45] = 211;

        $r1[46] = 223;

        $r1[47] = 227;

        $r1[48] = 229;

        $r1[49] = 233;

        $r1[50] = 239;

        $r1[51] = 241;

        $r1[52] = 251;

        $r1[53] = 257;

        $r1[54] = 263;

        $r1[55] = 269;

        $r1[56] = 271;

        $r1[57] = 277;

        $r1[58] = 281;

        $r1[59] = 283;

        $r1[60] = 293;

        $r1[61] = 307;

        $r1[62] = 311;

        $r1[63] = 313;

        $r1[64] = 317;

        $r1[65] = 331;

        $r1[66] = 337;

        $r1[67] = 347;

        $r1[68] = 349;

        $r1[69] = 353;

        $r1[70] = 359;

        $r1[71] = 367;

        $r1[72] = 373;

        $r1[73] = 379;

        $r1[74] = 383;

        $r1[75] = 389;

        $r1[76] = 397;

        $r1[77] = 401;

        $r1[78] = 409;

        $r1[79] = 419;

        $r1[80] = 421;

        $r1[81] = 431;

        $r1[82] = 433;

        $r1[83] = 439;

        $r1[84] = 443;

        $r1[85] = 449;

        $r1[86] = 457;

        $r1[87] = 461;

        $r1[88] = 463;

        $r1[89] = 467;

        $r1[90] = 479;

        $r1[91] = 487;

        $r1[92] = 491;

        $r1[93] = 499;

        $r1[94] = 503;

        $r1[95] = 509;

        $r1[96] = 521;

        $r1[97] = 523;

        $r1[98] = 541;

        $r1[99] = 547;

        $r1[100] = 557;

        <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: int[] smallPrimes> = $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.util.Vector findFirstPrimes(int)
    {
        int $i0, i1, $i2;
        java.util.Vector r0;
        java.math.BigInteger $r1;
        int[] $r2;
        long $l3;

        $i0 := @parameter0: int;

        r0 = new java.util.Vector;

        specialinvoke r0.<java.util.Vector: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 == $i0 goto label2;

        $r2 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: int[] smallPrimes>;

        $i2 = $r2[i1];

        $l3 = (long) $i2;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        virtualinvoke r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
    private static java.math.BigInteger generatePrime(int, int, java.security.SecureRandom)
    {
        int $i0, $i1, $i2;
        java.security.SecureRandom $r0;
        java.math.BigInteger r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.security.SecureRandom;

        r1 = new java.math.BigInteger;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i0, $i1, $r0);

     label1:
        $i2 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if $i2 == $i0 goto label2;

        r1 = new java.math.BigInteger;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i0, $i1, $r0);

        goto label1;

     label2:
        return r1;
    }
    private static int getInt(java.security.SecureRandom, int)
    {
        java.security.SecureRandom $r0;
        int $i0, i1, $i2, $i5;
        long $l3, $l4;

        $r0 := @parameter0: java.security.SecureRandom;

        $i0 := @parameter1: int;

        $i2 = neg $i0;

        $i2 = $i2 & $i0;

        if $i2 != $i0 goto label1;

        $l3 = (long) $i0;

        $i0 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>();

        $i0 = $i0 & 2147483647;

        $l4 = (long) $i0;

        $l3 = $l3 * $l4;

        $l3 = $l3 >> 31;

        $i0 = (int) $l3;

        return $i0;

     label1:
        $i2 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt()>();

        i1 = $i2 & 2147483647;

        $i2 = i1 % $i0;

        $i5 = i1 - $i2;

        i1 = $i0 + -1;

        i1 = $i5 + i1;

        if i1 < 0 goto label1;

        return $i2;
    }
    private static java.util.Vector permuteList(java.util.Vector, java.security.SecureRandom)
    {
        java.util.Vector $r0, r2, r3;
        java.security.SecureRandom $r1;
        int i0, $i1;
        java.lang.Object $r4;

        $r0 := @parameter0: java.util.Vector;

        $r1 := @parameter1: java.security.SecureRandom;

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r4 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        virtualinvoke r3.<java.util.Vector: void removeElementAt(int)>(0);

     label3:
        i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        if i0 == 0 goto label4;

        $r4 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        i0 = i0 + 1;

        i0 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: int getInt(java.security.SecureRandom,int)>($r1, i0);

        virtualinvoke r2.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r4, i0);

        virtualinvoke r3.<java.util.Vector: void removeElementAt(int)>(0);

        goto label3;

     label4:
        return r2;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;
        java.util.Vector r1, $r7;
        int i0, $i1, $i2, $i3;
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters $r2;
        java.security.SecureRandom $r3;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.math.BigInteger r8, r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.Object $r10;
        long l4;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r22;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r23;
        org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters $r24;

        r0 := @this: org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i1 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getStrength()>();

        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCertainty()>();

        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: boolean isDebug()>();

        if $z0 == 0 goto label01;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching first ");

        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        i0 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCntSmallPrimes()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" primes.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label01:
        $r2 = r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        i0 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCntSmallPrimes()>();

        r1 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.util.Vector findFirstPrimes(int)>(i0);

        $r7 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.util.Vector permuteList(java.util.Vector,java.security.SecureRandom)>(r1, $r3);

        r8 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        r9 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        i0 = 0;

     label02:
        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        $i3 = $i3 / 2;

        if i0 >= $i3 goto label03;

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r11 = (java.math.BigInteger) $r10;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        i0 = i0 + 1;

        goto label02;

     label03:
        i0 = virtualinvoke $r7.<java.util.Vector: int size()>();

        i0 = i0 / 2;

     label04:
        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if i0 >= $i3 goto label05;

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r11 = (java.math.BigInteger) $r10;

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        i0 = i0 + 1;

        goto label04;

     label05:
        $r11 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r9);

        i0 = virtualinvoke $r11.<java.math.BigInteger: int bitLength()>();

        i0 = $i1 - i0;

        i0 = i0 + -48;

        $i3 = i0 / 2;

        $i3 = $i3 + 1;

        $r12 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>($i3, $i2, $r3);

        i0 = i0 / 2;

        i0 = i0 + 1;

        $r13 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>(i0, $i2, $r3);

        l4 = 0L;

        if $z0 == 0 goto label06;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("generating p and q");

     label06:
        r8 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r8);

        $r14 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r9 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r9);

        $r15 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

     label07:
        l4 = l4 + 1L;

        r9 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>(24, $i2, $r3);

        r8 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r16 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);

        $z1 = virtualinvoke r8.<java.math.BigInteger: boolean isProbablePrime(int)>($i2);

        if $z1 == 0 goto label07;

     label08:
        $r16 = staticinvoke <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>(24, $i2, $r3);

        $z1 = virtualinvoke r9.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16);

        if $z1 != 0 goto label08;

        $r17 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r15);

        $r18 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r17 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18);

        $z1 = virtualinvoke $r17.<java.math.BigInteger: boolean isProbablePrime(int)>($i2);

        if $z1 == 0 goto label08;

        $r18 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r16);

        $r18 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r18);

        $r19 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r18.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19);

        if $z1 == 0 goto label07;

        $r18 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r17);

        i0 = virtualinvoke $r18.<java.math.BigInteger: int bitLength()>();

        if i0 >= $i1 goto label09;

        if $z0 == 0 goto label07;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key size too small. Should be ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but is actually ");

        r9 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r17);

        i0 = virtualinvoke r9.<java.math.BigInteger: int bitLength()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label07;

     label09:
        if $z0 == 0 goto label10;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("needed ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tries to generate p and q.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label10:
        $r14 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r17);

        $r15 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r15 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r15);

        $r18 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r18);

        $r15 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r18);

        l4 = 0L;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("generating g");

     label11:
        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>()>();

        i0 = 0;

     label12:
        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if i0 == $i3 goto label14;

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r18 = (java.math.BigInteger) $r10;

        $r18 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r18);

     label13:
        l4 = l4 + 1L;

        $r19 = new java.math.BigInteger;

        specialinvoke $r19.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i1, $i2, $r3);

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r18, $r14);

        $r21 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r20.<java.math.BigInteger: boolean equals(java.lang.Object)>($r21);

        if $z1 != 0 goto label13;

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r19);

        i0 = i0 + 1;

        goto label12;

     label14:
        $r18 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        i0 = 0;

     label15:
        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if i0 >= $i3 goto label16;

        $r10 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r19 = (java.math.BigInteger) $r10;

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r20 = (java.math.BigInteger) $r10;

        $r20 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r20);

        $r19 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r20, $r14);

        $r18 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        $r18 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r14);

        i0 = i0 + 1;

        goto label15;

     label16:
        $z1 = 0;

        i0 = 0;

     label17:
        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if i0 >= $i3 goto label19;

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r19 = (java.math.BigInteger) $r10;

        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r19);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z2 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z2 == 0 goto label20;

        if $z0 == 0 goto label18;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/");

        $r10 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n g: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label18:
        $z1 = 1;

     label19:
        if $z1 != 0 goto label11;

        $r19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4L);

        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r19);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label21;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/4\n g:");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label11;

     label20:
        i0 = i0 + 1;

        goto label17;

     label21:
        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r9);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label22;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/p\'\n g: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label11;

     label22:
        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r16);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label23;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/q\'\n g: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label11;

     label23:
        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r12);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label24;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/a\n g: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label11;

     label24:
        $r19 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r13);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r19, $r14);

        $r20 = <org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label25;

        if $z0 == 0 goto label11;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/b\n g: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        goto label11;

     label25:
        if $z0 == 0 goto label26;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("needed ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tries to generate g");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println()>();

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("found new NaccacheStern cipher variables:");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smallPrimes: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sigma:...... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i1 = virtualinvoke $r11.<java.math.BigInteger: int bitLength()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits)");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p\':......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("q\':......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("q:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("phi(n):..... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g:.......... ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println()>();

     label26:
        $r22 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r23 = new org.spongycastle.crypto.params.NaccacheSternKeyParameters;

        $i1 = virtualinvoke $r11.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r23.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: void <init>(boolean,java.math.BigInteger,java.math.BigInteger,int)>(0, $r18, $r14, $i1);

        $r24 = new org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters;

        $i1 = virtualinvoke $r11.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r24.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: void <init>(java.math.BigInteger,java.math.BigInteger,int,java.util.Vector,java.math.BigInteger)>($r18, $r14, $i1, $r7, $r15);

        specialinvoke $r22.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r23, $r24);

        return $r22;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters) $r1;

        r0.<org.spongycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters param> = $r2;

        return;
    }
