org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator extends java.lang.Object implements org.spongycastle.crypto.MacDerivationFunction
private static final java.math.BigInteger INTEGER_MAX
private static final java.math.BigInteger TWO
private byte[] a
private byte[] fixedInputData
private int generatedBytes
private final int h
private byte[] ios
private byte[] k
private int maxSizeExcl
private final org.spongycastle.crypto.Mac prf
private boolean useCounter
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        <org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: java.math.BigInteger INTEGER_MAX> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: java.math.BigInteger TWO> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.Mac)
    {
        org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator r0;
        org.spongycastle.crypto.Mac $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Mac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int getMacSize()>();

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h> = $i0;

        $i0 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a> = $r2;

        $i0 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] k> = $r2;

        return;
    }
    private void generateNext()
    {
        org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator r0;
        int i0, $i1, $i3;
        org.spongycastle.crypto.Mac $r1;
        byte[] $r2, $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator;

        i0 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        if i0 != 0 goto label3;

        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] fixedInputData>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] fixedInputData>;

        i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, i0);

        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r2, 0);

     label1:
        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, i0);

        $z0 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: boolean useCounter>;

        if $z0 == 0 goto label8;

        i0 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        $i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        i0 = i0 / $i1;

        i0 = i0 + 1;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $i1 = lengthof $r2;

        lookupswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            default: goto label2;
        };

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported size of counter i");

        throw $r4;

     label3:
        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, i0);

        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] a>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r2, 0);

        goto label1;

     label4:
        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $i1 = i0 >>> 24;

        $b2 = (byte) $i1;

        $r2[0] = $b2;

     label5:
        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -3;

        $i3 = i0 >>> 16;

        $b2 = (byte) $i3;

        $r2[$i1] = $b2;

     label6:
        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -2;

        $i3 = i0 >>> 8;

        $b2 = (byte) $i3;

        $r2[$i1] = $b2;

     label7:
        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

        $b2 = (byte) i0;

        $r2[$i1] = $b2;

        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios>;

        i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, i0);

     label8:
        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] fixedInputData>;

        $r3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] fixedInputData>;

        i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, i0);

        $r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] k>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r2, 0);

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator r0;
        byte[] $r1, $r5;
        int $i0, i1, i2, $i3, $i4, $i5;
        org.spongycastle.crypto.DataLengthException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator;

        $r1 := @parameter0: byte[];

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        i1 = i1 + $i0;

        if i1 < 0 goto label1;

        i2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int maxSizeExcl>;

        if i1 < i2 goto label2;

     label1:
        $r2 = new org.spongycastle.crypto.DataLengthException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current KDFCTR may only be used for ");

        $i3 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int maxSizeExcl>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        i2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        i1 = i1 % i2;

        if i1 != 0 goto label3;

        specialinvoke r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: void generateNext()>();

     label3:
        i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        i2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        i1 = i1 % i2;

        i2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        $i4 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        $i5 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        $i4 = $i4 % $i5;

        i2 = i2 - $i4;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i0);

        $r5 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] k>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i1, $r1, $i3, i2);

        i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        i1 = i1 + i2;

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes> = i1;

        i1 = $i0 - i2;

        $i3 = $i3 + i2;

     label4:
        if i1 <= 0 goto label5;

        specialinvoke r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: void generateNext()>();

        i2 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i1);

        $r5 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] k>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r1, $i3, i2);

        $i4 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes>;

        $i4 = $i4 + i2;

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes> = $i4;

        i1 = i1 - i2;

        $i3 = $i3 + i2;

        goto label4;

     label5:
        return $i0;
    }
    public org.spongycastle.crypto.Mac getMac()
    {
        org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator r0;
        org.spongycastle.crypto.Mac r1;

        r0 := @this: org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator;

        r1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        return r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters r3;
        org.spongycastle.crypto.Mac $r4;
        org.spongycastle.crypto.params.KeyParameter $r5;
        byte[] $r6;
        java.math.BigInteger $r7, $r8;
        long $l3;

        r0 := @this: org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        $i0 = 2147483647;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong type of arguments given");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters) $r1;

        $r4 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: org.spongycastle.crypto.Mac prf>;

        $r5 = new org.spongycastle.crypto.params.KeyParameter;

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters: byte[] getKI()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r6);

        interfaceinvoke $r4.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r5);

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters: byte[] getFixedInputData()>();

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] fixedInputData> = $r6;

        $i1 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters: int getR()>();

        $i2 = $i1 / 8;

        $r6 = newarray (byte)[$i2];

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: byte[] ios> = $r6;

        $z0 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters: boolean useCounter()>();

        if $z0 == 0 goto label5;

        $r7 = <org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: java.math.BigInteger TWO>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1);

        $i1 = r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int h>;

        $l3 = (long) $i1;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r8 = <org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: java.math.BigInteger INTEGER_MAX>;

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i1 != 1 goto label4;

     label2:
        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int maxSizeExcl> = $i0;

     label3:
        $z0 = virtualinvoke r3.<org.spongycastle.crypto.params.KDFDoublePipelineIterationParameters: boolean useCounter()>();

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: boolean useCounter> = $z0;

        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int generatedBytes> = 0;

        return;

     label4:
        $i0 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        goto label2;

     label5:
        r0.<org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator: int maxSizeExcl> = 2147483647;

        goto label3;
    }
