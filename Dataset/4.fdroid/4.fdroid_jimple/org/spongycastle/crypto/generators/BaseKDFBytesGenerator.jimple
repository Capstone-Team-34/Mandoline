org.spongycastle.crypto.generators.BaseKDFBytesGenerator extends java.lang.Object implements org.spongycastle.crypto.DigestDerivationFunction
private int counterStart
private org.spongycastle.crypto.Digest digest
private byte[] iv
private byte[] shared
    protected void <init>(int, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.generators.BaseKDFBytesGenerator r0;
        int $i0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.generators.BaseKDFBytesGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: int counterStart> = $i0;

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.generators.BaseKDFBytesGenerator r0;
        byte[] $r1, r2, r3, $r7, $r8;
        int i0, $i2, $i3, $i4, $i8, i9, $i10;
        long l1, $l6, $l7;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.Digest $r5;
        byte $b5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.crypto.generators.BaseKDFBytesGenerator;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        i0 = lengthof $r1;

        i0 = i0 - $i3;

        if i0 >= $i2 goto label1;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too small");

        throw $r4;

     label1:
        l1 = (long) $i3;

        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i4 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $b5 = l1 cmp 8589934591L;

        if $b5 <= 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output length too large");

        throw $r6;

     label2:
        $l6 = (long) $i4;

        $l6 = $l6 + l1;

        $l6 = $l6 - 1L;

        $l7 = (long) $i4;

        $l6 = $l6 / $l7;

        i0 = (int) $l6;

        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i8 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i8];

        r2 = newarray (byte)[4];

        $i8 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: int counterStart>;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i8, r2, 0);

        $i8 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: int counterStart>;

        $i8 = $i8 & -256;

        i9 = 0;

     label3:
        if i9 >= i0 goto label8;

        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r7 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] shared>;

        $r8 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] shared>;

        $i10 = lengthof $r8;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r7, 0, $i10);

        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i10 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i10);

        $r7 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] iv>;

        if $r7 == null goto label4;

        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r7 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] iv>;

        $r8 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] iv>;

        $i10 = lengthof $r8;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r7, 0, $i10);

     label4:
        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        if $i3 <= $i4 goto label7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i2, $i4);

        $i2 = $i2 + $i4;

        $i3 = $i3 - $i4;

     label5:
        $b5 = r2[3];

        $i10 = $b5 + 1;

        $b5 = (byte) $i10;

        r2[3] = $b5;

        if $b5 != 0 goto label6;

        $i8 = $i8 + 256;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i8, r2, 0);

     label6:
        i9 = i9 + 1;

        goto label3;

     label7:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i2, $i3);

        goto label5;

     label8:
        $r5 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $i2 = (int) l1;

        return $i2;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.crypto.generators.BaseKDFBytesGenerator r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.generators.BaseKDFBytesGenerator;

        r1 = r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.generators.BaseKDFBytesGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        boolean $z0;
        org.spongycastle.crypto.params.KDFParameters r2;
        byte[] $r3;
        org.spongycastle.crypto.params.ISO18033KDFParameters r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.crypto.generators.BaseKDFBytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KDFParameters;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.KDFParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.KDFParameters: byte[] getSharedSecret()>();

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] shared> = $r3;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.KDFParameters: byte[] getIV()>();

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] iv> = $r3;

        return;

     label1:
        $z0 = $r1 instanceof org.spongycastle.crypto.params.ISO18033KDFParameters;

        if $z0 == 0 goto label2;

        r4 = (org.spongycastle.crypto.params.ISO18033KDFParameters) $r1;

        $r3 = virtualinvoke r4.<org.spongycastle.crypto.params.ISO18033KDFParameters: byte[] getSeed()>();

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] shared> = $r3;

        r0.<org.spongycastle.crypto.generators.BaseKDFBytesGenerator: byte[] iv> = null;

        return;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("KDF parameters required for KDF2Generator");

        throw $r5;
    }
