org.spongycastle.crypto.generators.RSAKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private static final java.math.BigInteger ONE
private org.spongycastle.crypto.params.RSAKeyGenerationParameters param
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.RSAKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.RSAKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected java.math.BigInteger chooseRandomPrime(int, java.math.BigInteger)
    {
        org.spongycastle.crypto.generators.RSAKeyPairGenerator r0;
        int $i0, $i1;
        java.math.BigInteger $r1, r2, $r5, $r6;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r3;
        java.security.SecureRandom $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.generators.RSAKeyPairGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.math.BigInteger;

     label1:
        r2 = new java.math.BigInteger;

        $r3 = r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        specialinvoke r2.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i0, 1, $r4);

        $r5 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r6 = <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        $i1 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: int getCertainty()>();

        $z0 = virtualinvoke r2.<java.math.BigInteger: boolean isProbablePrime(int)>($i1);

        if $z0 == 0 goto label1;

        $r5 = <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r5 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r5 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r5);

        $r6 = <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return r2;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.RSAKeyPairGenerator r0;
        int i0, i1, i2, i3, $i4, $i5;
        org.spongycastle.crypto.AsymmetricCipherKeyPair r1;
        boolean z0;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r2;
        java.math.BigInteger $r3, $r4, $r5, $r6, r7, $r8, $r9, $r10, $r11;
        org.spongycastle.crypto.params.RSAKeyParameters $r12;
        org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters $r13;

        r0 := @this: org.spongycastle.crypto.generators.RSAKeyPairGenerator;

        r1 = null;

        z0 = 0;

        $r2 = r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        $i4 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: int getStrength()>();

        i0 = $i4 + 1;

        i2 = i0 / 2;

        i3 = $i4 - i2;

        i1 = $i4 / 3;

        i0 = $i4 >> 2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $i5 = $i4 / 2;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>($i5);

     label1:
        if z0 != 0 goto label6;

        $r2 = r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.params.RSAKeyGenerationParameters param>;

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyGenerationParameters: java.math.BigInteger getPublicExponent()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger chooseRandomPrime(int,java.math.BigInteger)>(i2, $r4);

     label2:
        $r6 = virtualinvoke r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger chooseRandomPrime(int,java.math.BigInteger)>(i3, $r4);

        r7 = $r6;

        $r8 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i5 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        if $i5 < i1 goto label2;

        $r8 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $i5 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        if $i5 == $i4 goto label3;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r6);

        goto label2;

     label3:
        $i5 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>($r8);

        if $i5 >= i0 goto label4;

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger chooseRandomPrime(int,java.math.BigInteger)>(i2, $r4);

        goto label2;

     label4:
        $i5 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i5 >= 0 goto label5;

        r7 = $r5;

        $r5 = $r6;

     label5:
        $r6 = <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

        $r9 = <org.spongycastle.crypto.generators.RSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r9 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        $r10 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r9);

        $r10 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r10);

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r10 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r10);

        $i5 = virtualinvoke $r10.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i5 <= 0 goto label1;

        z0 = 1;

        $r6 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r6);

        $r9 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r9);

        $r11 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r5);

        r1 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r12 = new org.spongycastle.crypto.params.RSAKeyParameters;

        specialinvoke $r12.<org.spongycastle.crypto.params.RSAKeyParameters: void <init>(boolean,java.math.BigInteger,java.math.BigInteger)>(0, $r8, $r4);

        $r13 = new org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;

        specialinvoke $r13.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r8, $r4, $r10, $r5, r7, $r6, $r9, $r11);

        specialinvoke r1.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r12, $r13);

        goto label1;

     label6:
        return r1;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.RSAKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.RSAKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.crypto.generators.RSAKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.crypto.params.RSAKeyGenerationParameters) $r1;

        r0.<org.spongycastle.crypto.generators.RSAKeyPairGenerator: org.spongycastle.crypto.params.RSAKeyGenerationParameters param> = $r2;

        return;
    }
