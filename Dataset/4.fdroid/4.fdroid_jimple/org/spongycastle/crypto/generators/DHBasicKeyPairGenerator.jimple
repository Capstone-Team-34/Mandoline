org.spongycastle.crypto.generators.DHBasicKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private org.spongycastle.crypto.params.DHKeyGenerationParameters param
    public void <init>()
    {
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator r0;
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper r1;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r2;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r3;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r4;
        org.spongycastle.crypto.params.DHParameters $r5;
        java.security.SecureRandom $r6;
        java.math.BigInteger $r7, $r8;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r9;

        r0 := @this: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator;

        r1 = <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: org.spongycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE>;

        $r4 = r0.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: org.spongycastle.crypto.params.DHKeyGenerationParameters param>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHKeyGenerationParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r4 = r0.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: org.spongycastle.crypto.params.DHKeyGenerationParameters param>;

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r7 = virtualinvoke r1.<org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePrivate(org.spongycastle.crypto.params.DHParameters,java.security.SecureRandom)>($r5, $r6);

        $r8 = virtualinvoke r1.<org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePublic(org.spongycastle.crypto.params.DHParameters,java.math.BigInteger)>($r5, $r7);

        $r9 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r2 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        specialinvoke $r2.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r8, $r5);

        $r3 = new org.spongycastle.crypto.params.DHPrivateKeyParameters;

        specialinvoke $r3.<org.spongycastle.crypto.params.DHPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r7, $r5);

        specialinvoke $r9.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r2, $r3);

        return $r9;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.crypto.generators.DHBasicKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.crypto.params.DHKeyGenerationParameters) $r1;

        r0.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: org.spongycastle.crypto.params.DHKeyGenerationParameters param> = $r2;

        return;
    }
