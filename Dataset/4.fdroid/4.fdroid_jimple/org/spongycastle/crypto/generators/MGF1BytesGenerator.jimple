org.spongycastle.crypto.generators.MGF1BytesGenerator extends java.lang.Object implements org.spongycastle.crypto.DerivationFunction
private org.spongycastle.crypto.Digest digest
private int hLen
private byte[] seed
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.generators.MGF1BytesGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen> = $i0;

        return;
    }
    private void ItoOSP(int, byte[])
    {
        org.spongycastle.crypto.generators.MGF1BytesGenerator r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r1[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r1[2] = $b2;

        $i0 = $i0 >>> 0;

        $b2 = (byte) $i0;

        $r1[3] = $b2;

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.generators.MGF1BytesGenerator r0;
        byte[] $r1, r2, r3, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = lengthof $r1;

        $i2 = $i2 - $i1;

        if $i2 >= $i0 goto label1;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too small");

        throw $r4;

     label1:
        $i2 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        r3 = newarray (byte)[$i2];

        r2 = newarray (byte)[4];

        $i2 = 0;

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        if $i1 <= $i3 goto label3;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void ItoOSP(int,byte[])>($i2, r2);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r6 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: byte[] seed>;

        $r7 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: byte[] seed>;

        $i3 = lengthof $r7;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r6, 0, $i3);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i3 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i3);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        $i3 = $i3 * $i2;

        $i3 = $i3 + $i0;

        $i4 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i3, $i4);

        $i2 = $i2 + 1;

        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        $i3 = $i1 / $i3;

        if $i2 < $i3 goto label2;

     label3:
        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        $i3 = $i3 * $i2;

        if $i3 >= $i1 goto label4;

        specialinvoke r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: void ItoOSP(int,byte[])>($i2, r2);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $r6 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: byte[] seed>;

        $r7 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: byte[] seed>;

        $i3 = lengthof $r7;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r6, 0, $i3);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        $i3 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i3);

        $r5 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        $i3 = $i3 * $i2;

        $i0 = $i3 + $i0;

        $i3 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: int hLen>;

        $i2 = $i3 * $i2;

        $i2 = $i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i0, $i2);

     label4:
        return $i1;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.crypto.generators.MGF1BytesGenerator r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.generators.MGF1BytesGenerator;

        r1 = r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.generators.MGF1BytesGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        byte[] $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.params.MGFParameters r4;

        r0 := @this: org.spongycastle.crypto.generators.MGF1BytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.MGFParameters;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MGF parameters required for MGF1Generator");

        throw $r3;

     label1:
        r4 = (org.spongycastle.crypto.params.MGFParameters) $r1;

        $r2 = virtualinvoke r4.<org.spongycastle.crypto.params.MGFParameters: byte[] getSeed()>();

        r0.<org.spongycastle.crypto.generators.MGF1BytesGenerator: byte[] seed> = $r2;

        return;
    }
