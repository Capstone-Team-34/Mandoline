org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator extends org.spongycastle.crypto.PBEParametersGenerator
private org.spongycastle.crypto.Mac hMac
private byte[] state
    public void <init>()
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        org.spongycastle.crypto.digests.SHA1Digest $r1;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r1 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;
        org.spongycastle.crypto.macs.HMac $r2;
        org.spongycastle.crypto.Mac $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<org.spongycastle.crypto.PBEParametersGenerator: void <init>()>();

        $r2 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke $r2.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac> = $r2;

        $r3 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state> = $r4;

        return;
    }
    private void F(byte[], int, byte[], byte[], int)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i7;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.crypto.Mac $r5;
        byte $b5, $b6;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        $i1 := @parameter4: int;

        if $i0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iteration count must be at least 1.");

        throw $r4;

     label1:
        if $r1 == null goto label2;

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $i2 = lengthof $r1;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, 0, $i2);

     label2:
        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $i2 = lengthof $r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, $i2);

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $r2 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, $i1, $i2);

        $i2 = 1;

     label3:
        if $i2 >= $i0 goto label6;

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $r2 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $i3 = lengthof $r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, 0, $i3);

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        $i3 = 0;

     label4:
        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $i4 = lengthof $r1;

        if $i3 == $i4 goto label5;

        $i4 = $i1 + $i3;

        $b5 = $r3[$i4];

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] state>;

        $b6 = $r1[$i3];

        $i7 = $b5 ^ $b6;

        $b5 = (byte) $i7;

        $r3[$i4] = $b5;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $i2 = $i2 + 1;

        goto label3;

     label6:
        return;
    }
    private byte[] generateDerivedKey(int)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        int $i0, $i1, $i2, $i3, i4, $i6;
        byte[] $r1, r2, r3;
        org.spongycastle.crypto.params.KeyParameter r4;
        org.spongycastle.crypto.Mac $r5;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $i0 := @parameter0: int;

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $i0 = $i0 + $i2;

        $i0 = $i0 + -1;

        $i0 = $i0 / $i2;

        r2 = newarray (byte)[4];

        $i3 = $i0 * $i2;

        r3 = newarray (byte)[$i3];

        $i3 = 0;

        r4 = new org.spongycastle.crypto.params.KeyParameter;

        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] password>;

        specialinvoke r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        $r5 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.Mac hMac>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>(r4);

        i4 = 1;

     label1:
        if i4 > $i0 goto label4;

        $i1 = 3;

     label2:
        $b5 = r2[$i1];

        $i6 = $b5 + 1;

        $b5 = (byte) $i6;

        r2[$i1] = $b5;

        if $b5 != 0 goto label3;

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] salt>;

        $i1 = r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: int iterationCount>;

        specialinvoke r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void F(byte[],int,byte[],byte[],int)>($r1, $i1, r2, r3, $i3);

        $i3 = $i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label4:
        return r3;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        int $i0;
        org.spongycastle.crypto.CipherParameters $r1;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        return $r1;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        int $i0;
        byte[] $r1;
        org.spongycastle.crypto.params.KeyParameter $r2;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $i0 := @parameter0: int;

        $i0 = $i0 / 8;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] generateDerivedKey(int)>($i0);

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, 0, $i0);

        $r2 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r2.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r1, 0, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedParameters(int, int)
    {
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r0;
        org.spongycastle.crypto.params.KeyParameter $r1;
        byte[] $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;

        r0 := @this: org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 / 8;

        $i1 = $i1 / 8;

        $i2 = $i0 + $i1;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: byte[] generateDerivedKey(int)>($i2);

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r1 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r1.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r2, 0, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[],int,int)>($r1, $r2, $i0, $i1);

        return $r3;
    }
