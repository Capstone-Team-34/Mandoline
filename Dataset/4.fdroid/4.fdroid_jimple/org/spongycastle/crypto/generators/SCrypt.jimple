org.spongycastle.crypto.generators.SCrypt extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.crypto.generators.SCrypt r0;

        r0 := @this: org.spongycastle.crypto.generators.SCrypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void BlockMix(int[], int[], int[], int[], int)
    {
        int[] $r0, $r1, $r2, $r3;
        int $i0, i1, $i2, i3, $i4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        $i0 := @parameter4: int;

        $i2 = lengthof $r0;

        $i2 = $i2 + -16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i2, $r1, 0, 16);

        $i2 = 0;

        i3 = 0;

        i1 = lengthof $r0;

        i1 = i1 >>> 1;

        $i0 = $i0 * 2;

     label1:
        if $i0 <= 0 goto label2;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Xor(int[],int[],int,int[])>($r1, $r0, $i2, $r2);

        staticinvoke <org.spongycastle.crypto.engines.Salsa20Engine: void salsaCore(int,int[],int[])>(8, $r2, $r1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, i3, 16);

        $i4 = i1 + $i2;

        i3 = $i4 - i3;

        $i2 = $i2 + 16;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r0, 0, $i0);

        return;
    }
    private static void Clear(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        if $r0 == null goto label1;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r0, 0);

     label1:
        return;
    }
    private static void Clear(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        if $r0 == null goto label1;

        staticinvoke <org.spongycastle.util.Arrays: void fill(int[],int)>($r0, 0);

     label1:
        return;
    }
    private static void ClearAll(int[][])
    {
        int[][] $r0;
        int i0, $i1;
        int[] $r1;

        $r0 := @parameter0: int[][];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r1 = $r0[i0];

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Clear(int[])>($r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private static byte[] MFcrypt(byte[], byte[], int, int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4, i5;
        int[] r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        i4 = $i1 * 128;

        $i2 = $i2 * i4;

        $r1 = staticinvoke <org.spongycastle.crypto.generators.SCrypt: byte[] SingleIterationPBKDF2(byte[],byte[],int)>($r0, $r1, $i2);

        r2 = null;

     label01:
        $i2 = lengthof $r1;

     label02:
        $i2 = $i2 >>> 2;

     label03:
        r2 = newarray (int)[$i2];

        staticinvoke <org.spongycastle.util.Pack: void littleEndianToInt(byte[],int,int[])>($r1, 0, r2);

     label04:
        i4 = i4 >>> 2;

        i5 = 0;

     label05:
        if i5 >= $i2 goto label08;

     label06:
        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void SMix(int[],int,int,int)>(r2, i5, $i0, $i1);

     label07:
        i5 = i5 + i4;

        goto label05;

     label08:
        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int[],byte[],int)>(r2, $r1, 0);

        $r0 = staticinvoke <org.spongycastle.crypto.generators.SCrypt: byte[] SingleIterationPBKDF2(byte[],byte[],int)>($r0, $r1, $i3);

     label09:
        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Clear(byte[])>($r1);

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Clear(int[])>(r2);

        return $r0;

     label10:
        $r3 := @caughtexception;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Clear(byte[])>($r1);

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Clear(int[])>(r2);

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
    private static void SMix(int[], int, int, int)
    {
        int[] $r0, r2, r3, r4, r5, $r6;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        int[][] r1;
        java.lang.Throwable $r7;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = $i2 * 32;

        r3 = newarray (int)[16];

        r4 = newarray (int)[16];

        r5 = newarray (int)[i3];

        r2 = newarray (int)[i3];

        r1 = newarray (int[])[$i1];

     label01:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r2, 0, i3);

     label02:
        i5 = 0;

     label03:
        if i5 >= $i1 goto label06;

     label04:
        $r6 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>(r2);

        r1[i5] = $r6;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void BlockMix(int[],int[],int[],int[],int)>(r2, r3, r4, r5, $i2);

     label05:
        i5 = i5 + 1;

        goto label03;

     label06:
        i5 = $i1 + -1;

        i6 = 0;

     label07:
        if i6 >= $i1 goto label12;

        i4 = i3 + -16;

     label08:
        i4 = r2[i4];

     label09:
        i4 = i4 & i5;

     label10:
        $r6 = r1[i4];

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void Xor(int[],int[],int,int[])>(r2, $r6, 0, r2);

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void BlockMix(int[],int[],int[],int[],int)>(r2, r3, r4, r5, $i2);

     label11:
        i6 = i6 + 1;

        goto label07;

     label12:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r0, $i0, i3);

     label13:
        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void ClearAll(int[][])>(r1);

        r1 = newarray (int[])[4];

        r1[0] = r2;

        r1[1] = r3;

        r1[2] = r4;

        r1[3] = r5;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void ClearAll(int[][])>(r1);

        return;

     label14:
        $r7 := @caughtexception;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void ClearAll(int[][])>(r1);

        r1 = newarray (int[])[4];

        r1[0] = r2;

        r1[1] = r3;

        r1[2] = r4;

        r1[3] = r5;

        staticinvoke <org.spongycastle.crypto.generators.SCrypt: void ClearAll(int[][])>(r1);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
    }
    private static byte[] SingleIterationPBKDF2(byte[], byte[], int)
    {
        byte[] $r0, $r1;
        int $i0;
        org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator r2;
        org.spongycastle.crypto.digests.SHA256Digest $r3;
        org.spongycastle.crypto.CipherParameters $r4;
        org.spongycastle.crypto.params.KeyParameter r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        r2 = new org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator;

        $r3 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke r2.<org.spongycastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        virtualinvoke r2.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r0, $r1, 1);

        $i0 = $i0 * 8;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.PBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i0);

        r5 = (org.spongycastle.crypto.params.KeyParameter) $r4;

        $r0 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        return $r0;
    }
    private static void Xor(int[], int[], int, int[])
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: int[];

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label2;

        $i2 = $r0[$i1];

        $i3 = $i0 + $i1;

        $i3 = $r1[$i3];

        $i2 = $i2 ^ $i3;

        $r2[$i1] = $i2;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return;
    }
    public static byte[] generate(byte[], byte[], int, int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Passphrase P must be provided.");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Salt S must be provided.");

        throw $r2;

     label2:
        if $i0 > 1 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cost parameter N must be > 1.");

        throw $r2;

     label3:
        if $i1 != 1 goto label4;

        if $i0 <= 65536 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cost parameter N must be > 1 and < 65536.");

        throw $r2;

     label4:
        if $i1 >= 1 goto label5;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Block size r must be >= 1.");

        throw $r2;

     label5:
        i4 = $i1 * 128;

        i4 = i4 * 8;

        i4 = 2147483647 / i4;

        if $i2 < 1 goto label6;

        if $i2 <= i4 goto label7;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parallelisation parameter p must be >= 1 and <= ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (based on block size r of ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label7:
        if $i3 >= 1 goto label8;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Generated key length dkLen must be >= 1.");

        throw $r2;

     label8:
        $r0 = staticinvoke <org.spongycastle.crypto.generators.SCrypt: byte[] MFcrypt(byte[],byte[],int,int,int,int)>($r0, $r1, $i0, $i1, $i2, $i3);

        return $r0;
    }
