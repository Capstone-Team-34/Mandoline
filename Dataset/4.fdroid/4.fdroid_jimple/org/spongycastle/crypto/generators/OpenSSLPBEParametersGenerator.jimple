org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator extends org.spongycastle.crypto.PBEParametersGenerator
private org.spongycastle.crypto.Digest digest
    public void <init>()
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.spongycastle.crypto.digests.MD5Digest $r1;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke r0.<org.spongycastle.crypto.PBEParametersGenerator: void <init>()>();

        $r1 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        return;
    }
    private byte[] generateDerivedKey(int)
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        byte[] r1, r2, $r4, $r5;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        $i1 := @parameter0: int;

        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        r2 = newarray (byte)[$i1];

        $i0 = 0;

     label1:
        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] password>;

        $r5 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] password>;

        $i2 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i2);

        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] salt>;

        $r5 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] salt>;

        $i2 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i2);

        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $i2 = lengthof r1;

        if $i1 <= $i2 goto label3;

        $i2 = lengthof r1;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i0, $i2);

        $i0 = $i0 + $i2;

        $i1 = $i1 - $i2;

        if $i1 != 0 goto label4;

        return r2;

     label3:
        $i2 = $i1;

        goto label2;

     label4:
        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void reset()>();

        $r3 = r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $i2 = lengthof r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i2);

        goto label1;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int)
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        int $i0;
        org.spongycastle.crypto.CipherParameters $r1;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        return $r1;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedParameters(int)
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.spongycastle.crypto.params.KeyParameter $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        $i0 := @parameter0: int;

        $i0 = $i0 / 8;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] generateDerivedKey(int)>($i0);

        $r1 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r1.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }
    public org.spongycastle.crypto.CipherParameters generateDerivedParameters(int, int)
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.spongycastle.crypto.params.KeyParameter $r1;
        byte[] $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 / 8;

        $i1 = $i1 / 8;

        $i2 = $i0 + $i1;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] generateDerivedKey(int)>($i2);

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r1 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r1.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r2, 0, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[],int,int)>($r1, $r2, $i0, $i1);

        return $r3;
    }
    public void init(byte[], byte[])
    {
        org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        specialinvoke r0.<org.spongycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r1, $r2, 1);

        return;
    }
