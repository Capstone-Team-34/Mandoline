org.spongycastle.crypto.generators.Poly1305KeyGenerator extends org.spongycastle.crypto.CipherKeyGenerator
private static final byte R_MASK_HIGH_4
private static final byte R_MASK_LOW_2
    public void <init>()
    {
        org.spongycastle.crypto.generators.Poly1305KeyGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.Poly1305KeyGenerator;

        specialinvoke r0.<org.spongycastle.crypto.CipherKeyGenerator: void <init>()>();

        return;
    }
    public static void checkKey(byte[])
    {
        byte[] $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 == 32 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Poly1305 key must be 256 bits.");

        throw $r1;

     label1:
        $b1 = $r0[19];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, 15);

        $b1 = $r0[23];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, 15);

        $b1 = $r0[27];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, 15);

        $b1 = $r0[31];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, 15);

        $b1 = $r0[20];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, -4);

        $b1 = $r0[24];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, -4);

        $b1 = $r0[28];

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void checkMask(byte,byte)>($b1, -4);

        return;
    }
    private static void checkMask(byte, byte)
    {
        byte $b0, $b1;
        int $i2;
        java.lang.IllegalArgumentException $r0;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $i2 = $b1 ^ -1;

        $i2 = $i2 & $b0;

        if $i2 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid format for r portion of Poly1305 key.");

        throw $r0;

     label1:
        return;
    }
    public static void clamp(byte[])
    {
        byte[] $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 == 32 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Poly1305 key must be 256 bits.");

        throw $r1;

     label1:
        $b1 = $r0[19];

        $i0 = $b1 & 15;

        $b1 = (byte) $i0;

        $r0[19] = $b1;

        $b1 = $r0[23];

        $i0 = $b1 & 15;

        $b1 = (byte) $i0;

        $r0[23] = $b1;

        $b1 = $r0[27];

        $i0 = $b1 & 15;

        $b1 = (byte) $i0;

        $r0[27] = $b1;

        $b1 = $r0[31];

        $i0 = $b1 & 15;

        $b1 = (byte) $i0;

        $r0[31] = $b1;

        $b1 = $r0[20];

        $i0 = $b1 & -4;

        $b1 = (byte) $i0;

        $r0[20] = $b1;

        $b1 = $r0[24];

        $i0 = $b1 & -4;

        $b1 = (byte) $i0;

        $r0[24] = $b1;

        $b1 = $r0[28];

        $i0 = $b1 & -4;

        $b1 = (byte) $i0;

        $r0[28] = $b1;

        return;
    }
    public byte[] generateKey()
    {
        org.spongycastle.crypto.generators.Poly1305KeyGenerator r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.generators.Poly1305KeyGenerator;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        staticinvoke <org.spongycastle.crypto.generators.Poly1305KeyGenerator: void clamp(byte[])>($r1);

        return $r1;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.Poly1305KeyGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1, $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.crypto.generators.Poly1305KeyGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = new org.spongycastle.crypto.KeyGenerationParameters;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.KeyGenerationParameters: java.security.SecureRandom getRandom()>();

        specialinvoke $r2.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r3, 256);

        specialinvoke r0.<org.spongycastle.crypto.CipherKeyGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r2);

        return;
    }
