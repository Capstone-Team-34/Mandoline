org.spongycastle.crypto.generators.DHKeyGeneratorHelper extends java.lang.Object
static final org.spongycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE
private static final java.math.BigInteger ONE
private static final java.math.BigInteger TWO
    static void <clinit>()
    {
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1;

        $r0 = new org.spongycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke $r0.<org.spongycastle.crypto.generators.DHKeyGeneratorHelper: void <init>()>();

        <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: org.spongycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ONE> = $r1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO> = $r1;

        return;
    }
    private void <init>()
    {
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper r0;

        r0 := @this: org.spongycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    java.math.BigInteger calculatePrivate(org.spongycastle.crypto.params.DHParameters, java.security.SecureRandom)
    {
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.security.SecureRandom $r2;
        int $i0, i1, $i2;
        java.math.BigInteger $r3, $r4, r5;

        r0 := @this: org.spongycastle.crypto.generators.DHKeyGeneratorHelper;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHParameters;

        $r2 := @parameter1: java.security.SecureRandom;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: int getL()>();

        if $i0 == 0 goto label2;

        i1 = $i0 >>> 2;

     label1:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r2);

        $i2 = $i0 + -1;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i2);

        $i2 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>($r3);

        if $i2 < i1 goto label1;

        return $r3;

     label2:
        $r3 = <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: int getM()>();

        if $i0 == 0 goto label3;

        $r3 = <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ONE>;

        $i0 = $i0 + -1;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

     label3:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getQ()>();

        r5 = $r4;

        if $r4 != null goto label4;

        r5 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

     label4:
        $r4 = <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $i0 = virtualinvoke r5.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 >>> 2;

     label5:
        $r4 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r3, r5, $r2);

        i1 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>($r4);

        if i1 < $i0 goto label5;

        return $r4;
    }
    java.math.BigInteger calculatePublic(org.spongycastle.crypto.params.DHParameters, java.math.BigInteger)
    {
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.math.BigInteger $r2, $r3, $r4;

        r0 := @this: org.spongycastle.crypto.generators.DHKeyGeneratorHelper;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHParameters;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r4);

        return $r2;
    }
