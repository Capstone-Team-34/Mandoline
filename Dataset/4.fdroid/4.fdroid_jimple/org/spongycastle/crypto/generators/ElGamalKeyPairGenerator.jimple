org.spongycastle.crypto.generators.ElGamalKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param
    public void <init>()
    {
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator r0;
        org.spongycastle.crypto.params.DHParameters r1;
        org.spongycastle.crypto.generators.DHKeyGeneratorHelper r2;
        org.spongycastle.crypto.params.ElGamalKeyGenerationParameters $r3;
        org.spongycastle.crypto.params.ElGamalParameters $r4;
        java.math.BigInteger $r5, $r6;
        int $i0;
        java.security.SecureRandom $r7;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r8;
        org.spongycastle.crypto.params.ElGamalPublicKeyParameters $r9;
        org.spongycastle.crypto.params.ElGamalPrivateKeyParameters $r10;

        r0 := @this: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator;

        r2 = <org.spongycastle.crypto.generators.DHKeyGeneratorHelper: org.spongycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE>;

        $r3 = r0.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: org.spongycastle.crypto.params.ElGamalParameters getParameters()>();

        r1 = new org.spongycastle.crypto.params.DHParameters;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: java.math.BigInteger getP()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: java.math.BigInteger getG()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.crypto.params.ElGamalParameters: int getL()>();

        specialinvoke r1.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)>($r5, $r6, null, $i0);

        $r3 = r0.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param>;

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.params.ElGamalKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r5 = virtualinvoke r2.<org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePrivate(org.spongycastle.crypto.params.DHParameters,java.security.SecureRandom)>(r1, $r7);

        $r6 = virtualinvoke r2.<org.spongycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePublic(org.spongycastle.crypto.params.DHParameters,java.math.BigInteger)>(r1, $r5);

        $r8 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r9 = new org.spongycastle.crypto.params.ElGamalPublicKeyParameters;

        specialinvoke $r9.<org.spongycastle.crypto.params.ElGamalPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r6, $r4);

        $r10 = new org.spongycastle.crypto.params.ElGamalPrivateKeyParameters;

        specialinvoke $r10.<org.spongycastle.crypto.params.ElGamalPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r5, $r4);

        specialinvoke $r8.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r9, $r10);

        return $r8;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.ElGamalKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.ElGamalKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.crypto.generators.ElGamalKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.crypto.params.ElGamalKeyGenerationParameters) $r1;

        r0.<org.spongycastle.crypto.generators.ElGamalKeyPairGenerator: org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param> = $r2;

        return;
    }
