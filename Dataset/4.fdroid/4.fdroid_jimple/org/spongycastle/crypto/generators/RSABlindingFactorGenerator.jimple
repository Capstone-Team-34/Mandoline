org.spongycastle.crypto.generators.RSABlindingFactorGenerator extends java.lang.Object
private static java.math.BigInteger ONE
private static java.math.BigInteger ZERO
private org.spongycastle.crypto.params.RSAKeyParameters key
private java.security.SecureRandom random
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.RSABlindingFactorGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.RSABlindingFactorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.math.BigInteger generateBlindingFactor()
    {
        org.spongycastle.crypto.generators.RSABlindingFactorGenerator r0;
        java.math.BigInteger r1, $r4, $r6, $r7;
        int i0;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        java.lang.IllegalStateException $r3;
        java.security.SecureRandom $r5;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.generators.RSABlindingFactorGenerator;

        $r2 = r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: org.spongycastle.crypto.params.RSAKeyParameters key>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("generator not initialised");

        throw $r3;

     label1:
        $r2 = r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + -1;

     label2:
        r1 = new java.math.BigInteger;

        $r5 = r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.security.SecureRandom random>;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,java.util.Random)>(i0, $r5);

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r4);

        $r7 = <org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r7 = <org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r7 = <org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.generators.RSABlindingFactorGenerator r0;
        org.spongycastle.crypto.CipherParameters r1;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;
        java.security.SecureRandom $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.crypto.generators.RSABlindingFactorGenerator;

        r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r3 = (org.spongycastle.crypto.params.RSAKeyParameters) r1;

        r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: org.spongycastle.crypto.params.RSAKeyParameters key> = $r3;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.security.SecureRandom random> = $r4;

     label1:
        $r3 = r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r3 instanceof org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("generator requires RSA public key");

        throw $r5;

     label2:
        $r3 = (org.spongycastle.crypto.params.RSAKeyParameters) r1;

        r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: org.spongycastle.crypto.params.RSAKeyParameters key> = $r3;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.generators.RSABlindingFactorGenerator: java.security.SecureRandom random> = $r4;

        goto label1;

     label3:
        return;
    }
