org.spongycastle.crypto.generators.HKDFBytesGenerator extends java.lang.Object implements org.spongycastle.crypto.DerivationFunction
private byte[] currentT
private int generatedBytes
private org.spongycastle.crypto.macs.HMac hMacHash
private int hashLen
private byte[] info
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;
        org.spongycastle.crypto.macs.HMac $r2;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke $r2.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash> = $r2;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen> = $i0;

        return;
    }
    private void expandNext() throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        int i0, $i1;
        org.spongycastle.crypto.DataLengthException $r1;
        org.spongycastle.crypto.macs.HMac $r2;
        byte[] $r3, $r4;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        i0 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        $i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        i0 = i0 / $i1;

        i0 = i0 + 1;

        if i0 < 256 goto label1;

        $r1 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r1.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("HKDF cannot generate more than 255 blocks of HashLen size");

        throw $r1;

     label1:
        $i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        if $i1 == 0 goto label2;

        $r2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] currentT>;

        $i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i1);

     label2:
        $r2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] info>;

        $r4 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] info>;

        $i1 = lengthof $r4;

        virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i1);

        $r2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $b2 = (byte) i0;

        virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: void update(byte)>($b2);

        $r2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] currentT>;

        virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r3, 0);

        return;
    }
    private org.spongycastle.crypto.params.KeyParameter extract(byte[], byte[])
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        byte[] $r1, $r2;
        org.spongycastle.crypto.macs.HMac $r3;
        org.spongycastle.crypto.params.KeyParameter $r4;
        int $i0;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r4 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r2);

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r4);

        if $r1 != null goto label2;

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r4 = new org.spongycastle.crypto.params.KeyParameter;

        $i0 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        $r1 = newarray (byte)[$i0];

        specialinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r4);

     label1:
        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $i0 = lengthof $r2;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r2, 0, $i0);

        $i0 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        $r1 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r1, 0);

        $r4 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        return $r4;

     label2:
        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r4 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r4);

        goto label1;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        byte[] $r1, $r3;
        int $i0, i1, i2, $i3, $i4, $i5;
        org.spongycastle.crypto.DataLengthException $r2;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        $r1 := @parameter0: byte[];

        $i4 := @parameter1: int;

        $i0 := @parameter2: int;

        i2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        i2 = i2 + $i0;

        i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        i1 = i1 * 255;

        if i2 <= i1 goto label1;

        $r2 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r2.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("HKDF may only be used for 255 * HashLen bytes of output");

        throw $r2;

     label1:
        i2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        i2 = i2 % i1;

        if i2 != 0 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: void expandNext()>();

     label2:
        i2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        i2 = i2 % i1;

        i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        $i5 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        $i3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        $i3 = $i5 % $i3;

        i1 = i1 - $i3;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i0);

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] currentT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i2, $r1, $i4, i1);

        i2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        i2 = i2 + i1;

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes> = i2;

        i2 = $i0 - i1;

        $i4 = $i4 + i1;

     label3:
        if i2 <= 0 goto label4;

        specialinvoke r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: void expandNext()>();

        i1 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);

        $r3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] currentT>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, $i4, i1);

        $i3 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes>;

        $i3 = $i3 + i1;

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes> = $i3;

        i2 = i2 - i1;

        $i4 = $i4 + i1;

        goto label3;

     label4:
        return $i0;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.macs.HMac $r2;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        $r2 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest getUnderlyingDigest()>();

        return $r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.generators.HKDFBytesGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.HKDFParameters r3;
        org.spongycastle.crypto.macs.HMac $r4;
        org.spongycastle.crypto.params.KeyParameter $r5;
        byte[] $r6, $r7;
        int $i0;

        r0 := @this: org.spongycastle.crypto.generators.HKDFBytesGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.HKDFParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HKDF parameters required for HKDFBytesGenerator");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.HKDFParameters) $r1;

        $z0 = virtualinvoke r3.<org.spongycastle.crypto.params.HKDFParameters: boolean skipExtract()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r5 = new org.spongycastle.crypto.params.KeyParameter;

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.HKDFParameters: byte[] getIKM()>();

        specialinvoke $r5.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r6);

        virtualinvoke $r4.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r5);

     label2:
        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.HKDFParameters: byte[] getInfo()>();

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] info> = $r6;

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int generatedBytes> = 0;

        $i0 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: int hashLen>;

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: byte[] currentT> = $r6;

        return;

     label3:
        $r4 = r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.macs.HMac hMacHash>;

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.HKDFParameters: byte[] getSalt()>();

        $r7 = virtualinvoke r3.<org.spongycastle.crypto.params.HKDFParameters: byte[] getIKM()>();

        $r5 = specialinvoke r0.<org.spongycastle.crypto.generators.HKDFBytesGenerator: org.spongycastle.crypto.params.KeyParameter extract(byte[],byte[])>($r6, $r7);

        virtualinvoke $r4.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r5);

        goto label2;
    }
