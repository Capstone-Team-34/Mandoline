org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator extends org.spongycastle.crypto.generators.ECKeyPairGenerator
    public void <init>()
    {
        org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator;

        specialinvoke r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator r0;
        org.spongycastle.crypto.params.ECPublicKeyParameters r1, r4;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.params.ECPrivateKeyParameters r5;
        org.spongycastle.math.ec.ECPoint $r6;
        org.spongycastle.crypto.params.ECDomainParameters $r7;

        r0 := @this: org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r4 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r3;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r5 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r3;

        r1 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r6 = virtualinvoke r4.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r6 = virtualinvoke $r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint negate()>();

        $r7 = virtualinvoke r4.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        specialinvoke r1.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r6, $r7);

        $r2 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r2.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r1, r5);

        return $r2;
    }
