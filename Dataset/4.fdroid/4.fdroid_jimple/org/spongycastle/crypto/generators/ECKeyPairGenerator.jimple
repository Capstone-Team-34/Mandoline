org.spongycastle.crypto.generators.ECKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator org.spongycastle.math.ec.ECConstants
org.spongycastle.crypto.params.ECDomainParameters params
java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.generators.ECKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.generators.ECKeyPairGenerator r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.generators.ECKeyPairGenerator;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.ECKeyPairGenerator r0;
        java.math.BigInteger r1, $r3, $r5;
        int i0, $i1, $i2;
        org.spongycastle.crypto.params.ECDomainParameters $r2;
        java.security.SecureRandom $r4;
        org.spongycastle.math.ec.ECMultiplier $r6;
        org.spongycastle.math.ec.ECPoint $r7;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r8;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r9;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r10;

        r0 := @this: org.spongycastle.crypto.generators.ECKeyPairGenerator;

        $r2 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.params.ECDomainParameters params>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        i0 = $i1 >>> 2;

     label1:
        r1 = new java.math.BigInteger;

        $r4 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random>;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,java.util.Random)>($i1, $r4);

        $r5 = <org.spongycastle.crypto.generators.ECKeyPairGenerator: java.math.BigInteger TWO>;

        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i2 < 0 goto label1;

        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i2 >= 0 goto label1;

        $i2 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>(r1);

        if $i2 < i0 goto label1;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

        $r2 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.params.ECDomainParameters params>;

        $r7 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r7 = interfaceinvoke $r6.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, r1);

        $r8 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r9 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r2 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.params.ECDomainParameters params>;

        specialinvoke $r9.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r7, $r2);

        $r10 = new org.spongycastle.crypto.params.ECPrivateKeyParameters;

        $r2 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.params.ECDomainParameters params>;

        specialinvoke $r10.<org.spongycastle.crypto.params.ECPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ECDomainParameters)>(r1, $r2);

        specialinvoke $r8.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r9, $r10);

        return $r8;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.ECKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.ECKeyGenerationParameters r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.ECDomainParameters $r4;

        r0 := @this: org.spongycastle.crypto.generators.ECKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        r2 = (org.spongycastle.crypto.params.ECKeyGenerationParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ECKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random> = $r3;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ECKeyGenerationParameters: org.spongycastle.crypto.params.ECDomainParameters getDomainParameters()>();

        r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.params.ECDomainParameters params> = $r4;

        $r3 = r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random>;

        if $r3 != null goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.generators.ECKeyPairGenerator: java.security.SecureRandom random> = $r3;

     label1:
        return;
    }
