org.spongycastle.crypto.generators.OpenBSDBCrypt extends java.lang.Object
private static final byte[] decodingTable
private static final byte[] encodingTable
private static final java.lang.String version
    static void <clinit>()
    {
        byte $b0, $b3;
        byte[] $r0, $r1;
        int i1, $i2;

        $r0 = newarray (byte)[64];

        $r0[0] = 46;

        $r0[1] = 47;

        $r0[2] = 65;

        $r0[3] = 66;

        $r0[4] = 67;

        $r0[5] = 68;

        $r0[6] = 69;

        $r0[7] = 70;

        $r0[8] = 71;

        $r0[9] = 72;

        $r0[10] = 73;

        $r0[11] = 74;

        $r0[12] = 75;

        $r0[13] = 76;

        $r0[14] = 77;

        $r0[15] = 78;

        $r0[16] = 79;

        $r0[17] = 80;

        $r0[18] = 81;

        $r0[19] = 82;

        $r0[20] = 83;

        $r0[21] = 84;

        $r0[22] = 85;

        $r0[23] = 86;

        $r0[24] = 87;

        $r0[25] = 88;

        $r0[26] = 89;

        $r0[27] = 90;

        $r0[28] = 97;

        $r0[29] = 98;

        $r0[30] = 99;

        $r0[31] = 100;

        $r0[32] = 101;

        $r0[33] = 102;

        $r0[34] = 103;

        $r0[35] = 104;

        $r0[36] = 105;

        $r0[37] = 106;

        $r0[38] = 107;

        $r0[39] = 108;

        $r0[40] = 109;

        $r0[41] = 110;

        $r0[42] = 111;

        $r0[43] = 112;

        $r0[44] = 113;

        $r0[45] = 114;

        $r0[46] = 115;

        $r0[47] = 116;

        $r0[48] = 117;

        $r0[49] = 118;

        $r0[50] = 119;

        $r0[51] = 120;

        $r0[52] = 121;

        $r0[53] = 122;

        $r0[54] = 48;

        $r0[55] = 49;

        $r0[56] = 50;

        $r0[57] = 51;

        $r0[58] = 52;

        $r0[59] = 53;

        $r0[60] = 54;

        $r0[61] = 55;

        $r0[62] = 56;

        $r0[63] = 57;

        <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable> = $r0;

        $r0 = newarray (byte)[128];

        <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable> = $r0;

        i1 = 0;

     label1:
        $r0 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $r0 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $r0[i1] = -1;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 0;

     label3:
        $r0 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        $i2 = lengthof $r0;

        if i1 >= $i2 goto label4;

        $r0 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $r1 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        $b3 = $r1[i1];

        $b0 = (byte) i1;

        $r0[$b3] = $b0;

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.OpenBSDBCrypt r0;

        r0 := @this: org.spongycastle.crypto.generators.OpenBSDBCrypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean checkPassword(java.lang.String, char[])
    {
        java.lang.String $r0, $r6;
        char[] $r1;
        java.lang.NumberFormatException r2;
        int $i0, $i2, $i3;
        org.spongycastle.crypto.DataLengthException $r3;
        java.lang.StringBuilder $r4;
        char $c1;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        byte[] $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 == 60 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bcrypt String length: ");

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", 60 required.");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label1:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 36 goto label2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3);

        if $c1 != 36 goto label2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(6);

        if $c1 == 36 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Bcrypt String format.");

        throw $r5;

     label3:
        $r6 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, 3);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("2a");

        if $z0 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong Bcrypt version, 2a expected.");

        throw $r5;

     label4:
        $r6 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label5:
        if $i0 < 4 goto label6;

        if $i0 <= 31 goto label8;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid cost factor: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", 4 < cost < 31 expected.");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label7:
        r2 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid cost factor:");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(4, 6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label8:
        if $r1 != null goto label9;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing password.");

        throw $r5;

     label9:
        $i2 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(36);

        $i2 = $i2 + 1;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = $i3 + -31;

        $r6 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r7 = staticinvoke <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodeSaltString(java.lang.String)>($r6);

        $r6 = staticinvoke <org.spongycastle.crypto.generators.OpenBSDBCrypt: java.lang.String generate(char[],byte[],int)>($r1, $r7, $i0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z0;

        catch java.lang.NumberFormatException from label4 to label5 with label7;
    }
    private static java.lang.String createBcryptString(byte[], byte[], int)
    {
        byte[] $r0, $r1;
        int $i0;
        java.lang.StringBuffer r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>(int)>(60);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("2a");

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        if $i0 >= 10 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $r4 = staticinvoke <org.spongycastle.crypto.generators.OpenBSDBCrypt: java.lang.String encodeData(byte[])>($r1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r0 = staticinvoke <org.spongycastle.crypto.generators.BCrypt: byte[] generate(byte[],byte[],int)>($r0, $r1, $i0);

        $r4 = staticinvoke <org.spongycastle.crypto.generators.OpenBSDBCrypt: java.lang.String encodeData(byte[])>($r0);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label2:
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        goto label1;
    }
    private static byte[] decodeSaltString(java.lang.String)
    {
        java.lang.String $r0;
        byte b0, b1, b2, b3;
        int i4, $i6, $i7, $i8;
        java.io.ByteArrayOutputStream r1;
        char[] r2, $r4;
        byte[] r3, $r8;
        char c5;
        org.spongycastle.crypto.DataLengthException $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @parameter0: java.lang.String;

        $r4 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>(int)>(16);

        i4 = lengthof $r4;

        if i4 == 22 goto label1;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base64 salt length: ");

        i4 = lengthof $r4;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , 22 required.");

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label1:
        i4 = 0;

     label2:
        $i6 = lengthof $r4;

        if i4 >= $i6 goto label5;

        c5 = $r4[i4];

        if c5 > 122 goto label3;

        if c5 < 46 goto label3;

        if c5 <= 57 goto label4;

        if c5 >= 65 goto label4;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Salt string contains invalid character: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(c5);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r7;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        r2 = newarray (char)[24];

        i4 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, i4);

        i4 = lengthof r2;

        $i6 = 0;

     label6:
        if $i6 >= i4 goto label7;

        r3 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        c5 = r2[$i6];

        b0 = r3[c5];

        r3 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $i7 = $i6 + 1;

        c5 = r2[$i7];

        b1 = r3[c5];

        r3 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $i7 = $i6 + 2;

        c5 = r2[$i7];

        b2 = r3[c5];

        r3 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] decodingTable>;

        $i7 = $i6 + 3;

        c5 = r2[$i7];

        b3 = r3[c5];

        $i7 = b0 << 2;

        $i8 = b1 >> 4;

        $i7 = $i7 | $i8;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i7);

        $i7 = b1 << 4;

        $i8 = b2 >> 2;

        $i7 = $i7 | $i8;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i7);

        $i7 = b2 << 6;

        $i7 = $i7 | b3;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>($i7);

        $i6 = $i6 + 4;

        goto label6;

     label7:
        $r8 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r3 = newarray (byte)[16];

        i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r3, 0, i4);

        return r3;
    }
    private static java.lang.String encodeData(byte[])
    {
        int i0, i1, i2, i3, i4, $i6;
        java.io.ByteArrayOutputStream r0;
        byte[] r1, $r2;
        org.spongycastle.crypto.DataLengthException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean z0;
        byte $b5;

        $r2 := @parameter0: byte[];

        i3 = lengthof $r2;

        if i3 == 24 goto label1;

        i3 = lengthof $r2;

        if i3 == 16 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length: ");

        i3 = lengthof $r2;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", 24 for key or 16 for salt expected");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        z0 = 0;

        i3 = lengthof $r2;

        if i3 != 16 goto label4;

        z0 = 1;

        r1 = newarray (byte)[18];

        i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i3);

        $r2 = r1;

     label2:
        r0 = new java.io.ByteArrayOutputStream;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>()>();

        i3 = lengthof $r2;

        i4 = 0;

     label3:
        if i4 >= i3 goto label5;

        $b5 = $r2[i4];

        i0 = $b5 & 255;

        i2 = i4 + 1;

        $b5 = $r2[i2];

        i1 = $b5 & 255;

        i2 = i4 + 2;

        $b5 = $r2[i2];

        i2 = $b5 & 255;

        r1 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        $i6 = i0 >>> 2;

        $i6 = $i6 & 63;

        $b5 = r1[$i6];

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(int)>($b5);

        r1 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        i0 = i0 << 4;

        $i6 = i1 >>> 4;

        i0 = i0 | $i6;

        i0 = i0 & 63;

        $b5 = r1[i0];

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(int)>($b5);

        r1 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        i1 = i1 << 2;

        i0 = i2 >>> 6;

        i1 = i1 | i0;

        i1 = i1 & 63;

        $b5 = r1[i1];

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(int)>($b5);

        r1 = <org.spongycastle.crypto.generators.OpenBSDBCrypt: byte[] encodingTable>;

        i2 = i2 & 63;

        $b5 = r1[i2];

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(int)>($b5);

        i4 = i4 + 3;

        goto label3;

     label4:
        i3 = lengthof $r2;

        i3 = i3 + -1;

        $r2[i3] = 0;

        goto label2;

     label5:
        $r2 = virtualinvoke r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = staticinvoke <org.spongycastle.util.Strings: java.lang.String fromByteArray(byte[])>($r2);

        if z0 != 1 goto label6;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, 22);

        return $r5;

     label6:
        i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        i3 = i3 + -1;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        return $r5;
    }
    public static java.lang.String generate(char[], byte[], int)
    {
        char[] $r0;
        byte[] $r1, r2, $r7;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.DataLengthException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = 72;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Password required.");

        throw $r3;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Salt required.");

        throw $r3;

     label2:
        $i2 = lengthof $r1;

        if $i2 == 16 goto label3;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("16 byte salt required: ");

        $i0 = lengthof $r1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        if $i0 < 4 goto label4;

        if $i0 <= 31 goto label5;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid cost factor.");

        throw $r3;

     label5:
        $r7 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(char[])>($r0);

        $i2 = lengthof $r7;

        if $i2 < 72 goto label8;

     label6:
        r2 = newarray (byte)[$i1];

        $i1 = lengthof r2;

        $i2 = lengthof $r7;

        if $i1 <= $i2 goto label9;

        $i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i1);

     label7:
        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r7, 0);

        $r6 = staticinvoke <org.spongycastle.crypto.generators.OpenBSDBCrypt: java.lang.String createBcryptString(byte[],byte[],int)>(r2, $r1, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r2, 0);

        return $r6;

     label8:
        $i1 = lengthof $r7;

        $i1 = $i1 + 1;

        goto label6;

     label9:
        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i1);

        goto label7;
    }
