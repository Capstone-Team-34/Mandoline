org.spongycastle.crypto.generators.DSAParametersGenerator extends java.lang.Object
private static final java.math.BigInteger ONE
private static final java.math.BigInteger TWO
private static final java.math.BigInteger ZERO
private int L
private int N
private int certainty
private org.spongycastle.crypto.Digest digest
private int iterations
private java.security.SecureRandom random
private int usageIndex
private boolean use186_3
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        org.spongycastle.crypto.digests.SHA1Digest $r1;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $r1 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: void <init>(org.spongycastle.crypto.Digest)>($r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        return;
    }
    private static java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r1, $r3, $r4;
        java.security.SecureRandom $r2;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.security.SecureRandom;

        $r3 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r3 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

     label1:
        $r4 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r4 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r4, $r3, $r2);

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r1, $r0);

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        if $i0 <= 1 goto label1;

        return $r4;
    }
    private static java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r1;
        java.security.SecureRandom $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.security.SecureRandom;

        $r0 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r0, $r1, $r2);

        return $r0;
    }
    private static java.math.BigInteger calculateGenerator_FIPS186_3_Verifiable(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, byte[], int)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, r5, $r7;
        byte[] $r3, r4, $r6;
        int $i0, $i1, $i2;
        byte $b3;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: byte[];

        $i0 := @parameter4: int;

        r5 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        r5 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r5);

        $r2 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        $r6 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] decode(java.lang.String)>("6767656E");

        $i1 = lengthof $r3;

        $i2 = lengthof $r6;

        $i1 = $i1 + $i2;

        $i1 = $i1 + 1;

        $i1 = $i1 + 2;

        r4 = newarray (byte)[$i1];

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, 0, $i1);

        $i1 = lengthof $r3;

        $i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r4, $i1, $i2);

        $i1 = lengthof r4;

        $i1 = $i1 + -3;

        $b3 = (byte) $i0;

        r4[$i1] = $b3;

        $i0 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        $i0 = 1;

     label1:
        if $i0 >= 65536 goto label3;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>(r4);

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r0, r4, $r3, 0);

        r5 = new java.math.BigInteger;

        specialinvoke r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r3);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r1);

        $r7 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $i1 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i1 < 0 goto label2;

        return r5;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return null;
    }
    private org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_2()
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        int i0, i1, $i2, $i5, $i6;
        byte[] r1, r2, r4, $r6, $r7, $r11;
        java.math.BigInteger r3, r5, $r12, $r13;
        org.spongycastle.crypto.Digest $r8;
        boolean $z0;
        java.lang.IllegalStateException $r9;
        byte $b3, $b4;
        java.security.SecureRandom $r10;
        org.spongycastle.crypto.params.DSAParameters $r14;
        org.spongycastle.crypto.params.DSAValidationParameters $r15;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        r4 = newarray (byte)[20];

        r1 = newarray (byte)[20];

        r2 = newarray (byte)[20];

        $r6 = newarray (byte)[20];

        i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        i0 = i0 + -1;

        i0 = i0 / 160;

        $i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i2 = $i2 / 8;

        $r7 = newarray (byte)[$i2];

        $r8 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $z0 = $r8 instanceof org.spongycastle.crypto.digests.SHA1Digest;

        if $z0 != 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can only use SHA-1 for generating FIPS 186-2 parameters");

        throw $r9;

     label1:
        $b3 = $r6[0];

        $i2 = $b3 | -128;

        $b3 = (byte) $i2;

        $r6[0] = $b3;

        $b3 = $r6[19];

        $i2 = $b3 | 1;

        $b3 = (byte) $i2;

        $r6[19] = $b3;

        r3 = new java.math.BigInteger;

        specialinvoke r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r6);

        $z0 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean isProbablePrime(java.math.BigInteger)>(r3);

        if $z0 != 0 goto label4;

     label2:
        $r10 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        virtualinvoke $r10.<java.security.SecureRandom: void nextBytes(byte[])>(r4);

        $r8 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r8, r4, r1, 0);

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r2, 0, $i2);

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>(r2);

        $r8 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r8, r2, r2, 0);

        $i2 = 0;

     label3:
        i1 = lengthof $r6;

        if $i2 == i1 goto label1;

        $b3 = r1[$i2];

        $b4 = r2[$i2];

        i1 = $b3 ^ $b4;

        $b3 = (byte) i1;

        $r6[$i2] = $b3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r11 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>(r4);

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r11);

        $i2 = 0;

     label5:
        if $i2 >= 4096 goto label2;

        i1 = 1;

     label6:
        if i1 > i0 goto label7;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r11);

        $r8 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $i5 = lengthof $r7;

        $i6 = lengthof r1;

        $i6 = $i6 * i1;

        $i5 = $i5 - $i6;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r8, $r11, $r7, $i5);

        i1 = i1 + 1;

        goto label6;

     label7:
        i1 = lengthof $r7;

        $i5 = lengthof r1;

        $i5 = $i5 * i0;

        i1 = i1 - $i5;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r11);

        $r8 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r8, $r11, r1, 0);

        $i5 = lengthof r1;

        $i5 = $i5 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, $r7, 0, i1);

        $b3 = $r7[0];

        i1 = $b3 | -128;

        $b3 = (byte) i1;

        $r7[0] = $b3;

        r5 = new java.math.BigInteger;

        specialinvoke r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r7);

        $r12 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r12 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r12);

        $r13 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r13);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        i1 = virtualinvoke r5.<java.math.BigInteger: int bitLength()>();

        $i5 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        if i1 == $i5 goto label9;

     label8:
        $i2 = $i2 + 1;

        goto label5;

     label9:
        $z0 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean isProbablePrime(java.math.BigInteger)>(r5);

        if $z0 == 0 goto label8;

        $r10 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        $r12 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r5, r3, $r10);

        $r14 = new org.spongycastle.crypto.params.DSAParameters;

        $r15 = new org.spongycastle.crypto.params.DSAValidationParameters;

        specialinvoke $r15.<org.spongycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int)>(r4, $i2);

        specialinvoke $r14.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.params.DSAValidationParameters)>(r5, r3, $r12, $r15);

        return $r14;
    }
    private org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_3()
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        java.math.BigInteger r1, $r7, $r9, $r10;
        int i0, i1, i2, i3, $i4, $i5;
        org.spongycastle.crypto.Digest r2;
        byte[] $r3, $r4, $r5, $r8;
        java.security.SecureRandom $r6;
        boolean $z0;
        byte $b6;
        org.spongycastle.crypto.params.DSAParameters $r11;
        org.spongycastle.crypto.params.DSAValidationParameters $r12;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        r2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        i2 = interfaceinvoke r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i0 = i2 * 8;

        i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int N>;

        i2 = i2 / 8;

        $r3 = newarray (byte)[i2];

        i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        i2 = i2 + -1;

        i2 = i2 / i0;

        i1 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        i1 = i1 + -1;

        i0 = i1 % i0;

        i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        i0 = i0 / 8;

        $r4 = newarray (byte)[i0];

        i0 = interfaceinvoke r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r5 = newarray (byte)[i0];

     label1:
        $r6 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>($r3);

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>(r2, $r3, $r5, 0);

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, $r5);

        r1 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int N>;

        i0 = i0 + -1;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i0);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger setBit(int)>(0);

        i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int N>;

        i0 = i0 + -1;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i0);

        $z0 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean isProbablePrime(java.math.BigInteger)>($r7);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        i1 = i0 * 4;

        i0 = 0;

     label2:
        if i0 >= i1 goto label1;

        i3 = 1;

     label3:
        if i3 > i2 goto label4;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r8);

        $i4 = lengthof $r4;

        $i5 = lengthof $r5;

        $i5 = $i5 * i3;

        $i4 = $i4 - $i5;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>(r2, $r8, $r4, $i4);

        i3 = i3 + 1;

        goto label3;

     label4:
        i3 = lengthof $r4;

        $i4 = lengthof $r5;

        $i4 = $i4 * i2;

        i3 = i3 - $i4;

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r8);

        staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: void hash(org.spongycastle.crypto.Digest,byte[],byte[],int)>(r2, $r8, $r5, 0);

        $i4 = lengthof $r5;

        $i4 = $i4 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r4, 0, i3);

        $b6 = $r4[0];

        i3 = $b6 | -128;

        $b6 = (byte) i3;

        $r4[0] = $b6;

        r1 = new java.math.BigInteger;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r4);

        $r9 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r9 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r10 = <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        i3 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i4 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        if i3 == $i4 goto label6;

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        $z0 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean isProbablePrime(java.math.BigInteger)>(r1);

        if $z0 == 0 goto label5;

        i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int usageIndex>;

        if i2 < 0 goto label7;

        i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int usageIndex>;

        $r9 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_3_Verifiable(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,byte[],int)>(r2, r1, $r7, $r3, i2);

        if $r9 == null goto label7;

        $r11 = new org.spongycastle.crypto.params.DSAParameters;

        $r12 = new org.spongycastle.crypto.params.DSAValidationParameters;

        i2 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int usageIndex>;

        specialinvoke $r12.<org.spongycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int,int)>($r3, i0, i2);

        specialinvoke $r11.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.params.DSAValidationParameters)>(r1, $r7, $r9, $r12);

        return $r11;

     label7:
        $r6 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        $r9 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r1, $r7, $r6);

        $r11 = new org.spongycastle.crypto.params.DSAParameters;

        $r12 = new org.spongycastle.crypto.params.DSAValidationParameters;

        specialinvoke $r12.<org.spongycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int)>($r3, i0);

        specialinvoke $r11.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.params.DSAValidationParameters)>(r1, $r7, $r9, $r12);

        return $r11;
    }
    private static int getDefaultN(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 <= 1024 goto label1;

        return 256;

     label1:
        return 160;
    }
    private static int getMinimumIterations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 > 1024 goto label1;

        return 40;

     label1:
        $i0 = $i0 + -1;

        $i0 = $i0 / 1024;

        $i0 = $i0 * 8;

        $i0 = $i0 + 48;

        return $i0;
    }
    private static void hash(org.spongycastle.crypto.Digest, byte[], byte[], int)
    {
        org.spongycastle.crypto.Digest $r0;
        byte[] $r1, $r2;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $i1 = lengthof $r1;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i1);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, $i0);

        return;
    }
    private static void inc(byte[])
    {
        byte[] $r0;
        byte b0;
        int $i1, $i2;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label3;

        b0 = $r0[$i1];

        $i2 = b0 + 1;

        $i2 = $i2 & 255;

        b0 = (byte) $i2;

        $r0[$i1] = b0;

        if b0 == 0 goto label2;

        return;

     label2:
        $i1 = $i1 + -1;

        goto label1;

     label3:
        return;
    }
    private boolean isProbablePrime(java.math.BigInteger)
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        java.math.BigInteger $r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $r1 := @parameter0: java.math.BigInteger;

        $i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean isProbablePrime(int)>($i0);

        return $z0;
    }
    public org.spongycastle.crypto.params.DSAParameters generateParameters()
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        boolean $z0;
        org.spongycastle.crypto.params.DSAParameters $r1;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $z0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean use186_3>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_3()>();

        return $r1;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_2()>();

        return $r1;
    }
    public void init(int, int, java.security.SecureRandom)
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        int $i0, $i1;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.security.SecureRandom;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L> = $i0;

        $i0 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: int getDefaultN(int)>($i0);

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int N> = $i0;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int certainty> = $i1;

        $i0 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i0 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: int getMinimumIterations(int)>($i0);

        $i1 = $i1 + 1;

        $i1 = $i1 / 2;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int iterations> = $i0;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random> = $r1;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean use186_3> = 0;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int usageIndex> = -1;

        return;
    }
    public void init(org.spongycastle.crypto.params.DSAParameterGenerationParameters)
    {
        org.spongycastle.crypto.generators.DSAParametersGenerator r0;
        org.spongycastle.crypto.params.DSAParameterGenerationParameters $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.Digest $r3;
        java.lang.IllegalStateException $r4;
        java.security.SecureRandom $r5;

        r0 := @this: org.spongycastle.crypto.generators.DSAParametersGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.params.DSAParameterGenerationParameters;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: int getL()>();

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: int getN()>();

        if $i0 < 1024 goto label1;

        if $i0 > 3072 goto label1;

        $i2 = $i0 % 1024;

        if $i2 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("L values must be between 1024 and 3072 and a multiple of 1024");

        throw $r2;

     label2:
        if $i0 != 1024 goto label3;

        if $i1 == 160 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("N must be 160 for L = 1024");

        throw $r2;

     label3:
        if $i0 != 2048 goto label4;

        if $i1 == 224 goto label4;

        if $i1 == 256 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("N must be 224 or 256 for L = 2048");

        throw $r2;

     label4:
        if $i0 != 3072 goto label5;

        if $i1 == 256 goto label5;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("N must be 256 for L = 3072");

        throw $r2;

     label5:
        $r3 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: org.spongycastle.crypto.Digest digest>;

        $i2 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i2 = $i2 * 8;

        if $i2 >= $i1 goto label6;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Digest output size too small for value of N");

        throw $r4;

     label6:
        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int L> = $i0;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int N> = $i1;

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: int getCertainty()>();

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int certainty> = $i1;

        $i0 = staticinvoke <org.spongycastle.crypto.generators.DSAParametersGenerator: int getMinimumIterations(int)>($i0);

        $i1 = r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $i1 = $i1 + 1;

        $i1 = $i1 / 2;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int iterations> = $i0;

        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random> = $r5;

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: boolean use186_3> = 1;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.DSAParameterGenerationParameters: int getUsageIndex()>();

        r0.<org.spongycastle.crypto.generators.DSAParametersGenerator: int usageIndex> = $i0;

        return;
    }
