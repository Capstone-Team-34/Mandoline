org.spongycastle.crypto.generators.DSAKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private static final java.math.BigInteger ONE
private org.spongycastle.crypto.params.DSAKeyGenerationParameters param
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.generators.DSAKeyPairGenerator r0;

        r0 := @this: org.spongycastle.crypto.generators.DSAKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.math.BigInteger calculatePublicKey(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r0);

        return $r0;
    }
    private static java.math.BigInteger generatePrivateKey(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r2, $r3;
        java.security.SecureRandom $r1;
        int i0, $i1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        i0 = i0 >>> 2;

     label1:
        $r2 = <org.spongycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r2, $r3, $r1);

        $i1 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>($r2);

        if $i1 < i0 goto label1;

        return $r2;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.crypto.generators.DSAKeyPairGenerator r0;
        org.spongycastle.crypto.params.DSAPrivateKeyParameters $r1;
        org.spongycastle.crypto.params.DSAKeyGenerationParameters $r2;
        org.spongycastle.crypto.params.DSAParameters $r3;
        java.math.BigInteger $r4, $r6, $r7;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r8;
        org.spongycastle.crypto.params.DSAPublicKeyParameters $r9;

        r0 := @this: org.spongycastle.crypto.generators.DSAKeyPairGenerator;

        $r2 = r0.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: org.spongycastle.crypto.params.DSAKeyGenerationParameters param>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.DSAKeyGenerationParameters: org.spongycastle.crypto.params.DSAParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r2 = r0.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: org.spongycastle.crypto.params.DSAKeyGenerationParameters param>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.DSAKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r4 = staticinvoke <org.spongycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom)>($r4, $r5);

        $r6 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r6 = staticinvoke <org.spongycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r4);

        $r8 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        $r9 = new org.spongycastle.crypto.params.DSAPublicKeyParameters;

        specialinvoke $r9.<org.spongycastle.crypto.params.DSAPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DSAParameters)>($r6, $r3);

        $r1 = new org.spongycastle.crypto.params.DSAPrivateKeyParameters;

        specialinvoke $r1.<org.spongycastle.crypto.params.DSAPrivateKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DSAParameters)>($r4, $r3);

        specialinvoke $r8.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r9, $r1);

        return $r8;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.crypto.generators.DSAKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.crypto.params.DSAKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.crypto.generators.DSAKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.crypto.params.DSAKeyGenerationParameters) $r1;

        r0.<org.spongycastle.crypto.generators.DSAKeyPairGenerator: org.spongycastle.crypto.params.DSAKeyGenerationParameters param> = $r2;

        return;
    }
