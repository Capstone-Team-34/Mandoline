org.spongycastle.crypto.generators.DHParametersHelper extends java.lang.Object
private static final java.math.BigInteger ONE
private static final java.math.BigInteger TWO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO> = $r0;

        return;
    }
    void <init>()
    {
        org.spongycastle.crypto.generators.DHParametersHelper r0;

        r0 := @this: org.spongycastle.crypto.generators.DHParametersHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.math.BigInteger[] generateSafePrimes(int, int, java.security.SecureRandom)
    {
        int $i0, $i1, i2, $i3;
        java.security.SecureRandom $r0;
        java.math.BigInteger r1, $r2, $r3;
        boolean $z0;
        java.math.BigInteger[] $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.security.SecureRandom;

        i2 = $i0 + -1;

        $i0 = $i0 >>> 2;

     label1:
        r1 = new java.math.BigInteger;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i2, 2, $r0);

        $r2 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r3 = <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean isProbablePrime(int)>($i1);

        if $z0 == 0 goto label1;

        if $i1 <= 2 goto label2;

        $i3 = $i1 + -2;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean isProbablePrime(int)>($i3);

        if $z0 == 0 goto label1;

     label2:
        $i3 = staticinvoke <org.spongycastle.math.ec.WNafUtil: int getNafWeight(java.math.BigInteger)>($r2);

        if $i3 < $i0 goto label1;

        $r4 = newarray (java.math.BigInteger)[2];

        $r4[0] = $r2;

        $r4[1] = r1;

        return $r4;
    }
    static java.math.BigInteger selectGenerator(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r1, $r3, $r4;
        java.security.SecureRandom $r2;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.security.SecureRandom;

        $r1 = <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label1:
        $r3 = <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r3 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r3, $r1, $r2);

        $r4 = <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r4, $r0);

        $r4 = <org.spongycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return $r3;
    }
