org.spongycastle.crypto.digests.SkeinEngine extends java.lang.Object implements org.spongycastle.util.Memoable
private static final java.util.Hashtable INITIAL_STATES
private static final int PARAM_TYPE_CONFIG
private static final int PARAM_TYPE_KEY
private static final int PARAM_TYPE_MESSAGE
private static final int PARAM_TYPE_OUTPUT
public static final int SKEIN_1024
public static final int SKEIN_256
public static final int SKEIN_512
long[] chain
private long[] initialState
private byte[] key
private final int outputSizeBytes
private org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters
private org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters
private final byte[] singleByte
final org.spongycastle.crypto.engines.ThreefishEngine threefish
private final org.spongycastle.crypto.digests.SkeinEngine$UBI ubi
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        long[] $r1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.crypto.digests.SkeinEngine: java.util.Hashtable INITIAL_STATES> = $r0;

        $r1 = newarray (long)[4];

        $r1[0] = -2228972824489528736L;

        $r1[1] = -8629553674646093540L;

        $r1[2] = 1155188648486244218L;

        $r1[3] = -3677226592081559102L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(256, 128, $r1);

        $r1 = newarray (long)[4];

        $r1[0] = 1450197650740764312L;

        $r1[1] = 3081844928540042640L;

        $r1[2] = -3136097061834271170L;

        $r1[3] = 3301952811952417661L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(256, 160, $r1);

        $r1 = newarray (long)[4];

        $r1[0] = -4176654842910610933L;

        $r1[1] = -8688192972455077604L;

        $r1[2] = -7364642305011795836L;

        $r1[3] = 4056579644589979102L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(256, 224, $r1);

        $r1 = newarray (long)[4];

        $r1[0] = -243853671043386295L;

        $r1[1] = 3443677322885453875L;

        $r1[2] = -5531612722399640561L;

        $r1[3] = 7662005193972177513L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(256, 256, $r1);

        $r1 = newarray (long)[8];

        $r1[0] = -6288014694233956526L;

        $r1[1] = 2204638249859346602L;

        $r1[2] = 3502419045458743507L;

        $r1[3] = -4829063503441264548L;

        $r1[4] = 983504137758028059L;

        $r1[5] = 1880512238245786339L;

        $r1[6] = -6715892782214108542L;

        $r1[7] = 7602827311880509485L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(512, 128, $r1);

        $r1 = newarray (long)[8];

        $r1[0] = 2934123928682216849L;

        $r1[1] = -4399710721982728305L;

        $r1[2] = 1684584802963255058L;

        $r1[3] = 5744138295201861711L;

        $r1[4] = 2444857010922934358L;

        $r1[5] = -2807833639722848072L;

        $r1[6] = -5121587834665610502L;

        $r1[7] = 118355523173251694L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(512, 160, $r1);

        $r1 = newarray (long)[8];

        $r1[0] = -3688341020067007964L;

        $r1[1] = -3772225436291745297L;

        $r1[2] = -8300862168937575580L;

        $r1[3] = 4146387520469897396L;

        $r1[4] = 1106145742801415120L;

        $r1[5] = 7455425944880474941L;

        $r1[6] = -7351063101234211863L;

        $r1[7] = -7048981346965512457L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(512, 224, $r1);

        $r1 = newarray (long)[8];

        $r1[0] = -6631894876634615969L;

        $r1[1] = -5692838220127733084L;

        $r1[2] = -7099962856338682626L;

        $r1[3] = -2911352911530754598L;

        $r1[4] = 2000907093792408677L;

        $r1[5] = 9140007292425499655L;

        $r1[6] = 6093301768906360022L;

        $r1[7] = 2769176472213098488L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(512, 384, $r1);

        $r1 = newarray (long)[8];

        $r1[0] = 5261240102383538638L;

        $r1[1] = 978932832955457283L;

        $r1[2] = -8083517948103779378L;

        $r1[3] = -7339365279355032399L;

        $r1[4] = 6752626034097301424L;

        $r1[5] = -1531723821829733388L;

        $r1[6] = -7417126464950782685L;

        $r1[7] = -5901786942805128141L;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void initialState(int,int,long[])>(512, 512, $r1);

        return;
    }
    public void <init>(int, int)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        int $i0, $i1, $i2;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.crypto.engines.ThreefishEngine $r5;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r6;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] singleByte> = $r1;

        $i2 = $i1 % 8;

        if $i2 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output size must be a multiple of 8 bits. :");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i1 = $i1 / 8;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes> = $i1;

        $r5 = new org.spongycastle.crypto.engines.ThreefishEngine;

        specialinvoke $r5.<org.spongycastle.crypto.engines.ThreefishEngine: void <init>(int)>($i0);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.engines.ThreefishEngine threefish> = $r5;

        $r6 = new org.spongycastle.crypto.digests.SkeinEngine$UBI;

        $r5 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.engines.ThreefishEngine threefish>;

        $i0 = virtualinvoke $r5.<org.spongycastle.crypto.engines.ThreefishEngine: int getBlockSize()>();

        specialinvoke $r6.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void <init>(org.spongycastle.crypto.digests.SkeinEngine,int)>(r0, $i0);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi> = $r6;

        return;
    }
    public void <init>(org.spongycastle.crypto.digests.SkeinEngine)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0, $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SkeinEngine;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i0 = $i0 * 8;

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        $i1 = $i1 * 8;

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(int,int)>($i0, $i1);

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void copyIn(org.spongycastle.crypto.digests.SkeinEngine)>($r1);

        return;
    }
    private void checkInitialised()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Skein engine is not initialised.");

        throw $r2;

     label1:
        return;
    }
    private static org.spongycastle.crypto.digests.SkeinEngine$Parameter[] clone(org.spongycastle.crypto.digests.SkeinEngine$Parameter[], org.spongycastle.crypto.digests.SkeinEngine$Parameter[])
    {
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.crypto.digests.SkeinEngine$Parameter[];

        $r1 := @parameter1: org.spongycastle.crypto.digests.SkeinEngine$Parameter[];

        if $r0 != null goto label1;

        return null;

     label1:
        if $r1 == null goto label2;

        $i1 = lengthof $r1;

        $i0 = lengthof $r0;

        if $i1 == $i0 goto label3;

     label2:
        $i0 = lengthof $r0;

        $r1 = newarray (org.spongycastle.crypto.digests.SkeinEngine$Parameter)[$i0];

     label3:
        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }
    private void copyIn(org.spongycastle.crypto.digests.SkeinEngine)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0, $r1;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r2, $r3;
        long[] $r4, $r5;
        byte[] $r6, $r7;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r8, $r9;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SkeinEngine;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        $r3 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void reset(org.spongycastle.crypto.digests.SkeinEngine$UBI)>($r3);

        $r4 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        $r5 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[],long[])>($r4, $r5);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain> = $r4;

        $r4 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: long[] initialState>;

        $r5 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] initialState>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[],long[])>($r4, $r5);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] initialState> = $r4;

        $r6 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key>;

        $r7 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key>;

        $r6 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[],byte[])>($r6, $r7);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key> = $r6;

        $r8 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        $r8 = staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] clone(org.spongycastle.crypto.digests.SkeinEngine$Parameter[],org.spongycastle.crypto.digests.SkeinEngine$Parameter[])>($r8, $r9);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters> = $r8;

        $r8 = $r1.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        $r8 = staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] clone(org.spongycastle.crypto.digests.SkeinEngine$Parameter[],org.spongycastle.crypto.digests.SkeinEngine$Parameter[])>($r8, $r9);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters> = $r8;

        return;
    }
    private void createInitialState()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter r1;
        long $l0;
        java.util.Hashtable $r2;
        int $i1, $i2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        long[] $r5;
        byte[] $r6;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r7;
        org.spongycastle.crypto.digests.SkeinEngine$Configuration $r8;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r2 = <org.spongycastle.crypto.digests.SkeinEngine: java.util.Hashtable INITIAL_STATES>;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        $r3 = staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: java.lang.Integer variantIdentifier(int,int)>($i1, $i2);

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (long[]) $r4;

        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key>;

        if $r6 != null goto label3;

        if $r5 == null goto label3;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[])>($r5);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain> = $r5;

     label1:
        $r7 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        if $r7 == null goto label5;

        $i1 = 0;

     label2:
        $r7 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        $i2 = lengthof $r7;

        if $i1 >= $i2 goto label5;

        $r7 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        r1 = $r7[$i1];

        $i2 = virtualinvoke r1.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: int getType()>();

        $r6 = virtualinvoke r1.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: byte[] getValue()>();

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiComplete(int,byte[])>($i2, $r6);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i1 = virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i1 = $i1 / 8;

        $r5 = newarray (long)[$i1];

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain> = $r5;

        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key>;

        if $r6 == null goto label4;

        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key>;

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiComplete(int,byte[])>(0, $r6);

     label4:
        $r8 = new org.spongycastle.crypto.digests.SkeinEngine$Configuration;

        $i1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        $i1 = $i1 * 8;

        $l0 = (long) $i1;

        specialinvoke $r8.<org.spongycastle.crypto.digests.SkeinEngine$Configuration: void <init>(long)>($l0);

        $r6 = virtualinvoke $r8.<org.spongycastle.crypto.digests.SkeinEngine$Configuration: byte[] getBytes()>();

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiComplete(int,byte[])>(4, $r6);

        goto label1;

     label5:
        $r5 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: long[] clone(long[])>($r5);

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] initialState> = $r5;

        return;
    }
    private void initParams(java.util.Hashtable)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        java.util.Hashtable $r1;
        java.util.Vector r2, r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Integer r6;
        byte[] $r7;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter $r8;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r9;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: java.util.Hashtable;

        $r4 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.lang.Integer) $r5;

        $r5 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6);

        $r7 = (byte[]) $r5;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label2;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key> = $r7;

        goto label1;

     label2:
        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        if $i0 >= 48 goto label3;

        $r8 = new org.spongycastle.crypto.digests.SkeinEngine$Parameter;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        specialinvoke $r8.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: void <init>(int,byte[])>($i0, $r7);

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        goto label1;

     label3:
        $r8 = new org.spongycastle.crypto.digests.SkeinEngine$Parameter;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        specialinvoke $r8.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: void <init>(int,byte[])>($i0, $r7);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        goto label1;

     label4:
        $i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        $r9 = newarray (org.spongycastle.crypto.digests.SkeinEngine$Parameter)[$i0];

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters> = $r9;

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        virtualinvoke r3.<java.util.Vector: void copyInto(java.lang.Object[])>($r9);

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters>;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void sort(org.spongycastle.crypto.digests.SkeinEngine$Parameter[])>($r9);

        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r9 = newarray (org.spongycastle.crypto.digests.SkeinEngine$Parameter)[$i0];

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters> = $r9;

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        virtualinvoke r2.<java.util.Vector: void copyInto(java.lang.Object[])>($r9);

        $r9 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: void sort(org.spongycastle.crypto.digests.SkeinEngine$Parameter[])>($r9);

        return;
    }
    private static void initialState(int, int, long[])
    {
        int $i0, $i1;
        long[] $r0;
        java.util.Hashtable $r1;
        java.lang.Integer $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: long[];

        $r1 = <org.spongycastle.crypto.digests.SkeinEngine: java.util.Hashtable INITIAL_STATES>;

        $i0 = $i0 / 8;

        $i1 = $i1 / 8;

        $r2 = staticinvoke <org.spongycastle.crypto.digests.SkeinEngine: java.lang.Integer variantIdentifier(int,int)>($i0, $i1);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        return;
    }
    private void output(long, byte[], int, int)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        long $l0;
        byte[] $r1, r2;
        int $i1, $i2, i3, $i4, i5, $i6;
        long[] r3;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r4;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $l0 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r2 = newarray (byte)[8];

        staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: void wordToBytes(long,byte[],int)>($l0, r2, 0);

        r3 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        i3 = lengthof r3;

        r3 = newarray (long)[i3];

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiInit(int)>(63);

        $r4 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        i3 = lengthof r2;

        virtualinvoke $r4.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void update(byte[],int,int,long[])>(r2, 0, i3, r3);

        $r4 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        virtualinvoke $r4.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void doFinal(long[])>(r3);

        i3 = $i2 + 8;

        i3 = i3 + -1;

        i3 = i3 / 8;

        i5 = 0;

     label1:
        if i5 >= i3 goto label4;

        $i4 = i5 * 8;

        $i4 = $i2 - $i4;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i4);

        if $i4 != 8 goto label3;

        $l0 = r3[i5];

        $i4 = i5 * 8;

        $i4 = $i4 + $i1;

        staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: void wordToBytes(long,byte[],int)>($l0, $r1, $i4);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $l0 = r3[i5];

        staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: void wordToBytes(long,byte[],int)>($l0, r2, 0);

        $i6 = i5 * 8;

        $i6 = $i6 + $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i6, $i4);

        goto label2;

     label4:
        return;
    }
    private static void sort(org.spongycastle.crypto.digests.SkeinEngine$Parameter[])
    {
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r0;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter r1, $r2;
        int i0, $i1, $i2, $i3;

        $r0 := @parameter0: org.spongycastle.crypto.digests.SkeinEngine$Parameter[];

        if $r0 != null goto label1;

        return;

     label1:
        i0 = 1;

     label2:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label5;

        r1 = $r0[i0];

        $i1 = i0;

     label3:
        if $i1 <= 0 goto label4;

        $i2 = virtualinvoke r1.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: int getType()>();

        $i3 = $i1 + -1;

        $r2 = $r0[$i3];

        $i3 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: int getType()>();

        if $i2 >= $i3 goto label4;

        $i2 = $i1 + -1;

        $r2 = $r0[$i2];

        $r0[$i1] = $r2;

        $i1 = $i1 + -1;

        goto label3;

     label4:
        $r0[$i1] = r1;

        i0 = i0 + 1;

        goto label2;

     label5:
        return;
    }
    private void ubiComplete(int, byte[])
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        int $i0;
        byte[] $r1;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r2;
        long[] $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiInit(int)>($i0);

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        $i0 = lengthof $r1;

        $r3 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void update(byte[],int,int,long[])>($r1, 0, $i0, $r3);

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiFinal()>();

        return;
    }
    private void ubiFinal()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r1;
        long[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void doFinal(long[])>($r2);

        return;
    }
    private void ubiInit(int)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void reset(int)>($i0);

        return;
    }
    private static java.lang.Integer variantIdentifier(int, int)
    {
        int $i0, $i1;
        java.lang.Integer $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new java.lang.Integer;

        $i1 = $i1 << 16;

        $i0 = $i1 | $i0;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i0);

        return $r0;
    }
    public org.spongycastle.util.Memoable copy()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0, $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 = new org.spongycastle.crypto.digests.SkeinEngine;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(org.spongycastle.crypto.digests.SkeinEngine)>(r0);

        return $r1;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        byte[] $r1, $r7;
        int $i0, $i1, i2, $i3, i4, $i5;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter r2;
        org.spongycastle.crypto.DataLengthException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.digests.SkeinEngine$Parameter[] $r6;
        long $l6;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void checkInitialised()>();

        $i3 = lengthof $r1;

        i2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        i2 = i2 + $i0;

        if $i3 >= i2 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer is too short to hold output of ");

        $i0 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiFinal()>();

        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        if $r6 == null goto label3;

        $i3 = 0;

     label2:
        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        i2 = lengthof $r6;

        if $i3 >= i2 goto label3;

        $r6 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters>;

        r2 = $r6[$i3];

        i2 = virtualinvoke r2.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: int getType()>();

        $r7 = virtualinvoke r2.<org.spongycastle.crypto.digests.SkeinEngine$Parameter: byte[] getValue()>();

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiComplete(int,byte[])>(i2, $r7);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $i3 = virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        i2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        i2 = i2 + $i3;

        i2 = i2 + -1;

        i2 = i2 / $i3;

        i4 = 0;

     label4:
        if i4 >= i2 goto label5;

        $i5 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        $i1 = i4 * $i3;

        $i5 = $i5 - $i1;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        $l6 = (long) i4;

        $i1 = i4 * $i3;

        $i1 = $i0 + $i1;

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void output(long,byte[],int,int)>($l6, $r1, $i1, $i5);

        i4 = i4 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        return $i0;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.ThreefishEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.engines.ThreefishEngine threefish>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.ThreefishEngine: int getBlockSize()>();

        return $i0;
    }
    public int getOutputSize()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        i0 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        return i0;
    }
    public void init(org.spongycastle.crypto.params.SkeinParameters)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        org.spongycastle.crypto.params.SkeinParameters $r1;
        byte[] $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.util.Hashtable $r4;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: org.spongycastle.crypto.params.SkeinParameters;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain> = null;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] key> = null;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters> = null;

        r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters> = null;

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.SkeinParameters: byte[] getKey()>();

        $i0 = lengthof $r2;

        if $i0 >= 16 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Skein key must be at least 128 bits.");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.SkeinParameters: java.util.Hashtable getParameters()>();

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void initParams(java.util.Hashtable)>($r4);

     label2:
        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void createInitialState()>();

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiInit(int)>(48);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        long[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] initialState>;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        $r3 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void ubiInit(int)>(48);

        return;
    }
    public void reset(org.spongycastle.util.Memoable)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0, r2;
        org.spongycastle.util.Memoable $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: org.spongycastle.util.Memoable;

        r2 = (org.spongycastle.crypto.digests.SkeinEngine) $r1;

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i1 = virtualinvoke r2.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        if $i0 != $i1 goto label1;

        $i0 = r0.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        $i1 = r2.<org.spongycastle.crypto.digests.SkeinEngine: int outputSizeBytes>;

        if $i0 == $i1 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible parameters in provided SkeinEngine.");

        throw $r3;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void copyIn(org.spongycastle.crypto.digests.SkeinEngine)>(r2);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        byte $b0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] singleByte>;

        $r1[0] = $b0;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinEngine: byte[] singleByte>;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void update(byte[],int,int)>($r1, 0, 1);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.digests.SkeinEngine r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.digests.SkeinEngine$UBI $r2;
        long[] $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.crypto.digests.SkeinEngine: void checkInitialised()>();

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinEngine: org.spongycastle.crypto.digests.SkeinEngine$UBI ubi>;

        $r3 = r0.<org.spongycastle.crypto.digests.SkeinEngine: long[] chain>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine$UBI: void update(byte[],int,int,long[])>($r1, $i0, $i1, $r3);

        return;
    }
