org.spongycastle.crypto.digests.SM3Digest extends org.spongycastle.crypto.digests.GeneralDigest
private static final int BLOCK_SIZE
private static final int DIGEST_LENGTH
private static final int[] T
private int[] V
private int[] W
private int[] W1
private int[] inwords
private int xOff
    static void <clinit>()
    {
        int i0, i1, $i2;
        int[] $r0;

        $r0 = newarray (int)[64];

        <org.spongycastle.crypto.digests.SM3Digest: int[] T> = $r0;

        i1 = 0;

     label1:
        if i1 >= 16 goto label2;

        $r0 = <org.spongycastle.crypto.digests.SM3Digest: int[] T>;

        $i2 = 2043430169 << i1;

        i0 = 32 - i1;

        i0 = 2043430169 >>> i0;

        $i2 = $i2 | i0;

        $r0[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 16;

     label3:
        if i1 >= 64 goto label4;

        i0 = i1 % 32;

        $r0 = <org.spongycastle.crypto.digests.SM3Digest: int[] T>;

        $i2 = 2055708042 << i0;

        i0 = 32 - i0;

        i0 = 2055708042 >>> i0;

        $i2 = $i2 | i0;

        $r0[i1] = $i2;

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        specialinvoke r0.<org.spongycastle.crypto.digests.GeneralDigest: void <init>()>();

        $r1 = newarray (int)[8];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V> = $r1;

        $r1 = newarray (int)[16];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords> = $r1;

        $r1 = newarray (int)[68];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W> = $r1;

        $r1 = newarray (int)[64];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W1> = $r1;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void reset()>();

        return;
    }
    public void <init>(org.spongycastle.crypto.digests.SM3Digest)
    {
        org.spongycastle.crypto.digests.SM3Digest r0, $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SM3Digest;

        specialinvoke r0.<org.spongycastle.crypto.digests.GeneralDigest: void <init>(org.spongycastle.crypto.digests.GeneralDigest)>($r1);

        $r2 = newarray (int)[8];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V> = $r2;

        $r2 = newarray (int)[16];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords> = $r2;

        $r2 = newarray (int)[68];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W> = $r2;

        $r2 = newarray (int)[64];

        r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W1> = $r2;

        specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void copyIn(org.spongycastle.crypto.digests.SM3Digest)>($r1);

        return;
    }
    private int FF0(int, int, int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i0 = $i0 ^ $i1;

        $i0 = $i0 ^ $i2;

        return $i0;
    }
    private int FF1(int, int, int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $i0 & $i1;

        $i0 = $i0 & $i2;

        $i0 = $i3 | $i0;

        $i1 = $i1 & $i2;

        $i0 = $i0 | $i1;

        return $i0;
    }
    private int GG0(int, int, int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i0 = $i0 ^ $i1;

        $i0 = $i0 ^ $i2;

        return $i0;
    }
    private int GG1(int, int, int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i1 = $i0 & $i1;

        $i0 = $i0 ^ -1;

        $i0 = $i0 & $i2;

        $i0 = $i1 | $i0;

        return $i0;
    }
    private int P0(int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, i1, i2, $i3;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        i2 = $i0 << 9;

        i1 = $i0 >>> 23;

        i2 = i2 | i1;

        i1 = $i0 << 17;

        $i3 = $i0 >>> 15;

        i1 = i1 | $i3;

        $i0 = $i0 ^ i2;

        $i0 = $i0 ^ i1;

        return $i0;
    }
    private int P1(int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int $i0, i1, i2, $i3;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $i0 := @parameter0: int;

        i1 = $i0 << 15;

        i2 = $i0 >>> 17;

        i1 = i1 | i2;

        i2 = $i0 << 23;

        $i3 = $i0 >>> 9;

        i2 = i2 | $i3;

        $i0 = $i0 ^ i1;

        $i0 = $i0 ^ i2;

        return $i0;
    }
    private void copyIn(org.spongycastle.crypto.digests.SM3Digest)
    {
        org.spongycastle.crypto.digests.SM3Digest r0, $r1;
        int[] $r2, $r3, $r4;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SM3Digest;

        $r2 = $r1.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r3 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r4 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $r2 = $r1.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $r3 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $r4 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $i0 = $r1.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = $i0;

        return;
    }
    public org.spongycastle.util.Memoable copy()
    {
        org.spongycastle.crypto.digests.SM3Digest r0, $r1;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 = new org.spongycastle.crypto.digests.SM3Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SM3Digest: void <init>(org.spongycastle.crypto.digests.SM3Digest)>(r0);

        return $r1;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void finish()>();

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[0];

        $i2 = $i0;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[1];

        $i2 = $i0 + 4;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[2];

        $i2 = $i0 + 8;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[3];

        $i2 = $i0 + 12;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[4];

        $i2 = $i0 + 16;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[5];

        $i2 = $i0 + 20;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[6];

        $i2 = $i0 + 24;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i2);

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i1 = $r2[7];

        $i0 = $i0 + 28;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i1, $r1, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void reset()>();

        return 32;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.digests.SM3Digest r0;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        return "SM3";
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.digests.SM3Digest r0;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        return 32;
    }
    protected void processBlock()
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int i0, i1, i2, i3, $i4, i5, i6, i7, i8, $i9, $i10, $i11;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        i3 = 0;

     label01:
        if i3 >= 16 goto label02;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        i0 = $r2[i3];

        $r1[i3] = i0;

        i3 = i3 + 1;

        goto label01;

     label02:
        i3 = 16;

     label03:
        if i3 >= 68 goto label04;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i0 = i3 + -3;

        i1 = $r1[i0];

        i0 = i1 << 15;

        i1 = i1 >>> 17;

        i0 = i0 | i1;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i1 = i3 + -13;

        i2 = $r1[i1];

        i1 = i2 << 7;

        i2 = i2 >>> 25;

        i1 = i1 | i2;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i2 = i3 + -16;

        i2 = $r2[i2];

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        $i4 = i3 + -9;

        $i4 = $r2[$i4];

        i2 = i2 ^ $i4;

        i0 = i2 ^ i0;

        i0 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int P1(int)>(i0);

        i0 = i0 ^ i1;

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i1 = i3 + -6;

        i1 = $r2[i1];

        i0 = i0 ^ i1;

        $r1[i3] = i0;

        i3 = i3 + 1;

        goto label03;

     label04:
        i3 = 0;

     label05:
        if i3 >= 64 goto label06;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W1>;

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i0 = $r2[i3];

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i1 = i3 + 4;

        i1 = $r2[i1];

        i0 = i0 ^ i1;

        $r1[i3] = i0;

        i3 = i3 + 1;

        goto label05;

     label06:
        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i4 = $r1[0];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i5 = $r1[1];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i6 = $r1[2];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i7 = $r1[3];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i1 = $r1[4];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i3 = $r1[5];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i0 = $r1[6];

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i2 = $r1[7];

        i8 = 0;

     label07:
        if i8 >= 16 goto label08;

        $i9 = $i4 << 12;

        $i10 = $i4 >>> 20;

        $i10 = $i9 | $i10;

        $i9 = $i10 + i1;

        $r1 = <org.spongycastle.crypto.digests.SM3Digest: int[] T>;

        $i11 = $r1[i8];

        $i11 = $i9 + $i11;

        $i9 = $i11 << 7;

        $i11 = $i11 >>> 25;

        $i9 = $i9 | $i11;

        $i10 = $i9 ^ $i10;

        $i11 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int FF0(int,int,int)>($i4, i5, i6);

        i7 = $i11 + i7;

        i7 = i7 + $i10;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W1>;

        $i10 = $r1[i8];

        $i10 = i7 + $i10;

        i7 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int GG0(int,int,int)>(i1, i3, i0);

        i2 = i7 + i2;

        i2 = i2 + $i9;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i7 = $r1[i8];

        $i9 = i2 + i7;

        i7 = i6;

        i2 = i5 << 9;

        i5 = i5 >>> 23;

        i6 = i2 | i5;

        i5 = $i4;

        $i4 = $i10;

        i2 = i0;

        i0 = i3 << 19;

        i3 = i3 >>> 13;

        i0 = i0 | i3;

        i3 = i1;

        i1 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int P0(int)>($i9);

        i8 = i8 + 1;

        goto label07;

     label08:
        i8 = 16;

     label09:
        if i8 >= 64 goto label10;

        $i9 = $i4 << 12;

        $i10 = $i4 >>> 20;

        $i10 = $i9 | $i10;

        $i9 = $i10 + i1;

        $r1 = <org.spongycastle.crypto.digests.SM3Digest: int[] T>;

        $i11 = $r1[i8];

        $i11 = $i9 + $i11;

        $i9 = $i11 << 7;

        $i11 = $i11 >>> 25;

        $i9 = $i9 | $i11;

        $i10 = $i9 ^ $i10;

        $i11 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int FF1(int,int,int)>($i4, i5, i6);

        i7 = $i11 + i7;

        i7 = i7 + $i10;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W1>;

        $i10 = $r1[i8];

        $i10 = i7 + $i10;

        i7 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int GG1(int,int,int)>(i1, i3, i0);

        i2 = i7 + i2;

        i2 = i2 + $i9;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] W>;

        i7 = $r1[i8];

        $i9 = i2 + i7;

        i7 = i6;

        i2 = i5 << 9;

        i5 = i5 >>> 23;

        i6 = i2 | i5;

        i5 = $i4;

        $i4 = $i10;

        i2 = i0;

        i0 = i3 << 19;

        i3 = i3 >>> 13;

        i0 = i0 | i3;

        i3 = i1;

        i1 = specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: int P0(int)>($i9);

        i8 = i8 + 1;

        goto label09;

     label10:
        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i8 = $r1[0];

        $i4 = i8 ^ $i4;

        $r1[0] = $i4;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i4 = $r1[1];

        $i4 = $i4 ^ i5;

        $r1[1] = $i4;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i4 = $r1[2];

        $i4 = $i4 ^ i6;

        $r1[2] = $i4;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i4 = $r1[3];

        $i4 = $i4 ^ i7;

        $r1[3] = $i4;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $i4 = $r1[4];

        i1 = $i4 ^ i1;

        $r1[4] = i1;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i1 = $r1[5];

        i3 = i1 ^ i3;

        $r1[5] = i3;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i3 = $r1[6];

        i3 = i3 ^ i0;

        $r1[6] = i3;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        i3 = $r1[7];

        i3 = i3 ^ i2;

        $r1[7] = i3;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = 0;

        return;
    }
    protected void processLength(long)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        long $l0, $l3;
        int $i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $l0 := @parameter0: long;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        if $i1 <= 14 goto label1;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $r1[$i1] = 0;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = $i1;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void processBlock()>();

     label1:
        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        if $i1 >= 14 goto label2;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $r1[$i1] = 0;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = $i1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = $i2;

        $l3 = $l0 >>> 32;

        $i2 = (int) $l3;

        $r1[$i1] = $i2;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = $i2;

        $i2 = (int) $l0;

        $r1[$i1] = $i2;

        return;
    }
    protected void processWord(byte[], int)
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        byte[] $r1;
        int i0, $i2, $i3;
        byte $b1;
        int[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = $r1[i0];

        $i2 = $b1 & 255;

        $i2 = $i2 << 24;

        i0 = i0 + 1;

        $b1 = $r1[i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        i0 = i0 + 1;

        $b1 = $r1[i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        i0 = i0 + 1;

        $b1 = $r1[i0];

        i0 = $b1 & 255;

        i0 = $i2 | i0;

        $r2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] inwords>;

        $i2 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        $r2[$i2] = i0;

        i0 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        i0 = i0 + 1;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = i0;

        i0 = r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff>;

        if i0 < 16 goto label1;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void processBlock()>();

     label1:
        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.digests.SM3Digest r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        specialinvoke r0.<org.spongycastle.crypto.digests.GeneralDigest: void reset()>();

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[0] = 1937774191;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[1] = 1226093241;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[2] = 388252375;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[3] = -628488704;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[4] = -1452330820;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[5] = 372324522;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[6] = -477237683;

        $r1 = r0.<org.spongycastle.crypto.digests.SM3Digest: int[] V>;

        $r1[7] = -1325724082;

        r0.<org.spongycastle.crypto.digests.SM3Digest: int xOff> = 0;

        return;
    }
    public void reset(org.spongycastle.util.Memoable)
    {
        org.spongycastle.crypto.digests.SM3Digest r0, r2;
        org.spongycastle.util.Memoable $r1;

        r0 := @this: org.spongycastle.crypto.digests.SM3Digest;

        $r1 := @parameter0: org.spongycastle.util.Memoable;

        r2 = (org.spongycastle.crypto.digests.SM3Digest) $r1;

        specialinvoke r0.<org.spongycastle.crypto.digests.GeneralDigest: void copyIn(org.spongycastle.crypto.digests.GeneralDigest)>(r2);

        specialinvoke r0.<org.spongycastle.crypto.digests.SM3Digest: void copyIn(org.spongycastle.crypto.digests.SM3Digest)>(r2);

        return;
    }
