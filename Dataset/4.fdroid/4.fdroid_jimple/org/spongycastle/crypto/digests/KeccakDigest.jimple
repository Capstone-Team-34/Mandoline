org.spongycastle.crypto.digests.KeccakDigest extends java.lang.Object implements org.spongycastle.crypto.ExtendedDigest
private static int[] KeccakRhoOffsets
private static long[] KeccakRoundConstants
long[] C
protected int bitsAvailableForSqueezing
protected int bitsInQueue
long[] chiC
protected byte[] chunk
protected byte[] dataQueue
protected int fixedOutputLength
protected byte[] oneByte
protected int rate
protected boolean squeezing
protected byte[] state
long[] tempA
    static void <clinit>()
    {
        long[] $r0;
        int[] $r1;

        $r0 = staticinvoke <org.spongycastle.crypto.digests.KeccakDigest: long[] keccakInitializeRoundConstants()>();

        <org.spongycastle.crypto.digests.KeccakDigest: long[] KeccakRoundConstants> = $r0;

        $r1 = staticinvoke <org.spongycastle.crypto.digests.KeccakDigest: int[] keccakInitializeRhoOffsets()>();

        <org.spongycastle.crypto.digests.KeccakDigest: int[] KeccakRhoOffsets> = $r1;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void <init>(int)>(288);

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0;
        byte[] $r1;
        long[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[200];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state> = $r1;

        $r1 = newarray (byte)[192];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue> = $r1;

        $r2 = newarray (long)[5];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C> = $r2;

        $r2 = newarray (long)[25];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] tempA> = $r2;

        $r2 = newarray (long)[5];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] chiC> = $r2;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void init(int)>($i0);

        return;
    }
    public void <init>(org.spongycastle.crypto.digests.KeccakDigest)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0, $r1;
        byte[] $r2, $r4, $r5;
        long[] $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: org.spongycastle.crypto.digests.KeccakDigest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[200];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state> = $r2;

        $r2 = newarray (byte)[192];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue> = $r2;

        $r3 = newarray (long)[5];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C> = $r3;

        $r3 = newarray (long)[25];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] tempA> = $r3;

        $r3 = newarray (long)[5];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] chiC> = $r3;

        $r2 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r5 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, $i0);

        $r2 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $r5 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, $i0);

        $i0 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate> = $i0;

        $i0 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue> = $i0;

        $i0 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength> = $i0;

        $z0 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing> = $z0;

        $i0 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = $i0;

        $r2 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk> = $r2;

        $r2 = $r1.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte> = $r2;

        return;
    }
    private void KeccakAbsorb(byte[], byte[], int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void keccakPermutationAfterXor(byte[],byte[],int)>($r1, $r2, $i0);

        return;
    }
    private void KeccakExtract(byte[], byte[], int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i0 = $i0 * 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }
    private void KeccakExtract1024bits(byte[], byte[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, 128);

        return;
    }
    private static boolean LFSR86540(byte[])
    {
        byte[] $r0;
        byte $b0;
        int $i1;
        boolean z0;

        $r0 := @parameter0: byte[];

        $b0 = $r0[0];

        $i1 = $b0 & 1;

        if $i1 == 0 goto label2;

        z0 = 1;

     label1:
        $b0 = $r0[0];

        $i1 = $b0 & 128;

        if $i1 == 0 goto label3;

        $b0 = $r0[0];

        $i1 = $b0 << 1;

        $i1 = $i1 ^ 113;

        $b0 = (byte) $i1;

        $r0[0] = $b0;

        return z0;

     label2:
        z0 = 0;

        goto label1;

     label3:
        $b0 = $r0[0];

        $i1 = $b0 << 1;

        $b0 = (byte) $i1;

        $r0[0] = $b0;

        return z0;
    }
    private void absorbQueue()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i0 = $i0 / 8;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakAbsorb(byte[],byte[],int)>($r2, $r1, $i0);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue> = 0;

        return;
    }
    private void chi(long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1, $r2;
        int i0, i1, $i2, $i4;
        long $l3, $l5, $l6;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        i0 = 0;

     label1:
        if i0 >= 5 goto label6;

        i1 = 0;

     label2:
        if i1 >= 5 goto label3;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] chiC>;

        $i2 = i0 * 5;

        $i2 = $i2 + i1;

        $l3 = $r1[$i2];

        $i2 = i1 + 1;

        $i2 = $i2 % 5;

        $i4 = i0 * 5;

        $i2 = $i2 + $i4;

        $l5 = $r1[$i2];

        $l5 = $l5 ^ -1L;

        $i2 = i1 + 2;

        $i2 = $i2 % 5;

        $i4 = i0 * 5;

        $i2 = $i2 + $i4;

        $l6 = $r1[$i2];

        $l5 = $l5 & $l6;

        $l3 = $l3 ^ $l5;

        $r2[i1] = $l3;

        i1 = i1 + 1;

        goto label2;

     label3:
        i1 = 0;

     label4:
        if i1 >= 5 goto label5;

        $i2 = i0 * 5;

        $i2 = $i2 + i1;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] chiC>;

        $l3 = $r2[i1];

        $r1[$i2] = $l3;

        i1 = i1 + 1;

        goto label4;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return;
    }
    private void clearDataQueueSection(int, int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0, $i1, i2, $i3;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0;

     label1:
        $i3 = $i0 + $i1;

        if i2 == $i3 goto label2;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $r1[i2] = 0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    private void fromBytesToWords(long[], byte[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1;
        byte[] $r2;
        int i0, i1, i2, $i4;
        long $l3, $l6;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: byte[];

        i1 = 0;

     label1:
        if i1 >= 25 goto label4;

        $r1[i1] = 0L;

        i0 = i1 * 8;

        i2 = 0;

     label2:
        if i2 >= 8 goto label3;

        $l3 = $r1[i1];

        $i4 = i0 + i2;

        $b5 = $r2[$i4];

        $l6 = (long) $b5;

        $l6 = $l6 & 255L;

        $i4 = i2 * 8;

        $l6 = $l6 << $i4;

        $l3 = $l3 | $l6;

        $r1[i1] = $l3;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    private void fromWordsToBytes(byte[], long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1;
        long[] $r2;
        int i0, i1, i2, $i3, $i5;
        long $l4;
        byte $b6;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: long[];

        i1 = 0;

     label1:
        if i1 >= 25 goto label4;

        i0 = i1 * 8;

        i2 = 0;

     label2:
        if i2 >= 8 goto label3;

        $i3 = i0 + i2;

        $l4 = $r2[i1];

        $i5 = i2 * 8;

        $l4 = $l4 >>> $i5;

        $l4 = $l4 & 255L;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $r1[$i3] = $b6;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    private void init(int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 128: goto label3;
            case 224: goto label4;
            case 256: goto label5;
            case 288: goto label2;
            case 384: goto label6;
            case 512: goto label7;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bitLength must be one of 128, 224, 256, 288, 384, or 512.");

        throw $r1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(1024, 576);

        return;

     label3:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(1344, 256);

        return;

     label4:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(1152, 448);

        return;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(1088, 512);

        return;

     label6:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(832, 768);

        return;

     label7:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void initSponge(int,int)>(576, 1024);

        return;
    }
    private void initSponge(int, int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 + $i1;

        if $i2 == 1600 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("rate + capacity != 1600");

        throw $r1;

     label1:
        if $i0 <= 0 goto label2;

        if $i0 >= 1600 goto label2;

        $i2 = $i0 % 64;

        if $i2 == 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("invalid rate value");

        throw $r1;

     label3:
        r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate> = $i0;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue> = 0;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing> = 0;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = 0;

        $i1 = $i1 / 2;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength> = $i1;

        $i0 = $i0 / 8;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk> = $r2;

        $r2 = newarray (byte)[1];

        r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte> = $r2;

        return;
    }
    private void iota(long[], int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1, $r2;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        $l2 = $r1[0];

        $r2 = <org.spongycastle.crypto.digests.KeccakDigest: long[] KeccakRoundConstants>;

        $l1 = $r2[$i0];

        $l1 = $l2 ^ $l1;

        $r1[0] = $l1;

        return;
    }
    private static int[] keccakInitializeRhoOffsets()
    {
        int[] r0;
        int i0, i1, $i2, i3, i4, $i5;

        r0 = newarray (int)[25];

        r0[0] = 0;

        i3 = 1;

        i1 = 0;

        i4 = 0;

     label1:
        if i4 >= 24 goto label2;

        i0 = i3 % 5;

        $i2 = i1 % 5;

        $i2 = $i2 * 5;

        i0 = i0 + $i2;

        $i5 = i4 + 1;

        $i2 = i4 + 2;

        $i2 = $i5 * $i2;

        $i2 = $i2 / 2;

        $i2 = $i2 % 64;

        r0[i0] = $i2;

        $i2 = i1 * 1;

        i0 = 0 + $i2;

        i3 = i3 * 2;

        i1 = i1 * 3;

        i3 = i3 + i1;

        i1 = i3 % 5;

        i3 = i0 % 5;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r0;
    }
    private static long[] keccakInitializeRoundConstants()
    {
        byte[] r0;
        int i0, i1, i2;
        long[] r1;
        boolean $z0;
        long $l3, $l4;

        r1 = newarray (long)[24];

        r0 = newarray (byte)[1];

        r0[0] = 1;

        i1 = 0;

     label1:
        if i1 >= 24 goto label5;

        r1[i1] = 0L;

        i2 = 0;

     label2:
        if i2 >= 7 goto label4;

        i0 = 1 << i2;

        i0 = i0 + -1;

        $z0 = staticinvoke <org.spongycastle.crypto.digests.KeccakDigest: boolean LFSR86540(byte[])>(r0);

        if $z0 == 0 goto label3;

        $l3 = r1[i1];

        $l4 = 1L << i0;

        $l3 = $l3 ^ $l4;

        r1[i1] = $l3;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return r1;
    }
    private void keccakPermutation(byte[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1;
        long[] r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 / 8;

        r2 = newarray (long)[$i0];

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void fromBytesToWords(long[],byte[])>(r2, $r1);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void keccakPermutationOnWords(long[])>(r2);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void fromWordsToBytes(byte[],long[])>($r1, r2);

        return;
    }
    private void keccakPermutationAfterXor(byte[], byte[], int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;
        int $i0, i2, $i4;
        byte $b1, $b3;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $b3 = $r1[i2];

        $b1 = $r2[i2];

        $i4 = $b3 ^ $b1;

        $b1 = (byte) $i4;

        $r1[i2] = $b1;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void keccakPermutation(byte[])>($r1);

        return;
    }
    private void keccakPermutationOnWords(long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1;
        int i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        i0 = 0;

     label1:
        if i0 >= 24 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void theta(long[])>($r1);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void rho(long[])>($r1);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void pi(long[])>($r1);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void chi(long[])>($r1);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void iota(long[],int)>($r1, i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void padAndSwitchToSqueezingPhase()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0, $i1, $i3;
        byte[] $r1, $r2;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i0 = $i0 + 1;

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        if $i0 != $i1 goto label3;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i0 = $i0 / 8;

        $b2 = $r1[$i0];

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i1 = $i1 % 8;

        $i1 = 1 << $i1;

        $i1 = $b2 | $i1;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorbQueue()>();

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i0 = $i0 / 8;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void clearDataQueueSection(int,int)>(0, $i0);

     label1:
        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i0 = $i0 + -1;

        $i0 = $i0 / 8;

        $b2 = $r1[$i0];

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i1 = $i1 + -1;

        $i1 = $i1 % 8;

        $i1 = 1 << $i1;

        $i1 = $b2 | $i1;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorbQueue()>();

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        if $i0 != 1024 goto label4;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakExtract1024bits(byte[],byte[])>($r1, $r2);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = 1024;

     label2:
        r0.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing> = 1;

        return;

     label3:
        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i1 = $i1 / 8;

        $i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i3 = $i3 + 7;

        $i3 = $i3 / 8;

        $i1 = $i1 - $i3;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void clearDataQueueSection(int,int)>($i0, $i1);

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i0 = $i0 / 8;

        $b2 = $r1[$i0];

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i1 = $i1 % 8;

        $i1 = 1 << $i1;

        $i1 = $b2 | $i1;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        goto label1;

     label4:
        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i0 = $i0 / 64;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakExtract(byte[],byte[],int)>($r1, $r2, $i0);

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = $i0;

        goto label2;
    }
    private void pi(long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1, $r2, $r3;
        int $i0, i1, $i2, $i3;
        long $l4;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] tempA>;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] tempA>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        $i0 = 0;

     label1:
        if $i0 >= 5 goto label4;

        i1 = 0;

     label2:
        if i1 >= 5 goto label3;

        $i2 = $i0 * 2;

        $i3 = i1 * 3;

        $i2 = $i2 + $i3;

        $i2 = $i2 % 5;

        $i2 = $i2 * 5;

        $i2 = $i2 + i1;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] tempA>;

        $i3 = i1 * 5;

        $i3 = $i3 + $i0;

        $l4 = $r2[$i3];

        $r1[$i2] = $l4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }
    private void rho(long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1;
        int i0, i1, i2, $i3;
        int[] $r2;
        long $l4, $l5;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        i1 = 0;

     label1:
        if i1 >= 5 goto label6;

        i2 = 0;

     label2:
        if i2 >= 5 goto label5;

        i0 = i2 * 5;

        i0 = i1 + i0;

        $r2 = <org.spongycastle.crypto.digests.KeccakDigest: int[] KeccakRhoOffsets>;

        $i3 = $r2[i0];

        if $i3 == 0 goto label4;

        $l4 = $r1[i0];

        $r2 = <org.spongycastle.crypto.digests.KeccakDigest: int[] KeccakRhoOffsets>;

        $i3 = $r2[i0];

        $l4 = $l4 << $i3;

        $l5 = $r1[i0];

        $r2 = <org.spongycastle.crypto.digests.KeccakDigest: int[] KeccakRhoOffsets>;

        $i3 = $r2[i0];

        $i3 = 64 - $i3;

        $l5 = $l5 >>> $i3;

        $l4 = $l4 ^ $l5;

     label3:
        $r1[i0] = $l4;

        i2 = i2 + 1;

        goto label2;

     label4:
        $l4 = $r1[i0];

        goto label3;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }
    private void theta(long[])
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        long[] $r1, $r2;
        long l0, $l4;
        int i1, i2, $i3;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: long[];

        i1 = 0;

     label1:
        if i1 >= 5 goto label4;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C>;

        $r2[i1] = 0L;

        i2 = 0;

     label2:
        if i2 >= 5 goto label3;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C>;

        l0 = $r2[i1];

        $i3 = i2 * 5;

        $i3 = $i3 + i1;

        $l4 = $r1[$i3];

        l0 = l0 ^ $l4;

        $r2[i1] = l0;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        i1 = 0;

     label5:
        if i1 >= 5 goto label8;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C>;

        i2 = i1 + 1;

        i2 = i2 % 5;

        l0 = $r2[i2];

        l0 = l0 << 1;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C>;

        i2 = i1 + 1;

        i2 = i2 % 5;

        $l4 = $r2[i2];

        $l4 = $l4 >>> 63;

        l0 = l0 ^ $l4;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: long[] C>;

        i2 = i1 + 4;

        i2 = i2 % 5;

        $l4 = $r2[i2];

        l0 = l0 ^ $l4;

        i2 = 0;

     label6:
        if i2 >= 5 goto label7;

        $i3 = i2 * 5;

        $i3 = $i3 + i1;

        $l4 = $r1[$i3];

        $l4 = $l4 ^ l0;

        $r1[$i3] = $l4;

        i2 = i2 + 1;

        goto label6;

     label7:
        i1 = i1 + 1;

        goto label5;

     label8:
        return;
    }
    protected void absorb(byte[], int, long)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r3, $r4, $r5;
        int $i0, i2, i3, $i10, $i11, $i12;
        long $l1, l4, l5, $l7, $l8, $l9;
        java.lang.IllegalStateException $r2;
        boolean $z0;
        byte $b6;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        i3 = i3 % 8;

        if i3 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to absorb with odd length queue.");

        throw $r2;

     label1:
        $z0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to absorb while squeezing.");

        throw $r2;

     label2:
        l5 = 0L;

     label3:
        $b6 = l5 cmp $l1;

        if $b6 >= 0 goto label9;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        if i3 != 0 goto label6;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        l4 = (long) i3;

        $b6 = $l1 cmp l4;

        if $b6 < 0 goto label6;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        l4 = (long) i3;

        l4 = $l1 - l4;

        $b6 = l5 cmp l4;

        if $b6 > 0 goto label6;

        l4 = $l1 - l5;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $l7 = (long) i3;

        l4 = l4 / $l7;

        $l7 = 0L;

     label4:
        $b6 = $l7 cmp l4;

        if $b6 >= 0 goto label5;

        $l8 = (long) $i0;

        $l9 = l5 / 8L;

        $l8 = $l8 + $l9;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        i3 = lengthof $r3;

        $l9 = (long) i3;

        $l9 = $l9 * $l7;

        $l8 = $l8 + $l9;

        i3 = (int) $l8;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i3, $r3, 0, i2);

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        $r5 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] chunk>;

        i3 = lengthof $r5;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakAbsorb(byte[],byte[],int)>($r3, $r4, i3);

        $l7 = $l7 + 1L;

        goto label4;

     label5:
        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $l7 = (long) i3;

        l4 = $l7 * l4;

        l5 = l5 + l4;

        goto label3;

     label6:
        l4 = $l1 - l5;

        i2 = (int) l4;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        i3 = i3 + i2;

        $i10 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        if i3 <= $i10 goto label7;

        i3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        i2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        i2 = i3 - i2;

     label7:
        i3 = i2 % 8;

        i2 = i2 - i3;

        l4 = l5 / 8L;

        $i10 = (int) l4;

        $i10 = $i10 + $i0;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i11 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i11 = $i11 / 8;

        $i12 = i2 / 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i10, $r3, $i11, $i12);

        $i10 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i10 = $i10 + i2;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue> = $i10;

        l4 = (long) i2;

        l5 = l5 + l4;

        i2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i10 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        if i2 != $i10 goto label8;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorbQueue()>();

     label8:
        if i3 <= 0 goto label3;

        i2 = 1 << i3;

        i2 = i2 + -1;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i10 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        $i10 = $i10 / 8;

        l4 = l5 / 8L;

        $i11 = (int) l4;

        $i11 = $i11 + $i0;

        $b6 = $r1[$i11];

        i2 = $b6 & i2;

        $b6 = (byte) i2;

        $r3[$i10] = $b6;

        i2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue>;

        i2 = i2 + i3;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsInQueue> = i2;

        l4 = (long) i3;

        l5 = l5 + l4;

        goto label3;

     label9:
        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        $l2 = (long) $i1;

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void squeeze(byte[],int,long)>($r1, $i0, $l2);

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void reset()>();

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: int getDigestSize()>();

        return $i0;
    }
    protected int doFinal(byte[], int, byte, int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r2;
        int $i0, $i2;
        byte $b1;
        long $l3;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 := @parameter2: byte;

        $i2 := @parameter3: int;

        if $i2 <= 0 goto label1;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte>;

        $r2[0] = $b1;

        $r2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte>;

        $l3 = (long) $i2;

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorb(byte[],int,long)>($r2, 0, $l3);

     label1:
        $i2 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        $l3 = (long) $i2;

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void squeeze(byte[],int,long)>($r1, $i0, $l3);

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void reset()>();

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: int getDigestSize()>();

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keccak-");

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int getByteLength()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i0 = $i0 / 8;

        return $i0;
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        $i0 = $i0 / 8;

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $i0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int fixedOutputLength>;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void init(int)>($i0);

        return;
    }
    protected void squeeze(byte[], int, long)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1, $r3, $r4;
        int $i0, $i4, $i7, $i8, $i9;
        long $l1, $l2, $l5, $l6;
        boolean $z0;
        byte $b3;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $z0 = r0.<org.spongycastle.crypto.digests.KeccakDigest: boolean squeezing>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void padAndSwitchToSqueezingPhase()>();

     label1:
        $l2 = $l1 % 8L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("outputLength not a multiple of 8");

        throw $r2;

     label2:
        $l2 = 0L;

     label3:
        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label7;

        $i4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing>;

        if $i4 != 0 goto label4;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void keccakPermutation(byte[])>($r3);

        $i4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        if $i4 != 1024 goto label6;

        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakExtract1024bits(byte[],byte[])>($r3, $r4);

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = 1024;

     label4:
        $i4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing>;

        $l5 = (long) $i4;

        $l6 = $l1 - $l2;

        $b3 = $l5 cmp $l6;

        if $b3 <= 0 goto label5;

        $l5 = $l1 - $l2;

        $i4 = (int) $l5;

     label5:
        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i7 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i8 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing>;

        $i7 = $i7 - $i8;

        $i7 = $i7 / 8;

        $l5 = $l2 / 8L;

        $i8 = (int) $l5;

        $i8 = $i8 + $i0;

        $i9 = $i4 / 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i7, $r1, $i8, $i9);

        $i7 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing>;

        $i7 = $i7 - $i4;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = $i7;

        $l5 = (long) $i4;

        $l2 = $l2 + $l5;

        goto label3;

     label6:
        $r3 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] state>;

        $r4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] dataQueue>;

        $i4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        $i4 = $i4 / 64;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void KeccakExtract(byte[],byte[],int)>($r3, $r4, $i4);

        $i4 = r0.<org.spongycastle.crypto.digests.KeccakDigest: int rate>;

        r0.<org.spongycastle.crypto.digests.KeccakDigest: int bitsAvailableForSqueezing> = $i4;

        goto label4;

     label7:
        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte $b0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte>;

        $r1[0] = $b0;

        $r1 = r0.<org.spongycastle.crypto.digests.KeccakDigest: byte[] oneByte>;

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorb(byte[],int,long)>($r1, 0, 8L);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.digests.KeccakDigest r0;
        byte[] $r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.spongycastle.crypto.digests.KeccakDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 = (long) $i1;

        $l2 = $l2 * 8L;

        virtualinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void absorb(byte[],int,long)>($r1, $i0, $l2);

        return;
    }
