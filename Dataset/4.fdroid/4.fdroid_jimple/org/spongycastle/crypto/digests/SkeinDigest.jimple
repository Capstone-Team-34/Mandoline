org.spongycastle.crypto.digests.SkeinDigest extends java.lang.Object implements org.spongycastle.crypto.ExtendedDigest org.spongycastle.util.Memoable
public static final int SKEIN_1024
public static final int SKEIN_256
public static final int SKEIN_512
private org.spongycastle.crypto.digests.SkeinEngine engine
    public void <init>(int, int)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        int $i0, $i1;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.digests.SkeinEngine;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(int,int)>($i0, $i1);

        r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine> = $r1;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SkeinDigest: void init(org.spongycastle.crypto.params.SkeinParameters)>(null);

        return;
    }
    public void <init>(org.spongycastle.crypto.digests.SkeinDigest)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0, $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2, $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SkeinDigest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.digests.SkeinEngine;

        $r3 = $r1.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(org.spongycastle.crypto.digests.SkeinEngine)>($r3);

        r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine> = $r2;

        return;
    }
    public org.spongycastle.util.Memoable copy()
    {
        org.spongycastle.crypto.digests.SkeinDigest r0, $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 = new org.spongycastle.crypto.digests.SkeinDigest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SkeinDigest: void <init>(org.spongycastle.crypto.digests.SkeinDigest)>(r0);

        return $r1;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine $r2;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int doFinal(byte[],int)>($r1, $i0);

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skein-");

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getByteLength()
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        return $i0;
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        return $i0;
    }
    public void init(org.spongycastle.crypto.params.SkeinParameters)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        org.spongycastle.crypto.params.SkeinParameters $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 := @parameter0: org.spongycastle.crypto.params.SkeinParameters;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void init(org.spongycastle.crypto.params.SkeinParameters)>($r1);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void reset()>();

        return;
    }
    public void reset(org.spongycastle.util.Memoable)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0, r4;
        org.spongycastle.util.Memoable $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2, $r3;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 := @parameter0: org.spongycastle.util.Memoable;

        r4 = (org.spongycastle.crypto.digests.SkeinDigest) $r1;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $r3 = r4.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void reset(org.spongycastle.util.Memoable)>($r3);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        byte $b0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.digests.SkeinDigest r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.digests.SkeinEngine $r2;

        r0 := @this: org.spongycastle.crypto.digests.SkeinDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.digests.SkeinDigest: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
