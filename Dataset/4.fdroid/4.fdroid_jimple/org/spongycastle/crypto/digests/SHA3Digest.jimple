org.spongycastle.crypto.digests.SHA3Digest extends org.spongycastle.crypto.digests.KeccakDigest
    public void <init>()
    {
        org.spongycastle.crypto.digests.SHA3Digest r0;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        specialinvoke r0.<org.spongycastle.crypto.digests.SHA3Digest: void <init>(int)>(256);

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.crypto.digests.SHA3Digest r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.spongycastle.crypto.digests.SHA3Digest: int checkBitLength(int)>($i0);

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void <init>(int)>($i0);

        return;
    }
    public void <init>(org.spongycastle.crypto.digests.SHA3Digest)
    {
        org.spongycastle.crypto.digests.SHA3Digest r0, $r1;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        $r1 := @parameter0: org.spongycastle.crypto.digests.SHA3Digest;

        specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: void <init>(org.spongycastle.crypto.digests.KeccakDigest)>($r1);

        return;
    }
    private static int checkBitLength(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 224: goto label2;
            case 256: goto label2;
            case 384: goto label2;
            case 512: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'bitLength\' ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported for SHA-3");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        return $i0;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.SHA3Digest r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = newarray (byte)[1];

        $r2[0] = 2;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SHA3Digest: void absorb(byte[],int,long)>($r2, 0, 2L);

        $i0 = specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: int doFinal(byte[],int)>($r1, $i0);

        return $i0;
    }
    protected int doFinal(byte[], int, byte, int)
    {
        org.spongycastle.crypto.digests.SHA3Digest r0;
        byte[] $r1, $r3;
        int $i0, $i2, $i3, $i4;
        byte $b1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 := @parameter2: byte;

        $i2 := @parameter3: int;

        if $i2 < 0 goto label1;

        if $i2 <= 7 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'partialBits\' must be in the range [0,7]");

        throw $r2;

     label2:
        $i3 = 1 << $i2;

        $i3 = $i3 + -1;

        $i3 = $i3 & $b1;

        $i4 = 2 << $i2;

        $i3 = $i3 | $i4;

        $i2 = $i2 + 2;

        if $i2 < 8 goto label3;

        $r3 = r0.<org.spongycastle.crypto.digests.SHA3Digest: byte[] oneByte>;

        $b1 = (byte) $i3;

        $r3[0] = $b1;

        $r3 = r0.<org.spongycastle.crypto.digests.SHA3Digest: byte[] oneByte>;

        virtualinvoke r0.<org.spongycastle.crypto.digests.SHA3Digest: void absorb(byte[],int,long)>($r3, 0, 8L);

        $i2 = $i2 + -8;

        $i3 = $i3 >>> 8;

     label3:
        $b1 = (byte) $i3;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.digests.KeccakDigest: int doFinal(byte[],int,byte,int)>($r1, $i0, $b1, $i2);

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.digests.SHA3Digest r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.digests.SHA3Digest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SHA3-");

        $i0 = r0.<org.spongycastle.crypto.digests.SHA3Digest: int fixedOutputLength>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
