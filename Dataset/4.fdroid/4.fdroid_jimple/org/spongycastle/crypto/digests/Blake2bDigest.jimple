org.spongycastle.crypto.digests.Blake2bDigest extends java.lang.Object implements org.spongycastle.crypto.ExtendedDigest
private static final int BLOCK_LENGTH_BYTES
private static final long[] blake2b_IV
private static final byte[][] blake2b_sigma
private static int rOUNDS
private byte[] buffer
private int bufferPos
private long[] chainValue
private int digestLength
private long f0
private long[] internalState
private byte[] key
private int keyLength
private byte[] personalization
private byte[] salt
private long t0
private long t1
    static void <clinit>()
    {
        long[] $r0;
        byte[][] $r1;
        byte[] $r2;

        $r0 = newarray (long)[8];

        $r0[0] = 7640891576956012808L;

        $r0[1] = -4942790177534073029L;

        $r0[2] = 4354685564936845355L;

        $r0[3] = -6534734903238641935L;

        $r0[4] = 5840696475078001361L;

        $r0[5] = -7276294671716946913L;

        $r0[6] = 2270897969802886507L;

        $r0[7] = 6620516959819538809L;

        <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV> = $r0;

        $r1 = newarray (byte[])[12];

        $r2 = newarray (byte)[16];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 2;

        $r2[3] = 3;

        $r2[4] = 4;

        $r2[5] = 5;

        $r2[6] = 6;

        $r2[7] = 7;

        $r2[8] = 8;

        $r2[9] = 9;

        $r2[10] = 10;

        $r2[11] = 11;

        $r2[12] = 12;

        $r2[13] = 13;

        $r2[14] = 14;

        $r2[15] = 15;

        $r1[0] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 14;

        $r2[1] = 10;

        $r2[2] = 4;

        $r2[3] = 8;

        $r2[4] = 9;

        $r2[5] = 15;

        $r2[6] = 13;

        $r2[7] = 6;

        $r2[8] = 1;

        $r2[9] = 12;

        $r2[10] = 0;

        $r2[11] = 2;

        $r2[12] = 11;

        $r2[13] = 7;

        $r2[14] = 5;

        $r2[15] = 3;

        $r1[1] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 11;

        $r2[1] = 8;

        $r2[2] = 12;

        $r2[3] = 0;

        $r2[4] = 5;

        $r2[5] = 2;

        $r2[6] = 15;

        $r2[7] = 13;

        $r2[8] = 10;

        $r2[9] = 14;

        $r2[10] = 3;

        $r2[11] = 6;

        $r2[12] = 7;

        $r2[13] = 1;

        $r2[14] = 9;

        $r2[15] = 4;

        $r1[2] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 7;

        $r2[1] = 9;

        $r2[2] = 3;

        $r2[3] = 1;

        $r2[4] = 13;

        $r2[5] = 12;

        $r2[6] = 11;

        $r2[7] = 14;

        $r2[8] = 2;

        $r2[9] = 6;

        $r2[10] = 5;

        $r2[11] = 10;

        $r2[12] = 4;

        $r2[13] = 0;

        $r2[14] = 15;

        $r2[15] = 8;

        $r1[3] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 9;

        $r2[1] = 0;

        $r2[2] = 5;

        $r2[3] = 7;

        $r2[4] = 2;

        $r2[5] = 4;

        $r2[6] = 10;

        $r2[7] = 15;

        $r2[8] = 14;

        $r2[9] = 1;

        $r2[10] = 11;

        $r2[11] = 12;

        $r2[12] = 6;

        $r2[13] = 8;

        $r2[14] = 3;

        $r2[15] = 13;

        $r1[4] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 2;

        $r2[1] = 12;

        $r2[2] = 6;

        $r2[3] = 10;

        $r2[4] = 0;

        $r2[5] = 11;

        $r2[6] = 8;

        $r2[7] = 3;

        $r2[8] = 4;

        $r2[9] = 13;

        $r2[10] = 7;

        $r2[11] = 5;

        $r2[12] = 15;

        $r2[13] = 14;

        $r2[14] = 1;

        $r2[15] = 9;

        $r1[5] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 12;

        $r2[1] = 5;

        $r2[2] = 1;

        $r2[3] = 15;

        $r2[4] = 14;

        $r2[5] = 13;

        $r2[6] = 4;

        $r2[7] = 10;

        $r2[8] = 0;

        $r2[9] = 7;

        $r2[10] = 6;

        $r2[11] = 3;

        $r2[12] = 9;

        $r2[13] = 2;

        $r2[14] = 8;

        $r2[15] = 11;

        $r1[6] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 13;

        $r2[1] = 11;

        $r2[2] = 7;

        $r2[3] = 14;

        $r2[4] = 12;

        $r2[5] = 1;

        $r2[6] = 3;

        $r2[7] = 9;

        $r2[8] = 5;

        $r2[9] = 0;

        $r2[10] = 15;

        $r2[11] = 4;

        $r2[12] = 8;

        $r2[13] = 6;

        $r2[14] = 2;

        $r2[15] = 10;

        $r1[7] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 6;

        $r2[1] = 15;

        $r2[2] = 14;

        $r2[3] = 9;

        $r2[4] = 11;

        $r2[5] = 3;

        $r2[6] = 0;

        $r2[7] = 8;

        $r2[8] = 12;

        $r2[9] = 2;

        $r2[10] = 13;

        $r2[11] = 7;

        $r2[12] = 1;

        $r2[13] = 4;

        $r2[14] = 10;

        $r2[15] = 5;

        $r1[8] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 10;

        $r2[1] = 2;

        $r2[2] = 8;

        $r2[3] = 4;

        $r2[4] = 7;

        $r2[5] = 6;

        $r2[6] = 1;

        $r2[7] = 5;

        $r2[8] = 15;

        $r2[9] = 11;

        $r2[10] = 9;

        $r2[11] = 14;

        $r2[12] = 3;

        $r2[13] = 12;

        $r2[14] = 13;

        $r2[15] = 0;

        $r1[9] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 2;

        $r2[3] = 3;

        $r2[4] = 4;

        $r2[5] = 5;

        $r2[6] = 6;

        $r2[7] = 7;

        $r2[8] = 8;

        $r2[9] = 9;

        $r2[10] = 10;

        $r2[11] = 11;

        $r2[12] = 12;

        $r2[13] = 13;

        $r2[14] = 14;

        $r2[15] = 15;

        $r1[10] = $r2;

        $r2 = newarray (byte)[16];

        $r2[0] = 14;

        $r2[1] = 10;

        $r2[2] = 4;

        $r2[3] = 8;

        $r2[4] = 9;

        $r2[5] = 15;

        $r2[6] = 13;

        $r2[7] = 6;

        $r2[8] = 1;

        $r2[9] = 12;

        $r2[10] = 0;

        $r2[11] = 2;

        $r2[12] = 11;

        $r2[13] = 7;

        $r2[14] = 5;

        $r2[15] = 3;

        $r1[11] = $r2;

        <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma> = $r1;

        <org.spongycastle.crypto.digests.Blake2bDigest: int rOUNDS> = 12;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = 64;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = 0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 0;

        $r1 = newarray (long)[16];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState> = $r1;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0> = 0L;

        $r2 = newarray (byte)[128];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = $r2;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = 0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = 64;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void init()>();

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1, $r3;
        long[] $r2;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = 64;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = 0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 0;

        $r2 = newarray (long)[16];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState> = $r2;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0> = 0L;

        $r3 = newarray (byte)[128];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = $r3;

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key> = $r3;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        $i0 = lengthof $r1;

        if $i0 <= 64 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keys > 64 are not supported");

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = $i0;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 128;

     label2:
        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = 64;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void init()>();

        return;
    }
    public void <init>(byte[], int, byte[], byte[])
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1, $r2, $r3, $r5;
        int $i0, $i1;
        long[] $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = 64;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = 0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 0;

        $r4 = newarray (long)[16];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState> = $r4;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue> = null;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0> = 0L;

        $r5 = newarray (byte)[128];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer> = $r5;

        if $i0 < 1 goto label1;

        $i1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength>;

        if $i1 <= 64 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid digest length (required: 1 - 64)");

        throw $r6;

     label2:
        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength> = $i0;

        if $r2 == null goto label4;

        $i0 = lengthof $r2;

        if $i0 == 16 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("salt length must be exactly 16 bytes");

        throw $r6;

     label3:
        $r5 = newarray (byte)[16];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt> = $r5;

        $r5 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r5, 0, $i0);

     label4:
        if $r3 == null goto label6;

        $i0 = lengthof $r3;

        if $i0 == 16 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("personalization length must be exactly 16 bytes");

        throw $r6;

     label5:
        $r2 = newarray (byte)[16];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization> = $r2;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

     label6:
        if $r1 == null goto label8;

        $i0 = lengthof $r1;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key> = $r2;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        $i0 = lengthof $r1;

        if $i0 <= 64 goto label7;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keys > 64 are not supported");

        throw $r6;

     label7:
        $i0 = lengthof $r1;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength> = $i0;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 128;

     label8:
        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void init()>();

        return;
    }
    private void G(long, long, int, int, int, int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long $l0, $l1, $l6, $l7;
        int $i2, $i3, $i4, $i5;
        long[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l6 = $r2[$i2];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l7 = $r2[$i3];

        $l6 = $l6 + $l7;

        $l0 = $l6 + $l0;

        $r1[$i2] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i5];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l6 = $r2[$i2];

        $l0 = $l0 ^ $l6;

        $l0 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long rotr64(long,int)>($l0, 32);

        $r1[$i5] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i4];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l6 = $r2[$i5];

        $l0 = $l0 + $l6;

        $r1[$i4] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i3];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l6 = $r2[$i4];

        $l0 = $l0 ^ $l6;

        $l0 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long rotr64(long,int)>($l0, 24);

        $r1[$i3] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i2];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l6 = $r2[$i3];

        $l0 = $l0 + $l6;

        $l0 = $l0 + $l1;

        $r1[$i2] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i5];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = $r2[$i2];

        $l0 = $l0 ^ $l1;

        $l0 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long rotr64(long,int)>($l0, 16);

        $r1[$i5] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i4];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = $r2[$i5];

        $l0 = $l0 + $l1;

        $r1[$i4] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l0 = $r2[$i3];

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = $r2[$i4];

        $l0 = $l0 ^ $l1;

        $l0 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long rotr64(long,int)>($l0, 63);

        $r1[$i3] = $l0;

        return;
    }
    private final long bytes2long(byte[], int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1;
        int $i0, $i3;
        byte $b1;
        long $l2, $l4;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r1[$i0];

        $l2 = (long) $b1;

        $l2 = $l2 & 255L;

        $i3 = $i0 + 1;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 8;

        $l2 = $l2 | $l4;

        $i3 = $i0 + 2;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 16;

        $l2 = $l2 | $l4;

        $i3 = $i0 + 3;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 24;

        $l2 = $l2 | $l4;

        $i3 = $i0 + 4;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 32;

        $l2 = $l2 | $l4;

        $i3 = $i0 + 5;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 40;

        $l2 = $l2 | $l4;

        $i3 = $i0 + 6;

        $b1 = $r1[$i3];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 48;

        $l2 = $l2 | $l4;

        $i0 = $i0 + 7;

        $b1 = $r1[$i0];

        $l4 = (long) $b1;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 56;

        $l2 = $l2 | $l4;

        return $l2;
    }
    private void compress(byte[], int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1;
        int $i0, $i1, $i3;
        long[] r2, $r4;
        long $l2, $l5;
        byte[][] $r3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void initializeInternalState()>();

        r2 = newarray (long)[16];

        $i1 = 0;

     label1:
        if $i1 >= 16 goto label2;

        $i3 = $i1 * 8;

        $i3 = $i3 + $i0;

        $l2 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long bytes2long(byte[],int)>($r1, $i3);

        r2[$i1] = $l2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = <org.spongycastle.crypto.digests.Blake2bDigest: int rOUNDS>;

        if $i0 >= $i1 goto label4;

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[0];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[1];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 0, 4, 8, 12);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[2];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[3];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 1, 5, 9, 13);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[4];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[5];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 2, 6, 10, 14);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[6];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[7];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 3, 7, 11, 15);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[8];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[9];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 0, 5, 10, 15);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[10];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[11];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 1, 6, 11, 12);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[12];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[13];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 2, 7, 8, 13);

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[14];

        $l2 = r2[$b4];

        $r3 = <org.spongycastle.crypto.digests.Blake2bDigest: byte[][] blake2b_sigma>;

        $r1 = $r3[$i0];

        $b4 = $r1[15];

        $l5 = r2[$b4];

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void G(long,long,int,int,int,int)>($l2, $l5, 3, 4, 9, 14);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $i1 = lengthof r2;

        if $i0 >= $i1 goto label6;

        r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l2 = $r4[$i0];

        $r4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l5 = $r4[$i0];

        $l2 = $l2 ^ $l5;

        $r4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $i1 = $i0 + 8;

        $l5 = $r4[$i1];

        $l2 = $l2 ^ $l5;

        r2[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        return;
    }
    private void init()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long[] $r1, $r2;
        long $l0, $l3;
        int $i1, $i2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        if $r1 != null goto label2;

        $r1 = newarray (long)[8];

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue> = $r1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[0];

        $i1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength>;

        $i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int keyLength>;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        $i1 = $i1 | 16842752;

        $l3 = (long) $i1;

        $l0 = $l0 ^ $l3;

        $r1[0] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[1];

        $r1[1] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[2];

        $r1[2] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[3];

        $r1[3] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[4];

        $r1[4] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[5];

        $r1[5] = $l0;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        if $r3 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l0 = $r1[4];

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long bytes2long(byte[],int)>($r3, 0);

        $l0 = $l0 ^ $l3;

        $r1[4] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l0 = $r1[5];

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long bytes2long(byte[],int)>($r3, 8);

        $l0 = $l0 ^ $l3;

        $r1[5] = $l0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[6];

        $r1[6] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l0 = $r2[7];

        $r1[7] = $l0;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization>;

        if $r3 == null goto label2;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l0 = $r1[6];

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization>;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long bytes2long(byte[],int)>($r3, 0);

        $l0 = $l0 ^ $l3;

        $r1[6] = $l0;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l0 = $r1[7];

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] personalization>;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: long bytes2long(byte[],int)>($r3, 8);

        $l0 = $l0 ^ $l3;

        $r1[7] = $l0;

     label2:
        return;
    }
    private void initializeInternalState()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long[] $r1, $r2, $r3;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        $r1 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i0, 4);

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l2 = $r2[4];

        $l1 = $l1 ^ $l2;

        $r1[12] = $l1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l2 = $r2[5];

        $l1 = $l1 ^ $l2;

        $r1[13] = $l1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l2 = $r2[6];

        $l1 = $l1 ^ $l2;

        $r1[14] = $l1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        $r2 = <org.spongycastle.crypto.digests.Blake2bDigest: long[] blake2b_IV>;

        $l1 = $r2[7];

        $r1[15] = $l1;

        return;
    }
    private final byte[] long2bytes(long)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long $l0, $l3;
        byte[] $r1;
        int $i1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $l0 := @parameter0: long;

        $r1 = newarray (byte)[8];

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $l3 = $l0 >> 8;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[1] = $b2;

        $l3 = $l0 >> 16;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[2] = $b2;

        $l3 = $l0 >> 24;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[3] = $b2;

        $l3 = $l0 >> 32;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[4] = $b2;

        $l3 = $l0 >> 40;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[5] = $b2;

        $l3 = $l0 >> 48;

        $i1 = (int) $l3;

        $b2 = (byte) $i1;

        $r1[6] = $b2;

        $l0 = $l0 >> 56;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        $r1[7] = $b2;

        return $r1;
    }
    private long rotr64(long, int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = $l0 >>> $i1;

        $i1 = 64 - $i1;

        $l0 = $l0 << $i1;

        $l0 = $l2 | $l0;

        return $l0;
    }
    public void clearKey()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

     label1:
        return;
    }
    public void clearSalt()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] salt>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

     label1:
        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1, $r2;
        int $i0, $i2, $i5;
        long $l1, $l3;
        byte $b4;
        long[] $r3;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0> = -1L;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $l3 = (long) $i2;

        $l1 = $l1 + $l3;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = $l1;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $b4 = $l1 cmp 0L;

        if $b4 >= 0 goto label1;

        $i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $l1 = (long) $i2;

        $l3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $l3 = neg $l3;

        $b4 = $l1 cmp $l3;

        if $b4 <= 0 goto label1;

        $l1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1>;

        $l1 = $l1 + 1L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = $l1;

     label1:
        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void compress(byte[],int)>($r2, 0);

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] internalState>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(long[],long)>($r3, 0L);

        $i2 = 0;

     label2:
        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $i5 = lengthof $r3;

        if $i2 >= $i5 goto label3;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        $l1 = $r3[$i2];

        $r2 = specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] long2bytes(long)>($l1);

        $i5 = $i2 * 8;

        $i5 = $i5 + $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i5, 8);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(long[],long)>($r3, 0L);

        virtualinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength>;

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        return "Blake2b";
    }
    public int getByteLength()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        return 128;
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        i0 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int digestLength>;

        return i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long f0> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = 0L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long[] chainValue> = null;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        if $r1 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        $r3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] key>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 128;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void init()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte $b0, $b3;
        int $i1;
        long $l2;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $i1 = 128 - $i1;

        if $i1 != 0 goto label2;

        $l2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $l2 = $l2 + 128L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = $l2;

        $l2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $l2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1>;

        $l2 = $l2 + 1L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = $l2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void compress(byte[],int)>($r1, 0);

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        $r1[0] = $b0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 1;

        return;

     label2:
        $r1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        $i1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $r1[$i1] = $b0;

        $i1 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = $i1;

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.digests.Blake2bDigest r0;
        byte[] $r1, $r2;
        int $i0, $i1, i2, i3;
        long $l4;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.digests.Blake2bDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 == null goto label8;

        if $i1 != 0 goto label1;

        return;

     label1:
        i3 = 0;

        i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        if i2 == 0 goto label3;

        i3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        i3 = 128 - i3;

        if i3 >= $i1 goto label6;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, i2, i3);

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $l4 = $l4 + 128L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = $l4;

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label2;

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1>;

        $l4 = $l4 + 1L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = $l4;

     label2:
        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void compress(byte[],int)>($r2, 0);

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = 0;

        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

     label3:
        i2 = $i0 + $i1;

        i2 = i2 + -128;

        i3 = $i0 + i3;

     label4:
        if i3 >= i2 goto label7;

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $l4 = $l4 + 128L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0> = $l4;

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t0>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label5;

        $l4 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1>;

        $l4 = $l4 + 1L;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: long t1> = $l4;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.digests.Blake2bDigest: void compress(byte[],int)>($r1, i3);

        i3 = i3 + 128;

        goto label4;

     label6:
        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        i3 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, i3, $i1);

        $i0 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = $i0;

        return;

     label7:
        $r2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: byte[] buffer>;

        i2 = $i0 + $i1;

        i2 = i2 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i3, $r2, 0, i2);

        i2 = r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos>;

        $i0 = $i0 + $i1;

        $i0 = $i0 - i3;

        $i0 = i2 + $i0;

        r0.<org.spongycastle.crypto.digests.Blake2bDigest: int bufferPos> = $i0;

     label8:
        return;
    }
