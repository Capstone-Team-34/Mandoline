org.spongycastle.crypto.kems.RSAKeyEncapsulation extends java.lang.Object implements org.spongycastle.crypto.KeyEncapsulation
private static final java.math.BigInteger ONE
private static final java.math.BigInteger ZERO
private org.spongycastle.crypto.DerivationFunction kdf
private org.spongycastle.crypto.params.RSAKeyParameters key
private java.security.SecureRandom rnd
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.DerivationFunction, java.security.SecureRandom)
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        org.spongycastle.crypto.DerivationFunction $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationFunction;

        $r2 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf> = $r1;

        r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.security.SecureRandom rnd> = $r2;

        return;
    }
    public org.spongycastle.crypto.CipherParameters decrypt(byte[], int)
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.CipherParameters $r2;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r1;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.CipherParameters decrypt(byte[],int,int,int)>($r1, 0, $i1, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.CipherParameters decrypt(byte[], int, int, int) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2;
        java.math.BigInteger r3, $r6, $r7;
        org.spongycastle.crypto.params.RSAKeyParameters $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        org.spongycastle.crypto.params.KeyParameter $r8;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r4 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.params.RSAKeyParameters: boolean isPrivate()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Private key required for decryption");

        throw $r5;

     label1:
        $r4 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r4 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r7 = virtualinvoke $r4.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        r2 = newarray (byte)[$i1];

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

        r3 = new java.math.BigInteger;

        specialinvoke r3.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r6);

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.KeyParameter generateKey(java.math.BigInteger,java.math.BigInteger,int)>($r6, r3, $i2);

        return $r8;
    }
    public org.spongycastle.crypto.CipherParameters encrypt(byte[], int)
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.CipherParameters $r2;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.CipherParameters encrypt(byte[],int,int)>($r1, 0, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.CipherParameters encrypt(byte[], int, int) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        byte[] $r1, $r9;
        int $i0, $i1, $i2;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.math.BigInteger $r5, $r6, $r7, $r8;
        org.spongycastle.crypto.params.KeyParameter $r10;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $z0 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: boolean isPrivate()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Public key required for encryption");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r3 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r6 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r7 = <org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.math.BigInteger ZERO>;

        $r8 = <org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

        $r2 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: java.security.SecureRandom rnd>;

        $r7 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r7, $r8, $r2);

        $r6 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r6, $r5);

        $i2 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $i2 = $i2 + 7;

        $i2 = $i2 / 8;

        $r9 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i2, $r6);

        $i2 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r1, $i0, $i2);

        $r10 = virtualinvoke r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.KeyParameter generateKey(java.math.BigInteger,java.math.BigInteger,int)>($r5, $r7, $i1);

        return $r10;
    }
    protected org.spongycastle.crypto.params.KeyParameter generateKey(java.math.BigInteger, java.math.BigInteger, int)
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        java.math.BigInteger $r1, $r2;
        int $i0, $i1;
        byte[] r3;
        org.spongycastle.crypto.DerivationFunction $r4;
        org.spongycastle.crypto.params.KDFParameters $r5;
        org.spongycastle.crypto.params.KeyParameter $r6;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        r3 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i1, $r2);

        $r4 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf>;

        $r5 = new org.spongycastle.crypto.params.KDFParameters;

        specialinvoke $r5.<org.spongycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r3, null);

        interfaceinvoke $r4.<org.spongycastle.crypto.DerivationFunction: void init(org.spongycastle.crypto.DerivationParameters)>($r5);

        r3 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf>;

        $i0 = lengthof r3;

        interfaceinvoke $r4.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r3, 0, $i0);

        $r6 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r3);

        return $r6;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.RSAKeyEncapsulation r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.kems.RSAKeyEncapsulation;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.RSAKeyParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RSA key required");

        throw $r2;

     label1:
        $r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        r0.<org.spongycastle.crypto.kems.RSAKeyEncapsulation: org.spongycastle.crypto.params.RSAKeyParameters key> = $r3;

        return;
    }
