org.spongycastle.crypto.kems.ECIESKeyEncapsulation extends java.lang.Object implements org.spongycastle.crypto.KeyEncapsulation
private static final java.math.BigInteger ONE
private boolean CofactorMode
private boolean OldCofactorMode
private boolean SingleHashMode
private org.spongycastle.crypto.DerivationFunction kdf
private org.spongycastle.crypto.params.ECKeyParameters key
private java.security.SecureRandom rnd
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.kems.ECIESKeyEncapsulation: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.DerivationFunction, java.security.SecureRandom)
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        org.spongycastle.crypto.DerivationFunction $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationFunction;

        $r2 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf> = $r1;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: java.security.SecureRandom rnd> = $r2;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean CofactorMode> = 0;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean OldCofactorMode> = 0;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean SingleHashMode> = 0;

        return;
    }
    public void <init>(org.spongycastle.crypto.DerivationFunction, java.security.SecureRandom, boolean, boolean, boolean)
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        org.spongycastle.crypto.DerivationFunction $r1;
        java.security.SecureRandom $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationFunction;

        $r2 := @parameter1: java.security.SecureRandom;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $z2 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf> = $r1;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: java.security.SecureRandom rnd> = $r2;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean CofactorMode> = $z0;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean OldCofactorMode> = $z1;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean SingleHashMode> = $z2;

        return;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public org.spongycastle.crypto.CipherParameters decrypt(byte[], int)
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.CipherParameters $r2;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r1;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.CipherParameters decrypt(byte[],int,int,int)>($r1, 0, $i1, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.CipherParameters decrypt(byte[], int, int, int) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.params.ECKeyParameters $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.crypto.params.ECPrivateKeyParameters r5;
        org.spongycastle.crypto.params.ECDomainParameters $r6;
        org.spongycastle.math.ec.ECCurve $r7;
        java.math.BigInteger $r8, $r9, $r12, r13;
        org.spongycastle.math.ec.ECPoint $r10, r11;
        org.spongycastle.math.ec.ECFieldElement $r14;
        org.spongycastle.crypto.params.KeyParameter $r15;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.ECKeyParameters key>;

        $z0 = $r3 instanceof org.spongycastle.crypto.params.ECPrivateKeyParameters;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Private key required for encryption");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.ECKeyParameters key>;

        r5 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r3;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r8 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r9 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        r2 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

        $r10 = virtualinvoke $r7.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>(r2);

        r11 = $r10;

        $z0 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean CofactorMode>;

        if $z0 != 0 goto label2;

        $z0 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean OldCofactorMode>;

        if $z0 == 0 goto label3;

     label2:
        r11 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r9);

     label3:
        $r12 = virtualinvoke r5.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        r13 = $r12;

        $z0 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean CofactorMode>;

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r8);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

     label4:
        $r10 = virtualinvoke r11.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>(r13);

        $r10 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r14 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r1 = virtualinvoke $r14.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        $r15 = virtualinvoke r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.KeyParameter deriveKey(int,byte[],byte[])>($i2, r2, $r1);

        return $r15;
    }
    protected org.spongycastle.crypto.params.KeyParameter deriveKey(int, byte[], byte[])
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        int $i0;
        byte[] $r1, $r2, r3;
        boolean $z0;
        org.spongycastle.crypto.DerivationFunction $r4;
        org.spongycastle.crypto.params.KDFParameters $r5;
        org.spongycastle.crypto.params.KeyParameter $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        r3 = $r2;

        $z0 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean SingleHashMode>;

        if $z0 == 0 goto label1;

        r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r1, $r2);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

     label1:
        $r4 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf>;

        $r5 = new org.spongycastle.crypto.params.KDFParameters;

        specialinvoke $r5.<org.spongycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>(r3, null);

        interfaceinvoke $r4.<org.spongycastle.crypto.DerivationFunction: void init(org.spongycastle.crypto.DerivationParameters)>($r5);

        $r1 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.DerivationFunction kdf>;

        $i0 = lengthof $r1;

        interfaceinvoke $r4.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>($r1, 0, $i0);

        $r6 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

     label2:
        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r3, 0);

        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r3, 0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public org.spongycastle.crypto.CipherParameters encrypt(byte[], int)
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.CipherParameters $r2;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.CipherParameters encrypt(byte[],int,int)>($r1, 0, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.CipherParameters encrypt(byte[], int, int) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        byte[] $r1, $r15;
        int $i0, $i1, $i2;
        org.spongycastle.math.ec.ECPoint r2, r4;
        org.spongycastle.math.ec.ECPoint[] r3;
        org.spongycastle.crypto.params.ECKeyParameters $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        org.spongycastle.crypto.params.ECPublicKeyParameters r7;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        org.spongycastle.math.ec.ECCurve $r9;
        java.math.BigInteger $r10, $r11, $r12;
        java.security.SecureRandom $r13;
        org.spongycastle.math.ec.ECMultiplier $r14;
        org.spongycastle.math.ec.ECFieldElement $r16;
        org.spongycastle.crypto.params.KeyParameter $r17;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r5 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.ECKeyParameters key>;

        $z0 = $r5 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Public key required for encryption");

        throw $r6;

     label1:
        $r5 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.ECKeyParameters key>;

        r7 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r5;

        $r8 = virtualinvoke r7.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r10 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r11 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $r12 = <org.spongycastle.crypto.kems.ECIESKeyEncapsulation: java.math.BigInteger ONE>;

        $r13 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: java.security.SecureRandom rnd>;

        $r12 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r12, $r10, $r13);

        $z0 = r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: boolean CofactorMode>;

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $r10 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r10);

     label2:
        $r14 = virtualinvoke r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

        r3 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        r2 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        r2 = interfaceinvoke $r14.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>(r2, $r12);

        r3[0] = r2;

        r2 = virtualinvoke r7.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        r2 = virtualinvoke r2.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r10);

        r3[1] = r2;

        virtualinvoke $r9.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r3);

        r2 = r3[0];

        r4 = r3[1];

        $r15 = virtualinvoke r2.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded(boolean)>(0);

        $i2 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r1, $i0, $i2);

        $r16 = virtualinvoke r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r1 = virtualinvoke $r16.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        $r17 = virtualinvoke r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.KeyParameter deriveKey(int,byte[],byte[])>($i1, $r15, $r1);

        return $r17;

     label3:
        $r10 = $r12;

        goto label2;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.kems.ECIESKeyEncapsulation r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ECKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.kems.ECIESKeyEncapsulation;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ECKeyParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("EC key required");

        throw $r2;

     label1:
        $r3 = (org.spongycastle.crypto.params.ECKeyParameters) $r1;

        r0.<org.spongycastle.crypto.kems.ECIESKeyEncapsulation: org.spongycastle.crypto.params.ECKeyParameters key> = $r3;

        return;
    }
