org.spongycastle.crypto.StreamBlockCipher extends java.lang.Object implements org.spongycastle.crypto.BlockCipher org.spongycastle.crypto.StreamCipher
private final org.spongycastle.crypto.BlockCipher cipher
    protected void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.StreamBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.StreamBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.StreamBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r1;

        return;
    }
protected abstract byte calculateByte(byte) { 
// no body
} 
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.StreamBlockCipher r0;
        org.spongycastle.crypto.BlockCipher r1;

        r0 := @this: org.spongycastle.crypto.StreamBlockCipher;

        r1 = r0.<org.spongycastle.crypto.StreamBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        return r1;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.StreamBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i5;
        byte $b4;
        org.spongycastle.crypto.DataLengthException $r3;

        r0 := @this: org.spongycastle.crypto.StreamBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        i3 = $i2 + $i1;

        $i5 = lengthof $r2;

        if i3 <= $i5 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label1:
        i3 = $i0 + $i1;

        $i5 = lengthof $r1;

        if i3 <= $i5 goto label2;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too small");

        throw $r3;

     label2:
        i3 = $i0 + $i1;

     label3:
        if $i0 >= i3 goto label4;

        $b4 = $r1[$i0];

        $b4 = virtualinvoke r0.<org.spongycastle.crypto.StreamBlockCipher: byte calculateByte(byte)>($b4);

        $r2[$i2] = $b4;

        $i2 = $i2 + 1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $i1;
    }
    public final byte returnByte(byte)
    {
        org.spongycastle.crypto.StreamBlockCipher r0;
        byte $b0;

        r0 := @this: org.spongycastle.crypto.StreamBlockCipher;

        $b0 := @parameter0: byte;

        $b0 = virtualinvoke r0.<org.spongycastle.crypto.StreamBlockCipher: byte calculateByte(byte)>($b0);

        return $b0;
    }
