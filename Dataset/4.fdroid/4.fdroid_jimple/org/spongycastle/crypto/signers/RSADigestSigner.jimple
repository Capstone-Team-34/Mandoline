org.spongycastle.crypto.signers.RSADigestSigner extends java.lang.Object implements org.spongycastle.crypto.Signer
private static final java.util.Hashtable oidMap
private final org.spongycastle.asn1.x509.AlgorithmIdentifier algId
private final org.spongycastle.crypto.Digest digest
private boolean forSigning
private final org.spongycastle.crypto.AsymmetricBlockCipher rsaEngine
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap> = $r0;

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.teletrust.TeleTrusTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier ripemd128>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("RIPEMD128", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.teletrust.TeleTrusTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier ripemd160>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("RIPEMD160", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.teletrust.TeleTrusTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier ripemd256>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("RIPEMD256", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.x509.X509ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_SHA1>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-1", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha224>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-224", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha256>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-256", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha384>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-384", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512_224>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/224", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512_256>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/256", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier md2>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD2", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier md4>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD4", $r1);

        $r0 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier md5>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD5", $r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        org.spongycastle.crypto.Digest $r1;
        java.util.Hashtable $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 = <org.spongycastle.crypto.signers.RSADigestSigner: java.util.Hashtable oidMap>;

        $r3 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r4;

        specialinvoke r0.<org.spongycastle.crypto.signers.RSADigestSigner: void <init>(org.spongycastle.crypto.Digest,org.spongycastle.asn1.ASN1ObjectIdentifier)>($r1, $r5);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, org.spongycastle.asn1.ASN1ObjectIdentifier)
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2;
        org.spongycastle.crypto.encodings.PKCS1Encoding $r3;
        org.spongycastle.crypto.engines.RSABlindedEngine $r4;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r5;
        org.spongycastle.asn1.DERNull $r6;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.asn1.ASN1ObjectIdentifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r4 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r4.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke $r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r4);

        r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.AsymmetricBlockCipher rsaEngine> = $r3;

        r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest> = $r1;

        $r5 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r6 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r5.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r2, $r6);

        r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier algId> = $r5;

        return;
    }
    private byte[] derEncode(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        byte[] $r1;
        org.spongycastle.asn1.x509.DigestInfo r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 := @parameter0: byte[];

        r2 = new org.spongycastle.asn1.x509.DigestInfo;

        $r3 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>;

        specialinvoke r2.<org.spongycastle.asn1.x509.DigestInfo: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r3, $r1);

        $r1 = virtualinvoke r2.<org.spongycastle.asn1.x509.DigestInfo: byte[] getEncoded(java.lang.String)>("DER");

        return $r1;
    }
    public byte[] generateSignature() throws org.spongycastle.crypto.CryptoException, org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        java.io.IOException r1;
        byte[] r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        org.spongycastle.crypto.CryptoException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $z0 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSADigestSigner not initialised for signature generation.");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label2:
        r2 = specialinvoke r0.<org.spongycastle.crypto.signers.RSADigestSigner: byte[] derEncode(byte[])>(r2);

     label3:
        $r5 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.AsymmetricBlockCipher rsaEngine>;

        $i0 = lengthof r2;

     label4:
        r2 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i0);

     label5:
        return r2;

     label6:
        r1 := @caughtexception;

        $r6 = new org.spongycastle.crypto.CryptoException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to encode signature: ");

        $r8 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r1);

        throw $r6;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("withRSA");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r3;
        org.spongycastle.crypto.params.ParametersWithRandom $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter r4;
        java.lang.IllegalArgumentException $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.signers.RSADigestSigner: boolean forSigning> = $z0;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        $r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r3;

     label1:
        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("signing requires private key");

        throw $r5;

     label2:
        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

        goto label1;

     label3:
        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 == 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("verification requires public key");

        throw $r5;

     label4:
        virtualinvoke r0.<org.spongycastle.crypto.signers.RSADigestSigner: void reset()>();

        $r6 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.AsymmetricBlockCipher rsaEngine>;

        interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.RSADigestSigner r0;
        byte[] $r1, r3, $r7;
        java.lang.Exception r2;
        int i0, i1, $i2, i4, $i5;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        byte $b3, $b6;

        r0 := @this: org.spongycastle.crypto.signers.RSADigestSigner;

        $r1 := @parameter0: byte[];

        $z0 = 1;

        $z1 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: boolean forSigning>;

        if $z1 == 0 goto label01;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSADigestSigner not initialised for verification");

        throw $r4;

     label01:
        $r5 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        i1 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[i1];

        $r5 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label02:
        $r6 = r0.<org.spongycastle.crypto.signers.RSADigestSigner: org.spongycastle.crypto.AsymmetricBlockCipher rsaEngine>;

        i1 = lengthof $r1;

        $r1 = interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, i1);

        $r7 = specialinvoke r0.<org.spongycastle.crypto.signers.RSADigestSigner: byte[] derEncode(byte[])>(r3);

     label03:
        i1 = lengthof $r1;

        i0 = lengthof $r7;

        if i1 != i0 goto label05;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r1, $r7);

        return $z0;

     label04:
        r2 := @caughtexception;

        return 0;

     label05:
        i1 = lengthof $r1;

        i0 = lengthof $r7;

        i0 = i0 + -2;

        if i1 != i0 goto label12;

        i1 = lengthof $r1;

        i0 = lengthof r3;

        i1 = i1 - i0;

        i1 = i1 + -2;

        i0 = lengthof $r7;

        $i2 = lengthof r3;

        i0 = i0 - $i2;

        i0 = i0 + -2;

        $b3 = $r7[1];

        $i2 = $b3 + -2;

        $b3 = (byte) $i2;

        $r7[1] = $b3;

        $b3 = $r7[3];

        $i2 = $b3 + -2;

        $b3 = (byte) $i2;

        $r7[3] = $b3;

        $i2 = 0;

        i4 = 0;

     label06:
        $i5 = lengthof r3;

        if i4 >= $i5 goto label07;

        $i5 = i1 + i4;

        $b3 = $r1[$i5];

        $i5 = i0 + i4;

        $b6 = $r7[$i5];

        $i5 = $b3 ^ $b6;

        $i2 = $i2 | $i5;

        i4 = i4 + 1;

        goto label06;

     label07:
        i0 = 0;

     label08:
        if i0 >= i1 goto label09;

        $b3 = $r1[i0];

        $b6 = $r7[i0];

        i4 = $b3 ^ $b6;

        $i2 = $i2 | i4;

        i0 = i0 + 1;

        goto label08;

     label09:
        if $i2 != 0 goto label11;

     label10:
        return $z0;

     label11:
        $z0 = 0;

        goto label10;

     label12:
        staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r7, $r7);

        return 0;

        catch java.lang.Exception from label02 to label03 with label04;
    }
