org.spongycastle.crypto.signers.GenericSigner extends java.lang.Object implements org.spongycastle.crypto.Signer
private final org.spongycastle.crypto.Digest digest
private final org.spongycastle.crypto.AsymmetricBlockCipher engine
private boolean forSigning
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest> = $r2;

        return;
    }
    public byte[] generateSignature() throws org.spongycastle.crypto.CryptoException, org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        byte[] r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $z0 = r0.<org.spongycastle.crypto.signers.GenericSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GenericSigner not initialised for signature generation.");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $r4 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof r1;

        r1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r1, 0, $i0);

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r3;
        org.spongycastle.crypto.params.ParametersWithRandom $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter r4;
        java.lang.IllegalArgumentException $r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.signers.GenericSigner: boolean forSigning> = $z0;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        $r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r3;

     label1:
        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("signing requires private key");

        throw $r5;

     label2:
        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

        goto label1;

     label3:
        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 == 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("verification requires public key");

        throw $r5;

     label4:
        virtualinvoke r0.<org.spongycastle.crypto.signers.GenericSigner: void reset()>();

        $r6 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $r1 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.GenericSigner r0;
        byte[] $r1, r3, r4;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        org.spongycastle.crypto.Digest $r6;
        int $i0, $i1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r7;

        r0 := @this: org.spongycastle.crypto.signers.GenericSigner;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.crypto.signers.GenericSigner: boolean forSigning>;

        if $z0 == 0 goto label01;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GenericSigner not initialised for verification");

        throw $r5;

     label01:
        $r6 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r6 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label02:
        $r7 = r0.<org.spongycastle.crypto.signers.GenericSigner: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof $r1;

        $r1 = interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label03:
        r4 = $r1;

     label04:
        $i0 = lengthof $r1;

        $i1 = lengthof r3;

     label05:
        if $i0 >= $i1 goto label09;

     label06:
        $i0 = lengthof r3;

        r4 = newarray (byte)[$i0];

        $i0 = lengthof r4;

        $i1 = lengthof $r1;

     label07:
        $i0 = $i0 - $i1;

     label08:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, $i0, $i1);

     label09:
        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>(r4, r3);

     label10:
        return $z0;

     label11:
        r2 := @caughtexception;

        return 0;

        catch java.lang.Exception from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label05 with label11;
        catch java.lang.Exception from label06 to label07 with label11;
        catch java.lang.Exception from label08 to label09 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }
