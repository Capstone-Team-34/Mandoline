org.spongycastle.crypto.signers.DSASigner extends java.lang.Object implements org.spongycastle.crypto.DSA
private final org.spongycastle.crypto.signers.DSAKCalculator kCalculator
private org.spongycastle.crypto.params.DSAKeyParameters key
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        org.spongycastle.crypto.signers.RandomDSAKCalculator $r1;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.signers.RandomDSAKCalculator;

        specialinvoke $r1.<org.spongycastle.crypto.signers.RandomDSAKCalculator: void <init>()>();

        r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator> = $r1;

        return;
    }
    public void <init>(org.spongycastle.crypto.signers.DSAKCalculator)
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        org.spongycastle.crypto.signers.DSAKCalculator $r1;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.signers.DSAKCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator> = $r1;

        return;
    }
    private java.math.BigInteger calculateE(java.math.BigInteger, byte[])
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        java.math.BigInteger $r1;
        byte[] $r2, r3;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: byte[];

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i1 = lengthof $r2;

        $i1 = $i1 * 8;

        if $i0 < $i1 goto label1;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;

     label1:
        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 / 8;

        r3 = newarray (byte)[$i0];

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, $i0);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        return $r1;
    }
    public java.math.BigInteger[] generateSignature(byte[])
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        byte[] $r1;
        org.spongycastle.crypto.params.DSAKeyParameters $r2;
        org.spongycastle.crypto.params.DSAParameters $r3;
        java.math.BigInteger $r4, $r5, $r7, $r9, $r10, $r11;
        org.spongycastle.crypto.params.DSAPrivateKeyParameters $r6;
        org.spongycastle.crypto.signers.DSAKCalculator $r8;
        boolean $z0;
        java.math.BigInteger[] $r12;
        java.security.SecureRandom $r13;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.DSAKeyParameters: org.spongycastle.crypto.params.DSAParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r5 = specialinvoke r0.<org.spongycastle.crypto.signers.DSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r4, $r1);

        $r2 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key>;

        $r6 = (org.spongycastle.crypto.params.DSAPrivateKeyParameters) $r2;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.DSAPrivateKeyParameters: java.math.BigInteger getX()>();

        $r8 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator>;

        $z0 = interfaceinvoke $r8.<org.spongycastle.crypto.signers.DSAKCalculator: boolean isDeterministic()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator>;

        interfaceinvoke $r8.<org.spongycastle.crypto.signers.DSAKCalculator: void init(java.math.BigInteger,java.math.BigInteger,byte[])>($r4, $r7, $r1);

     label1:
        $r8 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator>;

        $r9 = interfaceinvoke $r8.<org.spongycastle.crypto.signers.DSAKCalculator: java.math.BigInteger nextK()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r11 = virtualinvoke $r3.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, $r11);

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r4);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        $r5 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r4 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r12 = newarray (java.math.BigInteger)[2];

        $r12[0] = $r10;

        $r12[1] = $r4;

        return $r12;

     label2:
        $r8 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator>;

        $r13 = r0.<org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom random>;

        interfaceinvoke $r8.<org.spongycastle.crypto.signers.DSAKCalculator: void init(java.math.BigInteger,java.security.SecureRandom)>($r4, $r13);

        goto label1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters r1;
        java.security.SecureRandom r2;
        org.spongycastle.crypto.params.ParametersWithRandom r3;
        org.spongycastle.crypto.params.DSAPrivateKeyParameters $r4;
        org.spongycastle.crypto.signers.DSAKCalculator $r5;
        org.spongycastle.crypto.params.DSAPublicKeyParameters r6;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r2 = null;

        if $z0 == 0 goto label4;

        $z1 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label3;

        r3 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.DSAPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key> = $r4;

        r2 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

     label1:
        if $z0 == 0 goto label5;

        $r5 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.signers.DSAKCalculator kCalculator>;

        $z0 = interfaceinvoke $r5.<org.spongycastle.crypto.signers.DSAKCalculator: boolean isDeterministic()>();

        if $z0 != 0 goto label5;

        $z0 = 1;

     label2:
        r2 = virtualinvoke r0.<org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom)>($z0, r2);

        r0.<org.spongycastle.crypto.signers.DSASigner: java.security.SecureRandom random> = r2;

        return;

     label3:
        $r4 = (org.spongycastle.crypto.params.DSAPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key> = $r4;

        goto label1;

     label4:
        r6 = (org.spongycastle.crypto.params.DSAPublicKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key> = r6;

        goto label1;

     label5:
        $z0 = 0;

        goto label2;
    }
    protected java.security.SecureRandom initSecureRandom(boolean, java.security.SecureRandom)
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        boolean $z0;
        java.security.SecureRandom r1;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: java.security.SecureRandom;

        if $z0 != 0 goto label1;

        return null;

     label1:
        if r1 != null goto label2;

        r1 = new java.security.SecureRandom;

        specialinvoke r1.<java.security.SecureRandom: void <init>()>();

     label2:
        return r1;
    }
    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.signers.DSASigner r0;
        byte[] $r1;
        java.math.BigInteger $r2, $r3, $r6, $r7, $r8, $r9;
        org.spongycastle.crypto.params.DSAKeyParameters $r4;
        org.spongycastle.crypto.params.DSAParameters $r5;
        int $i0;
        org.spongycastle.crypto.params.DSAPublicKeyParameters $r10;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.signers.DSASigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $r4 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.DSAKeyParameters: org.spongycastle.crypto.params.DSAParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r7 = specialinvoke r0.<org.spongycastle.crypto.signers.DSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r6, $r1);

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label2;

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 >= 0 goto label2;

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r6);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r6);

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r8 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r6);

        $r3 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r9 = virtualinvoke $r5.<org.spongycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r7 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r3);

        $r4 = r0.<org.spongycastle.crypto.signers.DSASigner: org.spongycastle.crypto.params.DSAKeyParameters key>;

        $r10 = (org.spongycastle.crypto.params.DSAPublicKeyParameters) $r4;

        $r9 = virtualinvoke $r10.<org.spongycastle.crypto.params.DSAPublicKeyParameters: java.math.BigInteger getY()>();

        $r8 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, $r3);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r3 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r6);

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        return $z0;

     label2:
        return 0;
    }
