org.spongycastle.crypto.signers.PSSSigner extends java.lang.Object implements org.spongycastle.crypto.Signer
public static final byte TRAILER_IMPLICIT
private byte[] block
private org.spongycastle.crypto.AsymmetricBlockCipher cipher
private org.spongycastle.crypto.Digest contentDigest
private int emBits
private int hLen
private byte[] mDash
private org.spongycastle.crypto.Digest mgfDigest
private int mgfhLen
private java.security.SecureRandom random
private int sLen
private byte[] salt
private byte trailer
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,int,byte)>($r1, $r2, $i0, -68);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, int, byte)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $i0 := @parameter2: int;

        $b1 := @parameter3: byte;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,int,byte)>($r1, $r2, $r2, $i0, $b1);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: org.spongycastle.crypto.Digest;

        $i0 := @parameter3: int;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,int,byte)>($r1, $r2, $r3, $i0, -68);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, org.spongycastle.crypto.Digest, int, byte)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2, $r3;
        int $i0, $i2;
        byte $b1;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: org.spongycastle.crypto.Digest;

        $i0 := @parameter3: int;

        $b1 := @parameter4: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest> = $r2;

        r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest> = $r3;

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen> = $i2;

        $i2 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen> = $i2;

        r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen> = $i0;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] salt> = $r4;

        $i2 = $i0 + 8;

        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i2 + $i0;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash> = $r4;

        r0.<org.spongycastle.crypto.signers.PSSSigner: byte trailer> = $b1;

        return;
    }
    private void ItoOSP(int, byte[])
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r1[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r1[2] = $b2;

        $i0 = $i0 >>> 0;

        $b2 = (byte) $i0;

        $r1[3] = $b2;

        return;
    }
    private void clearBlock(byte[])
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte[] $r1;
        int i0, $i1;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: byte[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private byte[] maskGeneratorFunction1(byte[], int, int, int)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte[] $r1, r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r4 = newarray (byte)[$i2];

        $i3 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        r3 = newarray (byte)[$i3];

        r2 = newarray (byte)[4];

        $i3 = 0;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

     label1:
        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        $i4 = $i2 / $i4;

        if $i3 >= $i4 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        $i4 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i4);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        $i4 = $i4 * $i3;

        $i5 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i4, $i5);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        $i4 = $i4 * $i3;

        if $i4 >= $i2 goto label3;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        $i0 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest mgfDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        $i0 = $i0 * $i3;

        $i1 = lengthof r4;

        $i2 = r0.<org.spongycastle.crypto.signers.PSSSigner: int mgfhLen>;

        $i2 = $i2 * $i3;

        $i1 = $i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i0, $i1);

     label3:
        return r4;
    }
    public byte[] generateSignature() throws org.spongycastle.crypto.CryptoException, org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte[] r1, $r3, $r5, $r6;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.Digest $r2;
        java.security.SecureRandom $r4;
        byte $b3, $b4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r7;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r2 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r3;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, $i0);

        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        if $i0 == 0 goto label1;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: java.security.SecureRandom random>;

        r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] salt>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] salt>;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r5;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, $i0, $i1);

     label1:
        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r5;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, $i0);

        $r2 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r5;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $r3[$i0] = 1;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] salt>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r6 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r6;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, $i0, $i1);

        $i0 = lengthof r1;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i1 = lengthof $r3;

        $i2 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i1 = $i1 - $i2;

        $i1 = $i1 + -1;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r1, 0, $i0, $i1);

        $i0 = 0;

     label2:
        $i1 = lengthof $r3;

        if $i0 == $i1 goto label3;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b3 = $r5[$i0];

        $b4 = $r3[$i0];

        $i1 = $b3 ^ $b4;

        $b3 = (byte) $i1;

        $r5[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b3 = $r3[0];

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r5;

        $i1 = $i0 * 8;

        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int emBits>;

        $i0 = $i1 - $i0;

        $i0 = 255 >> $i0;

        $i0 = $b3 & $i0;

        $b3 = (byte) $i0;

        $r3[0] = $b3;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r5;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, $i0, $i1);

        r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $b3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte trailer>;

        r1[$i0] = $b3;

        $r7 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r3;

        r1 = interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r1, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r3);

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r3;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.params.RSABlindingParameters r5;
        org.spongycastle.crypto.params.RSAKeyParameters $r6;
        org.spongycastle.crypto.AsymmetricBlockCipher $r7;
        java.math.BigInteger $r8;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r9;
        byte[] $r10;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label3;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.signers.PSSSigner: java.security.SecureRandom random> = $r4;

     label1:
        $z1 = $r3 instanceof org.spongycastle.crypto.params.RSABlindingParameters;

        if $z1 == 0 goto label4;

        r5 = (org.spongycastle.crypto.params.RSABlindingParameters) $r3;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.RSABlindingParameters: org.spongycastle.crypto.params.RSAKeyParameters getPublicKey()>();

        $r7 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

     label2:
        $r8 = virtualinvoke $r6.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + -1;

        r0.<org.spongycastle.crypto.signers.PSSSigner: int emBits> = $i0;

        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int emBits>;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i1 = $i1 * 8;

        $i2 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i2 = $i2 * 8;

        $i1 = $i1 + $i2;

        $i1 = $i1 + 9;

        if $i0 >= $i1 goto label5;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key too small for specified hash and salt lengths");

        throw $r9;

     label3:
        $r3 = $r1;

        if $z0 == 0 goto label1;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.signers.PSSSigner: java.security.SecureRandom random> = $r4;

        goto label1;

     label4:
        $r6 = (org.spongycastle.crypto.params.RSAKeyParameters) $r3;

        $r7 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3);

        goto label2;

     label5:
        $i0 = r0.<org.spongycastle.crypto.signers.PSSSigner: int emBits>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $r10 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block> = $r10;

        virtualinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void reset()>();

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.PSSSigner r0;
        byte[] $r1, $r4, $r5;
        java.lang.Exception r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0, $i1, $i4, $i5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.crypto.signers.PSSSigner;

        $r1 := @parameter0: byte[];

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r5;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r4, $i0);

     label01:
        $r6 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = lengthof $r1;

        $r1 = interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r5;

        $i1 = lengthof $r1;

     label02:
        $i0 = $i0 - $i1;

     label03:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, $i0, $i1);

     label04:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $b2 = $r1[$i0];

        $b3 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte trailer>;

        if $b2 == $b3 goto label06;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label05:
        r2 := @caughtexception;

        return 0;

     label06:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i4 = lengthof $r4;

        $i5 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i4 = $i4 - $i5;

        $i4 = $i4 + -1;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, $i0, $i1, $i4);

        $i0 = 0;

     label07:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label08;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b2 = $r4[$i0];

        $b3 = $r1[$i0];

        $i1 = $b2 ^ $b3;

        $b2 = (byte) $i1;

        $r4[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label07;

     label08:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b2 = $r1[0];

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r4;

        $i0 = $i0 * 8;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int emBits>;

        $i0 = $i0 - $i1;

        $i0 = 255 >> $i0;

        $i0 = $b2 & $i0;

        $b2 = (byte) $i0;

        $r1[0] = $b2;

        $i0 = 0;

     label09:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i1 = lengthof $r1;

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i1 = $i1 - $i4;

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i1 = $i1 - $i4;

        $i1 = $i1 + -2;

        if $i0 == $i1 goto label11;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b2 = $r1[$i0];

        if $b2 == 0 goto label10;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label10:
        $i0 = $i0 + 1;

        goto label09;

     label11:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -2;

        $b2 = $r1[$i0];

        if $b2 == 1 goto label12;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label12:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i0 = $i0 - $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r5 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i1 = lengthof $r5;

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        $i1 = $i1 - $i4;

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int sLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r4, $i1, $i4);

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r4;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.signers.PSSSigner: org.spongycastle.crypto.Digest contentDigest>;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $r4 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i1 = lengthof $r1;

        $i4 = r0.<org.spongycastle.crypto.signers.PSSSigner: int hLen>;

        $i1 = $i1 - $i4;

     label13:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $i4 = lengthof $r1;

        if $i1 == $i4 goto label15;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        $b2 = $r1[$i0];

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        $b3 = $r1[$i1];

        $i4 = $b2 ^ $b3;

        if $i4 == 0 goto label14;

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label14:
        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label13;

     label15:
        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] mDash>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.signers.PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.PSSSigner: void clearBlock(byte[])>($r1);

        return 1;

        catch java.lang.Exception from label01 to label02 with label05;
        catch java.lang.Exception from label03 to label04 with label05;
    }
