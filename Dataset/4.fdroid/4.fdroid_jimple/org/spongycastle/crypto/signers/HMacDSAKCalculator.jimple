org.spongycastle.crypto.signers.HMacDSAKCalculator extends java.lang.Object implements org.spongycastle.crypto.signers.DSAKCalculator
private static final java.math.BigInteger ZERO
private final byte[] K
private final byte[] V
private final org.spongycastle.crypto.macs.HMac hMac
private java.math.BigInteger n
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger ZERO> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.macs.HMac $r2;
        int $i0;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke $r2.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac> = $r2;

        $r2 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: int getMacSize()>();

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V> = $r3;

        $r2 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.macs.HMac: int getMacSize()>();

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K> = $r3;

        return;
    }
    private java.math.BigInteger bitsToInt(byte[])
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;
        byte[] $r1;
        java.math.BigInteger r2, $r3;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r1 := @parameter0: byte[];

        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger n>;

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        if $i0 <= $i1 goto label1;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger n>;

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 - $i1;

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

     label1:
        return r2;
    }
    public void init(java.math.BigInteger, java.math.BigInteger, byte[])
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;
        java.math.BigInteger $r1, $r2, r6;
        byte[] $r3, r4, r5, $r9;
        int $i0, $i1;
        org.spongycastle.crypto.macs.HMac $r7;
        org.spongycastle.crypto.params.KeyParameter $r8;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: byte[];

        r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger n> = $r1;

        r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r5, 1);

        r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r5, 0);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        r5 = newarray (byte)[$i0];

        r4 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r2);

        $i0 = lengthof r5;

        $i1 = lengthof r4;

        $i0 = $i0 - $i1;

        $i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, $i0, $i1);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        r4 = newarray (byte)[$i0];

        $r2 = specialinvoke r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger bitsToInt(byte[])>($r3);

        r6 = $r2;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 < 0 goto label1;

        r6 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label1:
        $r3 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>(r6);

        $i0 = lengthof r4;

        $i1 = lengthof $r3;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, $i0, $i1);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r8 = new org.spongycastle.crypto.params.KeyParameter;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        specialinvoke $r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r8);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r9 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof $r9;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte)>(0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = lengthof r5;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>(r5, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = lengthof r4;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>(r4, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r3, 0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r8 = new org.spongycastle.crypto.params.KeyParameter;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        specialinvoke $r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r8);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r9 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof $r9;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r3, 0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r9 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof $r9;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte)>(1);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = lengthof r5;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>(r5, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $i0 = lengthof r4;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>(r4, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r3, 0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r8 = new org.spongycastle.crypto.params.KeyParameter;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        specialinvoke $r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r8);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof r5;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i0);

        $r7 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        virtualinvoke $r7.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r3, 0);

        return;
    }
    public void init(java.math.BigInteger, java.security.SecureRandom)
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;
        java.math.BigInteger $r1;
        java.security.SecureRandom $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.security.SecureRandom;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Operation not supported");

        throw $r3;
    }
    public boolean isDeterministic()
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        return 1;
    }
    public java.math.BigInteger nextK()
    {
        org.spongycastle.crypto.signers.HMacDSAKCalculator r0;
        byte[] r1, $r4, $r5;
        java.math.BigInteger $r2, $r6;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.macs.HMac $r3;
        org.spongycastle.crypto.params.KeyParameter $r7;

        r0 := @this: org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r2 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger n>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        r1 = newarray (byte)[$i0];

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i1 = lengthof $r5;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r4, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r4, 0);

        $i1 = lengthof r1;

        $i1 = $i1 - $i0;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i2 = lengthof $r4;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, $i0, $i1);

        $i0 = $i0 + $i1;

        goto label2;

     label3:
        $r2 = specialinvoke r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger bitsToInt(byte[])>(r1);

        $r6 = <org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 <= 0 goto label4;

        $r6 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: java.math.BigInteger n>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 >= 0 goto label4;

        return $r2;

     label4:
        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof $r5;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r4, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void update(byte)>(0);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r4, 0);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r7 = new org.spongycastle.crypto.params.KeyParameter;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] K>;

        specialinvoke $r7.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r4);

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r7);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $r5 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        $i0 = lengthof $r5;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r4, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: org.spongycastle.crypto.macs.HMac hMac>;

        $r4 = r0.<org.spongycastle.crypto.signers.HMacDSAKCalculator: byte[] V>;

        virtualinvoke $r3.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r4, 0);

        goto label1;
    }
