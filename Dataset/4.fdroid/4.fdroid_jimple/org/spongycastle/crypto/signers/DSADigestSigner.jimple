org.spongycastle.crypto.signers.DSADigestSigner extends java.lang.Object implements org.spongycastle.crypto.Signer
private final org.spongycastle.crypto.Digest digest
private final org.spongycastle.crypto.DSA dsaSigner
private boolean forSigning
    public void <init>(org.spongycastle.crypto.DSA, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        org.spongycastle.crypto.DSA $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 := @parameter0: org.spongycastle.crypto.DSA;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest> = $r2;

        r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.DSA dsaSigner> = $r1;

        return;
    }
    private java.math.BigInteger[] derDecode(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        byte[] $r1;
        java.math.BigInteger[] $r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        org.spongycastle.asn1.ASN1Sequence r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        java.math.BigInteger $r7;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 := @parameter0: byte[];

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r1);

        r4 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r2 = newarray (java.math.BigInteger)[2];

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r2[0] = $r7;

        $r5 = virtualinvoke r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r2[1] = $r7;

        return $r2;
    }
    private byte[] derEncode(java.math.BigInteger, java.math.BigInteger) throws java.io.IOException
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        java.math.BigInteger $r1, $r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        byte[] $r4;
        org.spongycastle.asn1.ASN1Integer $r5;
        org.spongycastle.asn1.DERSequence $r6;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r5 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r1);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r5 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r6 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r6.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r4 = virtualinvoke $r6.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

        return $r4;
    }
    public byte[] generateSignature()
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        java.io.IOException r1;
        byte[] r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        org.spongycastle.crypto.DSA $r5;
        java.math.BigInteger[] $r6;
        java.math.BigInteger $r7, $r8;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $z0 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DSADigestSigner not initialised for signature generation.");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r5 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.DSA dsaSigner>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>(r2);

        $r7 = $r6[0];

        $r8 = $r6[1];

     label2:
        r2 = specialinvoke r0.<org.spongycastle.crypto.signers.DSADigestSigner: byte[] derEncode(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

     label3:
        return r2;

     label4:
        r1 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unable to encode signature");

        throw $r3;

        catch java.io.IOException from label2 to label3 with label4;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r3;
        org.spongycastle.crypto.params.ParametersWithRandom $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter r4;
        java.lang.IllegalArgumentException $r5;
        org.spongycastle.crypto.DSA $r6;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.signers.DSADigestSigner: boolean forSigning> = $z0;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        $r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r3;

     label1:
        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Signing Requires Private Key.");

        throw $r5;

     label2:
        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

        goto label1;

     label3:
        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r4.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 == 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Verification Requires Public Key.");

        throw $r5;

     label4:
        virtualinvoke r0.<org.spongycastle.crypto.signers.DSADigestSigner: void reset()>();

        $r6 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.DSA dsaSigner>;

        interfaceinvoke $r6.<org.spongycastle.crypto.DSA: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.DSADigestSigner r0;
        byte[] $r1, r3;
        java.io.IOException r2;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.Digest $r5;
        int $i0;
        java.math.BigInteger[] $r6;
        org.spongycastle.crypto.DSA $r7;
        java.math.BigInteger $r8, $r9;

        r0 := @this: org.spongycastle.crypto.signers.DSADigestSigner;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: boolean forSigning>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DSADigestSigner not initialised for verification");

        throw $r4;

     label1:
        $r5 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r5 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

     label2:
        $r6 = specialinvoke r0.<org.spongycastle.crypto.signers.DSADigestSigner: java.math.BigInteger[] derDecode(byte[])>($r1);

     label3:
        $r7 = r0.<org.spongycastle.crypto.signers.DSADigestSigner: org.spongycastle.crypto.DSA dsaSigner>;

        $r8 = $r6[0];

        $r9 = $r6[1];

     label4:
        $z0 = interfaceinvoke $r7.<org.spongycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>(r3, $r8, $r9);

     label5:
        return $z0;

     label6:
        r2 := @caughtexception;

        return 0;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
