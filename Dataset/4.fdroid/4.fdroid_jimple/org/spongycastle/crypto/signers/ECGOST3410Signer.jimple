org.spongycastle.crypto.signers.ECGOST3410Signer extends java.lang.Object implements org.spongycastle.crypto.DSA
org.spongycastle.crypto.params.ECKeyParameters key
java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.signers.ECGOST3410Signer r0;

        r0 := @this: org.spongycastle.crypto.signers.ECGOST3410Signer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.signers.ECGOST3410Signer r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.signers.ECGOST3410Signer;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public java.math.BigInteger[] generateSignature(byte[])
    {
        org.spongycastle.crypto.signers.ECGOST3410Signer r0;
        byte[] $r1, r4;
        java.math.BigInteger r2, r3, $r7, $r9, $r12, $r15;
        int $i0, $i1;
        byte $b2;
        org.spongycastle.crypto.params.ECKeyParameters $r5;
        org.spongycastle.crypto.params.ECDomainParameters $r6;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r8;
        org.spongycastle.math.ec.ECMultiplier $r10;
        java.security.SecureRandom $r11;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r13;
        org.spongycastle.math.ec.ECFieldElement $r14;
        java.math.BigInteger[] $r16;

        r0 := @this: org.spongycastle.crypto.signers.ECGOST3410Signer;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        r4 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r4;

        if $i0 == $i1 goto label2;

        $i1 = lengthof r4;

        $i1 = $i1 + -1;

        $i1 = $i1 - $i0;

        $b2 = $r1[$i1];

        r4[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r4);

        $r5 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r5 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r8 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r5;

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r10 = virtualinvoke r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

     label3:
        r3 = new java.math.BigInteger;

        $i0 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>();

        $r11 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: java.security.SecureRandom random>;

        specialinvoke r3.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r11);

        $r12 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label3;

        $r13 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r13 = interfaceinvoke $r10.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r13, r3);

        $r13 = virtualinvoke $r13.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r14 = virtualinvoke $r13.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r12 = virtualinvoke $r14.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r15 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label3;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        $r15 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r15);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r15 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label3;

        $r16 = newarray (java.math.BigInteger)[2];

        $r16[0] = $r12;

        $r16[1] = r3;

        return $r16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.ECGOST3410Signer r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r4;
        org.spongycastle.crypto.params.ECPublicKeyParameters r5;

        r0 := @this: org.spongycastle.crypto.signers.ECGOST3410Signer;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: java.security.SecureRandom random> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key> = $r4;

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: java.security.SecureRandom random> = $r3;

        $r4 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key> = $r4;

        return;

     label2:
        r5 = (org.spongycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key> = r5;

        return;
    }
    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.signers.ECGOST3410Signer r0;
        byte[] $r1, r5;
        java.math.BigInteger $r2, $r3, r4, $r8, $r9;
        int $i0, $i1;
        byte $b2;
        org.spongycastle.crypto.params.ECKeyParameters $r6;
        org.spongycastle.crypto.params.ECDomainParameters $r7;
        org.spongycastle.math.ec.ECPoint $r10, $r12;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r11;
        boolean $z0;
        org.spongycastle.math.ec.ECFieldElement $r13;

        r0 := @this: org.spongycastle.crypto.signers.ECGOST3410Signer;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $i0 = lengthof $r1;

        r5 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r5;

        if $i0 == $i1 goto label2;

        $i1 = lengthof r5;

        $i1 = $i1 + -1;

        $i1 = $i1 - $i0;

        $b2 = $r1[$i1];

        r5[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r4 = new java.math.BigInteger;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r5);

        $r6 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r9 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i0 < 0 goto label3;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i0 < 0 goto label4;

     label3:
        return 0;

     label4:
        $r9 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i0 < 0 goto label5;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i0 < 0 goto label6;

     label5:
        return 0;

     label6:
        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r8);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        r4 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $r6 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r10 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = r0.<org.spongycastle.crypto.signers.ECGOST3410Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r11 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r6;

        $r12 = virtualinvoke $r11.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r10 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r10, $r3, $r12, r4);

        $r10 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label7;

        return 0;

     label7:
        $r13 = virtualinvoke $r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r3 = virtualinvoke $r13.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
