org.spongycastle.crypto.signers.ECNRSigner extends java.lang.Object implements org.spongycastle.crypto.DSA
private boolean forSigning
private org.spongycastle.crypto.params.ECKeyParameters key
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.signers.ECNRSigner r0;

        r0 := @this: org.spongycastle.crypto.signers.ECNRSigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.math.BigInteger[] generateSignature(byte[])
    {
        org.spongycastle.crypto.signers.ECNRSigner r0;
        byte[] $r1;
        java.math.BigInteger r2, $r9, $r18, $r19;
        org.spongycastle.crypto.generators.ECKeyPairGenerator r3;
        java.math.BigInteger[] r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        org.spongycastle.crypto.params.ECKeyParameters $r6;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r7;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        int $i0, $i1;
        org.spongycastle.crypto.DataLengthException $r10;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r11;
        java.security.SecureRandom $r12;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r13;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r14;
        org.spongycastle.crypto.params.ECPublicKeyParameters r15;
        org.spongycastle.math.ec.ECPoint $r16;
        org.spongycastle.math.ec.ECFieldElement $r17;

        r0 := @this: org.spongycastle.crypto.signers.ECNRSigner;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.crypto.signers.ECNRSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not initialised for signing");

        throw $r5;

     label1:
        $r6 = r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r7 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r6;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $i1 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();

        $r6 = r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r7 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r6;

        if $i1 <= $i0 goto label2;

        $r10 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r10.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ECNR key.");

        throw $r10;

     label2:
        r3 = new org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        $r11 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r12 = r0.<org.spongycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random>;

        specialinvoke $r11.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r8, $r12);

        virtualinvoke r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r11);

        $r13 = virtualinvoke r3.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r14 = virtualinvoke $r13.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r15 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r14;

        $r16 = virtualinvoke r15.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r17 = virtualinvoke $r16.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r18 = virtualinvoke $r17.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r18 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

        $r18 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r19 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r18.<java.math.BigInteger: boolean equals(java.lang.Object)>($r19);

        if $z0 != 0 goto label2;

        $r19 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r14 = virtualinvoke $r13.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        $r7 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r14;

        r2 = virtualinvoke $r7.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r19);

        $r9 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        r4 = newarray (java.math.BigInteger)[2];

        r4[0] = $r18;

        r4[1] = $r9;

        return r4;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.ECNRSigner r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r4;
        org.spongycastle.crypto.params.ECPublicKeyParameters r5;

        r0 := @this: org.spongycastle.crypto.signers.ECNRSigner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.signers.ECNRSigner: boolean forSigning> = $z0;

        if $z0 == 0 goto label2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key> = $r4;

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.signers.ECNRSigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key> = $r4;

        return;

     label2:
        r5 = (org.spongycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key> = r5;

        return;
    }
    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.signers.ECNRSigner r0;
        byte[] $r1;
        java.math.BigInteger $r2, $r3, r4, $r9, $r11;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        org.spongycastle.crypto.params.ECKeyParameters r6;
        org.spongycastle.crypto.params.ECPublicKeyParameters r7;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        int $i0, $i1;
        org.spongycastle.crypto.DataLengthException $r10;
        org.spongycastle.math.ec.ECPoint $r12, $r13;
        org.spongycastle.math.ec.ECFieldElement $r14;

        r0 := @this: org.spongycastle.crypto.signers.ECNRSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $z0 = r0.<org.spongycastle.crypto.signers.ECNRSigner: boolean forSigning>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not initialised for verifying");

        throw $r5;

     label1:
        r6 = r0.<org.spongycastle.crypto.signers.ECNRSigner: org.spongycastle.crypto.params.ECKeyParameters key>;

        r7 = (org.spongycastle.crypto.params.ECPublicKeyParameters) r6;

        $r8 = virtualinvoke r7.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        r4 = new java.math.BigInteger;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $i1 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        if $i1 <= $i0 goto label2;

        $r10 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r10.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ECNR key.");

        throw $r10;

     label2:
        $r11 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r11);

        if $i0 < 0 goto label4;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i0 < 0 goto label3;

        return 0;

     label3:
        $r11 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r11);

        if $i0 < 0 goto label4;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i0 >= 0 goto label4;

        $r8 = virtualinvoke r7.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r12 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r13 = virtualinvoke r7.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r12 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r12, $r3, $r13, $r2);

        $r12 = virtualinvoke $r12.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke $r12.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 != 0 goto label4;

        $r14 = virtualinvoke $r12.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r3 = virtualinvoke $r14.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>(r4);

        return $z0;

     label4:
        return 0;
    }
