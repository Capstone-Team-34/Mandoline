org.spongycastle.crypto.signers.DSTU4145Signer extends java.lang.Object implements org.spongycastle.crypto.DSA
private static final java.math.BigInteger ONE
private org.spongycastle.crypto.params.ECKeyParameters key
private java.security.SecureRandom random
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.signers.DSTU4145Signer r0;

        r0 := @this: org.spongycastle.crypto.signers.DSTU4145Signer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.math.BigInteger fieldElement2Integer(java.math.BigInteger, org.spongycastle.math.ec.ECFieldElement)
    {
        java.math.BigInteger $r0, $r2;
        org.spongycastle.math.ec.ECFieldElement $r1;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: org.spongycastle.math.ec.ECFieldElement;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + -1;

        $r0 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger truncate(java.math.BigInteger,int)>($r2, $i0);

        return $r0;
    }
    private static java.math.BigInteger generateRandomInteger(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r2;
        java.security.SecureRandom $r1;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        $r2 = new java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + -1;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r1);

        return $r2;
    }
    private static org.spongycastle.math.ec.ECFieldElement hash2FieldElement(org.spongycastle.math.ec.ECCurve, byte[])
    {
        org.spongycastle.math.ec.ECCurve $r0;
        byte[] $r1;
        java.math.BigInteger $r2;
        int $i0;
        org.spongycastle.math.ec.ECFieldElement $r3;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter1: byte[];

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] reverse(byte[])>($r1);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $i0 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $r2 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger truncate(java.math.BigInteger,int)>($r2, $i0);

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r2);

        return $r3;
    }
    private static java.math.BigInteger truncate(java.math.BigInteger, int)
    {
        int $i0, $i1;
        java.math.BigInteger $r0, $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 <= $i0 goto label1;

        $r1 = <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

     label1:
        return $r0;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.signers.DSTU4145Signer r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.signers.DSTU4145Signer;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public java.math.BigInteger[] generateSignature(byte[])
    {
        org.spongycastle.crypto.signers.DSTU4145Signer r0;
        byte[] $r1;
        org.spongycastle.crypto.params.ECKeyParameters $r2;
        org.spongycastle.crypto.params.ECDomainParameters $r3;
        org.spongycastle.math.ec.ECCurve $r4;
        org.spongycastle.math.ec.ECFieldElement $r5, r6;
        boolean $z0;
        java.math.BigInteger $r7, $r9, $r12, $r14, $r15;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r8;
        org.spongycastle.math.ec.ECMultiplier $r10;
        java.security.SecureRandom $r11;
        org.spongycastle.math.ec.ECPoint $r13;
        int $i0;
        java.math.BigInteger[] $r16;

        r0 := @this: org.spongycastle.crypto.signers.DSTU4145Signer;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r5 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.math.ec.ECFieldElement hash2FieldElement(org.spongycastle.math.ec.ECCurve,byte[])>($r4, $r1);

        r6 = $r5;

        $z0 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label1;

        $r7 = <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger ONE>;

        r6 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r7);

     label1:
        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r2 = r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r8 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r2;

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r10 = virtualinvoke r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

     label2:
        $r11 = r0.<org.spongycastle.crypto.signers.DSTU4145Signer: java.security.SecureRandom random>;

        $r12 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger generateRandomInteger(java.math.BigInteger,java.security.SecureRandom)>($r7, $r11);

        $r13 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r13 = interfaceinvoke $r10.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r13, $r12);

        $r13 = virtualinvoke $r13.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r5 = virtualinvoke $r13.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $z0 = virtualinvoke $r5.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r6.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r5);

        $r14 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger fieldElement2Integer(java.math.BigInteger,org.spongycastle.math.ec.ECFieldElement)>($r7, $r5);

        $i0 = virtualinvoke $r14.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label2;

        $r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r12 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r12);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $i0 = virtualinvoke $r12.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label2;

        $r16 = newarray (java.math.BigInteger)[2];

        $r16[0] = $r14;

        $r16[1] = $r12;

        return $r16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.DSTU4145Signer r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r4;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r5;

        r0 := @this: org.spongycastle.crypto.signers.DSTU4145Signer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label3;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.signers.DSTU4145Signer: java.security.SecureRandom random> = $r3;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

     label1:
        $r4 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r1;

        r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key> = $r4;

        return;

     label2:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.signers.DSTU4145Signer: java.security.SecureRandom random> = $r3;

        goto label1;

     label3:
        $r5 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r1;

        r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key> = $r5;

        return;
    }
    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.signers.DSTU4145Signer r0;
        byte[] $r1;
        java.math.BigInteger $r2, $r3, $r6, $r10;
        int $i0;
        org.spongycastle.crypto.params.ECKeyParameters $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        org.spongycastle.math.ec.ECCurve $r7;
        org.spongycastle.math.ec.ECFieldElement $r8, r9;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r11, $r13;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r12;

        r0 := @this: org.spongycastle.crypto.signers.DSTU4145Signer;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i0 <= 0 goto label5;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.ECKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 >= 0 goto label5;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 >= 0 goto label5;

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r8 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.math.ec.ECFieldElement hash2FieldElement(org.spongycastle.math.ec.ECCurve,byte[])>($r7, $r1);

        r9 = $r8;

        $z0 = virtualinvoke $r8.<org.spongycastle.math.ec.ECFieldElement: boolean isZero()>();

        if $z0 == 0 goto label2;

        $r10 = <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger ONE>;

        r9 = virtualinvoke $r7.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger)>($r10);

     label2:
        $r11 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r4 = r0.<org.spongycastle.crypto.signers.DSTU4145Signer: org.spongycastle.crypto.params.ECKeyParameters key>;

        $r12 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r4;

        $r13 = virtualinvoke $r12.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r11 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r11, $r3, $r13, $r2);

        $r11 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 != 0 goto label5;

        $r8 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        r9 = virtualinvoke r9.<org.spongycastle.math.ec.ECFieldElement: org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement)>($r8);

        $r3 = staticinvoke <org.spongycastle.crypto.signers.DSTU4145Signer: java.math.BigInteger fieldElement2Integer(java.math.BigInteger,org.spongycastle.math.ec.ECFieldElement)>($r6, r9);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 != 0 goto label4;

        $z0 = 1;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        return 0;
    }
