org.spongycastle.crypto.signers.RandomDSAKCalculator extends java.lang.Object implements org.spongycastle.crypto.signers.DSAKCalculator
private static final java.math.BigInteger ZERO
private java.math.BigInteger q
private java.security.SecureRandom random
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.signers.RandomDSAKCalculator: java.math.BigInteger ZERO> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.signers.RandomDSAKCalculator r0;

        r0 := @this: org.spongycastle.crypto.signers.RandomDSAKCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void init(java.math.BigInteger, java.math.BigInteger, byte[])
    {
        org.spongycastle.crypto.signers.RandomDSAKCalculator r0;
        java.math.BigInteger $r1, $r2;
        byte[] $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.spongycastle.crypto.signers.RandomDSAKCalculator;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: byte[];

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Operation not supported");

        throw $r4;
    }
    public void init(java.math.BigInteger, java.security.SecureRandom)
    {
        org.spongycastle.crypto.signers.RandomDSAKCalculator r0;
        java.math.BigInteger $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.crypto.signers.RandomDSAKCalculator;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.crypto.signers.RandomDSAKCalculator: java.math.BigInteger q> = $r1;

        r0.<org.spongycastle.crypto.signers.RandomDSAKCalculator: java.security.SecureRandom random> = $r2;

        return;
    }
    public boolean isDeterministic()
    {
        org.spongycastle.crypto.signers.RandomDSAKCalculator r0;

        r0 := @this: org.spongycastle.crypto.signers.RandomDSAKCalculator;

        return 0;
    }
    public java.math.BigInteger nextK()
    {
        org.spongycastle.crypto.signers.RandomDSAKCalculator r0;
        java.math.BigInteger r1, $r3;
        int $i0, $i1;
        java.security.SecureRandom $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.signers.RandomDSAKCalculator;

        r1 = r0.<org.spongycastle.crypto.signers.RandomDSAKCalculator: java.math.BigInteger q>;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

     label1:
        r1 = new java.math.BigInteger;

        $r2 = r0.<org.spongycastle.crypto.signers.RandomDSAKCalculator: java.security.SecureRandom random>;

        specialinvoke r1.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r2);

        $r3 = <org.spongycastle.crypto.signers.RandomDSAKCalculator: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.signers.RandomDSAKCalculator: java.math.BigInteger q>;

        $i1 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 >= 0 goto label1;

        return r1;
    }
