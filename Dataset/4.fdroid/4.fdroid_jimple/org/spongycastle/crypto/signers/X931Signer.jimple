org.spongycastle.crypto.signers.X931Signer extends java.lang.Object implements org.spongycastle.crypto.Signer
public static final int TRAILER_IMPLICIT
public static final int TRAILER_RIPEMD128
public static final int TRAILER_RIPEMD160
public static final int TRAILER_SHA1
public static final int TRAILER_SHA224
public static final int TRAILER_SHA256
public static final int TRAILER_SHA384
public static final int TRAILER_SHA512
public static final int TRAILER_WHIRLPOOL
private byte[] block
private org.spongycastle.crypto.AsymmetricBlockCipher cipher
private org.spongycastle.crypto.Digest digest
private org.spongycastle.crypto.params.RSAKeyParameters kParam
private int keyBits
private int trailer
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,boolean)>($r1, $r2, 0);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, boolean)
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        boolean $z0;
        java.lang.Integer $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest> = $r2;

        if $z0 == 0 goto label1;

        r0.<org.spongycastle.crypto.signers.X931Signer: int trailer> = 188;

        return;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.signers.ISOTrailers: java.lang.Integer getTrailer(org.spongycastle.crypto.Digest)>($r2);

        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<org.spongycastle.crypto.signers.X931Signer: int trailer> = $i0;

        return;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no valid trailer for digest: ");

        $r6 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }
    private void clearBlock(byte[])
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        byte[] $r1;
        int i0, $i1;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 := @parameter0: byte[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void createSignatureBlock()
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, $r3;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = r0.<org.spongycastle.crypto.signers.X931Signer: int trailer>;

        if $i1 != 188 goto label3;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i1 = lengthof $r2;

        $i0 = $i1 - $i0;

        $i0 = $i0 + -1;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, $i0);

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

        $r2[$i1] = -68;

     label1:
        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r2[0] = 107;

        $i1 = $i0 + -2;

     label2:
        if $i1 == 0 goto label4;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r2[$i1] = -69;

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i1 = lengthof $r2;

        $i0 = $i1 - $i0;

        $i0 = $i0 + -2;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, $i0);

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -2;

        $i2 = r0.<org.spongycastle.crypto.signers.X931Signer: int trailer>;

        $i2 = $i2 >>> 8;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i1 = lengthof $r3;

        $i1 = $i1 + -1;

        $i2 = r0.<org.spongycastle.crypto.signers.X931Signer: int trailer>;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

        goto label1;

     label4:
        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i0 = $i0 + -1;

        $r2[$i0] = -70;

        return;
    }
    public byte[] generateSignature() throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        byte[] $r1, $r4;
        java.math.BigInteger r2, $r6;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        int $i0;
        org.spongycastle.crypto.params.RSAKeyParameters $r5;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void createSignatureBlock()>();

        r2 = new java.math.BigInteger;

        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i0 = lengthof $r4;

        $r1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void clearBlock(byte[])>($r1);

        $r5 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>($r6);

        $r5 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i0, r2);

        return $r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        boolean $z0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        java.math.BigInteger $r4;
        int $i0;
        byte[] $r5;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $z0 := @parameter0: boolean;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r1 = (org.spongycastle.crypto.params.RSAKeyParameters) $r2;

        r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam> = $r1;

        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam>;

        interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam>;

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        r0.<org.spongycastle.crypto.signers.X931Signer: int keyBits> = $i0;

        $i0 = r0.<org.spongycastle.crypto.signers.X931Signer: int keyBits>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $r5 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block> = $r5;

        virtualinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void reset()>();

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.X931Signer r0;
        byte[] $r1, $r5;
        java.lang.Exception r2;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        java.math.BigInteger r4, $r7;
        boolean $z0;
        org.spongycastle.crypto.params.RSAKeyParameters $r6;

        r0 := @this: org.spongycastle.crypto.signers.X931Signer;

        $r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = lengthof $r1;

        $r1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

        r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block> = $r1;

     label2:
        r4 = new java.math.BigInteger;

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $i0 = virtualinvoke r4.<java.math.BigInteger: int intValue()>();

        $i0 = $i0 & 15;

        if $i0 != 12 goto label5;

     label3:
        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void createSignatureBlock()>();

        $r1 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $i0 = lengthof $r1;

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i0, r4);

        $r5 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r5, $r1);

        $r5 = r0.<org.spongycastle.crypto.signers.X931Signer: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void clearBlock(byte[])>($r5);

        specialinvoke r0.<org.spongycastle.crypto.signers.X931Signer: void clearBlock(byte[])>($r1);

        return $z0;

     label4:
        r2 := @caughtexception;

        return 0;

     label5:
        $r6 = r0.<org.spongycastle.crypto.signers.X931Signer: org.spongycastle.crypto.params.RSAKeyParameters kParam>;

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        r4 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r4);

        $i0 = virtualinvoke r4.<java.math.BigInteger: int intValue()>();

        $i0 = $i0 & 15;

        if $i0 != 12 goto label6;

        goto label3;

     label6:
        return 0;

        catch java.lang.Exception from label1 to label2 with label4;
    }
