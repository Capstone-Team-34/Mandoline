org.spongycastle.crypto.signers.ISO9796d2PSSSigner extends java.lang.Object implements org.spongycastle.crypto.SignerWithRecovery
public static final int TRAILER_IMPLICIT
public static final int TRAILER_RIPEMD128
public static final int TRAILER_RIPEMD160
public static final int TRAILER_SHA1
public static final int TRAILER_SHA256
public static final int TRAILER_SHA384
public static final int TRAILER_SHA512
public static final int TRAILER_WHIRLPOOL
private byte[] block
private org.spongycastle.crypto.AsymmetricBlockCipher cipher
private org.spongycastle.crypto.Digest digest
private boolean fullMessage
private int hLen
private int keyBits
private byte[] mBuf
private int messageLength
private byte[] preBlock
private int preMStart
private byte[] preSig
private int preTLength
private java.security.SecureRandom random
private byte[] recoveredMessage
private int saltLength
private byte[] standardSalt
private int trailer
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $i0 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,int,boolean)>($r1, $r2, $i0, 0);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, int, boolean)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest> = $r2;

        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen> = $i1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength> = $i0;

        if $z0 == 0 goto label1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer> = 188;

        return;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.signers.ISOTrailers: java.lang.Integer getTrailer(org.spongycastle.crypto.Digest)>($r2);

        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer> = $i0;

        return;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no valid trailer for digest: ");

        $r6 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }
    private void ItoOSP(int, byte[])
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r1[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r1[2] = $b2;

        $i0 = $i0 >>> 0;

        $b2 = (byte) $i0;

        $r1[3] = $b2;

        return;
    }
    private void LtoOSP(long, byte[])
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        long $l0, $l1;
        byte[] $r1;
        int $i2;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $l0 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $l1 = $l0 >>> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[0] = $b3;

        $l1 = $l0 >>> 48;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[1] = $b3;

        $l1 = $l0 >>> 40;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[2] = $b3;

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[3] = $b3;

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[4] = $b3;

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[5] = $b3;

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r1[6] = $b3;

        $l0 = $l0 >>> 0;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        $r1[7] = $b3;

        return;
    }
    private void clearBlock(byte[])
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1;
        int i0, $i1;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private boolean isSameAs(byte[], byte[])
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1, $r2;
        boolean z0;
        int $i0, $i1;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        z0 = 1;

        $i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        z0 = 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $b2 = $r1[$i0];

        $b3 = $r2[$i0];

        if $b2 == $b3 goto label3;

        z0 = 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return z0;
    }
    private byte[] maskGeneratorFunction1(byte[], int, int, int)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1, r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r4 = newarray (byte)[$i2];

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        r3 = newarray (byte)[$i3];

        r2 = newarray (byte)[4];

        $i3 = 0;

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

     label1:
        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i4 = $i2 / $i4;

        if $i3 >= $i4 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i4 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i4);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i4 = $i4 * $i3;

        $i5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i4, $i5);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i4 = $i4 * $i3;

        if $i4 >= $i2 goto label3;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i0 = $i0 * $i3;

        $i1 = lengthof r4;

        $i2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i2 = $i2 * $i3;

        $i1 = $i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i0, $i1);

     label3:
        return r4;
    }
    public byte[] generateSignature() throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] r1, r2, $r4, $r5;
        int i0, $i1, $i3, $i4;
        org.spongycastle.crypto.Digest $r3;
        long $l2;
        byte $b5, $b6;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.AsymmetricBlockCipher $r7;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        r1 = newarray (byte)[8];

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        $i1 = $i1 * 8;

        $l2 = (long) $i1;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void LtoOSP(long,byte[])>($l2, r1);

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i1 = lengthof r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i1 = lengthof r2;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i1);

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] standardSalt>;

        if r2 == null goto label4;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] standardSalt>;

     label1:
        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i1 = lengthof r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i1 = 2;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer>;

        if i0 != 188 goto label2;

        $i1 = 1;

     label2:
        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        i0 = lengthof $r4;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        i0 = i0 - $i3;

        $i3 = lengthof r1;

        i0 = i0 - $i3;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        i0 = i0 - $i3;

        i0 = i0 - $i1;

        i0 = i0 + -1;

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $r4[i0] = 1;

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i3 = i0 + 1;

        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, $i3, $i4);

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        i0 = i0 + 1;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        i0 = i0 + $i3;

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, i0, $i3);

        i0 = lengthof r2;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i3 = lengthof r1;

        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i3 = $i3 - $i4;

        $i3 = $i3 - $i1;

        r1 = specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r2, 0, i0, $i3);

        i0 = 0;

     label3:
        $i3 = lengthof r1;

        if i0 == $i3 goto label5;

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $b5 = $r4[i0];

        $b6 = r1[i0];

        $i3 = $b5 ^ $b6;

        $b5 = (byte) $i3;

        $r4[i0] = $b5;

        i0 = i0 + 1;

        goto label3;

     label4:
        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength>;

        r1 = newarray (byte)[$i1];

        $r6 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: java.security.SecureRandom random>;

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        goto label1;

     label5:
        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        i0 = lengthof $r4;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        i0 = i0 - $i3;

        $i1 = i0 - $i1;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i1, i0);

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer>;

        if $i1 != 188 goto label8;

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof r1;

        $i1 = $i1 + -1;

        r2[$i1] = -68;

     label6:
        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $b5 = r2[0];

        $i1 = $b5 & 127;

        $b5 = (byte) $i1;

        r2[0] = $b5;

        $r7 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof r1;

        r2 = interfaceinvoke $r7.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i1);

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        r1 = newarray (byte)[$i1];

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage> = r1;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        i0 = lengthof r1;

        if $i1 > i0 goto label9;

        $z0 = 1;

     label7:
        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean fullMessage> = $z0;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i1);

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>(r1);

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>(r1);

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength> = 0;

        return r2;

     label8:
        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof r1;

        $i1 = $i1 + -2;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer>;

        i0 = i0 >>> 8;

        $b5 = (byte) i0;

        r2[$i1] = $b5;

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof r1;

        $i1 = $i1 + -1;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer>;

        $b5 = (byte) i0;

        r2[$i1] = $b5;

        goto label6;

     label9:
        $z0 = 0;

        goto label7;
    }
    public byte[] getRecoveredMessage()
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        return r1;
    }
    public boolean hasFullMessage()
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        boolean z0;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        z0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean fullMessage>;

        return z0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        int i0, $i1, $i2;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.RSAKeyParameters r3;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        java.math.BigInteger $r6;
        byte[] $r7;
        org.spongycastle.crypto.Digest $r8;
        org.spongycastle.crypto.params.ParametersWithSalt r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength>;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label3;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: java.security.SecureRandom random> = $r4;

     label1:
        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r3);

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int keyBits> = $i1;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int keyBits>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        $r7 = newarray (byte)[$i1];

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block> = $r7;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int trailer>;

        if $i1 != 188 goto label5;

        $r7 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof $r7;

        $r8 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i2 = interfaceinvoke $r8.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 - $i2;

        i0 = $i1 - i0;

        i0 = i0 + -1;

        i0 = i0 + -1;

        $r7 = newarray (byte)[i0];

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf> = $r7;

     label2:
        virtualinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void reset()>();

        return;

     label3:
        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithSalt;

        if $z1 == 0 goto label4;

        r9 = (org.spongycastle.crypto.params.ParametersWithSalt) $r1;

        $r1 = virtualinvoke r9.<org.spongycastle.crypto.params.ParametersWithSalt: org.spongycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        $r7 = virtualinvoke r9.<org.spongycastle.crypto.params.ParametersWithSalt: byte[] getSalt()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] standardSalt> = $r7;

        $r7 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] standardSalt>;

        i0 = lengthof $r7;

        $r7 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] standardSalt>;

        $i1 = lengthof $r7;

        $i2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength>;

        if $i1 == $i2 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fixed salt is of wrong length");

        throw $r10;

     label4:
        r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        if $z0 == 0 goto label1;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: java.security.SecureRandom random> = $r4;

        goto label1;

     label5:
        $r7 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] block>;

        $i1 = lengthof $r7;

        $r8 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i2 = interfaceinvoke $r8.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 - $i2;

        i0 = $i1 - i0;

        i0 = i0 + -1;

        i0 = i0 + -2;

        $r7 = newarray (byte)[i0];

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf> = $r7;

        goto label2;
    }
    public void reset()
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength> = 0;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r2);

     label1:
        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        if $r2 == null goto label2;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r2);

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage> = null;

     label2:
        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean fullMessage> = 0;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig>;

        if $r2 == null goto label3;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig> = null;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preBlock>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r2);

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preBlock> = null;

     label3:
        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte $b0;
        int $i1, $i2;
        byte[] $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig>;

        if $r1 != null goto label1;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label1;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $i2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        $i1 = $i2 + 1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength> = $i1;

        $r1[$i2] = $b0;

        return;

     label1:
        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        byte $b4;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig>;

        if $r2 != null goto label2;

     label1:
        if $i1 <= 0 goto label2;

        $i2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        $r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label2;

        $b4 = $r1[$i0];

        virtualinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void update(byte)>($b4);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        if $i1 <= 0 goto label3;

        $r3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

     label3:
        return;
    }
    public void updateWithRecoveredMessage(byte[]) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1, r2, r3, $r11, $r12;
        int i0, $i1, $i3, $i4, $i5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        byte $b2, $b6;
        org.spongycastle.crypto.Digest $r5;
        java.lang.Integer $r6;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.IllegalArgumentException $r10;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        $r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        i0 = lengthof $r1;

        r2 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, 0, i0);

        r3 = r2;

        i0 = lengthof r2;

        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int keyBits>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        if i0 >= $i1 goto label01;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int keyBits>;

        i0 = i0 + 7;

        i0 = i0 / 8;

        r3 = newarray (byte)[i0];

        i0 = lengthof r3;

        $i1 = lengthof r2;

        i0 = i0 - $i1;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, $i1);

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>(r2);

     label01:
        i0 = lengthof r3;

        i0 = i0 + -1;

        $b2 = r3[i0];

        i0 = $b2 & 255;

        i0 = i0 ^ 188;

        if i0 != 0 goto label04;

        i0 = 1;

     label02:
        $i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        r2 = newarray (byte)[$i1];

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i1 = lengthof r3;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i1 = $i1 - $i3;

        $i1 = $i1 - i0;

        $i3 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i4 = lengthof r3;

        $i5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        $i4 = $i4 - $i5;

        $i4 = $i4 - i0;

        r2 = specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r3, $i1, $i3, $i4);

        $i1 = 0;

     label03:
        $i3 = lengthof r2;

        if $i1 == $i3 goto label07;

        $b2 = r3[$i1];

        $b6 = r2[$i1];

        $i3 = $b2 ^ $b6;

        $b2 = (byte) $i3;

        r3[$i1] = $b2;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        i0 = lengthof r3;

        i0 = i0 + -2;

        $b2 = r3[i0];

        i0 = $b2 & 255;

        i0 = i0 << 8;

        $i1 = lengthof r3;

        $i1 = $i1 + -1;

        $b2 = r3[$i1];

        $i1 = $b2 & 255;

        i0 = i0 | $i1;

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $r6 = staticinvoke <org.spongycastle.crypto.signers.ISOTrailers: java.lang.Integer getTrailer(org.spongycastle.crypto.Digest)>($r5);

        if $r6 == null goto label05;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if i0 == $i1 goto label06;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signer initialised with wrong digest for trailer ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label05:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unrecognised hash in signature");

        throw $r10;

     label06:
        i0 = 2;

        goto label02;

     label07:
        $b2 = r3[0];

        $i1 = $b2 & 127;

        $b2 = (byte) $i1;

        r3[0] = $b2;

        $i1 = 0;

     label08:
        $i3 = lengthof r3;

        if $i1 == $i3 goto label09;

        $b2 = r3[$i1];

        if $b2 != 1 goto label12;

     label09:
        $i1 = $i1 + 1;

        $i3 = lengthof r3;

        if $i1 < $i3 goto label10;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>(r3);

     label10:
        if $i1 <= 1 goto label13;

        $z0 = 1;

     label11:
        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean fullMessage> = $z0;

        $i3 = lengthof r2;

        $i3 = $i3 - $i1;

        $i4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength>;

        $i3 = $i3 - $i4;

        r2 = newarray (byte)[$i3];

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage> = r2;

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $r11 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i3 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i1, r2, 0, $i3);

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $r11 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        $r12 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i3 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r11, 0, $i3);

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig> = $r1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preBlock> = r3;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int preMStart> = $i1;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int preTLength> = i0;

        return;

     label12:
        $i1 = $i1 + 1;

        goto label08;

     label13:
        $z0 = 0;

        goto label11;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.crypto.signers.ISO9796d2PSSSigner r0;
        byte[] $r1, r2, r4, $r6;
        java.lang.Exception $r3;
        int i0, i1, $i2;
        org.spongycastle.crypto.Digest $r5;
        long $l3;
        boolean z0;
        byte $b4, $b5;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.spongycastle.crypto.signers.ISO9796d2PSSSigner;

        $r1 := @parameter0: byte[];

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int hLen>;

        r4 = newarray (byte)[i0];

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r4, 0);

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig>;

        if r2 != null goto label07;

     label01:
        virtualinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void updateWithRecoveredMessage(byte[])>($r1);

     label02:
        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preBlock>;

        i1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int preMStart>;

        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int preTLength>;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig> = null;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preBlock> = null;

        r2 = newarray (byte)[8];

        $r6 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i2 = lengthof $r6;

        $i2 = $i2 * 8;

        $l3 = (long) $i2;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void LtoOSP(long,byte[])>($l3, r2);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i2 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i2);

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i2 = lengthof r2;

        if $i2 == 0 goto label03;

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $r6 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i2 = lengthof $r6;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i2);

     label03:
        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        $i2 = lengthof r4;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i2);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        $i2 = lengthof r4;

        i1 = $i2 + i1;

        $i2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int saltLength>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, i1, $i2);

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        i1 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r4 = newarray (byte)[i1];

        $r5 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r4, 0);

        i1 = lengthof $r1;

        i0 = i1 - i0;

        i1 = lengthof r4;

        i0 = i0 - i1;

        z0 = 1;

        i1 = 0;

     label04:
        $i2 = lengthof r4;

        if i1 == $i2 goto label08;

        $b4 = r4[i1];

        $i2 = i0 + i1;

        $b5 = $r1[$i2];

        if $b4 == $b5 goto label05;

        z0 = 0;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        $r3 := @caughtexception;

        return 0;

     label07:
        r2 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] preSig>;

        z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>(r2, $r1);

        if z0 != 0 goto label02;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("updateWithRecoveredMessage called on different signature");

        throw $r7;

     label08:
        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r1);

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>(r4);

        if z0 != 0 goto label09;

        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean fullMessage> = 0;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label09:
        i0 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength>;

        if i0 == 0 goto label11;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        r4 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] recoveredMessage>;

        z0 = specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: boolean isSameAs(byte[],byte[])>($r1, r4);

        if z0 != 0 goto label10;

        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r1);

        return 0;

     label10:
        r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: int messageLength> = 0;

     label11:
        $r1 = r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: byte[] mBuf>;

        specialinvoke r0.<org.spongycastle.crypto.signers.ISO9796d2PSSSigner: void clearBlock(byte[])>($r1);

        return 1;

        catch java.lang.Exception from label01 to label02 with label06;
    }
