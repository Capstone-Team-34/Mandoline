org.spongycastle.crypto.engines.ISAACEngine extends java.lang.Object implements org.spongycastle.crypto.StreamCipher
private int a
private int b
private int c
private int[] engineState
private int index
private boolean initialised
private byte[] keyStream
private int[] results
private final int sizeL
private final int stateArraySize
private byte[] workingKey
    public void <init>()
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int sizeL> = 8;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int stateArraySize> = 256;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState> = null;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results> = null;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int b> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int c> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int index> = 0;

        $r1 = newarray (byte)[1024];

        r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r1;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] workingKey> = null;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: boolean initialised> = 0;

        return;
    }
    private void isaac()
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $i2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int b>;

        i0 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int c>;

        i0 = i0 + 1;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int c> = i0;

        $i2 = $i2 + i0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int b> = $i2;

        $i2 = 0;

     label1:
        if $i2 >= 256 goto label7;

        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        i0 = $r1[$i2];

        i1 = $i2 & 3;

        lookupswitch(i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label2;
        };

     label2:
        i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i3 = $i2 + 128;

        $i3 = $i3 & 255;

        $i3 = $r1[$i3];

        i1 = i1 + $i3;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = i1;

        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        i1 = i0 >>> 2;

        i1 = i1 & 255;

        i1 = $r2[i1];

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        i1 = i1 + $i3;

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int b>;

        i1 = i1 + $i3;

        $r1[$i2] = i1;

        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        i1 = i1 >>> 10;

        i1 = i1 & 255;

        i1 = $r2[i1];

        i0 = i1 + i0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int b> = i0;

        $r1[$i2] = i0;

        $i2 = $i2 + 1;

        goto label1;

     label3:
        i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = $i3 << 13;

        i1 = i1 ^ $i3;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = i1;

        goto label2;

     label4:
        i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = $i3 >>> 6;

        i1 = i1 ^ $i3;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = i1;

        goto label2;

     label5:
        i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = $i3 << 2;

        i1 = i1 ^ $i3;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = i1;

        goto label2;

     label6:
        i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int a>;

        $i3 = $i3 >>> 16;

        i1 = i1 ^ $i3;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = i1;

        goto label2;

     label7:
        return;
    }
    private void mix(int[])
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $r1 := @parameter0: int[];

        $i0 = $r1[0];

        $i1 = $r1[1];

        $i1 = $i1 << 11;

        $i0 = $i0 ^ $i1;

        $r1[0] = $i0;

        $i0 = $r1[3];

        $i1 = $r1[0];

        $i0 = $i0 + $i1;

        $r1[3] = $i0;

        $i0 = $r1[1];

        $i1 = $r1[2];

        $i0 = $i0 + $i1;

        $r1[1] = $i0;

        $i0 = $r1[1];

        $i1 = $r1[2];

        $i1 = $i1 >>> 2;

        $i0 = $i0 ^ $i1;

        $r1[1] = $i0;

        $i0 = $r1[4];

        $i1 = $r1[1];

        $i0 = $i0 + $i1;

        $r1[4] = $i0;

        $i0 = $r1[2];

        $i1 = $r1[3];

        $i0 = $i0 + $i1;

        $r1[2] = $i0;

        $i0 = $r1[2];

        $i1 = $r1[3];

        $i1 = $i1 << 8;

        $i0 = $i0 ^ $i1;

        $r1[2] = $i0;

        $i0 = $r1[5];

        $i1 = $r1[2];

        $i0 = $i0 + $i1;

        $r1[5] = $i0;

        $i0 = $r1[3];

        $i1 = $r1[4];

        $i0 = $i0 + $i1;

        $r1[3] = $i0;

        $i0 = $r1[3];

        $i1 = $r1[4];

        $i1 = $i1 >>> 16;

        $i0 = $i0 ^ $i1;

        $r1[3] = $i0;

        $i0 = $r1[6];

        $i1 = $r1[3];

        $i0 = $i0 + $i1;

        $r1[6] = $i0;

        $i0 = $r1[4];

        $i1 = $r1[5];

        $i0 = $i0 + $i1;

        $r1[4] = $i0;

        $i0 = $r1[4];

        $i1 = $r1[5];

        $i1 = $i1 << 10;

        $i0 = $i0 ^ $i1;

        $r1[4] = $i0;

        $i0 = $r1[7];

        $i1 = $r1[4];

        $i0 = $i0 + $i1;

        $r1[7] = $i0;

        $i0 = $r1[5];

        $i1 = $r1[6];

        $i0 = $i0 + $i1;

        $r1[5] = $i0;

        $i0 = $r1[5];

        $i1 = $r1[6];

        $i1 = $i1 >>> 4;

        $i0 = $i0 ^ $i1;

        $r1[5] = $i0;

        $i0 = $r1[0];

        $i1 = $r1[5];

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        $i0 = $r1[6];

        $i1 = $r1[7];

        $i0 = $i0 + $i1;

        $r1[6] = $i0;

        $i0 = $r1[6];

        $i1 = $r1[7];

        $i1 = $i1 << 8;

        $i0 = $i0 ^ $i1;

        $r1[6] = $i0;

        $i0 = $r1[1];

        $i1 = $r1[6];

        $i0 = $i0 + $i1;

        $r1[1] = $i0;

        $i0 = $r1[7];

        $i1 = $r1[0];

        $i0 = $i0 + $i1;

        $r1[7] = $i0;

        $i0 = $r1[7];

        $i1 = $r1[0];

        $i1 = $i1 >>> 9;

        $i0 = $i0 ^ $i1;

        $r1[7] = $i0;

        $i0 = $r1[2];

        $i1 = $r1[7];

        $i0 = $i0 + $i1;

        $r1[2] = $i0;

        $i0 = $r1[0];

        $i1 = $r1[1];

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        return;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        byte[] $r1, r3;
        int[] r2, $r4;
        int $i0, i1, $i2, $i3, $i4;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] workingKey> = $r1;

        r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        if r2 != null goto label01;

        r2 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState> = r2;

     label01:
        r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        if r2 != null goto label02;

        r2 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results> = r2;

     label02:
        i1 = 0;

     label03:
        if i1 >= 256 goto label04;

        r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $r4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $r4[i1] = 0;

        r2[i1] = 0;

        i1 = i1 + 1;

        goto label03;

     label04:
        r0.<org.spongycastle.crypto.engines.ISAACEngine: int c> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int b> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int a> = 0;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int index> = 0;

        i1 = lengthof $r1;

        $i0 = lengthof $r1;

        $i0 = $i0 & 3;

        i1 = i1 + $i0;

        r3 = newarray (byte)[i1];

        i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, i1);

        i1 = 0;

     label05:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label06;

        r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $i2 = i1 >>> 2;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>(r3, i1);

        r2[$i2] = $i0;

        i1 = i1 + 4;

        goto label05;

     label06:
        r2 = newarray (int)[8];

        i1 = 0;

     label07:
        if i1 >= 8 goto label08;

        r2[i1] = -1640531527;

        i1 = i1 + 1;

        goto label07;

     label08:
        i1 = 0;

     label09:
        if i1 >= 4 goto label10;

        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void mix(int[])>(r2);

        i1 = i1 + 1;

        goto label09;

     label10:
        i1 = 0;

     label11:
        if i1 >= 2 goto label20;

        $i0 = 0;

     label12:
        if $i0 >= 256 goto label19;

        $i2 = 0;

     label13:
        if $i2 >= 8 goto label16;

        $i3 = r2[$i2];

        if i1 >= 1 goto label15;

        $r4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $i4 = $i0 + $i2;

        $i4 = $r4[$i4];

     label14:
        $i3 = $i4 + $i3;

        r2[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label13;

     label15:
        $r4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i4 = $i0 + $i2;

        $i4 = $r4[$i4];

        goto label14;

     label16:
        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void mix(int[])>(r2);

        $i2 = 0;

     label17:
        if $i2 >= 8 goto label18;

        $r4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i3 = $i0 + $i2;

        $i4 = r2[$i2];

        $r4[$i3] = $i4;

        $i2 = $i2 + 1;

        goto label17;

     label18:
        $i0 = $i0 + 8;

        goto label12;

     label19:
        i1 = i1 + 1;

        goto label11;

     label20:
        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void isaac()>();

        r0.<org.spongycastle.crypto.engines.ISAACEngine: boolean initialised> = 1;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        return "ISAAC";
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.params.KeyParameter r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to ISAAC init - ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r6 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void setKey(byte[])>($r7);

        return;
    }
    public int processBytes(byte[], int, int, byte[], int)
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        byte[] $r1, $r2, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;
        int[] $r8;
        byte $b6, $b7;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $z0 = r0.<org.spongycastle.crypto.engines.ISAACEngine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i3 = $i0 + $i1;

        $i4 = lengthof $r1;

        if $i3 <= $i4 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        $i3 = 0;

     label4:
        if $i3 >= $i1 goto label6;

        $i4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        if $i4 != 0 goto label5;

        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void isaac()>();

        $r8 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $r9 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int[])>($r8);

        r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r9;

     label5:
        $i4 = $i3 + $i2;

        $r9 = r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] keyStream>;

        $i5 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        $b6 = $r9[$i5];

        $i5 = $i3 + $i0;

        $b7 = $r1[$i5];

        $i5 = $b6 ^ $b7;

        $b6 = (byte) $i5;

        $r2[$i4] = $b6;

        $i4 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        $i4 = $i4 + 1;

        $i4 = $i4 & 1023;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int index> = $i4;

        $i3 = $i3 + 1;

        goto label4;

     label6:
        return $i1;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void setKey(byte[])>($r1);

        return;
    }
    public byte returnByte(byte)
    {
        org.spongycastle.crypto.engines.ISAACEngine r0;
        byte $b0, $b2;
        int $i1;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.crypto.engines.ISAACEngine;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        if $i1 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.crypto.engines.ISAACEngine: void isaac()>();

        $r2 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int[] results>;

        $r1 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int[])>($r2);

        r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: byte[] keyStream>;

        $i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        $b2 = $r1[$i1];

        $i1 = $b2 ^ $b0;

        $b0 = (byte) $i1;

        $i1 = r0.<org.spongycastle.crypto.engines.ISAACEngine: int index>;

        $i1 = $i1 + 1;

        $i1 = $i1 & 1023;

        r0.<org.spongycastle.crypto.engines.ISAACEngine: int index> = $i1;

        return $b0;
    }
