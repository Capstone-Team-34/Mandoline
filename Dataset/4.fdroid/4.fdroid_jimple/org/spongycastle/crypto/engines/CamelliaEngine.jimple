org.spongycastle.crypto.engines.CamelliaEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static final int MASK8
private static final int[] SBOX1_1110
private static final int[] SBOX2_0222
private static final int[] SBOX3_3033
private static final int[] SBOX4_4404
private static final int[] SIGMA
private boolean _keyIs128
private boolean initialised
private int[] ke
private int[] kw
private int[] state
private int[] subkey
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[12];

        $r0[0] = -1600231809;

        $r0[1] = 1003262091;

        $r0[2] = -1233459112;

        $r0[3] = 1286239154;

        $r0[4] = -957401297;

        $r0[5] = -380665154;

        $r0[6] = 1426019237;

        $r0[7] = -237801700;

        $r0[8] = 283453434;

        $r0[9] = -563598051;

        $r0[10] = -1336506174;

        $r0[11] = -1276722691;

        <org.spongycastle.crypto.engines.CamelliaEngine: int[] SIGMA> = $r0;

        $r0 = newarray (int)[256];

        $r0[0] = 1886416896;

        $r0[1] = -2105376256;

        $r0[2] = 741092352;

        $r0[3] = -320017408;

        $r0[4] = -1280068864;

        $r0[5] = 656877312;

        $r0[6] = -1061109760;

        $r0[7] = -437918464;

        $r0[8] = -454761472;

        $r0[9] = -2054847232;

        $r0[10] = 1465341696;

        $r0[11] = 892679424;

        $r0[12] = -353703424;

        $r0[13] = 202116096;

        $r0[14] = -1364283904;

        $r0[15] = 1094795520;

        $r0[16] = 589505280;

        $r0[17] = -269488384;

        $r0[18] = 1802201856;

        $r0[19] = -1819045120;

        $r0[20] = 1162167552;

        $r0[21] = 421075200;

        $r0[22] = -1515870976;

        $r0[23] = 555819264;

        $r0[24] = -303174400;

        $r0[25] = 235802112;

        $r0[26] = 1330597632;

        $r0[27] = 1313754624;

        $r0[28] = 488447232;

        $r0[29] = 1701143808;

        $r0[30] = -1835888128;

        $r0[31] = -1111638784;

        $r0[32] = -2038004224;

        $r0[33] = -1195853824;

        $r0[34] = -1347440896;

        $r0[35] = -1886417152;

        $r0[36] = 2088532992;

        $r0[37] = -336860416;

        $r0[38] = 522133248;

        $r0[39] = -825307648;

        $r0[40] = 1044266496;

        $r0[41] = 808464384;

        $r0[42] = -589505536;

        $r0[43] = 1600085760;

        $r0[44] = 1583242752;

        $r0[45] = -976894720;

        $r0[46] = 185273088;

        $r0[47] = 437918208;

        $r0[48] = -1499027968;

        $r0[49] = -505290496;

        $r0[50] = 960051456;

        $r0[51] = -892679680;

        $r0[52] = -707406592;

        $r0[53] = 1195853568;

        $r0[54] = 1566399744;

        $r0[55] = 1027423488;

        $r0[56] = -640034560;

        $r0[57] = 16843008;

        $r0[58] = 1515870720;

        $r0[59] = -690563584;

        $r0[60] = 1364283648;

        $r0[61] = 1448498688;

        $r0[62] = 1819044864;

        $r0[63] = 1296911616;

        $r0[64] = -1953789184;

        $r0[65] = 218959104;

        $r0[66] = -1701144064;

        $r0[67] = 1717986816;

        $r0[68] = -67372288;

        $r0[69] = -858993664;

        $r0[70] = -1330597888;

        $r0[71] = 757935360;

        $r0[72] = 1953788928;

        $r0[73] = 303174144;

        $r0[74] = 724249344;

        $r0[75] = 538976256;

        $r0[76] = -252645376;

        $r0[77] = -1313754880;

        $r0[78] = -2071690240;

        $r0[79] = -1717987072;

        $r0[80] = -538976512;

        $r0[81] = 1280068608;

        $r0[82] = -875836672;

        $r0[83] = -1027423744;

        $r0[84] = 875836416;

        $r0[85] = 2122219008;

        $r0[86] = 1987474944;

        $r0[87] = 84215040;

        $r0[88] = 1835887872;

        $r0[89] = -1212696832;

        $r0[90] = -1448498944;

        $r0[91] = 825307392;

        $r0[92] = -774778624;

        $r0[93] = 387389184;

        $r0[94] = 67372032;

        $r0[95] = -673720576;

        $r0[96] = 336860160;

        $r0[97] = 1482184704;

        $r0[98] = 976894464;

        $r0[99] = 1633771776;

        $r0[100] = -555819520;

        $r0[101] = 454761216;

        $r0[102] = 286331136;

        $r0[103] = 471604224;

        $r0[104] = 842150400;

        $r0[105] = 252645120;

        $r0[106] = -1667458048;

        $r0[107] = 370546176;

        $r0[108] = 1397969664;

        $r0[109] = 404232192;

        $r0[110] = -218959360;

        $r0[111] = 572662272;

        $r0[112] = -16843264;

        $r0[113] = 1145324544;

        $r0[114] = -808464640;

        $r0[115] = -1296911872;

        $r0[116] = -1010580736;

        $r0[117] = -1246382848;

        $r0[118] = 2054846976;

        $r0[119] = -1852731136;

        $r0[120] = 606348288;

        $r0[121] = 134744064;

        $r0[122] = -387389440;

        $r0[123] = -1465341952;

        $r0[124] = 1616928768;

        $r0[125] = -50529280;

        $r0[126] = 1768515840;

        $r0[127] = 1347440640;

        $r0[128] = -1431655936;

        $r0[129] = -791621632;

        $r0[130] = -1600086016;

        $r0[131] = 2105376000;

        $r0[132] = -1583243008;

        $r0[133] = -1987475200;

        $r0[134] = 1650614784;

        $r0[135] = -1751673088;

        $r0[136] = 1414812672;

        $r0[137] = 1532713728;

        $r0[138] = 505290240;

        $r0[139] = -1785359104;

        $r0[140] = -522133504;

        $r0[141] = -256;

        $r0[142] = 1684300800;

        $r0[143] = -757935616;

        $r0[144] = 269488128;

        $r0[145] = -993737728;

        $r0[146] = 0;

        $r0[147] = 1212696576;

        $r0[148] = -1549556992;

        $r0[149] = -134744320;

        $r0[150] = 1970631936;

        $r0[151] = -606348544;

        $r0[152] = -1970632192;

        $r0[153] = 50529024;

        $r0[154] = -421075456;

        $r0[155] = -623191552;

        $r0[156] = 151587072;

        $r0[157] = 1061109504;

        $r0[158] = -572662528;

        $r0[159] = -1802202112;

        $r0[160] = -2021161216;

        $r0[161] = 1549556736;

        $r0[162] = -2088533248;

        $r0[163] = 33686016;

        $r0[164] = -842150656;

        $r0[165] = 1246382592;

        $r0[166] = -1869574144;

        $r0[167] = 858993408;

        $r0[168] = 1936945920;

        $r0[169] = 1734829824;

        $r0[170] = -151587328;

        $r0[171] = -202116352;

        $r0[172] = -1650615040;

        $r0[173] = 2139062016;

        $r0[174] = -1077952768;

        $r0[175] = -488447488;

        $r0[176] = 1381126656;

        $r0[177] = -1684301056;

        $r0[178] = -656877568;

        $r0[179] = 640034304;

        $r0[180] = -926365696;

        $r0[181] = 926365440;

        $r0[182] = -960051712;

        $r0[183] = 993737472;

        $r0[184] = -2122219264;

        $r0[185] = -1768516096;

        $r0[186] = 1869573888;

        $r0[187] = 1263225600;

        $r0[188] = 320017152;

        $r0[189] = -1094795776;

        $r0[190] = 1667457792;

        $r0[191] = 774778368;

        $r0[192] = -370546432;

        $r0[193] = 2038003968;

        $r0[194] = -1482184960;

        $r0[195] = -1936946176;

        $r0[196] = -1616929024;

        $r0[197] = 1852730880;

        $r0[198] = -1128481792;

        $r0[199] = -1903260160;

        $r0[200] = 690563328;

        $r0[201] = -168430336;

        $r0[202] = -101058304;

        $r0[203] = -1229539840;

        $r0[204] = 791621376;

        $r0[205] = -33686272;

        $r0[206] = -1263225856;

        $r0[207] = 1499027712;

        $r0[208] = 2021160960;

        $r0[209] = -1734830080;

        $r0[210] = 101058048;

        $r0[211] = 1785358848;

        $r0[212] = -404232448;

        $r0[213] = 1179010560;

        $r0[214] = 1903259904;

        $r0[215] = -1162167808;

        $r0[216] = -724249600;

        $r0[217] = 623191296;

        $r0[218] = -1414812928;

        $r0[219] = 1111638528;

        $r0[220] = -2004318208;

        $r0[221] = -1566400000;

        $r0[222] = -1920103168;

        $r0[223] = -84215296;

        $r0[224] = 1920102912;

        $r0[225] = 117901056;

        $r0[226] = -1179010816;

        $r0[227] = 1431655680;

        $r0[228] = -117901312;

        $r0[229] = -286331392;

        $r0[230] = -1397969920;

        $r0[231] = 168430080;

        $r0[232] = 909522432;

        $r0[233] = 1229539584;

        $r0[234] = 707406336;

        $r0[235] = 1751672832;

        $r0[236] = 1010580480;

        $r0[237] = 943208448;

        $r0[238] = -235802368;

        $r0[239] = -1532713984;

        $r0[240] = 1077952512;

        $r0[241] = 673720320;

        $r0[242] = -741092608;

        $r0[243] = 2071689984;

        $r0[244] = -1145324800;

        $r0[245] = -909522688;

        $r0[246] = 1128481536;

        $r0[247] = -1044266752;

        $r0[248] = 353703168;

        $r0[249] = -471604480;

        $r0[250] = -1381126912;

        $r0[251] = -185273344;

        $r0[252] = 2004317952;

        $r0[253] = -943208704;

        $r0[254] = -2139062272;

        $r0[255] = -1633772032;

        <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX1_1110> = $r0;

        $r0 = newarray (int)[256];

        $r0[0] = 1886388336;

        $r0[1] = 741081132;

        $r0[2] = -1280114509;

        $r0[3] = -1061158720;

        $r0[4] = -454819612;

        $r0[5] = 1465319511;

        $r0[6] = -353763094;

        $r0[7] = -1364328274;

        $r0[8] = 589496355;

        $r0[9] = 1802174571;

        $r0[10] = 1162149957;

        $r0[11] = -1515913051;

        $r0[12] = -303234835;

        $r0[13] = 1330577487;

        $r0[14] = 488439837;

        $r0[15] = -1835925358;

        $r0[16] = -2038038394;

        $r0[17] = -1347485521;

        $r0[18] = 2088501372;

        $r0[19] = 522125343;

        $r0[20] = 1044250686;

        $r0[21] = -589561636;

        $r0[22] = 1583218782;

        $r0[23] = 185270283;

        $r0[24] = -1499070298;

        $r0[25] = 960036921;

        $r0[26] = -707460907;

        $r0[27] = 1566376029;

        $r0[28] = -640089895;

        $r0[29] = 1515847770;

        $r0[30] = 1364262993;

        $r0[31] = 1819017324;

        $r0[32] = -1953824629;

        $r0[33] = -1701183334;

        $r0[34] = -67436293;

        $r0[35] = -1330642768;

        $r0[36] = 1953759348;

        $r0[37] = 724238379;

        $r0[38] = -252706576;

        $r0[39] = -2071723900;

        $r0[40] = -539033377;

        $r0[41] = -875888437;

        $r0[42] = 875823156;

        $r0[43] = 1987444854;

        $r0[44] = 1835860077;

        $r0[45] = -1448542039;

        $r0[46] = -774831919;

        $r0[47] = 67371012;

        $r0[48] = 336855060;

        $r0[49] = 976879674;

        $r0[50] = -555876130;

        $r0[51] = 286326801;

        $r0[52] = 842137650;

        $r0[53] = -1667497828;

        $r0[54] = 1397948499;

        $r0[55] = -219021070;

        $r0[56] = -16908034;

        $r0[57] = -808517425;

        $r0[58] = -1010630461;

        $r0[59] = 2054815866;

        $r0[60] = 606339108;

        $r0[61] = -387448600;

        $r0[62] = 1616904288;

        $r0[63] = 1768489065;

        $r0[64] = -1431699286;

        $r0[65] = -1600126816;

        $r0[66] = -1583284063;

        $r0[67] = 1650589794;

        $r0[68] = 1414791252;

        $r0[69] = 505282590;

        $r0[70] = -522190624;

        $r0[71] = 1684275300;

        $r0[72] = 269484048;

        $r0[73] = 0;

        $r0[74] = -1549598557;

        $r0[75] = 1970602101;

        $r0[76] = -1970667382;

        $r0[77] = -421134106;

        $r0[78] = 151584777;

        $r0[79] = -572718883;

        $r0[80] = -2021195641;

        $r0[81] = -2088566653;

        $r0[82] = -842202931;

        $r0[83] = -1869610864;

        $r0[84] = 1936916595;

        $r0[85] = -151650058;

        $r0[86] = -1650655075;

        $r0[87] = -1078001473;

        $r0[88] = 1381105746;

        $r0[89] = -656932648;

        $r0[90] = -926416696;

        $r0[91] = -960102202;

        $r0[92] = -2122252159;

        $r0[93] = 1869545583;

        $r0[94] = 320012307;

        $r0[95] = 1667432547;

        $r0[96] = -370605847;

        $r0[97] = -1482227545;

        $r0[98] = -1616969569;

        $r0[99] = -1128529732;

        $r0[100] = 690552873;

        $r0[101] = -101121799;

        $r0[102] = 791609391;

        $r0[103] = -1263271756;

        $r0[104] = 2021130360;

        $r0[105] = 101056518;

        $r0[106] = -404291353;

        $r0[107] = 1903231089;

        $r0[108] = -724303660;

        $r0[109] = -1414856533;

        $r0[110] = -2004352888;

        $r0[111] = -1920139123;

        $r0[112] = 1920073842;

        $r0[113] = -1179057991;

        $r0[114] = -117964552;

        $r0[115] = -1398013780;

        $r0[116] = 909508662;

        $r0[117] = 707395626;

        $r0[118] = 1010565180;

        $r0[119] = -235863823;

        $r0[120] = 1077936192;

        $r0[121] = -741146413;

        $r0[122] = -1145372485;

        $r0[123] = 1128464451;

        $r0[124] = 353697813;

        $r0[125] = -1381171027;

        $r0[126] = 2004287607;

        $r0[127] = -2139094912;

        $r0[128] = -2105409406;

        $r0[129] = -320077588;

        $r0[130] = 656867367;

        $r0[131] = -437976859;

        $r0[132] = -2054881147;

        $r0[133] = 892665909;

        $r0[134] = 202113036;

        $r0[135] = 1094778945;

        $r0[136] = -269549329;

        $r0[137] = -1819082605;

        $r0[138] = 421068825;

        $r0[139] = 555810849;

        $r0[140] = 235798542;

        $r0[141] = 1313734734;

        $r0[142] = 1701118053;

        $r0[143] = -1111686979;

        $r0[144] = -1195900744;

        $r0[145] = -1886453617;

        $r0[146] = -336920341;

        $r0[147] = -825360178;

        $r0[148] = 808452144;

        $r0[149] = 1600061535;

        $r0[150] = -976944955;

        $r0[151] = 437911578;

        $r0[152] = -505347871;

        $r0[153] = -892731190;

        $r0[154] = 1195835463;

        $r0[155] = 1027407933;

        $r0[156] = 16842753;

        $r0[157] = -690618154;

        $r0[158] = 1448476758;

        $r0[159] = 1296891981;

        $r0[160] = 218955789;

        $r0[161] = 1717960806;

        $r0[162] = -859045684;

        $r0[163] = 757923885;

        $r0[164] = 303169554;

        $r0[165] = 538968096;

        $r0[166] = -1313800015;

        $r0[167] = -1718026087;

        $r0[168] = 1280049228;

        $r0[169] = -1027473214;

        $r0[170] = 2122186878;

        $r0[171] = 84213765;

        $r0[172] = -1212743497;

        $r0[173] = 825294897;

        $r0[174] = 387383319;

        $r0[175] = -673775401;

        $r0[176] = 1482162264;

        $r0[177] = 1633747041;

        $r0[178] = 454754331;

        $r0[179] = 471597084;

        $r0[180] = 252641295;

        $r0[181] = 370540566;

        $r0[182] = 404226072;

        $r0[183] = 572653602;

        $r0[184] = 1145307204;

        $r0[185] = -1296957262;

        $r0[186] = -1246429003;

        $r0[187] = -1852768111;

        $r0[188] = 134742024;

        $r0[189] = -1465384792;

        $r0[190] = -50593540;

        $r0[191] = 1347420240;

        $r0[192] = -791674672;

        $r0[193] = 2105344125;

        $r0[194] = -1987510135;

        $r0[195] = -1751711593;

        $r0[196] = 1532690523;

        $r0[197] = -1785397099;

        $r0[198] = -65281;

        $r0[199] = -757989166;

        $r0[200] = -993787708;

        $r0[201] = 1212678216;

        $r0[202] = -134807305;

        $r0[203] = -606404389;

        $r0[204] = 50528259;

        $r0[205] = -623247142;

        $r0[206] = 1061093439;

        $r0[207] = -1802239852;

        $r0[208] = 1549533276;

        $r0[209] = 33685506;

        $r0[210] = 1246363722;

        $r0[211] = 858980403;

        $r0[212] = 1734803559;

        $r0[213] = -202178317;

        $r0[214] = 2139029631;

        $r0[215] = -488505118;

        $r0[216] = -1684340581;

        $r0[217] = 640024614;

        $r0[218] = 926351415;

        $r0[219] = 993722427;

        $r0[220] = -1768554346;

        $r0[221] = 1263206475;

        $r0[222] = -1094844226;

        $r0[223] = 774766638;

        $r0[224] = 2037973113;

        $r0[225] = -1936981876;

        $r0[226] = 1852702830;

        $r0[227] = -1903296370;

        $r0[228] = -168492811;

        $r0[229] = -1229586250;

        $r0[230] = -33750787;

        $r0[231] = 1499005017;

        $r0[232] = -1734868840;

        $r0[233] = 1785331818;

        $r0[234] = 1178992710;

        $r0[235] = -1162215238;

        $r0[236] = 623181861;

        $r0[237] = 1111621698;

        $r0[238] = -1566441310;

        $r0[239] = -84279046;

        $r0[240] = 117899271;

        $r0[241] = 1431634005;

        $r0[242] = -286392082;

        $r0[243] = 168427530;

        $r0[244] = 1229520969;

        $r0[245] = 1751646312;

        $r0[246] = 943194168;

        $r0[247] = -1532755804;

        $r0[248] = 673710120;

        $r0[249] = 2071658619;

        $r0[250] = -909573943;

        $r0[251] = -1044315967;

        $r0[252] = -471662365;

        $r0[253] = -185335564;

        $r0[254] = -943259449;

        $r0[255] = -1633812322;

        <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX4_4404> = $r0;

        $r0 = newarray (int)[256];

        $r0[0] = 14737632;

        $r0[1] = 328965;

        $r0[2] = 5789784;

        $r0[3] = 14277081;

        $r0[4] = 6776679;

        $r0[5] = 5131854;

        $r0[6] = 8487297;

        $r0[7] = 13355979;

        $r0[8] = 13224393;

        $r0[9] = 723723;

        $r0[10] = 11447982;

        $r0[11] = 6974058;

        $r0[12] = 14013909;

        $r0[13] = 1579032;

        $r0[14] = 6118749;

        $r0[15] = 8553090;

        $r0[16] = 4605510;

        $r0[17] = 14671839;

        $r0[18] = 14079702;

        $r0[19] = 2565927;

        $r0[20] = 9079434;

        $r0[21] = 3289650;

        $r0[22] = 4934475;

        $r0[23] = 4342338;

        $r0[24] = 14408667;

        $r0[25] = 1842204;

        $r0[26] = 10395294;

        $r0[27] = 10263708;

        $r0[28] = 3815994;

        $r0[29] = 13290186;

        $r0[30] = 2434341;

        $r0[31] = 8092539;

        $r0[32] = 855309;

        $r0[33] = 7434609;

        $r0[34] = 6250335;

        $r0[35] = 2039583;

        $r0[36] = 16316664;

        $r0[37] = 14145495;

        $r0[38] = 4079166;

        $r0[39] = 10329501;

        $r0[40] = 8158332;

        $r0[41] = 6316128;

        $r0[42] = 12171705;

        $r0[43] = 12500670;

        $r0[44] = 12369084;

        $r0[45] = 9145227;

        $r0[46] = 1447446;

        $r0[47] = 3421236;

        $r0[48] = 5066061;

        $r0[49] = 12829635;

        $r0[50] = 7500402;

        $r0[51] = 9803157;

        $r0[52] = 11250603;

        $r0[53] = 9342606;

        $r0[54] = 12237498;

        $r0[55] = 8026746;

        $r0[56] = 11776947;

        $r0[57] = 131586;

        $r0[58] = 11842740;

        $r0[59] = 11382189;

        $r0[60] = 10658466;

        $r0[61] = 11316396;

        $r0[62] = 14211288;

        $r0[63] = 10132122;

        $r0[64] = 1513239;

        $r0[65] = 1710618;

        $r0[66] = 3487029;

        $r0[67] = 13421772;

        $r0[68] = 16250871;

        $r0[69] = 10066329;

        $r0[70] = 6381921;

        $r0[71] = 5921370;

        $r0[72] = 15263976;

        $r0[73] = 2368548;

        $r0[74] = 5658198;

        $r0[75] = 4210752;

        $r0[76] = 14803425;

        $r0[77] = 6513507;

        $r0[78] = 592137;

        $r0[79] = 3355443;

        $r0[80] = 12566463;

        $r0[81] = 10000536;

        $r0[82] = 9934743;

        $r0[83] = 8750469;

        $r0[84] = 6842472;

        $r0[85] = 16579836;

        $r0[86] = 15527148;

        $r0[87] = 657930;

        $r0[88] = 14342874;

        $r0[89] = 7303023;

        $r0[90] = 5460819;

        $r0[91] = 6447714;

        $r0[92] = 10724259;

        $r0[93] = 3026478;

        $r0[94] = 526344;

        $r0[95] = 11513775;

        $r0[96] = 2631720;

        $r0[97] = 11579568;

        $r0[98] = 7631988;

        $r0[99] = 12763842;

        $r0[100] = 12434877;

        $r0[101] = 3552822;

        $r0[102] = 2236962;

        $r0[103] = 3684408;

        $r0[104] = 6579300;

        $r0[105] = 1973790;

        $r0[106] = 3750201;

        $r0[107] = 2894892;

        $r0[108] = 10921638;

        $r0[109] = 3158064;

        $r0[110] = 15066597;

        $r0[111] = 4473924;

        $r0[112] = 16645629;

        $r0[113] = 8947848;

        $r0[114] = 10461087;

        $r0[115] = 6645093;

        $r0[116] = 8882055;

        $r0[117] = 7039851;

        $r0[118] = 16053492;

        $r0[119] = 2302755;

        $r0[120] = 4737096;

        $r0[121] = 1052688;

        $r0[122] = 13750737;

        $r0[123] = 5329233;

        $r0[124] = 12632256;

        $r0[125] = 16382457;

        $r0[126] = 13816530;

        $r0[127] = 10526880;

        $r0[128] = 5592405;

        $r0[129] = 10592673;

        $r0[130] = 4276545;

        $r0[131] = 16448250;

        $r0[132] = 4408131;

        $r0[133] = 1250067;

        $r0[134] = 12895428;

        $r0[135] = 3092271;

        $r0[136] = 11053224;

        $r0[137] = 11974326;

        $r0[138] = 3947580;

        $r0[139] = 2829099;

        $r0[140] = 12698049;

        $r0[141] = 16777215;

        $r0[142] = 13158600;

        $r0[143] = 10855845;

        $r0[144] = 2105376;

        $r0[145] = 9013641;

        $r0[146] = 0;

        $r0[147] = 9474192;

        $r0[148] = 4671303;

        $r0[149] = 15724527;

        $r0[150] = 15395562;

        $r0[151] = 12040119;

        $r0[152] = 1381653;

        $r0[153] = 394758;

        $r0[154] = 13487565;

        $r0[155] = 11908533;

        $r0[156] = 1184274;

        $r0[157] = 8289918;

        $r0[158] = 12303291;

        $r0[159] = 2697513;

        $r0[160] = 986895;

        $r0[161] = 12105912;

        $r0[162] = 460551;

        $r0[163] = 263172;

        $r0[164] = 10197915;

        $r0[165] = 9737364;

        $r0[166] = 2171169;

        $r0[167] = 6710886;

        $r0[168] = 15132390;

        $r0[169] = 13553358;

        $r0[170] = 15592941;

        $r0[171] = 15198183;

        $r0[172] = 3881787;

        $r0[173] = 16711422;

        $r0[174] = 8355711;

        $r0[175] = 12961221;

        $r0[176] = 10790052;

        $r0[177] = 3618615;

        $r0[178] = 11645361;

        $r0[179] = 5000268;

        $r0[180] = 9539985;

        $r0[181] = 7237230;

        $r0[182] = 9276813;

        $r0[183] = 7763574;

        $r0[184] = 197379;

        $r0[185] = 2960685;

        $r0[186] = 14606046;

        $r0[187] = 9868950;

        $r0[188] = 2500134;

        $r0[189] = 8224125;

        $r0[190] = 13027014;

        $r0[191] = 6052956;

        $r0[192] = 13882323;

        $r0[193] = 15921906;

        $r0[194] = 5197647;

        $r0[195] = 1644825;

        $r0[196] = 4144959;

        $r0[197] = 14474460;

        $r0[198] = 7960953;

        $r0[199] = 1907997;

        $r0[200] = 5395026;

        $r0[201] = 15461355;

        $r0[202] = 15987699;

        $r0[203] = 7171437;

        $r0[204] = 6184542;

        $r0[205] = 16514043;

        $r0[206] = 6908265;

        $r0[207] = 11711154;

        $r0[208] = 15790320;

        $r0[209] = 3223857;

        $r0[210] = 789516;

        $r0[211] = 13948116;

        $r0[212] = 13619151;

        $r0[213] = 9211020;

        $r0[214] = 14869218;

        $r0[215] = 7697781;

        $r0[216] = 11119017;

        $r0[217] = 4868682;

        $r0[218] = 5723991;

        $r0[219] = 8684676;

        $r0[220] = 1118481;

        $r0[221] = 4539717;

        $r0[222] = 1776411;

        $r0[223] = 16119285;

        $r0[224] = 15000804;

        $r0[225] = 921102;

        $r0[226] = 7566195;

        $r0[227] = 11184810;

        $r0[228] = 15856113;

        $r0[229] = 14540253;

        $r0[230] = 5855577;

        $r0[231] = 1315860;

        $r0[232] = 7105644;

        $r0[233] = 9605778;

        $r0[234] = 5526612;

        $r0[235] = 13684944;

        $r0[236] = 7895160;

        $r0[237] = 7368816;

        $r0[238] = 14935011;

        $r0[239] = 4802889;

        $r0[240] = 8421504;

        $r0[241] = 5263440;

        $r0[242] = 10987431;

        $r0[243] = 16185078;

        $r0[244] = 7829367;

        $r0[245] = 9671571;

        $r0[246] = 8816262;

        $r0[247] = 8618883;

        $r0[248] = 2763306;

        $r0[249] = 13092807;

        $r0[250] = 5987163;

        $r0[251] = 15329769;

        $r0[252] = 15658734;

        $r0[253] = 9408399;

        $r0[254] = 65793;

        $r0[255] = 4013373;

        <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX2_0222> = $r0;

        $r0 = newarray (int)[256];

        $r0[0] = 939538488;

        $r0[1] = 1090535745;

        $r0[2] = 369104406;

        $r0[3] = 1979741814;

        $r0[4] = -654255655;

        $r0[5] = -1828678765;

        $r0[6] = 1610637408;

        $r0[7] = -234818830;

        $r0[8] = 1912631922;

        $r0[9] = -1040137534;

        $r0[10] = -1426019413;

        $r0[11] = -1711236454;

        $r0[12] = 1962964341;

        $r0[13] = 100664838;

        $r0[14] = 1459640151;

        $r0[15] = -1610571616;

        $r0[16] = -1862233711;

        $r0[17] = -150931465;

        $r0[18] = -1258244683;

        $r0[19] = -922695223;

        $r0[20] = -1577016670;

        $r0[21] = -1946121076;

        $r0[22] = -771697966;

        $r0[23] = -1879011184;

        $r0[24] = -167708938;

        $r0[25] = 117442311;

        $r0[26] = -1493129305;

        $r0[27] = 654321447;

        $r0[28] = -1912566130;

        $r0[29] = -1308577102;

        $r0[30] = 1224755529;

        $r0[31] = -570368290;

        $r0[32] = 1124090691;

        $r0[33] = 1543527516;

        $r0[34] = -687810601;

        $r0[35] = -956250169;

        $r0[36] = 1040203326;

        $r0[37] = -184486411;

        $r0[38] = -1895788657;

        $r0[39] = 1728079719;

        $r0[40] = 520101663;

        $r0[41] = 402659352;

        $r0[42] = 1845522030;

        $r0[43] = -1358909521;

        $r0[44] = 788541231;

        $r0[45] = -503258398;

        $r0[46] = -2063563387;

        $r0[47] = 218107149;

        $r0[48] = 1392530259;

        $r0[49] = -268373776;

        $r0[50] = -1677681508;

        $r0[51] = 1694524773;

        $r0[52] = -369038614;

        $r0[53] = -1560239197;

        $r0[54] = -1375686994;

        $r0[55] = -1644126562;

        $r0[56] = -335483668;

        $r0[57] = -2147450752;

        $r0[58] = 754986285;

        $r0[59] = 1795189611;

        $r0[60] = -1476351832;

        $r0[61] = 721431339;

        $r0[62] = 905983542;

        $r0[63] = -1509906778;

        $r0[64] = -989805115;

        $r0[65] = -2046785914;

        $r0[66] = 1291865421;

        $r0[67] = 855651123;

        $r0[68] = -50266627;

        $r0[69] = 1711302246;

        $r0[70] = 1476417624;

        $r0[71] = -1778346346;

        $r0[72] = 973093434;

        $r0[73] = 150997257;

        $r0[74] = -1795123819;

        $r0[75] = 268439568;

        $r0[76] = 2013296760;

        $r0[77] = -671033128;

        $r0[78] = 1107313218;

        $r0[79] = -872362804;

        $r0[80] = -285151249;

        $r0[81] = 637543974;

        $r0[82] = -452925979;

        $r0[83] = 1627414881;

        $r0[84] = 436214298;

        $r0[85] = 1056980799;

        $r0[86] = 989870907;

        $r0[87] = -2113895806;

        $r0[88] = -1241467210;

        $r0[89] = -620700709;

        $r0[90] = -738143020;

        $r0[91] = -1744791400;

        $r0[92] = -402593560;

        $r0[93] = -1962898549;

        $r0[94] = 33554946;

        $r0[95] = -352261141;

        $r0[96] = 167774730;

        $r0[97] = 738208812;

        $r0[98] = 486546717;

        $r0[99] = -1342132048;

        $r0[100] = 1862299503;

        $r0[101] = -1929343603;

        $r0[102] = -2013230968;

        $r0[103] = 234884622;

        $r0[104] = 419436825;

        $r0[105] = -2030008441;

        $r0[106] = 1308642894;

        $r0[107] = 184552203;

        $r0[108] = -1459574359;

        $r0[109] = 201329676;

        $r0[110] = 2030074233;

        $r0[111] = 285217041;

        $r0[112] = 2130739071;

        $r0[113] = 570434082;

        $r0[114] = -419371033;

        $r0[115] = 1493195097;

        $r0[116] = -520035871;

        $r0[117] = -637478182;

        $r0[118] = 1023425853;

        $r0[119] = -939472696;

        $r0[120] = 301994514;

        $r0[121] = 67109892;

        $r0[122] = 1946186868;

        $r0[123] = 1409307732;

        $r0[124] = 805318704;

        $r0[125] = 2113961598;

        $r0[126] = -1275022156;

        $r0[127] = 671098920;

        $r0[128] = 1426085205;

        $r0[129] = 1744857192;

        $r0[130] = 1342197840;

        $r0[131] = -1107247426;

        $r0[132] = -805252912;

        $r0[133] = -1006582588;

        $r0[134] = 822096177;

        $r0[135] = -889140277;

        $r0[136] = 704653866;

        $r0[137] = -1392464467;

        $r0[138] = 251662095;

        $r0[139] = -905917750;

        $r0[140] = 1879076976;

        $r0[141] = -16711681;

        $r0[142] = 838873650;

        $r0[143] = 1761634665;

        $r0[144] = 134219784;

        $r0[145] = 1644192354;

        $r0[146] = 0;

        $r0[147] = 603989028;

        $r0[148] = -788475439;

        $r0[149] = -83821573;

        $r0[150] = -1174357318;

        $r0[151] = -318706195;

        $r0[152] = 1157645637;

        $r0[153] = -2130673279;

        $r0[154] = 1929409395;

        $r0[155] = 1828744557;

        $r0[156] = -2080340860;

        $r0[157] = -1627349089;

        $r0[158] = -301928722;

        $r0[159] = 1241533002;

        $r0[160] = -1023360061;

        $r0[161] = 771763758;

        $r0[162] = -1056915007;

        $r0[163] = 16777473;

        $r0[164] = -436148506;

        $r0[165] = 620766501;

        $r0[166] = 1207978056;

        $r0[167] = -1728013927;

        $r0[168] = -1191134791;

        $r0[169] = -1291799629;

        $r0[170] = 2063629179;

        $r0[171] = -117376519;

        $r0[172] = -838807858;

        $r0[173] = -1090469953;

        $r0[174] = -553590817;

        $r0[175] = 1895854449;

        $r0[176] = 687876393;

        $r0[177] = -855585331;

        $r0[178] = 1811967084;

        $r0[179] = 318771987;

        $r0[180] = 1677747300;

        $r0[181] = -1694458981;

        $r0[182] = 1660969827;

        $r0[183] = -1660904035;

        $r0[184] = -1073692480;

        $r0[185] = 1258310475;

        $r0[186] = -1224689737;

        $r0[187] = -1526684251;

        $r0[188] = -1996453495;

        $r0[189] = 1593859935;

        $r0[190] = -1325354575;

        $r0[191] = 385881879;

        $r0[192] = -201263884;

        $r0[193] = -1140802372;

        $r0[194] = -754920493;

        $r0[195] = 1174423110;

        $r0[196] = -822030385;

        $r0[197] = 922761015;

        $r0[198] = 1577082462;

        $r0[199] = 1191200583;

        $r0[200] = -1811901292;

        $r0[201] = -100599046;

        $r0[202] = -67044100;

        $r0[203] = 1526750043;

        $r0[204] = -1761568873;

        $r0[205] = -33489154;

        $r0[206] = 1509972570;

        $r0[207] = -1409241940;

        $r0[208] = 1006648380;

        $r0[209] = 1275087948;

        $r0[210] = 50332419;

        $r0[211] = 889206069;

        $r0[212] = -218041357;

        $r0[213] = 587211555;

        $r0[214] = -1207912264;

        $r0[215] = 1560304989;

        $r0[216] = 1778412138;

        $r0[217] = -1845456238;

        $r0[218] = -721365547;

        $r0[219] = 553656609;

        $r0[220] = 1140868164;

        $r0[221] = 1358975313;

        $r0[222] = -973027642;

        $r0[223] = 2097184125;

        $r0[224] = 956315961;

        $r0[225] = -2097118333;

        $r0[226] = -603923236;

        $r0[227] = -1442796886;

        $r0[228] = 2080406652;

        $r0[229] = 1996519287;

        $r0[230] = 1442862678;

        $r0[231] = 83887365;

        $r0[232] = 452991771;

        $r0[233] = -1543461724;

        $r0[234] = 352326933;

        $r0[235] = 872428596;

        $r0[236] = 503324190;

        $r0[237] = 469769244;

        $r0[238] = -134153992;

        $r0[239] = 1375752786;

        $r0[240] = 536879136;

        $r0[241] = 335549460;

        $r0[242] = -385816087;

        $r0[243] = -1124024899;

        $r0[244] = -587145763;

        $r0[245] = -469703452;

        $r0[246] = -1593794143;

        $r0[247] = -536813344;

        $r0[248] = -1979676022;

        $r0[249] = -251596303;

        $r0[250] = -704588074;

        $r0[251] = 2046851706;

        $r0[252] = -1157579845;

        $r0[253] = -486480925;

        $r0[254] = 1073758272;

        $r0[255] = 1325420367;

        <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX3_3033> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean initialised> = 0;

        $r1 = newarray (int)[96];

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey> = $r1;

        $r1 = newarray (int)[8];

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw> = $r1;

        $r1 = newarray (int)[12];

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke> = $r1;

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state> = $r1;

        return;
    }
    private int bytes2int(byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        byte[] $r1;
        int $i0, i1, i2, $i3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= 4 goto label2;

        i1 = i1 << 8;

        $i3 = i2 + $i0;

        $b4 = $r1[$i3];

        $i3 = $b4 & 255;

        i1 = i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }
    private void camelliaF2(int[], int[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = $r1[0];

        $i2 = $r2[$i0];

        $i1 = $i1 ^ $i2;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX4_4404>;

        $i2 = $i1 & 255;

        $i2 = $r3[$i2];

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX3_3033>;

        $i3 = $i1 >>> 8;

        $i3 = $i3 & 255;

        $i3 = $r3[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX2_0222>;

        $i3 = $i1 >>> 16;

        $i3 = $i3 & 255;

        $i3 = $r3[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX1_1110>;

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 255;

        $i1 = $r3[$i1];

        $i1 = $i2 ^ $i1;

        $i2 = $r1[1];

        $i3 = $i0 + 1;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX1_1110>;

        $i3 = $i2 & 255;

        $i3 = $r3[$i3];

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX4_4404>;

        $i4 = $i2 >>> 8;

        $i4 = $i4 & 255;

        $i4 = $r3[$i4];

        $i3 = $i3 ^ $i4;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX3_3033>;

        $i4 = $i2 >>> 16;

        $i4 = $i4 & 255;

        $i4 = $r3[$i4];

        $i3 = $i3 ^ $i4;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX2_0222>;

        $i2 = $i2 >>> 24;

        $i2 = $i2 & 255;

        $i2 = $r3[$i2];

        $i2 = $i3 ^ $i2;

        $i3 = $r1[2];

        $i4 = $i1 ^ $i2;

        $i3 = $i3 ^ $i4;

        $r1[2] = $i3;

        $i3 = $r1[3];

        $i2 = $i1 ^ $i2;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: int rightRotate(int,int)>($i1, 8);

        $i1 = $i2 ^ $i1;

        $i1 = $i3 ^ $i1;

        $r1[3] = $i1;

        $i1 = $r1[2];

        $i2 = $i0 + 2;

        $i2 = $r2[$i2];

        $i1 = $i1 ^ $i2;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX4_4404>;

        $i2 = $i1 & 255;

        $i2 = $r3[$i2];

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX3_3033>;

        $i3 = $i1 >>> 8;

        $i3 = $i3 & 255;

        $i3 = $r3[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX2_0222>;

        $i3 = $i1 >>> 16;

        $i3 = $i3 & 255;

        $i3 = $r3[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX1_1110>;

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 255;

        $i1 = $r3[$i1];

        $i1 = $i2 ^ $i1;

        $i2 = $r1[3];

        $i0 = $i0 + 3;

        $i0 = $r2[$i0];

        $i0 = $i2 ^ $i0;

        $r2 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX1_1110>;

        $i2 = $i0 & 255;

        $i2 = $r2[$i2];

        $r2 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX4_4404>;

        $i3 = $i0 >>> 8;

        $i3 = $i3 & 255;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r2 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX3_3033>;

        $i3 = $i0 >>> 16;

        $i3 = $i3 & 255;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r2 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SBOX2_0222>;

        $i0 = $i0 >>> 24;

        $i0 = $i0 & 255;

        $i0 = $r2[$i0];

        $i0 = $i2 ^ $i0;

        $i2 = $r1[0];

        $i3 = $i1 ^ $i0;

        $i2 = $i2 ^ $i3;

        $r1[0] = $i2;

        $i2 = $r1[1];

        $i0 = $i1 ^ $i0;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: int rightRotate(int,int)>($i1, 8);

        $i0 = $i0 ^ $i1;

        $i0 = $i2 ^ $i0;

        $r1[1] = $i0;

        return;
    }
    private void camelliaFLs(int[], int[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = $r1[1];

        $i2 = $r1[0];

        $i3 = $r2[$i0];

        $i2 = $i2 & $i3;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: int leftRotate(int,int)>($i2, 1);

        $i1 = $i1 ^ $i2;

        $r1[1] = $i1;

        $i1 = $r1[0];

        $i2 = $i0 + 1;

        $i2 = $r2[$i2];

        $i3 = $r1[1];

        $i2 = $i2 | $i3;

        $i1 = $i1 ^ $i2;

        $r1[0] = $i1;

        $i1 = $r1[2];

        $i2 = $i0 + 3;

        $i2 = $r2[$i2];

        $i3 = $r1[3];

        $i2 = $i2 | $i3;

        $i1 = $i1 ^ $i2;

        $r1[2] = $i1;

        $i1 = $r1[3];

        $i0 = $i0 + 2;

        $i0 = $r2[$i0];

        $i2 = $r1[2];

        $i0 = $i0 & $i2;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: int leftRotate(int,int)>($i0, 1);

        $i0 = $i1 ^ $i0;

        $r1[3] = $i0;

        return;
    }
    private static void decroldq(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i3 = $i2 + 2;

        $i4 = $r0[$i1];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $r0[$i1];

        $i0 = 32 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 3;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $r1[$i2];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 1;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private static void decroldqo32(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i3 = $i2 + 2;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $r0[$i1];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $r0[$i1];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i0 = 64 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 3;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $r1[$i2];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 1;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private void int2bytes(int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        byte[] $r1;
        int $i0, $i2, i3, $i4;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $i2 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $i4 = 3 - i3;

        $i4 = $i4 + $i0;

        $b1 = (byte) $i2;

        $r1[$i4] = $b1;

        $i2 = $i2 >>> 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    private static int leftRotate(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 + $i0;

        return $i0;
    }
    private int processBlock128(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i2 = i3 * 4;

        $i2 = $i2 + $i0;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, $i2);

        $r3[i3] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i2 = $r3[i3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i4 = $r4[i3];

        $i2 = $i2 ^ $i4;

        $r3[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 12);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 16);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 20);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 24);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 28);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 32);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[2];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[4];

        $i0 = $i0 ^ i3;

        $r3[2] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[5];

        $i0 = $i0 ^ i3;

        $r3[3] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[0];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[6];

        $i0 = $i0 ^ i3;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[1];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[7];

        $i0 = $i0 ^ i3;

        $r3[1] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[2];

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[3];

        i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[0];

        i3 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[1];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private int processBlock192or256(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i2 = i3 * 4;

        $i2 = $i2 + $i0;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, $i2);

        $r3[i3] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i2 = $r3[i3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i4 = $r4[i3];

        $i2 = $i2 ^ $i4;

        $r3[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 12);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 16);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 20);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 24);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 28);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 32);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 36);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 40);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 44);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[2];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[4];

        $i0 = $i0 ^ i3;

        $r3[2] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[5];

        $i0 = $i0 ^ i3;

        $r3[3] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[0];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[6];

        $i0 = $i0 ^ i3;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[1];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        i3 = $r4[7];

        $i0 = $i0 ^ i3;

        $r3[1] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[2];

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[3];

        i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[0];

        i3 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] state>;

        $i0 = $r3[1];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private static int rightRotate(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 >>> $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 << $i1;

        $i0 = $i2 + $i0;

        return $i0;
    }
    private static void roldq(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i4 = $r0[$i1];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 2;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $r0[$i1];

        $i0 = 32 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $r1[$i2];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 1;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 3;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private static void roldqo32(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 2;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $r0[$i1];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $r0[$i1];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i0 = 64 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $r1[$i2];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 1;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 3;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private void setKey(boolean, byte[])
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        boolean $z0, $z1;
        byte[] $r1;
        int[] r2, r3, r4, r5, $r7;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        r2 = newarray (int)[8];

        r3 = newarray (int)[4];

        r4 = newarray (int)[4];

        r5 = newarray (int)[4];

        $i0 = lengthof $r1;

        lookupswitch($i0)
        {
            case 16: goto label02;
            case 24: goto label05;
            case 32: goto label06;
            default: goto label01;
        };

     label01:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key sizes are only 16/24/32 bytes.");

        throw $r6;

     label02:
        r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean _keyIs128> = 1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        r2[7] = 0;

        r2[6] = 0;

        r2[5] = 0;

        r2[4] = 0;

     label03:
        $i0 = 0;

     label04:
        if $i0 >= 4 goto label07;

        $i1 = r2[$i0];

        $i2 = $i0 + 4;

        $i2 = r2[$i2];

        $i1 = $i1 ^ $i2;

        r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 16);

        r2[4] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 20);

        r2[5] = $i0;

        $i0 = r2[4];

        $i0 = $i0 ^ -1;

        r2[6] = $i0;

        $i0 = r2[5];

        $i0 = $i0 ^ -1;

        r2[7] = $i0;

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean _keyIs128> = 0;

        goto label03;

     label06:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 16);

        r2[4] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 20);

        r2[5] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 24);

        r2[6] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int bytes2int(byte[],int)>($r1, 28);

        r2[7] = $i0;

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean _keyIs128> = 0;

        goto label03;

     label07:
        $r7 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>(r3, $r7, 0);

        $i0 = 0;

     label08:
        if $i0 >= 4 goto label09;

        $i1 = r3[$i0];

        $i2 = r2[$i0];

        $i1 = $i1 ^ $i2;

        r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $r7 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>(r3, $r7, 4);

        $z1 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean _keyIs128>;

        if $z1 == 0 goto label11;

        if $z0 == 0 goto label10;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[0];

        r4[0] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[1];

        r4[1] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[2];

        r4[2] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[3];

        r4[3] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(30, r2, 0, r4, 12);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[2];

        r4[18] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[3];

        r4[19] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 24);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 32);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[0];

        r4[0] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[1];

        r4[1] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[2];

        r4[2] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[3];

        r4[3] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 8);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 0);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[0];

        r4[16] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[1];

        r4[17] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 20);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(34, r3, 0, r4, 28);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r3, 0, r4, 4);

        return;

     label10:
        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[0];

        r4[4] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[1];

        r4[5] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[2];

        r4[6] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[3];

        r4[7] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r4, 28);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 0, r4, 20);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[0];

        r4[16] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[1];

        r4[17] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 8);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[0];

        r4[34] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[1];

        r4[35] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[2];

        r4[32] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r3[3];

        r4[33] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 24);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 4);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[2];

        r4[18] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r5[3];

        r4[19] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 12);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldqo32(int,int[],int,int[],int)>(34, r3, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r3, 0, r4, 0);

        return;

     label11:
        $i0 = 0;

     label12:
        if $i0 >= 4 goto label13;

        $i1 = r3[$i0];

        $i2 = $i0 + 4;

        $i2 = r2[$i2];

        $i1 = $i1 ^ $i2;

        r4[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label12;

     label13:
        r5 = <org.spongycastle.crypto.engines.CamelliaEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void camelliaF2(int[],int[],int)>(r4, r5, 8);

        if $z0 == 0 goto label14;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[0];

        r5[0] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[1];

        r5[1] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[2];

        r5[2] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[3];

        r5[3] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(45, r2, 0, r5, 16);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r5, 32);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(34, r2, 0, r5, 44);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r2, 4, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r2, 4, r5, 0);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(30, r2, 4, r5, 24);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(34, r2, 4, r5, 36);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r2, 8);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(30, r3, 0, r2, 20);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[1];

        r2[8] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[2];

        r2[9] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[3];

        r2[10] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[0];

        r2[11] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(49, r3, 0, r2, 40);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[0];

        r3[0] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[1];

        r3[1] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[2];

        r3[2] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[3];

        r3[3] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(30, r4, 0, r3, 12);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldq(int,int[],int,int[],int)>(30, r4, 0, r3, 28);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(51, r4, 0, r3, 4);

        return;

     label14:
        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[0];

        r5[4] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[1];

        r5[5] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[2];

        r5[6] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        $i0 = r2[3];

        r5[7] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldqo32(int,int[],int,int[],int)>(45, r2, 0, r5, 28);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r5, 12);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldqo32(int,int[],int,int[],int)>(34, r2, 0, r5, 0);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 4, r5, 40);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 4, r5, 8);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 4, r5, 20);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldqo32(int,int[],int,int[],int)>(34, r2, 4, r5, 8);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r2, 36);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(30, r3, 0, r2, 24);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[1];

        r2[2] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[2];

        r2[3] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[3];

        r2[0] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] ke>;

        $i0 = r3[0];

        r2[1] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldqo32(int,int[],int,int[],int)>(49, r3, 0, r2, 4);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[0];

        r3[46] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[1];

        r3[47] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[2];

        r3[44] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        $i0 = r4[3];

        r3[45] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(30, r4, 0, r3, 32);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void decroldq(int,int[],int,int[],int)>(30, r4, 0, r3, 16);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaEngine: void roldqo32(int,int[],int,int[],int)>(51, r4, 0, r3, 0);

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        return "Camellia";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        boolean $z0, $z1;
        byte[] $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.params.KeyParameter $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $z0 := @parameter0: boolean;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r2 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only simple KeyParameter expected.");

        throw $r3;

     label1:
        $r4 = (org.spongycastle.crypto.params.KeyParameter) $r2;

        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: void setKey(boolean,byte[])>($z0, $r1);

        r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean initialised> = 1;

        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.OutputLengthException $r5;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camellia engine not initialised");

        throw $r3;

     label1:
        $i2 = $i0 + 16;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i2 = $i1 + 16;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r5 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r5;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.CamelliaEngine: boolean _keyIs128>;

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int processBlock128(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label4:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaEngine: int processBlock192or256(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.CamelliaEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaEngine;

        return;
    }
