org.spongycastle.crypto.engines.RSABlindingEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private java.math.BigInteger blindingFactor
private org.spongycastle.crypto.engines.RSACoreEngine core
private boolean forEncryption
private org.spongycastle.crypto.params.RSAKeyParameters key
    public void <init>()
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core> = $r1;

        return;
    }
    private java.math.BigInteger blindMessage(java.math.BigInteger)
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        java.math.BigInteger $r1, r2, $r4, $r5;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $r1 := @parameter0: java.math.BigInteger;

        r2 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor>;

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        r2 = virtualinvoke $r3.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        return $r1;
    }
    private java.math.BigInteger unblindMessage(java.math.BigInteger)
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        java.math.BigInteger $r1, $r3, $r4;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r4 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor>;

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r3);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        return $r1;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.RSABlindingParameters r3;
        org.spongycastle.crypto.engines.RSACoreEngine $r4;
        org.spongycastle.crypto.params.RSAKeyParameters $r5;
        java.math.BigInteger $r6;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.spongycastle.crypto.params.RSABlindingParameters) $r1;

     label1:
        $r4 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.RSABlindingParameters: org.spongycastle.crypto.params.RSAKeyParameters getPublicKey()>();

        virtualinvoke $r4.<org.spongycastle.crypto.engines.RSACoreEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r5);

        r0.<org.spongycastle.crypto.engines.RSABlindingEngine: boolean forEncryption> = $z0;

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.RSABlindingParameters: org.spongycastle.crypto.params.RSAKeyParameters getPublicKey()>();

        r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.params.RSAKeyParameters key> = $r5;

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.RSABlindingParameters: java.math.BigInteger getBlindingFactor()>();

        r0.<org.spongycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor> = $r6;

        return;

     label2:
        r3 = (org.spongycastle.crypto.params.RSABlindingParameters) $r1;

        goto label1;
    }
    public byte[] processBlock(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RSABlindingEngine r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.engines.RSACoreEngine $r2;
        java.math.BigInteger $r3;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindingEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>($r1, $i0, $i1);

        $z0 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindMessage(java.math.BigInteger)>($r3);

     label1:
        $r2 = r0.<org.spongycastle.crypto.engines.RSABlindingEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>($r3);

        return $r1;

     label2:
        $r3 = specialinvoke r0.<org.spongycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger unblindMessage(java.math.BigInteger)>($r3);

        goto label1;
    }
