org.spongycastle.crypto.engines.HC128Engine extends java.lang.Object implements org.spongycastle.crypto.StreamCipher
private byte[] buf
private int cnt
private int idx
private boolean initialised
private byte[] iv
private byte[] key
private int[] p
private int[] q
    public void <init>()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[512];

        r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p> = $r1;

        $r1 = newarray (int)[512];

        r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q> = $r1;

        r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt> = 0;

        $r2 = newarray (byte)[4];

        r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf> = $r2;

        r0.<org.spongycastle.crypto.engines.HC128Engine: int idx> = 0;

        return;
    }
    private static int dim(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 - $i1;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int mod512(int)>($i0);

        return $i0;
    }
    private static int f1(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i0, 7);

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i0, 18);

        $i1 = $i1 ^ $i2;

        $i0 = $i0 >>> 3;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private static int f2(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i0, 17);

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i0, 19);

        $i1 = $i1 ^ $i2;

        $i0 = $i0 >>> 10;

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int g1(int, int, int)
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i0, 10);

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i2, 23);

        $i0 = $i0 ^ $i2;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateRight(int,int)>($i1, 8);

        $i0 = $i0 + $i1;

        return $i0;
    }
    private int g2(int, int, int)
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>($i0, 10);

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>($i2, 23);

        $i0 = $i0 ^ $i2;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int rotateLeft(int,int)>($i1, 8);

        $i0 = $i0 + $i1;

        return $i0;
    }
    private byte getByte()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        byte b0;
        int $i1, $i2;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int idx>;

        if $i1 != 0 goto label1;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int step()>();

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i2 = $i1 & 255;

        b0 = (byte) $i2;

        $r1[0] = b0;

        $i1 = $i1 >> 8;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i2 = $i1 & 255;

        b0 = (byte) $i2;

        $r1[1] = b0;

        $i1 = $i1 >> 8;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i2 = $i1 & 255;

        b0 = (byte) $i2;

        $r1[2] = b0;

        $i1 = $i1 >> 8;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i1 = $i1 & 255;

        b0 = (byte) $i1;

        $r1[3] = b0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int idx>;

        b0 = $r1[$i1];

        $i1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int idx>;

        $i1 = $i1 + 1;

        $i1 = $i1 & 3;

        r0.<org.spongycastle.crypto.engines.HC128Engine: int idx> = $i1;

        return b0;
    }
    private int h1(int)
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i1 = $i0 & 255;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i0 = $i0 >> 16;

        $i0 = $i0 & 255;

        $i0 = $i0 + 256;

        $i0 = $r1[$i0];

        $i0 = $i1 + $i0;

        return $i0;
    }
    private int h2(int)
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i1 = $i0 & 255;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i0 = $i0 >> 16;

        $i0 = $i0 & 255;

        $i0 = $i0 + 256;

        $i0 = $r1[$i0];

        $i0 = $i1 + $i0;

        return $i0;
    }
    private void init()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int[] r1, $r4;
        byte[] $r2;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.IllegalArgumentException $r3;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] key>;

        $i0 = lengthof $r2;

        if $i0 == 16 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be 128 bits long");

        throw $r3;

     label01:
        r0.<org.spongycastle.crypto.engines.HC128Engine: int idx> = 0;

        r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt> = 0;

        r1 = newarray (int)[1280];

        $i0 = 0;

     label02:
        if $i0 >= 16 goto label03;

        $i1 = $i0 >> 2;

        $i2 = r1[$i1];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] key>;

        $b3 = $r2[$i0];

        $i4 = $b3 & 255;

        $i5 = $i0 & 3;

        $i5 = $i5 * 8;

        $i4 = $i4 << $i5;

        $i2 = $i2 | $i4;

        r1[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label02;

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, 4, 4);

        $i0 = 0;

     label04:
        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] iv>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label05;

        if $i0 >= 16 goto label05;

        $i1 = $i0 >> 2;

        $i1 = $i1 + 8;

        $i2 = r1[$i1];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] iv>;

        $b3 = $r2[$i0];

        $i4 = $b3 & 255;

        $i5 = $i0 & 3;

        $i5 = $i5 * 8;

        $i4 = $i4 << $i5;

        $i2 = $i2 | $i4;

        r1[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 8, r1, 12, 4);

        $i0 = 16;

     label06:
        if $i0 >= 1280 goto label07;

        $i1 = $i0 + -2;

        $i1 = r1[$i1];

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int f2(int)>($i1);

        $i2 = $i0 + -7;

        $i2 = r1[$i2];

        $i1 = $i1 + $i2;

        $i2 = $i0 + -15;

        $i2 = r1[$i2];

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int f1(int)>($i2);

        $i1 = $i1 + $i2;

        $i2 = $i0 + -16;

        $i2 = r1[$i2];

        $i1 = $i1 + $i2;

        $i1 = $i1 + $i0;

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label06;

     label07:
        $r4 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 256, $r4, 0, 512);

        $r4 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 768, $r4, 0, 512);

        $i0 = 0;

     label08:
        if $i0 >= 512 goto label09;

        r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int step()>();

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $i0 = 0;

     label10:
        if $i0 >= 512 goto label11;

        r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int step()>();

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt> = 0;

        return;
    }
    private static int mod1024(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 & 1023;

        return $i0;
    }
    private static int mod512(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 & 511;

        return $i0;
    }
    private static int rotateLeft(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = neg $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private static int rotateRight(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 >>> $i1;

        $i1 = neg $i1;

        $i0 = $i0 << $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int step()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $i0 = r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt>;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int mod512(int)>($i0);

        $i1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt>;

        if $i1 >= 512 goto label2;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i1 = $r1[$i0];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 3);

        $i2 = $r2[$i2];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i3 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 10);

        $i3 = $r2[$i3];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i4 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 511);

        $i4 = $r2[$i4];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int g1(int,int,int)>($i2, $i3, $i4);

        $i1 = $i1 + $i2;

        $r1[$i0] = $i1;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 12);

        $i1 = $r1[$i1];

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int h1(int)>($i1);

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] p>;

        $i0 = $r1[$i0];

        $i0 = $i1 ^ $i0;

     label1:
        $i1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt>;

        $i1 = $i1 + 1;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int mod1024(int)>($i1);

        r0.<org.spongycastle.crypto.engines.HC128Engine: int cnt> = $i1;

        return $i0;

     label2:
        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i1 = $r1[$i0];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 3);

        $i2 = $r2[$i2];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i3 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 10);

        $i3 = $r2[$i3];

        $r2 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i4 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 511);

        $i4 = $r2[$i4];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int g2(int,int,int)>($i2, $i3, $i4);

        $i1 = $i1 + $i2;

        $r1[$i0] = $i1;

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.HC128Engine: int dim(int,int)>($i0, 12);

        $i1 = $r1[$i1];

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: int h2(int)>($i1);

        $r1 = r0.<org.spongycastle.crypto.engines.HC128Engine: int[] q>;

        $i0 = $r1[$i0];

        $i0 = $i1 ^ $i0;

        goto label1;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        return "HC-128";
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1, r2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;
        byte[] $r4;
        org.spongycastle.crypto.params.KeyParameter r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r2 = $r1;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label2;

        $r3 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] iv> = $r4;

        $r3 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        r2 = virtualinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

     label1:
        $z0 = r2 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label3;

        r5 = (org.spongycastle.crypto.params.KeyParameter) r2;

        $r4 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] key> = $r4;

        specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: void init()>();

        r0.<org.spongycastle.crypto.engines.HC128Engine: boolean initialised> = 1;

        return;

     label2:
        $r4 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.engines.HC128Engine: byte[] iv> = $r4;

        goto label1;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter passed to HC128 init - ");

        $r8 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;
        byte $b6, $b7;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $z0 = r0.<org.spongycastle.crypto.engines.HC128Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i3 = $i0 + $i1;

        $i4 = lengthof $r1;

        if $i3 <= $i4 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        $i3 = 0;

     label4:
        if $i3 >= $i1 goto label5;

        $i4 = $i2 + $i3;

        $i5 = $i0 + $i3;

        $b6 = $r1[$i5];

        $b7 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: byte getByte()>();

        $i5 = $b6 ^ $b7;

        $b6 = (byte) $i5;

        $r2[$i4] = $b6;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        return $i1;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.HC128Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: void init()>();

        return;
    }
    public byte returnByte(byte)
    {
        org.spongycastle.crypto.engines.HC128Engine r0;
        byte $b0, $b1;
        int $i2;

        r0 := @this: org.spongycastle.crypto.engines.HC128Engine;

        $b0 := @parameter0: byte;

        $b1 = specialinvoke r0.<org.spongycastle.crypto.engines.HC128Engine: byte getByte()>();

        $i2 = $b1 ^ $b0;

        $b0 = (byte) $i2;

        return $b0;
    }
