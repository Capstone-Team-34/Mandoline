org.spongycastle.crypto.engines.RSAEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private org.spongycastle.crypto.engines.RSACoreEngine core
    public void <init>()
    {
        org.spongycastle.crypto.engines.RSAEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.RSAEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.RSAEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSAEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.RSAEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSAEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RSAEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.engines.RSACoreEngine $r2;

        r0 := @this: org.spongycastle.crypto.engines.RSAEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r2 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        if $r2 != null goto label1;

        $r2 = new org.spongycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        virtualinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }
    public byte[] processBlock(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RSAEngine r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.engines.RSACoreEngine $r2, $r4, $r5;
        java.lang.IllegalStateException $r3;
        java.math.BigInteger $r6;

        r0 := @this: org.spongycastle.crypto.engines.RSAEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA engine not initialised");

        throw $r3;

     label1:
        $r2 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r4 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r5 = r0.<org.spongycastle.crypto.engines.RSAEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>($r1, $i0, $i1);

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r6);

        $r1 = virtualinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>($r6);

        return $r1;
    }
