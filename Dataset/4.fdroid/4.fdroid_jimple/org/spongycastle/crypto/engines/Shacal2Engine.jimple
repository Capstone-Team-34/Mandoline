org.spongycastle.crypto.engines.Shacal2Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static final int[] K
private static final int ROUNDS
private boolean forEncryption
private int[] workingKey
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[64];

        $r0[0] = 1116352408;

        $r0[1] = 1899447441;

        $r0[2] = -1245643825;

        $r0[3] = -373957723;

        $r0[4] = 961987163;

        $r0[5] = 1508970993;

        $r0[6] = -1841331548;

        $r0[7] = -1424204075;

        $r0[8] = -670586216;

        $r0[9] = 310598401;

        $r0[10] = 607225278;

        $r0[11] = 1426881987;

        $r0[12] = 1925078388;

        $r0[13] = -2132889090;

        $r0[14] = -1680079193;

        $r0[15] = -1046744716;

        $r0[16] = -459576895;

        $r0[17] = -272742522;

        $r0[18] = 264347078;

        $r0[19] = 604807628;

        $r0[20] = 770255983;

        $r0[21] = 1249150122;

        $r0[22] = 1555081692;

        $r0[23] = 1996064986;

        $r0[24] = -1740746414;

        $r0[25] = -1473132947;

        $r0[26] = -1341970488;

        $r0[27] = -1084653625;

        $r0[28] = -958395405;

        $r0[29] = -710438585;

        $r0[30] = 113926993;

        $r0[31] = 338241895;

        $r0[32] = 666307205;

        $r0[33] = 773529912;

        $r0[34] = 1294757372;

        $r0[35] = 1396182291;

        $r0[36] = 1695183700;

        $r0[37] = 1986661051;

        $r0[38] = -2117940946;

        $r0[39] = -1838011259;

        $r0[40] = -1564481375;

        $r0[41] = -1474664885;

        $r0[42] = -1035236496;

        $r0[43] = -949202525;

        $r0[44] = -778901479;

        $r0[45] = -694614492;

        $r0[46] = -200395387;

        $r0[47] = 275423344;

        $r0[48] = 430227734;

        $r0[49] = 506948616;

        $r0[50] = 659060556;

        $r0[51] = 883997877;

        $r0[52] = 958139571;

        $r0[53] = 1322822218;

        $r0[54] = 1537002063;

        $r0[55] = 1747873779;

        $r0[56] = 1955562222;

        $r0[57] = 2024104815;

        $r0[58] = -2067236844;

        $r0[59] = -1933114872;

        $r0[60] = -1866530822;

        $r0[61] = -1538233109;

        $r0[62] = -1090935817;

        $r0[63] = -965641998;

        <org.spongycastle.crypto.engines.Shacal2Engine: int[] K> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.Shacal2Engine: boolean forEncryption> = 0;

        r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey> = null;

        return;
    }
    private void byteBlockToInts(byte[], int[], int, int)
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1;
        int[] $r2;
        int $i0, i1, i2, $i4;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: int[];

        i1 := @parameter2: int;

        $i0 := @parameter3: int;

     label1:
        if $i0 >= 8 goto label2;

        i2 = i1 + 1;

        $b3 = $r1[i1];

        i1 = $b3 & 255;

        $i4 = i1 << 24;

        i1 = i2 + 1;

        $b3 = $r1[i2];

        i2 = $b3 & 255;

        i2 = i2 << 16;

        $i4 = $i4 | i2;

        i2 = i1 + 1;

        $b3 = $r1[i1];

        i1 = $b3 & 255;

        i1 = i1 << 8;

        $i4 = $i4 | i1;

        i1 = i2 + 1;

        $b3 = $r1[i2];

        i2 = $b3 & 255;

        i2 = $i4 | i2;

        $r2[$i0] = i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void bytes2ints(byte[], int[], int, int)
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1;
        int[] $r2;
        int $i0, i1, $i2, $i4;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: int[];

        i1 := @parameter2: int;

        $i0 := @parameter3: int;

     label1:
        $i2 = lengthof $r1;

        $i2 = $i2 / 4;

        if $i0 >= $i2 goto label2;

        $i2 = i1 + 1;

        $b3 = $r1[i1];

        i1 = $b3 & 255;

        $i4 = i1 << 24;

        i1 = $i2 + 1;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i2 = $i2 << 16;

        $i4 = $i4 | $i2;

        $i2 = i1 + 1;

        $b3 = $r1[i1];

        i1 = $b3 & 255;

        i1 = i1 << 8;

        $i4 = $i4 | i1;

        i1 = $i2 + 1;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i2 = $i4 | $i2;

        $r2[$i0] = $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, i2, $i3, $i4, $i5;
        int[] r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        r3 = newarray (int)[8];

        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void byteBlockToInts(byte[],int[],int,int)>($r1, r3, $i0, 0);

        $i0 = 63;

     label1:
        if $i0 <= -1 goto label2;

        i2 = r3[0];

        $i3 = r3[1];

        $i3 = $i3 >>> 2;

        $i4 = r3[1];

        $i4 = $i4 << -2;

        $i3 = $i3 | $i4;

        $i4 = r3[1];

        $i4 = $i4 >>> 13;

        $i5 = r3[1];

        $i5 = $i5 << -13;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        $i4 = r3[1];

        $i4 = $i4 >>> 22;

        $i5 = r3[1];

        $i5 = $i5 << -22;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 - $i3;

        $i3 = r3[1];

        $i4 = r3[2];

        $i3 = $i3 & $i4;

        $i4 = r3[1];

        $i5 = r3[3];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        $i4 = r3[2];

        $i5 = r3[3];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 - $i3;

        $i3 = r3[1];

        r3[0] = $i3;

        $i3 = r3[2];

        r3[1] = $i3;

        $i3 = r3[3];

        r3[2] = $i3;

        $i3 = r3[4];

        $i3 = $i3 - i2;

        r3[3] = $i3;

        $i3 = r3[5];

        r3[4] = $i3;

        $i3 = r3[6];

        r3[5] = $i3;

        $i3 = r3[7];

        r3[6] = $i3;

        $r4 = <org.spongycastle.crypto.engines.Shacal2Engine: int[] K>;

        $i3 = $r4[$i0];

        i2 = i2 - $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $r4[$i0];

        i2 = i2 - $i3;

        $i3 = r3[4];

        $i3 = $i3 >>> 6;

        $i4 = r3[4];

        $i4 = $i4 << -6;

        $i3 = $i3 | $i4;

        $i4 = r3[4];

        $i4 = $i4 >>> 11;

        $i5 = r3[4];

        $i5 = $i5 << -11;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        $i4 = r3[4];

        $i4 = $i4 >>> 25;

        $i5 = r3[4];

        $i5 = $i5 << -25;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 - $i3;

        $i3 = r3[4];

        $i4 = r3[5];

        $i3 = $i3 & $i4;

        $i4 = r3[4];

        $i4 = $i4 ^ -1;

        $i5 = r3[6];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 - $i3;

        r3[7] = i2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void ints2bytes(int[],byte[],int)>(r3, $r2, $i1);

        return;
    }
    private void encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, i2, $i3, $i4, $i5;
        int[] r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        r3 = newarray (int)[8];

        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void byteBlockToInts(byte[],int[],int,int)>($r1, r3, $i0, 0);

        $i0 = 0;

     label1:
        if $i0 >= 64 goto label2;

        i2 = r3[4];

        i2 = i2 >>> 6;

        $i3 = r3[4];

        $i3 = $i3 << -6;

        i2 = i2 | $i3;

        $i3 = r3[4];

        $i3 = $i3 >>> 11;

        $i4 = r3[4];

        $i4 = $i4 << -11;

        $i3 = $i3 | $i4;

        i2 = i2 ^ $i3;

        $i3 = r3[4];

        $i3 = $i3 >>> 25;

        $i4 = r3[4];

        $i4 = $i4 << -25;

        $i3 = $i3 | $i4;

        i2 = i2 ^ $i3;

        $i3 = r3[4];

        $i4 = r3[5];

        $i3 = $i3 & $i4;

        $i4 = r3[4];

        $i4 = $i4 ^ -1;

        $i5 = r3[6];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 + $i3;

        $i3 = r3[7];

        i2 = i2 + $i3;

        $r4 = <org.spongycastle.crypto.engines.Shacal2Engine: int[] K>;

        $i3 = $r4[$i0];

        i2 = i2 + $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $r4[$i0];

        i2 = i2 + $i3;

        $i3 = r3[6];

        r3[7] = $i3;

        $i3 = r3[5];

        r3[6] = $i3;

        $i3 = r3[4];

        r3[5] = $i3;

        $i3 = r3[3];

        $i3 = $i3 + i2;

        r3[4] = $i3;

        $i3 = r3[2];

        r3[3] = $i3;

        $i3 = r3[1];

        r3[2] = $i3;

        $i3 = r3[0];

        r3[1] = $i3;

        $i3 = r3[0];

        $i3 = $i3 >>> 2;

        $i4 = r3[0];

        $i4 = $i4 << -2;

        $i3 = $i3 | $i4;

        $i4 = r3[0];

        $i4 = $i4 >>> 13;

        $i5 = r3[0];

        $i5 = $i5 << -13;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        $i4 = r3[0];

        $i4 = $i4 >>> 22;

        $i5 = r3[0];

        $i5 = $i5 << -22;

        $i4 = $i4 | $i5;

        $i3 = $i3 ^ $i4;

        i2 = $i3 + i2;

        $i3 = r3[0];

        $i4 = r3[2];

        $i3 = $i3 & $i4;

        $i4 = r3[0];

        $i5 = r3[3];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        $i4 = r3[2];

        $i5 = r3[3];

        $i4 = $i4 & $i5;

        $i3 = $i3 ^ $i4;

        i2 = i2 + $i3;

        r3[0] = i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void ints2bytes(int[],byte[],int)>(r3, $r2, $i1);

        return;
    }
    private void ints2bytes(int[], byte[], int)
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        int[] $r1;
        byte[] $r2;
        int i0, i1, $i2, $i3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $i2 = i0 + 1;

        $i3 = $r1[i1];

        $i3 = $i3 >>> 24;

        $b4 = (byte) $i3;

        $r2[i0] = $b4;

        i0 = $i2 + 1;

        $i3 = $r1[i1];

        $i3 = $i3 >>> 16;

        $b4 = (byte) $i3;

        $r2[$i2] = $b4;

        $i2 = i0 + 1;

        $i3 = $r1[i1];

        $i3 = $i3 >>> 8;

        $b4 = (byte) $i3;

        $r2[i0] = $b4;

        i0 = $i2 + 1;

        $i3 = $r1[i1];

        $b4 = (byte) $i3;

        $r2[$i2] = $b4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        return "Shacal2";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        return 32;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        boolean $z0, $z1;
        byte[] $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        java.lang.IllegalArgumentException $r3;
        int[] $r4;
        org.spongycastle.crypto.params.KeyParameter $r5;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $z0 := @parameter0: boolean;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r2 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only simple KeyParameter expected.");

        throw $r3;

     label1:
        r0.<org.spongycastle.crypto.engines.Shacal2Engine: boolean forEncryption> = $z0;

        $r4 = newarray (int)[64];

        r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey> = $r4;

        $r5 = (org.spongycastle.crypto.params.KeyParameter) $r2;

        $r1 = virtualinvoke $r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        virtualinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void setKey(byte[])>($r1);

        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        org.spongycastle.crypto.OutputLengthException $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Shacal2 not initialised");

        throw $r4;

     label1:
        $i2 = $i0 + 32;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + 32;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r6 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: boolean forEncryption>;

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

     label4:
        return 32;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        goto label4;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        return;
    }
    public void setKey(byte[])
    {
        org.spongycastle.crypto.engines.Shacal2Engine r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.Shacal2Engine;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        if $i1 == 0 goto label1;

        $i1 = lengthof $r1;

        if $i1 > 64 goto label1;

        $i1 = lengthof $r1;

        if $i1 < 16 goto label1;

        $i1 = lengthof $r1;

        $i1 = $i1 % 8;

        if $i1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Shacal2-key must be 16 - 64 bytes and multiple of 8");

        throw $r2;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.Shacal2Engine: void bytes2ints(byte[],int[],int,int)>($r1, $r3, 0, 0);

        $i1 = 16;

     label3:
        if $i1 >= 64 goto label4;

        $r3 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i2 = $i1 + -2;

        $i2 = $r4[$i2];

        $i2 = $i2 >>> 17;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -2;

        $i3 = $r4[$i3];

        $i3 = $i3 << -17;

        $i2 = $i2 | $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -2;

        $i3 = $r4[$i3];

        $i3 = $i3 >>> 19;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i4 = $i1 + -2;

        $i4 = $r4[$i4];

        $i4 = $i4 << -19;

        $i3 = $i3 | $i4;

        $i2 = $i2 ^ $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -2;

        $i3 = $r4[$i3];

        $i3 = $i3 >>> 10;

        $i2 = $i2 ^ $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -7;

        $i3 = $r4[$i3];

        $i2 = $i2 + $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -15;

        $i3 = $r4[$i3];

        $i3 = $i3 >>> 7;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i4 = $i1 + -15;

        $i4 = $r4[$i4];

        $i4 = $i4 << -7;

        $i3 = $i3 | $i4;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i4 = $i1 + -15;

        $i4 = $r4[$i4];

        $i4 = $i4 >>> 18;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i0 = $i1 + -15;

        $i0 = $r4[$i0];

        $i0 = $i0 << -18;

        $i4 = $i4 | $i0;

        $i3 = $i3 ^ $i4;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i4 = $i1 + -15;

        $i4 = $r4[$i4];

        $i4 = $i4 >>> 3;

        $i3 = $i3 ^ $i4;

        $i2 = $i2 + $i3;

        $r4 = r0.<org.spongycastle.crypto.engines.Shacal2Engine: int[] workingKey>;

        $i3 = $i1 + -16;

        $i3 = $r4[$i3];

        $i2 = $i2 + $i3;

        $r3[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;
    }
