org.spongycastle.crypto.engines.Grainv1Engine extends java.lang.Object implements org.spongycastle.crypto.StreamCipher
private static final int STATE_SIZE
private int index
private boolean initialised
private int[] lfsr
private int[] nfsr
private byte[] out
private int output
private byte[] workingIV
private byte[] workingKey
    public void <init>()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index> = 2;

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: boolean initialised> = 0;

        return;
    }
    private byte getKeyStream()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $i0 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index>;

        if $i0 <= 1 goto label1;

        specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: void oneRound()>();

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index> = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index>;

        $i0 = $i1 + 1;

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index> = $i0;

        $b2 = $r1[$i1];

        return $b2;
    }
    private int getOutput()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i0 = $r1[0];

        i0 = i0 >>> 1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i2 = $r1[1];

        i2 = i2 << 15;

        i0 = i0 | i2;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i2 = $r1[0];

        i2 = i2 >>> 2;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i4 = $r1[1];

        i4 = i4 << 14;

        i2 = i2 | i4;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i4 = $r1[0];

        i4 = i4 >>> 4;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i1 = $r1[1];

        i1 = i1 << 12;

        i4 = i4 | i1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i1 = $r1[0];

        i1 = i1 >>> 10;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[1];

        i3 = i3 << 6;

        i1 = i1 | i3;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[1];

        i3 = i3 >>> 15;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i5 = $r1[2];

        i5 = i5 << 1;

        i3 = i3 | i5;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i5 = $r1[2];

        i5 = i5 >>> 11;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i6 = $r1[3];

        i6 = i6 << 5;

        i5 = i5 | i6;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i6 = $r1[3];

        i6 = i6 >>> 8;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i7 = $r1[4];

        i7 = i7 << 8;

        i6 = i6 | i7;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i7 = $r1[3];

        i7 = i7 >>> 15;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i9 = $r1[4];

        i9 = i9 << 1;

        i7 = i7 | i9;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i9 = $r1[0];

        i9 = i9 >>> 3;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i8 = $r1[1];

        i8 = i8 << 13;

        i9 = i9 | i8;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i8 = $r1[1];

        i8 = i8 >>> 9;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i10 = $r1[2];

        i10 = i10 << 7;

        i8 = i8 | i10;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i10 = $r1[2];

        i10 = i10 >>> 14;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i11 = $r1[3];

        i11 = i11 << 2;

        i10 = i10 | i11;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i11 = $r1[4];

        $i12 = i8 ^ i7;

        $i13 = i9 & i11;

        $i12 = $i12 ^ $i13;

        $i13 = i10 & i11;

        $i12 = $i12 ^ $i13;

        $i13 = i11 & i7;

        $i12 = $i12 ^ $i13;

        $i13 = i9 & i8;

        $i13 = $i13 & i10;

        $i12 = $i12 ^ $i13;

        $i13 = i9 & i10;

        $i13 = $i13 & i11;

        $i12 = $i12 ^ $i13;

        i9 = i9 & i10;

        i9 = i9 & i7;

        i9 = $i12 ^ i9;

        i8 = i8 & i10;

        i8 = i8 & i7;

        i9 = i9 ^ i8;

        i8 = i10 & i11;

        i7 = i8 & i7;

        i7 = i9 ^ i7;

        i0 = i7 ^ i0;

        i0 = i0 ^ i2;

        i0 = i0 ^ i4;

        i0 = i0 ^ i1;

        i0 = i0 ^ i3;

        i0 = i0 ^ i5;

        i0 = i0 ^ i6;

        i0 = i0 & 65535;

        return i0;
    }
    private int getOutputLFSR()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i0 = $r1[0];

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i1 = $r1[0];

        i1 = i1 >>> 13;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i2 = $r1[1];

        i2 = i2 << 3;

        i1 = i1 | i2;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i2 = $r1[1];

        i2 = i2 >>> 7;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i3 = $r1[2];

        i3 = i3 << 9;

        i2 = i2 | i3;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i3 = $r1[2];

        i3 = i3 >>> 6;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i4 = $r1[3];

        i4 = i4 << 10;

        i3 = i3 | i4;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i4 = $r1[3];

        i4 = i4 >>> 3;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i5 = $r1[4];

        i5 = i5 << 13;

        i4 = i4 | i5;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i5 = $r1[3];

        i5 = i5 >>> 14;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i6 = $r1[4];

        $i6 = $i6 << 2;

        i5 = i5 | $i6;

        i0 = i0 ^ i1;

        i0 = i0 ^ i2;

        i0 = i0 ^ i3;

        i0 = i0 ^ i4;

        i0 = i0 ^ i5;

        i0 = i0 & 65535;

        return i0;
    }
    private int getOutputNFSR()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, $i13;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i0 = $r1[0];

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i12 = $r1[0];

        i12 = i12 >>> 9;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[1];

        i3 = i3 << 7;

        i12 = i12 | i3;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[0];

        i3 = i3 >>> 14;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i2 = $r1[1];

        i2 = i2 << 2;

        i1 = i3 | i2;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[0];

        i3 = i3 >>> 15;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i2 = $r1[1];

        i2 = i2 << 1;

        i2 = i3 | i2;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i3 = $r1[1];

        i3 = i3 >>> 5;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i4 = $r1[2];

        i4 = i4 << 11;

        i3 = i3 | i4;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i4 = $r1[1];

        i4 = i4 >>> 12;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i5 = $r1[2];

        i5 = i5 << 4;

        i4 = i4 | i5;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i5 = $r1[2];

        i5 = i5 >>> 1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i6 = $r1[3];

        i6 = i6 << 15;

        i5 = i5 | i6;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i6 = $r1[2];

        i6 = i6 >>> 5;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i7 = $r1[3];

        i7 = i7 << 11;

        i6 = i6 | i7;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i7 = $r1[2];

        i7 = i7 >>> 13;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i8 = $r1[3];

        i8 = i8 << 3;

        i7 = i7 | i8;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i8 = $r1[3];

        i8 = i8 >>> 4;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i9 = $r1[4];

        i9 = i9 << 12;

        i8 = i8 | i9;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i9 = $r1[3];

        i9 = i9 >>> 12;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i11 = $r1[4];

        i11 = i11 << 4;

        i9 = i9 | i11;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i11 = $r1[3];

        i11 = i11 >>> 14;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i10 = $r1[4];

        i10 = i10 << 2;

        i10 = i11 | i10;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i11 = $r1[3];

        i11 = i11 >>> 15;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i13 = $r1[4];

        $i13 = $i13 << 1;

        i11 = i11 | $i13;

        i10 = i10 ^ i9;

        i10 = i10 ^ i8;

        i10 = i10 ^ i7;

        i10 = i10 ^ i6;

        i10 = i10 ^ i5;

        i10 = i10 ^ i4;

        i10 = i10 ^ i3;

        i1 = i10 ^ i1;

        i1 = i1 ^ i12;

        i0 = i1 ^ i0;

        i1 = i11 & i9;

        i0 = i0 ^ i1;

        i1 = i6 & i5;

        i0 = i0 ^ i1;

        i1 = i2 & i12;

        i0 = i0 ^ i1;

        i1 = i9 & i8;

        i1 = i1 & i7;

        i0 = i0 ^ i1;

        i1 = i5 & i4;

        i1 = i1 & i3;

        i0 = i0 ^ i1;

        i1 = i11 & i7;

        i1 = i1 & i4;

        i1 = i1 & i12;

        i0 = i0 ^ i1;

        i1 = i9 & i8;

        i1 = i1 & i6;

        i1 = i1 & i5;

        i0 = i0 ^ i1;

        i1 = i11 & i9;

        i1 = i1 & i3;

        i1 = i1 & i2;

        i0 = i0 ^ i1;

        i1 = i11 & i9;

        i1 = i1 & i8;

        i1 = i1 & i7;

        i1 = i1 & i6;

        i0 = i0 ^ i1;

        i1 = i5 & i4;

        i1 = i1 & i3;

        i2 = i1 & i2;

        i12 = i2 & i12;

        i12 = i0 ^ i12;

        i2 = i8 & i7;

        i2 = i2 & i6;

        i2 = i2 & i5;

        i2 = i2 & i4;

        i3 = i2 & i3;

        i12 = i12 ^ i3;

        i12 = i12 & 65535;

        return i12;
    }
    private void initGrain()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int i0, $i1, $i2;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        i0 = 0;

     label1:
        if i0 >= 10 goto label2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutput()>();

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output> = $i1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutputNFSR()>();

        $r2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i2 = $r2[0];

        $i1 = $i1 ^ $i2;

        $i2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output>;

        $i1 = $i1 ^ $i2;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r1, $i1);

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutputLFSR()>();

        $i2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output>;

        $i1 = $i1 ^ $i2;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r1, $i1);

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r1;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.engines.Grainv1Engine: boolean initialised> = 1;

        return;
    }
    private void oneRound()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int $i0, $i2;
        byte[] $r1;
        byte $b1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutput()>();

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output> = $i0;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i0 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output>;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i0 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int output>;

        $i0 = $i0 >> 8;

        $b1 = (byte) $i0;

        $r1[1] = $b1;

        $r2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutputNFSR()>();

        $r3 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i2 = $r3[0];

        $i0 = $i0 ^ $i2;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r2, $i0);

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r2;

        $r2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int getOutputLFSR()>();

        $r2 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r2, $i0);

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r2;

        return;
    }
    private void setKey(byte[], byte[])
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        byte[] $r1, $r2;
        int i0, i1, $i2, $i4;
        int[] $r3;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r2[8] = -1;

        $r2[9] = -1;

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey> = $r1;

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV> = $r2;

        i0 = 0;

        i1 = 0;

     label1:
        $r3 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i2 = lengthof $r3;

        if i1 >= $i2 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $i2 = i0 + 1;

        $b3 = $r1[$i2];

        $i2 = $b3 << 8;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $b3 = $r1[i0];

        $i4 = $b3 & 255;

        $i2 = $i2 | $i4;

        $i2 = $i2 & 65535;

        $r3[i1] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $i2 = i0 + 1;

        $b3 = $r1[$i2];

        $i2 = $b3 << 8;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $b3 = $r1[i0];

        $i4 = $b3 & 255;

        $i2 = $i2 | $i4;

        $i2 = $i2 & 65535;

        $r3[i1] = $i2;

        i0 = i0 + 2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private int[] shift(int[], int)
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r1[1];

        $r1[0] = $i1;

        $i1 = $r1[2];

        $r1[1] = $i1;

        $i1 = $r1[3];

        $r1[2] = $i1;

        $i1 = $r1[4];

        $r1[3] = $i1;

        $r1[4] = $i0;

        return $r1;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        return "Grain v1";
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ParametersWithIV r3;
        byte[] $r4, $r6, $r8;
        int $i0;
        org.spongycastle.crypto.params.KeyParameter r5;
        int[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 Init parameters must include an IV");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        if $r4 == null goto label2;

        $i0 = lengthof $r4;

        if $i0 == 8 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 requires exactly 8 bytes of IV");

        throw $r2;

     label3:
        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 Init parameters must include a key");

        throw $r2;

     label4:
        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r5 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r6;

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV> = $r6;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r6;

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey> = $r6;

        $r7 = newarray (int)[5];

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r7;

        $r7 = newarray (int)[5];

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r7;

        $r6 = newarray (byte)[2];

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] out> = $r6;

        $r6 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 0, $i0);

        $r4 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r6 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $r8 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 0, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: void reset()>();

        return;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;
        byte $b6, $b7;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $z0 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i3 = $i0 + $i1;

        $i4 = lengthof $r1;

        if $i3 <= $i4 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        $i3 = 0;

     label4:
        if $i3 >= $i1 goto label5;

        $i4 = $i2 + $i3;

        $i5 = $i0 + $i3;

        $b6 = $r1[$i5];

        $b7 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte getKeyStream()>();

        $i5 = $b6 ^ $b7;

        $b6 = (byte) $i5;

        $r2[$i4] = $b6;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        return $i1;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        r0.<org.spongycastle.crypto.engines.Grainv1Engine: int index> = 2;

        $r2 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $r1 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: void setKey(byte[],byte[])>($r2, $r1);

        specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: void initGrain()>();

        return;
    }
    public byte returnByte(byte)
    {
        org.spongycastle.crypto.engines.Grainv1Engine r0;
        byte $b0, $b1;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int $i2;

        r0 := @this: org.spongycastle.crypto.engines.Grainv1Engine;

        $b0 := @parameter0: byte;

        $z0 = r0.<org.spongycastle.crypto.engines.Grainv1Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: java.lang.String getAlgorithmName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $b1 = specialinvoke r0.<org.spongycastle.crypto.engines.Grainv1Engine: byte getKeyStream()>();

        $i2 = $b1 ^ $b0;

        $b0 = (byte) $i2;

        return $b0;
    }
