org.spongycastle.crypto.engines.RC2Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static byte[] piTable
private boolean encrypting
private int[] workingKey
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[256];

        $r0[0] = -39;

        $r0[1] = 120;

        $r0[2] = -7;

        $r0[3] = -60;

        $r0[4] = 25;

        $r0[5] = -35;

        $r0[6] = -75;

        $r0[7] = -19;

        $r0[8] = 40;

        $r0[9] = -23;

        $r0[10] = -3;

        $r0[11] = 121;

        $r0[12] = 74;

        $r0[13] = -96;

        $r0[14] = -40;

        $r0[15] = -99;

        $r0[16] = -58;

        $r0[17] = 126;

        $r0[18] = 55;

        $r0[19] = -125;

        $r0[20] = 43;

        $r0[21] = 118;

        $r0[22] = 83;

        $r0[23] = -114;

        $r0[24] = 98;

        $r0[25] = 76;

        $r0[26] = 100;

        $r0[27] = -120;

        $r0[28] = 68;

        $r0[29] = -117;

        $r0[30] = -5;

        $r0[31] = -94;

        $r0[32] = 23;

        $r0[33] = -102;

        $r0[34] = 89;

        $r0[35] = -11;

        $r0[36] = -121;

        $r0[37] = -77;

        $r0[38] = 79;

        $r0[39] = 19;

        $r0[40] = 97;

        $r0[41] = 69;

        $r0[42] = 109;

        $r0[43] = -115;

        $r0[44] = 9;

        $r0[45] = -127;

        $r0[46] = 125;

        $r0[47] = 50;

        $r0[48] = -67;

        $r0[49] = -113;

        $r0[50] = 64;

        $r0[51] = -21;

        $r0[52] = -122;

        $r0[53] = -73;

        $r0[54] = 123;

        $r0[55] = 11;

        $r0[56] = -16;

        $r0[57] = -107;

        $r0[58] = 33;

        $r0[59] = 34;

        $r0[60] = 92;

        $r0[61] = 107;

        $r0[62] = 78;

        $r0[63] = -126;

        $r0[64] = 84;

        $r0[65] = -42;

        $r0[66] = 101;

        $r0[67] = -109;

        $r0[68] = -50;

        $r0[69] = 96;

        $r0[70] = -78;

        $r0[71] = 28;

        $r0[72] = 115;

        $r0[73] = 86;

        $r0[74] = -64;

        $r0[75] = 20;

        $r0[76] = -89;

        $r0[77] = -116;

        $r0[78] = -15;

        $r0[79] = -36;

        $r0[80] = 18;

        $r0[81] = 117;

        $r0[82] = -54;

        $r0[83] = 31;

        $r0[84] = 59;

        $r0[85] = -66;

        $r0[86] = -28;

        $r0[87] = -47;

        $r0[88] = 66;

        $r0[89] = 61;

        $r0[90] = -44;

        $r0[91] = 48;

        $r0[92] = -93;

        $r0[93] = 60;

        $r0[94] = -74;

        $r0[95] = 38;

        $r0[96] = 111;

        $r0[97] = -65;

        $r0[98] = 14;

        $r0[99] = -38;

        $r0[100] = 70;

        $r0[101] = 105;

        $r0[102] = 7;

        $r0[103] = 87;

        $r0[104] = 39;

        $r0[105] = -14;

        $r0[106] = 29;

        $r0[107] = -101;

        $r0[108] = -68;

        $r0[109] = -108;

        $r0[110] = 67;

        $r0[111] = 3;

        $r0[112] = -8;

        $r0[113] = 17;

        $r0[114] = -57;

        $r0[115] = -10;

        $r0[116] = -112;

        $r0[117] = -17;

        $r0[118] = 62;

        $r0[119] = -25;

        $r0[120] = 6;

        $r0[121] = -61;

        $r0[122] = -43;

        $r0[123] = 47;

        $r0[124] = -56;

        $r0[125] = 102;

        $r0[126] = 30;

        $r0[127] = -41;

        $r0[128] = 8;

        $r0[129] = -24;

        $r0[130] = -22;

        $r0[131] = -34;

        $r0[132] = -128;

        $r0[133] = 82;

        $r0[134] = -18;

        $r0[135] = -9;

        $r0[136] = -124;

        $r0[137] = -86;

        $r0[138] = 114;

        $r0[139] = -84;

        $r0[140] = 53;

        $r0[141] = 77;

        $r0[142] = 106;

        $r0[143] = 42;

        $r0[144] = -106;

        $r0[145] = 26;

        $r0[146] = -46;

        $r0[147] = 113;

        $r0[148] = 90;

        $r0[149] = 21;

        $r0[150] = 73;

        $r0[151] = 116;

        $r0[152] = 75;

        $r0[153] = -97;

        $r0[154] = -48;

        $r0[155] = 94;

        $r0[156] = 4;

        $r0[157] = 24;

        $r0[158] = -92;

        $r0[159] = -20;

        $r0[160] = -62;

        $r0[161] = -32;

        $r0[162] = 65;

        $r0[163] = 110;

        $r0[164] = 15;

        $r0[165] = 81;

        $r0[166] = -53;

        $r0[167] = -52;

        $r0[168] = 36;

        $r0[169] = -111;

        $r0[170] = -81;

        $r0[171] = 80;

        $r0[172] = -95;

        $r0[173] = -12;

        $r0[174] = 112;

        $r0[175] = 57;

        $r0[176] = -103;

        $r0[177] = 124;

        $r0[178] = 58;

        $r0[179] = -123;

        $r0[180] = 35;

        $r0[181] = -72;

        $r0[182] = -76;

        $r0[183] = 122;

        $r0[184] = -4;

        $r0[185] = 2;

        $r0[186] = 54;

        $r0[187] = 91;

        $r0[188] = 37;

        $r0[189] = 85;

        $r0[190] = -105;

        $r0[191] = 49;

        $r0[192] = 45;

        $r0[193] = 93;

        $r0[194] = -6;

        $r0[195] = -104;

        $r0[196] = -29;

        $r0[197] = -118;

        $r0[198] = -110;

        $r0[199] = -82;

        $r0[200] = 5;

        $r0[201] = -33;

        $r0[202] = 41;

        $r0[203] = 16;

        $r0[204] = 103;

        $r0[205] = 108;

        $r0[206] = -70;

        $r0[207] = -55;

        $r0[208] = -45;

        $r0[209] = 0;

        $r0[210] = -26;

        $r0[211] = -49;

        $r0[212] = -31;

        $r0[213] = -98;

        $r0[214] = -88;

        $r0[215] = 44;

        $r0[216] = 99;

        $r0[217] = 22;

        $r0[218] = 1;

        $r0[219] = 63;

        $r0[220] = 88;

        $r0[221] = -30;

        $r0[222] = -119;

        $r0[223] = -87;

        $r0[224] = 13;

        $r0[225] = 56;

        $r0[226] = 52;

        $r0[227] = 27;

        $r0[228] = -85;

        $r0[229] = 51;

        $r0[230] = -1;

        $r0[231] = -80;

        $r0[232] = -69;

        $r0[233] = 72;

        $r0[234] = 12;

        $r0[235] = 95;

        $r0[236] = -71;

        $r0[237] = -79;

        $r0[238] = -51;

        $r0[239] = 46;

        $r0[240] = -59;

        $r0[241] = -13;

        $r0[242] = -37;

        $r0[243] = 71;

        $r0[244] = -27;

        $r0[245] = -91;

        $r0[246] = -100;

        $r0[247] = 119;

        $r0[248] = 10;

        $r0[249] = -90;

        $r0[250] = 32;

        $r0[251] = 104;

        $r0[252] = -2;

        $r0[253] = 127;

        $r0[254] = -63;

        $r0[255] = -83;

        <org.spongycastle.crypto.engines.RC2Engine: byte[] piTable> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.RC2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        byte $b3;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = $i0 + 7;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i2 = $i2 << 8;

        $i4 = $i0 + 6;

        $b3 = $r1[$i4];

        $i4 = $b3 & 255;

        $i2 = $i2 + $i4;

        $i4 = $i0 + 5;

        $b3 = $r1[$i4];

        $i4 = $b3 & 255;

        $i4 = $i4 << 8;

        $i5 = $i0 + 4;

        $b3 = $r1[$i5];

        $i5 = $b3 & 255;

        $i4 = $i4 + $i5;

        $i5 = $i0 + 3;

        $b3 = $r1[$i5];

        $i5 = $b3 & 255;

        $i5 = $i5 << 8;

        $i6 = $i0 + 2;

        $b3 = $r1[$i6];

        $i6 = $b3 & 255;

        $i5 = $i5 + $i6;

        $i6 = $i0 + 1;

        $b3 = $r1[$i6];

        $i6 = $b3 & 255;

        $i6 = $i6 << 8;

        $b3 = $r1[$i0];

        $i0 = $b3 & 255;

        $i0 = $i6 + $i0;

        $i6 = 60;

     label1:
        if $i6 < 44 goto label2;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i2, 11);

        $i7 = $i4 ^ -1;

        $i7 = $i7 & $i0;

        $i8 = $i5 & $i4;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i6 + 3;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i2 = $i2 - $i7;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i4, 13);

        $i7 = $i5 ^ -1;

        $i7 = $i7 & $i2;

        $i8 = $i0 & $i5;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i6 + 2;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i4 = $i4 - $i7;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 14);

        $i7 = $i0 ^ -1;

        $i7 = $i7 & $i4;

        $i8 = $i2 & $i0;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i6 + 1;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i5 = $i5 - $i7;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i0, 15);

        $i7 = $i2 ^ -1;

        $i7 = $i7 & $i5;

        $i8 = $i4 & $i2;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $r3[$i6];

        $i7 = $i7 + $i8;

        $i0 = $i0 - $i7;

        $i6 = $i6 + -4;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i4 & 63;

        $i6 = $r3[$i6];

        $i2 = $i2 - $i6;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i5 & 63;

        $i6 = $r3[$i6];

        $i6 = $i4 - $i6;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i4 = $i0 & 63;

        $i4 = $r3[$i4];

        $i5 = $i5 - $i4;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i4 = $i2 & 63;

        $i4 = $r3[$i4];

        $i4 = $i0 - $i4;

        $i0 = 40;

     label3:
        if $i0 < 20 goto label4;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i2, 11);

        $i7 = $i6 ^ -1;

        $i7 = $i7 & $i4;

        $i8 = $i5 & $i6;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i0 + 3;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i2 = $i2 - $i7;

        $i6 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i6, 13);

        $i7 = $i5 ^ -1;

        $i7 = $i7 & $i2;

        $i8 = $i4 & $i5;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i0 + 2;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i6 = $i6 - $i7;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 14);

        $i7 = $i4 ^ -1;

        $i7 = $i7 & $i6;

        $i8 = $i2 & $i4;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i0 + 1;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i5 = $i5 - $i7;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i4, 15);

        $i7 = $i2 ^ -1;

        $i7 = $i7 & $i5;

        $i8 = $i6 & $i2;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $r3[$i0];

        $i7 = $i7 + $i8;

        $i4 = $i4 - $i7;

        $i0 = $i0 + -4;

        goto label3;

     label4:
        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i0 = $i6 & 63;

        $i0 = $r3[$i0];

        $i0 = $i2 - $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i2 = $i5 & 63;

        $i2 = $r3[$i2];

        $i2 = $i6 - $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i4 & 63;

        $i6 = $r3[$i6];

        $i5 = $i5 - $i6;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i0 & 63;

        $i6 = $r3[$i6];

        $i6 = $i4 - $i6;

        $i4 = 16;

     label5:
        if $i4 < 0 goto label6;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i0, 11);

        $i7 = $i2 ^ -1;

        $i7 = $i7 & $i6;

        $i8 = $i5 & $i2;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i4 + 3;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i0 = $i0 - $i7;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i2, 13);

        $i7 = $i5 ^ -1;

        $i7 = $i7 & $i0;

        $i8 = $i6 & $i5;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i4 + 2;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i2 = $i2 - $i7;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 14);

        $i7 = $i6 ^ -1;

        $i7 = $i7 & $i2;

        $i8 = $i0 & $i6;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i4 + 1;

        $i8 = $r3[$i8];

        $i7 = $i7 + $i8;

        $i5 = $i5 - $i7;

        $i6 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i6, 15);

        $i7 = $i0 ^ -1;

        $i7 = $i7 & $i5;

        $i8 = $i2 & $i0;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $r3[$i4];

        $i7 = $i7 + $i8;

        $i6 = $i6 - $i7;

        $i4 = $i4 + -4;

        goto label5;

     label6:
        $b3 = (byte) $i6;

        $r2[$i1] = $b3;

        $i4 = $i1 + 1;

        $i6 = $i6 >> 8;

        $b3 = (byte) $i6;

        $r2[$i4] = $b3;

        $i4 = $i1 + 2;

        $b3 = (byte) $i5;

        $r2[$i4] = $b3;

        $i4 = $i1 + 3;

        $i5 = $i5 >> 8;

        $b3 = (byte) $i5;

        $r2[$i4] = $b3;

        $i4 = $i1 + 4;

        $b3 = (byte) $i2;

        $r2[$i4] = $b3;

        $i4 = $i1 + 5;

        $i2 = $i2 >> 8;

        $b3 = (byte) $i2;

        $r2[$i4] = $b3;

        $i2 = $i1 + 6;

        $b3 = (byte) $i0;

        $r2[$i2] = $b3;

        $i1 = $i1 + 7;

        $i0 = $i0 >> 8;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        return;
    }
    private void encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte $b3;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = $i0 + 7;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i2 = $i2 << 8;

        $i4 = $i0 + 6;

        $b3 = $r1[$i4];

        $i4 = $b3 & 255;

        $i2 = $i2 + $i4;

        $i4 = $i0 + 5;

        $b3 = $r1[$i4];

        $i4 = $b3 & 255;

        $i4 = $i4 << 8;

        $i5 = $i0 + 4;

        $b3 = $r1[$i5];

        $i5 = $b3 & 255;

        $i4 = $i4 + $i5;

        $i5 = $i0 + 3;

        $b3 = $r1[$i5];

        $i5 = $b3 & 255;

        $i5 = $i5 << 8;

        $i6 = $i0 + 2;

        $b3 = $r1[$i6];

        $i6 = $b3 & 255;

        $i5 = $i5 + $i6;

        $i6 = $i0 + 1;

        $b3 = $r1[$i6];

        $i6 = $b3 & 255;

        $i6 = $i6 << 8;

        $b3 = $r1[$i0];

        $i0 = $b3 & 255;

        $i6 = $i6 + $i0;

        $i0 = 0;

     label1:
        if $i0 > 16 goto label2;

        $i7 = $i2 ^ -1;

        $i7 = $i7 & $i5;

        $i6 = $i7 + $i6;

        $i7 = $i4 & $i2;

        $i6 = $i6 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $r3[$i0];

        $i6 = $i6 + $i7;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i6, 1);

        $i6 = $i7;

        $i8 = $i7 ^ -1;

        $i8 = $i8 & $i4;

        $i5 = $i8 + $i5;

        $i8 = $i2 & $i7;

        $i5 = $i5 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i0 + 1;

        $i8 = $r3[$i8];

        $i5 = $i5 + $i8;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 2);

        $i5 = $i8;

        $i9 = $i8 ^ -1;

        $i9 = $i9 & $i2;

        $i4 = $i9 + $i4;

        $i9 = $i7 & $i8;

        $i4 = $i4 + $i9;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i9 = $i0 + 2;

        $i9 = $r3[$i9];

        $i4 = $i4 + $i9;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i4, 3);

        $i4 = $i9;

        $i10 = $i9 ^ -1;

        $i7 = $i10 & $i7;

        $i2 = $i7 + $i2;

        $i7 = $i8 & $i9;

        $i2 = $i2 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $i0 + 3;

        $i7 = $r3[$i7];

        $i2 = $i2 + $i7;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i2, 5);

        $i0 = $i0 + 4;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i0 = $i2 & 63;

        $i0 = $r3[$i0];

        $i0 = $i6 + $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i0 & 63;

        $i6 = $r3[$i6];

        $i5 = $i5 + $i6;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i5 & 63;

        $i6 = $r3[$i6];

        $i4 = $i4 + $i6;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i6 = $i4 & 63;

        $i6 = $r3[$i6];

        $i6 = $i2 + $i6;

        $i2 = 20;

     label3:
        if $i2 > 40 goto label4;

        $i7 = $i6 ^ -1;

        $i7 = $i7 & $i5;

        $i0 = $i7 + $i0;

        $i7 = $i4 & $i6;

        $i0 = $i0 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $r3[$i2];

        $i0 = $i0 + $i7;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i0, 1);

        $i0 = $i7;

        $i8 = $i7 ^ -1;

        $i8 = $i8 & $i4;

        $i5 = $i8 + $i5;

        $i8 = $i6 & $i7;

        $i5 = $i5 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i2 + 1;

        $i8 = $r3[$i8];

        $i5 = $i5 + $i8;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 2);

        $i5 = $i8;

        $i9 = $i8 ^ -1;

        $i9 = $i9 & $i6;

        $i4 = $i9 + $i4;

        $i9 = $i7 & $i8;

        $i4 = $i4 + $i9;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i9 = $i2 + 2;

        $i9 = $r3[$i9];

        $i4 = $i4 + $i9;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i4, 3);

        $i4 = $i9;

        $i10 = $i9 ^ -1;

        $i7 = $i10 & $i7;

        $i6 = $i7 + $i6;

        $i7 = $i8 & $i9;

        $i6 = $i6 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $i2 + 3;

        $i7 = $r3[$i7];

        $i6 = $i6 + $i7;

        $i6 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i6, 5);

        $i2 = $i2 + 4;

        goto label3;

     label4:
        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i2 = $i6 & 63;

        $i2 = $r3[$i2];

        $i0 = $i0 + $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i2 = $i0 & 63;

        $i2 = $r3[$i2];

        $i2 = $i5 + $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i5 = $i2 & 63;

        $i5 = $r3[$i5];

        $i4 = $i4 + $i5;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i5 = $i4 & 63;

        $i5 = $r3[$i5];

        $i5 = $i6 + $i5;

        $i6 = 44;

     label5:
        if $i6 >= 64 goto label6;

        $i7 = $i5 ^ -1;

        $i7 = $i7 & $i2;

        $i0 = $i7 + $i0;

        $i7 = $i4 & $i5;

        $i0 = $i0 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $r3[$i6];

        $i0 = $i0 + $i7;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i0, 1);

        $i0 = $i7;

        $i8 = $i7 ^ -1;

        $i8 = $i8 & $i4;

        $i2 = $i8 + $i2;

        $i8 = $i5 & $i7;

        $i2 = $i2 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i8 = $i6 + 1;

        $i8 = $r3[$i8];

        $i2 = $i2 + $i8;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i2, 2);

        $i2 = $i8;

        $i9 = $i8 ^ -1;

        $i9 = $i9 & $i5;

        $i4 = $i9 + $i4;

        $i9 = $i7 & $i8;

        $i4 = $i4 + $i9;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i9 = $i6 + 2;

        $i9 = $r3[$i9];

        $i4 = $i4 + $i9;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i4, 3);

        $i4 = $i9;

        $i10 = $i9 ^ -1;

        $i7 = $i10 & $i7;

        $i5 = $i7 + $i5;

        $i7 = $i8 & $i9;

        $i5 = $i5 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        $i7 = $i6 + 3;

        $i7 = $r3[$i7];

        $i5 = $i5 + $i7;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int rotateWordLeft(int,int)>($i5, 5);

        $i6 = $i6 + 4;

        goto label5;

     label6:
        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i6 = $i1 + 1;

        $i0 = $i0 >> 8;

        $b3 = (byte) $i0;

        $r2[$i6] = $b3;

        $i0 = $i1 + 2;

        $b3 = (byte) $i2;

        $r2[$i0] = $b3;

        $i0 = $i1 + 3;

        $i2 = $i2 >> 8;

        $b3 = (byte) $i2;

        $r2[$i0] = $b3;

        $i0 = $i1 + 4;

        $b3 = (byte) $i4;

        $r2[$i0] = $b3;

        $i0 = $i1 + 5;

        $i2 = $i4 >> 8;

        $b3 = (byte) $i2;

        $r2[$i0] = $b3;

        $i0 = $i1 + 6;

        $b3 = (byte) $i5;

        $r2[$i0] = $b3;

        $i0 = $i1 + 7;

        $i1 = $i5 >> 8;

        $b3 = (byte) $i1;

        $r2[$i0] = $b3;

        return;
    }
    private int[] generateWorkingKey(byte[], int)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        byte[] $r1;
        int $i0, i1, i2, i3, i5, i6;
        int[] r2, r3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        r3 = newarray (int)[128];

        i3 = 0;

     label1:
        i1 = lengthof $r1;

        if i3 == i1 goto label2;

        $b4 = $r1[i3];

        i1 = $b4 & 255;

        r3[i3] = i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        i3 = lengthof $r1;

        if i3 >= 128 goto label4;

        i5 = 0;

        i1 = i3 + -1;

        i6 = r3[i1];

     label3:
        $r1 = <org.spongycastle.crypto.engines.RC2Engine: byte[] piTable>;

        i1 = i5 + 1;

        i5 = r3[i5];

        i5 = i5 + i6;

        i5 = i5 & 255;

        $b4 = $r1[i5];

        i6 = $b4 & 255;

        i2 = i3 + 1;

        r3[i3] = i6;

        if i2 < 128 goto label9;

     label4:
        i3 = $i0 + 7;

        i3 = i3 >> 3;

        $r1 = <org.spongycastle.crypto.engines.RC2Engine: byte[] piTable>;

        i1 = 128 - i3;

        i1 = r3[i1];

        $i0 = neg $i0;

        $i0 = $i0 & 7;

        $i0 = 255 >> $i0;

        $i0 = i1 & $i0;

        $b4 = $r1[$i0];

        $i0 = $b4 & 255;

        i1 = 128 - i3;

        r3[i1] = $i0;

        i1 = 128 - i3;

        i1 = i1 + -1;

     label5:
        if i1 < 0 goto label6;

        $r1 = <org.spongycastle.crypto.engines.RC2Engine: byte[] piTable>;

        i5 = i1 + i3;

        i5 = r3[i5];

        $i0 = i5 ^ $i0;

        $b4 = $r1[$i0];

        $i0 = $b4 & 255;

        r3[i1] = $i0;

        i1 = i1 + -1;

        goto label5;

     label6:
        r2 = newarray (int)[64];

        $i0 = 0;

     label7:
        i3 = lengthof r2;

        if $i0 == i3 goto label8;

        i3 = $i0 * 2;

        i3 = r3[i3];

        i1 = $i0 * 2;

        i1 = i1 + 1;

        i1 = r3[i1];

        i1 = i1 << 8;

        i3 = i3 + i1;

        r2[$i0] = i3;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return r2;

     label9:
        i5 = i1;

        i3 = i2;

        goto label3;
    }
    private int rotateWordLeft(int, int)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i2 = $i1 & 65535;

        $i1 = $i2 << $i0;

        $i0 = 16 - $i0;

        $i0 = $i2 >> $i0;

        $i1 = $i1 | $i0;

        return $i1;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RC2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        return "RC2";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.RC2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        return 8;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.RC2Parameters r2;
        byte[] $r3;
        int $i0;
        int[] $r4;
        org.spongycastle.crypto.params.KeyParameter r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.engines.RC2Engine: boolean encrypting> = $z0;

        $z0 = r1 instanceof org.spongycastle.crypto.params.RC2Parameters;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.RC2Parameters) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.RC2Parameters: byte[] getKey()>();

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.params.RC2Parameters: int getEffectiveKeyBits()>();

        $r4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int[] generateWorkingKey(byte[],int)>($r3, $i0);

        r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey> = $r4;

        return;

     label1:
        $z0 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label2;

        r5 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r5.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r3;

        $i0 = $i0 * 8;

        $r4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: int[] generateWorkingKey(byte[],int)>($r3, $i0);

        r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey> = $r4;

        return;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC2 init - ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;
    }
    public final int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC2Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        org.spongycastle.crypto.OutputLengthException $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.RC2Engine: int[] workingKey>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RC2 engine not initialised");

        throw $r4;

     label1:
        $i2 = $i0 + 8;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + 8;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r6 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.RC2Engine: boolean encrypting>;

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: void encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

     label4:
        return 8;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.engines.RC2Engine: void decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        goto label4;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.RC2Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC2Engine;

        return;
    }
