org.spongycastle.crypto.engines.RC564Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final long P64
private static final long Q64
private static final int bytesPerWord
private static final int wordSize
private long[] _S
private int _noRounds
private boolean forEncryption
    public void <init>()
    {
        org.spongycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RC564Engine: int _noRounds> = 12;

        r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S> = null;

        return;
    }
    private long bytesToWord(byte[], int)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1;
        int $i0, i3, $i4;
        long $l1, $l2;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 = 0L;

        i3 = 7;

     label1:
        if i3 < 0 goto label2;

        $l1 = $l1 << 8;

        $i4 = i3 + $i0;

        $b5 = $r1[$i4];

        $i4 = $b5 & 255;

        $l2 = (long) $i4;

        $l1 = $l1 + $l2;

        i3 = i3 + -1;

        goto label1;

     label2:
        return $l1;
    }
    private int decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i4;
        long $l2, l3, $l5;
        long[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        l3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>($r1, $i0);

        $i0 = $i0 + 8;

        $l2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>($r1, $i0);

        $i0 = r0.<org.spongycastle.crypto.engines.RC564Engine: int _noRounds>;

     label1:
        if $i0 < 1 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i4 = $i0 * 2;

        $i4 = $i4 + 1;

        $l5 = $r3[$i4];

        $l2 = $l2 - $l5;

        $l2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateRight(long,long)>($l2, l3);

        $l2 = $l2 ^ l3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i4 = $i0 * 2;

        $l5 = $r3[$i4];

        l3 = l3 - $l5;

        l3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateRight(long,long)>(l3, $l2);

        l3 = l3 ^ $l2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $l5 = $r3[0];

        l3 = l3 - $l5;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>(l3, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        l3 = $r3[1];

        $l2 = $l2 - l3;

        $i0 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>($l2, $r2, $i0);

        return 16;
    }
    private int encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i5;
        long $l2, $l3, $l4;
        long[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $l2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $l3 = $r3[0];

        $l2 = $l2 + $l3;

        $i0 = $i0 + 8;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $l4 = $r3[1];

        $l3 = $l3 + $l4;

        $i0 = 1;

     label1:
        $i5 = r0.<org.spongycastle.crypto.engines.RC564Engine: int _noRounds>;

        if $i0 > $i5 goto label2;

        $l2 = $l2 ^ $l3;

        $l2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l2, $l3);

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i5 = $i0 * 2;

        $l4 = $r3[$i5];

        $l2 = $l2 + $l4;

        $l3 = $l3 ^ $l2;

        $l3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l3, $l2);

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i5 = $i0 * 2;

        $i5 = $i5 + 1;

        $l4 = $r3[$i5];

        $l3 = $l3 + $l4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>($l2, $r2, $i1);

        $i0 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>($l3, $r2, $i0);

        return 16;
    }
    private long rotateLeft(long, long)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l1 & 63L;

        $i3 = (int) $l2;

        $l2 = $l0 << $i3;

        $l1 = 63L & $l1;

        $l1 = 64L - $l1;

        $i3 = (int) $l1;

        $l0 = $l0 >>> $i3;

        $l0 = $l2 | $l0;

        return $l0;
    }
    private long rotateRight(long, long)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l1 & 63L;

        $i3 = (int) $l2;

        $l2 = $l0 >>> $i3;

        $l1 = 63L & $l1;

        $l1 = 64L - $l1;

        $i3 = (int) $l1;

        $l0 = $l0 << $i3;

        $l0 = $l2 | $l0;

        return $l0;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1;
        long[] r2, $r3, $r4;
        int $i0, $i1, $i4, i6, $i9;
        long $l2, $l5, $l7, $l8;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        r2 = newarray (long)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 == $i0 goto label2;

        $i0 = $i1 / 8;

        $l2 = r2[$i0];

        $b3 = $r1[$i1];

        $i4 = $b3 & 255;

        $l5 = (long) $i4;

        $i4 = $i1 % 8;

        $i4 = $i4 * 8;

        $l5 = $l5 << $i4;

        $l2 = $l2 + $l5;

        r2[$i0] = $l2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = r0.<org.spongycastle.crypto.engines.RC564Engine: int _noRounds>;

        $i1 = $i1 + 1;

        $i1 = $i1 * 2;

        $r3 = newarray (long)[$i1];

        r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S> = $r3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $r3[0] = -5196783011329398165L;

        $i1 = 1;

     label3:
        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i0 = lengthof $r3;

        if $i1 >= $i0 goto label4;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i0 = $i1 + -1;

        $l2 = $r4[$i0];

        $l2 = $l2 + -7046029254386353131L;

        $r3[$i1] = $l2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i1 = lengthof r2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i0 = lengthof $r3;

        if $i1 <= $i0 goto label7;

        $i1 = lengthof r2;

        $i1 = $i1 * 3;

     label5:
        $l5 = 0L;

        $l2 = 0L;

        $i4 = 0;

        i6 = 0;

        $i0 = 0;

     label6:
        if $i0 >= $i1 goto label8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $l7 = $r4[$i4];

        $l5 = $l7 + $l5;

        $l5 = $l5 + $l2;

        $l7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l5, 3L);

        $l5 = $l7;

        $r3[$i4] = $l7;

        $l8 = r2[i6];

        $l8 = $l8 + $l7;

        $l8 = $l8 + $l2;

        $l2 = $l7 + $l2;

        $l7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l8, $l2);

        $l2 = $l7;

        r2[i6] = $l7;

        $i4 = $i4 + 1;

        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i9 = lengthof $r3;

        $i4 = $i4 % $i9;

        i6 = i6 + 1;

        $i9 = lengthof r2;

        i6 = i6 % $i9;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        $r3 = r0.<org.spongycastle.crypto.engines.RC564Engine: long[] _S>;

        $i1 = lengthof $r3;

        $i1 = $i1 * 3;

        goto label5;

     label8:
        return;
    }
    private void wordToBytes(long, byte[], int)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1;
        int $i0, $i1, i3, $i4;
        long $l2;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $l2 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= 8 goto label2;

        $i1 = i3 + $i0;

        $i4 = (int) $l2;

        $b5 = (byte) $i4;

        $r1[$i1] = $b5;

        $l2 = $l2 >>> 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        return "RC5-64";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.params.RC5Parameters r6;
        int $i0;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.RC5Parameters;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC564 init - ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r6 = (org.spongycastle.crypto.params.RC5Parameters) $r1;

        r0.<org.spongycastle.crypto.engines.RC564Engine: boolean forEncryption> = $z0;

        $i0 = virtualinvoke r6.<org.spongycastle.crypto.params.RC5Parameters: int getRounds()>();

        r0.<org.spongycastle.crypto.engines.RC564Engine: int _noRounds> = $i0;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.RC5Parameters: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: void setKey(byte[])>($r7);

        return;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC564Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.RC564Engine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC564Engine: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC564Engine;

        return;
    }
