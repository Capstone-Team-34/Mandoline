org.spongycastle.crypto.engines.RFC5649WrapEngine extends java.lang.Object implements org.spongycastle.crypto.Wrapper
private org.spongycastle.crypto.BlockCipher engine
private byte[] extractedAIV
private boolean forWrapping
private byte[] highOrderIV
private org.spongycastle.crypto.params.KeyParameter param
private byte[] preIV
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        org.spongycastle.crypto.BlockCipher $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[4];

        $r2[0] = -90;

        $r2[1] = 89;

        $r2[2] = 89;

        $r2[3] = -90;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] highOrderIV> = $r2;

        $r2 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] highOrderIV>;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV> = $r2;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV> = null;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine> = $r1;

        return;
    }
    private byte[] padPlaintext(byte[])
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        byte[] $r1, r2;
        int i0, i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r1 := @parameter0: byte[];

        i1 = lengthof $r1;

        i0 = i1 % 8;

        i0 = 8 - i0;

        i0 = i0 % 8;

        $i2 = i1 + i0;

        r2 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, i1);

        if i0 == 0 goto label1;

        $r1 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i1, i0);

     label1:
        return r2;
    }
    private byte[] rfc3394UnwrapNoIvCheck(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        byte[] $r1, r2, r3, r4, r5;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8;
        byte b2, $b7;
        org.spongycastle.crypto.BlockCipher $r6;
        org.spongycastle.crypto.params.KeyParameter $r7;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r5 = newarray (byte)[8];

        $i3 = lengthof r5;

        $i3 = $i1 - $i3;

        r3 = newarray (byte)[$i3];

        $i3 = lengthof r5;

        r2 = newarray (byte)[$i3];

        $i3 = lengthof r5;

        $i3 = $i3 + 8;

        r4 = newarray (byte)[$i3];

        $i3 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i3);

        $i3 = lengthof r5;

        $i0 = $i3 + $i0;

        $i3 = lengthof r5;

        $i3 = $i1 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r3, 0, $i3);

        $r6 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $r7 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param>;

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r7);

        $i0 = $i1 / 8;

        $i0 = $i0 + -1;

        $i1 = 5;

     label1:
        if $i1 < 0 goto label6;

        $i3 = $i0;

     label2:
        if $i3 < 1 goto label5;

        $i4 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, $i4);

        $i4 = $i3 + -1;

        $i4 = $i4 * 8;

        $i5 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i4, r4, $i5, 8);

        $i4 = $i0 * $i1;

        $i4 = $i4 + $i3;

        $i5 = 1;

     label3:
        if $i4 == 0 goto label4;

        b2 = (byte) $i4;

        $i6 = lengthof r5;

        $i6 = $i6 - $i5;

        $b7 = r4[$i6];

        $i8 = $b7 ^ b2;

        b2 = (byte) $i8;

        r4[$i6] = b2;

        $i4 = $i4 >>> 8;

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r4, 0, r4, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r2, 0, 8);

        $i4 = $i3 + -1;

        $i4 = $i4 * 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 8, r3, $i4, 8);

        $i3 = $i3 + -1;

        goto label2;

     label5:
        $i1 = $i1 + -1;

        goto label1;

     label6:
        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV> = r2;

        return r3;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        java.lang.String $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r2 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.KeyParameter r3;
        org.spongycastle.crypto.params.ParametersWithIV $r4;
        byte[] $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: boolean forWrapping> = $z0;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

     label1:
        $z0 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label2;

        r3 = (org.spongycastle.crypto.params.KeyParameter) r1;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param> = r3;

        return;

     label2:
        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label3;

        $r4 = (org.spongycastle.crypto.params.ParametersWithIV) r1;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV> = $r5;

        $r4 = (org.spongycastle.crypto.params.ParametersWithIV) r1;

        r1 = virtualinvoke $r4.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.spongycastle.crypto.params.KeyParameter) r1;

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param> = r3;

        $r5 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV>;

        $i0 = lengthof $r5;

        if $i0 == 4 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IV length not equal to 4");

        throw $r6;

     label3:
        return;
    }
    public byte[] unwrap(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        byte[] $r1, r2, r3, $r8;
        int $i0, $i1, i2, $i3;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.InvalidCipherTextException $r5;
        org.spongycastle.crypto.BlockCipher $r6;
        org.spongycastle.crypto.params.KeyParameter $r7;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: boolean forWrapping>;

        if $z0 == 0 goto label01;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not set for unwrapping");

        throw $r4;

     label01:
        i2 = $i1 / 8;

        $i3 = i2 * 8;

        if $i3 == $i1 goto label02;

        $r5 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r5.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("unwrap data must be a multiple of 8 bytes");

        throw $r5;

     label02:
        if i2 != 1 goto label03;

        $r5 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r5.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("unwrap data must be at least 16 bytes");

        throw $r5;

     label03:
        r3 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r3, 0, $i1);

        r2 = newarray (byte)[$i1];

        if i2 != 2 goto label12;

        $r6 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $r7 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param>;

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r7);

        $i0 = 0;

     label04:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label05;

        $r6 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, $i0, r2, $i0);

        $r6 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $i1 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 + $i1;

        goto label04;

     label05:
        $r1 = newarray (byte)[8];

        r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV> = $r1;

        $r1 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        r3 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, 0, $i0);

        $i0 = lengthof r2;

        $r1 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

        $r1 = newarray (byte)[$i0];

        r3 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        $i0 = lengthof r3;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i0, $r1, 0, $i1);

     label06:
        r2 = newarray (byte)[4];

        r3 = newarray (byte)[4];

        $r8 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r2, 0, $i0);

        $r8 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] extractedAIV>;

        $i0 = lengthof r2;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i0, r3, 0, $i1);

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>(r3, 0);

        $z0 = 1;

        r3 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV>;

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>(r2, r3);

        if $z1 != 0 goto label07;

        $z0 = 0;

     label07:
        i2 = lengthof $r1;

        $i1 = i2 + -8;

        if $i0 > $i1 goto label08;

        $z0 = 0;

     label08:
        if $i0 <= i2 goto label09;

        $z0 = 0;

     label09:
        $i1 = i2 - $i0;

        i2 = lengthof $r1;

        if $i1 < i2 goto label10;

        $z0 = 0;

        $i1 = lengthof $r1;

     label10:
        r3 = newarray (byte)[$i1];

        r2 = newarray (byte)[$i1];

        i2 = lengthof $r1;

        i2 = i2 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i2, r2, 0, $i1);

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>(r2, r3);

        if $z1 != 0 goto label11;

        $z0 = 0;

     label11:
        if $z0 != 0 goto label13;

        $r5 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r5.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("checksum failed");

        throw $r5;

     label12:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] rfc3394UnwrapNoIvCheck(byte[],int,int)>($r1, $i0, $i1);

        goto label06;

     label13:
        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        return r2;
    }
    public byte[] wrap(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RFC5649WrapEngine r0;
        byte[] $r1, r2, r4, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.params.ParametersWithIV r3;
        org.spongycastle.crypto.engines.RFC3394WrapEngine r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        org.spongycastle.crypto.BlockCipher $r9;
        org.spongycastle.crypto.params.KeyParameter $r10;

        r0 := @this: org.spongycastle.crypto.engines.RFC5649WrapEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: boolean forWrapping>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not set for wrapping");

        throw $r6;

     label1:
        r2 = newarray (byte)[8];

        r4 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int)>($i1);

        $r7 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV>;

        $r8 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV>;

        $i2 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i2);

        $r7 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] preIV>;

        $i2 = lengthof $r7;

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r2, $i2, $i3);

        r4 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r4, 0, $i1);

        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: byte[] padPlaintext(byte[])>(r4);

        $i0 = lengthof $r1;

        if $i0 != 8 goto label3;

        $i0 = lengthof $r1;

        $i1 = lengthof r2;

        $i0 = $i0 + $i1;

        r4 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, $i0);

        $i0 = lengthof r2;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, $i0, $i1);

        $r9 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $r10 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param>;

        interfaceinvoke $r9.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r10);

        $i0 = 0;

     label2:
        $i1 = lengthof r4;

        if $i0 >= $i1 goto label4;

        $r9 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        interfaceinvoke $r9.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r4, $i0, r4, $i0);

        $r9 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        $i1 = interfaceinvoke $r9.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 + $i1;

        goto label2;

     label3:
        r5 = new org.spongycastle.crypto.engines.RFC3394WrapEngine;

        $r9 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.BlockCipher engine>;

        specialinvoke r5.<org.spongycastle.crypto.engines.RFC3394WrapEngine: void <init>(org.spongycastle.crypto.BlockCipher)>($r9);

        r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = r0.<org.spongycastle.crypto.engines.RFC5649WrapEngine: org.spongycastle.crypto.params.KeyParameter param>;

        specialinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r10, r2);

        interfaceinvoke r5.<org.spongycastle.crypto.Wrapper: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, r3);

        $i0 = lengthof $r1;

        $r1 = interfaceinvoke r5.<org.spongycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>($r1, 0, $i0);

        return $r1;

     label4:
        return r4;
    }
