org.spongycastle.crypto.engines.RC532Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int P32
private static final int Q32
private int[] _S
private int _noRounds
private boolean forEncryption
    public void <init>()
    {
        org.spongycastle.crypto.engines.RC532Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RC532Engine: int _noRounds> = 12;

        r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S> = null;

        return;
    }
    private int bytesToWord(byte[], int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        byte[] $r1;
        int $i0, $i2, $i3;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r1[$i0];

        $i2 = $b1 & 255;

        $i3 = $i0 + 1;

        $b1 = $r1[$i3];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 2;

        $b1 = $r1[$i3];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 3;

        $b1 = $r1[$i0];

        $i0 = $b1 & 255;

        $i0 = $i0 << 24;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $i0 = $i0 + 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int bytesToWord(byte[],int)>($r1, $i0);

        i3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int _noRounds>;

     label1:
        if i3 < 1 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i4 = i3 * 2;

        $i4 = $i4 + 1;

        $i4 = $r3[$i4];

        $i0 = $i0 - $i4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateRight(int,int)>($i0, $i2);

        $i0 = $i0 ^ $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i4 = i3 * 2;

        $i4 = $r3[$i4];

        $i2 = $i2 - $i4;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateRight(int,int)>($i2, $i0);

        $i2 = $i2 ^ $i0;

        i3 = i3 + -1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        i3 = $r3[0];

        $i2 = $i2 - i3;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void wordToBytes(int,byte[],int)>($i2, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i2 = $r3[1];

        $i0 = $i0 - $i2;

        $i1 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void wordToBytes(int,byte[],int)>($i0, $r2, $i1);

        return 8;
    }
    private int encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i3 = $r3[0];

        $i2 = $i2 + $i3;

        $i0 = $i0 + 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i3 = $r3[1];

        $i3 = $i0 + $i3;

        $i0 = 1;

     label1:
        $i4 = r0.<org.spongycastle.crypto.engines.RC532Engine: int _noRounds>;

        if $i0 > $i4 goto label2;

        $i2 = $i2 ^ $i3;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateLeft(int,int)>($i2, $i3);

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i4 = $i0 * 2;

        $i4 = $r3[$i4];

        $i2 = $i2 + $i4;

        $i3 = $i3 ^ $i2;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateLeft(int,int)>($i3, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i4 = $i0 * 2;

        $i4 = $i4 + 1;

        $i4 = $r3[$i4];

        $i3 = $i3 + $i4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void wordToBytes(int,byte[],int)>($i2, $r2, $i1);

        $i0 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void wordToBytes(int,byte[],int)>($i3, $r2, $i0);

        return 8;
    }
    private int rotateLeft(int, int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 & 31;

        $i2 = $i0 << $i2;

        $i1 = $i1 & 31;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int rotateRight(int, int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 & 31;

        $i2 = $i0 >>> $i2;

        $i1 = $i1 & 31;

        $i1 = 32 - $i1;

        $i0 = $i0 << $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        byte[] $r1;
        int[] r2, $r3, $r4;
        int $i0, $i1, $i2, $i4, $i5, i6, $i7, $i8;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 + 3;

        $i0 = $i0 / 4;

        r2 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label2;

        $i1 = $i0 / 4;

        $i2 = r2[$i1];

        $b3 = $r1[$i0];

        $i4 = $b3 & 255;

        $i5 = $i0 % 4;

        $i5 = $i5 * 8;

        $i4 = $i4 << $i5;

        $i2 = $i2 + $i4;

        r2[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = r0.<org.spongycastle.crypto.engines.RC532Engine: int _noRounds>;

        $i0 = $i0 + 1;

        $i0 = $i0 * 2;

        $r3 = newarray (int)[$i0];

        r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S> = $r3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $r3[0] = -1209970333;

        $i0 = 1;

     label3:
        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i1 = $i0 + -1;

        $i1 = $r4[$i1];

        $i1 = $i1 + -1640531527;

        $r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = lengthof r2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i1 = lengthof $r3;

        if $i0 <= $i1 goto label7;

        $i0 = lengthof r2;

        $i0 = $i0 * 3;

     label5:
        $i4 = 0;

        $i2 = 0;

        $i5 = 0;

        i6 = 0;

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i7 = $r4[$i5];

        $i4 = $i7 + $i4;

        $i4 = $i4 + $i2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateLeft(int,int)>($i4, 3);

        $i4 = $i7;

        $r3[$i5] = $i7;

        $i8 = r2[i6];

        $i8 = $i8 + $i7;

        $i8 = $i8 + $i2;

        $i2 = $i7 + $i2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int rotateLeft(int,int)>($i8, $i2);

        $i2 = $i7;

        r2[i6] = $i7;

        $i5 = $i5 + 1;

        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i7 = lengthof $r3;

        $i5 = $i5 % $i7;

        i6 = i6 + 1;

        $i7 = lengthof r2;

        i6 = i6 % $i7;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        $r3 = r0.<org.spongycastle.crypto.engines.RC532Engine: int[] _S>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 3;

        goto label5;

     label8:
        return;
    }
    private void wordToBytes(int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        int $i0, $i1, $i3, $i4;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        $i3 = $i1 + 1;

        $i4 = $i0 >> 8;

        $b2 = (byte) $i4;

        $r1[$i3] = $b2;

        $i3 = $i1 + 2;

        $i4 = $i0 >> 16;

        $b2 = (byte) $i4;

        $r1[$i3] = $b2;

        $i1 = $i1 + 3;

        $i0 = $i0 >> 24;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RC532Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        return "RC5-32";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.RC532Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        return 8;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.RC5Parameters r2;
        int $i0;
        byte[] $r3;
        org.spongycastle.crypto.params.KeyParameter r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.RC5Parameters;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.RC5Parameters) $r1;

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.params.RC5Parameters: int getRounds()>();

        r0.<org.spongycastle.crypto.engines.RC532Engine: int _noRounds> = $i0;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.RC5Parameters: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void setKey(byte[])>($r3);

     label1:
        r0.<org.spongycastle.crypto.engines.RC532Engine: boolean forEncryption> = $z0;

        return;

     label2:
        $z1 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label3;

        r4 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r3 = virtualinvoke r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: void setKey(byte[])>($r3);

        goto label1;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC532 init - ");

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC532Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.RC532Engine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC532Engine: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.RC532Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC532Engine;

        return;
    }
