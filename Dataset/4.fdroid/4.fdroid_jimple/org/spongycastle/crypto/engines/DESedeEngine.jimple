org.spongycastle.crypto.engines.DESedeEngine extends org.spongycastle.crypto.engines.DESEngine
protected static final int BLOCK_SIZE
private boolean forEncryption
private int[] workingKey1
private int[] workingKey2
private int[] workingKey3
    public void <init>()
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        specialinvoke r0.<org.spongycastle.crypto.engines.DESEngine: void <init>()>();

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1> = null;

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey2> = null;

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey3> = null;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        return "DESede";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        return 8;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;
        boolean $z0, $z1;
        byte[] r1, $r8;
        org.spongycastle.crypto.CipherParameters $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.spongycastle.crypto.params.KeyParameter $r7;
        int $i0;
        int[] $r9;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        $z0 := @parameter0: boolean;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r2 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to DESede init - ");

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r7 = (org.spongycastle.crypto.params.KeyParameter) $r2;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r8;

        if $i0 == 24 goto label2;

        $i0 = lengthof $r8;

        if $i0 == 16 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key size must be 16 or 24 bytes.");

        throw $r3;

     label2:
        r0.<org.spongycastle.crypto.engines.DESedeEngine: boolean forEncryption> = $z0;

        r1 = newarray (byte)[8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r1, 0, $i0);

        $r9 = virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>($z0, r1);

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1> = $r9;

        r1 = newarray (byte)[8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 8, r1, 0, $i0);

        if $z0 != 0 goto label4;

        $z1 = 1;

     label3:
        $r9 = virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>($z1, r1);

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey2> = $r9;

        $i0 = lengthof $r8;

        if $i0 != 24 goto label5;

        r1 = newarray (byte)[8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 16, r1, 0, $i0);

        $r9 = virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] generateWorkingKey(boolean,byte[])>($z0, r1);

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r9;

        return;

     label4:
        $z1 = 0;

        goto label3;

     label5:
        $r9 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r9;

        return;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;
        byte[] $r1, $r2, r3;
        int $i0, $i1, $i2, $i3;
        int[] $r4;
        java.lang.IllegalStateException $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        if $r4 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DESede engine not initialised");

        throw $r5;

     label1:
        $i2 = $i0 + 8;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i2 = $i1 + 8;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        r3 = newarray (byte)[8];

        $z0 = r0.<org.spongycastle.crypto.engines.DESedeEngine: boolean forEncryption>;

        if $z0 == 0 goto label4;

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, $r1, $i0, r3, 0);

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, r3, 0, r3, 0);

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, r3, 0, $r2, $i1);

        return 8;

     label4:
        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, $r1, $i0, r3, 0);

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, r3, 0, r3, 0);

        $r4 = r0.<org.spongycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.DESedeEngine: void desFunc(int[],byte[],int,byte[],int)>($r4, r3, 0, $r2, $i1);

        return 8;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.DESedeEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.DESedeEngine;

        return;
    }
