org.spongycastle.crypto.engines.RC4Engine extends java.lang.Object implements org.spongycastle.crypto.StreamCipher
private static final int STATE_LENGTH
private byte[] engineState
private byte[] workingKey
private int x
private int y
    public void <init>()
    {
        org.spongycastle.crypto.engines.RC4Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState> = null;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int x> = 0;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int y> = 0;

        r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] workingKey> = null;

        return;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.RC4Engine r0;
        byte[] $r1, $r2, $r3;
        byte b0, $b5;
        int i1, i2, i3, $i4;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] workingKey> = $r1;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int x> = 0;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int y> = 0;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        if $r2 != null goto label1;

        $r2 = newarray (byte)[256];

        r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState> = $r2;

     label1:
        i1 = 0;

     label2:
        if i1 >= 256 goto label3;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        b0 = (byte) i1;

        $r2[i1] = b0;

        i1 = i1 + 1;

        goto label2;

     label3:
        i2 = 0;

        i3 = 0;

        i1 = 0;

     label4:
        if i1 >= 256 goto label5;

        b0 = $r1[i2];

        $i4 = b0 & 255;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        b0 = $r2[i1];

        $i4 = $i4 + b0;

        i3 = $i4 + i3;

        i3 = i3 & 255;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        b0 = $r2[i1];

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r3 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $b5 = $r3[i3];

        $r2[i1] = $b5;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r2[i3] = b0;

        i2 = i2 + 1;

        $i4 = lengthof $r1;

        i2 = i2 % $i4;

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RC4Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        return "RC4";
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RC4Engine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.KeyParameter r2;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z0 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] workingKey> = $r3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC4Engine: void setKey(byte[])>($r3);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC4 init - ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }
    public int processBytes(byte[], int, int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC4Engine r0;
        byte[] $r1, $r2, $r5, $r6;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        byte b3, $b7, $b8;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.OutputLengthException $r4;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i5 = $i0 + $i1;

        $i6 = lengthof $r1;

        if $i5 <= $i6 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label1:
        $i5 = $i2 + $i1;

        $i6 = lengthof $r2;

        if $i5 <= $i6 goto label2;

        $r4 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= $i1 goto label4;

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        $i6 = $i6 + 1;

        $i6 = $i6 & 255;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int x> = $i6;

        $r5 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        b3 = $r5[$i6];

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $i6 = b3 + $i6;

        $i6 = $i6 & 255;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int y> = $i6;

        $r5 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        b3 = $r5[$i6];

        $r5 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        $r6 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i4 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $b7 = $r6[$i4];

        $r5[$i6] = $b7;

        $r5 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i6 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $r5[$i6] = b3;

        $i6 = $i5 + $i2;

        $i4 = $i5 + $i0;

        b3 = $r1[$i4];

        $r5 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r6 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i4 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        $b7 = $r6[$i4];

        $r6 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i4 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $b8 = $r6[$i4];

        $i4 = $b7 + $b8;

        $i4 = $i4 & 255;

        $b7 = $r5[$i4];

        $i4 = b3 ^ $b7;

        b3 = (byte) $i4;

        $r2[$i6] = b3;

        $i5 = $i5 + 1;

        goto label3;

     label4:
        return $i1;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.RC4Engine r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC4Engine: void setKey(byte[])>($r1);

        return;
    }
    public byte returnByte(byte)
    {
        org.spongycastle.crypto.engines.RC4Engine r0;
        byte $b0, b1, $b4;
        int $i2, $i3;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.RC4Engine;

        $b0 := @parameter0: byte;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        $i2 = $i2 + 1;

        $i2 = $i2 & 255;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int x> = $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        b1 = $r1[$i2];

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $i2 = b1 + $i2;

        $i2 = $i2 & 255;

        r0.<org.spongycastle.crypto.engines.RC4Engine: int y> = $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        b1 = $r1[$i2];

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i3 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $b4 = $r2[$i3];

        $r1[$i2] = $b4;

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $r1[$i2] = b1;

        $r1 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int x>;

        b1 = $r2[$i2];

        $r2 = r0.<org.spongycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i2 = r0.<org.spongycastle.crypto.engines.RC4Engine: int y>;

        $b4 = $r2[$i2];

        $i2 = b1 + $b4;

        $i2 = $i2 & 255;

        b1 = $r1[$i2];

        $i2 = b1 ^ $b0;

        $b0 = (byte) $i2;

        return $b0;
    }
