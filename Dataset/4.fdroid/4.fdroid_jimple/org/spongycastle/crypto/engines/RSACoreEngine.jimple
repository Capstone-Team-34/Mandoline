org.spongycastle.crypto.engines.RSACoreEngine extends java.lang.Object
private boolean forEncryption
private org.spongycastle.crypto.params.RSAKeyParameters key
    void <init>()
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.math.BigInteger convertInput(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        byte[] $r1, r4;
        int $i0, $i1, $i2;
        java.math.BigInteger r2, $r6;
        org.spongycastle.crypto.DataLengthException $r3;
        boolean $z0;
        org.spongycastle.crypto.params.RSAKeyParameters $r5;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        if $i1 <= $i2 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r3;

     label1:
        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        if $i1 != $i2 goto label2;

        $z0 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 != 0 goto label2;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r3;

     label2:
        if $i0 != 0 goto label3;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label5;

     label3:
        r4 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r4, 0, $i1);

     label4:
        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r4);

        $r5 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 < 0 goto label6;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r3;

     label5:
        r4 = $r1;

        goto label4;

     label6:
        return r2;
    }
    public byte[] convertOutput(java.math.BigInteger)
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        java.math.BigInteger $r1;
        byte[] $r2, r3;
        boolean $z0;
        byte $b0;
        int $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $z0 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $b0 = $r2[0];

        if $b0 != 0 goto label1;

        $i1 = lengthof $r2;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i1 <= $i2 goto label1;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        r3 = newarray (byte)[$i1];

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, r3, 0, $i1);

        return r3;

     label1:
        $i1 = lengthof $r2;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i1 >= $i2 goto label3;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        r3 = newarray (byte)[$i1];

        $i1 = lengthof r3;

        $i2 = lengthof $r2;

        $i1 = $i1 - $i2;

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, $i1, $i2);

        return r3;

     label2:
        $b0 = $r2[0];

        if $b0 != 0 goto label3;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        r3 = newarray (byte)[$i1];

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, r3, 0, $i1);

        return r3;

     label3:
        return $r2;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 + -1;

        return $i0;

     label1:
        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;

     label1:
        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 + -1;

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key> = $r3;

     label1:
        r0.<org.spongycastle.crypto.engines.RSACoreEngine: boolean forEncryption> = $z0;

        return;

     label2:
        $r3 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key> = $r3;

        goto label1;
    }
    public java.math.BigInteger processBlock(java.math.BigInteger)
    {
        org.spongycastle.crypto.engines.RSACoreEngine r0;
        java.math.BigInteger $r1, $r4, $r5, $r6, $r7, $r8, $r9;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        boolean $z0;
        org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters r3;

        r0 := @this: org.spongycastle.crypto.engines.RSACoreEngine;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r2 instanceof org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        r3 = (org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters) $r2;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getP()>();

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQ()>();

        $r6 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDP()>();

        $r7 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDQ()>();

        $r8 = virtualinvoke r3.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQInv()>();

        $r9 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r4);

        $r6 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r6, $r4);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r5);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r5);

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r4 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r1 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        return $r1;

     label1:
        $r2 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r2 = r0.<org.spongycastle.crypto.engines.RSACoreEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r5, $r4);

        return $r1;
    }
