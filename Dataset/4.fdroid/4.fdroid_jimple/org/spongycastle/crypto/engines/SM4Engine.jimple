org.spongycastle.crypto.engines.SM4Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static final int[] CK
private static final int[] FK
private static final byte[] Sbox
private final int[] X
private int[] rk
    static void <clinit>()
    {
        byte[] $r0;
        int[] $r1;

        $r0 = newarray (byte)[256];

        $r0[0] = -42;

        $r0[1] = -112;

        $r0[2] = -23;

        $r0[3] = -2;

        $r0[4] = -52;

        $r0[5] = -31;

        $r0[6] = 61;

        $r0[7] = -73;

        $r0[8] = 22;

        $r0[9] = -74;

        $r0[10] = 20;

        $r0[11] = -62;

        $r0[12] = 40;

        $r0[13] = -5;

        $r0[14] = 44;

        $r0[15] = 5;

        $r0[16] = 43;

        $r0[17] = 103;

        $r0[18] = -102;

        $r0[19] = 118;

        $r0[20] = 42;

        $r0[21] = -66;

        $r0[22] = 4;

        $r0[23] = -61;

        $r0[24] = -86;

        $r0[25] = 68;

        $r0[26] = 19;

        $r0[27] = 38;

        $r0[28] = 73;

        $r0[29] = -122;

        $r0[30] = 6;

        $r0[31] = -103;

        $r0[32] = -100;

        $r0[33] = 66;

        $r0[34] = 80;

        $r0[35] = -12;

        $r0[36] = -111;

        $r0[37] = -17;

        $r0[38] = -104;

        $r0[39] = 122;

        $r0[40] = 51;

        $r0[41] = 84;

        $r0[42] = 11;

        $r0[43] = 67;

        $r0[44] = -19;

        $r0[45] = -49;

        $r0[46] = -84;

        $r0[47] = 98;

        $r0[48] = -28;

        $r0[49] = -77;

        $r0[50] = 28;

        $r0[51] = -87;

        $r0[52] = -55;

        $r0[53] = 8;

        $r0[54] = -24;

        $r0[55] = -107;

        $r0[56] = -128;

        $r0[57] = -33;

        $r0[58] = -108;

        $r0[59] = -6;

        $r0[60] = 117;

        $r0[61] = -113;

        $r0[62] = 63;

        $r0[63] = -90;

        $r0[64] = 71;

        $r0[65] = 7;

        $r0[66] = -89;

        $r0[67] = -4;

        $r0[68] = -13;

        $r0[69] = 115;

        $r0[70] = 23;

        $r0[71] = -70;

        $r0[72] = -125;

        $r0[73] = 89;

        $r0[74] = 60;

        $r0[75] = 25;

        $r0[76] = -26;

        $r0[77] = -123;

        $r0[78] = 79;

        $r0[79] = -88;

        $r0[80] = 104;

        $r0[81] = 107;

        $r0[82] = -127;

        $r0[83] = -78;

        $r0[84] = 113;

        $r0[85] = 100;

        $r0[86] = -38;

        $r0[87] = -117;

        $r0[88] = -8;

        $r0[89] = -21;

        $r0[90] = 15;

        $r0[91] = 75;

        $r0[92] = 112;

        $r0[93] = 86;

        $r0[94] = -99;

        $r0[95] = 53;

        $r0[96] = 30;

        $r0[97] = 36;

        $r0[98] = 14;

        $r0[99] = 94;

        $r0[100] = 99;

        $r0[101] = 88;

        $r0[102] = -47;

        $r0[103] = -94;

        $r0[104] = 37;

        $r0[105] = 34;

        $r0[106] = 124;

        $r0[107] = 59;

        $r0[108] = 1;

        $r0[109] = 33;

        $r0[110] = 120;

        $r0[111] = -121;

        $r0[112] = -44;

        $r0[113] = 0;

        $r0[114] = 70;

        $r0[115] = 87;

        $r0[116] = -97;

        $r0[117] = -45;

        $r0[118] = 39;

        $r0[119] = 82;

        $r0[120] = 76;

        $r0[121] = 54;

        $r0[122] = 2;

        $r0[123] = -25;

        $r0[124] = -96;

        $r0[125] = -60;

        $r0[126] = -56;

        $r0[127] = -98;

        $r0[128] = -22;

        $r0[129] = -65;

        $r0[130] = -118;

        $r0[131] = -46;

        $r0[132] = 64;

        $r0[133] = -57;

        $r0[134] = 56;

        $r0[135] = -75;

        $r0[136] = -93;

        $r0[137] = -9;

        $r0[138] = -14;

        $r0[139] = -50;

        $r0[140] = -7;

        $r0[141] = 97;

        $r0[142] = 21;

        $r0[143] = -95;

        $r0[144] = -32;

        $r0[145] = -82;

        $r0[146] = 93;

        $r0[147] = -92;

        $r0[148] = -101;

        $r0[149] = 52;

        $r0[150] = 26;

        $r0[151] = 85;

        $r0[152] = -83;

        $r0[153] = -109;

        $r0[154] = 50;

        $r0[155] = 48;

        $r0[156] = -11;

        $r0[157] = -116;

        $r0[158] = -79;

        $r0[159] = -29;

        $r0[160] = 29;

        $r0[161] = -10;

        $r0[162] = -30;

        $r0[163] = 46;

        $r0[164] = -126;

        $r0[165] = 102;

        $r0[166] = -54;

        $r0[167] = 96;

        $r0[168] = -64;

        $r0[169] = 41;

        $r0[170] = 35;

        $r0[171] = -85;

        $r0[172] = 13;

        $r0[173] = 83;

        $r0[174] = 78;

        $r0[175] = 111;

        $r0[176] = -43;

        $r0[177] = -37;

        $r0[178] = 55;

        $r0[179] = 69;

        $r0[180] = -34;

        $r0[181] = -3;

        $r0[182] = -114;

        $r0[183] = 47;

        $r0[184] = 3;

        $r0[185] = -1;

        $r0[186] = 106;

        $r0[187] = 114;

        $r0[188] = 109;

        $r0[189] = 108;

        $r0[190] = 91;

        $r0[191] = 81;

        $r0[192] = -115;

        $r0[193] = 27;

        $r0[194] = -81;

        $r0[195] = -110;

        $r0[196] = -69;

        $r0[197] = -35;

        $r0[198] = -68;

        $r0[199] = 127;

        $r0[200] = 17;

        $r0[201] = -39;

        $r0[202] = 92;

        $r0[203] = 65;

        $r0[204] = 31;

        $r0[205] = 16;

        $r0[206] = 90;

        $r0[207] = -40;

        $r0[208] = 10;

        $r0[209] = -63;

        $r0[210] = 49;

        $r0[211] = -120;

        $r0[212] = -91;

        $r0[213] = -51;

        $r0[214] = 123;

        $r0[215] = -67;

        $r0[216] = 45;

        $r0[217] = 116;

        $r0[218] = -48;

        $r0[219] = 18;

        $r0[220] = -72;

        $r0[221] = -27;

        $r0[222] = -76;

        $r0[223] = -80;

        $r0[224] = -119;

        $r0[225] = 105;

        $r0[226] = -105;

        $r0[227] = 74;

        $r0[228] = 12;

        $r0[229] = -106;

        $r0[230] = 119;

        $r0[231] = 126;

        $r0[232] = 101;

        $r0[233] = -71;

        $r0[234] = -15;

        $r0[235] = 9;

        $r0[236] = -59;

        $r0[237] = 110;

        $r0[238] = -58;

        $r0[239] = -124;

        $r0[240] = 24;

        $r0[241] = -16;

        $r0[242] = 125;

        $r0[243] = -20;

        $r0[244] = 58;

        $r0[245] = -36;

        $r0[246] = 77;

        $r0[247] = 32;

        $r0[248] = 121;

        $r0[249] = -18;

        $r0[250] = 95;

        $r0[251] = 62;

        $r0[252] = -41;

        $r0[253] = -53;

        $r0[254] = 57;

        $r0[255] = 72;

        <org.spongycastle.crypto.engines.SM4Engine: byte[] Sbox> = $r0;

        $r1 = newarray (int)[32];

        $r1[0] = 462357;

        $r1[1] = 472066609;

        $r1[2] = 943670861;

        $r1[3] = 1415275113;

        $r1[4] = 1886879365;

        $r1[5] = -1936483679;

        $r1[6] = -1464879427;

        $r1[7] = -993275175;

        $r1[8] = -521670923;

        $r1[9] = -66909679;

        $r1[10] = 404694573;

        $r1[11] = 876298825;

        $r1[12] = 1347903077;

        $r1[13] = 1819507329;

        $r1[14] = -2003855715;

        $r1[15] = -1532251463;

        $r1[16] = -1060647211;

        $r1[17] = -589042959;

        $r1[18] = -117504499;

        $r1[19] = 337322537;

        $r1[20] = 808926789;

        $r1[21] = 1280531041;

        $r1[22] = 1752135293;

        $r1[23] = -2071227751;

        $r1[24] = -1599623499;

        $r1[25] = -1128019247;

        $r1[26] = -656414995;

        $r1[27] = -184876535;

        $r1[28] = 269950501;

        $r1[29] = 741554753;

        $r1[30] = 1213159005;

        $r1[31] = 1684763257;

        <org.spongycastle.crypto.engines.SM4Engine: int[] CK> = $r1;

        $r1 = newarray (int)[4];

        $r1[0] = -1548633402;

        $r1[1] = 1453994832;

        $r1[2] = 1736282519;

        $r1[3] = -1301273892;

        <org.spongycastle.crypto.engines.SM4Engine: int[] FK> = $r1;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X> = $r1;

        return;
    }
    private int F0(int[], int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r1[0];

        $i2 = $r1[1];

        $i3 = $r1[2];

        $i2 = $i2 ^ $i3;

        $i3 = $r1[3];

        $i2 = $i2 ^ $i3;

        $i0 = $i2 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int F1(int[], int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r1[1];

        $i2 = $r1[2];

        $i3 = $r1[3];

        $i2 = $i2 ^ $i3;

        $i3 = $r1[0];

        $i2 = $i2 ^ $i3;

        $i0 = $i2 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int F2(int[], int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r1[2];

        $i2 = $r1[3];

        $i3 = $r1[0];

        $i2 = $i2 ^ $i3;

        $i3 = $r1[1];

        $i2 = $i2 ^ $i3;

        $i0 = $i2 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int F3(int[], int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r1[3];

        $i2 = $r1[0];

        $i3 = $r1[1];

        $i2 = $i2 ^ $i3;

        $i3 = $r1[2];

        $i2 = $i2 ^ $i3;

        $i0 = $i2 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int L(int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 2);

        $i1 = $i1 ^ $i0;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 10);

        $i1 = $i1 ^ $i2;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 18);

        $i1 = $i1 ^ $i2;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 24);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int L_ap(int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 13);

        $i1 = $i1 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int rotateLeft(int,int)>($i0, 23);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private void R(int[], int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int[] $r1;
        int $i0, i1, i2, i3, $i4, $i5;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        i1 = $i0 + 1;

        i2 = $i0 + 2;

        i3 = $i0 + 3;

        $i4 = $r1[$i0];

        $i5 = $r1[i3];

        $i4 = $i4 ^ $i5;

        $r1[$i0] = $i4;

        $i4 = $r1[$i0];

        $i5 = $r1[i3];

        $i4 = $i4 ^ $i5;

        $r1[i3] = $i4;

        $i4 = $r1[$i0];

        i3 = $r1[i3];

        i3 = $i4 ^ i3;

        $r1[$i0] = i3;

        $i0 = $r1[i1];

        i3 = $r1[i2];

        $i0 = $i0 ^ i3;

        $r1[i1] = $i0;

        $i0 = $r1[i1];

        i3 = $r1[i2];

        $i0 = $i0 ^ i3;

        $r1[i2] = $i0;

        $i0 = $r1[i1];

        i2 = $r1[i2];

        $i0 = $i0 ^ i2;

        $r1[i1] = $i0;

        return;
    }
    private int T(int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int tau(int)>($i0);

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int L(int)>($i0);

        return $i0;
    }
    private int T_ap(int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int tau(int)>($i0);

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int L_ap(int)>($i0);

        return $i0;
    }
    private int[] expandKey(boolean, byte[])
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        boolean $z0;
        byte[] $r1;
        int[] r2, r3, r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        r4 = newarray (int)[32];

        r3 = newarray (int)[4];

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, 0);

        r3[0] = $i0;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, 4);

        r3[1] = $i0;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, 8);

        r3[2] = $i0;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, 12);

        r3[3] = $i0;

        r2 = newarray (int)[4];

        $i0 = r3[0];

        $r5 = <org.spongycastle.crypto.engines.SM4Engine: int[] FK>;

        $i1 = $r5[0];

        $i0 = $i0 ^ $i1;

        r2[0] = $i0;

        $i0 = r3[1];

        $r5 = <org.spongycastle.crypto.engines.SM4Engine: int[] FK>;

        $i1 = $r5[1];

        $i0 = $i0 ^ $i1;

        r2[1] = $i0;

        $i0 = r3[2];

        $r5 = <org.spongycastle.crypto.engines.SM4Engine: int[] FK>;

        $i1 = $r5[2];

        $i0 = $i0 ^ $i1;

        r2[2] = $i0;

        $i0 = r3[3];

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] FK>;

        $i1 = r3[3];

        $i0 = $i0 ^ $i1;

        r2[3] = $i0;

        if $z0 == 0 goto label2;

        $i0 = r2[0];

        $i1 = r2[1];

        $i2 = r2[2];

        $i1 = $i1 ^ $i2;

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[0];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[0] = $i0;

        $i0 = r2[1];

        $i1 = r2[2];

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        $i2 = r4[0];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[1];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[1] = $i0;

        $i0 = r2[2];

        $i1 = r2[3];

        $i2 = r4[0];

        $i1 = $i1 ^ $i2;

        $i2 = r4[1];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[2];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[2] = $i0;

        $i0 = r2[3];

        $i1 = r4[0];

        $i2 = r4[1];

        $i1 = $i1 ^ $i2;

        $i2 = r4[2];

        $i1 = $i1 ^ $i2;

        r2 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[3] = $i0;

        $i0 = 4;

     label1:
        if $i0 >= 32 goto label4;

        $i1 = $i0 + -4;

        $i1 = r4[$i1];

        $i2 = $i0 + -3;

        $i2 = r4[$i2];

        $i3 = $i0 + -2;

        $i3 = r4[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = $i0 + -1;

        $i3 = r4[$i3];

        $i2 = $i2 ^ $i3;

        r2 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i3 = r2[$i0];

        $i2 = $i2 ^ $i3;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i2);

        $i1 = $i1 ^ $i2;

        r4[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = r2[0];

        $i1 = r2[1];

        $i2 = r2[2];

        $i1 = $i1 ^ $i2;

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[0];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[31] = $i0;

        $i0 = r2[1];

        $i1 = r2[2];

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        $i2 = r4[31];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[1];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[30] = $i0;

        $i0 = r2[2];

        $i1 = r2[3];

        $i2 = r4[31];

        $i1 = $i1 ^ $i2;

        $i2 = r4[30];

        $i1 = $i1 ^ $i2;

        r3 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r3[2];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[29] = $i0;

        $i0 = r2[3];

        $i1 = r4[31];

        $i2 = r4[30];

        $i1 = $i1 ^ $i2;

        $i2 = r4[29];

        $i1 = $i1 ^ $i2;

        r2 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i2 = r2[3];

        $i1 = $i1 ^ $i2;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i1);

        $i0 = $i0 ^ $i1;

        r4[28] = $i0;

        $i0 = 27;

     label3:
        if $i0 < 0 goto label4;

        $i1 = $i0 + 4;

        $i1 = r4[$i1];

        $i2 = $i0 + 3;

        $i2 = r4[$i2];

        $i3 = $i0 + 2;

        $i3 = r4[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = $i0 + 1;

        $i3 = r4[$i3];

        $i2 = $i2 ^ $i3;

        r2 = <org.spongycastle.crypto.engines.SM4Engine: int[] CK>;

        $i3 = 31 - $i0;

        $i3 = r2[$i3];

        $i2 = $i2 ^ $i3;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int T_ap(int)>($i2);

        $i1 = $i1 ^ $i2;

        r4[$i0] = $i1;

        $i0 = $i0 + -1;

        goto label3;

     label4:
        return r4;
    }
    private int rotateLeft(int, int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = neg $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int tau(int)
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        int $i0, i1, i2, i3;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $i0 := @parameter0: int;

        $r1 = <org.spongycastle.crypto.engines.SM4Engine: byte[] Sbox>;

        i1 = $i0 >> 24;

        i1 = i1 & 255;

        $b4 = $r1[i1];

        i1 = $b4 & 255;

        $r1 = <org.spongycastle.crypto.engines.SM4Engine: byte[] Sbox>;

        i2 = $i0 >> 16;

        i2 = i2 & 255;

        $b4 = $r1[i2];

        i2 = $b4 & 255;

        $r1 = <org.spongycastle.crypto.engines.SM4Engine: byte[] Sbox>;

        i3 = $i0 >> 8;

        i3 = i3 & 255;

        $b4 = $r1[i3];

        i3 = $b4 & 255;

        $r1 = <org.spongycastle.crypto.engines.SM4Engine: byte[] Sbox>;

        $i0 = $i0 & 255;

        $b4 = $r1[$i0];

        $i0 = $b4 & 255;

        i1 = i1 << 24;

        i2 = i2 << 16;

        i1 = i1 | i2;

        i2 = i3 << 8;

        i1 = i1 | i2;

        $i0 = i1 | $i0;

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.SM4Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        return "SM4";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.SM4Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.KeyParameter r2;
        byte[] $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        int[] $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r3;

        if $i0 == 16 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SM4 requires a 128 bit key");

        throw $r4;

     label1:
        $r5 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int[] expandKey(boolean,byte[])>($z0, $r3);

        r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk> = $r5;

        return;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to SM4 init - ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.SM4Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3, $r7, $r8;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        org.spongycastle.crypto.OutputLengthException $r6;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SM4 not initialised");

        throw $r4;

     label1:
        $i2 = $i0 + 16;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + 16;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r6 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i2 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, $i0);

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i2 = $i0 + 4;

        $i2 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, $i2);

        $r3[1] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i2 = $i0 + 8;

        $i2 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, $i2);

        $r3[2] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i0 = $i0 + 12;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int bigEndianToInt(byte[],int)>($r1, $i0);

        $r3[3] = $i0;

        $i0 = 0;

     label4:
        if $i0 >= 32 goto label5;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r7 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r8 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk>;

        $i2 = $r8[$i0];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int F0(int[],int)>($r7, $i2);

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r7 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r8 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk>;

        $i2 = $i0 + 1;

        $i2 = $r8[$i2];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int F1(int[],int)>($r7, $i2);

        $r3[1] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r7 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r8 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk>;

        $i2 = $i0 + 2;

        $i2 = $r8[$i2];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int F2(int[],int)>($r7, $i2);

        $r3[2] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r7 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $r8 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] rk>;

        $i2 = $i0 + 3;

        $i2 = $r8[$i2];

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: int F3(int[],int)>($r7, $i2);

        $r3[3] = $i2;

        $i0 = $i0 + 4;

        goto label4;

     label5:
        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        specialinvoke r0.<org.spongycastle.crypto.engines.SM4Engine: void R(int[],int)>($r3, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i0 = $r3[0];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i0 = $r3[1];

        $i2 = $i1 + 4;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i0 = $r3[2];

        $i2 = $i1 + 8;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.SM4Engine: int[] X>;

        $i0 = $r3[3];

        $i1 = $i1 + 12;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.SM4Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.SM4Engine;

        return;
    }
