org.spongycastle.crypto.engines.TwofishEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static final int GF256_FDBK
private static final int GF256_FDBK_2
private static final int GF256_FDBK_4
private static final int INPUT_WHITEN
private static final int MAX_KEY_BITS
private static final int MAX_ROUNDS
private static final int OUTPUT_WHITEN
private static final byte[][] P
private static final int P_00
private static final int P_01
private static final int P_02
private static final int P_03
private static final int P_04
private static final int P_10
private static final int P_11
private static final int P_12
private static final int P_13
private static final int P_14
private static final int P_20
private static final int P_21
private static final int P_22
private static final int P_23
private static final int P_24
private static final int P_30
private static final int P_31
private static final int P_32
private static final int P_33
private static final int P_34
private static final int ROUNDS
private static final int ROUND_SUBKEYS
private static final int RS_GF_FDBK
private static final int SK_BUMP
private static final int SK_ROTL
private static final int SK_STEP
private static final int TOTAL_SUBKEYS
private boolean encrypting
private int[] gMDS0
private int[] gMDS1
private int[] gMDS2
private int[] gMDS3
private int[] gSBox
private int[] gSubKeys
private int k64Cnt
private byte[] workingKey
    static void <clinit>()
    {
        byte[][] $r0;
        byte[] $r1;

        $r0 = newarray (byte[])[2];

        $r1 = newarray (byte)[256];

        $r1[0] = -87;

        $r1[1] = 103;

        $r1[2] = -77;

        $r1[3] = -24;

        $r1[4] = 4;

        $r1[5] = -3;

        $r1[6] = -93;

        $r1[7] = 118;

        $r1[8] = -102;

        $r1[9] = -110;

        $r1[10] = -128;

        $r1[11] = 120;

        $r1[12] = -28;

        $r1[13] = -35;

        $r1[14] = -47;

        $r1[15] = 56;

        $r1[16] = 13;

        $r1[17] = -58;

        $r1[18] = 53;

        $r1[19] = -104;

        $r1[20] = 24;

        $r1[21] = -9;

        $r1[22] = -20;

        $r1[23] = 108;

        $r1[24] = 67;

        $r1[25] = 117;

        $r1[26] = 55;

        $r1[27] = 38;

        $r1[28] = -6;

        $r1[29] = 19;

        $r1[30] = -108;

        $r1[31] = 72;

        $r1[32] = -14;

        $r1[33] = -48;

        $r1[34] = -117;

        $r1[35] = 48;

        $r1[36] = -124;

        $r1[37] = 84;

        $r1[38] = -33;

        $r1[39] = 35;

        $r1[40] = 25;

        $r1[41] = 91;

        $r1[42] = 61;

        $r1[43] = 89;

        $r1[44] = -13;

        $r1[45] = -82;

        $r1[46] = -94;

        $r1[47] = -126;

        $r1[48] = 99;

        $r1[49] = 1;

        $r1[50] = -125;

        $r1[51] = 46;

        $r1[52] = -39;

        $r1[53] = 81;

        $r1[54] = -101;

        $r1[55] = 124;

        $r1[56] = -90;

        $r1[57] = -21;

        $r1[58] = -91;

        $r1[59] = -66;

        $r1[60] = 22;

        $r1[61] = 12;

        $r1[62] = -29;

        $r1[63] = 97;

        $r1[64] = -64;

        $r1[65] = -116;

        $r1[66] = 58;

        $r1[67] = -11;

        $r1[68] = 115;

        $r1[69] = 44;

        $r1[70] = 37;

        $r1[71] = 11;

        $r1[72] = -69;

        $r1[73] = 78;

        $r1[74] = -119;

        $r1[75] = 107;

        $r1[76] = 83;

        $r1[77] = 106;

        $r1[78] = -76;

        $r1[79] = -15;

        $r1[80] = -31;

        $r1[81] = -26;

        $r1[82] = -67;

        $r1[83] = 69;

        $r1[84] = -30;

        $r1[85] = -12;

        $r1[86] = -74;

        $r1[87] = 102;

        $r1[88] = -52;

        $r1[89] = -107;

        $r1[90] = 3;

        $r1[91] = 86;

        $r1[92] = -44;

        $r1[93] = 28;

        $r1[94] = 30;

        $r1[95] = -41;

        $r1[96] = -5;

        $r1[97] = -61;

        $r1[98] = -114;

        $r1[99] = -75;

        $r1[100] = -23;

        $r1[101] = -49;

        $r1[102] = -65;

        $r1[103] = -70;

        $r1[104] = -22;

        $r1[105] = 119;

        $r1[106] = 57;

        $r1[107] = -81;

        $r1[108] = 51;

        $r1[109] = -55;

        $r1[110] = 98;

        $r1[111] = 113;

        $r1[112] = -127;

        $r1[113] = 121;

        $r1[114] = 9;

        $r1[115] = -83;

        $r1[116] = 36;

        $r1[117] = -51;

        $r1[118] = -7;

        $r1[119] = -40;

        $r1[120] = -27;

        $r1[121] = -59;

        $r1[122] = -71;

        $r1[123] = 77;

        $r1[124] = 68;

        $r1[125] = 8;

        $r1[126] = -122;

        $r1[127] = -25;

        $r1[128] = -95;

        $r1[129] = 29;

        $r1[130] = -86;

        $r1[131] = -19;

        $r1[132] = 6;

        $r1[133] = 112;

        $r1[134] = -78;

        $r1[135] = -46;

        $r1[136] = 65;

        $r1[137] = 123;

        $r1[138] = -96;

        $r1[139] = 17;

        $r1[140] = 49;

        $r1[141] = -62;

        $r1[142] = 39;

        $r1[143] = -112;

        $r1[144] = 32;

        $r1[145] = -10;

        $r1[146] = 96;

        $r1[147] = -1;

        $r1[148] = -106;

        $r1[149] = 92;

        $r1[150] = -79;

        $r1[151] = -85;

        $r1[152] = -98;

        $r1[153] = -100;

        $r1[154] = 82;

        $r1[155] = 27;

        $r1[156] = 95;

        $r1[157] = -109;

        $r1[158] = 10;

        $r1[159] = -17;

        $r1[160] = -111;

        $r1[161] = -123;

        $r1[162] = 73;

        $r1[163] = -18;

        $r1[164] = 45;

        $r1[165] = 79;

        $r1[166] = -113;

        $r1[167] = 59;

        $r1[168] = 71;

        $r1[169] = -121;

        $r1[170] = 109;

        $r1[171] = 70;

        $r1[172] = -42;

        $r1[173] = 62;

        $r1[174] = 105;

        $r1[175] = 100;

        $r1[176] = 42;

        $r1[177] = -50;

        $r1[178] = -53;

        $r1[179] = 47;

        $r1[180] = -4;

        $r1[181] = -105;

        $r1[182] = 5;

        $r1[183] = 122;

        $r1[184] = -84;

        $r1[185] = 127;

        $r1[186] = -43;

        $r1[187] = 26;

        $r1[188] = 75;

        $r1[189] = 14;

        $r1[190] = -89;

        $r1[191] = 90;

        $r1[192] = 40;

        $r1[193] = 20;

        $r1[194] = 63;

        $r1[195] = 41;

        $r1[196] = -120;

        $r1[197] = 60;

        $r1[198] = 76;

        $r1[199] = 2;

        $r1[200] = -72;

        $r1[201] = -38;

        $r1[202] = -80;

        $r1[203] = 23;

        $r1[204] = 85;

        $r1[205] = 31;

        $r1[206] = -118;

        $r1[207] = 125;

        $r1[208] = 87;

        $r1[209] = -57;

        $r1[210] = -115;

        $r1[211] = 116;

        $r1[212] = -73;

        $r1[213] = -60;

        $r1[214] = -97;

        $r1[215] = 114;

        $r1[216] = 126;

        $r1[217] = 21;

        $r1[218] = 34;

        $r1[219] = 18;

        $r1[220] = 88;

        $r1[221] = 7;

        $r1[222] = -103;

        $r1[223] = 52;

        $r1[224] = 110;

        $r1[225] = 80;

        $r1[226] = -34;

        $r1[227] = 104;

        $r1[228] = 101;

        $r1[229] = -68;

        $r1[230] = -37;

        $r1[231] = -8;

        $r1[232] = -56;

        $r1[233] = -88;

        $r1[234] = 43;

        $r1[235] = 64;

        $r1[236] = -36;

        $r1[237] = -2;

        $r1[238] = 50;

        $r1[239] = -92;

        $r1[240] = -54;

        $r1[241] = 16;

        $r1[242] = 33;

        $r1[243] = -16;

        $r1[244] = -45;

        $r1[245] = 93;

        $r1[246] = 15;

        $r1[247] = 0;

        $r1[248] = 111;

        $r1[249] = -99;

        $r1[250] = 54;

        $r1[251] = 66;

        $r1[252] = 74;

        $r1[253] = 94;

        $r1[254] = -63;

        $r1[255] = -32;

        $r0[0] = $r1;

        $r1 = newarray (byte)[256];

        $r1[0] = 117;

        $r1[1] = -13;

        $r1[2] = -58;

        $r1[3] = -12;

        $r1[4] = -37;

        $r1[5] = 123;

        $r1[6] = -5;

        $r1[7] = -56;

        $r1[8] = 74;

        $r1[9] = -45;

        $r1[10] = -26;

        $r1[11] = 107;

        $r1[12] = 69;

        $r1[13] = 125;

        $r1[14] = -24;

        $r1[15] = 75;

        $r1[16] = -42;

        $r1[17] = 50;

        $r1[18] = -40;

        $r1[19] = -3;

        $r1[20] = 55;

        $r1[21] = 113;

        $r1[22] = -15;

        $r1[23] = -31;

        $r1[24] = 48;

        $r1[25] = 15;

        $r1[26] = -8;

        $r1[27] = 27;

        $r1[28] = -121;

        $r1[29] = -6;

        $r1[30] = 6;

        $r1[31] = 63;

        $r1[32] = 94;

        $r1[33] = -70;

        $r1[34] = -82;

        $r1[35] = 91;

        $r1[36] = -118;

        $r1[37] = 0;

        $r1[38] = -68;

        $r1[39] = -99;

        $r1[40] = 109;

        $r1[41] = -63;

        $r1[42] = -79;

        $r1[43] = 14;

        $r1[44] = -128;

        $r1[45] = 93;

        $r1[46] = -46;

        $r1[47] = -43;

        $r1[48] = -96;

        $r1[49] = -124;

        $r1[50] = 7;

        $r1[51] = 20;

        $r1[52] = -75;

        $r1[53] = -112;

        $r1[54] = 44;

        $r1[55] = -93;

        $r1[56] = -78;

        $r1[57] = 115;

        $r1[58] = 76;

        $r1[59] = 84;

        $r1[60] = -110;

        $r1[61] = 116;

        $r1[62] = 54;

        $r1[63] = 81;

        $r1[64] = 56;

        $r1[65] = -80;

        $r1[66] = -67;

        $r1[67] = 90;

        $r1[68] = -4;

        $r1[69] = 96;

        $r1[70] = 98;

        $r1[71] = -106;

        $r1[72] = 108;

        $r1[73] = 66;

        $r1[74] = -9;

        $r1[75] = 16;

        $r1[76] = 124;

        $r1[77] = 40;

        $r1[78] = 39;

        $r1[79] = -116;

        $r1[80] = 19;

        $r1[81] = -107;

        $r1[82] = -100;

        $r1[83] = -57;

        $r1[84] = 36;

        $r1[85] = 70;

        $r1[86] = 59;

        $r1[87] = 112;

        $r1[88] = -54;

        $r1[89] = -29;

        $r1[90] = -123;

        $r1[91] = -53;

        $r1[92] = 17;

        $r1[93] = -48;

        $r1[94] = -109;

        $r1[95] = -72;

        $r1[96] = -90;

        $r1[97] = -125;

        $r1[98] = 32;

        $r1[99] = -1;

        $r1[100] = -97;

        $r1[101] = 119;

        $r1[102] = -61;

        $r1[103] = -52;

        $r1[104] = 3;

        $r1[105] = 111;

        $r1[106] = 8;

        $r1[107] = -65;

        $r1[108] = 64;

        $r1[109] = -25;

        $r1[110] = 43;

        $r1[111] = -30;

        $r1[112] = 121;

        $r1[113] = 12;

        $r1[114] = -86;

        $r1[115] = -126;

        $r1[116] = 65;

        $r1[117] = 58;

        $r1[118] = -22;

        $r1[119] = -71;

        $r1[120] = -28;

        $r1[121] = -102;

        $r1[122] = -92;

        $r1[123] = -105;

        $r1[124] = 126;

        $r1[125] = -38;

        $r1[126] = 122;

        $r1[127] = 23;

        $r1[128] = 102;

        $r1[129] = -108;

        $r1[130] = -95;

        $r1[131] = 29;

        $r1[132] = 61;

        $r1[133] = -16;

        $r1[134] = -34;

        $r1[135] = -77;

        $r1[136] = 11;

        $r1[137] = 114;

        $r1[138] = -89;

        $r1[139] = 28;

        $r1[140] = -17;

        $r1[141] = -47;

        $r1[142] = 83;

        $r1[143] = 62;

        $r1[144] = -113;

        $r1[145] = 51;

        $r1[146] = 38;

        $r1[147] = 95;

        $r1[148] = -20;

        $r1[149] = 118;

        $r1[150] = 42;

        $r1[151] = 73;

        $r1[152] = -127;

        $r1[153] = -120;

        $r1[154] = -18;

        $r1[155] = 33;

        $r1[156] = -60;

        $r1[157] = 26;

        $r1[158] = -21;

        $r1[159] = -39;

        $r1[160] = -59;

        $r1[161] = 57;

        $r1[162] = -103;

        $r1[163] = -51;

        $r1[164] = -83;

        $r1[165] = 49;

        $r1[166] = -117;

        $r1[167] = 1;

        $r1[168] = 24;

        $r1[169] = 35;

        $r1[170] = -35;

        $r1[171] = 31;

        $r1[172] = 78;

        $r1[173] = 45;

        $r1[174] = -7;

        $r1[175] = 72;

        $r1[176] = 79;

        $r1[177] = -14;

        $r1[178] = 101;

        $r1[179] = -114;

        $r1[180] = 120;

        $r1[181] = 92;

        $r1[182] = 88;

        $r1[183] = 25;

        $r1[184] = -115;

        $r1[185] = -27;

        $r1[186] = -104;

        $r1[187] = 87;

        $r1[188] = 103;

        $r1[189] = 127;

        $r1[190] = 5;

        $r1[191] = 100;

        $r1[192] = -81;

        $r1[193] = 99;

        $r1[194] = -74;

        $r1[195] = -2;

        $r1[196] = -11;

        $r1[197] = -73;

        $r1[198] = 60;

        $r1[199] = -91;

        $r1[200] = -50;

        $r1[201] = -23;

        $r1[202] = 104;

        $r1[203] = 68;

        $r1[204] = -32;

        $r1[205] = 77;

        $r1[206] = 67;

        $r1[207] = 105;

        $r1[208] = 41;

        $r1[209] = 46;

        $r1[210] = -84;

        $r1[211] = 21;

        $r1[212] = 89;

        $r1[213] = -88;

        $r1[214] = 10;

        $r1[215] = -98;

        $r1[216] = 110;

        $r1[217] = 71;

        $r1[218] = -33;

        $r1[219] = 52;

        $r1[220] = 53;

        $r1[221] = 106;

        $r1[222] = -49;

        $r1[223] = -36;

        $r1[224] = 34;

        $r1[225] = -55;

        $r1[226] = -64;

        $r1[227] = -101;

        $r1[228] = -119;

        $r1[229] = -44;

        $r1[230] = -19;

        $r1[231] = -85;

        $r1[232] = 18;

        $r1[233] = -94;

        $r1[234] = 13;

        $r1[235] = 82;

        $r1[236] = -69;

        $r1[237] = 2;

        $r1[238] = 47;

        $r1[239] = -87;

        $r1[240] = -41;

        $r1[241] = 97;

        $r1[242] = 30;

        $r1[243] = -76;

        $r1[244] = 80;

        $r1[245] = 4;

        $r1[246] = -10;

        $r1[247] = -62;

        $r1[248] = 22;

        $r1[249] = 37;

        $r1[250] = -122;

        $r1[251] = 86;

        $r1[252] = 85;

        $r1[253] = 9;

        $r1[254] = -66;

        $r1[255] = -111;

        $r0[1] = $r1;

        <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int[] r1, r2, r3, $r6;
        int i0, i2, $i3;
        byte[][] $r4;
        byte[] $r5;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.TwofishEngine: boolean encrypting> = 0;

        r1 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0> = r1;

        r1 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1> = r1;

        r1 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2> = r1;

        r1 = newarray (int)[256];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3> = r1;

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt> = 0;

        r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey> = null;

        r1 = newarray (int)[2];

        r2 = newarray (int)[2];

        r3 = newarray (int)[2];

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r4 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r5 = $r4[0];

        $b1 = $r5[i0];

        i2 = $b1 & 255;

        r1[0] = i2;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Mx_X(int)>(i2);

        $i3 = $i3 & 255;

        r2[0] = $i3;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Mx_Y(int)>(i2);

        i2 = i2 & 255;

        r3[0] = i2;

        $r4 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r5 = $r4[1];

        $b1 = $r5[i0];

        i2 = $b1 & 255;

        r1[1] = i2;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Mx_X(int)>(i2);

        $i3 = $i3 & 255;

        r2[1] = $i3;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Mx_Y(int)>(i2);

        i2 = i2 & 255;

        r3[1] = i2;

        $r6 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0>;

        i2 = r1[1];

        $i3 = r2[1];

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i3 = r3[1];

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i3 = r3[1];

        $i3 = $i3 << 24;

        i2 = i2 | $i3;

        $r6[i0] = i2;

        $r6 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1>;

        i2 = r3[0];

        $i3 = r3[0];

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i3 = r2[0];

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i3 = r1[0];

        $i3 = $i3 << 24;

        i2 = i2 | $i3;

        $r6[i0] = i2;

        $r6 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2>;

        i2 = r2[1];

        $i3 = r3[1];

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i3 = r1[1];

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i3 = r3[1];

        $i3 = $i3 << 24;

        i2 = i2 | $i3;

        $r6[i0] = i2;

        $r6 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3>;

        i2 = r2[0];

        $i3 = r1[0];

        $i3 = $i3 << 8;

        i2 = i2 | $i3;

        $i3 = r3[0];

        $i3 = $i3 << 16;

        i2 = i2 | $i3;

        $i3 = r2[0];

        $i3 = $i3 << 24;

        i2 = i2 | $i3;

        $r6[i0] = i2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void Bits32ToBytes(int, byte[], int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1, $i3, $i4;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        $i3 = $i1 + 1;

        $i4 = $i0 >> 8;

        $b2 = (byte) $i4;

        $r1[$i3] = $b2;

        $i3 = $i1 + 2;

        $i4 = $i0 >> 16;

        $b2 = (byte) $i4;

        $r1[$i3] = $b2;

        $i1 = $i1 + 3;

        $i0 = $i0 >> 24;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        return;
    }
    private int BytesTo32Bits(byte[], int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1;
        int $i0, $i2, $i3;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r1[$i0];

        $i2 = $b1 & 255;

        $i3 = $i0 + 1;

        $b1 = $r1[$i3];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 2;

        $b1 = $r1[$i3];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 3;

        $b1 = $r1[$i0];

        $i0 = $b1 & 255;

        $i0 = $i0 << 24;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int F32(int, int[])
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, i1, i2, i3, $i4, i5, $i6, i7, $i8, i9, $i10, i11, $i12;
        int[] $r1;
        byte[][] $r2;
        byte[] $r3, $r4;
        byte $b13;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>($i0);

        i5 = $i4;

        $i6 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>($i0);

        i7 = $i6;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>($i0);

        i9 = $i8;

        $i10 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>($i0);

        i11 = $i10;

        $i0 = $r1[0];

        i1 = $r1[1];

        i2 = $r1[2];

        i3 = $r1[3];

        $i12 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        $i12 = $i12 & 3;

        lookupswitch($i12)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[$i4];

        i1 = $b13 & 255;

        i11 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>($i0);

        i1 = i1 ^ i11;

        i1 = $r1[i1];

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[$i6];

        i11 = $b13 & 255;

        i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>($i0);

        i11 = i11 ^ i9;

        i11 = $r1[i11];

        i1 = i1 ^ i11;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[$i8];

        i11 = $b13 & 255;

        i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>($i0);

        i11 = i11 ^ i9;

        i11 = $r1[i11];

        i1 = i1 ^ i11;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[$i10];

        i11 = $b13 & 255;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>($i0);

        $i0 = i11 ^ $i0;

        $i0 = $r1[$i0];

        $i0 = i1 ^ $i0;

        return $i0;

     label3:
        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[$i4];

        i11 = $b13 & 255;

        i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i3);

        i5 = i11 ^ i9;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[$i6];

        i11 = $b13 & 255;

        i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i3);

        i7 = i11 ^ i9;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[$i8];

        i11 = $b13 & 255;

        i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i3);

        i9 = i11 ^ i9;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[$i10];

        i11 = $b13 & 255;

        $i10 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i3);

        i11 = i11 ^ $i10;

     label4:
        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[i5];

        $i10 = $b13 & 255;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i2);

        i5 = $i10 ^ $i8;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $b13 = $r3[i7];

        $i10 = $b13 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i2);

        i7 = $i10 ^ i7;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[i9];

        i9 = $b13 & 255;

        $i10 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i2);

        i9 = i9 ^ $i10;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $b13 = $r3[i11];

        i11 = $b13 & 255;

        $i10 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i2);

        i11 = i11 ^ $i10;

     label5:
        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r4 = $r2[0];

        $b13 = $r4[i5];

        $i10 = $b13 & 255;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i1);

        $i10 = $i10 ^ i2;

        $b13 = $r3[$i10];

        $i10 = $b13 & 255;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>($i0);

        $i10 = $i10 ^ i2;

        $i10 = $r1[$i10];

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[0];

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r4 = $r2[1];

        $b13 = $r4[i7];

        i7 = $b13 & 255;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i1);

        i7 = i7 ^ i2;

        $b13 = $r3[i7];

        i7 = $b13 & 255;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>($i0);

        i7 = i7 ^ i2;

        i7 = $r1[i7];

        $i10 = $i10 ^ i7;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r4 = $r2[0];

        $b13 = $r4[i9];

        i9 = $b13 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i1);

        i9 = i9 ^ i7;

        $b13 = $r3[i9];

        i9 = $b13 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>($i0);

        i9 = i9 ^ i7;

        i9 = $r1[i9];

        i9 = $i10 ^ i9;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3>;

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r3 = $r2[1];

        $r2 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r4 = $r2[1];

        $b13 = $r4[i11];

        i11 = $b13 & 255;

        i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i1);

        i1 = i11 ^ i1;

        $b13 = $r3[i1];

        i1 = $b13 & 255;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>($i0);

        $i0 = i1 ^ $i0;

        $i0 = $r1[$i0];

        $i0 = i9 ^ $i0;

        return $i0;
    }
    private int Fe32_0(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i1 = $i0 & 255;

        $i1 = $i1 * 2;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i2 = $i0 >>> 8;

        $i2 = $i2 & 255;

        $i2 = $i2 * 2;

        $i2 = $i2 + 1;

        $i2 = $r1[$i2];

        $i1 = $i1 ^ $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i2 = $i0 >>> 16;

        $i2 = $i2 & 255;

        $i2 = $i2 * 2;

        $i2 = $i2 + 512;

        $i2 = $r1[$i2];

        $i1 = $i1 ^ $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i0 = $i0 >>> 24;

        $i0 = $i0 & 255;

        $i0 = $i0 * 2;

        $i0 = $i0 + 513;

        $i0 = $r1[$i0];

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int Fe32_3(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i1 = $i0 >>> 24;

        $i1 = $i1 & 255;

        $i1 = $i1 * 2;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i2 = $i0 & 255;

        $i2 = $i2 * 2;

        $i2 = $i2 + 1;

        $i2 = $r1[$i2];

        $i1 = $i1 ^ $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i2 = $i0 >>> 8;

        $i2 = $i2 & 255;

        $i2 = $i2 * 2;

        $i2 = $i2 + 512;

        $i2 = $r1[$i2];

        $i1 = $i1 ^ $i2;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i0 = $i0 >>> 16;

        $i0 = $i0 & 255;

        $i0 = $i0 * 2;

        $i0 = $i0 + 513;

        $i0 = $r1[$i0];

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int LFSR1(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i1 = $i0 >> 1;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        $i0 = 180;

     label1:
        $i0 = $i0 ^ $i1;

        return $i0;

     label2:
        $i0 = 0;

        goto label1;
    }
    private int LFSR2(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i1 = 0;

        $i2 = $i0 >> 2;

        $i3 = $i0 & 2;

        if $i3 == 0 goto label3;

        $i3 = 180;

     label1:
        $i2 = $i3 ^ $i2;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        $i1 = 90;

     label2:
        $i0 = $i1 ^ $i2;

        return $i0;

     label3:
        $i3 = 0;

        goto label1;
    }
    private int Mx_X(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int LFSR2(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int Mx_Y(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int LFSR1(int)>($i0);

        $i1 = $i1 ^ $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int LFSR2(int)>($i0);

        $i0 = $i1 ^ $i0;

        return $i0;
    }
    private int RS_MDS_Encode(int, int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, $i1, i2;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i1;

        $i1 = 0;

     label1:
        if $i1 >= 4 goto label2;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int RS_rem(int)>(i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = i2 ^ $i0;

        $i0 = 0;

     label3:
        if $i0 >= 4 goto label4;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int RS_rem(int)>($i1);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $i1;
    }
    private int RS_rem(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0, i1, i2, i3, $i4, $i5;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        i3 = 0;

        i1 = $i0 >>> 24;

        i1 = i1 & 255;

        i2 = i1 << 1;

        $i4 = i1 & 128;

        if $i4 == 0 goto label3;

        $i4 = 333;

     label1:
        i2 = $i4 ^ i2;

        i2 = i2 & 255;

        $i4 = i1 >>> 1;

        $i5 = i1 & 1;

        if $i5 == 0 goto label2;

        i3 = 166;

     label2:
        i3 = i3 ^ $i4;

        i3 = i3 ^ i2;

        $i0 = $i0 << 8;

        $i4 = i3 << 24;

        $i0 = $i0 ^ $i4;

        i2 = i2 << 16;

        $i0 = $i0 ^ i2;

        i2 = i3 << 8;

        $i0 = $i0 ^ i2;

        $i0 = $i0 ^ i1;

        return $i0;

     label3:
        $i4 = 0;

        goto label1;
    }
    private int b0(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i0 = $i0 & 255;

        return $i0;
    }
    private int b1(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i0 = $i0 >>> 8;

        $i0 = $i0 & 255;

        return $i0;
    }
    private int b2(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i0 = $i0 >>> 16;

        $i0 = $i0 & 255;

        return $i0;
    }
    private int b3(int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $i0 := @parameter0: int;

        $i0 = $i0 >>> 24;

        $i0 = $i0 & 255;

        return $i0;
    }
    private void decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i3 = $r3[4];

        $i2 = $i2 ^ $i3;

        $i3 = $i0 + 4;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i3);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i4 = $r3[5];

        $i3 = $i3 ^ $i4;

        $i4 = $i0 + 8;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i4);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i5 = $r3[6];

        $i4 = $i4 ^ $i5;

        $i0 = $i0 + 12;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i5 = $r3[7];

        $i5 = $i0 ^ $i5;

        $i0 = 0;

        i6 = 39;

     label1:
        if $i0 >= 16 goto label2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_0(int)>($i2);

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_3(int)>($i3);

        $i9 = $i8 * 2;

        $i10 = $i9 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i9 = i6 + -1;

        i6 = $r3[i6];

        i6 = $i10 + i6;

        $i5 = $i5 ^ i6;

        i6 = $i4 << 1;

        $i4 = $i4 >>> 31;

        $i4 = i6 | $i4;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i6 = $i9 + -1;

        $i9 = $r3[$i9];

        $i9 = $i7 + $i9;

        $i4 = $i4 ^ $i9;

        $i9 = $i5 >>> 1;

        $i5 = $i5 << 31;

        $i5 = $i9 | $i5;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_0(int)>($i4);

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_3(int)>($i5);

        $i9 = $i8 * 2;

        $i10 = $i9 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i9 = i6 + -1;

        i6 = $r3[i6];

        i6 = $i10 + i6;

        $i3 = $i3 ^ i6;

        i6 = $i2 << 1;

        $i2 = $i2 >>> 31;

        $i2 = i6 | $i2;

        $i7 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i6 = $i9 + -1;

        $i9 = $r3[$i9];

        $i9 = $i7 + $i9;

        $i2 = $i2 ^ $i9;

        $i9 = $i3 >>> 1;

        $i3 = $i3 << 31;

        $i3 = $i9 | $i3;

        $i0 = $i0 + 2;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[0];

        $i0 = $i0 ^ $i4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[1];

        $i0 = $i0 ^ $i5;

        $i4 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i4);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[2];

        $i0 = $i0 ^ $i2;

        $i2 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[3];

        $i0 = $i0 ^ $i3;

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i1);

        return;
    }
    private void encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i3 = $r3[0];

        $i2 = $i2 ^ $i3;

        $i3 = $i0 + 4;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i3);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i4 = $r3[1];

        $i3 = $i3 ^ $i4;

        $i4 = $i0 + 8;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i4);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i5 = $r3[2];

        $i4 = $i4 ^ $i5;

        $i0 = $i0 + 12;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i5 = $r3[3];

        $i5 = $i0 ^ $i5;

        $i0 = 0;

        i6 = 8;

     label1:
        if $i0 >= 16 goto label2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_0(int)>($i2);

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_3(int)>($i3);

        $i9 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i10 = i6 + 1;

        i6 = $r3[i6];

        i6 = $i9 + i6;

        i6 = $i4 ^ i6;

        $i4 = i6 >>> 1;

        i6 = i6 << 31;

        $i4 = $i4 | i6;

        i6 = $i5 << 1;

        $i5 = $i5 >>> 31;

        $i5 = i6 | $i5;

        $i8 = $i8 * 2;

        $i7 = $i8 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i6 = i10 + 1;

        i10 = $r3[i10];

        i10 = $i7 + i10;

        $i5 = $i5 ^ i10;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_0(int)>($i4);

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int Fe32_3(int)>($i5);

        $i9 = $i7 + $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i10 = i6 + 1;

        i6 = $r3[i6];

        i6 = $i9 + i6;

        i6 = $i2 ^ i6;

        $i2 = i6 >>> 1;

        i6 = i6 << 31;

        $i2 = $i2 | i6;

        i6 = $i3 << 1;

        $i3 = $i3 >>> 31;

        $i3 = i6 | $i3;

        $i8 = $i8 * 2;

        $i7 = $i8 + $i7;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i6 = i10 + 1;

        i10 = $r3[i10];

        i10 = $i7 + i10;

        $i3 = $i3 ^ i10;

        $i0 = $i0 + 2;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[4];

        $i0 = $i0 ^ $i4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[5];

        $i0 = $i0 ^ $i5;

        $i4 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i4);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[6];

        $i0 = $i0 ^ $i2;

        $i2 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        $i0 = $r3[7];

        $i0 = $i0 ^ $i3;

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void Bits32ToBytes(int,byte[],int)>($i0, $r2, $i1);

        return;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1, $r8;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i11;
        int[] r2, r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        byte[][] $r7;
        byte $b10;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 := @parameter0: byte[];

        r2 = newarray (int)[4];

        r3 = newarray (int)[4];

        $r4 = newarray (int)[4];

        $r5 = newarray (int)[40];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys> = $r5;

        i0 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        if i0 >= 1 goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key size less than 64 bits");

        throw $r6;

     label01:
        i0 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        if i0 <= 4 goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key size larger than 256 bits");

        throw $r6;

     label02:
        i0 = 0;

     label03:
        i1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        if i0 >= i1 goto label04;

        i1 = i0 * 8;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, i1);

        r2[i0] = i2;

        i1 = i1 + 4;

        i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int BytesTo32Bits(byte[],int)>($r1, i1);

        r3[i0] = i1;

        i1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        i1 = i1 + -1;

        i1 = i1 - i0;

        i2 = r2[i0];

        i3 = r3[i0];

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int RS_MDS_Encode(int,int)>(i2, i3);

        $r4[i1] = i2;

        i0 = i0 + 1;

        goto label03;

     label04:
        i0 = 0;

     label05:
        if i0 >= 20 goto label06;

        i2 = i0 * 33686018;

        i1 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int F32(int,int[])>(i2, r2);

        i2 = 16843009 + i2;

        i3 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int F32(int,int[])>(i2, r3);

        i2 = i3 << 8;

        i3 = i3 >>> 24;

        i2 = i2 | i3;

        i1 = i1 + i2;

        $r5 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i3 = i0 * 2;

        $r5[i3] = i1;

        i2 = i1 + i2;

        $r5 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSubKeys>;

        i1 = i0 * 2;

        i1 = i1 + 1;

        i3 = i2 << 9;

        i2 = i2 >>> 23;

        i2 = i3 | i2;

        $r5[i1] = i2;

        i0 = i0 + 1;

        goto label05;

     label06:
        i0 = $r4[0];

        i1 = $r4[1];

        i2 = $r4[2];

        i3 = $r4[3];

        r2 = newarray (int)[1024];

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox> = r2;

        i4 = 0;

     label07:
        if i4 >= 256 goto label13;

        i5 = i4;

        i6 = i4;

        i7 = i4;

        i8 = i4;

        $i9 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt>;

        $i9 = $i9 & 3;

        lookupswitch($i9)
        {
            case 0: goto label10;
            case 1: goto label09;
            case 2: goto label12;
            case 3: goto label11;
            default: goto label08;
        };

     label08:
        i4 = i4 + 1;

        goto label07;

     label09:
        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i5 = i4 * 2;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i4];

        i6 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i0);

        i6 = i6 ^ i7;

        i6 = r3[i6];

        r2[i5] = i6;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i5 = i4 * 2;

        i5 = i5 + 1;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i4];

        i6 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i0);

        i6 = i6 ^ i7;

        i6 = r3[i6];

        r2[i5] = i6;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i5 = i4 * 2;

        i5 = i5 + 512;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i4];

        i6 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i0);

        i6 = i6 ^ i7;

        i6 = r3[i6];

        r2[i5] = i6;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i5 = i4 * 2;

        i5 = i5 + 513;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i4];

        i6 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i0);

        i6 = i6 ^ i7;

        i6 = r3[i6];

        r2[i5] = i6;

        goto label08;

     label10:
        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i4];

        i5 = $b10 & 255;

        i6 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i3);

        i8 = i5 ^ i6;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i4];

        i5 = $b10 & 255;

        i6 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i3);

        i7 = i5 ^ i6;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i4];

        i5 = $b10 & 255;

        i6 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i3);

        i6 = i5 ^ i6;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i4];

        i5 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i3);

        i5 = i5 ^ $i9;

     label11:
        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i8];

        i8 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i2);

        i8 = i8 ^ $i9;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $b10 = $r1[i7];

        i7 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i2);

        i7 = i7 ^ $i9;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i6];

        i6 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i2);

        i6 = i6 ^ $i9;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $b10 = $r1[i5];

        i5 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i2);

        i5 = i5 ^ $i9;

     label12:
        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        $i9 = i4 * 2;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS0>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r8 = $r7[0];

        $b10 = $r8[i8];

        i8 = $b10 & 255;

        $i11 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i1);

        i8 = i8 ^ $i11;

        $b10 = $r1[i8];

        i8 = $b10 & 255;

        $i11 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b0(int)>(i0);

        i8 = i8 ^ $i11;

        i8 = r3[i8];

        r2[$i9] = i8;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i8 = i4 * 2;

        i8 = i8 + 1;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS1>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[0];

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r8 = $r7[1];

        $b10 = $r8[i7];

        i7 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i1);

        i7 = i7 ^ $i9;

        $b10 = $r1[i7];

        i7 = $b10 & 255;

        $i9 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b1(int)>(i0);

        i7 = i7 ^ $i9;

        i7 = r3[i7];

        r2[i8] = i7;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i7 = i4 * 2;

        i7 = i7 + 512;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS2>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r8 = $r7[0];

        $b10 = $r8[i6];

        i6 = $b10 & 255;

        i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i1);

        i6 = i6 ^ i8;

        $b10 = $r1[i6];

        i6 = $b10 & 255;

        i8 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b2(int)>(i0);

        i6 = i6 ^ i8;

        i6 = r3[i6];

        r2[i7] = i6;

        r2 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gSBox>;

        i6 = i4 * 2;

        i6 = i6 + 513;

        r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: int[] gMDS3>;

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r1 = $r7[1];

        $r7 = <org.spongycastle.crypto.engines.TwofishEngine: byte[][] P>;

        $r8 = $r7[1];

        $b10 = $r8[i5];

        i5 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i1);

        i5 = i5 ^ i7;

        $b10 = $r1[i5];

        i5 = $b10 & 255;

        i7 = specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: int b3(int)>(i0);

        i5 = i5 ^ i7;

        i5 = r3[i5];

        r2[i6] = i5;

        goto label08;

     label13:
        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        return "Twofish";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.KeyParameter r2;
        byte[] $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label1;

        r0.<org.spongycastle.crypto.engines.TwofishEngine: boolean encrypting> = $z0;

        r2 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey> = $r3;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey>;

        $i0 = lengthof $r3;

        $i0 = $i0 / 8;

        r0.<org.spongycastle.crypto.engines.TwofishEngine: int k64Cnt> = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void setKey(byte[])>($r3);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to Twofish init - ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        org.spongycastle.crypto.OutputLengthException $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Twofish not initialised");

        throw $r4;

     label1:
        $i2 = $i0 + 16;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + 16;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r6 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.TwofishEngine: boolean encrypting>;

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

     label4:
        return 16;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        goto label4;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.TwofishEngine r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.TwofishEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.TwofishEngine: byte[] workingKey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.TwofishEngine: void setKey(byte[])>($r1);

     label1:
        return;
    }
