org.spongycastle.crypto.engines.OldIESEngine extends org.spongycastle.crypto.engines.IESEngine
    public void <init>(org.spongycastle.crypto.BasicAgreement, org.spongycastle.crypto.DerivationFunction, org.spongycastle.crypto.Mac)
    {
        org.spongycastle.crypto.engines.OldIESEngine r0;
        org.spongycastle.crypto.BasicAgreement $r1;
        org.spongycastle.crypto.DerivationFunction $r2;
        org.spongycastle.crypto.Mac $r3;

        r0 := @this: org.spongycastle.crypto.engines.OldIESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.spongycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.spongycastle.crypto.Mac;

        specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: void <init>(org.spongycastle.crypto.BasicAgreement,org.spongycastle.crypto.DerivationFunction,org.spongycastle.crypto.Mac)>($r1, $r2, $r3);

        return;
    }
    public void <init>(org.spongycastle.crypto.BasicAgreement, org.spongycastle.crypto.DerivationFunction, org.spongycastle.crypto.Mac, org.spongycastle.crypto.BufferedBlockCipher)
    {
        org.spongycastle.crypto.engines.OldIESEngine r0;
        org.spongycastle.crypto.BasicAgreement $r1;
        org.spongycastle.crypto.DerivationFunction $r2;
        org.spongycastle.crypto.Mac $r3;
        org.spongycastle.crypto.BufferedBlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.engines.OldIESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.spongycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.spongycastle.crypto.Mac;

        $r4 := @parameter3: org.spongycastle.crypto.BufferedBlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: void <init>(org.spongycastle.crypto.BasicAgreement,org.spongycastle.crypto.DerivationFunction,org.spongycastle.crypto.Mac,org.spongycastle.crypto.BufferedBlockCipher)>($r1, $r2, $r3, $r4);

        return;
    }
    protected byte[] getLengthTag(byte[])
    {
        org.spongycastle.crypto.engines.OldIESEngine r0;
        byte[] $r1, r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.OldIESEngine;

        $r1 := @parameter0: byte[];

        r2 = newarray (byte)[4];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int,byte[],int)>($i0, r2, 0);

     label1:
        return r2;
    }
