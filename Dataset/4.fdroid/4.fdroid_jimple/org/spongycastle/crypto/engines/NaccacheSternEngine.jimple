org.spongycastle.crypto.engines.NaccacheSternEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private static java.math.BigInteger ONE
private static java.math.BigInteger ZERO
private boolean debug
private boolean forEncryption
private org.spongycastle.crypto.params.NaccacheSternKeyParameters key
private java.util.Vector[] lookup
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup> = null;

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug> = 0;

        return;
    }
    private static java.math.BigInteger chineseRemainder(java.util.Vector, java.util.Vector)
    {
        java.util.Vector $r0, $r1;
        java.math.BigInteger r2, r3, $r5, r6;
        int i0, $i1;
        java.lang.Object $r4;

        $r0 := @parameter0: java.util.Vector;

        $r1 := @parameter1: java.util.Vector;

        r2 = <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ZERO>;

        r3 = <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ONE>;

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r5 = (java.math.BigInteger) $r4;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label4;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r6 = (java.math.BigInteger) $r4;

        $r5 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r6);

        r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r6);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        $r4 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r6 = (java.math.BigInteger) $r4;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        i0 = i0 + 1;

        goto label3;

     label4:
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r3);

        return r2;
    }
    public byte[] addCryptedBlocks(byte[], byte[]) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        byte[] $r1, $r2, $r12;
        java.math.BigInteger r3, r4, $r6, $r8;
        boolean $z0;
        int $i0, $i1;
        org.spongycastle.crypto.InvalidCipherTextException $r5;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r7;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getOutputBlockSize()>();

        if $i0 > $i1 goto label1;

        $i0 = lengthof $r2;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getOutputBlockSize()>();

        if $i0 <= $i1 goto label4;

     label1:
        $r5 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r5.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("BlockLength too large for simple addition.\n");

        throw $r5;

     label2:
        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        if $i0 > $i1 goto label3;

        $i0 = lengthof $r2;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        if $i0 <= $i1 goto label4;

     label3:
        $r5 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r5.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("BlockLength too large for simple addition.\n");

        throw $r5;

     label4:
        r3 = new java.math.BigInteger;

        specialinvoke r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        r4 = new java.math.BigInteger;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r6 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $r7 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label5;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c(m1) as BigInteger:....... ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c(m2) as BigInteger:....... ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c(m1)*c(m2)%n = c(m1+m2)%n: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label5:
        $r7 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        r3 = virtualinvoke $r7.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r1 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r2 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r1;

        $r12 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $i1 = lengthof $r12;

        $i0 = $i0 - $i1;

        $r12 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $i1 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, $i1);

        return $r1;
    }
    public byte[] encrypt(java.math.BigInteger)
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        java.math.BigInteger $r1, $r3, $r5;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r2;
        byte[] $r4, $r6;
        int $i0, $i1;
        boolean $z0;
        java.io.PrintStream $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r4, 0);

        $r2 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getG()>();

        $r2 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r1, $r5);

        $r6 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r4;

        $i1 = lengthof $r6;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r4, $i0, $i1);

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encrypted value is:  ");

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        return $r4;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        boolean $z0;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r1;
        int $i0;
        java.math.BigInteger $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: int getLowerSigmaBound()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 + -1;

        return $i0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r3;

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        boolean $z0;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r1;
        java.math.BigInteger $r2;
        byte[] $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: java.math.BigInteger getModulus()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r3;

        return $i0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.params.NaccacheSternKeyParameters: int getLowerSigmaBound()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 + -1;

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters r3;
        java.io.PrintStream $r4;
        org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters r5;
        java.util.Vector $r6, $r10;
        int $i0, $i1, i2;
        java.util.Vector[] $r7;
        java.lang.Object $r8;
        java.math.BigInteger r9, $r11, $r14, $r15, $r16;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption> = $z0;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

     label1:
        r3 = (org.spongycastle.crypto.params.NaccacheSternKeyParameters) r1;

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key> = r3;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 != 0 goto label7;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Constructing lookup Array");

     label2:
        r3 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        r5 = (org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters) r3;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.util.Vector getSmallPrimes()>();

        $i0 = virtualinvoke $r6.<java.util.Vector: int size()>();

        $r7 = newarray (java.util.Vector)[$i0];

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup> = $r7;

        $i0 = 0;

     label3:
        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label7;

        $r8 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        r9 = (java.math.BigInteger) $r8;

        $i1 = virtualinvoke r9.<java.math.BigInteger: int intValue()>();

        $r7 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        $r10 = new java.util.Vector;

        specialinvoke $r10.<java.util.Vector: void <init>()>();

        $r7[$i0] = $r10;

        $r7 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        $r10 = $r7[$i0];

        $r11 = <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ONE>;

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>($r11);

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label4;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constructing lookup ArrayList for ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label4:
        $r11 = <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger ZERO>;

        i2 = 1;

     label5:
        if i2 >= $i1 goto label6;

        $r14 = virtualinvoke r5.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.math.BigInteger getPhi_n()>();

        $r14 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r14);

        $r11 = $r14;

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r9);

        $r7 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        $r10 = $r7[$i0];

        $r15 = virtualinvoke r5.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.math.BigInteger getG()>();

        $r16 = virtualinvoke r5.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.math.BigInteger getModulus()>();

        $r14 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r14, $r16);

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>($r14);

        i2 = i2 + 1;

        goto label5;

     label6:
        $i0 = $i0 + 1;

        goto label3;

     label7:
        return;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        byte[] $r1, r9;
        int $i0, $i1, $i2;
        java.util.Vector r2, r4, $r14, $r19;
        java.math.BigInteger r3, $r15, $r17;
        org.spongycastle.crypto.params.NaccacheSternKeyParameters $r5;
        java.lang.IllegalStateException $r6;
        org.spongycastle.crypto.DataLengthException $r7;
        boolean $z0;
        org.spongycastle.crypto.InvalidCipherTextException $r8;
        java.io.PrintStream $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters r13;
        java.lang.Object $r16;
        java.util.Vector[] $r18;
        long $l3;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r5 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        if $r5 != null goto label01;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NaccacheStern engine not initialised");

        throw $r6;

     label01:
        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        if $i1 <= $i2 goto label02;

        $r7 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for Naccache-Stern cipher.\n");

        throw $r7;

     label02:
        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 != 0 goto label03;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        if $i1 >= $i2 goto label03;

        $r8 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r8.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("BlockLength does not match modulus for Naccache-Stern cipher.\n");

        throw $r8;

     label03:
        if $i0 != 0 goto label04;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label07;

     label04:
        r9 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r9, 0, $i1);

     label05:
        r3 = new java.math.BigInteger;

        specialinvoke r3.<java.math.BigInteger: void <init>(int,byte[])>(1, r9);

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label06;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input as BigInteger: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label06:
        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean forEncryption>;

        if $z0 == 0 goto label08;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: byte[] encrypt(java.math.BigInteger)>(r3);

        return $r1;

     label07:
        r9 = $r1;

        goto label05;

     label08:
        r4 = new java.util.Vector;

        specialinvoke r4.<java.util.Vector: void <init>()>();

        $r5 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: org.spongycastle.crypto.params.NaccacheSternKeyParameters key>;

        r13 = (org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters) $r5;

        $r14 = virtualinvoke r13.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.util.Vector getSmallPrimes()>();

        $i0 = 0;

     label09:
        $i1 = virtualinvoke $r14.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label15;

        $r15 = virtualinvoke r13.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.math.BigInteger getPhi_n()>();

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r17 = (java.math.BigInteger) $r16;

        $r15 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r17);

        $r17 = virtualinvoke r13.<org.spongycastle.crypto.params.NaccacheSternPrivateKeyParameters: java.math.BigInteger getModulus()>();

        $r15 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r15, $r17);

        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        r2 = $r18[$i0];

        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        $r19 = $r18[$i0];

        $i1 = virtualinvoke $r19.<java.util.Vector: int size()>();

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r17 = (java.math.BigInteger) $r16;

        $i2 = virtualinvoke $r17.<java.math.BigInteger: int intValue()>();

        if $i1 == $i2 goto label11;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label10;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prime is ");

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lookup table has size ");

        $i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label10:
        $r8 = new org.spongycastle.crypto.InvalidCipherTextException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in lookup Array for ");

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        r3 = (java.math.BigInteger) $r16;

        $i1 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Size mismatch. Expected ArrayList with length ");

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        r3 = (java.math.BigInteger) $r16;

        $i1 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but found ArrayList of length ");

        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        r2 = $r18[$i0];

        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label11:
        $i1 = virtualinvoke r2.<java.util.Vector: int indexOf(java.lang.Object)>($r15);

        if $i1 != -1 goto label14;

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label13;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual prime is ");

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decrypted value is ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LookupList for ");

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with size ");

        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        r2 = $r18[$i0];

        $i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $i1 = 0;

     label12:
        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        r2 = $r18[$i0];

        $i2 = virtualinvoke r2.<java.util.Vector: int size()>();

        if $i1 >= $i2 goto label13;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r18 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: java.util.Vector[] lookup>;

        r2 = $r18[$i0];

        $r16 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.Object)>($r16);

        $i1 = $i1 + 1;

        goto label12;

     label13:
        $r8 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r8.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Lookup failed");

        throw $r8;

     label14:
        $l3 = (long) $i1;

        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        virtualinvoke r4.<java.util.Vector: void addElement(java.lang.Object)>($r15);

        $i0 = $i0 + 1;

        goto label09;

     label15:
        r3 = staticinvoke <org.spongycastle.crypto.engines.NaccacheSternEngine: java.math.BigInteger chineseRemainder(java.util.Vector,java.util.Vector)>(r4, $r14);

        $r1 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        return $r1;
    }
    public byte[] processData(byte[]) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        byte[] $r1, r2, $r6;
        boolean $z0;
        java.io.PrintStream $r3;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.InvalidCipherTextException $r7;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label01;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println()>();

     label01:
        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        if $i0 <= $i1 goto label10;

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getInputBlockSize()>();

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: int getOutputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label02;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input blocksize is:  ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output blocksize is: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data has length:.... ");

        $i1 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label02:
        $i1 = 0;

        i3 = 0;

        $i4 = lengthof $r1;

        $i4 = $i4 / $i0;

        $i4 = $i4 + 1;

        $i2 = $i4 * $i2;

        r2 = newarray (byte)[$i2];

     label03:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label09;

        $i2 = $i1 + $i0;

        $i4 = lengthof $r1;

        if $i2 >= $i4 goto label06;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: byte[] processBlock(byte[],int,int)>($r1, $i1, $i0);

        $i1 = $i1 + $i0;

     label04:
        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label05;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new datapos is ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label05:
        if $r6 == null goto label07;

        $i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i3, $i2);

        $i2 = lengthof $r6;

        i3 = i3 + $i2;

        goto label03;

     label06:
        $i2 = lengthof $r1;

        $i2 = $i2 - $i1;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: byte[] processBlock(byte[],int,int)>($r1, $i1, $i2);

        $i2 = lengthof $r1;

        $i2 = $i2 - $i1;

        $i1 = $i1 + $i2;

        goto label04;

     label07:
        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label08;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("cipher returned null");

     label08:
        $r7 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r7.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("cipher returned null");

        throw $r7;

     label09:
        $r1 = newarray (byte)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, 0, i3);

        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label12;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("returning ");

        $i0 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return $r1;

     label10:
        $z0 = r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug>;

        if $z0 == 0 goto label11;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("data size is less then input block size, processing directly");

     label11:
        $i0 = lengthof $r1;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label12:
        return $r1;
    }
    public void setDebug(boolean)
    {
        org.spongycastle.crypto.engines.NaccacheSternEngine r0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.NaccacheSternEngine;

        $z0 := @parameter0: boolean;

        r0.<org.spongycastle.crypto.engines.NaccacheSternEngine: boolean debug> = $z0;

        return;
    }
