org.spongycastle.crypto.engines.IESEngine extends java.lang.Object
private byte[] IV
byte[] V
org.spongycastle.crypto.BasicAgreement agree
org.spongycastle.crypto.BufferedBlockCipher cipher
boolean forEncryption
org.spongycastle.crypto.DerivationFunction kdf
private org.spongycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator
private org.spongycastle.crypto.KeyParser keyParser
org.spongycastle.crypto.Mac mac
byte[] macBuf
org.spongycastle.crypto.params.IESParameters param
org.spongycastle.crypto.CipherParameters privParam
org.spongycastle.crypto.CipherParameters pubParam
    public void <init>(org.spongycastle.crypto.BasicAgreement, org.spongycastle.crypto.DerivationFunction, org.spongycastle.crypto.Mac)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.BasicAgreement $r1;
        org.spongycastle.crypto.DerivationFunction $r2;
        org.spongycastle.crypto.Mac $r3;
        int $i0;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.spongycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.spongycastle.crypto.Mac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BasicAgreement agree> = $r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf> = $r2;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac> = $r3;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] macBuf> = $r4;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher> = null;

        return;
    }
    public void <init>(org.spongycastle.crypto.BasicAgreement, org.spongycastle.crypto.DerivationFunction, org.spongycastle.crypto.Mac, org.spongycastle.crypto.BufferedBlockCipher)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.BasicAgreement $r1;
        org.spongycastle.crypto.DerivationFunction $r2;
        org.spongycastle.crypto.Mac $r3;
        org.spongycastle.crypto.BufferedBlockCipher $r4;
        int $i0;
        byte[] $r5;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.spongycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.spongycastle.crypto.Mac;

        $r4 := @parameter3: org.spongycastle.crypto.BufferedBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BasicAgreement agree> = $r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf> = $r2;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac> = $r3;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r5 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] macBuf> = $r5;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher> = $r4;

        return;
    }
    private byte[] decryptBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        byte[] $r1, r2, $r6, r8, r9, $r11, $r12;
        int $i0, $i1, i2, $i3, $i6;
        org.spongycastle.crypto.params.IESParameters $r3;
        org.spongycastle.crypto.InvalidCipherTextException $r4;
        org.spongycastle.crypto.BufferedBlockCipher $r5;
        org.spongycastle.crypto.Mac $r7;
        org.spongycastle.crypto.DerivationFunction $r10;
        byte $b4, $b5;
        org.spongycastle.crypto.params.KeyParameter $r13;
        boolean $z0;
        org.spongycastle.crypto.params.IESWithCipherParameters $r14;
        org.spongycastle.crypto.params.ParametersWithIV $r15;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $i3 = virtualinvoke $r3.<org.spongycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $i3 = $i3 / 8;

        if $i1 > $i3 goto label01;

        $r4 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Length of input must be greater than the MAC");

        throw $r4;

     label01:
        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        if $r5 != null goto label10;

        $r6 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i3 = lengthof $r6;

        $i3 = $i1 - $i3;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        i2 = interfaceinvoke $r7.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $i3 = $i3 - i2;

        r8 = newarray (byte)[$i3];

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $i3 = virtualinvoke $r3.<org.spongycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $i3 = $i3 / 8;

        $r6 = newarray (byte)[$i3];

        $i3 = lengthof r8;

        i2 = lengthof $r6;

        $i3 = $i3 + i2;

        r9 = newarray (byte)[$i3];

        $r10 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf>;

        $i3 = lengthof r9;

        interfaceinvoke $r10.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r9, 0, $i3);

        $r11 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i3 = lengthof $r11;

        if $i3 == 0 goto label04;

        $i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r6, 0, $i3);

        $i3 = lengthof $r6;

        i2 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, $i3, r8, 0, i2);

     label02:
        $i3 = lengthof r8;

        r9 = newarray (byte)[$i3];

        $i3 = 0;

     label03:
        i2 = lengthof r8;

        if $i3 == i2 goto label05;

        $r11 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof $r11;

        i2 = i2 + $i0;

        i2 = i2 + $i3;

        $b4 = $r1[i2];

        $b5 = r8[$i3];

        i2 = $b4 ^ $b5;

        $b4 = (byte) i2;

        r9[$i3] = $b4;

        $i3 = $i3 + 1;

        goto label03;

     label04:
        $i3 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r8, 0, $i3);

        $i3 = lengthof r8;

        i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, $i3, $r6, 0, i2);

        goto label02;

     label05:
        $i3 = lengthof r8;

     label06:
        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        r8 = virtualinvoke $r3.<org.spongycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r11 = null;

        r2 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof r2;

        if i2 == 0 goto label07;

        $r11 = virtualinvoke r0.<org.spongycastle.crypto.engines.IESEngine: byte[] getLengthTag(byte[])>(r8);

     label07:
        i2 = $i0 + $i1;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i6 = interfaceinvoke $r7.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $i6 = i2 - $i6;

        $r12 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i6, i2);

        i2 = lengthof $r12;

        r2 = newarray (byte)[i2];

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $r13 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r13.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r6);

        interfaceinvoke $r7.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r13);

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $r6 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof $r6;

        $i0 = i2 + $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof $r6;

        $i1 = $i1 - i2;

        i2 = lengthof r2;

        $i1 = $i1 - i2;

        interfaceinvoke $r7.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        if r8 == null goto label08;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i0 = lengthof r8;

        interfaceinvoke $r7.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r8, 0, $i0);

     label08:
        $r1 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label09;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i0 = lengthof $r11;

        interfaceinvoke $r7.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r11, 0, $i0);

     label09:
        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>(r2, 0);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r12, r2);

        if $z0 != 0 goto label13;

        $r4 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Invalid MAC.");

        throw $r4;

     label10:
        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $r14 = (org.spongycastle.crypto.params.IESWithCipherParameters) $r3;

        $i3 = virtualinvoke $r14.<org.spongycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i3 = $i3 / 8;

        r9 = newarray (byte)[$i3];

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $i3 = virtualinvoke $r3.<org.spongycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $i3 = $i3 / 8;

        $r6 = newarray (byte)[$i3];

        $i3 = lengthof r9;

        i2 = lengthof $r6;

        $i3 = $i3 + i2;

        r8 = newarray (byte)[$i3];

        $r10 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf>;

        $i3 = lengthof r8;

        interfaceinvoke $r10.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r8, 0, $i3);

        $i3 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r9, 0, $i3);

        $i3 = lengthof r9;

        i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, $i3, $r6, 0, i2);

        r8 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV>;

        if r8 == null goto label12;

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r15 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r13 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r13.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r9);

        r9 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV>;

        specialinvoke $r15.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r13, r9);

        virtualinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r15);

     label11:
        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        r9 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i3 = lengthof r9;

        $i3 = $i1 - $i3;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        i2 = interfaceinvoke $r7.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $i3 = $i3 - i2;

        $i3 = virtualinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i3);

        r9 = newarray (byte)[$i3];

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        r8 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i3 = lengthof r8;

        $i3 = $i0 + $i3;

        r8 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof r8;

        i2 = $i1 - i2;

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i6 = interfaceinvoke $r7.<org.spongycastle.crypto.Mac: int getMacSize()>();

        i2 = i2 - $i6;

        $i3 = virtualinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i3, i2, r9, 0);

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        i2 = virtualinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>(r9, $i3);

        $i3 = $i3 + i2;

        goto label06;

     label12:
        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r13 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r13.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r9);

        virtualinvoke $r5.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r13);

        goto label11;

     label13:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r9, 0, $i3);

        return $r1;
    }
    private byte[] encryptBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        byte[] $r1, r2, r4, r6, $r8;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.BufferedBlockCipher $r3;
        org.spongycastle.crypto.params.IESParameters $r5;
        org.spongycastle.crypto.DerivationFunction $r7;
        byte $b4, $b5;
        org.spongycastle.crypto.Mac $r9;
        org.spongycastle.crypto.params.KeyParameter $r10;
        org.spongycastle.crypto.params.IESWithCipherParameters $r11;
        org.spongycastle.crypto.params.ParametersWithIV $r12;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        if $r3 != null goto label09;

        r4 = newarray (byte)[$i1];

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $i2 = virtualinvoke $r5.<org.spongycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $i2 = $i2 / 8;

        r2 = newarray (byte)[$i2];

        $i2 = lengthof r4;

        $i3 = lengthof r2;

        $i2 = $i2 + $i3;

        r6 = newarray (byte)[$i2];

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf>;

        $i2 = lengthof r6;

        interfaceinvoke $r7.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r6, 0, $i2);

        $r8 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i2 = lengthof $r8;

        if $i2 == 0 goto label03;

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r2, 0, $i2);

        $i2 = lengthof r2;

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i2, r4, 0, $i3);

     label01:
        r6 = newarray (byte)[$i1];

        $i2 = 0;

     label02:
        if $i2 == $i1 goto label04;

        $i3 = $i0 + $i2;

        $b4 = $r1[$i3];

        $b5 = r4[$i2];

        $i3 = $b4 ^ $b5;

        $b4 = (byte) $i3;

        r6[$i2] = $b4;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r4, 0, $i2);

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i1, r2, 0, $i2);

        goto label01;

     label04:
        $i0 = $i1;

     label05:
        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        r4 = virtualinvoke $r5.<org.spongycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r8 = null;

        $r1 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof $r1;

        if $i1 == 0 goto label06;

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.engines.IESEngine: byte[] getLengthTag(byte[])>(r4);

     label06:
        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i1 = interfaceinvoke $r9.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r1 = newarray (byte)[$i1];

        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $r10 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r10.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r2);

        interfaceinvoke $r9.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r10);

        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i1 = lengthof r6;

        interfaceinvoke $r9.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r6, 0, $i1);

        if r4 == null goto label07;

        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i1 = lengthof r4;

        interfaceinvoke $r9.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r4, 0, $i1);

     label07:
        r2 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof r2;

        if $i1 == 0 goto label08;

        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        $i1 = lengthof $r8;

        interfaceinvoke $r9.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r8, 0, $i1);

     label08:
        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r9.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        r2 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof r2;

        $i1 = $i1 + $i0;

        $i2 = lengthof $r1;

        $i1 = $i1 + $i2;

        r2 = newarray (byte)[$i1];

        r4 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $r8 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r2, 0, $i1);

        r4 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r2, $i1, $i0);

        r6 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $i1 = lengthof r6;

        $i0 = $i1 + $i0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        return r2;

     label09:
        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $r11 = (org.spongycastle.crypto.params.IESWithCipherParameters) $r5;

        $i2 = virtualinvoke $r11.<org.spongycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i2 = $i2 / 8;

        r6 = newarray (byte)[$i2];

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $i2 = virtualinvoke $r5.<org.spongycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $i2 = $i2 / 8;

        r2 = newarray (byte)[$i2];

        $i2 = lengthof r6;

        $i3 = lengthof r2;

        $i2 = $i2 + $i3;

        r4 = newarray (byte)[$i2];

        $r7 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf>;

        $i2 = lengthof r4;

        interfaceinvoke $r7.<org.spongycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>(r4, 0, $i2);

        $i2 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, 0, $i2);

        $i2 = lengthof r6;

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, $i2, r2, 0, $i3);

        r4 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV>;

        if r4 == null goto label11;

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r12 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r10 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r10.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r6);

        r6 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV>;

        specialinvoke $r12.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r10, r6);

        virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r12);

     label10:
        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i2 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i1);

        r6 = newarray (byte)[$i2];

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, r6, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $i1 = virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>(r6, $i0);

        $i0 = $i0 + $i1;

        goto label05;

     label11:
        $r3 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        $r10 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r10.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r6);

        virtualinvoke $r3.<org.spongycastle.crypto.BufferedBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r10);

        goto label10;
    }
    private void extractParams(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.CipherParameters r1;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithIV $r2;
        byte[] $r3;
        org.spongycastle.crypto.params.IESParameters $r4;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label1;

        $r2 = (org.spongycastle.crypto.params.ParametersWithIV) r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV> = $r3;

        $r2 = (org.spongycastle.crypto.params.ParametersWithIV) r1;

        r1 = virtualinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.IESParameters) r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param> = $r4;

        return;

     label1:
        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] IV> = null;

        $r4 = (org.spongycastle.crypto.params.IESParameters) r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param> = $r4;

        return;
    }
    public org.spongycastle.crypto.BufferedBlockCipher getCipher()
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.BufferedBlockCipher r1;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        r1 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BufferedBlockCipher cipher>;

        return r1;
    }
    protected byte[] getLengthTag(byte[])
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        byte[] $r1, r2;
        int $i0;
        long $l1;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        r2 = newarray (byte)[8];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        $l1 = $l1 * 8L;

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long,byte[],int)>($l1, r2, 0);

     label1:
        return r2;
    }
    public org.spongycastle.crypto.Mac getMac()
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.Mac r1;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        r1 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.Mac mac>;

        return r1;
    }
    public void init(org.spongycastle.crypto.params.AsymmetricKeyParameter, org.spongycastle.crypto.CipherParameters, org.spongycastle.crypto.KeyParser)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        org.spongycastle.crypto.KeyParser $r3;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r3 := @parameter2: org.spongycastle.crypto.KeyParser;

        r0.<org.spongycastle.crypto.engines.IESEngine: boolean forEncryption> = 0;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters privParam> = $r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.KeyParser keyParser> = $r3;

        specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: void extractParams(org.spongycastle.crypto.CipherParameters)>($r2);

        return;
    }
    public void init(org.spongycastle.crypto.params.AsymmetricKeyParameter, org.spongycastle.crypto.CipherParameters, org.spongycastle.crypto.generators.EphemeralKeyPairGenerator)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        org.spongycastle.crypto.generators.EphemeralKeyPairGenerator $r3;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r3 := @parameter2: org.spongycastle.crypto.generators.EphemeralKeyPairGenerator;

        r0.<org.spongycastle.crypto.engines.IESEngine: boolean forEncryption> = 1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters pubParam> = $r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator> = $r3;

        specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: void extractParams(org.spongycastle.crypto.CipherParameters)>($r2);

        return;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters, org.spongycastle.crypto.CipherParameters, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1, $r2, $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r2 := @parameter2: org.spongycastle.crypto.CipherParameters;

        $r3 := @parameter3: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.engines.IESEngine: boolean forEncryption> = $z0;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters privParam> = $r1;

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters pubParam> = $r2;

        $r4 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V> = $r4;

        specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: void extractParams(org.spongycastle.crypto.CipherParameters)>($r3);

        return;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.engines.IESEngine r0;
        byte[] $r1, $r9, $r13, $r14;
        int $i0, $i1, i2;
        java.io.ByteArrayInputStream r2;
        java.io.IOException r3;
        org.spongycastle.crypto.params.KDFParameters r4;
        boolean $z0;
        org.spongycastle.crypto.generators.EphemeralKeyPairGenerator $r5;
        org.spongycastle.crypto.EphemeralKeyPair $r6;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r7;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r8;
        org.spongycastle.crypto.BasicAgreement $r10;
        org.spongycastle.crypto.CipherParameters $r11;
        java.math.BigInteger $r12;
        org.spongycastle.crypto.params.IESParameters $r15;
        org.spongycastle.crypto.DerivationFunction $r16;
        org.spongycastle.crypto.KeyParser $r17;
        org.spongycastle.crypto.InvalidCipherTextException $r18;
        java.lang.StringBuilder $r19;
        java.lang.String $r20;
        java.lang.Throwable $r21;

        r0 := @this: org.spongycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.engines.IESEngine: boolean forEncryption>;

        if $z0 == 0 goto label06;

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>;

        if $r5 == null goto label01;

        $r5 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.generators.EphemeralKeyPairGenerator: org.spongycastle.crypto.EphemeralKeyPair generate()>();

        $r7 = virtualinvoke $r6.<org.spongycastle.crypto.EphemeralKeyPair: org.spongycastle.crypto.AsymmetricCipherKeyPair getKeyPair()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters privParam> = $r8;

        $r9 = virtualinvoke $r6.<org.spongycastle.crypto.EphemeralKeyPair: byte[] getEncodedPublicKey()>();

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V> = $r9;

     label01:
        $r10 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BasicAgreement agree>;

        $r11 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters privParam>;

        interfaceinvoke $r10.<org.spongycastle.crypto.BasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>($r11);

        $r10 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BasicAgreement agree>;

        $r11 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters pubParam>;

        $r12 = interfaceinvoke $r10.<org.spongycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)>($r11);

        $r10 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.BasicAgreement agree>;

        i2 = interfaceinvoke $r10.<org.spongycastle.crypto.BasicAgreement: int getFieldSize()>();

        $r13 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>(i2, $r12);

        $r9 = $r13;

        $r14 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        i2 = lengthof $r14;

        if i2 == 0 goto label02;

        $r9 = r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V>;

        $r9 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r9, $r13);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r13, 0);

     label02:
        r4 = new org.spongycastle.crypto.params.KDFParameters;

        $r15 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.params.IESParameters param>;

        $r13 = virtualinvoke $r15.<org.spongycastle.crypto.params.IESParameters: byte[] getDerivationV()>();

        specialinvoke r4.<org.spongycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r9, $r13);

        $r16 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r16.<org.spongycastle.crypto.DerivationFunction: void init(org.spongycastle.crypto.DerivationParameters)>(r4);

        $z0 = r0.<org.spongycastle.crypto.engines.IESEngine: boolean forEncryption>;

     label03:
        if $z0 == 0 goto label10;

     label04:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int)>($r1, $i0, $i1);

     label05:
        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r9, 0);

        return $r1;

     label06:
        $r17 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.KeyParser keyParser>;

        if $r17 == null goto label01;

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r1, $i0, $i1);

        $r17 = r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.KeyParser keyParser>;

     label07:
        $r8 = interfaceinvoke $r17.<org.spongycastle.crypto.KeyParser: org.spongycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream)>(r2);

     label08:
        r0.<org.spongycastle.crypto.engines.IESEngine: org.spongycastle.crypto.CipherParameters pubParam> = $r8;

        i2 = virtualinvoke r2.<java.io.ByteArrayInputStream: int available()>();

        i2 = $i1 - i2;

        i2 = $i0 + i2;

        $r9 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i0, i2);

        r0.<org.spongycastle.crypto.engines.IESEngine: byte[] V> = $r9;

        goto label01;

     label09:
        r3 := @caughtexception;

        $r18 = new org.spongycastle.crypto.InvalidCipherTextException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to recover ephemeral public key: ");

        $r20 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r3);

        throw $r18;

     label10:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int)>($r1, $i0, $i1);

     label11:
        goto label05;

     label12:
        $r21 := @caughtexception;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r9, 0);

        throw $r21;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }
