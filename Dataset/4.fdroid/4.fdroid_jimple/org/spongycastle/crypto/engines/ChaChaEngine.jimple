org.spongycastle.crypto.engines.ChaChaEngine extends org.spongycastle.crypto.engines.Salsa20Engine
    public void <init>()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        specialinvoke r0.<org.spongycastle.crypto.engines.Salsa20Engine: void <init>()>();

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.crypto.engines.Salsa20Engine: void <init>(int)>($i0);

        return;
    }
    public static void chachaCore(int, int[], int[])
    {
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, $i17;
        int[] $r0, $r1;
        java.lang.IllegalArgumentException $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $r1 := @parameter2: int[];

        $i1 = lengthof $r0;

        if $i1 == 16 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i1 = lengthof $r1;

        if $i1 == 16 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $i1 = $i0 % 2;

        if $i1 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of rounds must be even");

        throw $r2;

     label3:
        i2 = $r0[0];

        i3 = $r0[1];

        i4 = $r0[2];

        i5 = $r0[3];

        i6 = $r0[4];

        i7 = $r0[5];

        i8 = $r0[6];

        i9 = $r0[7];

        i10 = $r0[8];

        i11 = $r0[9];

        i12 = $r0[10];

        i13 = $r0[11];

        i14 = $r0[12];

        i15 = $r0[13];

        i16 = $r0[14];

        $i1 = $r0[15];

     label4:
        if $i0 <= 0 goto label5;

        i2 = i2 + i6;

        i14 = i14 ^ i2;

        i14 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i14, 16);

        i10 = i10 + i14;

        i6 = i6 ^ i10;

        i6 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i6, 12);

        i2 = i2 + i6;

        i14 = i14 ^ i2;

        i14 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i14, 8);

        i10 = i10 + i14;

        i6 = i6 ^ i10;

        i6 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i6, 7);

        i3 = i3 + i7;

        i15 = i15 ^ i3;

        i15 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i15, 16);

        i11 = i11 + i15;

        i7 = i7 ^ i11;

        i7 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i7, 12);

        i3 = i3 + i7;

        i15 = i15 ^ i3;

        i15 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i15, 8);

        i11 = i11 + i15;

        i7 = i7 ^ i11;

        i7 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i7, 7);

        i4 = i4 + i8;

        i16 = i16 ^ i4;

        i16 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i16, 16);

        i12 = i12 + i16;

        i8 = i8 ^ i12;

        i8 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i8, 12);

        i4 = i4 + i8;

        i16 = i16 ^ i4;

        i16 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i16, 8);

        i12 = i12 + i16;

        i8 = i8 ^ i12;

        i8 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i8, 7);

        i5 = i5 + i9;

        $i1 = $i1 ^ i5;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>($i1, 16);

        $i1 = i13 + $i17;

        i13 = i9 ^ $i1;

        i9 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i13, 12);

        i5 = i5 + i9;

        i13 = $i17 ^ i5;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i13, 8);

        i13 = $i1 + $i17;

        $i1 = i9 ^ i13;

        i9 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>($i1, 7);

        $i1 = i2 + i7;

        i2 = $i17 ^ $i1;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i2, 16);

        i12 = i12 + $i17;

        i7 = i7 ^ i12;

        i7 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i7, 12);

        i2 = $i1 + i7;

        $i1 = $i17 ^ i2;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>($i1, 8);

        $i1 = $i17;

        i12 = i12 + $i17;

        i7 = i7 ^ i12;

        i7 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i7, 7);

        i3 = i3 + i8;

        i14 = i14 ^ i3;

        i14 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i14, 16);

        i13 = i13 + i14;

        i8 = i8 ^ i13;

        i8 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i8, 12);

        i3 = i3 + i8;

        i14 = i14 ^ i3;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i14, 8);

        i14 = $i17;

        i13 = i13 + $i17;

        i8 = i8 ^ i13;

        i8 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i8, 7);

        i4 = i4 + i9;

        i15 = i15 ^ i4;

        i15 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i15, 16);

        i10 = i10 + i15;

        i9 = i9 ^ i10;

        i9 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i9, 12);

        i4 = i4 + i9;

        i15 = i15 ^ i4;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i15, 8);

        i15 = $i17;

        i10 = i10 + $i17;

        i9 = i9 ^ i10;

        i9 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i9, 7);

        i5 = i5 + i6;

        i16 = i16 ^ i5;

        i16 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i16, 16);

        i11 = i11 + i16;

        i6 = i6 ^ i11;

        i6 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i6, 12);

        i5 = i5 + i6;

        i16 = i16 ^ i5;

        $i17 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i16, 8);

        i16 = $i17;

        i11 = i11 + $i17;

        i6 = i6 ^ i11;

        i6 = staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: int rotl(int,int)>(i6, 7);

        $i0 = $i0 + -2;

        goto label4;

     label5:
        $i0 = $r0[0];

        $i0 = $i0 + i2;

        $r1[0] = $i0;

        $i0 = $r0[1];

        $i0 = $i0 + i3;

        $r1[1] = $i0;

        $i0 = $r0[2];

        $i0 = $i0 + i4;

        $r1[2] = $i0;

        $i0 = $r0[3];

        $i0 = $i0 + i5;

        $r1[3] = $i0;

        $i0 = $r0[4];

        $i0 = $i0 + i6;

        $r1[4] = $i0;

        $i0 = $r0[5];

        $i0 = $i0 + i7;

        $r1[5] = $i0;

        $i0 = $r0[6];

        $i0 = $i0 + i8;

        $r1[6] = $i0;

        $i0 = $r0[7];

        $i0 = $i0 + i9;

        $r1[7] = $i0;

        $i0 = $r0[8];

        $i0 = $i0 + i10;

        $r1[8] = $i0;

        $i0 = $r0[9];

        $i0 = $i0 + i11;

        $r1[9] = $i0;

        $i0 = $r0[10];

        $i0 = $i0 + i12;

        $r1[10] = $i0;

        $i0 = $r0[11];

        $i0 = $i0 + i13;

        $r1[11] = $i0;

        $i0 = $r0[12];

        $i0 = $i0 + i14;

        $r1[12] = $i0;

        $i0 = $r0[13];

        $i0 = $i0 + i15;

        $r1[13] = $i0;

        $i0 = $r0[14];

        $i0 = $i0 + i16;

        $r1[14] = $i0;

        $i0 = $r0[15];

        $i0 = $i0 + $i1;

        $r1[15] = $i0;

        return;
    }
    protected void advanceCounter()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[12];

        $i0 = $i0 + 1;

        $r1[12] = $i0;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[13];

        $i0 = $i0 + 1;

        $r1[13] = $i0;

     label1:
        return;
    }
    protected void advanceCounter(long)
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        long $l0, $l3;
        int i1, i2, $i4;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $l0 := @parameter0: long;

        $l3 = $l0 >>> 32;

        i1 = (int) $l3;

        i2 = (int) $l0;

        if i1 <= 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i4 = $r1[13];

        i1 = $i4 + i1;

        $r1[13] = i1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[12];

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i4 = $r1[12];

        i2 = $i4 + i2;

        $r1[12] = i2;

        if i1 == 0 goto label2;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i2 = $r1[12];

        if i2 >= i1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i2 = $r1[13];

        i2 = i2 + 1;

        $r1[13] = i2;

     label2:
        return;
    }
    protected void generateKeyStream(byte[])
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        byte[] $r1;
        int[] $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 := @parameter0: byte[];

        $i0 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int rounds>;

        $r3 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $r2 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] x>;

        staticinvoke <org.spongycastle.crypto.engines.ChaChaEngine: void chachaCore(int,int[],int[])>($i0, $r3, $r2);

        $r2 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] x>;

        staticinvoke <org.spongycastle.util.Pack: void intToLittleEndian(int[],byte[],int)>($r2, $r1, 0);

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ChaCha");

        $i0 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int rounds>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    protected long getCounter()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        int[] $r1;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[13];

        $l1 = (long) $i0;

        $l1 = $l1 << 32;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[12];

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l1 = $l1 | $l2;

        return $l1;
    }
    protected void resetCounter()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $r2 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $r2[13] = 0;

        $r1[12] = 0;

        return;
    }
    protected void retreatCounter()
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        int[] $r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[12];

        if $i0 != 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[13];

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to reduce counter past zero.");

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[12];

        $i0 = $i0 + -1;

        $r1[12] = $i0;

        if $i0 != -1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $r1[13];

        $i0 = $i0 + -1;

        $r1[13] = $i0;

     label2:
        return;
    }
    protected void retreatCounter(long)
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        long $l0, $l3;
        int i1, i2, $i4;
        int[] $r1;
        byte $b5;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $l0 := @parameter0: long;

        $l3 = $l0 >>> 32;

        i1 = (int) $l3;

        i2 = (int) $l0;

        if i1 == 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i4 = $r1[13];

        $l0 = (long) $i4;

        $l0 = $l0 & 4294967295L;

        $l3 = (long) i1;

        $l3 = $l3 & 4294967295L;

        $b5 = $l0 cmp $l3;

        if $b5 < 0 goto label2;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i4 = $r1[13];

        i1 = $i4 - i1;

        $r1[13] = i1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[12];

        $l0 = (long) i1;

        $l0 = $l0 & 4294967295L;

        $l3 = (long) i2;

        $l3 = $l3 & 4294967295L;

        $b5 = $l0 cmp $l3;

        if $b5 < 0 goto label3;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[12];

        i2 = i1 - i2;

        $r1[12] = i2;

        return;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to reduce counter past zero.");

        throw $r2;

     label3:
        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[13];

        if i1 == 0 goto label4;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[13];

        i1 = i1 + -1;

        $r1[13] = i1;

        $r1 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        i1 = $r1[12];

        i2 = i1 - i2;

        $r1[12] = i2;

        return;

     label4:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to reduce counter past zero.");

        throw $r2;
    }
    protected void setKey(byte[], byte[])
    {
        org.spongycastle.crypto.engines.ChaChaEngine r0;
        byte[] $r1, $r2, r7;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        int[] $r6;

        r0 := @this: org.spongycastle.crypto.engines.ChaChaEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        if $r1 == null goto label3;

        $i0 = lengthof $r1;

        if $i0 == 16 goto label1;

        $i0 = lengthof $r1;

        if $i0 == 32 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.ChaChaEngine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires 128 bit or 256 bit key");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, 0);

        $r6[4] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, 4);

        $r6[5] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, 8);

        $r6[6] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, 12);

        $r6[7] = $i0;

        $i0 = lengthof $r1;

        if $i0 != 32 goto label4;

        r7 = <org.spongycastle.crypto.engines.ChaChaEngine: byte[] sigma>;

        $i0 = 16;

     label2:
        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i1 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, $i0);

        $r6[8] = $i1;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i1 = $i0 + 4;

        $i1 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, $i1);

        $r6[9] = $i1;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i1 = $i0 + 8;

        $i1 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, $i1);

        $r6[10] = $i1;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = $i0 + 12;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r1, $i0);

        $r6[11] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>(r7, 0);

        $r6[0] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>(r7, 4);

        $r6[1] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>(r7, 8);

        $r6[2] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>(r7, 12);

        $r6[3] = $i0;

     label3:
        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 0);

        $r6[14] = $i0;

        $r6 = r0.<org.spongycastle.crypto.engines.ChaChaEngine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 4);

        $r6[15] = $i0;

        return;

     label4:
        r7 = <org.spongycastle.crypto.engines.ChaChaEngine: byte[] tau>;

        $i0 = 0;

        goto label2;
    }
