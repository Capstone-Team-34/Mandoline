org.spongycastle.crypto.engines.VMPCEngine extends java.lang.Object implements org.spongycastle.crypto.StreamCipher
protected byte[] P
protected byte n
protected byte s
protected byte[] workingIV
protected byte[] workingKey
    public void <init>()
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n> = 0;

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P> = null;

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = 0;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        return "VMPC";
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ParametersWithIV r3;
        org.spongycastle.crypto.params.KeyParameter r4;
        byte[] $r5, $r6;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC init parameters must include an IV");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC init parameters must include a key");

        throw $r2;

     label2:
        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV> = $r5;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        if $r5 == null goto label3;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        $i0 = lengthof $r5;

        if $i0 < 1 goto label3;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        $i0 = lengthof $r5;

        if $i0 <= 768 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC requires 1 to 768 bytes of IV");

        throw $r2;

     label4:
        $r5 = virtualinvoke r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingKey> = $r5;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingKey>;

        $r6 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.VMPCEngine: void initKey(byte[],byte[])>($r5, $r6);

        return;
    }
    protected void initKey(byte[], byte[])
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;
        byte[] $r1, $r2, $r3, $r4;
        int i0, $i2, $i4;
        byte $b1, $b3;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = 0;

        $r3 = newarray (byte)[256];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P> = $r3;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b1 = (byte) i0;

        $r3[i0] = $b1;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        if i0 >= 768 goto label4;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $r4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $b3 = $r4[$i2];

        $i2 = $b1 + $b3;

        $i4 = lengthof $r1;

        $i4 = i0 % $i4;

        $b1 = $r1[$i4];

        $i2 = $i2 + $b1;

        $i2 = $i2 & 255;

        $b1 = $r3[$i2];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = $b1;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $b1 = $r3[$i2];

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $r4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i4 = $b3 & 255;

        $b3 = $r4[$i4];

        $r3[$i2] = $b3;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i2 = $b3 & 255;

        $r3[$i2] = $b1;

        i0 = i0 + 1;

        goto label3;

     label4:
        i0 = 0;

     label5:
        if i0 >= 768 goto label6;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $b3 = $r3[$i2];

        $i2 = $b1 + $b3;

        $i4 = lengthof $r2;

        $i4 = i0 % $i4;

        $b1 = $r2[$i4];

        $i2 = $i2 + $b1;

        $i2 = $i2 & 255;

        $b1 = $r1[$i2];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = $b1;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $b1 = $r1[$i2];

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i2 = i0 & 255;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i4 = $b3 & 255;

        $b3 = $r3[$i4];

        $r1[$i2] = $b3;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i2 = $b3 & 255;

        $r1[$i2] = $b1;

        i0 = i0 + 1;

        goto label5;

     label6:
        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n> = 0;

        return;
    }
    public int processBytes(byte[], int, int, byte[], int)
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;
        byte[] $r1, $r2, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i5, $i6, $i8;
        byte b3, b4, $b7;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.OutputLengthException $r4;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i5 = $i0 + $i1;

        $i6 = lengthof $r1;

        if $i5 <= $i6 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label1:
        $i5 = $i2 + $i1;

        $i6 = lengthof $r2;

        if $i5 <= $i6 goto label2;

        $r4 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= $i1 goto label4;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $r6 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i6 = b3 & 255;

        b3 = $r6[$i6];

        $i6 = b4 + b3;

        $i6 = $i6 & 255;

        b4 = $r5[$i6];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = b4;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r6 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r7 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i6 = b4 & 255;

        b4 = $r7[$i6];

        $i6 = b4 & 255;

        b4 = $r6[$i6];

        $i6 = b4 + 1;

        $i6 = $i6 & 255;

        b4 = $r5[$i6];

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i6 = b3 & 255;

        b3 = $r5[$i6];

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b7 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i6 = $b7 & 255;

        $r6 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b7 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i8 = $b7 & 255;

        $b7 = $r6[$i8];

        $r5[$i6] = $b7;

        $r5 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b7 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i6 = $b7 & 255;

        $r5[$i6] = b3;

        b3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i6 = b3 + 1;

        $i6 = $i6 & 255;

        b3 = (byte) $i6;

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n> = b3;

        $i6 = $i5 + $i2;

        $i8 = $i5 + $i0;

        b3 = $r1[$i8];

        $i8 = b3 ^ b4;

        b4 = (byte) $i8;

        $r2[$i6] = b4;

        $i5 = $i5 + 1;

        goto label3;

     label4:
        return $i1;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingKey>;

        $r2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.VMPCEngine: void initKey(byte[],byte[])>($r1, $r2);

        return;
    }
    public byte returnByte(byte)
    {
        org.spongycastle.crypto.engines.VMPCEngine r0;
        byte $b0, b1, b2, $b4;
        byte[] $r1, $r2, $r3;
        int $i3, $i5;

        r0 := @this: org.spongycastle.crypto.engines.VMPCEngine;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $r2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i3 = b1 & 255;

        b1 = $r2[$i3];

        $i3 = b2 + b1;

        $i3 = $i3 & 255;

        b2 = $r1[$i3];

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s> = b2;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r3 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i3 = b2 & 255;

        b2 = $r3[$i3];

        $i3 = b2 & 255;

        b2 = $r2[$i3];

        $i3 = b2 + 1;

        $i3 = $i3 & 255;

        b2 = $r1[$i3];

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        b1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i3 = b1 & 255;

        b1 = $r1[$i3];

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i3 = $b4 & 255;

        $r2 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i5 = $b4 & 255;

        $b4 = $r2[$i5];

        $r1[$i3] = $b4;

        $r1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b4 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte s>;

        $i3 = $b4 & 255;

        $r1[$i3] = b1;

        b1 = r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n>;

        $i3 = b1 + 1;

        $i3 = $i3 & 255;

        b1 = (byte) $i3;

        r0.<org.spongycastle.crypto.engines.VMPCEngine: byte n> = b1;

        $i3 = $b0 ^ b2;

        $b0 = (byte) $i3;

        return $b0;
    }
