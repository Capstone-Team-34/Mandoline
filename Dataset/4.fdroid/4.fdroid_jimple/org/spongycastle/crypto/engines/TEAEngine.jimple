org.spongycastle.crypto.engines.TEAEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int block_size
private static final int d_sum
private static final int delta
private static final int rounds
private int _a
private int _b
private int _c
private int _d
private boolean _forEncryption
private boolean _initialised
    public void <init>()
    {
        org.spongycastle.crypto.engines.TEAEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.TEAEngine: boolean _initialised> = 0;

        return;
    }
    private int bytesToInt(byte[], int)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        byte[] $r1;
        int i0, i1, $i3;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        $b2 = $r1[i0];

        $i3 = $b2 << 24;

        i0 = i1 + 1;

        $b2 = $r1[i1];

        i1 = $b2 & 255;

        i1 = i1 << 16;

        i1 = $i3 | i1;

        $i3 = i0 + 1;

        $b2 = $r1[i0];

        i0 = $b2 & 255;

        i0 = i0 << 8;

        i0 = i1 | i0;

        $b2 = $r1[$i3];

        $i3 = $b2 & 255;

        i0 = i0 | $i3;

        return i0;
    }
    private int decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, $i0);

        $i0 = $i0 + 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, $i0);

        i3 = -957401312;

        i4 = 0;

     label1:
        if i4 == 32 goto label2;

        $i5 = $i2 << 4;

        $i6 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _c>;

        $i5 = $i5 + $i6;

        $i6 = $i2 + i3;

        $i5 = $i5 ^ $i6;

        $i6 = $i2 >>> 5;

        $i7 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _d>;

        $i6 = $i6 + $i7;

        $i5 = $i5 ^ $i6;

        $i0 = $i0 - $i5;

        $i5 = $i0 << 4;

        $i6 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _a>;

        $i5 = $i5 + $i6;

        $i6 = $i0 + i3;

        $i5 = $i5 ^ $i6;

        $i6 = $i0 >>> 5;

        $i7 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _b>;

        $i6 = $i6 + $i7;

        $i5 = $i5 ^ $i6;

        $i2 = $i2 - $i5;

        i3 = i3 + 1640531527;

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: void unpackInt(int,byte[],int)>($i2, $r2, $i1);

        $i1 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: void unpackInt(int,byte[],int)>($i0, $r2, $i1);

        return 8;
    }
    private int encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, $i0);

        $i0 = $i0 + 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, $i0);

        i3 = 0;

        i4 = 0;

     label1:
        if i4 == 32 goto label2;

        i3 = i3 - 1640531527;

        $i5 = $i0 << 4;

        $i6 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _a>;

        $i5 = $i5 + $i6;

        $i6 = $i0 + i3;

        $i5 = $i5 ^ $i6;

        $i6 = $i0 >>> 5;

        $i7 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _b>;

        $i6 = $i6 + $i7;

        $i5 = $i5 ^ $i6;

        $i2 = $i2 + $i5;

        $i5 = $i2 << 4;

        $i6 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _c>;

        $i5 = $i5 + $i6;

        $i6 = $i2 + i3;

        $i5 = $i5 ^ $i6;

        $i6 = $i2 >>> 5;

        $i7 = r0.<org.spongycastle.crypto.engines.TEAEngine: int _d>;

        $i6 = $i6 + $i7;

        $i5 = $i5 ^ $i6;

        $i0 = $i0 + $i5;

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: void unpackInt(int,byte[],int)>($i2, $r2, $i1);

        $i1 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: void unpackInt(int,byte[],int)>($i0, $r2, $i1);

        return 8;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        byte[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        if $i0 == 16 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key size must be 128 bits.");

        throw $r2;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, 0);

        r0.<org.spongycastle.crypto.engines.TEAEngine: int _a> = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, 4);

        r0.<org.spongycastle.crypto.engines.TEAEngine: int _b> = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, 8);

        r0.<org.spongycastle.crypto.engines.TEAEngine: int _c> = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int bytesToInt(byte[],int)>($r1, 12);

        r0.<org.spongycastle.crypto.engines.TEAEngine: int _d> = $i0;

        return;
    }
    private void unpackInt(int, byte[], int)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        int $i0, i1, i2, $i3;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $i3 = $i0 >>> 24;

        $b4 = (byte) $i3;

        $r1[i1] = $b4;

        i1 = i2 + 1;

        $i3 = $i0 >>> 16;

        $b4 = (byte) $i3;

        $r1[i2] = $b4;

        i2 = i1 + 1;

        $i3 = $i0 >>> 8;

        $b4 = (byte) $i3;

        $r1[i1] = $b4;

        $b4 = (byte) $i0;

        $r1[i2] = $b4;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.TEAEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        return "TEA";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.TEAEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        return 8;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.params.KeyParameter r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to TEA init - ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.engines.TEAEngine: boolean _forEncryption> = $z0;

        r0.<org.spongycastle.crypto.engines.TEAEngine: boolean _initialised> = 1;

        r6 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: void setKey(byte[])>($r7);

        return;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.TEAEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.TEAEngine: boolean _initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i2 = $i0 + 8;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i2 = $i1 + 8;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.TEAEngine: boolean _forEncryption>;

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label4:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.TEAEngine: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.TEAEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.TEAEngine;

        return;
    }
