org.spongycastle.crypto.engines.CamelliaLightEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int BLOCK_SIZE
private static final int MASK8
private static final byte[] SBOX1
private static final int[] SIGMA
private boolean _keyis128
private boolean initialized
private int[] ke
private int[] kw
private int[] state
private int[] subkey
    static void <clinit>()
    {
        int[] $r0;
        byte[] $r1;

        $r0 = newarray (int)[12];

        $r0[0] = -1600231809;

        $r0[1] = 1003262091;

        $r0[2] = -1233459112;

        $r0[3] = 1286239154;

        $r0[4] = -957401297;

        $r0[5] = -380665154;

        $r0[6] = 1426019237;

        $r0[7] = -237801700;

        $r0[8] = 283453434;

        $r0[9] = -563598051;

        $r0[10] = -1336506174;

        $r0[11] = -1276722691;

        <org.spongycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA> = $r0;

        $r1 = newarray (byte)[256];

        $r1[0] = 112;

        $r1[1] = -126;

        $r1[2] = 44;

        $r1[3] = -20;

        $r1[4] = -77;

        $r1[5] = 39;

        $r1[6] = -64;

        $r1[7] = -27;

        $r1[8] = -28;

        $r1[9] = -123;

        $r1[10] = 87;

        $r1[11] = 53;

        $r1[12] = -22;

        $r1[13] = 12;

        $r1[14] = -82;

        $r1[15] = 65;

        $r1[16] = 35;

        $r1[17] = -17;

        $r1[18] = 107;

        $r1[19] = -109;

        $r1[20] = 69;

        $r1[21] = 25;

        $r1[22] = -91;

        $r1[23] = 33;

        $r1[24] = -19;

        $r1[25] = 14;

        $r1[26] = 79;

        $r1[27] = 78;

        $r1[28] = 29;

        $r1[29] = 101;

        $r1[30] = -110;

        $r1[31] = -67;

        $r1[32] = -122;

        $r1[33] = -72;

        $r1[34] = -81;

        $r1[35] = -113;

        $r1[36] = 124;

        $r1[37] = -21;

        $r1[38] = 31;

        $r1[39] = -50;

        $r1[40] = 62;

        $r1[41] = 48;

        $r1[42] = -36;

        $r1[43] = 95;

        $r1[44] = 94;

        $r1[45] = -59;

        $r1[46] = 11;

        $r1[47] = 26;

        $r1[48] = -90;

        $r1[49] = -31;

        $r1[50] = 57;

        $r1[51] = -54;

        $r1[52] = -43;

        $r1[53] = 71;

        $r1[54] = 93;

        $r1[55] = 61;

        $r1[56] = -39;

        $r1[57] = 1;

        $r1[58] = 90;

        $r1[59] = -42;

        $r1[60] = 81;

        $r1[61] = 86;

        $r1[62] = 108;

        $r1[63] = 77;

        $r1[64] = -117;

        $r1[65] = 13;

        $r1[66] = -102;

        $r1[67] = 102;

        $r1[68] = -5;

        $r1[69] = -52;

        $r1[70] = -80;

        $r1[71] = 45;

        $r1[72] = 116;

        $r1[73] = 18;

        $r1[74] = 43;

        $r1[75] = 32;

        $r1[76] = -16;

        $r1[77] = -79;

        $r1[78] = -124;

        $r1[79] = -103;

        $r1[80] = -33;

        $r1[81] = 76;

        $r1[82] = -53;

        $r1[83] = -62;

        $r1[84] = 52;

        $r1[85] = 126;

        $r1[86] = 118;

        $r1[87] = 5;

        $r1[88] = 109;

        $r1[89] = -73;

        $r1[90] = -87;

        $r1[91] = 49;

        $r1[92] = -47;

        $r1[93] = 23;

        $r1[94] = 4;

        $r1[95] = -41;

        $r1[96] = 20;

        $r1[97] = 88;

        $r1[98] = 58;

        $r1[99] = 97;

        $r1[100] = -34;

        $r1[101] = 27;

        $r1[102] = 17;

        $r1[103] = 28;

        $r1[104] = 50;

        $r1[105] = 15;

        $r1[106] = -100;

        $r1[107] = 22;

        $r1[108] = 83;

        $r1[109] = 24;

        $r1[110] = -14;

        $r1[111] = 34;

        $r1[112] = -2;

        $r1[113] = 68;

        $r1[114] = -49;

        $r1[115] = -78;

        $r1[116] = -61;

        $r1[117] = -75;

        $r1[118] = 122;

        $r1[119] = -111;

        $r1[120] = 36;

        $r1[121] = 8;

        $r1[122] = -24;

        $r1[123] = -88;

        $r1[124] = 96;

        $r1[125] = -4;

        $r1[126] = 105;

        $r1[127] = 80;

        $r1[128] = -86;

        $r1[129] = -48;

        $r1[130] = -96;

        $r1[131] = 125;

        $r1[132] = -95;

        $r1[133] = -119;

        $r1[134] = 98;

        $r1[135] = -105;

        $r1[136] = 84;

        $r1[137] = 91;

        $r1[138] = 30;

        $r1[139] = -107;

        $r1[140] = -32;

        $r1[141] = -1;

        $r1[142] = 100;

        $r1[143] = -46;

        $r1[144] = 16;

        $r1[145] = -60;

        $r1[146] = 0;

        $r1[147] = 72;

        $r1[148] = -93;

        $r1[149] = -9;

        $r1[150] = 117;

        $r1[151] = -37;

        $r1[152] = -118;

        $r1[153] = 3;

        $r1[154] = -26;

        $r1[155] = -38;

        $r1[156] = 9;

        $r1[157] = 63;

        $r1[158] = -35;

        $r1[159] = -108;

        $r1[160] = -121;

        $r1[161] = 92;

        $r1[162] = -125;

        $r1[163] = 2;

        $r1[164] = -51;

        $r1[165] = 74;

        $r1[166] = -112;

        $r1[167] = 51;

        $r1[168] = 115;

        $r1[169] = 103;

        $r1[170] = -10;

        $r1[171] = -13;

        $r1[172] = -99;

        $r1[173] = 127;

        $r1[174] = -65;

        $r1[175] = -30;

        $r1[176] = 82;

        $r1[177] = -101;

        $r1[178] = -40;

        $r1[179] = 38;

        $r1[180] = -56;

        $r1[181] = 55;

        $r1[182] = -58;

        $r1[183] = 59;

        $r1[184] = -127;

        $r1[185] = -106;

        $r1[186] = 111;

        $r1[187] = 75;

        $r1[188] = 19;

        $r1[189] = -66;

        $r1[190] = 99;

        $r1[191] = 46;

        $r1[192] = -23;

        $r1[193] = 121;

        $r1[194] = -89;

        $r1[195] = -116;

        $r1[196] = -97;

        $r1[197] = 110;

        $r1[198] = -68;

        $r1[199] = -114;

        $r1[200] = 41;

        $r1[201] = -11;

        $r1[202] = -7;

        $r1[203] = -74;

        $r1[204] = 47;

        $r1[205] = -3;

        $r1[206] = -76;

        $r1[207] = 89;

        $r1[208] = 120;

        $r1[209] = -104;

        $r1[210] = 6;

        $r1[211] = 106;

        $r1[212] = -25;

        $r1[213] = 70;

        $r1[214] = 113;

        $r1[215] = -70;

        $r1[216] = -44;

        $r1[217] = 37;

        $r1[218] = -85;

        $r1[219] = 66;

        $r1[220] = -120;

        $r1[221] = -94;

        $r1[222] = -115;

        $r1[223] = -6;

        $r1[224] = 114;

        $r1[225] = 7;

        $r1[226] = -71;

        $r1[227] = 85;

        $r1[228] = -8;

        $r1[229] = -18;

        $r1[230] = -84;

        $r1[231] = 10;

        $r1[232] = 54;

        $r1[233] = 73;

        $r1[234] = 42;

        $r1[235] = 104;

        $r1[236] = 60;

        $r1[237] = 56;

        $r1[238] = -15;

        $r1[239] = -92;

        $r1[240] = 64;

        $r1[241] = 40;

        $r1[242] = -45;

        $r1[243] = 123;

        $r1[244] = -69;

        $r1[245] = -55;

        $r1[246] = 67;

        $r1[247] = -63;

        $r1[248] = 21;

        $r1[249] = -29;

        $r1[250] = -83;

        $r1[251] = -12;

        $r1[252] = 119;

        $r1[253] = -57;

        $r1[254] = -128;

        $r1[255] = -98;

        <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1> = $r1;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[96];

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey> = $r1;

        $r1 = newarray (int)[8];

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw> = $r1;

        $r1 = newarray (int)[12];

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke> = $r1;

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state> = $r1;

        return;
    }
    private int bytes2int(byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte[] $r1;
        int $i0, i1, i2, $i3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= 4 goto label2;

        i1 = i1 << 8;

        $i3 = i2 + $i0;

        $b4 = $r1[$i3];

        $i3 = $b4 & 255;

        i1 = i1 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }
    private void camelliaF2(int[], int[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        byte[] $r3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = $r1[0];

        $i2 = $r2[$i0];

        $i1 = $i1 ^ $i2;

        $i2 = $i1 & 255;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i2);

        $i3 = $i1 >>> 8;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i3);

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i1 >>> 16;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i3);

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 255;

        $b4 = $r3[$i1];

        $i1 = $b4 & 255;

        $i1 = $i1 << 24;

        $i1 = $i2 | $i1;

        $i2 = $r1[1];

        $i3 = $i0 + 1;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i3 = $i2 & 255;

        $b4 = $r3[$i3];

        $i3 = $b4 & 255;

        $i5 = $i2 >>> 8;

        $i5 = $i5 & 255;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i5);

        $i5 = $i5 << 8;

        $i3 = $i3 | $i5;

        $i5 = $i2 >>> 16;

        $i5 = $i5 & 255;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i5);

        $i5 = $i5 << 16;

        $i3 = $i3 | $i5;

        $i2 = $i2 >>> 24;

        $i2 = $i2 & 255;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i2);

        $i2 = $i2 << 24;

        $i2 = $i3 | $i2;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i2, 8);

        $i1 = $i1 ^ $i2;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i2, 8);

        $i2 = $i2 ^ $i1;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int rightRotate(int,int)>($i1, 8);

        $i1 = $i1 ^ $i2;

        $i3 = $r1[2];

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i2, 16);

        $i2 = $i2 ^ $i1;

        $i2 = $i3 ^ $i2;

        $r1[2] = $i2;

        $i2 = $r1[3];

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i1, 8);

        $i1 = $i2 ^ $i1;

        $r1[3] = $i1;

        $i1 = $r1[2];

        $i2 = $i0 + 2;

        $i2 = $r2[$i2];

        $i1 = $i1 ^ $i2;

        $i2 = $i1 & 255;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i2);

        $i3 = $i1 >>> 8;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i3);

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i1 >>> 16;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i3);

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $r3 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 255;

        $b4 = $r3[$i1];

        $i1 = $b4 & 255;

        $i1 = $i1 << 24;

        $i1 = $i2 | $i1;

        $i2 = $r1[3];

        $i0 = $i0 + 3;

        $i0 = $r2[$i0];

        $i0 = $i2 ^ $i0;

        $r3 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $i2 = $i0 & 255;

        $b4 = $r3[$i2];

        $i2 = $b4 & 255;

        $i3 = $i0 >>> 8;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox4(int)>($i3);

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i0 >>> 16;

        $i3 = $i3 & 255;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox3(int)>($i3);

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i0 = $i0 >>> 24;

        $i0 = $i0 & 255;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int sbox2(int)>($i0);

        $i0 = $i0 << 24;

        $i0 = $i2 | $i0;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i0, 8);

        $i0 = $i1 ^ $i2;

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i2, 8);

        $i1 = $i1 ^ $i0;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int rightRotate(int,int)>($i0, 8);

        $i0 = $i0 ^ $i1;

        $i2 = $r1[0];

        $i1 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i1, 16);

        $i1 = $i1 ^ $i0;

        $i1 = $i2 ^ $i1;

        $r1[0] = $i1;

        $i1 = $r1[1];

        $i0 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i0, 8);

        $i0 = $i1 ^ $i0;

        $r1[1] = $i0;

        return;
    }
    private void camelliaFLs(int[], int[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = $r1[1];

        $i2 = $r1[0];

        $i3 = $r2[$i0];

        $i2 = $i2 & $i3;

        $i2 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i2, 1);

        $i1 = $i1 ^ $i2;

        $r1[1] = $i1;

        $i1 = $r1[0];

        $i2 = $i0 + 1;

        $i2 = $r2[$i2];

        $i3 = $r1[1];

        $i2 = $i2 | $i3;

        $i1 = $i1 ^ $i2;

        $r1[0] = $i1;

        $i1 = $r1[2];

        $i2 = $i0 + 3;

        $i2 = $r2[$i2];

        $i3 = $r1[3];

        $i2 = $i2 | $i3;

        $i1 = $i1 ^ $i2;

        $r1[2] = $i1;

        $i1 = $r1[3];

        $i0 = $i0 + 2;

        $i0 = $r2[$i0];

        $i2 = $r1[2];

        $i0 = $i0 & $i2;

        $i0 = staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: int leftRotate(int,int)>($i0, 1);

        $i0 = $i1 ^ $i0;

        $r1[3] = $i0;

        return;
    }
    private static void decroldq(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i3 = $i2 + 2;

        $i4 = $r0[$i1];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $r0[$i1];

        $i0 = 32 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 3;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $r1[$i2];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 1;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private static void decroldqo32(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i3 = $i2 + 2;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $r0[$i1];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $r0[$i1];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i0 = 64 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 3;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $r1[$i2];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 1;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private void int2bytes(int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte[] $r1;
        int $i0, $i2, i3, $i4;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $i2 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $i4 = 3 - i3;

        $i4 = $i4 + $i0;

        $b1 = (byte) $i2;

        $r1[$i4] = $b1;

        $i2 = $i2 >>> 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    private byte lRot8(byte, int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte $b0;
        int $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $i2 = $b0 << $i1;

        $i3 = $b0 & 255;

        $i1 = 8 - $i1;

        $i1 = $i3 >>> $i1;

        $i1 = $i2 | $i1;

        $b0 = (byte) $i1;

        return $b0;
    }
    private static int leftRotate(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 + $i0;

        return $i0;
    }
    private int processBlock128(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i2 = i3 * 4;

        $i2 = $i2 + $i0;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, $i2);

        $r3[i3] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i2 = $r3[i3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i4 = $r4[i3];

        $i2 = $i2 ^ $i4;

        $r3[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 12);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 16);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 20);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 24);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 28);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 32);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[2];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[4];

        $i0 = $i0 ^ i3;

        $r3[2] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[5];

        $i0 = $i0 ^ i3;

        $r3[3] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[0];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[6];

        $i0 = $i0 ^ i3;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[1];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[7];

        $i0 = $i0 ^ i3;

        $r3[1] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[2];

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[3];

        i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[0];

        i3 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[1];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private int processBlock192or256(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i2 = i3 * 4;

        $i2 = $i2 + $i0;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, $i2);

        $r3[i3] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i2 = $r3[i3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i4 = $r4[i3];

        $i2 = $i2 ^ $i4;

        $r3[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 0);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 12);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 16);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 20);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 4);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 24);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 28);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 32);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaFLs(int[],int[],int)>($r3, $r4, 8);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 36);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 40);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>($r3, $r4, 44);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[2];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[4];

        $i0 = $i0 ^ i3;

        $r3[2] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[3];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[5];

        $i0 = $i0 ^ i3;

        $r3[3] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[0];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[6];

        $i0 = $i0 ^ i3;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[1];

        $r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        i3 = $r4[7];

        $i0 = $i0 ^ i3;

        $r3[1] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[2];

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[3];

        i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[0];

        i3 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, i3);

        $r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] state>;

        $i0 = $r3[1];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void int2bytes(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private static int rightRotate(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 >>> $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 << $i1;

        $i0 = $i2 + $i0;

        return $i0;
    }
    private static void roldq(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i4 = $r0[$i1];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 2;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 32 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i4 = $i4 << $i0;

        $i5 = $r0[$i1];

        $i0 = 32 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $r1[$i2];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 1;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 3;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private static void roldqo32(int, int[], int, int[], int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r1 := @parameter3: int[];

        $i2 := @parameter4: int;

        $i4 = $i1 + 1;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 2;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i2] = $i4;

        $i3 = $i2 + 1;

        $i4 = $i1 + 2;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 3;

        $i5 = $r0[$i5];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 2;

        $i4 = $i1 + 3;

        $i4 = $r0[$i4];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $r0[$i1];

        $i6 = 64 - $i0;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 | $i5;

        $r1[$i3] = $i4;

        $i3 = $i2 + 3;

        $i4 = $r0[$i1];

        $i5 = $i0 + -32;

        $i4 = $i4 << $i5;

        $i5 = $i1 + 1;

        $i5 = $r0[$i5];

        $i0 = 64 - $i0;

        $i0 = $i5 >>> $i0;

        $i0 = $i4 | $i0;

        $r1[$i3] = $i0;

        $i3 = $r1[$i2];

        $r0[$i1] = $i3;

        $i0 = $i1 + 1;

        $i3 = $i2 + 1;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 2;

        $i3 = $i2 + 2;

        $i3 = $r1[$i3];

        $r0[$i0] = $i3;

        $i0 = $i1 + 3;

        $i1 = $i2 + 3;

        $i1 = $r1[$i1];

        $r0[$i0] = $i1;

        return;
    }
    private int sbox2(int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int $i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $i0 := @parameter0: int;

        $r1 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = $r1[$i0];

        $b1 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 1);

        $i0 = $b1 & 255;

        return $i0;
    }
    private int sbox3(int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int $i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $i0 := @parameter0: int;

        $r1 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = $r1[$i0];

        $b1 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 7);

        $i0 = $b1 & 255;

        return $i0;
    }
    private int sbox4(int)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        int $i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $i0 := @parameter0: int;

        $r1 = <org.spongycastle.crypto.engines.CamelliaLightEngine: byte[] SBOX1>;

        $b1 = (byte) $i0;

        $b1 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: byte lRot8(byte,int)>($b1, 1);

        $i0 = $b1 & 255;

        $b1 = $r1[$i0];

        $i0 = $b1 & 255;

        return $i0;
    }
    private void setKey(boolean, byte[])
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        boolean $z0, $z1;
        byte[] $r1;
        int[] r2, r3, r4, r5, $r7;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        r2 = newarray (int)[8];

        r3 = newarray (int)[4];

        r4 = newarray (int)[4];

        r5 = newarray (int)[4];

        $i0 = lengthof $r1;

        lookupswitch($i0)
        {
            case 16: goto label02;
            case 24: goto label05;
            case 32: goto label06;
            default: goto label01;
        };

     label01:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key sizes are only 16/24/32 bytes.");

        throw $r6;

     label02:
        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        r2[7] = 0;

        r2[6] = 0;

        r2[5] = 0;

        r2[4] = 0;

     label03:
        $i0 = 0;

     label04:
        if $i0 >= 4 goto label07;

        $i1 = r2[$i0];

        $i2 = $i0 + 4;

        $i2 = r2[$i2];

        $i1 = $i1 ^ $i2;

        r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 16);

        r2[4] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 20);

        r2[5] = $i0;

        $i0 = r2[4];

        $i0 = $i0 ^ -1;

        r2[6] = $i0;

        $i0 = r2[5];

        $i0 = $i0 ^ -1;

        r2[7] = $i0;

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 0;

        goto label03;

     label06:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 0);

        r2[0] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 4);

        r2[1] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 8);

        r2[2] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 12);

        r2[3] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 16);

        r2[4] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 20);

        r2[5] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 24);

        r2[6] = $i0;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int bytes2int(byte[],int)>($r1, 28);

        r2[7] = $i0;

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128> = 0;

        goto label03;

     label07:
        $r7 = <org.spongycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r3, $r7, 0);

        $i0 = 0;

     label08:
        if $i0 >= 4 goto label09;

        $i1 = r3[$i0];

        $i2 = r2[$i0];

        $i1 = $i1 ^ $i2;

        r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label08;

     label09:
        $r7 = <org.spongycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r3, $r7, 4);

        $z1 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128>;

        if $z1 == 0 goto label11;

        if $z0 == 0 goto label10;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[0];

        r4[0] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[1];

        r4[1] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[2];

        r4[2] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[3];

        r4[3] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r2, 0, r4, 12);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[2];

        r4[18] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[3];

        r4[19] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 24);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r4, 32);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[0];

        r4[0] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[1];

        r4[1] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[2];

        r4[2] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[3];

        r4[3] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 8);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 0);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[0];

        r4[16] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[1];

        r4[17] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r4, 20);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r3, 0, r4, 28);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r3, 0, r4, 4);

        return;

     label10:
        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[0];

        r4[4] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[1];

        r4[5] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[2];

        r4[6] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[3];

        r4[7] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r4, 28);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 0, r4, 20);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[0];

        r4[16] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[1];

        r4[17] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 8);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r4, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[0];

        r4[34] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[1];

        r4[35] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[2];

        r4[32] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r3[3];

        r4[33] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 24);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 4);

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r5, 0);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[2];

        r4[18] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r5[3];

        r4[19] = $i0;

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r4, 12);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r3, 0, r4, 4);

        r4 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r3, 0, r4, 0);

        return;

     label11:
        $i0 = 0;

     label12:
        if $i0 >= 4 goto label13;

        $i1 = r3[$i0];

        $i2 = $i0 + 4;

        $i2 = r2[$i2];

        $i1 = $i1 ^ $i2;

        r4[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label12;

     label13:
        r5 = <org.spongycastle.crypto.engines.CamelliaLightEngine: int[] SIGMA>;

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void camelliaF2(int[],int[],int)>(r4, r5, 8);

        if $z0 == 0 goto label14;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[0];

        r5[0] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[1];

        r5[1] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[2];

        r5[2] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[3];

        r5[3] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(45, r2, 0, r5, 16);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r2, 0, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(17, r2, 0, r5, 32);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r2, 0, r5, 44);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r2, 4, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r2, 4, r5, 0);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r2, 4, r5, 24);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(34, r2, 4, r5, 36);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(15, r3, 0, r2, 8);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r3, 0, r2, 20);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[1];

        r2[8] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[2];

        r2[9] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[3];

        r2[10] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[0];

        r2[11] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(49, r3, 0, r2, 40);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[0];

        r3[0] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[1];

        r3[1] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[2];

        r3[2] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[3];

        r3[3] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r4, 0, r3, 12);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldq(int,int[],int,int[],int)>(30, r4, 0, r3, 28);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(51, r4, 0, r3, 4);

        return;

     label14:
        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[0];

        r5[4] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[1];

        r5[5] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[2];

        r5[6] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        $i0 = r2[3];

        r5[7] = $i0;

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(45, r2, 0, r5, 28);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 0, r5, 4);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(17, r2, 0, r5, 12);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r2, 0, r5, 0);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 4, r5, 40);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r2, 4, r5, 8);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r2, 4, r5, 20);

        r5 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(34, r2, 4, r5, 8);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(15, r3, 0, r2, 36);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r3, 0, r2, 24);

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[1];

        r2[2] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[2];

        r2[3] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[3];

        r2[0] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] ke>;

        $i0 = r3[0];

        r2[1] = $i0;

        r2 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldqo32(int,int[],int,int[],int)>(49, r3, 0, r2, 4);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[0];

        r3[46] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[1];

        r3[47] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[2];

        r3[44] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        $i0 = r4[3];

        r3[45] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r4, 0, r3, 32);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] subkey>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void decroldq(int,int[],int,int[],int)>(30, r4, 0, r3, 16);

        r3 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int[] kw>;

        staticinvoke <org.spongycastle.crypto.engines.CamelliaLightEngine: void roldqo32(int,int[],int,int[],int)>(51, r4, 0, r3, 0);

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        return "Camellia";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        boolean $z0, $z1;
        byte[] $r1;
        org.spongycastle.crypto.CipherParameters $r2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.params.KeyParameter $r4;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $z0 := @parameter0: boolean;

        $r2 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r2 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only simple KeyParameter expected.");

        throw $r3;

     label1:
        $r4 = (org.spongycastle.crypto.params.KeyParameter) $r2;

        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: void setKey(boolean,byte[])>($z0, $r1);

        r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean initialized> = 1;

        return;
    }
    public int processBlock(byte[], int, byte[], int) throws java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.OutputLengthException $r5;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean initialized>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camellia is not initialized");

        throw $r3;

     label1:
        $i2 = $i0 + 16;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i2 = $i1 + 16;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r5 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r5;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: boolean _keyis128>;

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int processBlock128(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label4:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.CamelliaLightEngine: int processBlock192or256(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.CamelliaLightEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.CamelliaLightEngine;

        return;
    }
