org.spongycastle.crypto.engines.RSABlindedEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private static final java.math.BigInteger ONE
private org.spongycastle.crypto.engines.RSACoreEngine core
private org.spongycastle.crypto.params.RSAKeyParameters key
private java.security.SecureRandom random
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.RSABlindedEngine r0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core> = $r1;

        return;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.RSABlindedEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindedEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.RSABlindedEngine r0;
        int $i0;
        org.spongycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindedEngine;

        $r1 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RSABlindedEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.engines.RSACoreEngine $r2;
        org.spongycastle.crypto.params.ParametersWithRandom r3;
        org.spongycastle.crypto.params.RSAKeyParameters $r4;
        java.security.SecureRandom $r5;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindedEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $r2 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        virtualinvoke $r2.<org.spongycastle.crypto.engines.RSACoreEngine: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r1);

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r3 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.RSAKeyParameters) r1;

        r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.params.RSAKeyParameters key> = $r4;

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random> = $r5;

        return;

     label1:
        $r4 = (org.spongycastle.crypto.params.RSAKeyParameters) r1;

        r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.params.RSAKeyParameters key> = $r4;

        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random> = $r5;

        return;
    }
    public byte[] processBlock(byte[], int, int)
    {
        org.spongycastle.crypto.engines.RSABlindedEngine r0;
        byte[] $r1;
        int $i0, $i1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.RSAKeyParameters $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.engines.RSACoreEngine $r5;
        java.math.BigInteger $r6, $r8, $r9, $r10, $r11;
        boolean $z0;
        org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters r7;

        r0 := @this: org.spongycastle.crypto.engines.RSABlindedEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA engine not initialised");

        throw $r4;

     label1:
        $r5 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>($r1, $i0, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r3 instanceof org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label4;

        $r3 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.params.RSAKeyParameters key>;

        r7 = (org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters) $r3;

        $r8 = virtualinvoke r7.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getPublicExponent()>();

        if $r8 == null goto label2;

        $r9 = virtualinvoke r7.<org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getModulus()>();

        $r10 = <org.spongycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE>;

        $r11 = <org.spongycastle.crypto.engines.RSABlindedEngine: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r2 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: java.security.SecureRandom random>;

        $r10 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r10, $r11, $r2);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, $r9);

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r5 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r11 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r11);

        $r10 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r9);

        $r10 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r10 = $r11;

        $r8 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, $r9);

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA engine faulty decryption/signing detected");

        throw $r4;

     label2:
        $r5 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r10 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r6);

     label3:
        $r5 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r1 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>($r10);

        return $r1;

     label4:
        $r5 = r0.<org.spongycastle.crypto.engines.RSABlindedEngine: org.spongycastle.crypto.engines.RSACoreEngine core>;

        $r10 = virtualinvoke $r5.<org.spongycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r6);

        goto label3;
    }
