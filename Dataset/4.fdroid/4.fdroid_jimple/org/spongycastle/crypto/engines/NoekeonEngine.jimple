org.spongycastle.crypto.engines.NoekeonEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int genericSize
private static final int[] nullVector
private static final int[] roundConstants
private boolean _forEncryption
private boolean _initialised
private int[] decryptKeys
private int[] state
private int[] subKeys
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[4];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        <org.spongycastle.crypto.engines.NoekeonEngine: int[] nullVector> = $r0;

        $r0 = newarray (int)[17];

        $r0[0] = 128;

        $r0[1] = 27;

        $r0[2] = 54;

        $r0[3] = 108;

        $r0[4] = 216;

        $r0[5] = 171;

        $r0[6] = 77;

        $r0[7] = 154;

        $r0[8] = 47;

        $r0[9] = 94;

        $r0[10] = 188;

        $r0[11] = 99;

        $r0[12] = 198;

        $r0[13] = 151;

        $r0[14] = 53;

        $r0[15] = 106;

        $r0[16] = 212;

        <org.spongycastle.crypto.engines.NoekeonEngine: int[] roundConstants> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state> = $r1;

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys> = $r1;

        $r1 = newarray (int)[4];

        r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] decryptKeys> = $r1;

        r0.<org.spongycastle.crypto.engines.NoekeonEngine: boolean _initialised> = 0;

        return;
    }
    private int bytesToIntBig(byte[], int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        byte[] $r1;
        int i0, i1, $i3;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        $b2 = $r1[i0];

        $i3 = $b2 << 24;

        i0 = i1 + 1;

        $b2 = $r1[i1];

        i1 = $b2 & 255;

        i1 = i1 << 16;

        i1 = $i3 | i1;

        $i3 = i0 + 1;

        $b2 = $r1[i0];

        i0 = $b2 & 255;

        i0 = i0 << 8;

        i0 = i1 | i0;

        $b2 = $r1[$i3];

        $i3 = $b2 & 255;

        i0 = i0 | $i3;

        return i0;
    }
    private int decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3, $r4, $r5;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i0);

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $i0 + 4;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i2);

        $r3[1] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $i0 + 8;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i2);

        $r3[2] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $i0 + 12;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i0);

        $r3[3] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $r4 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        $r5 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        $r4 = <org.spongycastle.crypto.engines.NoekeonEngine: int[] nullVector>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r3, $r4);

        $i0 = 16;

     label1:
        if $i0 <= 0 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r3, $r4);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $r3[0];

        $r4 = <org.spongycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i3 = $r4[$i0];

        $i2 = $i2 ^ $i3;

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void pi1(int[])>($r3);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void gamma(int[])>($r3);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void pi2(int[])>($r3);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] decryptKeys>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r3, $r4);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $r3[0];

        $r4 = <org.spongycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i0 = $r4[$i0];

        $i0 = $i2 ^ $i0;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[0];

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[1];

        $i2 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[2];

        $i2 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[3];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private int encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i0);

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $i0 + 4;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i2);

        $r3[1] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $i0 + 8;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i2);

        $r3[2] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $i0 + 12;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, $i0);

        $r3[3] = $i0;

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $r3[0];

        $r4 = <org.spongycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i3 = $r4[$i0];

        $i2 = $i2 ^ $i3;

        $r3[0] = $i2;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r3, $r4);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void pi1(int[])>($r3);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void gamma(int[])>($r3);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void pi2(int[])>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i2 = $r3[0];

        $r4 = <org.spongycastle.crypto.engines.NoekeonEngine: int[] roundConstants>;

        $i0 = $r4[$i0];

        $i0 = $i2 ^ $i0;

        $r3[0] = $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $r4 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void theta(int[],int[])>($r3, $r4);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[0];

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[1];

        $i2 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[2];

        $i2 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i2);

        $r3 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] state>;

        $i0 = $r3[3];

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void intToBytesBig(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private void gamma(int[])
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int[] $r1;
        int i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: int[];

        i0 = $r1[1];

        $i1 = $r1[3];

        $i1 = $i1 ^ -1;

        $i2 = $r1[2];

        $i2 = $i2 ^ -1;

        $i1 = $i1 & $i2;

        i0 = i0 ^ $i1;

        $r1[1] = i0;

        i0 = $r1[0];

        $i1 = $r1[2];

        $i2 = $r1[1];

        $i1 = $i1 & $i2;

        i0 = i0 ^ $i1;

        $r1[0] = i0;

        i0 = $r1[3];

        $i1 = $r1[0];

        $r1[3] = $i1;

        $r1[0] = i0;

        i0 = $r1[2];

        $i1 = $r1[0];

        $i2 = $r1[1];

        $i1 = $i1 ^ $i2;

        $i2 = $r1[3];

        $i1 = $i1 ^ $i2;

        i0 = i0 ^ $i1;

        $r1[2] = i0;

        i0 = $r1[1];

        $i1 = $r1[3];

        $i1 = $i1 ^ -1;

        $i2 = $r1[2];

        $i2 = $i2 ^ -1;

        $i1 = $i1 & $i2;

        i0 = i0 ^ $i1;

        $r1[1] = i0;

        i0 = $r1[0];

        $i1 = $r1[2];

        $i2 = $r1[1];

        $i1 = $i1 & $i2;

        i0 = i0 ^ $i1;

        $r1[0] = i0;

        return;
    }
    private void intToBytesBig(int, byte[], int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int $i0, i1, i2, $i3;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $i3 = $i0 >>> 24;

        $b4 = (byte) $i3;

        $r1[i1] = $b4;

        i1 = i2 + 1;

        $i3 = $i0 >>> 16;

        $b4 = (byte) $i3;

        $r1[i2] = $b4;

        i2 = i1 + 1;

        $i3 = $i0 >>> 8;

        $b4 = (byte) $i3;

        $r1[i1] = $b4;

        $b4 = (byte) $i0;

        $r1[i2] = $b4;

        return;
    }
    private void pi1(int[])
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: int[];

        $i0 = $r1[1];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 1);

        $r1[1] = $i0;

        $i0 = $r1[2];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 5);

        $r1[2] = $i0;

        $i0 = $r1[3];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 2);

        $r1[3] = $i0;

        return;
    }
    private void pi2(int[])
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: int[];

        $i0 = $r1[1];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 31);

        $r1[1] = $i0;

        $i0 = $r1[2];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 27);

        $r1[2] = $i0;

        $i0 = $r1[3];

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 30);

        $r1[3] = $i0;

        return;
    }
    private int rotl(int, int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        byte[] $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, 0);

        $r2[0] = $i0;

        $r2 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, 4);

        $r2[1] = $i0;

        $r2 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, 8);

        $r2[2] = $i0;

        $r2 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: int[] subKeys>;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int bytesToIntBig(byte[],int)>($r1, 12);

        $r2[3] = $i0;

        return;
    }
    private void theta(int[], int[])
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 = $r1[0];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 8);

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 24);

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        $i1 = $r1[1];

        $i1 = $i1 ^ $i0;

        $r1[1] = $i1;

        $i1 = $r1[3];

        $i0 = $i1 ^ $i0;

        $r1[3] = $i0;

        $i0 = 0;

     label1:
        if $i0 >= 4 goto label2;

        $i1 = $r1[$i0];

        $i2 = $r2[$i0];

        $i1 = $i1 ^ $i2;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = $r1[1];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        $i1 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 8);

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int rotl(int,int)>($i0, 24);

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        $i1 = $r1[0];

        $i1 = $i1 ^ $i0;

        $r1[0] = $i1;

        $i1 = $r1[2];

        $i0 = $i1 ^ $i0;

        $r1[2] = $i0;

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        return "Noekeon";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.params.KeyParameter r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to Noekeon init - ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.engines.NoekeonEngine: boolean _forEncryption> = $z0;

        r0.<org.spongycastle.crypto.engines.NoekeonEngine: boolean _initialised> = 1;

        r6 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: void setKey(byte[])>($r7);

        return;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.OutputLengthException $r7;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: boolean _initialised>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i2 = $i0 + 16;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r6;

     label2:
        $i2 = $i1 + 16;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r7 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r7;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.NoekeonEngine: boolean _forEncryption>;

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label4:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.NoekeonEngine: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.NoekeonEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.NoekeonEngine;

        return;
    }
