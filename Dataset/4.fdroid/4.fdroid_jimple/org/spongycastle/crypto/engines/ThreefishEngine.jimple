org.spongycastle.crypto.engines.ThreefishEngine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
public static final int BLOCKSIZE_1024
public static final int BLOCKSIZE_256
public static final int BLOCKSIZE_512
private static final long C_240
private static final int MAX_ROUNDS
private static int[] MOD17
private static int[] MOD3
private static int[] MOD5
private static int[] MOD9
private static final int ROUNDS_1024
private static final int ROUNDS_256
private static final int ROUNDS_512
private static final int TWEAK_SIZE_BYTES
private static final int TWEAK_SIZE_WORDS
private int blocksizeBytes
private int blocksizeWords
private org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher
private long[] currentBlock
private boolean forEncryption
private long[] kw
private long[] t
    static void <clinit>()
    {
        int[] $r0;
        int $i0, $i1;

        $r0 = newarray (int)[80];

        <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9> = $r0;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        $i0 = lengthof $r0;

        $r0 = newarray (int)[$i0];

        <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD17> = $r0;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        $i0 = lengthof $r0;

        $r0 = newarray (int)[$i0];

        <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD5> = $r0;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        $i0 = lengthof $r0;

        $r0 = newarray (int)[$i0];

        <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD3> = $r0;

        $i0 = 0;

     label1:
        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD17>;

        $i1 = $i0 % 17;

        $r0[$i0] = $i1;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        $i1 = $i0 % 9;

        $r0[$i0] = $i1;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD5>;

        $i1 = $i0 % 5;

        $r0[$i0] = $i1;

        $r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD3>;

        $i1 = $i0 % 3;

        $r0[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(int)
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        int $i0, $i1;
        long[] $r1, $r4;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.engines.ThreefishEngine$Threefish256Cipher $r3;
        org.spongycastle.crypto.engines.ThreefishEngine$Threefish512Cipher $r5;
        org.spongycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher $r6;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[5];

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t> = $r1;

        $i1 = $i0 / 8;

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes> = $i1;

        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        $i1 = $i1 / 8;

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords> = $i1;

        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $r1 = newarray (long)[$i1];

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] currentBlock> = $r1;

        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $i1 = $i1 * 2;

        $i1 = $i1 + 1;

        $r1 = newarray (long)[$i1];

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw> = $r1;

        lookupswitch($i0)
        {
            case 256: goto label2;
            case 512: goto label3;
            case 1024: goto label4;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid blocksize - Threefish is defined with block size of 256, 512, or 1024 bits");

        throw $r2;

     label2:
        $r3 = new org.spongycastle.crypto.engines.ThreefishEngine$Threefish256Cipher;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        specialinvoke $r3.<org.spongycastle.crypto.engines.ThreefishEngine$Threefish256Cipher: void <init>(long[],long[])>($r1, $r4);

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher> = $r3;

        return;

     label3:
        $r5 = new org.spongycastle.crypto.engines.ThreefishEngine$Threefish512Cipher;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        specialinvoke $r5.<org.spongycastle.crypto.engines.ThreefishEngine$Threefish512Cipher: void <init>(long[],long[])>($r1, $r4);

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher> = $r5;

        return;

     label4:
        $r6 = new org.spongycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        specialinvoke $r6.<org.spongycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher: void <init>(long[],long[])>($r1, $r4);

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher> = $r6;

        return;
    }
    static int[] access$000()
    {
        int[] r0;

        r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD5>;

        return r0;
    }
    static int[] access$100()
    {
        int[] r0;

        r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD3>;

        return r0;
    }
    static int[] access$200()
    {
        int[] r0;

        r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD9>;

        return r0;
    }
    static int[] access$300()
    {
        int[] r0;

        r0 = <org.spongycastle.crypto.engines.ThreefishEngine: int[] MOD17>;

        return r0;
    }
    public static long bytesToWord(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;
        byte $b3;
        long $l4, $l5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i2 = $i0 + 8;

        $i1 = lengthof $r0;

        if $i2 <= $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $i1 = $i0 + 1;

        $b3 = $r0[$i0];

        $l4 = (long) $b3;

        $l4 = $l4 & 255L;

        $i0 = $i1 + 1;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 8;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 1;

        $b3 = $r0[$i0];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 16;

        $l4 = $l4 | $l5;

        $i0 = $i1 + 1;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 24;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 1;

        $b3 = $r0[$i0];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 32;

        $l4 = $l4 | $l5;

        $i0 = $i1 + 1;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 40;

        $l4 = $l4 | $l5;

        $i1 = $i0 + 1;

        $b3 = $r0[$i0];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 48;

        $l4 = $l4 | $l5;

        $b3 = $r0[$i1];

        $l5 = (long) $b3;

        $l5 = $l5 & 255L;

        $l5 = $l5 << 56;

        $l4 = $l4 | $l5;

        return $l4;
    }
    static long rotlXor(long, int, long)
    {
        long $l0, $l2, $l3;
        int $i1;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $l3 = $l0 << $i1;

        $i1 = neg $i1;

        $l0 = $l0 >>> $i1;

        $l0 = $l3 | $l0;

        $l0 = $l0 ^ $l2;

        return $l0;
    }
    private void setKey(long[])
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        long[] $r1, $r5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long l2, $l3;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Threefish key must be same size as block (");

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" words)");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        l2 = 2004413935125273122L;

        $i0 = 0;

     label2:
        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        if $i0 >= $i1 goto label3;

        $r5 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $l3 = $r1[$i0];

        $r5[$i0] = $l3;

        $r5 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $l3 = $r5[$i0];

        l2 = l2 ^ $l3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $r1[$i0] = l2;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $r5 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $i1 = $i0 + 1;

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, $i1, $i0);

        return;
    }
    private void setTweak(long[])
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        long[] $r1, $r3;
        long $l0, $l2;
        int $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $r1 := @parameter0: long[];

        $i1 = lengthof $r1;

        if $i1 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Tweak must be 2 words.");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l0 = $r1[0];

        $r3[0] = $l0;

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l0 = $r1[1];

        $r3[1] = $l0;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l2 = $r3[0];

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l0 = $r3[1];

        $l0 = $l2 ^ $l0;

        $r1[2] = $l0;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l0 = $r3[0];

        $r1[3] = $l0;

        $r1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] t>;

        $l0 = $r3[1];

        $r1[4] = $l0;

        return;
    }
    public static void wordToBytes(long, byte[], int)
    {
        long $l0, $l5;
        byte[] $r0;
        int $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;
        byte $b4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i3 = $i1 + 8;

        $i2 = lengthof $r0;

        if $i3 <= $i2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $i2 = $i1 + 1;

        $i3 = (int) $l0;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i1 = $i2 + 1;

        $l5 = $l0 >> 8;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i2 = $i1 + 1;

        $l5 = $l0 >> 16;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i1 = $i2 + 1;

        $l5 = $l0 >> 24;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i2 = $i1 + 1;

        $l5 = $l0 >> 32;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i1 = $i2 + 1;

        $l5 = $l0 >> 40;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i2 = $i1 + 1;

        $l5 = $l0 >> 48;

        $i3 = (int) $l5;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $l0 = $l0 >> 56;

        $i1 = (int) $l0;

        $b4 = (byte) $i1;

        $r0[$i2] = $b4;

        return;
    }
    static long xorRotr(long, int, long)
    {
        long $l0, $l2;
        int $i1;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $l2 = $l0 ^ $l2;

        $l0 = $l2 >>> $i1;

        $i1 = neg $i1;

        $l2 = $l2 << $i1;

        $l0 = $l0 | $l2;

        return $l0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Threefish-");

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        return i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.TweakableBlockCipherParameters r2;
        org.spongycastle.crypto.params.KeyParameter $r3;
        byte[] $r4, $r5;
        long[] r6, r7;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.lang.Class $r11;
        long $l2;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = r1 instanceof org.spongycastle.crypto.params.TweakableBlockCipherParameters;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.TweakableBlockCipherParameters) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.TweakableBlockCipherParameters: org.spongycastle.crypto.params.KeyParameter getKey()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r5 = virtualinvoke r2.<org.spongycastle.crypto.params.TweakableBlockCipherParameters: byte[] getTweak()>();

     label1:
        r6 = null;

        r7 = null;

        if $r4 == null goto label6;

        $i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        if $i0 == $i1 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Threefish key must be same size as block (");

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label2:
        $z1 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 == 0 goto label3;

        $r3 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r5 = null;

        goto label1;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter passed to Threefish init - ");

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label4:
        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        r6 = newarray (long)[$i0];

        $i0 = 0;

     label5:
        $i1 = lengthof r6;

        if $i0 >= $i1 goto label6;

        $i1 = $i0 * 8;

        $l2 = staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: long bytesToWord(byte[],int)>($r4, $i1);

        r6[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        if $r5 == null goto label8;

        $i0 = lengthof $r5;

        if $i0 == 16 goto label7;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Threefish tweak must be 16 bytes");

        throw $r8;

     label7:
        r7 = newarray (long)[2];

        $l2 = staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: long bytesToWord(byte[],int)>($r5, 0);

        r7[0] = $l2;

        $l2 = staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: long bytesToWord(byte[],int)>($r5, 8);

        r7[1] = $l2;

     label8:
        virtualinvoke r0.<org.spongycastle.crypto.engines.ThreefishEngine: void init(boolean,long[],long[])>($z0, r6, r7);

        return;
    }
    public void init(boolean, long[], long[])
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        boolean $z0;
        long[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        r0.<org.spongycastle.crypto.engines.ThreefishEngine: boolean forEncryption> = $z0;

        if $r1 == null goto label1;

        specialinvoke r0.<org.spongycastle.crypto.engines.ThreefishEngine: void setKey(long[])>($r1);

     label1:
        if $r2 == null goto label2;

        specialinvoke r0.<org.spongycastle.crypto.engines.ThreefishEngine: void setTweak(long[])>($r2);

     label2:
        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i4, $i5;
        long $l3;
        org.spongycastle.crypto.DataLengthException $r3;
        long[] $r4, $r5;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        $i4 = $i4 + $i1;

        $i2 = lengthof $r2;

        if $i4 <= $i2 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Output buffer too short");

        throw $r3;

     label1:
        $i4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        $i4 = $i4 + $i0;

        $i2 = lengthof $r1;

        if $i4 <= $i2 goto label2;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Input buffer too short");

        throw $r3;

     label2:
        $i4 = 0;

     label3:
        $i2 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        if $i4 >= $i2 goto label4;

        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] currentBlock>;

        $i5 = $i4 >> 3;

        $i2 = $i0 + $i4;

        $l3 = staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: long bytesToWord(byte[],int)>($r1, $i2);

        $r4[$i5] = $l3;

        $i4 = $i4 + 8;

        goto label3;

     label4:
        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] currentBlock>;

        $r5 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] currentBlock>;

        virtualinvoke r0.<org.spongycastle.crypto.engines.ThreefishEngine: int processBlock(long[],long[])>($r4, $r5);

        $i0 = 0;

     label5:
        $i4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        if $i0 >= $i4 goto label6;

        $r4 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] currentBlock>;

        $i4 = $i0 >> 3;

        $l3 = $r4[$i4];

        $i4 = $i1 + $i0;

        staticinvoke <org.spongycastle.crypto.engines.ThreefishEngine: void wordToBytes(long,byte[],int)>($l3, $r2, $i4);

        $i0 = $i0 + 8;

        goto label5;

     label6:
        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeBytes>;

        return $i0;
    }
    public int processBlock(long[], long[]) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;
        long[] $r1, $r2, $r3;
        int $i0, $i3;
        long $l1;
        byte $b2;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        boolean $z0;
        org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher $r6;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $r3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: long[] kw>;

        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        $l1 = $r3[$i0];

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Threefish engine not initialised");

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        $i3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        if $i0 == $i3 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Input buffer too short");

        throw $r5;

     label2:
        $i0 = lengthof $r2;

        $i3 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        if $i0 == $i3 goto label3;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Output buffer too short");

        throw $r5;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: boolean forEncryption>;

        if $z0 == 0 goto label5;

        $r6 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher>;

        virtualinvoke $r6.<org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher: void encryptBlock(long[],long[])>($r1, $r2);

     label4:
        $i0 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: int blocksizeWords>;

        return $i0;

     label5:
        $r6 = r0.<org.spongycastle.crypto.engines.ThreefishEngine: org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher>;

        virtualinvoke $r6.<org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher: void decryptBlock(long[],long[])>($r1, $r2);

        goto label4;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.ThreefishEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.ThreefishEngine;

        return;
    }
