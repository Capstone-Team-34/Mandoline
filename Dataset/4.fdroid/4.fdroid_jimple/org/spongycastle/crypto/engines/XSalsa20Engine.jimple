org.spongycastle.crypto.engines.XSalsa20Engine extends org.spongycastle.crypto.engines.Salsa20Engine
    public void <init>()
    {
        org.spongycastle.crypto.engines.XSalsa20Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.XSalsa20Engine;

        specialinvoke r0.<org.spongycastle.crypto.engines.Salsa20Engine: void <init>()>();

        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.XSalsa20Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.XSalsa20Engine;

        return "XSalsa20";
    }
    protected int getNonceSize()
    {
        org.spongycastle.crypto.engines.XSalsa20Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.XSalsa20Engine;

        return 24;
    }
    protected void setKey(byte[], byte[])
    {
        org.spongycastle.crypto.engines.XSalsa20Engine r0;
        byte[] $r1, $r2;
        int[] r3, $r7, $r8;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.engines.XSalsa20Engine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.engines.XSalsa20Engine: java.lang.String getAlgorithmName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t support re-init with null key");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        if $i0 == 32 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.engines.XSalsa20Engine: java.lang.String getAlgorithmName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires a 256 bit key");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.engines.Salsa20Engine: void setKey(byte[],byte[])>($r1, $r2);

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 8);

        r3[8] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 12);

        r3[9] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = lengthof r3;

        r3 = newarray (int)[$i0];

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        staticinvoke <org.spongycastle.crypto.engines.XSalsa20Engine: void salsaCore(int,int[],int[])>(20, $r7, r3);

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[0];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[0];

        $i0 = $i0 - $i1;

        $r7[1] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[5];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[5];

        $i0 = $i0 - $i1;

        $r7[2] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[10];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[10];

        $i0 = $i0 - $i1;

        $r7[3] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[15];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[15];

        $i0 = $i0 - $i1;

        $r7[4] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[6];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[6];

        $i0 = $i0 - $i1;

        $r7[11] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[7];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[7];

        $i0 = $i0 - $i1;

        $r7[12] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[8];

        $r8 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = $r8[8];

        $i0 = $i0 - $i1;

        $r7[13] = $i0;

        $r7 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = r3[9];

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i1 = r3[9];

        $i0 = $i0 - $i1;

        $r7[14] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 16);

        r3[6] = $i0;

        r3 = r0.<org.spongycastle.crypto.engines.XSalsa20Engine: int[] engineState>;

        $i0 = staticinvoke <org.spongycastle.util.Pack: int littleEndianToInt(byte[],int)>($r2, 20);

        r3[7] = $i0;

        return;
    }
