org.spongycastle.crypto.engines.ElGamalEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private static final java.math.BigInteger ONE
private static final java.math.BigInteger TWO
private static final java.math.BigInteger ZERO
private int bitSize
private boolean forEncryption
private org.spongycastle.crypto.params.ElGamalKeyParameters key
private java.security.SecureRandom random
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger TWO> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.engines.ElGamalEngine r0;

        r0 := @this: org.spongycastle.crypto.engines.ElGamalEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.engines.ElGamalEngine r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.ElGamalEngine;

        $z0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i0 = $i0 + -1;

        $i0 = $i0 / 8;

        return $i0;

     label1:
        $i0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 * 2;

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.engines.ElGamalEngine r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.engines.ElGamalEngine;

        $z0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 * 2;

        return $i0;

     label1:
        $i0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i0 = $i0 + -1;

        $i0 = $i0 / 8;

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.ElGamalEngine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.ElGamalKeyParameters $r3;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.params.ElGamalParameters $r5;
        java.math.BigInteger $r6;
        int $i0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.spongycastle.crypto.engines.ElGamalEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r3 = (org.spongycastle.crypto.params.ElGamalKeyParameters) r1;

        r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key> = $r3;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random> = $r4;

     label1:
        r0.<org.spongycastle.crypto.engines.ElGamalEngine: boolean forEncryption> = $z0;

        $r3 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.ElGamalKeyParameters: org.spongycastle.crypto.params.ElGamalParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ElGamalParameters: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize> = $i0;

        if $z0 == 0 goto label3;

        $r3 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $z0 = $r3 instanceof org.spongycastle.crypto.params.ElGamalPublicKeyParameters;

        if $z0 != 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ElGamalPublicKeyParameters are required for encryption.");

        throw $r7;

     label2:
        $r3 = (org.spongycastle.crypto.params.ElGamalKeyParameters) r1;

        r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key> = $r3;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random> = $r4;

        goto label1;

     label3:
        $r3 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $z0 = $r3 instanceof org.spongycastle.crypto.params.ElGamalPrivateKeyParameters;

        if $z0 != 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ElGamalPrivateKeyParameters are required for decryption.");

        throw $r7;

     label4:
        return;
    }
    public byte[] processBlock(byte[], int, int)
    {
        org.spongycastle.crypto.engines.ElGamalEngine r0;
        byte[] $r1, r2, r3;
        int $i0, $i1, $i2;
        java.math.BigInteger r4, $r9, r10, $r12, $r13;
        org.spongycastle.crypto.params.ElGamalKeyParameters $r5;
        java.lang.IllegalStateException $r6;
        boolean $z0;
        org.spongycastle.crypto.DataLengthException $r7;
        org.spongycastle.crypto.params.ElGamalParameters $r8;
        org.spongycastle.crypto.params.ElGamalPrivateKeyParameters r11;
        org.spongycastle.crypto.params.ElGamalPublicKeyParameters r14;
        java.security.SecureRandom $r15;

        r0 := @this: org.spongycastle.crypto.engines.ElGamalEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        if $r5 != null goto label01;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ElGamal engine not initialised");

        throw $r6;

     label01:
        $z0 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label03;

        $i2 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i2 = $i2 + -1;

        $i2 = $i2 + 7;

        $i2 = $i2 / 8;

     label02:
        if $i1 <= $i2 goto label04;

        $r7 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ElGamal cipher.\n");

        throw $r7;

     label03:
        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.ElGamalEngine: int getInputBlockSize()>();

        goto label02;

     label04:
        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.ElGamalKeyParameters: org.spongycastle.crypto.params.ElGamalParameters getParameters()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.params.ElGamalParameters: java.math.BigInteger getP()>();

        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $z0 = $r5 instanceof org.spongycastle.crypto.params.ElGamalPrivateKeyParameters;

        if $z0 == 0 goto label05;

        $i2 = $i1 / 2;

        r2 = newarray (byte)[$i2];

        $i1 = $i1 / 2;

        r3 = newarray (byte)[$i1];

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

        $i1 = lengthof r2;

        $i0 = $i1 + $i0;

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r3, 0, $i1);

        r10 = new java.math.BigInteger;

        specialinvoke r10.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        r4 = new java.math.BigInteger;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        r11 = (org.spongycastle.crypto.params.ElGamalPrivateKeyParameters) $r5;

        $r12 = <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ONE>;

        $r12 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        $r13 = virtualinvoke r11.<org.spongycastle.crypto.params.ElGamalPrivateKeyParameters: java.math.BigInteger getX()>();

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r13);

        r10 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r12, $r9);

        r4 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $r9 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r9);

        return $r1;

     label05:
        if $i0 != 0 goto label06;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label08;

     label06:
        r2 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

     label07:
        r4 = new java.math.BigInteger;

        specialinvoke r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        $i0 = virtualinvoke r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i0 < 0 goto label09;

        $r7 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r7.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ElGamal cipher.\n");

        throw $r7;

     label08:
        r2 = $r1;

        goto label07;

     label09:
        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        r14 = (org.spongycastle.crypto.params.ElGamalPublicKeyParameters) $r5;

        $i0 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        r10 = new java.math.BigInteger;

        $r15 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random>;

        specialinvoke r10.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r15);

     label10:
        $r12 = <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r10.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label11;

        $r12 = <org.spongycastle.crypto.engines.ElGamalEngine: java.math.BigInteger TWO>;

        $r12 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        $i1 = virtualinvoke r10.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i1 <= 0 goto label12;

     label11:
        r10 = new java.math.BigInteger;

        $r15 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random>;

        specialinvoke r10.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r15);

        goto label10;

     label12:
        $r5 = r0.<org.spongycastle.crypto.engines.ElGamalEngine: org.spongycastle.crypto.params.ElGamalKeyParameters key>;

        $r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.ElGamalKeyParameters: org.spongycastle.crypto.params.ElGamalParameters getParameters()>();

        $r12 = virtualinvoke $r8.<org.spongycastle.crypto.params.ElGamalParameters: java.math.BigInteger getG()>();

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r10, $r9);

        $r13 = virtualinvoke r14.<org.spongycastle.crypto.params.ElGamalPublicKeyParameters: java.math.BigInteger getY()>();

        r10 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r10, $r9);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r10);

        $r9 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r1 = virtualinvoke $r12.<java.math.BigInteger: byte[] toByteArray()>();

        r2 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.engines.ElGamalEngine: int getOutputBlockSize()>();

        r3 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i1 = lengthof r3;

        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label14;

        $i0 = lengthof r3;

        $i0 = $i0 / 2;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r3, $i0, $i1);

     label13:
        $i0 = lengthof r2;

        $i1 = lengthof r3;

        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label15;

        $i0 = lengthof r3;

        $i1 = lengthof r2;

        $i1 = $i1 + -1;

        $i0 = $i0 - $i1;

        $i1 = lengthof r2;

        $i1 = $i1 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r3, $i0, $i1);

        return r3;

     label14:
        $i0 = lengthof r3;

        $i0 = $i0 / 2;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, $i0, $i1);

        goto label13;

     label15:
        $i0 = lengthof r3;

        $i1 = lengthof r2;

        $i0 = $i0 - $i1;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, $i0, $i1);

        return r3;
    }
