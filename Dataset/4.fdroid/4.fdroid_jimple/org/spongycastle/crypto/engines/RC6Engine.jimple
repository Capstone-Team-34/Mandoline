org.spongycastle.crypto.engines.RC6Engine extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private static final int LGW
private static final int P32
private static final int Q32
private static final int _noRounds
private static final int bytesPerWord
private static final int wordSize
private int[] _S
private boolean forEncryption
    public void <init>()
    {
        org.spongycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S> = null;

        return;
    }
    private int bytesToWord(byte[], int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = 0;

        i2 = 3;

     label1:
        if i2 < 0 goto label2;

        $i1 = $i1 << 8;

        $i3 = i2 + $i0;

        $b4 = $r1[$i3];

        $i3 = $b4 & 255;

        $i1 = $i1 + $i3;

        i2 = i2 + -1;

        goto label1;

     label2:
        return $i1;
    }
    private int decryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, i7, $i8;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $i4 = $i0 + 4;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i4);

        $i5 = $i0 + 8;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i5);

        $i0 = $i0 + 12;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        i2 = $r3[43];

        $i5 = $i5 - i2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        i2 = $r3[42];

        i6 = $i3 - i2;

        $i3 = 20;

     label1:
        if $i3 < 1 goto label2;

        i2 = $i0;

        $i0 = $i5;

        i7 = $i4;

        $i4 = i6;

        $i8 = i6 * 2;

        $i8 = $i8 + 1;

        i6 = i6 * $i8;

        i6 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i6, 5);

        $i8 = $i5 * 2;

        $i8 = $i8 + 1;

        $i5 = $i5 * $i8;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i5, 5);

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i5 = $i3 * 2;

        $i5 = $i5 + 1;

        $i5 = $r3[$i5];

        $i5 = i7 - $i5;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateRight(int,int)>($i5, i6);

        $i5 = $i5 ^ $i8;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        i7 = $i3 * 2;

        i7 = $r3[i7];

        i2 = i2 - i7;

        i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateRight(int,int)>(i2, $i8);

        i6 = i2 ^ i6;

        $i3 = $i3 + -1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i3 = $r3[1];

        $i0 = $i0 - $i3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i3 = $r3[0];

        $i4 = $i4 - $i3;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i6, $r2, $i1);

        $i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i4, $r2, $i3);

        $i4 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i5, $r2, $i4);

        $i1 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i0, $r2, $i1);

        return 16;
    }
    private int encryptBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r3;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        i3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $i2 = $i0 + 4;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i2);

        $i4 = $i0 + 8;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i4);

        $i0 = $i0 + 12;

        $i5 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int bytesToWord(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i0 = $r3[0];

        $i0 = $i2 + $i0;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i2 = $r3[1];

        $i2 = $i5 + $i2;

        $i5 = 1;

     label1:
        if $i5 > 20 goto label2;

        $i6 = $i0 * 2;

        $i6 = $i6 + 1;

        $i6 = $i0 * $i6;

        $i6 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i6, 5);

        $i7 = $i2 * 2;

        $i7 = $i7 + 1;

        $i7 = $i2 * $i7;

        $i8 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i7, 5);

        i3 = i3 ^ $i6;

        i3 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>(i3, $i8);

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = $i5 * 2;

        $i7 = $r3[$i7];

        $i7 = i3 + $i7;

        $i4 = $i4 ^ $i8;

        $i4 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i4, $i6);

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        i3 = $i5 * 2;

        i3 = i3 + 1;

        i3 = $r3[i3];

        $i4 = $i4 + i3;

        i3 = $i0;

        $i0 = $i4;

        $i4 = $i2;

        $i2 = $i7;

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i5 = $r3[42];

        i3 = i3 + $i5;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i5 = $r3[43];

        $i4 = $i4 + $i5;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>(i3, $r2, $i1);

        i3 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i0, $r2, i3);

        $i0 = $i1 + 8;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i4, $r2, $i0);

        $i0 = $i1 + 12;

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void wordToBytes(int,byte[],int)>($i2, $r2, $i0);

        return 16;
    }
    private int rotateLeft(int, int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = neg $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private int rotateRight(int, int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 >>> $i1;

        $i1 = neg $i1;

        $i0 = $i0 << $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }
    private void setKey(byte[])
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1;
        int[] r2, $r3, $r4;
        int $i0, $i1, $i2, $i4, i5, i6, $i7, $i8;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 + 3;

        $i0 = $i0 / 4;

        if $i0 != 0 goto label1;

     label1:
        $i0 = lengthof $r1;

        $i0 = $i0 + 4;

        $i0 = $i0 + -1;

        $i0 = $i0 / 4;

        r2 = newarray (int)[$i0];

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0 / 4;

        $i2 = $i0 / 4;

        $i2 = r2[$i2];

        $i2 = $i2 << 8;

        $b3 = $r1[$i0];

        $i4 = $b3 & 255;

        $i2 = $i2 + $i4;

        r2[$i1] = $i2;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $r3 = newarray (int)[44];

        r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S> = $r3;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $r3[0] = -1209970333;

        $i0 = 1;

     label4:
        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label5;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i1 = $i0 + -1;

        $i1 = $r4[$i1];

        $i1 = $i1 + -1640531527;

        $r3[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $i0 = lengthof r2;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i1 = lengthof $r3;

        if $i0 <= $i1 goto label8;

        $i0 = lengthof r2;

        $i0 = $i0 * 3;

     label6:
        $i4 = 0;

        $i2 = 0;

        i5 = 0;

        i6 = 0;

        $i1 = 0;

     label7:
        if $i1 >= $i0 goto label9;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $r4 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = $r4[i5];

        $i4 = $i7 + $i4;

        $i4 = $i4 + $i2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i4, 3);

        $i4 = $i7;

        $r3[i5] = $i7;

        $i8 = r2[i6];

        $i8 = $i8 + $i7;

        $i8 = $i8 + $i2;

        $i2 = $i7 + $i2;

        $i7 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int rotateLeft(int,int)>($i8, $i2);

        $i2 = $i7;

        r2[i6] = $i7;

        i5 = i5 + 1;

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i7 = lengthof $r3;

        i5 = i5 % $i7;

        i6 = i6 + 1;

        $i7 = lengthof r2;

        i6 = i6 % $i7;

        $i1 = $i1 + 1;

        goto label7;

     label8:
        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 3;

        goto label6;

     label9:
        return;
    }
    private void wordToBytes(int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1;
        int $i0, $i2, i3, $i4;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $i2 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i3 >= 4 goto label2;

        $i4 = i3 + $i0;

        $b1 = (byte) $i2;

        $r1[$i4] = $b1;

        $i2 = $i2 >>> 8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        return "RC6";
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        return 16;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.params.KeyParameter r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC6 init - ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r6 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        r0.<org.spongycastle.crypto.engines.RC6Engine: boolean forEncryption> = $z0;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: void setKey(byte[])>($r7);

        return;
    }
    public int processBlock(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.engines.RC6Engine r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.DataLengthException $r5;
        org.spongycastle.crypto.OutputLengthException $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int getBlockSize()>();

        $r3 = r0.<org.spongycastle.crypto.engines.RC6Engine: int[] _S>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RC6 engine not initialised");

        throw $r4;

     label1:
        $i3 = $i0 + $i2;

        $i4 = lengthof $r1;

        if $i3 <= $i4 goto label2;

        $r5 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + $i2;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r6 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        $z0 = r0.<org.spongycastle.crypto.engines.RC6Engine: boolean forEncryption>;

        if $z0 == 0 goto label4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label4:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.engines.RC6Engine: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.engines.RC6Engine r0;

        r0 := @this: org.spongycastle.crypto.engines.RC6Engine;

        return;
    }
