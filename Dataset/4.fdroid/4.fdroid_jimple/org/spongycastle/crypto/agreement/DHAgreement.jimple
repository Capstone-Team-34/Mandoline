org.spongycastle.crypto.agreement.DHAgreement extends java.lang.Object
private org.spongycastle.crypto.params.DHParameters dhParams
private org.spongycastle.crypto.params.DHPrivateKeyParameters key
private java.math.BigInteger privateValue
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.agreement.DHAgreement r0;

        r0 := @this: org.spongycastle.crypto.agreement.DHAgreement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.math.BigInteger calculateAgreement(org.spongycastle.crypto.params.DHPublicKeyParameters, java.math.BigInteger)
    {
        org.spongycastle.crypto.agreement.DHAgreement r0;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r1;
        java.math.BigInteger $r2, $r3, $r7, $r9;
        org.spongycastle.crypto.params.DHParameters $r4, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r8;

        r0 := @this: org.spongycastle.crypto.agreement.DHAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r2 := @parameter1: java.math.BigInteger;

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r5 = r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHParameters dhParams>;

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Diffie-Hellman public key has wrong parameters.");

        throw $r6;

     label1:
        $r4 = r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHParameters dhParams>;

        $r7 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r8 = r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHPrivateKeyParameters key>;

        $r3 = virtualinvoke $r8.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger getX()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r7);

        $r9 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        $r3 = r0.<org.spongycastle.crypto.agreement.DHAgreement: java.math.BigInteger privateValue>;

        $r3 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r7);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        return $r2;
    }
    public java.math.BigInteger calculateMessage()
    {
        org.spongycastle.crypto.agreement.DHAgreement r0;
        org.spongycastle.crypto.generators.DHKeyPairGenerator r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.DHParameters $r3;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r4;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r5;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r6;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r7;
        java.math.BigInteger $r8;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r9;

        r0 := @this: org.spongycastle.crypto.agreement.DHAgreement;

        r1 = new org.spongycastle.crypto.generators.DHKeyPairGenerator;

        specialinvoke r1.<org.spongycastle.crypto.generators.DHKeyPairGenerator: void <init>()>();

        $r4 = new org.spongycastle.crypto.params.DHKeyGenerationParameters;

        $r2 = r0.<org.spongycastle.crypto.agreement.DHAgreement: java.security.SecureRandom random>;

        $r3 = r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHParameters dhParams>;

        specialinvoke $r4.<org.spongycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r2, $r3);

        virtualinvoke r1.<org.spongycastle.crypto.generators.DHKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        $r5 = virtualinvoke r1.<org.spongycastle.crypto.generators.DHKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        $r7 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) $r6;

        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger getX()>();

        r0.<org.spongycastle.crypto.agreement.DHAgreement: java.math.BigInteger privateValue> = $r8;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        $r9 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r6;

        $r8 = virtualinvoke $r9.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        return $r8;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.agreement.DHAgreement r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter r4;
        java.lang.IllegalArgumentException $r5;
        org.spongycastle.crypto.params.DHPrivateKeyParameters r6;
        org.spongycastle.crypto.params.DHParameters $r7;

        r0 := @this: org.spongycastle.crypto.agreement.DHAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.agreement.DHAgreement: java.security.SecureRandom random> = $r3;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

     label1:
        $z0 = r4 instanceof org.spongycastle.crypto.params.DHPrivateKeyParameters;

        if $z0 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DHEngine expects DHPrivateKeyParameters");

        throw $r5;

     label2:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.agreement.DHAgreement: java.security.SecureRandom random> = $r3;

        r4 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

        goto label1;

     label3:
        r6 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) r4;

        r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHPrivateKeyParameters key> = r6;

        r6 = r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHPrivateKeyParameters key>;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.DHPrivateKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        r0.<org.spongycastle.crypto.agreement.DHAgreement: org.spongycastle.crypto.params.DHParameters dhParams> = $r7;

        return;
    }
