org.spongycastle.crypto.agreement.srp.SRP6Util extends java.lang.Object
private static java.math.BigInteger ONE
private static java.math.BigInteger ZERO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.agreement.srp.SRP6Util r0;

        r0 := @this: org.spongycastle.crypto.agreement.srp.SRP6Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.math.BigInteger calculateK(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedPair(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r0, $r1, $r1, $r2);

        return $r1;
    }
    public static java.math.BigInteger calculateKey(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2;
        byte[] r3;
        int i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        r3 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r2, i0);

        i0 = lengthof r3;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r3, 0, i0);

        i0 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[i0];

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        return $r1;
    }
    public static java.math.BigInteger calculateM1(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r3, $r4;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedTriplet(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r0, $r1, $r2, $r3, $r4);

        return $r1;
    }
    public static java.math.BigInteger calculateM2(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r3, $r4;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedTriplet(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r0, $r1, $r2, $r3, $r4);

        return $r1;
    }
    public static java.math.BigInteger calculateU(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r3;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedPair(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r0, $r1, $r2, $r3);

        return $r1;
    }
    public static java.math.BigInteger calculateX(org.spongycastle.crypto.Digest, java.math.BigInteger, byte[], byte[], byte[])
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1;
        byte[] $r2, $r3, $r4, r5;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        $i0 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, $i0);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>(58);

        $i0 = lengthof $r4;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i0);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r5, 0);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        $i0 = lengthof r5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r5, 0, $i0);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r5, 0);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r5);

        return $r1;
    }
    public static java.math.BigInteger generatePrivateValue(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r4;
        java.security.SecureRandom $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.security.SecureRandom;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 / 2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(256, $i0);

        $r2 = <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE>;

        $i0 = $i0 + -1;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

        $r4 = <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r2, $r1, $r3);

        return $r1;
    }
    private static byte[] getPadded(java.math.BigInteger, int)
    {
        java.math.BigInteger $r0;
        int $i0, $i1;
        byte[] r1, $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r0);

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        r1 = newarray (byte)[$i0];

        $i1 = lengthof $r2;

        $i1 = $i0 - $i1;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, $i1, $i0);

        return r1;

     label1:
        return $r2;
    }
    private static java.math.BigInteger hashPaddedPair(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r3;
        byte[] r4, $r5;
        int i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        r4 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r2, i0);

        $r5 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r3, i0);

        i0 = lengthof r4;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, i0);

        i0 = lengthof $r5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r5, 0, i0);

        i0 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r4 = newarray (byte)[i0];

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r4, 0);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r4);

        return $r1;
    }
    private static java.math.BigInteger hashPaddedTriplet(org.spongycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1, $r2, $r3, $r4;
        byte[] r5, $r6, $r7;
        int i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        r5 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r2, i0);

        $r6 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r3, i0);

        $r7 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>($r4, i0);

        i0 = lengthof r5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r5, 0, i0);

        i0 = lengthof $r6;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r6, 0, i0);

        i0 = lengthof $r7;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r7, 0, i0);

        i0 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[i0];

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r5, 0);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r5);

        return $r1;
    }
    public static java.math.BigInteger validatePublicValue(java.math.BigInteger, java.math.BigInteger) throws org.spongycastle.crypto.CryptoException
    {
        java.math.BigInteger $r0, $r1;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        $r1 = <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.crypto.CryptoException;

        specialinvoke $r2.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>("Invalid public value: 0");

        throw $r2;

     label1:
        return $r0;
    }
