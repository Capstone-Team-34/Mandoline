org.spongycastle.crypto.agreement.ECMQVBasicAgreement extends java.lang.Object implements org.spongycastle.crypto.BasicAgreement
org.spongycastle.crypto.params.MQVPrivateParameters privParams
    public void <init>()
    {
        org.spongycastle.crypto.agreement.ECMQVBasicAgreement r0;

        r0 := @this: org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private org.spongycastle.math.ec.ECPoint calculateMqvAgreement(org.spongycastle.crypto.params.ECDomainParameters, org.spongycastle.crypto.params.ECPrivateKeyParameters, org.spongycastle.crypto.params.ECPrivateKeyParameters, org.spongycastle.crypto.params.ECPublicKeyParameters, org.spongycastle.crypto.params.ECPublicKeyParameters, org.spongycastle.crypto.params.ECPublicKeyParameters)
    {
        org.spongycastle.crypto.agreement.ECMQVBasicAgreement r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r2, $r3;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r4, $r5, $r6;
        int i0;
        org.spongycastle.math.ec.ECPoint[] r7;
        org.spongycastle.math.ec.ECPoint r8, r9, r10;
        java.math.BigInteger $r11, $r12, $r14, $r16;
        org.spongycastle.math.ec.ECCurve $r13;
        org.spongycastle.math.ec.ECFieldElement $r15;

        r0 := @this: org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.params.ECDomainParameters;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECPrivateKeyParameters;

        $r3 := @parameter2: org.spongycastle.crypto.params.ECPrivateKeyParameters;

        $r4 := @parameter3: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r5 := @parameter4: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r6 := @parameter5: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r11 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        i0 = virtualinvoke $r11.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 1;

        i0 = i0 / 2;

        $r12 = <org.spongycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i0);

        $r13 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        r7 = newarray (org.spongycastle.math.ec.ECPoint)[3];

        if $r4 != null goto label2;

        r8 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r14 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        r8 = virtualinvoke r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r14);

     label1:
        r8 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r13, r8);

        r7[0] = r8;

        r8 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        r8 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r13, r8);

        r7[1] = r8;

        r8 = virtualinvoke $r6.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        r8 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint)>($r13, r8);

        r7[2] = r8;

        virtualinvoke $r13.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r7);

        r9 = r7[0];

        r8 = r7[1];

        r10 = r7[2];

        $r15 = virtualinvoke r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r14 = virtualinvoke $r15.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r12);

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i0);

        $r16 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r14 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r16 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r11);

        $r15 = virtualinvoke r10.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r16 = virtualinvoke $r15.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r12 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r12);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i0);

        $r16 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $r14 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r11);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r11 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r11);

        r8 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>(r8, $r11, r10, $r14);

        return r8;

     label2:
        r8 = virtualinvoke $r4.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        goto label1;
    }
    public java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.agreement.ECMQVBasicAgreement r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        org.spongycastle.crypto.params.MQVPublicParameters r3;
        org.spongycastle.crypto.params.MQVPrivateParameters $r4;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r5, $r7;
        org.spongycastle.crypto.params.ECDomainParameters $r6;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r8, $r9, $r10;
        org.spongycastle.math.ec.ECPoint $r11;
        org.spongycastle.math.ec.ECFieldElement $r12;
        java.math.BigInteger $r13;

        r0 := @this: org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = staticinvoke <org.spongycastle.util.Properties: boolean isOverrideSet(java.lang.String)>("org.spongycastle.ec.disable_mqv");

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ECMQV explicitly disabled");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.MQVPublicParameters) $r1;

        $r4 = r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.crypto.params.MQVPrivateParameters privParams>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.MQVPrivateParameters: org.spongycastle.crypto.params.ECPrivateKeyParameters getStaticPrivateKey()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r4 = r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.crypto.params.MQVPrivateParameters privParams>;

        $r7 = virtualinvoke $r4.<org.spongycastle.crypto.params.MQVPrivateParameters: org.spongycastle.crypto.params.ECPrivateKeyParameters getEphemeralPrivateKey()>();

        $r4 = r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.crypto.params.MQVPrivateParameters privParams>;

        $r8 = virtualinvoke $r4.<org.spongycastle.crypto.params.MQVPrivateParameters: org.spongycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey()>();

        $r9 = virtualinvoke r3.<org.spongycastle.crypto.params.MQVPublicParameters: org.spongycastle.crypto.params.ECPublicKeyParameters getStaticPublicKey()>();

        $r10 = virtualinvoke r3.<org.spongycastle.crypto.params.MQVPublicParameters: org.spongycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey()>();

        $r11 = specialinvoke r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.math.ec.ECPoint calculateMqvAgreement(org.spongycastle.crypto.params.ECDomainParameters,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.crypto.params.ECPrivateKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.crypto.params.ECPublicKeyParameters)>($r6, $r5, $r7, $r8, $r9, $r10);

        $r11 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Infinity is not a valid agreement value for MQV");

        throw $r2;

     label2:
        $r12 = virtualinvoke $r11.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        return $r13;
    }
    public int getFieldSize()
    {
        org.spongycastle.crypto.agreement.ECMQVBasicAgreement r0;
        org.spongycastle.crypto.params.MQVPrivateParameters $r1;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r2;
        org.spongycastle.crypto.params.ECDomainParameters $r3;
        org.spongycastle.math.ec.ECCurve $r4;
        int $i0;

        r0 := @this: org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        $r1 = r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.crypto.params.MQVPrivateParameters privParams>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.MQVPrivateParameters: org.spongycastle.crypto.params.ECPrivateKeyParameters getStaticPrivateKey()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.agreement.ECMQVBasicAgreement r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.MQVPrivateParameters $r2;

        r0 := @this: org.spongycastle.crypto.agreement.ECMQVBasicAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $r2 = (org.spongycastle.crypto.params.MQVPrivateParameters) $r1;

        r0.<org.spongycastle.crypto.agreement.ECMQVBasicAgreement: org.spongycastle.crypto.params.MQVPrivateParameters privParams> = $r2;

        return;
    }
