org.spongycastle.crypto.agreement.ECDHBasicAgreement extends java.lang.Object implements org.spongycastle.crypto.BasicAgreement
private org.spongycastle.crypto.params.ECPrivateKeyParameters key
    public void <init>()
    {
        org.spongycastle.crypto.agreement.ECDHBasicAgreement r0;

        r0 := @this: org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.agreement.ECDHBasicAgreement r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ECPublicKeyParameters r2;
        org.spongycastle.math.ec.ECPoint $r3;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r4;
        java.math.BigInteger $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        org.spongycastle.math.ec.ECFieldElement $r7;

        r0 := @this: org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        r2 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r4 = r0.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: org.spongycastle.crypto.params.ECPrivateKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r3 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r5);

        $r3 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Infinity is not a valid agreement value for ECDH");

        throw $r6;

     label1:
        $r7 = virtualinvoke $r3.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r5 = virtualinvoke $r7.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        return $r5;
    }
    public int getFieldSize()
    {
        org.spongycastle.crypto.agreement.ECDHBasicAgreement r0;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r1;
        org.spongycastle.crypto.params.ECDomainParameters $r2;
        org.spongycastle.math.ec.ECCurve $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        $r1 = r0.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: org.spongycastle.crypto.params.ECPrivateKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.agreement.ECDHBasicAgreement r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r2;

        r0 := @this: org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $r2 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r1;

        r0.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: org.spongycastle.crypto.params.ECPrivateKeyParameters key> = $r2;

        return;
    }
