org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator extends java.lang.Object implements org.spongycastle.crypto.DigestDerivationFunction
private org.spongycastle.asn1.ASN1ObjectIdentifier algorithm
private org.spongycastle.crypto.DigestDerivationFunction kdf
private int keySize
private byte[] z
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.generators.KDF2BytesGenerator $r2;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.generators.KDF2BytesGenerator;

        specialinvoke $r2.<org.spongycastle.crypto.generators.KDF2BytesGenerator: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.crypto.DigestDerivationFunction kdf> = $r2;

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;
        byte[] $r1, $r9, $r13;
        int $i0, $i1, $i2;
        java.io.IOException r2;
        org.spongycastle.asn1.ASN1EncodableVector r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        org.spongycastle.asn1.DERNull $r6;
        org.spongycastle.asn1.DERTaggedObject $r7;
        org.spongycastle.asn1.DEROctetString $r8;
        org.spongycastle.crypto.DigestDerivationFunction $r10;
        org.spongycastle.crypto.params.KDFParameters $r11;
        org.spongycastle.asn1.DERSequence $r12;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r4 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r5 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm>;

        $r6 = <org.spongycastle.asn1.DERNull: org.spongycastle.asn1.DERNull INSTANCE>;

        specialinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable)>($r5, $r6);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

        $r7 = new org.spongycastle.asn1.DERTaggedObject;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $i2 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: int keySize>;

        $r9 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int)>($i2);

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        specialinvoke $r7.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, 2, $r8);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r10 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.crypto.DigestDerivationFunction kdf>;

        $r11 = new org.spongycastle.crypto.params.KDFParameters;

        $r9 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: byte[] z>;

        $r12 = new org.spongycastle.asn1.DERSequence;

     label1:
        specialinvoke $r12.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        $r13 = virtualinvoke $r12.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

        specialinvoke $r11.<org.spongycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r9, $r13);

        interfaceinvoke $r10.<org.spongycastle.crypto.DigestDerivationFunction: void init(org.spongycastle.crypto.DerivationParameters)>($r11);

     label2:
        $r10 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.crypto.DigestDerivationFunction kdf>;

        $i0 = interfaceinvoke $r10.<org.spongycastle.crypto.DigestDerivationFunction: int generateBytes(byte[],int,int)>($r1, $i0, $i1);

        return $i0;

     label3:
        r2 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to initialise kdf: ");

        $r16 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r14;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.crypto.DigestDerivationFunction $r2;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        $r2 = r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.crypto.DigestDerivationFunction kdf>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.DigestDerivationFunction: org.spongycastle.crypto.Digest getDigest()>();

        return $r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        org.spongycastle.crypto.agreement.kdf.DHKDFParameters r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        int $i0;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        r2 = (org.spongycastle.crypto.agreement.kdf.DHKDFParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm> = $r3;

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: int getKeySize()>();

        r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: int keySize> = $i0;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: byte[] getZ()>();

        r0.<org.spongycastle.crypto.agreement.kdf.ECDHKEKGenerator: byte[] z> = $r4;

        return;
    }
