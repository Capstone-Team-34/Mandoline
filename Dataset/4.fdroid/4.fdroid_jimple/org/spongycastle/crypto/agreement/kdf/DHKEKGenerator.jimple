org.spongycastle.crypto.agreement.kdf.DHKEKGenerator extends java.lang.Object implements org.spongycastle.crypto.DerivationFunction
private org.spongycastle.asn1.ASN1ObjectIdentifier algorithm
private final org.spongycastle.crypto.Digest digest
private int keySize
private byte[] partyAInfo
private byte[] z
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.agreement.kdf.DHKEKGenerator r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.DHKEKGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        return;
    }
    public int generateBytes(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.agreement.kdf.DHKEKGenerator r0;
        byte[] $r1, r2, $r9, $r10;
        int i0, $i2, $i3, $i4, $i8, i9, $i10;
        java.io.IOException r3;
        long l1, $l6, $l7;
        org.spongycastle.asn1.ASN1EncodableVector r4, r5;
        org.spongycastle.crypto.DataLengthException $r6;
        org.spongycastle.crypto.Digest $r7;
        byte $b5;
        java.lang.IllegalArgumentException $r8;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r11;
        org.spongycastle.asn1.DEROctetString $r12;
        org.spongycastle.asn1.DERSequence $r13;
        org.spongycastle.asn1.DERTaggedObject $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.DHKEKGenerator;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        i0 = lengthof $r1;

        i0 = i0 - $i3;

        if i0 >= $i2 goto label01;

        $r6 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too small");

        throw $r6;

     label01:
        l1 = (long) $i3;

        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        $i4 = interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $b5 = l1 cmp 8589934591L;

        if $b5 <= 0 goto label02;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output length too large");

        throw $r8;

     label02:
        $l6 = (long) $i4;

        $l6 = $l6 + l1;

        $l6 = $l6 - 1L;

        $l7 = (long) $i4;

        $l6 = $l6 / $l7;

        i0 = (int) $l6;

        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        $i8 = interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i8];

        $i8 = 1;

        i9 = 0;

     label03:
        if i9 >= i0 goto label12;

        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        $r9 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] z>;

        $r10 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] z>;

        $i10 = lengthof $r10;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r9, 0, $i10);

        r4 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r5 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r11 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm>;

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $r12 = new org.spongycastle.asn1.DEROctetString;

        $r9 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int)>($i8);

        specialinvoke $r12.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r12);

        $r13 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r13.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r5);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r13);

        $r9 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] partyAInfo>;

        if $r9 == null goto label04;

        $r14 = new org.spongycastle.asn1.DERTaggedObject;

        $r12 = new org.spongycastle.asn1.DEROctetString;

        $r9 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] partyAInfo>;

        specialinvoke $r12.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        specialinvoke $r14.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, 0, $r12);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r14);

     label04:
        $r14 = new org.spongycastle.asn1.DERTaggedObject;

        $r12 = new org.spongycastle.asn1.DEROctetString;

        $i10 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: int keySize>;

        $r9 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int)>($i10);

        specialinvoke $r12.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        specialinvoke $r14.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(1, 2, $r12);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r14);

        $r13 = new org.spongycastle.asn1.DERSequence;

     label05:
        specialinvoke $r13.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r4);

        $r9 = virtualinvoke $r13.<org.spongycastle.asn1.DERSequence: byte[] getEncoded(java.lang.String)>("DER");

     label06:
        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        $i10 = lengthof $r9;

     label07:
        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r9, 0, $i10);

     label08:
        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        if $i3 <= $i4 goto label11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i2, $i4);

        $i2 = $i2 + $i4;

        $i3 = $i3 - $i4;

     label09:
        $i8 = $i8 + 1;

        i9 = i9 + 1;

        goto label03;

     label10:
        r3 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to encode parameter info: ");

        $r16 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label11:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i2, $i3);

        goto label09;

     label12:
        $r7 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void reset()>();

        $i2 = (int) l1;

        return $i2;

        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
    }
    public org.spongycastle.crypto.Digest getDigest()
    {
        org.spongycastle.crypto.agreement.kdf.DHKEKGenerator r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.DHKEKGenerator;

        r1 = r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.DerivationParameters)
    {
        org.spongycastle.crypto.agreement.kdf.DHKEKGenerator r0;
        org.spongycastle.crypto.DerivationParameters $r1;
        org.spongycastle.crypto.agreement.kdf.DHKDFParameters r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        int $i0;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.agreement.kdf.DHKEKGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.DerivationParameters;

        r2 = (org.spongycastle.crypto.agreement.kdf.DHKDFParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier algorithm> = $r3;

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: int getKeySize()>();

        r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: int keySize> = $i0;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: byte[] getZ()>();

        r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] z> = $r4;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.agreement.kdf.DHKDFParameters: byte[] getExtraInfo()>();

        r0.<org.spongycastle.crypto.agreement.kdf.DHKEKGenerator: byte[] partyAInfo> = $r4;

        return;
    }
