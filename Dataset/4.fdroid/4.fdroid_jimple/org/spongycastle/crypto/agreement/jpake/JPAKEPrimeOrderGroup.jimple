org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup extends java.lang.Object
private final java.math.BigInteger g
private final java.math.BigInteger p
private final java.math.BigInteger q
    public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r0;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        specialinvoke r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,boolean)>($r1, $r2, $r3, 0);

        return;
    }
    void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, boolean)
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r0;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        int $i0;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r1, "p");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r2, "q");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r3, "g");

        if $z0 != 0 goto label6;

        $r4 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        $r5 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("p-1 must be evenly divisible by q");

        throw $r6;

     label1:
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 == -1 goto label2;

        $r4 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 != 1 goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("g must be in [2, p-1]");

        throw $r6;

     label3:
        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r1);

        $r5 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("g^q mod p must equal 1");

        throw $r6;

     label4:
        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean isProbablePrime(int)>(20);

        if $z0 != 0 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("p must be prime");

        throw $r6;

     label5:
        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean isProbablePrime(int)>(20);

        if $z0 != 0 goto label6;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("q must be prime");

        throw $r6;

     label6:
        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger p> = $r1;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger q> = $r2;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger g> = $r3;

        return;
    }
    public java.math.BigInteger getG()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger g>;

        return r1;
    }
    public java.math.BigInteger getP()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger p>;

        return r1;
    }
    public java.math.BigInteger getQ()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger q>;

        return r1;
    }
