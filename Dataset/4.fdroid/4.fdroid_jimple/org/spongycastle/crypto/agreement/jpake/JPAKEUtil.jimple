org.spongycastle.crypto.agreement.jpake.JPAKEUtil extends java.lang.Object
static final java.math.BigInteger ONE
static final java.math.BigInteger ZERO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEUtil r0;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.math.BigInteger calculateA(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r0);

        return $r0;
    }
    public static java.math.BigInteger calculateGA(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        return $r0;
    }
    public static java.math.BigInteger calculateGx(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r0);

        return $r0;
    }
    private static java.math.BigInteger calculateHashForZeroKnowledgeProof(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.lang.String, org.spongycastle.crypto.Digest)
    {
        java.math.BigInteger $r0, $r1, $r2;
        java.lang.String $r3;
        org.spongycastle.crypto.Digest $r4;
        byte[] r5;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: org.spongycastle.crypto.Digest;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void reset()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigestIncludingSize(org.spongycastle.crypto.Digest,java.math.BigInteger)>($r4, $r0);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigestIncludingSize(org.spongycastle.crypto.Digest,java.math.BigInteger)>($r4, $r1);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigestIncludingSize(org.spongycastle.crypto.Digest,java.math.BigInteger)>($r4, $r2);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigestIncludingSize(org.spongycastle.crypto.Digest,java.lang.String)>($r4, $r3);

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[$i0];

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r5, 0);

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(byte[])>(r5);

        return $r0;
    }
    public static java.math.BigInteger calculateKeyingMaterial(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r5 := @parameter5: java.math.BigInteger;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r1 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r1, $r0);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r0);

        return $r0;
    }
    private static byte[] calculateMacKey(java.math.BigInteger, org.spongycastle.crypto.Digest)
    {
        java.math.BigInteger $r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] r2;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: org.spongycastle.crypto.Digest;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigest(org.spongycastle.crypto.Digest,java.math.BigInteger)>($r1, $r0);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateDigest(org.spongycastle.crypto.Digest,java.lang.String)>($r1, "JPAKE_KC");

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        return r2;
    }
    public static java.math.BigInteger calculateMacTag(java.lang.String, java.lang.String, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, org.spongycastle.crypto.Digest)
    {
        java.lang.String $r0, $r1;
        java.math.BigInteger $r2, $r3, $r4, $r5, $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.crypto.macs.HMac r8;
        byte[] r9, $r10;
        int $i0;
        org.spongycastle.crypto.params.KeyParameter $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r5 := @parameter5: java.math.BigInteger;

        $r6 := @parameter6: java.math.BigInteger;

        $r7 := @parameter7: org.spongycastle.crypto.Digest;

        $r10 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: byte[] calculateMacKey(java.math.BigInteger,org.spongycastle.crypto.Digest)>($r6, $r7);

        r8 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke r8.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r7);

        $i0 = virtualinvoke r8.<org.spongycastle.crypto.macs.HMac: int getMacSize()>();

        r9 = newarray (byte)[$i0];

        $r11 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r11.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r10);

        virtualinvoke r8.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r11);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.lang.String)>(r8, "KC_1_U");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.lang.String)>(r8, $r0);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.lang.String)>(r8, $r1);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.math.BigInteger)>(r8, $r2);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.math.BigInteger)>(r8, $r3);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.math.BigInteger)>(r8, $r4);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void updateMac(org.spongycastle.crypto.Mac,java.math.BigInteger)>(r8, $r5);

        virtualinvoke r8.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r9, 0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r10, 0);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>(r9);

        return $r2;
    }
    public static java.math.BigInteger calculateS(char[])
    {
        char[] $r0;
        java.math.BigInteger $r1;
        byte[] $r2;

        $r0 := @parameter0: char[];

        $r1 = new java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(char[])>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r2);

        return $r1;
    }
    public static java.math.BigInteger calculateX2s(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        return $r0;
    }
    public static java.math.BigInteger[] calculateZeroKnowledgeProof(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.lang.String, org.spongycastle.crypto.Digest, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4, r8, $r10;
        java.lang.String $r5;
        org.spongycastle.crypto.Digest $r6;
        java.security.SecureRandom $r7;
        java.math.BigInteger[] r9;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: org.spongycastle.crypto.Digest;

        $r7 := @parameter7: java.security.SecureRandom;

        r9 = newarray (java.math.BigInteger)[2];

        r8 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ZERO>;

        $r10 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r10 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        r8 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r8, $r10, $r7);

        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r8, $r0);

        $r2 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateHashForZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.spongycastle.crypto.Digest)>($r2, $r0, $r3, $r5, $r6);

        r9[0] = $r0;

        $r0 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r0);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        r9[1] = $r0;

        return r9;
    }
    public static java.math.BigInteger generateX1(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, r2, $r3;
        java.security.SecureRandom $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        r2 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ZERO>;

        $r3 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r0 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r2, $r0, $r1);

        return $r0;
    }
    public static java.math.BigInteger generateX2(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, r2, $r3;
        java.security.SecureRandom $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.security.SecureRandom;

        r2 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r3 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r0 = staticinvoke <org.spongycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r2, $r0, $r1);

        return $r0;
    }
    private static byte[] intToByteArray(int)
    {
        int $i0, $i1;
        byte[] $r0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[4];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r0[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r0[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r0[2] = $b2;

        $b2 = (byte) $i0;

        $r0[3] = $b2;

        return $r0;
    }
    private static void updateDigest(org.spongycastle.crypto.Digest, java.lang.String)
    {
        org.spongycastle.crypto.Digest $r0;
        java.lang.String $r1;
        int $i0;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(java.lang.String)>($r1);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    private static void updateDigest(org.spongycastle.crypto.Digest, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1;
        int $i0;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r1);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    private static void updateDigestIncludingSize(org.spongycastle.crypto.Digest, java.lang.String)
    {
        org.spongycastle.crypto.Digest $r0;
        java.lang.String $r1;
        byte[] $r2, $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(java.lang.String)>($r1);

        $i0 = lengthof $r2;

        $r3 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: byte[] intToByteArray(int)>($i0);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, 4);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    private static void updateDigestIncludingSize(org.spongycastle.crypto.Digest, java.math.BigInteger)
    {
        org.spongycastle.crypto.Digest $r0;
        java.math.BigInteger $r1;
        byte[] $r2, $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r1);

        $i0 = lengthof $r2;

        $r3 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: byte[] intToByteArray(int)>($i0);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, 4);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    private static void updateMac(org.spongycastle.crypto.Mac, java.lang.String)
    {
        org.spongycastle.crypto.Mac $r0;
        java.lang.String $r1;
        int $i0;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.crypto.Mac;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(java.lang.String)>($r1);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    private static void updateMac(org.spongycastle.crypto.Mac, java.math.BigInteger)
    {
        org.spongycastle.crypto.Mac $r0;
        java.math.BigInteger $r1;
        int $i0;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.crypto.Mac;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r1);

        $i0 = lengthof $r2;

        interfaceinvoke $r0.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, $i0);

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;
    }
    public static void validateGa(java.math.BigInteger) throws org.spongycastle.crypto.CryptoException
    {
        java.math.BigInteger $r0, $r1;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.crypto.CryptoException;

        specialinvoke $r2.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>("ga is equal to 1.  It should not be.  The chances of this happening are on the order of 2^160 for a 160-bit q.  Try again.");

        throw $r2;

     label1:
        return;
    }
    public static void validateGx4(java.math.BigInteger) throws org.spongycastle.crypto.CryptoException
    {
        java.math.BigInteger $r0, $r1;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.crypto.CryptoException;

        specialinvoke $r2.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>("g^x validation failed.  g^x should not be 1.");

        throw $r2;

     label1:
        return;
    }
    public static void validateMacTag(java.lang.String, java.lang.String, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, org.spongycastle.crypto.Digest, java.math.BigInteger) throws org.spongycastle.crypto.CryptoException
    {
        java.lang.String $r0, $r1;
        java.math.BigInteger $r2, $r3, $r4, $r5, $r6, $r8;
        org.spongycastle.crypto.Digest $r7;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger;

        $r5 := @parameter5: java.math.BigInteger;

        $r6 := @parameter6: java.math.BigInteger;

        $r7 := @parameter7: org.spongycastle.crypto.Digest;

        $r8 := @parameter8: java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateMacTag(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.Digest)>($r1, $r0, $r4, $r5, $r2, $r3, $r6, $r7);

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label1;

        $r9 = new org.spongycastle.crypto.CryptoException;

        specialinvoke $r9.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>("Partner MacTag validation failed. Therefore, the password, MAC, or digest algorithm of each participant does not match.");

        throw $r9;

     label1:
        return;
    }
    public static void validateNotNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }
    public static void validateParticipantIdsDiffer(java.lang.String, java.lang.String) throws org.spongycastle.crypto.CryptoException
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.crypto.CryptoException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Both participants are using the same participantId (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). This is not allowed. ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Each participant must use a unique participantId.");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        return;
    }
    public static void validateParticipantIdsEqual(java.lang.String, java.lang.String) throws org.spongycastle.crypto.CryptoException
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        org.spongycastle.crypto.CryptoException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new org.spongycastle.crypto.CryptoException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received payload from incorrect partner (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). Expected to receive payload from ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        return;
    }
    public static void validateZeroKnowledgeProof(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger[], java.lang.String, org.spongycastle.crypto.Digest) throws org.spongycastle.crypto.CryptoException
    {
        java.math.BigInteger $r0, $r1, $r2, $r3, r7, r8, $r9, $r10;
        java.math.BigInteger[] $r4;
        java.lang.String $r5;
        org.spongycastle.crypto.Digest $r6;
        int $i0;
        org.spongycastle.crypto.CryptoException $r11;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: java.math.BigInteger;

        $r4 := @parameter4: java.math.BigInteger[];

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: org.spongycastle.crypto.Digest;

        r7 = $r4[0];

        r8 = $r4[1];

        $r9 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateHashForZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.spongycastle.crypto.Digest)>($r2, r7, $r3, $r5, $r6);

        $r10 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r10);

        if $i0 != 1 goto label1;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i0 != -1 goto label1;

        $r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r1, $r0);

        $r10 = <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r10);

        if $i0 != 0 goto label1;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r8, $r0);

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, $r0);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r7);

        if $i0 == 0 goto label2;

     label1:
        $r11 = new org.spongycastle.crypto.CryptoException;

        specialinvoke $r11.<org.spongycastle.crypto.CryptoException: void <init>(java.lang.String)>("Zero-knowledge proof validation failed");

        throw $r11;

     label2:
        return;
    }
