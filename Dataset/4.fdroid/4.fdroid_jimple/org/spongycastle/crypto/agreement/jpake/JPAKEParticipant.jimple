org.spongycastle.crypto.agreement.jpake.JPAKEParticipant extends java.lang.Object
public static final int STATE_INITIALIZED
public static final int STATE_KEY_CALCULATED
public static final int STATE_ROUND_1_CREATED
public static final int STATE_ROUND_1_VALIDATED
public static final int STATE_ROUND_2_CREATED
public static final int STATE_ROUND_2_VALIDATED
public static final int STATE_ROUND_3_CREATED
public static final int STATE_ROUND_3_VALIDATED
private java.math.BigInteger b
private final org.spongycastle.crypto.Digest digest
private final java.math.BigInteger g
private java.math.BigInteger gx1
private java.math.BigInteger gx2
private java.math.BigInteger gx3
private java.math.BigInteger gx4
private final java.math.BigInteger p
private final java.lang.String participantId
private java.lang.String partnerParticipantId
private char[] password
private final java.math.BigInteger q
private final java.security.SecureRandom random
private int state
private java.math.BigInteger x1
private java.math.BigInteger x2
    public void <init>(java.lang.String, char[])
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.lang.String $r1;
        char[] $r2;
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup $r3;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 = <org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup NIST_3072>;

        specialinvoke r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void <init>(java.lang.String,char[],org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup)>($r1, $r2, $r3);

        return;
    }
    public void <init>(java.lang.String, char[], org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup)
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.lang.String $r1;
        char[] $r2;
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup $r3;
        org.spongycastle.crypto.digests.SHA256Digest $r4;
        java.security.SecureRandom $r5;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        $r4 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void <init>(java.lang.String,char[],org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r1, $r2, $r3, $r4, $r5);

        return;
    }
    public void <init>(java.lang.String, char[], org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup, org.spongycastle.crypto.Digest, java.security.SecureRandom)
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.lang.String $r1;
        char[] $r2;
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup $r3;
        org.spongycastle.crypto.Digest $r4;
        java.security.SecureRandom $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;
        java.math.BigInteger $r7;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;

        $r4 := @parameter3: org.spongycastle.crypto.Digest;

        $r5 := @parameter4: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r1, "participantId");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r2, "password");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r3, "p");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r4, "digest");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r5, "random");

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Password must not be empty.");

        throw $r6;

     label1:
        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId> = $r1;

        $i0 = lengthof $r2;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: char[] copyOf(char[],int)>($r2, $i0);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: char[] password> = $r2;

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getP()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p> = $r7;

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getQ()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q> = $r7;

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getG()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g> = $r7;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest> = $r4;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random> = $r5;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 0;

        return;
    }
    public java.math.BigInteger calculateKeyingMaterial()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.math.BigInteger $r1, $r2, $r7, $r8, $r9, $r10;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        char[] $r6;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 50 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key already calculated for ");

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 >= 40 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round2 payload must be validated prior to creating key for ");

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: char[] password>;

        $r7 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateS(char[])>($r6);

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: char[] password>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(char[],char)>($r6, 0);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: char[] password> = null;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        $r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2>;

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger b>;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateKeyingMaterial(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r8, $r9, $r10, $r1, $r7, $r2);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x1> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger b> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 50;

        return $r1;
    }
    public org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload createRound1PayloadToSend()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.math.BigInteger $r4, $r6, $r7, $r8, $r9;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.Digest $r10;
        java.math.BigInteger[] $r11, $r12;
        org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload $r13;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 10 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round1 payload already created for ");

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random>;

        $r4 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger generateX1(java.math.BigInteger,java.security.SecureRandom)>($r4, $r5);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x1> = $r4;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random>;

        $r4 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger generateX2(java.math.BigInteger,java.security.SecureRandom)>($r4, $r5);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2> = $r4;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x1>;

        $r4 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateGx(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r4, $r6, $r7);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1> = $r4;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2>;

        $r4 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateGx(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r4, $r6, $r7);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2> = $r4;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x1>;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random>;

        $r11 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger[] calculateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r4, $r6, $r7, $r8, $r9, $r3, $r10, $r5);

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2>;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random>;

        $r12 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger[] calculateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r4, $r6, $r7, $r8, $r9, $r3, $r10, $r5);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 10;

        $r13 = new org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2>;

        specialinvoke $r13.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: void <init>(java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger[],java.math.BigInteger[])>($r3, $r4, $r6, $r11, $r12);

        return $r13;
    }
    public org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload createRound2PayloadToSend()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.security.SecureRandom $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.math.BigInteger $r5, $r6, $r7, $r8, $r10;
        char[] $r9;
        org.spongycastle.crypto.Digest $r11;
        java.math.BigInteger[] $r12;
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload $r13;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 30 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round2 payload already created for ");

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 >= 20 goto label2;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round1 payload must be validated prior to creating Round2 payload for ");

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        $r5 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateGA(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, $r7, $r8);

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: char[] password>;

        $r6 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateS(char[])>($r9);

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger x2>;

        $r6 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateX2s(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r8, $r6);

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r7 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateA(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r8, $r5, $r6);

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r11 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.security.SecureRandom random>;

        $r12 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger[] calculateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r8, $r10, $r5, $r7, $r6, $r4, $r11, $r1);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 30;

        $r13 = new org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        specialinvoke $r13.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: void <init>(java.lang.String,java.math.BigInteger,java.math.BigInteger[])>($r4, $r7, $r12);

        return $r13;
    }
    public org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload createRound3PayloadToSend(java.math.BigInteger)
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r10;
        org.spongycastle.crypto.Digest $r5;
        int $i0;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8, $r9;
        org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload $r11;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: java.math.BigInteger;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 60 goto label1;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round3 payload already created for ");

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 >= 50 goto label2;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keying material must be calculated prior to creating Round3 payload for ");

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label2:
        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String partnerParticipantId>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2>;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3>;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        $r1 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateMacTag(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.Digest)>($r8, $r9, $r10, $r2, $r3, $r4, $r1, $r5);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 60;

        $r11 = new org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        specialinvoke $r11.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: void <init>(java.lang.String,java.math.BigInteger)>($r8, $r1);

        return $r11;
    }
    public int getState()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        return i0;
    }
    public void validateRound1PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload $r1;
        java.math.BigInteger $r2, $r3, $r11, $r12;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7, $r10;
        java.math.BigInteger[] $r8, $r9;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 20 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation already attempted for round1 payload for");

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label1:
        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.lang.String getParticipantId()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String partnerParticipantId> = $r7;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx1()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3> = $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx2()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4> = $r2;

        $r8 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX1()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX2()>();

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.lang.String getParticipantId()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateParticipantIdsDiffer(java.lang.String,java.lang.String)>($r7, $r10);

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateGx4(java.math.BigInteger)>($r2);

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r11 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r12 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3>;

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.lang.String getParticipantId()>();

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger[],java.lang.String,org.spongycastle.crypto.Digest)>($r3, $r11, $r12, $r2, $r8, $r7, $r4);

        $r11 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r12 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger g>;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.lang.String getParticipantId()>();

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger[],java.lang.String,org.spongycastle.crypto.Digest)>($r11, $r12, $r2, $r3, $r9, $r7, $r4);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 20;

        return;
    }
    public void validateRound2PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r11;
        java.math.BigInteger $r6, $r7, $r8, $r9;
        java.math.BigInteger[] $r10;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 40 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation already attempted for round2 payload for");

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 >= 20 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Round1 payload must be validated prior to validating Round2 payload for ");

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2>;

        $r6 = staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: java.math.BigInteger calculateGA(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r8, $r9);

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger getA()>();

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger b> = $r7;

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] getKnowledgeProofForX2s()>();

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r11 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.lang.String getParticipantId()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateParticipantIdsDiffer(java.lang.String,java.lang.String)>($r5, $r11);

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String partnerParticipantId>;

        $r11 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.lang.String getParticipantId()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateParticipantIdsEqual(java.lang.String,java.lang.String)>($r5, $r11);

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateGa(java.math.BigInteger)>($r6);

        $r7 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger p>;

        $r8 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger q>;

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger b>;

        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.lang.String getParticipantId()>();

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger[],java.lang.String,org.spongycastle.crypto.Digest)>($r7, $r8, $r6, $r9, $r10, $r5, $r2);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 40;

        return;
    }
    public void validateRound3PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload, java.math.BigInteger) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r0;
        org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload $r1;
        java.math.BigInteger $r2, $r3, $r4, $r5, $r11, $r12;
        org.spongycastle.crypto.Digest $r6;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, $r10;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r1 := @parameter0: org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload;

        $r2 := @parameter1: java.math.BigInteger;

        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 < 70 goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation already attempted for round3 payload for");

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label1:
        $i0 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state>;

        if $i0 >= 50 goto label2;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keying material must be calculated validated prior to validating Round3 payload for ");

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: java.lang.String getParticipantId()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateParticipantIdsDiffer(java.lang.String,java.lang.String)>($r9, $r10);

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String partnerParticipantId>;

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: java.lang.String getParticipantId()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateParticipantIdsEqual(java.lang.String,java.lang.String)>($r9, $r10);

        $r9 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String participantId>;

        $r10 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.lang.String partnerParticipantId>;

        $r11 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1>;

        $r3 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2>;

        $r4 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3>;

        $r5 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4>;

        $r6 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.Digest digest>;

        $r12 = virtualinvoke $r1.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: java.math.BigInteger getMacTag()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateMacTag(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.Digest,java.math.BigInteger)>($r9, $r10, $r11, $r3, $r4, $r5, $r2, $r6, $r12);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx1> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx2> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx3> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger gx4> = null;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: int state> = 70;

        return;
    }
