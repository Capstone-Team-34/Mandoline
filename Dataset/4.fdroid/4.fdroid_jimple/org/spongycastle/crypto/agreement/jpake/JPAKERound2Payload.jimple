org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload extends java.lang.Object
private final java.math.BigInteger a
private final java.math.BigInteger[] knowledgeProofForX2s
private final java.lang.String participantId
    public void <init>(java.lang.String, java.math.BigInteger, java.math.BigInteger[])
    {
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload r0;
        java.lang.String $r1;
        java.math.BigInteger $r2;
        java.math.BigInteger[] $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r1, "participantId");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r2, "a");

        staticinvoke <org.spongycastle.crypto.agreement.jpake.JPAKEUtil: void validateNotNull(java.lang.Object,java.lang.String)>($r3, "knowledgeProofForX2s");

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.lang.String participantId> = $r1;

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger a> = $r2;

        $i0 = lengthof $r3;

        $r3 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>($r3, $i0);

        r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] knowledgeProofForX2s> = $r3;

        return;
    }
    public java.math.BigInteger getA()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger a>;

        return r1;
    }
    public java.math.BigInteger[] getKnowledgeProofForX2s()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload r0;
        java.math.BigInteger[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        $r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] knowledgeProofForX2s>;

        $r2 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] knowledgeProofForX2s>;

        $i0 = lengthof $r2;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>($r1, $i0);

        return $r1;
    }
    public java.lang.String getParticipantId()
    {
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;

        r1 = r0.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.lang.String participantId>;

        return r1;
    }
