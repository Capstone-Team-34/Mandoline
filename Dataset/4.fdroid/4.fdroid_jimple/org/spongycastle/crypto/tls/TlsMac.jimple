org.spongycastle.crypto.tls.TlsMac extends java.lang.Object
protected org.spongycastle.crypto.tls.TlsContext context
protected int digestBlockSize
protected int digestOverhead
protected org.spongycastle.crypto.Mac mac
protected int macLength
protected byte[] secret
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.Digest, byte[], int, int)
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.Digest $r2;
        byte[] $r3;
        int $i0, $i1;
        org.spongycastle.crypto.params.KeyParameter r4;
        boolean $z0;
        org.spongycastle.crypto.tls.SSL3Mac $r5;
        org.spongycastle.crypto.Mac $r6;
        org.spongycastle.crypto.tls.SecurityParameters $r7;
        org.spongycastle.crypto.macs.HMac $r8;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        r4 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke r4.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, $i0, $i1);

        $r3 = virtualinvoke r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.tls.TlsMac: byte[] secret> = $r3;

        $z0 = $r2 instanceof org.spongycastle.crypto.digests.LongDigest;

        if $z0 == 0 goto label3;

        r0.<org.spongycastle.crypto.tls.TlsMac: int digestBlockSize> = 128;

        r0.<org.spongycastle.crypto.tls.TlsMac: int digestOverhead> = 16;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r1);

        if $z0 == 0 goto label4;

        $r5 = new org.spongycastle.crypto.tls.SSL3Mac;

        specialinvoke $r5.<org.spongycastle.crypto.tls.SSL3Mac: void <init>(org.spongycastle.crypto.Digest)>($r2);

        r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac> = $r5;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        if $i0 != 20 goto label2;

        r0.<org.spongycastle.crypto.tls.TlsMac: int digestOverhead> = 4;

     label2:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>(r4);

        $r6 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        $i0 = interfaceinvoke $r6.<org.spongycastle.crypto.Mac: int getMacSize()>();

        r0.<org.spongycastle.crypto.tls.TlsMac: int macLength> = $i0;

        $r7 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $z0 = $r7.<org.spongycastle.crypto.tls.SecurityParameters: boolean truncatedHMac>;

        if $z0 == 0 goto label5;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsMac: int macLength>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 10);

        r0.<org.spongycastle.crypto.tls.TlsMac: int macLength> = $i0;

        return;

     label3:
        r0.<org.spongycastle.crypto.tls.TlsMac: int digestBlockSize> = 64;

        r0.<org.spongycastle.crypto.tls.TlsMac: int digestOverhead> = 8;

        goto label1;

     label4:
        $r8 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke $r8.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r2);

        r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac> = $r8;

        goto label2;

     label5:
        return;
    }
    public byte[] calculateMac(long, short, byte[], int, int)
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        long $l0;
        short $s1;
        byte[] $r1, r2;
        int $i2, $i3, $i4;
        org.spongycastle.crypto.tls.TlsContext $r3;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        boolean $z0;
        byte $b5;
        org.spongycastle.crypto.Mac $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.tls.TlsContext context>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isSSL()>();

        if $z0 == 0 goto label3;

        $b5 = 11;

     label1:
        r2 = newarray (byte)[$b5];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint64(long,byte[],int)>($l0, r2, 0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>($s1, r2, 8);

        if $z0 != 0 goto label2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion,byte[],int)>($r4, r2, 9);

     label2:
        $i4 = lengthof r2;

        $i4 = $i4 + -2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,byte[],int)>($i3, r2, $i4);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        $i4 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r2, 0, $i4);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i2, $i3);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r1 = newarray (byte)[$i2];

        $r5 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsMac: byte[] truncate(byte[])>($r1);

        return $r1;

     label3:
        $b5 = 13;

        goto label1;
    }
    public byte[] calculateMacConstantTime(long, short, byte[], int, int, int, byte[])
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        long $l0;
        short $s1;
        byte[] $r1, $r2;
        int $i2, $i3, $i4;
        org.spongycastle.crypto.tls.TlsContext $r3;
        boolean $z0;
        byte b5;
        org.spongycastle.crypto.Mac $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $r2 := @parameter6: byte[];

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r1, $i2, $i3);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.tls.TlsContext context>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r3);

        if $z0 == 0 goto label3;

        b5 = 11;

     label1:
        $i2 = b5 + $i4;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsMac: int getDigestBlockCount(int)>($i2);

        $i3 = b5 + $i3;

        $i3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsMac: int getDigestBlockCount(int)>($i3);

        $i2 = $i2 - $i3;

     label2:
        $i2 = $i2 + -1;

        if $i2 < 0 goto label4;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        $i3 = r0.<org.spongycastle.crypto.tls.TlsMac: int digestBlockSize>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r2, 0, $i3);

        goto label2;

     label3:
        b5 = 13;

        goto label1;

     label4:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        b5 = $r2[0];

        interfaceinvoke $r4.<org.spongycastle.crypto.Mac: void update(byte)>(b5);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsMac: org.spongycastle.crypto.Mac mac>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Mac: void reset()>();

        return $r1;
    }
    protected int getDigestBlockCount(int)
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.crypto.tls.TlsMac: int digestOverhead>;

        $i1 = $i1 + $i0;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsMac: int digestBlockSize>;

        $i0 = $i1 / $i0;

        return $i0;
    }
    public byte[] getMACSecret()
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        r1 = r0.<org.spongycastle.crypto.tls.TlsMac: byte[] secret>;

        return r1;
    }
    public int getSize()
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        i0 = r0.<org.spongycastle.crypto.tls.TlsMac: int macLength>;

        return i0;
    }
    protected byte[] truncate(byte[])
    {
        org.spongycastle.crypto.tls.TlsMac r0;
        int $i0, $i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsMac;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsMac: int macLength>;

        if $i1 > $i0 goto label1;

        return $r1;

     label1:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsMac: int macLength>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);

        return $r1;
    }
