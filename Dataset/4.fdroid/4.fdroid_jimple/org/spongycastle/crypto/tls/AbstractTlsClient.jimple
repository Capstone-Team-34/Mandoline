org.spongycastle.crypto.tls.AbstractTlsClient extends org.spongycastle.crypto.tls.AbstractTlsPeer implements org.spongycastle.crypto.tls.TlsClient
protected org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory
protected short[] clientECPointFormats
protected org.spongycastle.crypto.tls.TlsClientContext context
protected int[] namedCurves
protected int selectedCipherSuite
protected short selectedCompressionMethod
protected short[] serverECPointFormats
protected java.util.Vector supportedSignatureAlgorithms
    public void <init>()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.DefaultTlsCipherFactory $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 = new org.spongycastle.crypto.tls.DefaultTlsCipherFactory;

        specialinvoke $r1.<org.spongycastle.crypto.tls.DefaultTlsCipherFactory: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)>($r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.TlsCipherFactory $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCipherFactory;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsPeer: void <init>()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory> = $r1;

        return;
    }
    protected boolean allowUnexpectedServerExtension(java.lang.Integer, byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        java.lang.Integer $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: java.lang.Integer;

        $r2 := @parameter1: byte[];

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        lookupswitch($i0)
        {
            case 10: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int[] readSupportedEllipticCurvesExtension(byte[])>($r2);

        return 1;
    }
    protected void checkForUnexpectedServerExtension(java.util.Hashtable, java.lang.Integer) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        java.util.Hashtable $r1;
        java.lang.Integer $r2;
        byte[] $r3;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: java.util.Hashtable;

        $r2 := @parameter1: java.lang.Integer;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r1, $r2);

        if $r3 == null goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: boolean allowUnexpectedServerExtension(java.lang.Integer,byte[])>($r2, $r3);

        if $z0 != 0 goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label1:
        return;
    }
    public org.spongycastle.crypto.tls.TlsCipher getCipher() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.TlsClientContext $r1;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsCipherFactory $r2;
        org.spongycastle.crypto.tls.TlsCipher $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int selectedCipherSuite>;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getEncryptionAlgorithm(int)>($i0);

        $i1 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int selectedCipherSuite>;

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getMACAlgorithm(int)>($i1);

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory>;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.TlsClientContext context>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCipherFactory: org.spongycastle.crypto.tls.TlsCipher createCipher(org.spongycastle.crypto.tls.TlsContext,int,int)>($r1, $i0, $i1);

        return $r3;
    }
    public java.util.Hashtable getClientExtensions() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        java.util.Hashtable r1, $r5;
        org.spongycastle.crypto.tls.TlsClientContext $r2;
        org.spongycastle.crypto.tls.ProtocolVersion $r3;
        boolean $z0;
        java.util.Vector $r4;
        int[] $r6;
        short[] $r7;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        r1 = null;

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.TlsClientContext context>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsClientContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSignatureAlgorithmsExtensionAllowed(org.spongycastle.crypto.tls.ProtocolVersion)>($r3);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector getDefaultSupportedSignatureAlgorithms()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: java.util.Vector supportedSignatureAlgorithms> = $r4;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>(null);

        r1 = $r5;

        $r4 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void addSignatureAlgorithmsExtension(java.util.Hashtable,java.util.Vector)>($r5, $r4);

     label1:
        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int[] getCipherSuites()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean containsECCCipherSuites(int[])>($r6);

        if $z0 == 0 goto label2;

        $r6 = newarray (int)[2];

        $r6[0] = 23;

        $r6[1] = 24;

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int[] namedCurves> = $r6;

        $r7 = newarray (short)[3];

        $r7[0] = 0;

        $r7[1] = 1;

        $r7[2] = 2;

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: short[] clientECPointFormats> = $r7;

        r1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>(r1);

        $r6 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int[] namedCurves>;

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void addSupportedEllipticCurvesExtension(java.util.Hashtable,int[])>(r1, $r6);

        $r7 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: short[] clientECPointFormats>;

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void addSupportedPointFormatsExtension(java.util.Hashtable,short[])>(r1, $r7);

     label2:
        return r1;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getClientHelloRecordLayerVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        return $r1;
    }
    public java.util.Vector getClientSupplementalData() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        return null;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        return r1;
    }
    public org.spongycastle.crypto.tls.TlsCompression getCompression() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        org.spongycastle.crypto.tls.TlsNullCompression $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $s0 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: short selectedCompressionMethod>;

        lookupswitch($s0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label2:
        $r2 = new org.spongycastle.crypto.tls.TlsNullCompression;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsNullCompression: void <init>()>();

        return $r2;
    }
    public short[] getCompressionMethods()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        short[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 = newarray (short)[1];

        $r1[0] = 0;

        return $r1;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv10>;

        return r1;
    }
    public org.spongycastle.crypto.tls.TlsSession getSessionToResume()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        return null;
    }
    public void init(org.spongycastle.crypto.tls.TlsClientContext)
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.TlsClientContext $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsClientContext;

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.TlsClientContext context> = $r1;

        return;
    }
    public boolean isFallback()
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        return 0;
    }
    public void notifyNewSessionTicket(org.spongycastle.crypto.tls.NewSessionTicket) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.NewSessionTicket $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.NewSessionTicket;

        return;
    }
    public void notifySelectedCipherSuite(int)
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int selectedCipherSuite> = $i0;

        return;
    }
    public void notifySelectedCompressionMethod(short)
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $s0 := @parameter0: short;

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: short selectedCompressionMethod> = $s0;

        return;
    }
    public void notifyServerVersion(org.spongycastle.crypto.tls.ProtocolVersion) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(70);

        throw $r3;

     label1:
        return;
    }
    public void notifySessionID(byte[])
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: byte[];

        return;
    }
    public void processServerExtensions(java.util.Hashtable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        java.util.Hashtable $r1;
        java.lang.Integer $r2;
        int $i0;
        boolean $z0;
        short[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: java.util.Hashtable;

        if $r1 == null goto label2;

        $r2 = <org.spongycastle.crypto.tls.TlsUtils: java.lang.Integer EXT_signature_algorithms>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void checkForUnexpectedServerExtension(java.util.Hashtable,java.lang.Integer)>($r1, $r2);

        $r2 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_elliptic_curves>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void checkForUnexpectedServerExtension(java.util.Hashtable,java.lang.Integer)>($r1, $r2);

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsClient: int selectedCipherSuite>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isECCCipherSuite(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: short[] getSupportedPointFormatsExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsClient: short[] serverECPointFormats> = $r3;

        return;

     label1:
        $r2 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_ec_point_formats>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void checkForUnexpectedServerExtension(java.util.Hashtable,java.lang.Integer)>($r1, $r2);

     label2:
        return;
    }
    public void processServerSupplementalData(java.util.Vector) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsClient r0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsClient;

        $r1 := @parameter0: java.util.Vector;

        if $r1 == null goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label1:
        return;
    }
