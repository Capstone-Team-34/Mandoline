org.spongycastle.crypto.tls.TlsUtils extends java.lang.Object
public static final byte[] EMPTY_BYTES
public static final int[] EMPTY_INTS
public static final long[] EMPTY_LONGS
public static final short[] EMPTY_SHORTS
public static final java.lang.Integer EXT_signature_algorithms
static final byte[][] SSL3_CONST
static final byte[] SSL_CLIENT
static final byte[] SSL_SERVER
    static void <clinit>()
    {
        byte[] $r0;
        short[] $r1;
        int[] $r2;
        long[] $r3;
        java.lang.Integer $r4;
        byte[][] $r5;

        $r0 = newarray (byte)[0];

        <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES> = $r0;

        $r1 = newarray (short)[0];

        <org.spongycastle.crypto.tls.TlsUtils: short[] EMPTY_SHORTS> = $r1;

        $r2 = newarray (int)[0];

        <org.spongycastle.crypto.tls.TlsUtils: int[] EMPTY_INTS> = $r2;

        $r3 = newarray (long)[0];

        <org.spongycastle.crypto.tls.TlsUtils: long[] EMPTY_LONGS> = $r3;

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(13);

        <org.spongycastle.crypto.tls.TlsUtils: java.lang.Integer EXT_signature_algorithms> = $r4;

        $r0 = newarray (byte)[4];

        $r0[0] = 67;

        $r0[1] = 76;

        $r0[2] = 78;

        $r0[3] = 84;

        <org.spongycastle.crypto.tls.TlsUtils: byte[] SSL_CLIENT> = $r0;

        $r0 = newarray (byte)[4];

        $r0[0] = 83;

        $r0[1] = 82;

        $r0[2] = 86;

        $r0[3] = 82;

        <org.spongycastle.crypto.tls.TlsUtils: byte[] SSL_SERVER> = $r0;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[][] genSSL3Const()>();

        <org.spongycastle.crypto.tls.TlsUtils: byte[][] SSL3_CONST> = $r5;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] PRF(org.spongycastle.crypto.tls.TlsContext, byte[], java.lang.String, byte[], int)
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        byte[] $r1, $r3, $r6;
        java.lang.String $r2;
        int $i0, $i1;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        org.spongycastle.crypto.tls.SecurityParameters $r7;
        org.spongycastle.crypto.Digest $r8;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: byte[];

        $i0 := @parameter4: int;

        $r4 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isSSL()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No PRF available for SSLv3 session");

        throw $r5;

     label1:
        $r6 = staticinvoke <org.spongycastle.util.Strings: byte[] toByteArray(java.lang.String)>($r2);

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] concat(byte[],byte[])>($r6, $r3);

        $r7 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $i1 = virtualinvoke $r7.<org.spongycastle.crypto.tls.SecurityParameters: int getPrfAlgorithm()>();

        if $i1 != 0 goto label2;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF_legacy(byte[],byte[],byte[],int)>($r1, $r6, $r3, $i0);

        return $r1;

     label2:
        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createPRFHash(int)>($i1);

        $r6 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void hmac_hash(org.spongycastle.crypto.Digest,byte[],byte[],byte[])>($r8, $r1, $r3, $r6);

        return $r6;
    }
    public static byte[] PRF_legacy(byte[], java.lang.String, byte[], int)
    {
        byte[] $r0, $r2, $r3;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $r3 = staticinvoke <org.spongycastle.util.Strings: byte[] toByteArray(java.lang.String)>($r1);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] concat(byte[],byte[])>($r3, $r2);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF_legacy(byte[],byte[],byte[],int)>($r0, $r3, $r2, $i0);

        return $r0;
    }
    static byte[] PRF_legacy(byte[], byte[], byte[], int)
    {
        byte[] $r0, $r1, $r2, r3, r4;
        int $i0, i1, $i2;
        org.spongycastle.crypto.Digest $r5;
        byte $b3, $b4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        i1 = lengthof $r0;

        i1 = i1 + 1;

        i1 = i1 / 2;

        $r1 = newarray (byte)[i1];

        r4 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, i1);

        $i2 = lengthof $r0;

        $i2 = $i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i2, r4, 0, i1);

        $r0 = newarray (byte)[$i0];

        r3 = newarray (byte)[$i0];

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void hmac_hash(org.spongycastle.crypto.Digest,byte[],byte[],byte[])>($r5, $r1, $r2, $r0);

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void hmac_hash(org.spongycastle.crypto.Digest,byte[],byte[],byte[])>($r5, r4, $r2, r3);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $b3 = $r0[i1];

        $b4 = r3[i1];

        $i2 = $b3 ^ $b4;

        $b3 = (byte) $i2;

        $r0[i1] = $b3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }
    public static void addSignatureAlgorithmsExtension(java.util.Hashtable, java.util.Vector) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.util.Vector $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: java.util.Vector;

        $r2 = <org.spongycastle.crypto.tls.TlsUtils: java.lang.Integer EXT_signature_algorithms>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] createSignatureAlgorithmsExtension(java.util.Vector)>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    static byte[] calculateKeyBlock(org.spongycastle.crypto.tls.TlsContext, int)
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        int $i0;
        org.spongycastle.crypto.tls.SecurityParameters $r1;
        byte[] $r2, $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $i0 := @parameter1: int;

        $r1 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getMasterSecret()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getServerRandom()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getClientRandom()>();

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] concat(byte[],byte[])>($r3, $r4);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateKeyBlock_SSL(byte[],byte[],int)>($r2, $r3, $i0);

        return $r2;

     label1:
        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF(org.spongycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int)>($r0, $r2, "key expansion", $r3, $i0);

        return $r2;
    }
    static byte[] calculateKeyBlock_SSL(byte[], byte[], int)
    {
        byte[] $r0, $r1, r2, r3, r4;
        int $i0, $i1, $i2, i3, $i4;
        org.spongycastle.crypto.Digest $r5, $r6;
        byte[][] $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(1);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        $i1 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i2 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i2];

        $i2 = $i0 + $i1;

        r4 = newarray (byte)[$i2];

        $i2 = 0;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $r7 = <org.spongycastle.crypto.tls.TlsUtils: byte[][] SSL3_CONST>;

        r3 = $r7[$i2];

        $i4 = lengthof r3;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r3, 0, $i4);

        $i4 = lengthof $r0;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r0, 0, $i4);

        $i4 = lengthof $r1;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i4);

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i4 = lengthof $r0;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r0, 0, $i4);

        $i4 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i4);

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r4, i3);

        i3 = i3 + $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r4, 0, $i0);

        return $r0;
    }
    static byte[] calculateMasterSecret(org.spongycastle.crypto.tls.TlsContext, byte[])
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        byte[] $r1, $r3, $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r2;
        boolean $z0;
        java.lang.String r5;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: byte[];

        $r2 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $z0 = $r2.<org.spongycastle.crypto.tls.SecurityParameters: boolean extendedMasterSecret>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getSessionHash()>();

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateMasterSecret_SSL(byte[],byte[])>($r1, $r3);

        return $r1;

     label2:
        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getClientRandom()>();

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getServerRandom()>();

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] concat(byte[],byte[])>($r3, $r4);

        goto label1;

     label3:
        $z0 = $r2.<org.spongycastle.crypto.tls.SecurityParameters: boolean extendedMasterSecret>;

        if $z0 == 0 goto label5;

        r5 = "extended master secret";

     label4:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF(org.spongycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int)>($r0, $r1, r5, $r3, 48);

        return $r1;

     label5:
        r5 = "master secret";

        goto label4;
    }
    static byte[] calculateMasterSecret_SSL(byte[], byte[])
    {
        byte[] $r0, $r1, r2, r3, r4;
        org.spongycastle.crypto.Digest $r5, $r6;
        int $i0, $i1, i2, $i3;
        byte[][] $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(1);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i1];

        $i1 = $i0 * 3;

        r2 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        if i2 >= 3 goto label2;

        $r7 = <org.spongycastle.crypto.tls.TlsUtils: byte[][] SSL3_CONST>;

        r4 = $r7[i2];

        $i3 = lengthof r4;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i3);

        $i3 = lengthof $r0;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r0, 0, $i3);

        $i3 = lengthof $r1;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i3);

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i3 = lengthof $r0;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r0, 0, $i3);

        $i3 = lengthof r3;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r3, 0, $i3);

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, $i1);

        $i1 = $i1 + $i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }
    static byte[] calculateVerifyData(org.spongycastle.crypto.tls.TlsContext, java.lang.String, byte[])
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        java.lang.String $r1;
        byte[] r2, $r4;
        boolean $z0;
        org.spongycastle.crypto.tls.SecurityParameters $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r3 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getMasterSecret()>();

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.tls.SecurityParameters: int getVerifyDataLength()>();

        r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF(org.spongycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int)>($r0, $r4, $r1, r2, $i0);

        return r2;
    }
    public static void checkUint16(int) throws java.io.IOException
    {
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint16(int)>($i0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint16(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint16(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint24(int) throws java.io.IOException
    {
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint24(int)>($i0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint24(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint24(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint32(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint32(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint48(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint48(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint64(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint64(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint8(int) throws java.io.IOException
    {
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint8(int)>($i0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint8(long) throws java.io.IOException
    {
        long $l0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint8(long)>($l0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static void checkUint8(short) throws java.io.IOException
    {
        short $s0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $s0 := @parameter0: short;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint8(short)>($s0);

        if $z0 != 0 goto label1;

        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label1:
        return;
    }
    public static org.spongycastle.crypto.Digest cloneHash(short, org.spongycastle.crypto.Digest)
    {
        short $s0;
        org.spongycastle.crypto.Digest r0;
        java.lang.IllegalArgumentException $r1;
        org.spongycastle.crypto.digests.MD5Digest $r2, r3;
        org.spongycastle.crypto.digests.SHA1Digest $r4, r5;
        org.spongycastle.crypto.digests.SHA224Digest $r6, r7;
        org.spongycastle.crypto.digests.SHA256Digest $r8, r9;
        org.spongycastle.crypto.digests.SHA384Digest $r10, r11;
        org.spongycastle.crypto.digests.SHA512Digest $r12, r13;

        $s0 := @parameter0: short;

        r0 := @parameter1: org.spongycastle.crypto.Digest;

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown HashAlgorithm");

        throw $r1;

     label2:
        $r2 = new org.spongycastle.crypto.digests.MD5Digest;

        r3 = (org.spongycastle.crypto.digests.MD5Digest) r0;

        specialinvoke $r2.<org.spongycastle.crypto.digests.MD5Digest: void <init>(org.spongycastle.crypto.digests.MD5Digest)>(r3);

        return $r2;

     label3:
        $r4 = new org.spongycastle.crypto.digests.SHA1Digest;

        r5 = (org.spongycastle.crypto.digests.SHA1Digest) r0;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA1Digest: void <init>(org.spongycastle.crypto.digests.SHA1Digest)>(r5);

        return $r4;

     label4:
        $r6 = new org.spongycastle.crypto.digests.SHA224Digest;

        r7 = (org.spongycastle.crypto.digests.SHA224Digest) r0;

        specialinvoke $r6.<org.spongycastle.crypto.digests.SHA224Digest: void <init>(org.spongycastle.crypto.digests.SHA224Digest)>(r7);

        return $r6;

     label5:
        $r8 = new org.spongycastle.crypto.digests.SHA256Digest;

        r9 = (org.spongycastle.crypto.digests.SHA256Digest) r0;

        specialinvoke $r8.<org.spongycastle.crypto.digests.SHA256Digest: void <init>(org.spongycastle.crypto.digests.SHA256Digest)>(r9);

        return $r8;

     label6:
        $r10 = new org.spongycastle.crypto.digests.SHA384Digest;

        r11 = (org.spongycastle.crypto.digests.SHA384Digest) r0;

        specialinvoke $r10.<org.spongycastle.crypto.digests.SHA384Digest: void <init>(org.spongycastle.crypto.digests.SHA384Digest)>(r11);

        return $r10;

     label7:
        $r12 = new org.spongycastle.crypto.digests.SHA512Digest;

        r13 = (org.spongycastle.crypto.digests.SHA512Digest) r0;

        specialinvoke $r12.<org.spongycastle.crypto.digests.SHA512Digest: void <init>(org.spongycastle.crypto.digests.SHA512Digest)>(r13);

        return $r12;
    }
    public static org.spongycastle.crypto.Digest clonePRFHash(int, org.spongycastle.crypto.Digest)
    {
        int $i0;
        org.spongycastle.crypto.Digest r0;
        short $s1;
        org.spongycastle.crypto.tls.CombinedHash $r1, r2;

        $i0 := @parameter0: int;

        r0 := @parameter1: org.spongycastle.crypto.Digest;

        lookupswitch($i0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short getHashAlgorithmForPRFAlgorithm(int)>($i0);

        r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>($s1, r0);

        return r0;

     label2:
        $r1 = new org.spongycastle.crypto.tls.CombinedHash;

        r2 = (org.spongycastle.crypto.tls.CombinedHash) r0;

        specialinvoke $r1.<org.spongycastle.crypto.tls.CombinedHash: void <init>(org.spongycastle.crypto.tls.CombinedHash)>(r2);

        return $r1;
    }
    static byte[] concat(byte[], byte[])
    {
        byte[] $r0, $r1, r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        return r2;
    }
    public static org.spongycastle.crypto.Digest createHash(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm)
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r0;
        org.spongycastle.crypto.tls.CombinedHash $r1;
        short $s0;
        org.spongycastle.crypto.Digest $r2;

        $r0 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        if $r0 != null goto label1;

        $r1 = new org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke $r1.<org.spongycastle.crypto.tls.CombinedHash: void <init>()>();

        return $r1;

     label1:
        $s0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s0);

        return $r2;
    }
    public static org.spongycastle.crypto.Digest createHash(short)
    {
        short $s0;
        java.lang.IllegalArgumentException $r0;
        org.spongycastle.crypto.digests.MD5Digest $r1;
        org.spongycastle.crypto.digests.SHA1Digest $r2;
        org.spongycastle.crypto.digests.SHA224Digest $r3;
        org.spongycastle.crypto.digests.SHA256Digest $r4;
        org.spongycastle.crypto.digests.SHA384Digest $r5;
        org.spongycastle.crypto.digests.SHA512Digest $r6;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown HashAlgorithm");

        throw $r0;

     label2:
        $r1 = new org.spongycastle.crypto.digests.MD5Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.MD5Digest: void <init>()>();

        return $r1;

     label3:
        $r2 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        return $r2;

     label4:
        $r3 = new org.spongycastle.crypto.digests.SHA224Digest;

        specialinvoke $r3.<org.spongycastle.crypto.digests.SHA224Digest: void <init>()>();

        return $r3;

     label5:
        $r4 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r4.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        return $r4;

     label6:
        $r5 = new org.spongycastle.crypto.digests.SHA384Digest;

        specialinvoke $r5.<org.spongycastle.crypto.digests.SHA384Digest: void <init>()>();

        return $r5;

     label7:
        $r6 = new org.spongycastle.crypto.digests.SHA512Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.SHA512Digest: void <init>()>();

        return $r6;
    }
    public static org.spongycastle.crypto.Digest createPRFHash(int)
    {
        int $i0;
        short $s1;
        org.spongycastle.crypto.Digest $r0;
        org.spongycastle.crypto.tls.CombinedHash $r1;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short getHashAlgorithmForPRFAlgorithm(int)>($i0);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s1);

        return $r0;

     label2:
        $r1 = new org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke $r1.<org.spongycastle.crypto.tls.CombinedHash: void <init>()>();

        return $r1;
    }
    public static byte[] createSignatureAlgorithmsExtension(java.util.Vector) throws java.io.IOException
    {
        java.util.Vector $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Vector;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)>($r0, 0, r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static org.spongycastle.crypto.tls.TlsSigner createTlsSigner(short)
    {
        short $s0;
        java.lang.IllegalArgumentException $r0;
        org.spongycastle.crypto.tls.TlsDSSSigner $r1;
        org.spongycastle.crypto.tls.TlsECDSASigner $r2;
        org.spongycastle.crypto.tls.TlsRSASigner $r3;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 1: goto label4;
            case 2: goto label2;
            case 64: goto label3;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'clientCertificateType\' is not a type with signing capability");

        throw $r0;

     label2:
        $r1 = new org.spongycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        return $r1;

     label3:
        $r2 = new org.spongycastle.crypto.tls.TlsECDSASigner;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsECDSASigner: void <init>()>();

        return $r2;

     label4:
        $r3 = new org.spongycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsRSASigner: void <init>()>();

        return $r3;
    }
    public static byte[] encodeOpaque8(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        int $i0;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i0);

        $i0 = lengthof $r0;

        $b1 = (byte) $i0;

        $r0 = staticinvoke <org.spongycastle.util.Arrays: byte[] prepend(byte[],byte)>($r0, $b1);

        return $r0;
    }
    public static void encodeSupportedSignatureAlgorithms(java.util.Vector, boolean, java.io.OutputStream) throws java.io.IOException
    {
        java.util.Vector $r0;
        boolean $z0;
        java.io.OutputStream $r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r3;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r4;
        short $s2;

        $r0 := @parameter0: java.util.Vector;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.io.OutputStream;

        if $r0 == null goto label1;

        i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if i0 < 1 goto label1;

        i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if i0 < 32768 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'supportedSignatureAlgorithms\' must have length from 1 to (2^15 - 1)");

        throw $r2;

     label2:
        i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        i0 = i0 * 2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>(i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(i0, $r1);

        i0 = 0;

     label3:
        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label5;

        $r3 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r4 = (org.spongycastle.crypto.tls.SignatureAndHashAlgorithm) $r3;

        if $z0 != 0 goto label4;

        $s2 = virtualinvoke r4.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        if $s2 != 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SignatureAlgorithm.anonymous MUST NOT appear in the signature_algorithms extension");

        throw $r2;

     label4:
        virtualinvoke r4.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void encode(java.io.OutputStream)>($r1);

        i0 = i0 + 1;

        goto label3;

     label5:
        return;
    }
    public static byte[] encodeUint16ArrayWithUint16Length(int[]) throws java.io.IOException
    {
        int[] $r0;
        int i0;
        byte[] r1;

        $r0 := @parameter0: int[];

        i0 = lengthof $r0;

        i0 = i0 * 2;

        i0 = i0 + 2;

        r1 = newarray (byte)[i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16ArrayWithUint16Length(int[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static byte[] encodeUint8ArrayWithUint8Length(short[]) throws java.io.IOException
    {
        short[] $r0;
        byte[] r1;
        int $i0;

        $r0 := @parameter0: short[];

        $i0 = lengthof $r0;

        $i0 = $i0 + 1;

        r1 = newarray (byte)[$i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8ArrayWithUint8Length(short[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    private static byte[][] genSSL3Const()
    {
        byte[][] r0;
        byte[] r1;
        int i0, $i1;
        byte $b2;

        r0 = newarray (byte[])[10];

        i0 = 0;

     label1:
        if i0 >= 10 goto label2;

        $i1 = i0 + 1;

        r1 = newarray (byte)[$i1];

        $i1 = i0 + 65;

        $b2 = (byte) $i1;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r1, $b2);

        r0[i0] = r1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }
    public static int getCipherType(int) throws java.io.IOException
    {
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getEncryptionAlgorithm(int)>($i0);

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label3;
            case 15: goto label2;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            case 100: goto label4;
            case 101: goto label4;
            case 102: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        return 0;
    }
    static short getClientCertificateType(org.spongycastle.crypto.tls.Certificate, org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.Certificate $r0, $r1;
        java.lang.Exception r2;
        boolean $z0;
        org.spongycastle.asn1.x509.Certificate $r3;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.tls.TlsFatalAlert $r6;

        $r0 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r1 := @parameter1: org.spongycastle.crypto.tls.Certificate;

        $z0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return -1;

     label01:
        $r3 = virtualinvoke $r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label02:
        $r5 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r4);

        $z0 = virtualinvoke $r5.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

     label03:
        if $z0 == 0 goto label06;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label04:
        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r6;

     label05:
        r2 := @caughtexception;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(43, r2);

        throw $r6;

     label06:
        $z0 = $r5 instanceof org.spongycastle.crypto.params.RSAKeyParameters;

        if $z0 == 0 goto label09;

     label07:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r3, 128);

     label08:
        return 1;

     label09:
        $z0 = $r5 instanceof org.spongycastle.crypto.params.DSAPublicKeyParameters;

        if $z0 == 0 goto label12;

     label10:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r3, 128);

     label11:
        return 2;

     label12:
        $z0 = $r5 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        if $z0 == 0 goto label15;

     label13:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r3, 128);

     label14:
        return 64;

     label15:
        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label16:
        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(43);

        throw $r6;

     label17:
        nop;

        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Exception from label04 to label05 with label05;
        catch java.lang.Exception from label07 to label08 with label05;
        catch java.lang.Exception from label10 to label11 with label05;
        catch java.lang.Exception from label13 to label14 with label05;
        catch java.lang.Exception from label16 to label17 with label05;
    }
    public static java.util.Vector getDefaultDSSSignatureAlgorithms()
    {
        java.util.Vector $r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;

        $r1 = new org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        specialinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void <init>(short,short)>(2, 2);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector vectorOfOne(java.lang.Object)>($r1);

        return $r0;
    }
    public static java.util.Vector getDefaultECDSASignatureAlgorithms()
    {
        java.util.Vector $r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;

        $r1 = new org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        specialinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void <init>(short,short)>(2, 3);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector vectorOfOne(java.lang.Object)>($r1);

        return $r0;
    }
    public static java.util.Vector getDefaultRSASignatureAlgorithms()
    {
        java.util.Vector $r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;

        $r1 = new org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        specialinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void <init>(short,short)>(2, 1);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector vectorOfOne(java.lang.Object)>($r1);

        return $r0;
    }
    public static java.util.Vector getDefaultSupportedSignatureAlgorithms()
    {
        short[] r0, r2;
        java.util.Vector r1;
        short $s0, $s1;
        int i2, $i3, $i4;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r3;

        r0 = newarray (short)[5];

        r0[0] = 2;

        r0[1] = 3;

        r0[2] = 4;

        r0[3] = 5;

        r0[4] = 6;

        r2 = newarray (short)[3];

        r2[0] = 1;

        r2[1] = 2;

        r2[2] = 3;

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>()>();

        i2 = 0;

     label1:
        $i3 = lengthof r2;

        if i2 >= $i3 goto label4;

        $i3 = 0;

     label2:
        $i4 = lengthof r0;

        if $i3 >= $i4 goto label3;

        $r3 = new org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $s0 = r0[$i3];

        $s1 = r2[i2];

        specialinvoke $r3.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void <init>(short,short)>($s0, $s1);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }
    public static int getEncryptionAlgorithm(int) throws java.io.IOException
    {
        int $i0;
        byte $b1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $b1 = 8;

        lookupswitch($i0)
        {
            case 1: goto label18;
            case 2: goto label18;
            case 4: goto label19;
            case 5: goto label19;
            case 10: goto label02;
            case 13: goto label02;
            case 16: goto label02;
            case 19: goto label02;
            case 22: goto label02;
            case 24: goto label19;
            case 44: goto label18;
            case 45: goto label18;
            case 46: goto label18;
            case 47: goto label03;
            case 48: goto label03;
            case 49: goto label03;
            case 50: goto label03;
            case 51: goto label03;
            case 53: goto label08;
            case 54: goto label08;
            case 55: goto label08;
            case 56: goto label08;
            case 57: goto label08;
            case 59: goto label18;
            case 60: goto label03;
            case 61: goto label08;
            case 62: goto label03;
            case 63: goto label03;
            case 64: goto label03;
            case 65: goto label12;
            case 66: goto label12;
            case 67: goto label12;
            case 68: goto label12;
            case 69: goto label12;
            case 103: goto label03;
            case 104: goto label08;
            case 105: goto label08;
            case 106: goto label08;
            case 107: goto label08;
            case 132: goto label15;
            case 133: goto label15;
            case 134: goto label15;
            case 135: goto label15;
            case 136: goto label15;
            case 138: goto label19;
            case 139: goto label02;
            case 140: goto label03;
            case 141: goto label08;
            case 142: goto label19;
            case 143: goto label02;
            case 144: goto label03;
            case 145: goto label08;
            case 146: goto label19;
            case 147: goto label02;
            case 148: goto label03;
            case 149: goto label08;
            case 150: goto label21;
            case 151: goto label21;
            case 152: goto label21;
            case 153: goto label21;
            case 154: goto label21;
            case 156: goto label07;
            case 157: goto label11;
            case 158: goto label07;
            case 159: goto label11;
            case 160: goto label07;
            case 161: goto label11;
            case 162: goto label07;
            case 163: goto label11;
            case 164: goto label07;
            case 165: goto label11;
            case 168: goto label07;
            case 169: goto label11;
            case 170: goto label07;
            case 171: goto label11;
            case 172: goto label07;
            case 173: goto label11;
            case 174: goto label03;
            case 175: goto label08;
            case 176: goto label18;
            case 177: goto label18;
            case 178: goto label03;
            case 179: goto label08;
            case 180: goto label18;
            case 181: goto label18;
            case 182: goto label03;
            case 183: goto label08;
            case 184: goto label18;
            case 185: goto label18;
            case 186: goto label13;
            case 187: goto label13;
            case 188: goto label13;
            case 189: goto label13;
            case 190: goto label13;
            case 192: goto label15;
            case 193: goto label15;
            case 194: goto label15;
            case 195: goto label15;
            case 196: goto label15;
            case 49153: goto label18;
            case 49154: goto label19;
            case 49155: goto label02;
            case 49156: goto label03;
            case 49157: goto label08;
            case 49158: goto label18;
            case 49159: goto label19;
            case 49160: goto label02;
            case 49161: goto label03;
            case 49162: goto label08;
            case 49163: goto label18;
            case 49164: goto label19;
            case 49165: goto label02;
            case 49166: goto label03;
            case 49167: goto label08;
            case 49168: goto label18;
            case 49169: goto label19;
            case 49170: goto label02;
            case 49171: goto label03;
            case 49172: goto label08;
            case 49174: goto label19;
            case 49178: goto label02;
            case 49179: goto label02;
            case 49180: goto label02;
            case 49181: goto label03;
            case 49182: goto label03;
            case 49183: goto label03;
            case 49184: goto label08;
            case 49185: goto label08;
            case 49186: goto label08;
            case 49187: goto label03;
            case 49188: goto label08;
            case 49189: goto label03;
            case 49190: goto label08;
            case 49191: goto label03;
            case 49192: goto label08;
            case 49193: goto label03;
            case 49194: goto label08;
            case 49195: goto label07;
            case 49196: goto label11;
            case 49197: goto label07;
            case 49198: goto label11;
            case 49199: goto label07;
            case 49200: goto label11;
            case 49201: goto label07;
            case 49202: goto label11;
            case 49203: goto label19;
            case 49204: goto label02;
            case 49205: goto label03;
            case 49206: goto label08;
            case 49207: goto label03;
            case 49208: goto label08;
            case 49209: goto label18;
            case 49210: goto label18;
            case 49211: goto label18;
            case 49266: goto label13;
            case 49267: goto label15;
            case 49268: goto label13;
            case 49269: goto label15;
            case 49270: goto label13;
            case 49271: goto label15;
            case 49272: goto label13;
            case 49273: goto label15;
            case 49274: goto label14;
            case 49275: goto label16;
            case 49276: goto label14;
            case 49277: goto label16;
            case 49278: goto label14;
            case 49279: goto label16;
            case 49280: goto label14;
            case 49281: goto label16;
            case 49282: goto label14;
            case 49283: goto label16;
            case 49286: goto label14;
            case 49287: goto label16;
            case 49288: goto label14;
            case 49289: goto label16;
            case 49290: goto label14;
            case 49291: goto label16;
            case 49292: goto label14;
            case 49293: goto label16;
            case 49294: goto label14;
            case 49295: goto label16;
            case 49296: goto label14;
            case 49297: goto label16;
            case 49298: goto label14;
            case 49299: goto label16;
            case 49300: goto label13;
            case 49301: goto label15;
            case 49302: goto label13;
            case 49303: goto label15;
            case 49304: goto label13;
            case 49305: goto label15;
            case 49306: goto label13;
            case 49307: goto label15;
            case 49308: goto label05;
            case 49309: goto label09;
            case 49310: goto label05;
            case 49311: goto label09;
            case 49312: goto label06;
            case 49313: goto label10;
            case 49314: goto label06;
            case 49315: goto label10;
            case 49316: goto label05;
            case 49317: goto label09;
            case 49318: goto label05;
            case 49319: goto label09;
            case 49320: goto label06;
            case 49321: goto label10;
            case 49322: goto label06;
            case 49323: goto label10;
            case 49324: goto label05;
            case 49325: goto label09;
            case 49326: goto label06;
            case 49327: goto label10;
            case 52243: goto label04;
            case 52244: goto label04;
            case 52245: goto label04;
            case 58384: goto label17;
            case 58385: goto label20;
            case 58386: goto label17;
            case 58387: goto label20;
            case 58388: goto label17;
            case 58389: goto label20;
            case 58390: goto label17;
            case 58391: goto label20;
            case 58392: goto label17;
            case 58393: goto label20;
            case 58394: goto label17;
            case 58395: goto label20;
            case 58396: goto label17;
            case 58397: goto label20;
            case 58398: goto label17;
            case 58399: goto label20;
            default: goto label01;
        };

     label01:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label02:
        $b1 = 7;

     label03:
        return $b1;

     label04:
        return 102;

     label05:
        return 15;

     label06:
        return 16;

     label07:
        return 10;

     label08:
        return 9;

     label09:
        return 17;

     label10:
        return 18;

     label11:
        return 11;

     label12:
        return 12;

     label13:
        return 12;

     label14:
        return 19;

     label15:
        return 13;

     label16:
        return 20;

     label17:
        return 100;

     label18:
        return 0;

     label19:
        return 2;

     label20:
        return 101;

     label21:
        return 14;
    }
    public static byte[] getExtensionData(java.util.Hashtable, java.lang.Integer)
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: java.lang.Integer;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (byte[]) $r2;

        return $r3;
    }
    public static short getHashAlgorithmForPRFAlgorithm(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown PRFAlgorithm");

        throw $r0;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("legacy PRF not a valid algorithm");

        throw $r0;

     label3:
        return 4;

     label4:
        return 5;
    }
    public static int getKeyExchangeAlgorithm(int) throws java.io.IOException
    {
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label13;
            case 2: goto label13;
            case 4: goto label13;
            case 5: goto label13;
            case 10: goto label13;
            case 13: goto label02;
            case 16: goto label03;
            case 19: goto label04;
            case 22: goto label06;
            case 44: goto label12;
            case 45: goto label05;
            case 46: goto label14;
            case 47: goto label13;
            case 48: goto label02;
            case 49: goto label03;
            case 50: goto label04;
            case 51: goto label06;
            case 53: goto label13;
            case 54: goto label02;
            case 55: goto label03;
            case 56: goto label04;
            case 57: goto label06;
            case 59: goto label13;
            case 60: goto label13;
            case 61: goto label13;
            case 62: goto label02;
            case 63: goto label03;
            case 64: goto label04;
            case 65: goto label13;
            case 66: goto label02;
            case 67: goto label03;
            case 68: goto label04;
            case 69: goto label06;
            case 103: goto label06;
            case 104: goto label02;
            case 105: goto label03;
            case 106: goto label04;
            case 107: goto label06;
            case 132: goto label13;
            case 133: goto label02;
            case 134: goto label03;
            case 135: goto label04;
            case 136: goto label06;
            case 138: goto label12;
            case 139: goto label12;
            case 140: goto label12;
            case 141: goto label12;
            case 142: goto label05;
            case 143: goto label05;
            case 144: goto label05;
            case 145: goto label05;
            case 146: goto label14;
            case 147: goto label14;
            case 148: goto label14;
            case 149: goto label14;
            case 150: goto label13;
            case 151: goto label02;
            case 152: goto label03;
            case 153: goto label04;
            case 154: goto label06;
            case 156: goto label13;
            case 157: goto label13;
            case 158: goto label06;
            case 159: goto label06;
            case 160: goto label03;
            case 161: goto label03;
            case 162: goto label04;
            case 163: goto label04;
            case 164: goto label02;
            case 165: goto label02;
            case 168: goto label12;
            case 169: goto label12;
            case 170: goto label05;
            case 171: goto label05;
            case 172: goto label14;
            case 173: goto label14;
            case 174: goto label12;
            case 175: goto label12;
            case 176: goto label12;
            case 177: goto label12;
            case 178: goto label05;
            case 179: goto label05;
            case 180: goto label05;
            case 181: goto label05;
            case 182: goto label14;
            case 183: goto label14;
            case 184: goto label14;
            case 185: goto label14;
            case 186: goto label13;
            case 187: goto label02;
            case 188: goto label03;
            case 189: goto label04;
            case 190: goto label06;
            case 192: goto label13;
            case 193: goto label02;
            case 194: goto label03;
            case 195: goto label04;
            case 196: goto label06;
            case 49153: goto label07;
            case 49154: goto label07;
            case 49155: goto label07;
            case 49156: goto label07;
            case 49157: goto label07;
            case 49158: goto label09;
            case 49159: goto label09;
            case 49160: goto label09;
            case 49161: goto label09;
            case 49162: goto label09;
            case 49163: goto label08;
            case 49164: goto label08;
            case 49165: goto label08;
            case 49166: goto label08;
            case 49167: goto label08;
            case 49168: goto label11;
            case 49169: goto label11;
            case 49170: goto label11;
            case 49171: goto label11;
            case 49172: goto label11;
            case 49178: goto label15;
            case 49179: goto label17;
            case 49180: goto label16;
            case 49181: goto label15;
            case 49182: goto label17;
            case 49183: goto label16;
            case 49184: goto label15;
            case 49185: goto label17;
            case 49186: goto label16;
            case 49187: goto label09;
            case 49188: goto label09;
            case 49189: goto label07;
            case 49190: goto label07;
            case 49191: goto label11;
            case 49192: goto label11;
            case 49193: goto label08;
            case 49194: goto label08;
            case 49195: goto label09;
            case 49196: goto label09;
            case 49197: goto label07;
            case 49198: goto label07;
            case 49199: goto label11;
            case 49200: goto label11;
            case 49201: goto label08;
            case 49202: goto label08;
            case 49203: goto label10;
            case 49204: goto label10;
            case 49205: goto label10;
            case 49206: goto label10;
            case 49207: goto label10;
            case 49208: goto label10;
            case 49209: goto label10;
            case 49210: goto label10;
            case 49211: goto label10;
            case 49266: goto label09;
            case 49267: goto label09;
            case 49268: goto label07;
            case 49269: goto label07;
            case 49270: goto label11;
            case 49271: goto label11;
            case 49272: goto label08;
            case 49273: goto label08;
            case 49274: goto label13;
            case 49275: goto label13;
            case 49276: goto label06;
            case 49277: goto label06;
            case 49278: goto label03;
            case 49279: goto label03;
            case 49280: goto label04;
            case 49281: goto label04;
            case 49282: goto label02;
            case 49283: goto label02;
            case 49286: goto label09;
            case 49287: goto label09;
            case 49288: goto label07;
            case 49289: goto label07;
            case 49290: goto label11;
            case 49291: goto label11;
            case 49292: goto label08;
            case 49293: goto label08;
            case 49294: goto label12;
            case 49295: goto label12;
            case 49296: goto label05;
            case 49297: goto label05;
            case 49298: goto label14;
            case 49299: goto label14;
            case 49300: goto label12;
            case 49301: goto label12;
            case 49302: goto label05;
            case 49303: goto label05;
            case 49304: goto label14;
            case 49305: goto label14;
            case 49306: goto label10;
            case 49307: goto label10;
            case 49308: goto label13;
            case 49309: goto label13;
            case 49310: goto label06;
            case 49311: goto label06;
            case 49312: goto label13;
            case 49313: goto label13;
            case 49314: goto label06;
            case 49315: goto label06;
            case 49316: goto label12;
            case 49317: goto label12;
            case 49318: goto label05;
            case 49319: goto label05;
            case 49320: goto label12;
            case 49321: goto label12;
            case 49322: goto label05;
            case 49323: goto label05;
            case 49324: goto label09;
            case 49325: goto label09;
            case 49326: goto label09;
            case 49327: goto label09;
            case 52243: goto label11;
            case 52244: goto label09;
            case 52245: goto label06;
            case 58384: goto label13;
            case 58385: goto label13;
            case 58386: goto label11;
            case 58387: goto label11;
            case 58388: goto label09;
            case 58389: goto label09;
            case 58390: goto label12;
            case 58391: goto label12;
            case 58392: goto label10;
            case 58393: goto label10;
            case 58394: goto label14;
            case 58395: goto label14;
            case 58396: goto label05;
            case 58397: goto label05;
            case 58398: goto label06;
            case 58399: goto label06;
            default: goto label01;
        };

     label01:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label02:
        return 7;

     label03:
        return 9;

     label04:
        return 3;

     label05:
        return 14;

     label06:
        return 5;

     label07:
        return 16;

     label08:
        return 18;

     label09:
        return 17;

     label10:
        return 24;

     label11:
        return 19;

     label12:
        return 13;

     label13:
        return 1;

     label14:
        return 15;

     label15:
        return 21;

     label16:
        return 22;

     label17:
        return 23;
    }
    public static int getMACAlgorithm(int) throws java.io.IOException
    {
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 4: goto label3;
            case 5: goto label4;
            case 10: goto label4;
            case 13: goto label4;
            case 16: goto label4;
            case 19: goto label4;
            case 22: goto label4;
            case 44: goto label4;
            case 45: goto label4;
            case 46: goto label4;
            case 47: goto label4;
            case 48: goto label4;
            case 49: goto label4;
            case 50: goto label4;
            case 51: goto label4;
            case 53: goto label4;
            case 54: goto label4;
            case 55: goto label4;
            case 56: goto label4;
            case 57: goto label4;
            case 59: goto label5;
            case 60: goto label5;
            case 61: goto label5;
            case 62: goto label5;
            case 63: goto label5;
            case 64: goto label5;
            case 65: goto label4;
            case 66: goto label4;
            case 67: goto label4;
            case 68: goto label4;
            case 69: goto label4;
            case 103: goto label5;
            case 104: goto label5;
            case 105: goto label5;
            case 106: goto label5;
            case 107: goto label5;
            case 132: goto label4;
            case 133: goto label4;
            case 134: goto label4;
            case 135: goto label4;
            case 136: goto label4;
            case 138: goto label4;
            case 139: goto label4;
            case 140: goto label4;
            case 141: goto label4;
            case 142: goto label4;
            case 143: goto label4;
            case 144: goto label4;
            case 145: goto label4;
            case 146: goto label4;
            case 147: goto label4;
            case 148: goto label4;
            case 149: goto label4;
            case 150: goto label4;
            case 151: goto label4;
            case 152: goto label4;
            case 153: goto label4;
            case 154: goto label4;
            case 156: goto label2;
            case 157: goto label2;
            case 158: goto label2;
            case 159: goto label2;
            case 160: goto label2;
            case 161: goto label2;
            case 162: goto label2;
            case 163: goto label2;
            case 164: goto label2;
            case 165: goto label2;
            case 168: goto label2;
            case 169: goto label2;
            case 170: goto label2;
            case 171: goto label2;
            case 172: goto label2;
            case 173: goto label2;
            case 174: goto label5;
            case 175: goto label6;
            case 176: goto label5;
            case 177: goto label6;
            case 178: goto label5;
            case 179: goto label6;
            case 180: goto label5;
            case 181: goto label6;
            case 182: goto label5;
            case 183: goto label6;
            case 184: goto label5;
            case 185: goto label6;
            case 186: goto label5;
            case 187: goto label5;
            case 188: goto label5;
            case 189: goto label5;
            case 190: goto label5;
            case 192: goto label5;
            case 193: goto label5;
            case 194: goto label5;
            case 195: goto label5;
            case 196: goto label5;
            case 49153: goto label4;
            case 49154: goto label4;
            case 49155: goto label4;
            case 49156: goto label4;
            case 49157: goto label4;
            case 49158: goto label4;
            case 49159: goto label4;
            case 49160: goto label4;
            case 49161: goto label4;
            case 49162: goto label4;
            case 49163: goto label4;
            case 49164: goto label4;
            case 49165: goto label4;
            case 49166: goto label4;
            case 49167: goto label4;
            case 49168: goto label4;
            case 49169: goto label4;
            case 49170: goto label4;
            case 49171: goto label4;
            case 49172: goto label4;
            case 49178: goto label4;
            case 49179: goto label4;
            case 49180: goto label4;
            case 49181: goto label4;
            case 49182: goto label4;
            case 49183: goto label4;
            case 49184: goto label4;
            case 49185: goto label4;
            case 49186: goto label4;
            case 49187: goto label5;
            case 49188: goto label6;
            case 49189: goto label5;
            case 49190: goto label6;
            case 49191: goto label5;
            case 49192: goto label6;
            case 49193: goto label5;
            case 49194: goto label6;
            case 49195: goto label2;
            case 49196: goto label2;
            case 49197: goto label2;
            case 49198: goto label2;
            case 49199: goto label2;
            case 49200: goto label2;
            case 49201: goto label2;
            case 49202: goto label2;
            case 49203: goto label4;
            case 49204: goto label4;
            case 49205: goto label4;
            case 49206: goto label4;
            case 49207: goto label5;
            case 49208: goto label6;
            case 49209: goto label4;
            case 49210: goto label5;
            case 49211: goto label6;
            case 49266: goto label5;
            case 49267: goto label6;
            case 49268: goto label5;
            case 49269: goto label6;
            case 49270: goto label5;
            case 49271: goto label6;
            case 49272: goto label5;
            case 49273: goto label6;
            case 49274: goto label2;
            case 49275: goto label2;
            case 49276: goto label2;
            case 49277: goto label2;
            case 49278: goto label2;
            case 49279: goto label2;
            case 49280: goto label2;
            case 49281: goto label2;
            case 49282: goto label2;
            case 49283: goto label2;
            case 49286: goto label2;
            case 49287: goto label2;
            case 49288: goto label2;
            case 49289: goto label2;
            case 49290: goto label2;
            case 49291: goto label2;
            case 49292: goto label2;
            case 49293: goto label2;
            case 49294: goto label2;
            case 49295: goto label2;
            case 49296: goto label2;
            case 49297: goto label2;
            case 49298: goto label2;
            case 49299: goto label2;
            case 49300: goto label5;
            case 49301: goto label6;
            case 49302: goto label5;
            case 49303: goto label6;
            case 49304: goto label5;
            case 49305: goto label6;
            case 49306: goto label5;
            case 49307: goto label6;
            case 49308: goto label2;
            case 49309: goto label2;
            case 49310: goto label2;
            case 49311: goto label2;
            case 49312: goto label2;
            case 49313: goto label2;
            case 49314: goto label2;
            case 49315: goto label2;
            case 49316: goto label2;
            case 49317: goto label2;
            case 49318: goto label2;
            case 49319: goto label2;
            case 49320: goto label2;
            case 49321: goto label2;
            case 49322: goto label2;
            case 49323: goto label2;
            case 49324: goto label2;
            case 49325: goto label2;
            case 49326: goto label2;
            case 49327: goto label2;
            case 52243: goto label2;
            case 52244: goto label2;
            case 52245: goto label2;
            case 58384: goto label4;
            case 58385: goto label4;
            case 58386: goto label4;
            case 58387: goto label4;
            case 58388: goto label4;
            case 58389: goto label4;
            case 58390: goto label4;
            case 58391: goto label4;
            case 58392: goto label4;
            case 58393: goto label4;
            case 58394: goto label4;
            case 58395: goto label4;
            case 58396: goto label4;
            case 58397: goto label4;
            case 58398: goto label4;
            case 58399: goto label4;
            default: goto label1;
        };

     label1:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r0;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return 2;

     label5:
        return 3;

     label6:
        return 4;
    }
    public static org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion(int)
    {
        int $i0;
        org.spongycastle.crypto.tls.ProtocolVersion r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 59: goto label2;
            case 60: goto label2;
            case 61: goto label2;
            case 62: goto label2;
            case 63: goto label2;
            case 64: goto label2;
            case 103: goto label2;
            case 104: goto label2;
            case 105: goto label2;
            case 106: goto label2;
            case 107: goto label2;
            case 156: goto label2;
            case 157: goto label2;
            case 158: goto label2;
            case 159: goto label2;
            case 160: goto label2;
            case 161: goto label2;
            case 162: goto label2;
            case 163: goto label2;
            case 164: goto label2;
            case 165: goto label2;
            case 168: goto label2;
            case 169: goto label2;
            case 170: goto label2;
            case 171: goto label2;
            case 172: goto label2;
            case 173: goto label2;
            case 186: goto label2;
            case 187: goto label2;
            case 188: goto label2;
            case 189: goto label2;
            case 190: goto label2;
            case 191: goto label2;
            case 192: goto label2;
            case 193: goto label2;
            case 194: goto label2;
            case 195: goto label2;
            case 196: goto label2;
            case 197: goto label2;
            case 49187: goto label2;
            case 49188: goto label2;
            case 49189: goto label2;
            case 49190: goto label2;
            case 49191: goto label2;
            case 49192: goto label2;
            case 49193: goto label2;
            case 49194: goto label2;
            case 49195: goto label2;
            case 49196: goto label2;
            case 49197: goto label2;
            case 49198: goto label2;
            case 49199: goto label2;
            case 49200: goto label2;
            case 49201: goto label2;
            case 49202: goto label2;
            case 49266: goto label2;
            case 49267: goto label2;
            case 49268: goto label2;
            case 49269: goto label2;
            case 49270: goto label2;
            case 49271: goto label2;
            case 49272: goto label2;
            case 49273: goto label2;
            case 49274: goto label2;
            case 49275: goto label2;
            case 49276: goto label2;
            case 49277: goto label2;
            case 49278: goto label2;
            case 49279: goto label2;
            case 49280: goto label2;
            case 49281: goto label2;
            case 49282: goto label2;
            case 49283: goto label2;
            case 49284: goto label2;
            case 49285: goto label2;
            case 49286: goto label2;
            case 49287: goto label2;
            case 49288: goto label2;
            case 49289: goto label2;
            case 49290: goto label2;
            case 49291: goto label2;
            case 49292: goto label2;
            case 49293: goto label2;
            case 49294: goto label2;
            case 49295: goto label2;
            case 49296: goto label2;
            case 49297: goto label2;
            case 49298: goto label2;
            case 49299: goto label2;
            case 49308: goto label2;
            case 49309: goto label2;
            case 49310: goto label2;
            case 49311: goto label2;
            case 49312: goto label2;
            case 49313: goto label2;
            case 49314: goto label2;
            case 49315: goto label2;
            case 49316: goto label2;
            case 49317: goto label2;
            case 49318: goto label2;
            case 49319: goto label2;
            case 49320: goto label2;
            case 49321: goto label2;
            case 49322: goto label2;
            case 49323: goto label2;
            case 49324: goto label2;
            case 49325: goto label2;
            case 49326: goto label2;
            case 49327: goto label2;
            case 52243: goto label2;
            case 52244: goto label2;
            case 52245: goto label2;
            default: goto label1;
        };

     label1:
        r0 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion SSLv3>;

        return r0;

     label2:
        r0 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        return r0;
    }
    public static org.spongycastle.asn1.ASN1ObjectIdentifier getOIDForHashAlgorithm(short)
    {
        short $s0;
        java.lang.IllegalArgumentException $r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier r1;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown HashAlgorithm");

        throw $r0;

     label2:
        r1 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier md5>;

        return r1;

     label3:
        r1 = <org.spongycastle.asn1.x509.X509ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_SHA1>;

        return r1;

     label4:
        r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha224>;

        return r1;

     label5:
        r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha256>;

        return r1;

     label6:
        r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha384>;

        return r1;

     label7:
        r1 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512>;

        return r1;
    }
    public static java.util.Vector getSignatureAlgorithmsExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        java.util.Vector $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsUtils: java.lang.Integer EXT_signature_algorithms>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector readSignatureAlgorithmsExtension(byte[])>($r2);

        return $r3;
    }
    public static org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.TlsSignerCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.TlsSignerCredentials $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: org.spongycastle.crypto.tls.TlsSignerCredentials;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsSignerCredentials: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm()>();

        if $r2 != null goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        return null;

     label2:
        return $r2;
    }
    public static boolean hasExpectedEmptyExtensionData(java.util.Hashtable, java.lang.Integer, short) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        short $s0;
        byte[] $r2;
        int $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: java.lang.Integer;

        $s0 := @parameter2: short;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i1 = lengthof $r2;

        if $i1 == 0 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>($s0);

        throw $r3;

     label2:
        return 1;
    }
    public static boolean hasSigningCapability(short)
    {
        short $s0;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 64: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    static void hmac_hash(org.spongycastle.crypto.Digest, byte[], byte[], byte[])
    {
        org.spongycastle.crypto.Digest $r0;
        byte[] $r1, $r2, $r3, r4, r7;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.macs.HMac r5;
        org.spongycastle.crypto.params.KeyParameter $r6;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        r5 = new org.spongycastle.crypto.macs.HMac;

        specialinvoke r5.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest)>($r0);

        $r6 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: void init(org.spongycastle.crypto.CipherParameters)>($r6);

        r7 = $r2;

        $i2 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i0 = lengthof $r3;

        i0 = i0 + $i2;

        i0 = i0 + -1;

        i0 = i0 / $i2;

        $i3 = virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: int getMacSize()>();

        $r1 = newarray (byte)[$i3];

        $i3 = virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: int getMacSize()>();

        r4 = newarray (byte)[$i3];

        $i3 = 0;

     label1:
        if $i3 >= i0 goto label2;

        $i4 = lengthof r7;

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>(r7, 0, $i4);

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r1, 0);

        r7 = $r1;

        $i4 = lengthof $r1;

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r1, 0, $i4);

        $i4 = lengthof $r2;

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: void update(byte[],int,int)>($r2, 0, $i4);

        virtualinvoke r5.<org.spongycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r4, 0);

        $i4 = $i2 * $i3;

        $i5 = lengthof $r3;

        $i1 = $i2 * $i3;

        $i1 = $i5 - $i1;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r3, $i4, $i1);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return;
    }
    public static org.spongycastle.crypto.tls.TlsSession importSession(byte[], org.spongycastle.crypto.tls.SessionParameters)
    {
        byte[] $r0;
        org.spongycastle.crypto.tls.SessionParameters $r1;
        org.spongycastle.crypto.tls.TlsSessionImpl $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: org.spongycastle.crypto.tls.SessionParameters;

        $r2 = new org.spongycastle.crypto.tls.TlsSessionImpl;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsSessionImpl: void <init>(byte[],org.spongycastle.crypto.tls.SessionParameters)>($r0, $r1);

        return $r2;
    }
    public static boolean isAEADCipherSuite(int) throws java.io.IOException
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getCipherType(int)>($i0);

        if 2 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isBlockCipherSuite(int) throws java.io.IOException
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getCipherType(int)>($i0);

        if 1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isSSL(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isSSL()>();

        return $z0;
    }
    public static boolean isSignatureAlgorithmsExtensionAllowed(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.ProtocolVersion $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        $r0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r0);

        return $z0;
    }
    public static boolean isStreamCipherSuite(int) throws java.io.IOException
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getCipherType(int)>($i0);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isTLSv11(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv11>;

        $r2 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $r2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        return $z0;
    }
    public static boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        $r2 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $r2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        return $z0;
    }
    public static boolean isValidCipherSuiteForVersion(int, org.spongycastle.crypto.tls.ProtocolVersion)
    {
        int $i0;
        org.spongycastle.crypto.tls.ProtocolVersion $r0, $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion(int)>($i0);

        $r0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r0);

        return $z0;
    }
    public static boolean isValidUint16(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = 65535 & $i0;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint16(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 65535L & $l0;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint24(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = 16777215 & $i0;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint24(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 16777215L & $l0;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint32(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 4294967295L & $l0;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint48(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 281474976710655L & $l0;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint64(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return 1;
    }
    public static boolean isValidUint8(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = $i0 & 255;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint8(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = 255L & $l0;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isValidUint8(short)
    {
        short $s0;
        int $i1;

        $s0 := @parameter0: short;

        $i1 = $s0 & 255;

        if $i1 != $s0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.util.Vector parseSupportedSignatureAlgorithms(boolean, java.io.InputStream) throws java.io.IOException
    {
        boolean $z0;
        java.io.InputStream $r0;
        int i0, $i1;
        java.util.Vector r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r3;
        short $s2;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.io.InputStream;

        i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        if i0 < 2 goto label1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

     label1:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r2;

     label2:
        i0 = i0 / 2;

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>(int)>(i0);

        $i1 = 0;

     label3:
        if $i1 >= i0 goto label5;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm parse(java.io.InputStream)>($r0);

        if $z0 != 0 goto label4;

        $s2 = virtualinvoke $r3.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        if $s2 != 0 goto label4;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r2;

     label4:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label3;

     label5:
        return r1;
    }
    public static org.spongycastle.asn1.ASN1Primitive readASN1Object(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        org.spongycastle.asn1.ASN1InputStream r1;
        org.spongycastle.asn1.ASN1Primitive $r2, $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: byte[];

        r1 = new org.spongycastle.asn1.ASN1InputStream;

        specialinvoke r1.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r0);

        $r2 = virtualinvoke r1.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        if $r2 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label1:
        $r4 = virtualinvoke r1.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        if $r4 == null goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label2:
        return $r2;
    }
    public static byte[] readAllOrNothing(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0, $i1;
        java.io.InputStream $r0;
        byte[] r1;
        java.io.EOFException $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        if $i0 >= 1 goto label1;

        r1 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        return r1;

     label1:
        r1 = newarray (byte)[$i0];

        $i1 = staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>($r0, r1);

        if $i1 != 0 goto label2;

        return null;

     label2:
        if $i1 == $i0 goto label3;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label3:
        return r1;
    }
    public static org.spongycastle.asn1.ASN1Primitive readDERObject(byte[]) throws java.io.IOException
    {
        byte[] $r0, $r2;
        org.spongycastle.asn1.ASN1Primitive $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.asn1.ASN1Primitive readASN1Object(byte[])>($r0);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Primitive: byte[] getEncoded(java.lang.String)>("DER");

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r2, $r0);

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label1:
        return $r1;
    }
    public static void readFully(byte[], java.io.InputStream) throws java.io.IOException
    {
        byte[] $r0;
        java.io.InputStream $r1;
        int i0, $i1;
        java.io.EOFException $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.InputStream;

        i0 = lengthof $r0;

        if i0 <= 0 goto label1;

        $i1 = staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>($r1, $r0);

        if i0 == $i1 goto label1;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label1:
        return;
    }
    public static byte[] readFully(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0, $i1;
        java.io.InputStream $r0;
        byte[] r1;
        java.io.EOFException $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        if $i0 >= 1 goto label1;

        r1 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        return r1;

     label1:
        r1 = newarray (byte)[$i0];

        $i1 = staticinvoke <org.spongycastle.util.io.Streams: int readFully(java.io.InputStream,byte[])>($r0, r1);

        if $i0 == $i1 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label2:
        return r1;
    }
    public static byte[] readOpaque16(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        byte[] $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, $r0);

        return $r1;
    }
    public static byte[] readOpaque24(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        byte[] $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(java.io.InputStream)>($r0);

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, $r0);

        return $r1;
    }
    public static byte[] readOpaque8(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        short $s0;
        byte[] $r1;

        $r0 := @parameter0: java.io.InputStream;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r0);

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($s0, $r0);

        return $r1;
    }
    public static java.util.Vector readSignatureAlgorithmsExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.util.Vector $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r3;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)>(0, r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r2;
    }
    public static int readUint16(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        java.io.EOFException $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i1 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i0 = $i0 << 8;

        $i1 = $i0 | $i1;

        return $i1;
    }
    public static int readUint16(byte[], int)
    {
        byte[] $r0;
        int $i0, $i2;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = $b1 & 255;

        $i2 = $i2 << 8;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 & 255;

        $i0 = $i2 | $i0;

        return $i0;
    }
    public static int[] readUint16Array(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0, $i1, i2;
        java.io.InputStream $r0;
        int[] r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        r1 = newarray (int)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        r1[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static int readUint24(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2;
        java.io.EOFException $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i2 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i1 = $i1 << 16;

        $i0 = $i0 << 8;

        $i0 = $i1 | $i0;

        $i2 = $i0 | $i2;

        return $i2;
    }
    public static int readUint24(byte[], int)
    {
        byte[] $r0;
        int $i0, $i2, $i3;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = $b1 & 255;

        $i2 = $i2 << 16;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 & 255;

        $i0 = $i2 | $i0;

        return $i0;
    }
    public static long readUint32(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        long $l4;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i2 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i3 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i3 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i0 = $i0 << 2;

        $i1 = $i1 << 16;

        $i1 = $i0 | $i1;

        $i2 = $i2 << 8;

        $i2 = $i1 | $i2;

        $i3 = $i2 | $i3;

        $l4 = (long) $i3;

        $l4 = $l4 & 4294967295L;

        return $l4;
    }
    public static long readUint32(byte[], int)
    {
        byte[] $r0;
        int $i0, $i2, $i3;
        byte $b1;
        long $l4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = $b1 & 255;

        $i2 = $i2 << 24;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i3 = $b1 & 255;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 & 255;

        $i0 = $i2 | $i0;

        $l4 = (long) $i0;

        $l4 = $l4 & 4294967295L;

        return $l4;
    }
    public static long readUint48(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(java.io.InputStream)>($r0);

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(java.io.InputStream)>($r0);

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 24;

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    public static long readUint48(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>($r0, $i0);

        $i0 = $i0 + 3;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>($r0, $i0);

        $l2 = (long) $i1;

        $l2 = $l2 & 4294967295L;

        $l2 = $l2 << 24;

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
    public static short readUint8(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        java.io.EOFException $r1;
        short $s1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $s1 = (short) $i0;

        return $s1;
    }
    public static short readUint8(byte[], int)
    {
        byte[] $r0;
        int $i0;
        byte $b1;
        short $s2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $s2 = (short) $b1;

        return $s2;
    }
    public static short[] readUint8Array(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0, i2;
        java.io.InputStream $r0;
        short[] r1;
        short $s1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        r1 = newarray (short)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r0);

        r1[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static org.spongycastle.crypto.tls.ProtocolVersion readVersion(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        java.io.EOFException $r1;
        org.spongycastle.crypto.tls.ProtocolVersion $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i1 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $r2 = staticinvoke <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion get(int,int)>($i0, $i1);

        return $r2;
    }
    public static org.spongycastle.crypto.tls.ProtocolVersion readVersion(byte[], int) throws java.io.IOException
    {
        byte[] $r0;
        int $i0, $i2;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = $b1 & 255;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $b1 & 255;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion get(int,int)>($i2, $i0);

        return $r1;
    }
    public static int readVersionRaw(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        java.io.EOFException $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i1 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i0 = $i0 << 8;

        $i1 = $i0 | $i1;

        return $i1;
    }
    public static int readVersionRaw(byte[], int) throws java.io.IOException
    {
        byte[] $r0;
        int $i0, $i2;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = $b1 << 8;

        $i0 = $i0 + 1;

        $b1 = $r0[$i0];

        $i0 = $i2 | $b1;

        return $i0;
    }
    static void trackHashAlgorithms(org.spongycastle.crypto.tls.TlsHandshakeHash, java.util.Vector)
    {
        org.spongycastle.crypto.tls.TlsHandshakeHash $r0;
        java.util.Vector $r1;
        int i0, $i1;
        java.lang.Object $r2;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r3;
        short $s2;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsHandshakeHash;

        $r1 := @parameter1: java.util.Vector;

        if $r1 == null goto label2;

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r3 = (org.spongycastle.crypto.tls.SignatureAndHashAlgorithm) $r2;

        $s2 = virtualinvoke r3.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsHandshakeHash: void trackHashAlgorithm(short)>($s2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    static void validateKeyUsage(org.spongycastle.asn1.x509.Certificate, int) throws java.io.IOException
    {
        org.spongycastle.asn1.x509.Certificate $r0;
        int $i0, i1;
        org.spongycastle.asn1.x509.TBSCertificate $r1;
        org.spongycastle.asn1.x509.Extensions $r2;
        org.spongycastle.asn1.x509.KeyUsage $r3;
        byte[] $r4;
        byte $b2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        $r0 := @parameter0: org.spongycastle.asn1.x509.Certificate;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.TBSCertificate getTBSCertificate()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.TBSCertificate: org.spongycastle.asn1.x509.Extensions getExtensions()>();

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.spongycastle.asn1.x509.KeyUsage: org.spongycastle.asn1.x509.KeyUsage fromExtensions(org.spongycastle.asn1.x509.Extensions)>($r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.KeyUsage: byte[] getBytes()>();

        $b2 = $r4[0];

        i1 = $b2 & 255;

        i1 = i1 & $i0;

        if i1 == $i0 goto label1;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(46);

        throw $r5;

     label1:
        return;
    }
    private static java.util.Vector vectorOfOne(java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Vector r1;

        $r0 := @parameter0: java.lang.Object;

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>(int)>(1);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r0);

        return r1;
    }
    public static void writeGMTUnixTime(byte[], int)
    {
        byte[] $r0;
        int $i0, i1, $i3, $i5;
        long $l2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l2 / 1000L;

        i1 = (int) $l2;

        $i3 = i1 >>> 24;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $i3 = $i0 + 1;

        $i5 = i1 >>> 16;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i0 + 2;

        $i5 = i1 >>> 8;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i0 = $i0 + 3;

        $b4 = (byte) i1;

        $r0[$i0] = $b4;

        return;
    }
    public static void writeOpaque16(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r0;
        java.io.OutputStream $r1;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>($i0);

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, $r1);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r0);

        return;
    }
    public static void writeOpaque24(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r0;
        java.io.OutputStream $r1;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint24(int)>($i0);

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i0, $r1);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r0);

        return;
    }
    public static void writeOpaque8(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r0;
        java.io.OutputStream $r1;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i0);

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(int,java.io.OutputStream)>($i0, $r1);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r0);

        return;
    }
    public static void writeUint16(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0, $i1;
        java.io.OutputStream $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        $i1 = $i0 >>> 8;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1);

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0);

        return;
    }
    public static void writeUint16(int, byte[], int)
    {
        int $i0, $i1, $i3;
        byte[] $r0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i3 = $i0 >>> 8;

        $b2 = (byte) $i3;

        $r0[$i1] = $b2;

        $i1 = $i1 + 1;

        $b2 = (byte) $i0;

        $r0[$i1] = $b2;

        return;
    }
    public static void writeUint16Array(int[], java.io.OutputStream) throws java.io.IOException
    {
        int[] $r0;
        java.io.OutputStream $r1;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.io.OutputStream;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $i1 = $r0[i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i1, $r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public static void writeUint16Array(int[], byte[], int) throws java.io.IOException
    {
        int[] $r0;
        byte[] $r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i2 = $r0[i1];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,byte[],int)>($i2, $r1, $i0);

        $i0 = $i0 + 2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void writeUint16ArrayWithUint16Length(int[], java.io.OutputStream) throws java.io.IOException
    {
        int[] $r0;
        java.io.OutputStream $r1;
        int i0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.io.OutputStream;

        i0 = lengthof $r0;

        i0 = i0 * 2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>(i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(i0, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16Array(int[],java.io.OutputStream)>($r0, $r1);

        return;
    }
    public static void writeUint16ArrayWithUint16Length(int[], byte[], int) throws java.io.IOException
    {
        int[] $r0;
        byte[] $r1;
        int $i0, i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i1 = lengthof $r0;

        i1 = i1 * 2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>(i1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,byte[],int)>(i1, $r1, $i0);

        $i0 = $i0 + 2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16Array(int[],byte[],int)>($r0, $r1, $i0);

        return;
    }
    public static void writeUint24(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0, $i1;
        java.io.OutputStream $r0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $b2 = (byte) $i0;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        return;
    }
    public static void writeUint24(int, byte[], int)
    {
        int $i0, $i1, $i2, $i4;
        byte[] $r0;
        byte $b3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i0 >>> 16;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i2 = $i1 + 1;

        $i4 = $i0 >>> 8;

        $b3 = (byte) $i4;

        $r0[$i2] = $b3;

        $i1 = $i1 + 2;

        $b3 = (byte) $i0;

        $r0[$i1] = $b3;

        return;
    }
    public static void writeUint32(long, java.io.OutputStream) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.OutputStream $r0;
        int $i2;
        byte $b3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.io.OutputStream;

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        return;
    }
    public static void writeUint32(long, byte[], int)
    {
        long $l0, $l2;
        byte[] $r0;
        int $i1, $i3, $i5;
        byte $b4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 24;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i3 = $i1 + 1;

        $l2 = $l0 >>> 16;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 2;

        $l2 = $l0 >>> 8;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i1 = $i1 + 3;

        $i3 = (int) $l0;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        return;
    }
    public static void writeUint48(long, java.io.OutputStream) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.OutputStream $r0;
        int $i2;
        byte $b3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.io.OutputStream;

        $l1 = $l0 >>> 40;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        return;
    }
    public static void writeUint48(long, byte[], int)
    {
        long $l0, $l2;
        byte[] $r0;
        int $i1, $i3, $i5;
        byte $b4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 40;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i3 = $i1 + 1;

        $l2 = $l0 >>> 32;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 2;

        $l2 = $l0 >>> 24;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 3;

        $l2 = $l0 >>> 16;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 4;

        $l2 = $l0 >>> 8;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i1 = $i1 + 5;

        $i3 = (int) $l0;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        return;
    }
    public static void writeUint64(long, java.io.OutputStream) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.OutputStream $r0;
        int $i2;
        byte $b3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.io.OutputStream;

        $l1 = $l0 >>> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 48;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 40;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        return;
    }
    public static void writeUint64(long, byte[], int)
    {
        long $l0, $l2;
        byte[] $r0;
        int $i1, $i3, $i5;
        byte $b4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 56;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i3 = $i1 + 1;

        $l2 = $l0 >>> 48;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 2;

        $l2 = $l0 >>> 40;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 3;

        $l2 = $l0 >>> 32;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 4;

        $l2 = $l0 >>> 24;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 5;

        $l2 = $l0 >>> 16;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i3 = $i1 + 6;

        $l2 = $l0 >>> 8;

        $i5 = (int) $l2;

        $b4 = (byte) $i5;

        $r0[$i3] = $b4;

        $i1 = $i1 + 7;

        $i3 = (int) $l0;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        return;
    }
    public static void writeUint8(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0;
        java.io.OutputStream $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0);

        return;
    }
    public static void writeUint8(int, byte[], int)
    {
        int $i0, $i1;
        byte[] $r0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = (byte) $i0;

        $r0[$i1] = $b2;

        return;
    }
    public static void writeUint8(short, java.io.OutputStream) throws java.io.IOException
    {
        short $s0;
        java.io.OutputStream $r0;

        $s0 := @parameter0: short;

        $r0 := @parameter1: java.io.OutputStream;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($s0);

        return;
    }
    public static void writeUint8(short, byte[], int)
    {
        short $s0;
        byte[] $r0;
        int $i1;
        byte $b2;

        $s0 := @parameter0: short;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = (byte) $s0;

        $r0[$i1] = $b2;

        return;
    }
    public static void writeUint8Array(short[], java.io.OutputStream) throws java.io.IOException
    {
        short[] $r0;
        java.io.OutputStream $r1;
        int i0, $i1;
        short $s2;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.io.OutputStream;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $s2 = $r0[i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s2, $r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public static void writeUint8Array(short[], byte[], int) throws java.io.IOException
    {
        short[] $r0;
        byte[] $r1;
        int $i0, i1, $i2;
        short $s3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $s3 = $r0[i1];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>($s3, $r1, $i0);

        $i0 = $i0 + 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public static void writeUint8ArrayWithUint8Length(short[], java.io.OutputStream) throws java.io.IOException
    {
        short[] $r0;
        java.io.OutputStream $r1;
        int $i0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i0);

        $i0 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(int,java.io.OutputStream)>($i0, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8Array(short[],java.io.OutputStream)>($r0, $r1);

        return;
    }
    public static void writeUint8ArrayWithUint8Length(short[], byte[], int) throws java.io.IOException
    {
        short[] $r0;
        byte[] $r1;
        int $i0, $i1;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i1);

        $i1 = lengthof $r0;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(int,byte[],int)>($i1, $r1, $i0);

        $i0 = $i0 + 1;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8Array(short[],byte[],int)>($r0, $r1, $i0);

        return;
    }
    public static void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion, java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.ProtocolVersion $r0;
        java.io.OutputStream $r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter1: java.io.OutputStream;

        $i0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $i0 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        return;
    }
    public static void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion, byte[], int)
    {
        org.spongycastle.crypto.tls.ProtocolVersion $r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        return;
    }
