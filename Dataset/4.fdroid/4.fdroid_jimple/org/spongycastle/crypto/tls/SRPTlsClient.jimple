org.spongycastle.crypto.tls.SRPTlsClient extends org.spongycastle.crypto.tls.AbstractTlsClient
protected org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier
protected byte[] identity
protected byte[] password
    public void <init>(org.spongycastle.crypto.tls.TlsCipherFactory, org.spongycastle.crypto.tls.TlsSRPGroupVerifier, byte[], byte[])
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        org.spongycastle.crypto.tls.TlsCipherFactory $r1;
        org.spongycastle.crypto.tls.TlsSRPGroupVerifier $r2;
        byte[] $r3, $r4;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCipherFactory;

        $r2 := @parameter1: org.spongycastle.crypto.tls.TlsSRPGroupVerifier;

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)>($r1);

        r0.<org.spongycastle.crypto.tls.SRPTlsClient: org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier> = $r2;

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.tls.SRPTlsClient: byte[] identity> = $r3;

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.crypto.tls.SRPTlsClient: byte[] password> = $r3;

        return;
    }
    public void <init>(org.spongycastle.crypto.tls.TlsCipherFactory, byte[], byte[])
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        org.spongycastle.crypto.tls.TlsCipherFactory $r1;
        byte[] $r2, $r3;
        org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier $r4;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCipherFactory;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r4 = new org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier;

        specialinvoke $r4.<org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.tls.SRPTlsClient: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory,org.spongycastle.crypto.tls.TlsSRPGroupVerifier,byte[],byte[])>($r1, $r4, $r2, $r3);

        return;
    }
    public void <init>(byte[], byte[])
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        byte[] $r1, $r2;
        org.spongycastle.crypto.tls.DefaultTlsCipherFactory $r3;
        org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier $r4;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 = new org.spongycastle.crypto.tls.DefaultTlsCipherFactory;

        specialinvoke $r3.<org.spongycastle.crypto.tls.DefaultTlsCipherFactory: void <init>()>();

        $r4 = new org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier;

        specialinvoke $r4.<org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.tls.SRPTlsClient: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory,org.spongycastle.crypto.tls.TlsSRPGroupVerifier,byte[],byte[])>($r3, $r4, $r1, $r2);

        return;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createSRPKeyExchange(int)
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsSRPKeyExchange $r1;
        java.util.Vector $r2;
        org.spongycastle.crypto.tls.TlsSRPGroupVerifier $r3;
        byte[] $r4, $r5;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        $r3 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier>;

        $r4 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: byte[] identity>;

        $r5 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: byte[] password>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: void <init>(int,java.util.Vector,org.spongycastle.crypto.tls.TlsSRPGroupVerifier,byte[],byte[])>($i0, $r2, $r3, $r4, $r5);

        return $r1;
    }
    public org.spongycastle.crypto.tls.TlsAuthentication getAuthentication() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;
    }
    public int[] getCipherSuites()
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 = newarray (int)[1];

        $r1[0] = 49182;

        return $r1;
    }
    public java.util.Hashtable getClientExtensions() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        java.util.Hashtable $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: java.util.Hashtable getClientExtensions()>();

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>($r1);

        $r2 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: byte[] identity>;

        staticinvoke <org.spongycastle.crypto.tls.TlsSRPUtils: void addSRPExtension(java.util.Hashtable,byte[])>($r1, $r2);

        return $r1;
    }
    public org.spongycastle.crypto.tls.TlsKeyExchange getKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        org.spongycastle.crypto.tls.TlsKeyExchange $r2;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $i0 = r0.<org.spongycastle.crypto.tls.SRPTlsClient: int selectedCipherSuite>;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getKeyExchangeAlgorithm(int)>($i0);

        lookupswitch($i0)
        {
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label2:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.SRPTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createSRPKeyExchange(int)>($i0);

        return $r2;
    }
    public void processServerExtensions(java.util.Hashtable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;
        java.util.Hashtable $r1;
        java.lang.Integer $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        $r1 := @parameter0: java.util.Hashtable;

        $r2 = <org.spongycastle.crypto.tls.TlsSRPUtils: java.lang.Integer EXT_SRP>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)>($r1, $r2, 47);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.SRPTlsClient: boolean requireSRPServerExtension()>();

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void processServerExtensions(java.util.Hashtable)>($r1);

        return;
    }
    protected boolean requireSRPServerExtension()
    {
        org.spongycastle.crypto.tls.SRPTlsClient r0;

        r0 := @this: org.spongycastle.crypto.tls.SRPTlsClient;

        return 0;
    }
