org.spongycastle.crypto.tls.Certificate extends java.lang.Object
public static final org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN
protected org.spongycastle.asn1.x509.Certificate[] certificateList
    static void <clinit>()
    {
        org.spongycastle.crypto.tls.Certificate $r0;
        org.spongycastle.asn1.x509.Certificate[] $r1;

        $r0 = new org.spongycastle.crypto.tls.Certificate;

        $r1 = newarray (org.spongycastle.asn1.x509.Certificate)[0];

        specialinvoke $r0.<org.spongycastle.crypto.tls.Certificate: void <init>(org.spongycastle.asn1.x509.Certificate[])>($r1);

        <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN> = $r0;

        return;
    }
    public void <init>(org.spongycastle.asn1.x509.Certificate[])
    {
        org.spongycastle.crypto.tls.Certificate r0;
        org.spongycastle.asn1.x509.Certificate[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $r1 := @parameter0: org.spongycastle.asn1.x509.Certificate[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificateList\' cannot be null");

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.Certificate parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayInputStream r1;
        org.spongycastle.asn1.x509.Certificate[] r2;
        java.util.Vector r3;
        int $i0, $i1;
        byte[] $r4;
        org.spongycastle.asn1.ASN1Primitive $r5;
        org.spongycastle.asn1.x509.Certificate $r6;
        java.lang.Object $r7;
        org.spongycastle.crypto.tls.Certificate $r8;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(java.io.InputStream)>($r0);

        if $i0 != 0 goto label1;

        $r8 = <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN>;

        return $r8;

     label1:
        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, $r0);

        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

     label2:
        $i0 = virtualinvoke r1.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label3;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque24(java.io.InputStream)>(r1);

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.asn1.ASN1Primitive readDERObject(byte[])>($r4);

        $r6 = staticinvoke <org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.Certificate getInstance(java.lang.Object)>($r5);

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        goto label2;

     label3:
        $i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        r2 = newarray (org.spongycastle.asn1.x509.Certificate)[$i0];

        $i0 = 0;

     label4:
        $i1 = virtualinvoke r3.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label5;

        $r7 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r6 = (org.spongycastle.asn1.x509.Certificate) $r7;

        r2[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r8 = new org.spongycastle.crypto.tls.Certificate;

        specialinvoke $r8.<org.spongycastle.crypto.tls.Certificate: void <init>(org.spongycastle.asn1.x509.Certificate[])>(r2);

        return $r8;
    }
    protected org.spongycastle.asn1.x509.Certificate[] cloneCertificateList()
    {
        org.spongycastle.crypto.tls.Certificate r0;
        org.spongycastle.asn1.x509.Certificate[] r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        r1 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i0 = lengthof r1;

        r1 = newarray (org.spongycastle.asn1.x509.Certificate)[$i0];

        $r2 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.Certificate r0;
        java.io.OutputStream $r1;
        java.util.Vector r2;
        org.spongycastle.asn1.x509.Certificate[] $r3;
        int $i0, i1, $i2;
        org.spongycastle.asn1.x509.Certificate $r4;
        byte[] $r5;
        java.lang.Object $r6;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $r1 := @parameter0: java.io.OutputStream;

        r2 = new java.util.Vector;

        $r3 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i0 = lengthof $r3;

        specialinvoke r2.<java.util.Vector: void <init>(int)>($i0);

        $i0 = 0;

        i1 = 0;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i2 = lengthof $r3;

        if i1 >= $i2 goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.Certificate: byte[] getEncoded(java.lang.String)>("DER");

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r5);

        $i2 = lengthof $r5;

        $i2 = $i2 + 3;

        $i0 = $i0 + $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint24(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i0, $r1);

        $i0 = 0;

     label3:
        i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        if $i0 >= i1 goto label4;

        $r6 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r5 = (byte[]) $r6;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque24(byte[],java.io.OutputStream)>($r5, $r1);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
    public org.spongycastle.asn1.x509.Certificate getCertificateAt(int)
    {
        org.spongycastle.crypto.tls.Certificate r0;
        int $i0;
        org.spongycastle.asn1.x509.Certificate[] $r1;
        org.spongycastle.asn1.x509.Certificate $r2;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public org.spongycastle.asn1.x509.Certificate[] getCertificateList()
    {
        org.spongycastle.crypto.tls.Certificate r0;
        org.spongycastle.asn1.x509.Certificate[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] cloneCertificateList()>();

        return $r1;
    }
    public int getLength()
    {
        org.spongycastle.crypto.tls.Certificate r0;
        org.spongycastle.asn1.x509.Certificate[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $r1 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public boolean isEmpty()
    {
        org.spongycastle.crypto.tls.Certificate r0;
        org.spongycastle.asn1.x509.Certificate[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.Certificate;

        $r1 = r0.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate[] certificateList>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
