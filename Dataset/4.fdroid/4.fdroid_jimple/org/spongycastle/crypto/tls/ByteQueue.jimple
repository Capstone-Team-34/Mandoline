org.spongycastle.crypto.tls.ByteQueue extends java.lang.Object
private static final int DEFAULT_CAPACITY
private int available
private byte[] databuf
private int skipped
    public void <init>()
    {
        org.spongycastle.crypto.tls.ByteQueue r0;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        specialinvoke r0.<org.spongycastle.crypto.tls.ByteQueue: void <init>(int)>(1024);

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped> = 0;

        r0.<org.spongycastle.crypto.tls.ByteQueue: int available> = 0;

        $r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf> = $r1;

        return;
    }
    public static int nextTwoPow(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = $i0 >> 1;

        $i0 = $i0 | $i1;

        $i1 = $i0 >> 2;

        $i0 = $i0 | $i1;

        $i1 = $i0 >> 4;

        $i0 = $i0 | $i1;

        $i1 = $i0 >> 8;

        $i0 = $i0 | $i1;

        $i1 = $i0 >> 16;

        $i0 = $i0 | $i1;

        $i0 = $i0 + 1;

        return $i0;
    }
    public void addData(byte[], int, int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        byte[] $r1, r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i2 = $i2 + $i3;

        $i2 = $i2 + $i1;

        r2 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i3 = lengthof r2;

        if $i2 <= $i3 goto label2;

        $i2 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i2 = $i2 + $i1;

        $i2 = staticinvoke <org.spongycastle.crypto.tls.ByteQueue: int nextTwoPow(int)>($i2);

        r2 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i3 = lengthof r2;

        if $i2 <= $i3 goto label3;

        r2 = newarray (byte)[$i2];

        $r3 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i2 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i2, r2, 0, $i3);

        r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf> = r2;

     label1:
        r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped> = 0;

     label2:
        r2 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i2 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i2 = $i2 + $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, $i2, $i1);

        $i0 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.tls.ByteQueue: int available> = $i0;

        return;

     label3:
        r2 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $r3 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i2 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, $r3, 0, $i2);

        goto label1;
    }
    public int available()
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        i0 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        return i0;
    }
    public void read(byte[], int, int, int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        byte[] $r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = lengthof $r1;

        $i3 = $i3 - $i0;

        if $i3 >= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer size of ");

        $i0 = lengthof $r1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too small for a read of ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i3 = $i3 - $i2;

        if $i3 >= $i1 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not enough data to read");

        throw $r5;

     label2:
        $r6 = r0.<org.spongycastle.crypto.tls.ByteQueue: byte[] databuf>;

        $i3 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $i2 = $i3 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i2, $r1, $i0, $i1);

        return;
    }
    public void removeData(int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        if $i0 <= $i1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, only got ");

        $i0 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $i1 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        $i1 = $i1 - $i0;

        r0.<org.spongycastle.crypto.tls.ByteQueue: int available> = $i1;

        $i1 = r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped>;

        $i0 = $i1 + $i0;

        r0.<org.spongycastle.crypto.tls.ByteQueue: int skipped> = $i0;

        return;
    }
    public void removeData(byte[], int, int, int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        byte[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        virtualinvoke r0.<org.spongycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        $i0 = $i2 + $i1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.ByteQueue: void removeData(int)>($i0);

        return;
    }
    public byte[] removeData(int, int)
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        int $i0, $i1;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 = newarray (byte)[$i0];

        virtualinvoke r0.<org.spongycastle.crypto.tls.ByteQueue: void removeData(byte[],int,int,int)>(r1, 0, $i0, $i1);

        return r1;
    }
    public int size()
    {
        org.spongycastle.crypto.tls.ByteQueue r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.ByteQueue;

        i0 = r0.<org.spongycastle.crypto.tls.ByteQueue: int available>;

        return i0;
    }
