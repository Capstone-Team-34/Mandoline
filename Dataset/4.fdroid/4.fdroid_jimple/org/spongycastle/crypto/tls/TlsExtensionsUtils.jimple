org.spongycastle.crypto.tls.TlsExtensionsUtils extends java.lang.Object
public static final java.lang.Integer EXT_encrypt_then_mac
public static final java.lang.Integer EXT_extended_master_secret
public static final java.lang.Integer EXT_heartbeat
public static final java.lang.Integer EXT_max_fragment_length
public static final java.lang.Integer EXT_server_name
public static final java.lang.Integer EXT_status_request
public static final java.lang.Integer EXT_truncated_hmac
    static void <clinit>()
    {
        java.lang.Integer $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(22);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_encrypt_then_mac> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(23);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_extended_master_secret> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(15);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_heartbeat> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(1);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_max_fragment_length> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(0);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_server_name> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(5);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_status_request> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(4);

        <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_truncated_hmac> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsExtensionsUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsExtensionsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void addEncryptThenMACExtension(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_encrypt_then_mac>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createEncryptThenMACExtension()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public static void addExtendedMasterSecretExtension(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_extended_master_secret>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createExtendedMasterSecretExtension()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public static void addHeartbeatExtension(java.util.Hashtable, org.spongycastle.crypto.tls.HeartbeatExtension) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        org.spongycastle.crypto.tls.HeartbeatExtension $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: org.spongycastle.crypto.tls.HeartbeatExtension;

        $r2 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_heartbeat>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createHeartbeatExtension(org.spongycastle.crypto.tls.HeartbeatExtension)>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static void addMaxFragmentLengthExtension(java.util.Hashtable, short) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        short $s0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $s0 := @parameter1: short;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_max_fragment_length>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createMaxFragmentLengthExtension(short)>($s0);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public static void addServerNameExtension(java.util.Hashtable, org.spongycastle.crypto.tls.ServerNameList) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        org.spongycastle.crypto.tls.ServerNameList $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: org.spongycastle.crypto.tls.ServerNameList;

        $r2 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_server_name>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createServerNameExtension(org.spongycastle.crypto.tls.ServerNameList)>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static void addStatusRequestExtension(java.util.Hashtable, org.spongycastle.crypto.tls.CertificateStatusRequest) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        org.spongycastle.crypto.tls.CertificateStatusRequest $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: org.spongycastle.crypto.tls.CertificateStatusRequest;

        $r2 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_status_request>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createStatusRequestExtension(org.spongycastle.crypto.tls.CertificateStatusRequest)>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static void addTruncatedHMacExtension(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_truncated_hmac>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createTruncatedHMacExtension()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public static byte[] createEmptyExtensionData()
    {
        byte[] r0;

        r0 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        return r0;
    }
    public static byte[] createEncryptThenMACExtension()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createEmptyExtensionData()>();

        return $r0;
    }
    public static byte[] createExtendedMasterSecretExtension()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createEmptyExtensionData()>();

        return $r0;
    }
    public static byte[] createHeartbeatExtension(org.spongycastle.crypto.tls.HeartbeatExtension) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.HeartbeatExtension $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: org.spongycastle.crypto.tls.HeartbeatExtension;

        if $r0 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r0.<org.spongycastle.crypto.tls.HeartbeatExtension: void encode(java.io.OutputStream)>(r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static byte[] createMaxFragmentLengthExtension(short) throws java.io.IOException
    {
        short $s0;
        byte[] r0;

        $s0 := @parameter0: short;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(short)>($s0);

        r0 = newarray (byte)[1];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>($s0, r0, 0);

        return r0;
    }
    public static byte[] createServerNameExtension(org.spongycastle.crypto.tls.ServerNameList) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.ServerNameList $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: org.spongycastle.crypto.tls.ServerNameList;

        if $r0 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r0.<org.spongycastle.crypto.tls.ServerNameList: void encode(java.io.OutputStream)>(r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static byte[] createStatusRequestExtension(org.spongycastle.crypto.tls.CertificateStatusRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.CertificateStatusRequest $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        $r0 := @parameter0: org.spongycastle.crypto.tls.CertificateStatusRequest;

        if $r0 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r0.<org.spongycastle.crypto.tls.CertificateStatusRequest: void encode(java.io.OutputStream)>(r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static byte[] createTruncatedHMacExtension()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: byte[] createEmptyExtensionData()>();

        return $r0;
    }
    public static java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)
    {
        java.util.Hashtable $r0;

        $r0 := @parameter0: java.util.Hashtable;

        if $r0 != null goto label1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

     label1:
        return $r0;
    }
    public static org.spongycastle.crypto.tls.HeartbeatExtension getHeartbeatExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.HeartbeatExtension $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_heartbeat>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: org.spongycastle.crypto.tls.HeartbeatExtension readHeartbeatExtension(byte[])>($r2);

        return $r3;
    }
    public static short getMaxFragmentLengthExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        short $s0;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_max_fragment_length>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return -1;

     label1:
        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short readMaxFragmentLengthExtension(byte[])>($r2);

        return $s0;
    }
    public static org.spongycastle.crypto.tls.ServerNameList getServerNameExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.ServerNameList $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_server_name>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: org.spongycastle.crypto.tls.ServerNameList readServerNameExtension(byte[])>($r2);

        return $r3;
    }
    public static org.spongycastle.crypto.tls.CertificateStatusRequest getStatusRequestExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.CertificateStatusRequest $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_status_request>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: org.spongycastle.crypto.tls.CertificateStatusRequest readStatusRequestExtension(byte[])>($r2);

        return $r3;
    }
    public static boolean hasEncryptThenMACExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_encrypt_then_mac>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readEncryptThenMACExtension(byte[])>($r2);

        return $z0;
    }
    public static boolean hasExtendedMasterSecretExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_extended_master_secret>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readExtendedMasterSecretExtension(byte[])>($r2);

        return $z0;
    }
    public static boolean hasTruncatedHMacExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_truncated_hmac>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readTruncatedHMacExtension(byte[])>($r2);

        return $z0;
    }
    private static boolean readEmptyExtensionData(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r1;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r1;

     label1:
        $i0 = lengthof $r0;

        if $i0 == 0 goto label2;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r2;

     label2:
        return 1;
    }
    public static boolean readEncryptThenMACExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readEmptyExtensionData(byte[])>($r0);

        return $z0;
    }
    public static boolean readExtendedMasterSecretExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readEmptyExtensionData(byte[])>($r0);

        return $z0;
    }
    public static org.spongycastle.crypto.tls.HeartbeatExtension readHeartbeatExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.tls.HeartbeatExtension $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r3 = staticinvoke <org.spongycastle.crypto.tls.HeartbeatExtension: org.spongycastle.crypto.tls.HeartbeatExtension parse(java.io.InputStream)>(r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r3;
    }
    public static short readMaxFragmentLengthExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        short $s0;
        java.lang.IllegalArgumentException $r1;
        int $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r1;

     label1:
        $i1 = lengthof $r0;

        if $i1 == 1 goto label2;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r2;

     label2:
        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(byte[],int)>($r0, 0);

        return $s0;
    }
    public static org.spongycastle.crypto.tls.ServerNameList readServerNameExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.tls.ServerNameList $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r3 = staticinvoke <org.spongycastle.crypto.tls.ServerNameList: org.spongycastle.crypto.tls.ServerNameList parse(java.io.InputStream)>(r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r3;
    }
    public static org.spongycastle.crypto.tls.CertificateStatusRequest readStatusRequestExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.tls.CertificateStatusRequest $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r3 = staticinvoke <org.spongycastle.crypto.tls.CertificateStatusRequest: org.spongycastle.crypto.tls.CertificateStatusRequest parse(java.io.InputStream)>(r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r3;
    }
    public static boolean readTruncatedHMacExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean readEmptyExtensionData(byte[])>($r0);

        return $z0;
    }
