org.spongycastle.crypto.tls.ServerName extends java.lang.Object
protected java.lang.Object name
protected short nameType
    public void <init>(short, java.lang.Object)
    {
        org.spongycastle.crypto.tls.ServerName r0;
        short $s0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.ServerName;

        $s0 := @parameter0: short;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.ServerName: boolean isCorrectType(short,java.lang.Object)>($s0, $r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'name\' is not an instance of the correct type");

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.tls.ServerName: short nameType> = $s0;

        r0.<org.spongycastle.crypto.tls.ServerName: java.lang.Object name> = $r1;

        return;
    }
    protected static boolean isCorrectType(short, java.lang.Object)
    {
        short $s0;
        java.lang.Object $r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $s0 := @parameter0: short;

        $r0 := @parameter1: java.lang.Object;

        lookupswitch($s0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'name\' is an unsupported value");

        throw $r1;

     label2:
        $z0 = $r0 instanceof java.lang.String;

        return $z0;
    }
    public static org.spongycastle.crypto.tls.ServerName parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        byte[] $r2;
        int $i1;
        java.lang.String $r3;
        org.spongycastle.crypto.tls.ServerName $r4;

        $r0 := @parameter0: java.io.InputStream;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r0);

        lookupswitch($s0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r1;

     label2:
        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        $i1 = lengthof $r2;

        if $i1 >= 1 goto label3;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r1;

     label3:
        $r3 = staticinvoke <org.spongycastle.util.Strings: java.lang.String fromUTF8ByteArray(byte[])>($r2);

        $r4 = new org.spongycastle.crypto.tls.ServerName;

        specialinvoke $r4.<org.spongycastle.crypto.tls.ServerName: void <init>(short,java.lang.Object)>($s0, $r3);

        return $r4;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.ServerName r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        int $i1;

        r0 := @this: org.spongycastle.crypto.tls.ServerName;

        $r1 := @parameter0: java.io.OutputStream;

        $s0 = r0.<org.spongycastle.crypto.tls.ServerName: short nameType>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s0, $r1);

        $s0 = r0.<org.spongycastle.crypto.tls.ServerName: short nameType>;

        lookupswitch($s0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label2:
        $r4 = r0.<org.spongycastle.crypto.tls.ServerName: java.lang.Object name>;

        $r5 = (java.lang.String) $r4;

        $r2 = staticinvoke <org.spongycastle.util.Strings: byte[] toUTF8ByteArray(java.lang.String)>($r5);

        $i1 = lengthof $r2;

        if $i1 >= 1 goto label3;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label3:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
    public java.lang.String getHostName()
    {
        org.spongycastle.crypto.tls.ServerName r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.tls.ServerName;

        $r1 = r0.<org.spongycastle.crypto.tls.ServerName: java.lang.Object name>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.ServerName: boolean isCorrectType(short,java.lang.Object)>(0, $r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("\'name\' is not a HostName string");

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.ServerName: java.lang.Object name>;

        $r3 = (java.lang.String) $r1;

        return $r3;
    }
    public java.lang.Object getName()
    {
        org.spongycastle.crypto.tls.ServerName r0;
        java.lang.Object r1;

        r0 := @this: org.spongycastle.crypto.tls.ServerName;

        r1 = r0.<org.spongycastle.crypto.tls.ServerName: java.lang.Object name>;

        return r1;
    }
    public short getNameType()
    {
        org.spongycastle.crypto.tls.ServerName r0;
        short s0;

        r0 := @this: org.spongycastle.crypto.tls.ServerName;

        s0 = r0.<org.spongycastle.crypto.tls.ServerName: short nameType>;

        return s0;
    }
