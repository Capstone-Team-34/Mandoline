org.spongycastle.crypto.tls.TlsDHEKeyExchange extends org.spongycastle.crypto.tls.TlsDHKeyExchange
protected org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials
    public void <init>(int, java.util.Vector, org.spongycastle.crypto.params.DHParameters)
    {
        org.spongycastle.crypto.tls.TlsDHEKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        org.spongycastle.crypto.params.DHParameters $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: org.spongycastle.crypto.params.DHParameters;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: void <init>(int,java.util.Vector,org.spongycastle.crypto.params.DHParameters)>($i0, $r1, $r2);

        r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials> = null;

        return;
    }
    public byte[] generateServerKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHEKeyExchange r0;
        org.spongycastle.crypto.tls.DigestInputBuffer r1;
        byte[] r2, $r13;
        org.spongycastle.crypto.tls.DigitallySigned r3;
        org.spongycastle.crypto.params.DHParameters $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;
        org.spongycastle.crypto.tls.TlsContext $r6;
        java.security.SecureRandom $r7;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r8;
        org.spongycastle.crypto.tls.TlsSignerCredentials $r9;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r10;
        org.spongycastle.crypto.Digest $r11;
        org.spongycastle.crypto.tls.SecurityParameters $r12;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        if $r4 != null goto label1;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r5;

     label1:
        r1 = new org.spongycastle.crypto.tls.DigestInputBuffer;

        specialinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void <init>()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters,java.io.OutputStream)>($r7, $r4, r1);

        r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey> = $r8;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsSignerCredentials)>($r6, $r9);

        $r11 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm)>($r10);

        $r6 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r12 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        r2 = $r12.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $r13 = $r12.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $i0 = lengthof $r13;

        interfaceinvoke $r11.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        r2 = $r12.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $r13 = $r12.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $i0 = lengthof $r13;

        interfaceinvoke $r11.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        virtualinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>($r11);

        $i0 = interfaceinvoke $r11.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        interfaceinvoke $r11.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials>;

        r2 = interfaceinvoke $r9.<org.spongycastle.crypto.tls.TlsSignerCredentials: byte[] generateCertificateSignature(byte[])>(r2);

        r3 = new org.spongycastle.crypto.tls.DigitallySigned;

        specialinvoke r3.<org.spongycastle.crypto.tls.DigitallySigned: void <init>(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[])>($r10, r2);

        virtualinvoke r3.<org.spongycastle.crypto.tls.DigitallySigned: void encode(java.io.OutputStream)>(r1);

        r2 = virtualinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: byte[] toByteArray()>();

        return r2;
    }
    protected org.spongycastle.crypto.Signer initVerifyer(org.spongycastle.crypto.tls.TlsSigner, org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, org.spongycastle.crypto.tls.SecurityParameters)
    {
        org.spongycastle.crypto.tls.TlsDHEKeyExchange r0;
        org.spongycastle.crypto.tls.TlsSigner $r1;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r2;
        org.spongycastle.crypto.tls.SecurityParameters $r3;
        org.spongycastle.crypto.Signer $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        byte[] $r6, $r7;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsSigner;

        $r2 := @parameter1: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r3 := @parameter2: org.spongycastle.crypto.tls.SecurityParameters;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $r4 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsSigner: org.spongycastle.crypto.Signer createVerifyer(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r2, $r5);

        $r6 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $r7 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $i0 = lengthof $r7;

        interfaceinvoke $r4.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r6, 0, $i0);

        $r6 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $r7 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $i0 = lengthof $r7;

        interfaceinvoke $r4.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r6, 0, $i0);

        return $r4;
    }
    public void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHEKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.tls.TlsCredentials $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.TlsSignerCredentials $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $r2 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $z0 = $r2 instanceof org.spongycastle.crypto.tls.TlsSignerCredentials;

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        $r4 = (org.spongycastle.crypto.tls.TlsSignerCredentials) $r2;

        r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials> = $r4;

        return;
    }
    public void processServerKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHEKeyExchange r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.tls.SignerInputBuffer r2;
        org.spongycastle.util.io.TeeInputStream r3;
        org.spongycastle.crypto.tls.TlsContext $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r5;
        org.spongycastle.crypto.tls.ServerDHParams $r6;
        org.spongycastle.crypto.tls.DigitallySigned $r7;
        org.spongycastle.crypto.tls.TlsSigner $r8;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r9;
        org.spongycastle.crypto.Signer $r10;
        byte[] $r11;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r12;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r13;
        org.spongycastle.crypto.params.DHParameters $r14;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        r2 = new org.spongycastle.crypto.tls.SignerInputBuffer;

        specialinvoke r2.<org.spongycastle.crypto.tls.SignerInputBuffer: void <init>()>();

        r3 = new org.spongycastle.util.io.TeeInputStream;

        specialinvoke r3.<org.spongycastle.util.io.TeeInputStream: void <init>(java.io.InputStream,java.io.OutputStream)>($r1, r2);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.tls.ServerDHParams parse(java.io.InputStream)>(r3);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = staticinvoke <org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.DigitallySigned parse(org.spongycastle.crypto.tls.TlsContext,java.io.InputStream)>($r4, $r1);

        $r8 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        $r9 = virtualinvoke $r7.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm()>();

        $r10 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.Signer initVerifyer(org.spongycastle.crypto.tls.TlsSigner,org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.tls.SecurityParameters)>($r8, $r9, $r5);

        virtualinvoke r2.<org.spongycastle.crypto.tls.SignerInputBuffer: void updateSigner(org.spongycastle.crypto.Signer)>($r10);

        $r11 = virtualinvoke $r7.<org.spongycastle.crypto.tls.DigitallySigned: byte[] getSignature()>();

        $z0 = interfaceinvoke $r10.<org.spongycastle.crypto.Signer: boolean verifySignature(byte[])>($r11);

        if $z0 != 0 goto label1;

        $r12 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r12.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(51);

        throw $r12;

     label1:
        $r13 = virtualinvoke $r6.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters getPublicKey()>();

        $r13 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r13);

        r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = $r13;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        $r14 = virtualinvoke $r13.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r14 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters)>($r14);

        r0.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters> = $r14;

        return;
    }
