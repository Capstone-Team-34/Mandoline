org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials extends org.spongycastle.crypto.tls.AbstractTlsAgreementCredentials
protected org.spongycastle.crypto.BasicAgreement basicAgreement
protected org.spongycastle.crypto.tls.Certificate certificate
protected org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey
protected boolean truncateAgreement
    public void <init>(org.spongycastle.crypto.tls.Certificate, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        org.spongycastle.crypto.agreement.DHBasicAgreement $r4;
        org.spongycastle.crypto.agreement.ECDHBasicAgreement $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsAgreementCredentials: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be null");

        throw $r3;

     label1:
        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be empty");

        throw $r3;

     label2:
        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' cannot be null");

        throw $r3;

     label3:
        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' must be private");

        throw $r3;

     label4:
        $z0 = $r2 instanceof org.spongycastle.crypto.params.DHPrivateKeyParameters;

        if $z0 == 0 goto label6;

        $r4 = new org.spongycastle.crypto.agreement.DHBasicAgreement;

        specialinvoke $r4.<org.spongycastle.crypto.agreement.DHBasicAgreement: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.BasicAgreement basicAgreement> = $r4;

        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: boolean truncateAgreement> = 1;

     label5:
        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.tls.Certificate certificate> = $r1;

        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey> = $r2;

        return;

     label6:
        $z0 = $r2 instanceof org.spongycastle.crypto.params.ECPrivateKeyParameters;

        if $z0 == 0 goto label7;

        $r5 = new org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        specialinvoke $r5.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.BasicAgreement basicAgreement> = $r5;

        r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: boolean truncateAgreement> = 0;

        goto label5;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'privateKey\' type not supported: ");

        $r7 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }
    public byte[] generateAgreement(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1, $r2;
        org.spongycastle.crypto.BasicAgreement $r3;
        java.math.BigInteger $r4;
        boolean $z0;
        byte[] $r5;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.BasicAgreement basicAgreement>;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey>;

        interfaceinvoke $r3.<org.spongycastle.crypto.BasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>($r2);

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.BasicAgreement basicAgreement>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)>($r1);

        $z0 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: boolean truncateAgreement>;

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r4);

        return $r5;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.BasicAgreement basicAgreement>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.BasicAgreement: int getFieldSize()>();

        $r5 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i0, $r4);

        return $r5;
    }
    public org.spongycastle.crypto.tls.Certificate getCertificate()
    {
        org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials r0;
        org.spongycastle.crypto.tls.Certificate r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials;

        r1 = r0.<org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials: org.spongycastle.crypto.tls.Certificate certificate>;

        return r1;
    }
