org.spongycastle.crypto.tls.TlsRSAUtils extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsRSAUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.params.RSAKeyParameters, java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.io.OutputStream $r2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        org.spongycastle.crypto.encodings.PKCS1Encoding r4;
        byte[] r5, $r10;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.tls.ProtocolVersion $r7;
        org.spongycastle.crypto.engines.RSABlindedEngine $r8;
        org.spongycastle.crypto.params.ParametersWithRandom $r9;
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r11;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: org.spongycastle.crypto.params.RSAKeyParameters;

        $r2 := @parameter2: java.io.OutputStream;

        r5 = newarray (byte)[48];

        $r6 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

        $r7 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion,byte[],int)>($r7, r5, 0);

        r4 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r8 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r8.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r8);

        $r9 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r6 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        specialinvoke $r9.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r1, $r6);

        virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r9);

        $i0 = lengthof r5;

     label1:
        $r10 = virtualinvoke r4.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>(r5, 0, $i0);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r0);

     label2:
        if $z0 == 0 goto label5;

     label3:
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r10);

     label4:
        return r5;

     label5:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r10, $r2);

     label6:
        return r5;

     label7:
        r3 := @caughtexception;

        $r11 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r11.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(80, r3);

        throw $r11;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label7;
        catch org.spongycastle.crypto.InvalidCipherTextException from label3 to label4 with label7;
        catch org.spongycastle.crypto.InvalidCipherTextException from label5 to label6 with label7;
    }
    public static byte[] safeDecryptPreMasterSecret(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.params.RSAKeyParameters, byte[])
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        byte[] $r2, r4, $r7;
        org.spongycastle.crypto.encodings.PKCS1Encoding r3;
        int i0, $i2, $i3, $i4;
        org.spongycastle.crypto.tls.ProtocolVersion $r5;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.engines.RSABlindedEngine $r8;
        org.spongycastle.crypto.params.ParametersWithRandom $r9;
        byte $b1;
        java.lang.Exception $r10;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: org.spongycastle.crypto.params.RSAKeyParameters;

        $r2 := @parameter2: byte[];

        $r5 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        r4 = newarray (byte)[48];

        $r6 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r4);

        $r7 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>(r4);

        r3 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r8 = new org.spongycastle.crypto.engines.RSABlindedEngine;

     label1:
        specialinvoke $r8.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,byte[])>($r8, r4);

     label2:
        $r9 = new org.spongycastle.crypto.params.ParametersWithRandom;

     label3:
        $r6 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        specialinvoke $r9.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r1, $r6);

        virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r9);

        i0 = lengthof $r2;

        $r2 = virtualinvoke r3.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r2, 0, i0);

     label4:
        $r7 = $r2;

     label5:
        goto label6;

     label6:
        i0 = virtualinvoke $r5.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        $b1 = $r7[0];

        $i2 = $b1 & 255;

        i0 = i0 ^ $i2;

        $i2 = virtualinvoke $r5.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        $b1 = $r7[1];

        $i3 = $b1 & 255;

        $i2 = $i2 ^ $i3;

        i0 = i0 | $i2;

        $i2 = i0 >> 1;

        i0 = i0 | $i2;

        $i2 = i0 >> 2;

        i0 = i0 | $i2;

        $i2 = i0 >> 4;

        i0 = i0 | $i2;

        i0 = i0 & 1;

        i0 = i0 + -1;

        i0 = i0 ^ -1;

        $i2 = 0;

     label7:
        if $i2 >= 48 goto label9;

        $b1 = $r7[$i2];

        $i3 = i0 ^ -1;

        $i3 = $b1 & $i3;

        $b1 = r4[$i2];

        $i4 = $b1 & i0;

        $i3 = $i3 | $i4;

        $b1 = (byte) $i3;

        $r7[$i2] = $b1;

        $i2 = $i2 + 1;

        goto label7;

     label8:
        $r10 := @caughtexception;

        goto label5;

     label9:
        return $r7;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label4 with label8;
    }
