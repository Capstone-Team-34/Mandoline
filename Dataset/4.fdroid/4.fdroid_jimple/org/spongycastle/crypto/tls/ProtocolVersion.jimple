org.spongycastle.crypto.tls.ProtocolVersion extends java.lang.Object
public static final org.spongycastle.crypto.tls.ProtocolVersion DTLSv10
public static final org.spongycastle.crypto.tls.ProtocolVersion DTLSv12
public static final org.spongycastle.crypto.tls.ProtocolVersion SSLv3
public static final org.spongycastle.crypto.tls.ProtocolVersion TLSv10
public static final org.spongycastle.crypto.tls.ProtocolVersion TLSv11
public static final org.spongycastle.crypto.tls.ProtocolVersion TLSv12
private java.lang.String name
private int version
    static void <clinit>()
    {
        org.spongycastle.crypto.tls.ProtocolVersion $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(768, "SSL 3.0");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion SSLv3> = $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(769, "TLS 1.0");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv10> = $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(770, "TLS 1.1");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv11> = $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(771, "TLS 1.2");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12> = $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(65279, "DTLS 1.0");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion DTLSv10> = $r0;

        $r0 = new org.spongycastle.crypto.tls.ProtocolVersion;

        specialinvoke $r0.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>(65277, "DTLS 1.2");

        <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion DTLSv12> = $r0;

        return;
    }
    private void <init>(int, java.lang.String)
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = 65535 & $i0;

        r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version> = $i0;

        r0.<org.spongycastle.crypto.tls.ProtocolVersion: java.lang.String name> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.ProtocolVersion get(int, int) throws java.io.IOException
    {
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        lookupswitch($i0)
        {
            case 3: goto label02;
            case 254: goto label08;
            default: goto label01;
        };

     label01:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r0;

     label02:
        lookupswitch($i1)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            default: goto label03;
        };

     label03:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getUnknownVersion(int,int,java.lang.String)>($i0, $i1, "TLS");

        return $r1;

     label04:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion SSLv3>;

        return $r1;

     label05:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv10>;

        return $r1;

     label06:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv11>;

        return $r1;

     label07:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        return $r1;

     label08:
        lookupswitch($i1)
        {
            case 253: goto label12;
            case 254: goto label11;
            case 255: goto label10;
            default: goto label09;
        };

     label09:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion getUnknownVersion(int,int,java.lang.String)>($i0, $i1, "DTLS");

        return $r1;

     label10:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion DTLSv10>;

        return $r1;

     label11:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r0;

     label12:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion DTLSv12>;

        return $r1;
    }
    private static org.spongycastle.crypto.tls.ProtocolVersion getUnknownVersion(int, int, java.lang.String) throws java.io.IOException
    {
        int $i0, $i1;
        java.lang.String $r0, $r1;
        org.spongycastle.crypto.tls.ProtocolVersion $r2;
        java.lang.StringBuilder $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.lang.String;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(int)>($i1);

        $i0 = $i0 << 8;

        $i0 = $i0 | $i1;

        $i1 = 65536 | $i0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r1 = staticinvoke <org.spongycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>($r1);

        $r2 = new org.spongycastle.crypto.tls.ProtocolVersion;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0x");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: void <init>(int,java.lang.String)>($i0, $r0);

        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r2;
        boolean $z0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter0: java.lang.Object;

        if r0 == $r1 goto label1;

        $z0 = $r1 instanceof org.spongycastle.crypto.tls.ProtocolVersion;

        if $z0 == 0 goto label2;

        $r2 = (org.spongycastle.crypto.tls.ProtocolVersion) $r1;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: boolean equals(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean equals(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        if $r1 == null goto label1;

        $i1 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        $i0 = $r1.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion()
    {
        boolean $z0;
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion DTLSv10>;

        if r0 != $r1 goto label2;

        r0 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv11>;

        return r0;

     label2:
        r0 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv12>;

        return r0;
    }
    public int getFullVersion()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        i0 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        return i0;
    }
    public int getMajorVersion()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $i0 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        $i0 = $i0 >> 8;

        return $i0;
    }
    public int getMinorVersion()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $i0 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        $i0 = $i0 & 255;

        return $i0;
    }
    public int hashCode()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        i0 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: int version>;

        return i0;
    }
    public boolean isDTLS()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        if $i0 != 254 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r1;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $z0 = 1;

        i0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        if i0 == $i1 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        i0 = i0 - $i1;

        $z1 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z1 == 0 goto label4;

        if i0 > 0 goto label3;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        if i0 >= 0 goto label2;

        $z0 = 0;

        goto label2;
    }
    public boolean isLaterVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r1;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        $z0 = 1;

        i0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        if i0 == $i1 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMinorVersion()>();

        i0 = i0 - $i1;

        $z1 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z1 == 0 goto label4;

        if i0 <= 0 goto label3;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        if i0 < 0 goto label2;

        $z0 = 0;

        goto label2;
    }
    public boolean isSSL()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0, $r1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion SSLv3>;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isTLS()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.tls.ProtocolVersion: int getMajorVersion()>();

        if $i0 != 3 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String toString()
    {
        org.spongycastle.crypto.tls.ProtocolVersion r0;
        java.lang.String r1;

        r0 := @this: org.spongycastle.crypto.tls.ProtocolVersion;

        r1 = r0.<org.spongycastle.crypto.tls.ProtocolVersion: java.lang.String name>;

        return r1;
    }
