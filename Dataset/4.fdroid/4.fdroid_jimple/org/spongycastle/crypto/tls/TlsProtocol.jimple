org.spongycastle.crypto.tls.TlsProtocol extends java.lang.Object
protected static final short CS_CERTIFICATE_REQUEST
protected static final short CS_CERTIFICATE_STATUS
protected static final short CS_CERTIFICATE_VERIFY
protected static final short CS_CLIENT_CERTIFICATE
protected static final short CS_CLIENT_FINISHED
protected static final short CS_CLIENT_HELLO
protected static final short CS_CLIENT_KEY_EXCHANGE
protected static final short CS_CLIENT_SUPPLEMENTAL_DATA
protected static final short CS_END
protected static final short CS_SERVER_CERTIFICATE
protected static final short CS_SERVER_FINISHED
protected static final short CS_SERVER_HELLO
protected static final short CS_SERVER_HELLO_DONE
protected static final short CS_SERVER_KEY_EXCHANGE
protected static final short CS_SERVER_SESSION_TICKET
protected static final short CS_SERVER_SUPPLEMENTAL_DATA
protected static final short CS_START
protected static final java.lang.Integer EXT_RenegotiationInfo
protected static final java.lang.Integer EXT_SessionTicket
private static final java.lang.String TLS_ERROR_MESSAGE
private org.spongycastle.crypto.tls.ByteQueue alertQueue
protected boolean allowCertificateStatus
private volatile boolean appDataReady
private org.spongycastle.crypto.tls.ByteQueue applicationDataQueue
protected java.util.Hashtable clientExtensions
private volatile boolean closed
protected short connection_state
protected boolean expectSessionTicket
private byte[] expected_verify_data
private volatile boolean failedWithError
private org.spongycastle.crypto.tls.ByteQueue handshakeQueue
protected int[] offeredCipherSuites
protected short[] offeredCompressionMethods
protected org.spongycastle.crypto.tls.Certificate peerCertificate
protected boolean receivedChangeCipherSpec
org.spongycastle.crypto.tls.RecordStream recordStream
protected boolean resumedSession
protected java.security.SecureRandom secureRandom
protected boolean secure_renegotiation
protected org.spongycastle.crypto.tls.SecurityParameters securityParameters
protected java.util.Hashtable serverExtensions
protected org.spongycastle.crypto.tls.SessionParameters sessionParameters
private volatile boolean splitApplicationDataRecords
private org.spongycastle.crypto.tls.TlsInputStream tlsInputStream
private org.spongycastle.crypto.tls.TlsOutputStream tlsOutputStream
protected org.spongycastle.crypto.tls.TlsSession tlsSession
    static void <clinit>()
    {
        java.lang.Integer $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(65281);

        <org.spongycastle.crypto.tls.TlsProtocol: java.lang.Integer EXT_RenegotiationInfo> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(35);

        <org.spongycastle.crypto.tls.TlsProtocol: java.lang.Integer EXT_SessionTicket> = $r0;

        return;
    }
    public void <init>(java.io.InputStream, java.io.OutputStream, java.security.SecureRandom)
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.tls.ByteQueue $r4;
        org.spongycastle.crypto.tls.RecordStream $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.spongycastle.crypto.tls.ByteQueue;

        specialinvoke $r4.<org.spongycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue> = $r4;

        $r4 = new org.spongycastle.crypto.tls.ByteQueue;

        specialinvoke $r4.<org.spongycastle.crypto.tls.ByteQueue: void <init>(int)>(2);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue alertQueue> = $r4;

        $r4 = new org.spongycastle.crypto.tls.ByteQueue;

        specialinvoke $r4.<org.spongycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue> = $r4;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsInputStream tlsInputStream> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsOutputStream tlsOutputStream> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean failedWithError> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean splitApplicationDataRecords> = 1;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: int[] offeredCipherSuites> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: short[] offeredCompressionMethods> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable clientExtensions> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable serverExtensions> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: short connection_state> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean resumedSession> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean receivedChangeCipherSpec> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean secure_renegotiation> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean allowCertificateStatus> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean expectSessionTicket> = 0;

        $r5 = new org.spongycastle.crypto.tls.RecordStream;

        specialinvoke $r5.<org.spongycastle.crypto.tls.RecordStream: void <init>(org.spongycastle.crypto.tls.TlsProtocol,java.io.InputStream,java.io.OutputStream)>(r0, $r1, $r2);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream> = $r5;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: java.security.SecureRandom secureRandom> = $r3;

        return;
    }
    protected static void assertEmpty(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $r0 := @parameter0: java.io.ByteArrayInputStream;

        $i0 = virtualinvoke $r0.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r1;

     label1:
        return;
    }
    protected static byte[] createRandomBlock(boolean, org.spongycastle.crypto.prng.RandomGenerator)
    {
        boolean $z0;
        org.spongycastle.crypto.prng.RandomGenerator $r0;
        byte[] r1;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: org.spongycastle.crypto.prng.RandomGenerator;

        r1 = newarray (byte)[32];

        interfaceinvoke $r0.<org.spongycastle.crypto.prng.RandomGenerator: void nextBytes(byte[])>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeGMTUnixTime(byte[],int)>(r1, 0);

     label1:
        return r1;
    }
    protected static byte[] createRenegotiationInfo(byte[]) throws java.io.IOException
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] encodeOpaque8(byte[])>($r0);

        return $r0;
    }
    protected static void establishMasterSecret(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.TlsKeyExchange) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.TlsKeyExchange $r1;
        byte[] $r2, $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r3;
        java.lang.Throwable $r5;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: org.spongycastle.crypto.tls.TlsKeyExchange;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsKeyExchange: byte[] generatePremasterSecret()>();

     label1:
        $r3 = interfaceinvoke $r0.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateMasterSecret(org.spongycastle.crypto.tls.TlsContext,byte[])>($r0, $r2);

        $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] masterSecret> = $r4;

     label2:
        if $r2 == null goto label5;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;

     label3:
        $r5 := @caughtexception;

        if $r2 == null goto label4;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected static byte[] getCurrentPRFHash(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.TlsHandshakeHash, byte[])
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r1;
        byte[] $r2;
        org.spongycastle.crypto.Digest $r3;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: org.spongycastle.crypto.tls.TlsHandshakeHash;

        $r2 := @parameter2: byte[];

        $r3 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsHandshakeHash: org.spongycastle.crypto.Digest forkPRFHash()>();

        if $r2 == null goto label1;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label1;

        $i0 = lengthof $r2;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

     label1:
        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i0];

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        return $r2;
    }
    protected static int getPRFAlgorithm(org.spongycastle.crypto.tls.TlsContext, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r0);

        lookupswitch($i0)
        {
            case 59: goto label2;
            case 60: goto label2;
            case 61: goto label2;
            case 62: goto label2;
            case 63: goto label2;
            case 64: goto label2;
            case 103: goto label2;
            case 104: goto label2;
            case 105: goto label2;
            case 106: goto label2;
            case 107: goto label2;
            case 156: goto label2;
            case 157: goto label3;
            case 158: goto label2;
            case 159: goto label3;
            case 160: goto label2;
            case 161: goto label3;
            case 162: goto label2;
            case 163: goto label3;
            case 164: goto label2;
            case 165: goto label3;
            case 168: goto label2;
            case 169: goto label3;
            case 170: goto label2;
            case 171: goto label3;
            case 172: goto label2;
            case 173: goto label3;
            case 175: goto label5;
            case 177: goto label5;
            case 179: goto label5;
            case 181: goto label5;
            case 183: goto label5;
            case 185: goto label5;
            case 186: goto label2;
            case 187: goto label2;
            case 188: goto label2;
            case 189: goto label2;
            case 190: goto label2;
            case 191: goto label2;
            case 192: goto label2;
            case 193: goto label2;
            case 194: goto label2;
            case 195: goto label2;
            case 196: goto label2;
            case 197: goto label2;
            case 49187: goto label2;
            case 49188: goto label3;
            case 49189: goto label2;
            case 49190: goto label3;
            case 49191: goto label2;
            case 49192: goto label3;
            case 49193: goto label2;
            case 49194: goto label3;
            case 49195: goto label2;
            case 49196: goto label3;
            case 49197: goto label2;
            case 49198: goto label3;
            case 49199: goto label2;
            case 49200: goto label3;
            case 49201: goto label2;
            case 49202: goto label3;
            case 49208: goto label5;
            case 49211: goto label5;
            case 49266: goto label2;
            case 49267: goto label3;
            case 49268: goto label2;
            case 49269: goto label3;
            case 49270: goto label2;
            case 49271: goto label3;
            case 49272: goto label2;
            case 49273: goto label3;
            case 49274: goto label2;
            case 49275: goto label3;
            case 49276: goto label2;
            case 49277: goto label3;
            case 49278: goto label2;
            case 49279: goto label3;
            case 49280: goto label2;
            case 49281: goto label3;
            case 49282: goto label2;
            case 49283: goto label3;
            case 49284: goto label2;
            case 49285: goto label3;
            case 49286: goto label2;
            case 49287: goto label3;
            case 49288: goto label2;
            case 49289: goto label3;
            case 49290: goto label2;
            case 49291: goto label3;
            case 49292: goto label2;
            case 49293: goto label3;
            case 49294: goto label2;
            case 49295: goto label3;
            case 49296: goto label2;
            case 49297: goto label3;
            case 49298: goto label2;
            case 49299: goto label3;
            case 49301: goto label5;
            case 49303: goto label5;
            case 49305: goto label5;
            case 49307: goto label5;
            case 49308: goto label2;
            case 49309: goto label2;
            case 49310: goto label2;
            case 49311: goto label2;
            case 49312: goto label2;
            case 49313: goto label2;
            case 49314: goto label2;
            case 49315: goto label2;
            case 49316: goto label2;
            case 49317: goto label2;
            case 49318: goto label2;
            case 49319: goto label2;
            case 49320: goto label2;
            case 49321: goto label2;
            case 49322: goto label2;
            case 49323: goto label2;
            case 49324: goto label2;
            case 49325: goto label2;
            case 49326: goto label2;
            case 49327: goto label2;
            case 52243: goto label2;
            case 52244: goto label2;
            case 52245: goto label2;
            default: goto label1;
        };

     label1:
        if $z0 == 0 goto label6;

        return 1;

     label2:
        if $z0 != 0 goto label7;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r1;

     label3:
        if $z0 == 0 goto label4;

        return 2;

     label4:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r1;

     label5:
        if $z0 == 0 goto label6;

        return 2;

     label6:
        return 0;

     label7:
        return 1;
    }
    private void processAlert() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short s0, s1;
        org.spongycastle.crypto.tls.ByteQueue $r1;
        int $i2;
        byte[] $r2;
        byte $b3;
        org.spongycastle.crypto.tls.TlsPeer $r3;
        org.spongycastle.crypto.tls.RecordStream $r4;
        java.io.IOException $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue alertQueue>;

        $i2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        if $i2 < 2 goto label4;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue alertQueue>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ByteQueue: byte[] removeData(int,int)>(2, 0);

        $b3 = $r2[0];

        s1 = (short) $b3;

        $b3 = $r2[1];

        s0 = (short) $b3;

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPeer: void notifyAlertReceived(short,short)>(s1, s0);

        if s1 != 2 goto label2;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void invalidateSession()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean failedWithError> = 1;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed> = 1;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void safeClose()>();

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r5;

     label2:
        if s0 != 0 goto label3;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleClose(boolean)>(0);

     label3:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleWarningMessage(short)>(s0);

        goto label1;

     label4:
        return;
    }
    private void processApplicationData()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        return;
    }
    private void processChangeCipherSpec(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3;
        short $s4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.ByteQueue $r3;
        org.spongycastle.crypto.tls.RecordStream $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label5;

        $i3 = $i0 + i2;

        $s4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(byte[],int)>($r1, $i3);

        if $s4 == 1 goto label2;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r2;

     label2:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean receivedChangeCipherSpec>;

        if $z0 != 0 goto label3;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue alertQueue>;

        $i3 = virtualinvoke $r3.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        if $i3 > 0 goto label3;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i3 = virtualinvoke $r3.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        if $i3 <= 0 goto label4;

     label3:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label4:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void receivedReadCipherSpec()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean receivedChangeCipherSpec> = 1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleChangeCipherSpecMessage()>();

        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }
    private void processHandshake() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] r1, $r3, $r6;
        boolean z0;
        org.spongycastle.crypto.tls.ByteQueue $r2;
        int $i0, $i2, $i3;
        short $s1, $s4;
        org.spongycastle.crypto.tls.RecordStream $r4;
        org.spongycastle.crypto.tls.TlsContext $r5;
        org.spongycastle.crypto.tls.SecurityParameters $r7;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

     label01:
        z0 = 0;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        if $i0 < 4 goto label06;

        r1 = newarray (byte)[4];

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r1, 0, 4, 0);

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(byte[],int)>(r1, 0);

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>(r1, 1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        $i3 = $i0 + 4;

        if $i2 < $i3 goto label06;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: byte[] removeData(int,int)>($i0, 4);

        $s4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: short connection_state>;

        if $s4 == 16 goto label02;

        if $s1 != 20 goto label07;

     label02:
        z0 = 1;

     label03:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void checkReceivedChangeCipherSpec(boolean)>(z0);

        lookupswitch($s1)
        {
            case 0: goto label05;
            case 20: goto label08;
            default: goto label04;
        };

     label04:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void updateHandshakeData(byte[],int,int)>(r1, 0, 4);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void updateHandshakeData(byte[],int,int)>($r3, 0, $i0);

     label05:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleHandshakeMessage(short,byte[])>($s1, $r3);

        z0 = 1;

     label06:
        if z0 != 0 goto label01;

        return;

     label07:
        z0 = 0;

        goto label03;

     label08:
        $r5 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        if $r6 != null goto label04;

        $r7 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r6 = virtualinvoke $r7.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getMasterSecret()>();

        if $r6 == null goto label04;

        z0 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsContext: boolean isServer()>();

        if z0 != 0 goto label10;

        z0 = 1;

     label09:
        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] createVerifyData(boolean)>(z0);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data> = $r6;

        goto label04;

     label10:
        z0 = 0;

        goto label09;
    }
    protected static java.util.Hashtable readExtensions(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r0;
        int $i0;
        byte[] $r1;
        java.util.Hashtable r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        $r0 := @parameter0: java.io.ByteArrayInputStream;

        $i0 = virtualinvoke $r0.<java.io.ByteArrayInputStream: int available()>();

        if $i0 >= 1 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r0);

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        r2 = new java.util.Hashtable;

        specialinvoke r2.<java.util.Hashtable: void <init>()>();

     label2:
        $i0 = virtualinvoke $r0.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label3;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        $r3 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i0);

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        $r4 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $r4 == null goto label2;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r5;

     label3:
        return r2;
    }
    protected static java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r0;
        java.util.Vector r1;
        byte[] $r2;
        int $i0;
        org.spongycastle.crypto.tls.SupplementalDataEntry $r3;

        $r0 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque24(java.io.InputStream)>($r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r0);

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>()>();

     label1:
        $i0 = virtualinvoke $r0.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label2;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        $r3 = new org.spongycastle.crypto.tls.SupplementalDataEntry;

        specialinvoke $r3.<org.spongycastle.crypto.tls.SupplementalDataEntry: void <init>(int,byte[])>($i0, $r2);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r1;
    }
    protected static void writeExtensions(java.io.OutputStream, java.util.Hashtable) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        java.util.Hashtable $r1;
        java.io.ByteArrayOutputStream r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer r5;
        int $i0;
        byte[] $r6;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: java.util.Hashtable;

        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $r4 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r5);

        $r6 = (byte[]) $r4;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, r2);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r6, r2);

        goto label1;

     label2:
        $r6 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r6, $r0);

        return;
    }
    protected static void writeSupplementalData(java.io.OutputStream, java.util.Vector) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        java.util.Vector $r1;
        java.io.ByteArrayOutputStream r2;
        int i0, $i1;
        java.lang.Object $r3;
        org.spongycastle.crypto.tls.SupplementalDataEntry r4;
        byte[] $r5;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: java.util.Vector;

        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r4 = (org.spongycastle.crypto.tls.SupplementalDataEntry) $r3;

        $i1 = virtualinvoke r4.<org.spongycastle.crypto.tls.SupplementalDataEntry: int getDataType()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>($i1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i1, r2);

        $r5 = virtualinvoke r4.<org.spongycastle.crypto.tls.SupplementalDataEntry: byte[] getData()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r5, r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque24(byte[],java.io.OutputStream)>($r5, $r0);

        return;
    }
    protected int applicationDataAvailable() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        int $i0;
        org.spongycastle.crypto.tls.ByteQueue $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        return $i0;
    }
    protected void applyMaxFragmentLengthExtension() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        int i0;
        boolean $z0;
        org.spongycastle.crypto.tls.SecurityParameters $r1;
        short $s1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        org.spongycastle.crypto.tls.RecordStream $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $s1 = $r1.<org.spongycastle.crypto.tls.SecurityParameters: short maxFragmentLength>;

        if $s1 < 0 goto label2;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $s1 = $r1.<org.spongycastle.crypto.tls.SecurityParameters: short maxFragmentLength>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s1);

        if $z0 != 0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $s1 = $r1.<org.spongycastle.crypto.tls.SecurityParameters: short maxFragmentLength>;

        i0 = $s1 + 8;

        i0 = 1 << i0;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: void setPlaintextLimit(int)>(i0);

     label2:
        return;
    }
    protected void checkReceivedChangeCipherSpec(boolean) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $z0 := @parameter0: boolean;

        $z1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean receivedChangeCipherSpec>;

        if $z0 == $z1 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r1;

     label1:
        return;
    }
    protected void cleanupHandshake()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] $r1;
        org.spongycastle.crypto.tls.SecurityParameters $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data> = null;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.SecurityParameters: void clear()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: int[] offeredCipherSuites> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: short[] offeredCompressionMethods> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable clientExtensions> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable serverExtensions> = null;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean resumedSession> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean receivedChangeCipherSpec> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean secure_renegotiation> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean allowCertificateStatus> = 0;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean expectSessionTicket> = 0;

        return;
    }
    public void close() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleClose(boolean)>(1);

        return;
    }
    protected void completeHandshake() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        boolean $z0, $z1;
        short $s0;
        java.lang.Throwable $r1;
        org.spongycastle.crypto.tls.RecordStream $r2;
        org.spongycastle.crypto.tls.TlsContext $r3;
        org.spongycastle.crypto.tls.TlsInputStream $r4;
        org.spongycastle.crypto.tls.TlsOutputStream $r5;
        org.spongycastle.crypto.tls.TlsSession $r6;
        org.spongycastle.crypto.tls.SessionParameters $r7;
        org.spongycastle.crypto.tls.SessionParameters$Builder $r8;
        org.spongycastle.crypto.tls.SecurityParameters $r9;
        int $i1;
        byte[] $r10;
        org.spongycastle.crypto.tls.Certificate $r11;
        java.util.Hashtable $r12;
        org.spongycastle.crypto.tls.TlsSessionImpl $r13;
        org.spongycastle.crypto.tls.AbstractTlsContext $r14;
        org.spongycastle.crypto.tls.TlsPeer $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $z0 = 1;

     label01:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: short connection_state>;

     label02:
        if $s0 == 16 goto label08;

     label03:
        $z1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

     label04:
        if $z1 == 0 goto label05;

     label05:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeReadRecord()>();

     label06:
        goto label01;

     label07:
        $r1 := @caughtexception;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void cleanupHandshake()>();

        throw $r1;

     label08:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.RecordStream: void finaliseHandshake()>();

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv11(org.spongycastle.crypto.tls.TlsContext)>($r3);

     label09:
        if $z1 != 0 goto label21;

     label10:
        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean splitApplicationDataRecords> = $z0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady>;

     label11:
        if $z0 != 0 goto label13;

     label12:
        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady> = 1;

        $r4 = new org.spongycastle.crypto.tls.TlsInputStream;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsInputStream: void <init>(org.spongycastle.crypto.tls.TlsProtocol)>(r0);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsInputStream tlsInputStream> = $r4;

        $r5 = new org.spongycastle.crypto.tls.TlsOutputStream;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsOutputStream: void <init>(org.spongycastle.crypto.tls.TlsProtocol)>(r0);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsOutputStream tlsOutputStream> = $r5;

     label13:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

     label14:
        if $r6 == null goto label19;

     label15:
        $r7 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

     label16:
        if $r7 != null goto label18;

     label17:
        $r8 = new org.spongycastle.crypto.tls.SessionParameters$Builder;

        specialinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: void <init>()>();

        $r9 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $i1 = virtualinvoke $r9.<org.spongycastle.crypto.tls.SecurityParameters: int getCipherSuite()>();

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setCipherSuite(int)>($i1);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $s0 = virtualinvoke $r9.<org.spongycastle.crypto.tls.SecurityParameters: short getCompressionAlgorithm()>();

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setCompressionAlgorithm(short)>($s0);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getMasterSecret()>();

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setMasterSecret(byte[])>($r10);

        $r11 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setPeerCertificate(org.spongycastle.crypto.tls.Certificate)>($r11);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getPSKIdentity()>();

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setPSKIdentity(byte[])>($r10);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getSRPIdentity()>();

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setSRPIdentity(byte[])>($r10);

        $r12 = r0.<org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable serverExtensions>;

        $r8 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters$Builder setServerExtensions(java.util.Hashtable)>($r12);

        $r7 = virtualinvoke $r8.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.SessionParameters build()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = $r7;

        $r13 = new org.spongycastle.crypto.tls.TlsSessionImpl;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        $r10 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsSession: byte[] getSessionID()>();

        $r7 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        specialinvoke $r13.<org.spongycastle.crypto.tls.TlsSessionImpl: void <init>(byte[],org.spongycastle.crypto.tls.SessionParameters)>($r10, $r7);

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession> = $r13;

     label18:
        $r14 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        virtualinvoke $r14.<org.spongycastle.crypto.tls.AbstractTlsContext: void setResumableSession(org.spongycastle.crypto.tls.TlsSession)>($r6);

     label19:
        $r15 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        interfaceinvoke $r15.<org.spongycastle.crypto.tls.TlsPeer: void notifyHandshakeComplete()>();

     label20:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void cleanupHandshake()>();

        return;

     label21:
        $z0 = 0;

        goto label10;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
        catch java.lang.Throwable from label17 to label20 with label07;
    }
    protected byte[] createVerifyData(boolean)
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        java.lang.String r2;
        byte[] r3;
        org.spongycastle.crypto.tls.RecordStream $r4;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        if $z0 == 0 goto label3;

        r2 = "server finished";

     label1:
        if $z0 == 0 goto label4;

        r3 = <org.spongycastle.crypto.tls.TlsUtils: byte[] SSL_SERVER>;

     label2:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()>();

        r3 = staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: byte[] getCurrentPRFHash(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsHandshakeHash,byte[])>($r1, $r5, r3);

        r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateVerifyData(org.spongycastle.crypto.tls.TlsContext,java.lang.String,byte[])>($r1, r2, r3);

        return r3;

     label3:
        r2 = "client finished";

        goto label1;

     label4:
        r3 = <org.spongycastle.crypto.tls.TlsUtils: byte[] SSL_CLIENT>;

        goto label2;
    }
    protected void failWithError(short, short, java.lang.String, java.lang.Throwable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0, $s1;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.RecordStream $r3;
        java.io.IOException $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Throwable;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label2;

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed> = 1;

        if $s0 != 2 goto label1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void invalidateSession()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean failedWithError> = 1;

     label1:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void raiseAlert(short,short,java.lang.String,java.lang.Throwable)>($s0, $s1, $r1, $r2);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: void safeClose()>();

        if $s0 == 2 goto label2;

        return;

     label2:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r4;
    }
    protected void flush() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.RecordStream $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.RecordStream: void flush()>();

        return;
    }
protected abstract org.spongycastle.crypto.tls.TlsContext getContext() { 
// no body
} 
abstract org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin() { 
// no body
} 
    public java.io.InputStream getInputStream()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.TlsInputStream r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsInputStream tlsInputStream>;

        return r1;
    }
    public java.io.OutputStream getOutputStream()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.TlsOutputStream r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsOutputStream tlsOutputStream>;

        return r1;
    }
protected abstract org.spongycastle.crypto.tls.TlsPeer getPeer() { 
// no body
} 
    protected void handleChangeCipherSpecMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        return;
    }
    protected void handleClose(boolean) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        boolean $z0, $z1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $z0 := @parameter0: boolean;

        $z1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z1 != 0 goto label2;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void raiseWarning(short,java.lang.String)>(90, "User canceled handshake");

     label1:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(1, 0, "Connection closed", null);

     label2:
        return;
    }
protected abstract void handleHandshakeMessage(short, byte[]) throws java.io.IOException { 
// no body
} 
    protected void handleWarningMessage(short) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        return;
    }
    protected void invalidateSession()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.SessionParameters $r1;
        org.spongycastle.crypto.tls.TlsSession $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.SessionParameters: void clear()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = null;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        if $r2 == null goto label2;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsSession: void invalidate()>();

        r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession> = null;

     label2:
        return;
    }
    protected boolean isClosed()
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        boolean z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        return z0;
    }
    protected void processFinishedMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        java.io.ByteArrayInputStream $r1;
        byte[] $r2, $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        if $r2 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        $i0 = lengthof $r2;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r1);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] expected_verify_data>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r4, $r2);

        if $z0 != 0 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(51);

        throw $r3;

     label2:
        return;
    }
    protected short processMaxFragmentLengthExtension(java.util.Hashtable, java.util.Hashtable, short) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        java.util.Hashtable $r1, $r2;
        short $s0, $s1, $s2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: java.util.Hashtable;

        $r2 := @parameter1: java.util.Hashtable;

        $s0 := @parameter2: short;

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short getMaxFragmentLengthExtension(java.util.Hashtable)>($r2);

        if $s1 < 0 goto label2;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s1);

        if $z0 == 0 goto label1;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean resumedSession>;

        if $z0 != 0 goto label2;

        $s2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short getMaxFragmentLengthExtension(java.util.Hashtable)>($r1);

        if $s1 == $s2 goto label2;

     label1:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>($s0);

        throw $r3;

     label2:
        return $s1;
    }
    protected void processRecord(short, byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0;
        byte[] $r1;
        int $i1, $i2;
        org.spongycastle.crypto.tls.ByteQueue $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        lookupswitch($s0)
        {
            case 20: goto label5;
            case 21: goto label2;
            case 22: goto label6;
            case 23: goto label3;
            case 24: goto label7;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue alertQueue>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>($r1, $i1, $i2);

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void processAlert()>();

        return;

     label3:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady>;

        if $z0 != 0 goto label4;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label4:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>($r1, $i1, $i2);

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void processApplicationData()>();

        return;

     label5:
        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void processChangeCipherSpec(byte[],int,int)>($r1, $i1, $i2);

        return;

     label6:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue handshakeQueue>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>($r1, $i1, $i2);

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void processHandshake()>();

        return;

     label7:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean appDataReady>;

        if $z0 != 0 goto label8;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label8:
        return;
    }
    protected void raiseAlert(short, short, java.lang.String, java.lang.Throwable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0, $s1;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        byte[] r3;
        byte $b2;
        org.spongycastle.crypto.tls.TlsPeer $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Throwable;

        $r4 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsPeer: void notifyAlertRaised(short,short,java.lang.String,java.lang.Throwable)>($s0, $s1, $r1, $r2);

        r3 = newarray (byte)[2];

        $b2 = (byte) $s0;

        r3[0] = $b2;

        $b2 = (byte) $s1;

        r3[1] = $b2;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeWriteRecord(short,byte[],int,int)>(21, r3, 0, 2);

        return;
    }
    protected void raiseWarning(short, java.lang.String) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        $r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void raiseAlert(short,short,java.lang.String,java.lang.Throwable)>(1, $s0, $r1, null);

        return;
    }
    protected int readApplicationData(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.tls.ByteQueue $r2;
        boolean $z0;
        java.io.IOException $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 >= 1 goto label2;

        return 0;

     label1:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeReadRecord()>();

     label2:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        if $i2 != 0 goto label4;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean failedWithError>;

        if $z0 == 0 goto label3;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r3;

     label3:
        return -1;

     label4:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: int available()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.ByteQueue applicationDataQueue>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.ByteQueue: void removeData(byte[],int,int,int)>($r1, $i0, $i1, 0);

        return $i1;
    }
    protected void refuseRenegotiation() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r2;

     label1:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void raiseWarning(short,java.lang.String)>(100, "Renegotiation not supported");

        return;
    }
    protected void safeReadRecord() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.RecordStream $r1;
        boolean $z0;
        java.io.EOFException $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert r3;
        short $s0;
        java.io.IOException r4;
        java.lang.RuntimeException r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

     label01:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

     label02:
        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.RecordStream: boolean readRecord()>();

     label03:
        if $z0 != 0 goto label12;

        $r2 = new java.io.EOFException;

     label04:
        specialinvoke $r2.<java.io.EOFException: void <init>()>();

     label05:
        throw $r2;

     label06:
        r3 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label07;

        $s0 = virtualinvoke r3.<org.spongycastle.crypto.tls.TlsFatalAlert: short getAlertDescription()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, $s0, "Failed to read record", r3);

     label07:
        throw r3;

     label08:
        r4 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label09;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, 80, "Failed to read record", r4);

     label09:
        throw r4;

     label10:
        r5 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label11;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, 80, "Failed to read record", r5);

     label11:
        throw r5;

     label12:
        return;

        catch org.spongycastle.crypto.tls.TlsFatalAlert from label02 to label03 with label06;
        catch org.spongycastle.crypto.tls.TlsFatalAlert from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label06 with label08;
        catch java.lang.RuntimeException from label01 to label03 with label10;
        catch java.lang.RuntimeException from label04 to label06 with label10;
    }
    protected void safeWriteRecord(short, byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        short $s0;
        byte[] $r1;
        int $i1, $i2;
        org.spongycastle.crypto.tls.RecordStream $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert r3;
        boolean $z0;
        java.io.IOException r4;
        java.lang.RuntimeException r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $s0 := @parameter0: short;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

     label2:
        virtualinvoke $r2.<org.spongycastle.crypto.tls.RecordStream: void writeRecord(short,byte[],int,int)>($s0, $r1, $i1, $i2);

     label3:
        return;

     label4:
        r3 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label5;

        $s0 = virtualinvoke r3.<org.spongycastle.crypto.tls.TlsFatalAlert: short getAlertDescription()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, $s0, "Failed to write record", r3);

     label5:
        throw r3;

     label6:
        r4 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label7;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, 80, "Failed to write record", r4);

     label7:
        throw r4;

     label8:
        r5 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 != 0 goto label9;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void failWithError(short,short,java.lang.String,java.lang.Throwable)>(2, 80, "Failed to write record", r5);

     label9:
        throw r5;

        catch org.spongycastle.crypto.tls.TlsFatalAlert from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.lang.RuntimeException from label1 to label3 with label8;
    }
    protected void sendCertificateMessage(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r1;
        org.spongycastle.crypto.tls.Certificate $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsContext $r3;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r2 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        if $r2 != null goto label1;

        $r2 = <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN>;

     label1:
        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsContext: boolean isServer()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isSSL()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.tls.ProtocolVersion: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" client didn\'t provide credentials");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void raiseWarning(short,java.lang.String)>(41, $r6);

        return;

     label2:
        r1 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 11);

        virtualinvoke $r2.<org.spongycastle.crypto.tls.Certificate: void encode(java.io.OutputStream)>(r1);

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendChangeCipherSpecMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] r1;
        int $i0;
        org.spongycastle.crypto.tls.RecordStream $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        r1 = newarray (byte)[1];

        r1[0] = 1;

        $i0 = lengthof r1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeWriteRecord(short,byte[],int,int)>(20, r1, 0, $i0);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.RecordStream: void sentWriteCipherSpec()>();

        return;
    }
    protected void sendFinishedMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r1;
        int $i0;
        org.spongycastle.crypto.tls.TlsContext $r2;
        boolean $z0;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsContext: boolean isServer()>();

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: byte[] createVerifyData(boolean)>($z0);

        r1 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        $i0 = lengthof $r3;

        specialinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short,int)>(r0, 20, $i0);

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void write(byte[])>($r3);

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendSupplementalDataMessage(java.util.Vector) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: java.util.Vector;

        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 23);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void writeSupplementalData(java.io.OutputStream,java.util.Vector)>(r2, $r1);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void writeData(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.IOException $r2;
        org.spongycastle.crypto.tls.RecordStream $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean closed>;

        if $z0 == 0 goto label2;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean failedWithError>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r2;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Sorry, connection has been closed, you cannot write more data");

        throw $r2;

     label2:
        if $i1 <= 0 goto label4;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsProtocol: boolean splitApplicationDataRecords>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeWriteRecord(short,byte[],int,int)>(23, $r1, $i0, 1);

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

     label3:
        if $i1 <= 0 goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $i2 = virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: int getPlaintextLimit()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeWriteRecord(short,byte[],int,int)>(23, $r1, $i0, $i2);

        $i0 = $i0 + $i2;

        $i1 = $i1 - $i2;

        goto label2;

     label4:
        return;
    }
    protected void writeHandshakeMessage(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsProtocol r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.tls.RecordStream $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsProtocol;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        if $i1 <= 0 goto label2;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.RecordStream: int getPlaintextLimit()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void safeWriteRecord(short,byte[],int,int)>(22, $r1, $i0, $i2);

        $i0 = $i0 + $i2;

        $i1 = $i1 - $i2;

        goto label1;

     label2:
        return;
    }
