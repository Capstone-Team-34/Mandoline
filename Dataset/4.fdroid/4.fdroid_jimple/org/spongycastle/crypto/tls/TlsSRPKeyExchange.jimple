org.spongycastle.crypto.tls.TlsSRPKeyExchange extends org.spongycastle.crypto.tls.AbstractTlsKeyExchange
protected org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier
protected byte[] identity
protected byte[] password
protected org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials
protected org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey
protected org.spongycastle.crypto.agreement.srp.SRP6Client srpClient
protected org.spongycastle.crypto.params.SRP6GroupParameters srpGroup
protected java.math.BigInteger srpPeerCredentials
protected byte[] srpSalt
protected org.spongycastle.crypto.agreement.srp.SRP6Server srpServer
protected java.math.BigInteger srpVerifier
protected org.spongycastle.crypto.tls.TlsSigner tlsSigner
    public void <init>(int, java.util.Vector, org.spongycastle.crypto.tls.TlsSRPGroupVerifier, byte[], byte[])
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsSRPGroupVerifier $r2;
        byte[] $r3, $r4;
        org.spongycastle.crypto.tls.TlsSigner $r5;
        org.spongycastle.crypto.agreement.srp.SRP6Client $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: org.spongycastle.crypto.tls.TlsSRPGroupVerifier;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void <init>(int,java.util.Vector)>($i0, $r1);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpVerifier> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials> = null;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner createSigner(int)>($i0);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner> = $r5;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier> = $r2;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] identity> = $r3;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] password> = $r4;

        $r6 = new org.spongycastle.crypto.agreement.srp.SRP6Client;

        specialinvoke $r6.<org.spongycastle.crypto.agreement.srp.SRP6Client: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient> = $r6;

        return;
    }
    public void <init>(int, java.util.Vector, byte[], org.spongycastle.crypto.tls.TlsSRPLoginParameters)
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        byte[] $r2;
        org.spongycastle.crypto.tls.TlsSRPLoginParameters $r3;
        org.spongycastle.crypto.tls.TlsSigner $r4;
        org.spongycastle.crypto.agreement.srp.SRP6Server $r5;
        org.spongycastle.crypto.params.SRP6GroupParameters $r6;
        java.math.BigInteger $r7;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: org.spongycastle.crypto.tls.TlsSRPLoginParameters;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void <init>(int,java.util.Vector)>($i0, $r1);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpVerifier> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt> = null;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials> = null;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner createSigner(int)>($i0);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner> = $r4;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] identity> = $r2;

        $r5 = new org.spongycastle.crypto.agreement.srp.SRP6Server;

        specialinvoke $r5.<org.spongycastle.crypto.agreement.srp.SRP6Server: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer> = $r5;

        $r6 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsSRPLoginParameters: org.spongycastle.crypto.params.SRP6GroupParameters getGroup()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup> = $r6;

        $r7 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsSRPLoginParameters: java.math.BigInteger getVerifier()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpVerifier> = $r7;

        $r2 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsSRPLoginParameters: byte[] getSalt()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt> = $r2;

        return;
    }
    public void <init>(int, java.util.Vector, byte[], byte[])
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        byte[] $r2, $r3;
        org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        $r4 = new org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier;

        specialinvoke $r4.<org.spongycastle.crypto.tls.DefaultTlsSRPGroupVerifier: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: void <init>(int,java.util.Vector,org.spongycastle.crypto.tls.TlsSRPGroupVerifier,byte[],byte[])>($i0, $r1, $r4, $r2, $r3);

        return;
    }
    protected static org.spongycastle.crypto.tls.TlsSigner createSigner(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;
        org.spongycastle.crypto.tls.TlsRSASigner $r1;
        org.spongycastle.crypto.tls.TlsDSSSigner $r2;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 21: goto label2;
            case 22: goto label4;
            case 23: goto label3;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported key exchange algorithm");

        throw $r0;

     label2:
        return null;

     label3:
        $r1 = new org.spongycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsRSASigner: void <init>()>();

        return $r1;

     label4:
        $r2 = new org.spongycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        return $r2;
    }
    public void generateClientKeyExchange(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        java.io.OutputStream $r1;
        byte[] $r2, $r3, $r5;
        org.spongycastle.crypto.agreement.srp.SRP6Client $r4;
        java.math.BigInteger $r6;
        org.spongycastle.crypto.tls.TlsContext $r7;
        org.spongycastle.crypto.tls.SecurityParameters $r8;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: java.io.OutputStream;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt>;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] identity>;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] password>;

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.agreement.srp.SRP6Client: java.math.BigInteger generateClientCredentials(byte[],byte[],byte[])>($r5, $r2, $r3);

        staticinvoke <org.spongycastle.crypto.tls.TlsSRPUtils: void writeSRPParameter(java.math.BigInteger,java.io.OutputStream)>($r6, $r1);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] identity>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        $r8.<org.spongycastle.crypto.tls.SecurityParameters: byte[] srpIdentity> = $r2;

        return;
    }
    public byte[] generatePremasterSecret() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.CryptoException r1;
        org.spongycastle.crypto.agreement.srp.SRP6Server $r2;
        java.math.BigInteger $r3;
        byte[] $r4;
        org.spongycastle.crypto.agreement.srp.SRP6Client $r5;
        org.spongycastle.crypto.tls.TlsFatalAlert $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer>;

        if $r2 == null goto label4;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer>;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials>;

     label1:
        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.agreement.srp.SRP6Server: java.math.BigInteger calculateSecret(java.math.BigInteger)>($r3);

     label2:
        $r4 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r3);

     label3:
        return $r4;

     label4:
        $r5 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient>;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials>;

     label5:
        $r3 = virtualinvoke $r5.<org.spongycastle.crypto.agreement.srp.SRP6Client: java.math.BigInteger calculateSecret(java.math.BigInteger)>($r3);

     label6:
        goto label2;

     label7:
        r1 := @caughtexception;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(47, r1);

        throw $r6;

        catch org.spongycastle.crypto.CryptoException from label1 to label2 with label7;
        catch org.spongycastle.crypto.CryptoException from label2 to label3 with label7;
        catch org.spongycastle.crypto.CryptoException from label5 to label6 with label7;
    }
    public byte[] generateServerKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.DigestInputBuffer r1;
        byte[] r2, $r16;
        org.spongycastle.crypto.tls.DigitallySigned r3;
        org.spongycastle.crypto.tls.ServerSRPParams r4;
        org.spongycastle.crypto.agreement.srp.SRP6Server $r5;
        org.spongycastle.crypto.params.SRP6GroupParameters $r6;
        java.math.BigInteger $r7, $r11, $r12;
        org.spongycastle.crypto.Digest $r8;
        org.spongycastle.crypto.tls.TlsContext $r9;
        java.security.SecureRandom $r10;
        org.spongycastle.crypto.tls.TlsSignerCredentials $r13;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r14;
        org.spongycastle.crypto.tls.SecurityParameters $r15;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer>;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpVerifier>;

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r10 = interfaceinvoke $r9.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        virtualinvoke $r5.<org.spongycastle.crypto.agreement.srp.SRP6Server: void init(org.spongycastle.crypto.params.SRP6GroupParameters,java.math.BigInteger,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r6, $r7, $r8, $r10);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Server srpServer>;

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.agreement.srp.SRP6Server: java.math.BigInteger generateServerCredentials()>();

        r4 = new org.spongycastle.crypto.tls.ServerSRPParams;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

        $r11 = virtualinvoke $r6.<org.spongycastle.crypto.params.SRP6GroupParameters: java.math.BigInteger getN()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

        $r12 = virtualinvoke $r6.<org.spongycastle.crypto.params.SRP6GroupParameters: java.math.BigInteger getG()>();

        r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt>;

        specialinvoke r4.<org.spongycastle.crypto.tls.ServerSRPParams: void <init>(java.math.BigInteger,java.math.BigInteger,byte[],java.math.BigInteger)>($r11, $r12, r2, $r7);

        r1 = new org.spongycastle.crypto.tls.DigestInputBuffer;

        specialinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void <init>()>();

        virtualinvoke r4.<org.spongycastle.crypto.tls.ServerSRPParams: void encode(java.io.OutputStream)>(r1);

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials>;

        if $r13 == null goto label1;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials>;

        $r14 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsSignerCredentials)>($r9, $r13);

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm)>($r14);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r15 = interfaceinvoke $r9.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        r2 = $r15.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $r16 = $r15.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $i0 = lengthof $r16;

        interfaceinvoke $r8.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        r2 = $r15.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $r16 = $r15.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $i0 = lengthof $r16;

        interfaceinvoke $r8.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        virtualinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>($r8);

        $i0 = interfaceinvoke $r8.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        interfaceinvoke $r8.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials>;

        r2 = interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsSignerCredentials: byte[] generateCertificateSignature(byte[])>(r2);

        r3 = new org.spongycastle.crypto.tls.DigitallySigned;

        specialinvoke r3.<org.spongycastle.crypto.tls.DigitallySigned: void <init>(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[])>($r14, r2);

        virtualinvoke r3.<org.spongycastle.crypto.tls.DigitallySigned: void encode(java.io.OutputStream)>(r1);

     label1:
        r2 = virtualinvoke r1.<org.spongycastle.crypto.tls.DigestInputBuffer: byte[] toByteArray()>();

        return r2;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.TlsSigner $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsSigner: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

     label1:
        return;
    }
    protected org.spongycastle.crypto.Signer initVerifyer(org.spongycastle.crypto.tls.TlsSigner, org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, org.spongycastle.crypto.tls.SecurityParameters)
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.TlsSigner $r1;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r2;
        org.spongycastle.crypto.tls.SecurityParameters $r3;
        org.spongycastle.crypto.Signer $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        byte[] $r6, $r7;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsSigner;

        $r2 := @parameter1: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r3 := @parameter2: org.spongycastle.crypto.tls.SecurityParameters;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $r4 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsSigner: org.spongycastle.crypto.Signer createVerifyer(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r2, $r5);

        $r6 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $r7 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom>;

        $i0 = lengthof $r7;

        interfaceinvoke $r4.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r6, 0, $i0);

        $r6 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $r7 = $r3.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        $i0 = lengthof $r7;

        interfaceinvoke $r4.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r6, 0, $i0);

        return $r4;
    }
    public void processClientCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.TlsCredentials $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;
    }
    public void processClientKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.CryptoException r2;
        org.spongycastle.crypto.params.SRP6GroupParameters $r3;
        java.math.BigInteger $r4, $r5;
        org.spongycastle.crypto.tls.TlsContext $r6;
        org.spongycastle.crypto.tls.SecurityParameters $r7;
        byte[] $r8;
        org.spongycastle.crypto.tls.TlsFatalAlert $r9;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

     label1:
        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.SRP6GroupParameters: java.math.BigInteger getN()>();

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsSRPUtils: java.math.BigInteger readSRPParameter(java.io.InputStream)>($r1);

        $r4 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger validatePublicValue(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

     label2:
        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials> = $r4;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r8 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] identity>;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r8);

        $r7.<org.spongycastle.crypto.tls.SecurityParameters: byte[] srpIdentity> = $r8;

        return;

     label3:
        r2 := @caughtexception;

        $r9 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r9.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(47, r2);

        throw $r9;

        catch org.spongycastle.crypto.CryptoException from label1 to label2 with label3;
    }
    public void processServerCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        java.lang.RuntimeException r2;
        org.spongycastle.crypto.tls.TlsSigner $r3;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        boolean $z0;
        org.spongycastle.asn1.x509.Certificate $r5;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r6;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r7;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r3 != null goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label1:
        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(42);

        throw $r4;

     label2:
        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label3:
        $r7 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r6);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = $r7;

     label4:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z0 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsSigner: boolean isValidPublicKey(org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r7);

        if $z0 != 0 goto label6;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(46);

        throw $r4;

     label5:
        r2 := @caughtexception;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(43, r2);

        throw $r4;

     label6:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r5, 128);

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        return;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }
    public void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.tls.TlsCredentials $r2;
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.TlsSignerCredentials $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r2 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: int keyExchange>;

        if $i0 == 21 goto label1;

        $z0 = $r2 instanceof org.spongycastle.crypto.tls.TlsSignerCredentials;

        if $z0 != 0 goto label2;

     label1:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label2:
        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        $r4 = (org.spongycastle.crypto.tls.TlsSignerCredentials) $r2;

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSignerCredentials serverCredentials> = $r4;

        return;
    }
    public void processServerKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        java.io.InputStream $r1, $r24;
        org.spongycastle.crypto.CryptoException r2;
        org.spongycastle.crypto.tls.TlsContext $r3;
        org.spongycastle.crypto.tls.SecurityParameters $r4;
        org.spongycastle.crypto.tls.SignerInputBuffer r5, $r20;
        java.lang.Object r6;
        org.spongycastle.crypto.tls.TlsSigner $r7;
        org.spongycastle.crypto.tls.ServerSRPParams $r8;
        org.spongycastle.crypto.tls.DigitallySigned $r9;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r10;
        org.spongycastle.crypto.Signer $r11;
        byte[] $r12;
        boolean $z0;
        org.spongycastle.crypto.params.SRP6GroupParameters $r13, $r23;
        java.math.BigInteger $r14, $r15;
        org.spongycastle.crypto.tls.TlsSRPGroupVerifier $r16;
        org.spongycastle.crypto.agreement.srp.SRP6Client $r17;
        org.spongycastle.crypto.Digest $r18;
        java.security.SecureRandom $r19;
        org.spongycastle.util.io.TeeInputStream $r21;
        org.spongycastle.crypto.tls.TlsFatalAlert $r22;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        r5 = null;

        r6 = $r1;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r7 == null goto label1;

        $r20 = new org.spongycastle.crypto.tls.SignerInputBuffer;

        r5 = $r20;

        specialinvoke $r20.<org.spongycastle.crypto.tls.SignerInputBuffer: void <init>()>();

        $r21 = new org.spongycastle.util.io.TeeInputStream;

        r6 = $r21;

        specialinvoke $r21.<org.spongycastle.util.io.TeeInputStream: void <init>(java.io.InputStream,java.io.OutputStream)>($r1, $r20);

     label1:
        $r24 = (java.io.InputStream) r6;

        $r8 = staticinvoke <org.spongycastle.crypto.tls.ServerSRPParams: org.spongycastle.crypto.tls.ServerSRPParams parse(java.io.InputStream)>($r24);

        if r5 == null goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r9 = staticinvoke <org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.DigitallySigned parse(org.spongycastle.crypto.tls.TlsContext,java.io.InputStream)>($r3, $r1);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        $r10 = virtualinvoke $r9.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm()>();

        $r11 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.Signer initVerifyer(org.spongycastle.crypto.tls.TlsSigner,org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.tls.SecurityParameters)>($r7, $r10, $r4);

        virtualinvoke r5.<org.spongycastle.crypto.tls.SignerInputBuffer: void updateSigner(org.spongycastle.crypto.Signer)>($r11);

        $r12 = virtualinvoke $r9.<org.spongycastle.crypto.tls.DigitallySigned: byte[] getSignature()>();

        $z0 = interfaceinvoke $r11.<org.spongycastle.crypto.Signer: boolean verifySignature(byte[])>($r12);

        if $z0 != 0 goto label2;

        $r22 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r22.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(51);

        throw $r22;

     label2:
        $r23 = new org.spongycastle.crypto.params.SRP6GroupParameters;

        $r14 = virtualinvoke $r8.<org.spongycastle.crypto.tls.ServerSRPParams: java.math.BigInteger getN()>();

        $r15 = virtualinvoke $r8.<org.spongycastle.crypto.tls.ServerSRPParams: java.math.BigInteger getG()>();

        specialinvoke $r23.<org.spongycastle.crypto.params.SRP6GroupParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r14, $r15);

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup> = $r23;

        $r16 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSRPGroupVerifier groupVerifier>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

        $z0 = interfaceinvoke $r16.<org.spongycastle.crypto.tls.TlsSRPGroupVerifier: boolean accept(org.spongycastle.crypto.params.SRP6GroupParameters)>($r13);

        if $z0 != 0 goto label3;

        $r22 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r22.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(71);

        throw $r22;

     label3:
        $r12 = virtualinvoke $r8.<org.spongycastle.crypto.tls.ServerSRPParams: byte[] getS()>();

        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: byte[] srpSalt> = $r12;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

     label4:
        $r14 = virtualinvoke $r13.<org.spongycastle.crypto.params.SRP6GroupParameters: java.math.BigInteger getN()>();

        $r15 = virtualinvoke $r8.<org.spongycastle.crypto.tls.ServerSRPParams: java.math.BigInteger getB()>();

        $r14 = staticinvoke <org.spongycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger validatePublicValue(java.math.BigInteger,java.math.BigInteger)>($r14, $r15);

     label5:
        r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: java.math.BigInteger srpPeerCredentials> = $r14;

        $r17 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.agreement.srp.SRP6Client srpClient>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.params.SRP6GroupParameters srpGroup>;

        $r18 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r19 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        virtualinvoke $r17.<org.spongycastle.crypto.agreement.srp.SRP6Client: void init(org.spongycastle.crypto.params.SRP6GroupParameters,org.spongycastle.crypto.Digest,java.security.SecureRandom)>($r13, $r18, $r19);

        return;

     label6:
        r2 := @caughtexception;

        $r22 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r22.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(47, r2);

        throw $r22;

        catch org.spongycastle.crypto.CryptoException from label4 to label5 with label6;
    }
    public boolean requiresServerKeyExchange()
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        return 1;
    }
    public void skipServerCredentials() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.TlsSigner $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsSRPKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r1 == null goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label1:
        return;
    }
    public void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsSRPKeyExchange r0;
        org.spongycastle.crypto.tls.CertificateRequest $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateRequest;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;
    }
