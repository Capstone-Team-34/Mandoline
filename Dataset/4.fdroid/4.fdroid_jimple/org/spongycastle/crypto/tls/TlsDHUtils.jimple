org.spongycastle.crypto.tls.TlsDHUtils extends java.lang.Object
public static final java.lang.Integer EXT_negotiated_ff_dhe_groups
static final java.math.BigInteger TWO
static final org.spongycastle.crypto.params.DHParameters draft_ffdhe2432
private static final java.lang.String draft_ffdhe2432_p
static final org.spongycastle.crypto.params.DHParameters draft_ffdhe3072
private static final java.lang.String draft_ffdhe3072_p
static final org.spongycastle.crypto.params.DHParameters draft_ffdhe4096
private static final java.lang.String draft_ffdhe4096_p
static final org.spongycastle.crypto.params.DHParameters draft_ffdhe6144
private static final java.lang.String draft_ffdhe6144_p
static final org.spongycastle.crypto.params.DHParameters draft_ffdhe8192
private static final java.lang.String draft_ffdhe8192_p
    static void <clinit>()
    {
        java.math.BigInteger $r0;
        java.lang.Integer $r1;
        org.spongycastle.crypto.params.DHParameters $r2;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO> = $r0;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(101);

        <org.spongycastle.crypto.tls.TlsDHUtils: java.lang.Integer EXT_negotiated_ff_dhe_groups> = $r1;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String)>("FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C023861B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91CAEFE13098533C8B3FFFFFFFFFFFFFFFF");

        <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe2432> = $r2;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String)>("FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF97D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD65612433F51F5F066ED0856365553DED1AF3B557135E7F57C935984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE73530ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FBB96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB190B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F619172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD733BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C023861B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91CAEFE130985139270B4130C93BC437944F4FD4452E2D74DD364F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0DABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF3C1B20EE3FD59D7C25E41D2B66C62E37FFFFFFFFFFFFFFFF");

        <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe3072> = $r2;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String

        <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe4096> = $r2;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String

        <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe6144> = $r2;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String

        <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe8192> = $r2;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsDHUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void addNegotiatedDHEGroupsClientExtension(java.util.Hashtable, short[]) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        short[] $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: short[];

        $r2 = <org.spongycastle.crypto.tls.TlsDHUtils: java.lang.Integer EXT_negotiated_ff_dhe_groups>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: byte[] createNegotiatedDHEGroupsClientExtension(short[])>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static void addNegotiatedDHEGroupsServerExtension(java.util.Hashtable, short) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        short $s0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $s0 := @parameter1: short;

        $r1 = <org.spongycastle.crypto.tls.TlsDHUtils: java.lang.Integer EXT_negotiated_ff_dhe_groups>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: byte[] createNegotiatedDHEGroupsServerExtension(short)>($s0);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    public static boolean areCompatibleParameters(org.spongycastle.crypto.params.DHParameters, org.spongycastle.crypto.params.DHParameters)
    {
        org.spongycastle.crypto.params.DHParameters $r0, $r1;
        java.math.BigInteger $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: org.spongycastle.crypto.params.DHParameters;

        $r1 := @parameter1: org.spongycastle.crypto.params.DHParameters;

        $r2 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static byte[] calculateDHBasicAgreement(org.spongycastle.crypto.params.DHPublicKeyParameters, org.spongycastle.crypto.params.DHPrivateKeyParameters)
    {
        org.spongycastle.crypto.params.DHPublicKeyParameters $r0;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r1;
        org.spongycastle.crypto.agreement.DHBasicAgreement r2;
        java.math.BigInteger $r3;
        byte[] $r4;

        $r0 := @parameter0: org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r1 := @parameter1: org.spongycastle.crypto.params.DHPrivateKeyParameters;

        r2 = new org.spongycastle.crypto.agreement.DHBasicAgreement;

        specialinvoke r2.<org.spongycastle.crypto.agreement.DHBasicAgreement: void <init>()>();

        virtualinvoke r2.<org.spongycastle.crypto.agreement.DHBasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>($r1);

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.agreement.DHBasicAgreement: java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)>($r0);

        $r4 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r3);

        return $r4;
    }
    public static boolean containsDHECipherSuites(int[])
    {
        int[] $r0;
        boolean $z0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $i1 = $r0[i0];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: boolean isDHECipherSuite(int)>($i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static byte[] createNegotiatedDHEGroupsClientExtension(short[]) throws java.io.IOException
    {
        short[] $r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $r0 := @parameter0: short[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 < 1 goto label1;

        $i0 = lengthof $r0;

        if $i0 <= 255 goto label2;

     label1:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;

     label2:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] encodeUint8ArrayWithUint8Length(short[])>($r0);

        return $r1;
    }
    public static byte[] createNegotiatedDHEGroupsServerExtension(short) throws java.io.IOException
    {
        short $s0;
        byte[] r0;

        $s0 := @parameter0: short;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint8(short)>($s0);

        r0 = newarray (byte)[1];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>($s0, r0, 0);

        return r0;
    }
    private static java.math.BigInteger fromHex(java.lang.String)
    {
        java.lang.String $r0;
        java.math.BigInteger $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] decode(java.lang.String)>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }
    private static org.spongycastle.crypto.params.DHParameters fromSafeP(java.lang.String)
    {
        java.lang.String $r0;
        java.math.BigInteger $r1, $r2, $r3;
        org.spongycastle.crypto.params.DHParameters $r4;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger fromHex(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r4 = new org.spongycastle.crypto.params.DHParameters;

        $r1 = <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO>;

        specialinvoke $r4.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r2, $r1, $r3);

        return $r4;
    }
    public static org.spongycastle.crypto.AsymmetricCipherKeyPair generateDHKeyPair(java.security.SecureRandom, org.spongycastle.crypto.params.DHParameters)
    {
        java.security.SecureRandom $r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        org.spongycastle.crypto.generators.DHBasicKeyPairGenerator r2;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r3;
        org.spongycastle.crypto.params.DHKeyGenerationParameters $r4;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: org.spongycastle.crypto.params.DHParameters;

        r2 = new org.spongycastle.crypto.generators.DHBasicKeyPairGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: void <init>()>();

        $r4 = new org.spongycastle.crypto.params.DHKeyGenerationParameters;

        specialinvoke $r4.<org.spongycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r0, $r1);

        virtualinvoke r2.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.generators.DHBasicKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        return $r3;
    }
    public static org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom, org.spongycastle.crypto.params.DHParameters, java.io.OutputStream) throws java.io.IOException
    {
        java.security.SecureRandom $r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.io.OutputStream $r2;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.spongycastle.crypto.params.DHPublicKeyParameters r5;
        java.math.BigInteger $r6;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r7;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: org.spongycastle.crypto.params.DHParameters;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.AsymmetricCipherKeyPair generateDHKeyPair(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r0, $r1);

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r5 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r4;

        $r6 = virtualinvoke r5.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: void writeDHParameter(java.math.BigInteger,java.io.OutputStream)>($r6, $r2);

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        $r7 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) $r4;

        return $r7;
    }
    public static org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom, org.spongycastle.crypto.params.DHParameters, java.io.OutputStream) throws java.io.IOException
    {
        java.security.SecureRandom $r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.io.OutputStream $r2;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.spongycastle.crypto.params.DHPublicKeyParameters r5;
        org.spongycastle.crypto.tls.ServerDHParams $r6;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r7;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: org.spongycastle.crypto.params.DHParameters;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.AsymmetricCipherKeyPair generateDHKeyPair(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters)>($r0, $r1);

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r5 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r4;

        $r6 = new org.spongycastle.crypto.tls.ServerDHParams;

        specialinvoke $r6.<org.spongycastle.crypto.tls.ServerDHParams: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>(r5);

        virtualinvoke $r6.<org.spongycastle.crypto.tls.ServerDHParams: void encode(java.io.OutputStream)>($r2);

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        $r7 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) $r4;

        return $r7;
    }
    public static short[] getNegotiatedDHEGroupsClientExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        short[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsDHUtils: java.lang.Integer EXT_negotiated_ff_dhe_groups>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: short[] readNegotiatedDHEGroupsClientExtension(byte[])>($r2);

        return $r3;
    }
    public static short getNegotiatedDHEGroupsServerExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        short $s0;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsDHUtils: java.lang.Integer EXT_negotiated_ff_dhe_groups>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return -1;

     label1:
        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: short readNegotiatedDHEGroupsServerExtension(byte[])>($r2);

        return $s0;
    }
    public static org.spongycastle.crypto.params.DHParameters getParametersForDHEGroup(short)
    {
        short $s0;
        org.spongycastle.crypto.params.DHParameters r0;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        r0 = <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe2432>;

        return r0;

     label3:
        r0 = <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe3072>;

        return r0;

     label4:
        r0 = <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe4096>;

        return r0;

     label5:
        r0 = <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe6144>;

        return r0;

     label6:
        r0 = <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters draft_ffdhe8192>;

        return r0;
    }
    public static boolean isDHECipherSuite(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            case 22: goto label2;
            case 45: goto label2;
            case 50: goto label2;
            case 51: goto label2;
            case 56: goto label2;
            case 57: goto label2;
            case 64: goto label2;
            case 68: goto label2;
            case 69: goto label2;
            case 103: goto label2;
            case 106: goto label2;
            case 107: goto label2;
            case 135: goto label2;
            case 136: goto label2;
            case 142: goto label2;
            case 143: goto label2;
            case 144: goto label2;
            case 145: goto label2;
            case 153: goto label2;
            case 154: goto label2;
            case 158: goto label2;
            case 159: goto label2;
            case 162: goto label2;
            case 163: goto label2;
            case 170: goto label2;
            case 171: goto label2;
            case 178: goto label2;
            case 179: goto label2;
            case 180: goto label2;
            case 181: goto label2;
            case 189: goto label2;
            case 190: goto label2;
            case 195: goto label2;
            case 196: goto label2;
            case 49276: goto label2;
            case 49277: goto label2;
            case 49280: goto label2;
            case 49281: goto label2;
            case 49296: goto label2;
            case 49297: goto label2;
            case 49302: goto label2;
            case 49303: goto label2;
            case 49310: goto label2;
            case 49311: goto label2;
            case 49314: goto label2;
            case 49315: goto label2;
            case 49318: goto label2;
            case 49319: goto label2;
            case 49322: goto label2;
            case 49323: goto label2;
            case 52245: goto label2;
            case 58396: goto label2;
            case 58397: goto label2;
            case 58398: goto label2;
            case 58399: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public static java.math.BigInteger readDHParameter(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.math.BigInteger $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }
    public static short[] readNegotiatedDHEGroupsClientExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        short[] $r4;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>(r1);

        if $s0 >= 1 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label2:
        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short[] readUint8Array(int,java.io.InputStream)>($s0, r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r4;
    }
    public static short readNegotiatedDHEGroupsServerExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        short $s0;
        java.lang.IllegalArgumentException $r1;
        int $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r1;

     label1:
        $i1 = lengthof $r0;

        if $i1 == 1 goto label2;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r2;

     label2:
        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(byte[],int)>($r0, 0);

        return $s0;
    }
    public static org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.params.DHParameters $r0;
        java.math.BigInteger $r1, $r2, $r4;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.params.DHParameters;

        $r1 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r2 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean isProbablePrime(int)>(2);

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label1:
        $r4 = <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i0 < 0 goto label2;

        $r4 = <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 <= 0 goto label3;

     label2:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label3:
        return $r0;
    }
    public static org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.params.DHPublicKeyParameters $r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.math.BigInteger $r2, $r3, $r4;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        $r0 := @parameter0: org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r1 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters)>($r1);

        $r2 = virtualinvoke $r0.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        $r3 = <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 < 0 goto label1;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $r4 = <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger TWO>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 <= 0 goto label2;

     label1:
        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r5;

     label2:
        return $r0;
    }
    public static void writeDHParameter(java.math.BigInteger, java.io.OutputStream) throws java.io.IOException
    {
        java.math.BigInteger $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
