org.spongycastle.crypto.tls.DTLSProtocol extends java.lang.Object
protected final java.security.SecureRandom secureRandom
    protected void <init>(java.security.SecureRandom)
    {
        org.spongycastle.crypto.tls.DTLSProtocol r0;
        java.security.SecureRandom $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.DTLSProtocol;

        $r1 := @parameter0: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'secureRandom\' cannot be null");

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.tls.DTLSProtocol: java.security.SecureRandom secureRandom> = $r1;

        return;
    }
    protected static void applyMaxFragmentLengthExtension(org.spongycastle.crypto.tls.DTLSRecordLayer, short) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSRecordLayer $r0;
        short $s0;
        int i1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $r0 := @parameter0: org.spongycastle.crypto.tls.DTLSRecordLayer;

        $s0 := @parameter1: short;

        if $s0 < 0 goto label2;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s0);

        if $z0 != 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label1:
        i1 = $s0 + 8;

        i1 = 1 << i1;

        virtualinvoke $r0.<org.spongycastle.crypto.tls.DTLSRecordLayer: void setPlaintextLimit(int)>(i1);

     label2:
        return;
    }
    protected static short evaluateMaxFragmentLengthExtension(boolean, java.util.Hashtable, java.util.Hashtable, short) throws java.io.IOException
    {
        boolean $z0, $z1;
        java.util.Hashtable $r0, $r1;
        short $s0, $s1, $s2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.util.Hashtable;

        $r1 := @parameter2: java.util.Hashtable;

        $s0 := @parameter3: short;

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short getMaxFragmentLengthExtension(java.util.Hashtable)>($r1);

        if $s1 < 0 goto label2;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s1);

        if $z1 == 0 goto label1;

        if $z0 != 0 goto label2;

        $s2 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short getMaxFragmentLengthExtension(java.util.Hashtable)>($r0);

        if $s1 == $s2 goto label2;

     label1:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>($s0);

        throw $r2;

     label2:
        return $s1;
    }
    protected static byte[] generateCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.Certificate $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r0.<org.spongycastle.crypto.tls.Certificate: void encode(java.io.OutputStream)>(r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    protected static byte[] generateSupplementalData(java.util.Vector) throws java.io.IOException
    {
        java.util.Vector $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Vector;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void writeSupplementalData(java.io.OutputStream,java.util.Vector)>(r1, $r0);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    protected static void validateSelectedCipherSuite(int, short) throws java.io.IOException
    {
        int $i0;
        short $s1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r0;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getEncryptionAlgorithm(int)>($i0);

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r0 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r0.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>($s1);

        throw $r0;
    }
    protected void processFinished(byte[], byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSProtocol r0;
        byte[] $r1, $r2;
        java.io.ByteArrayInputStream r3;
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSProtocol;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        r3 = new java.io.ByteArrayInputStream;

        specialinvoke r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $i0 = lengthof $r2;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, r3);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r3);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r2, $r1);

        if $z0 != 0 goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r4;

     label1:
        return;
    }
