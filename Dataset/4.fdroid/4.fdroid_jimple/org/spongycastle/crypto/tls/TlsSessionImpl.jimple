org.spongycastle.crypto.tls.TlsSessionImpl extends java.lang.Object implements org.spongycastle.crypto.tls.TlsSession
final byte[] sessionID
org.spongycastle.crypto.tls.SessionParameters sessionParameters
    void <init>(byte[], org.spongycastle.crypto.tls.SessionParameters)
    {
        org.spongycastle.crypto.tls.TlsSessionImpl r0;
        byte[] $r1;
        org.spongycastle.crypto.tls.SessionParameters $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsSessionImpl;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.crypto.tls.SessionParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'sessionID\' cannot be null");

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        if $i0 < 1 goto label2;

        $i0 = lengthof $r1;

        if $i0 <= 32 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'sessionID\' must have length between 1 and 32 bytes, inclusive");

        throw $r3;

     label3:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.tls.TlsSessionImpl: byte[] sessionID> = $r1;

        r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = $r2;

        return;
    }
    public org.spongycastle.crypto.tls.SessionParameters exportSessionParameters()
    {
        org.spongycastle.crypto.tls.TlsSessionImpl r0;
        org.spongycastle.crypto.tls.SessionParameters $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSessionImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

     label2:
        if $r1 != null goto label4;

        $r1 = null;

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $r1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SessionParameters: org.spongycastle.crypto.tls.SessionParameters copy()>();

     label5:
        goto label3;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public byte[] getSessionID()
    {
        org.spongycastle.crypto.tls.TlsSessionImpl r0;
        java.lang.Throwable $r1;
        byte[] r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSessionImpl;

        entermonitor r0;

     label1:
        r2 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: byte[] sessionID>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void invalidate()
    {
        org.spongycastle.crypto.tls.TlsSessionImpl r0;
        org.spongycastle.crypto.tls.SessionParameters $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSessionImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        if $r1 == null goto label2;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.SessionParameters: void clear()>();

        r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean isResumable()
    {
        org.spongycastle.crypto.tls.TlsSessionImpl r0;
        org.spongycastle.crypto.tls.SessionParameters $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsSessionImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsSessionImpl: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

     label2:
        if $r1 == null goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }
