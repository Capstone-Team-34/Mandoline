org.spongycastle.crypto.tls.TlsECDSASigner extends org.spongycastle.crypto.tls.TlsDSASigner
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsECDSASigner r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsECDSASigner;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsDSASigner: void <init>()>();

        return;
    }
    protected org.spongycastle.crypto.DSA createDSAImpl(short)
    {
        org.spongycastle.crypto.tls.TlsECDSASigner r0;
        short $s0;
        org.spongycastle.crypto.signers.ECDSASigner $r1;
        org.spongycastle.crypto.signers.HMacDSAKCalculator $r2;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsECDSASigner;

        $s0 := @parameter0: short;

        $r1 = new org.spongycastle.crypto.signers.ECDSASigner;

        $r2 = new org.spongycastle.crypto.signers.HMacDSAKCalculator;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s0);

        specialinvoke $r2.<org.spongycastle.crypto.signers.HMacDSAKCalculator: void <init>(org.spongycastle.crypto.Digest)>($r3);

        specialinvoke $r1.<org.spongycastle.crypto.signers.ECDSASigner: void <init>(org.spongycastle.crypto.signers.DSAKCalculator)>($r2);

        return $r1;
    }
    protected short getSignatureAlgorithm()
    {
        org.spongycastle.crypto.tls.TlsECDSASigner r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsECDSASigner;

        return 3;
    }
    public boolean isValidPublicKey(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.TlsECDSASigner r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsECDSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        return $z0;
    }
