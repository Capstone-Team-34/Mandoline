org.spongycastle.crypto.tls.ServerNameList extends java.lang.Object
protected java.util.Vector serverNameList
    public void <init>(java.util.Vector)
    {
        org.spongycastle.crypto.tls.ServerNameList r0;
        java.util.Vector $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.ServerNameList;

        $r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serverNameList\' must not be null or empty");

        throw $r2;

     label2:
        r0.<org.spongycastle.crypto.tls.ServerNameList: java.util.Vector serverNameList> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.ServerNameList parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayInputStream r1;
        java.util.Vector r2;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        byte[] $r4;
        org.spongycastle.crypto.tls.ServerName $r5;
        org.spongycastle.crypto.tls.ServerNameList $r6;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r0);

        if $i0 >= 1 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label1:
        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i0, $r0);

        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        r2 = new java.util.Vector;

        specialinvoke r2.<java.util.Vector: void <init>()>();

     label2:
        $i0 = virtualinvoke r1.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label3;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.ServerName: org.spongycastle.crypto.tls.ServerName parse(java.io.InputStream)>(r1);

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r5);

        goto label2;

     label3:
        $r6 = new org.spongycastle.crypto.tls.ServerNameList;

        specialinvoke $r6.<org.spongycastle.crypto.tls.ServerNameList: void <init>(java.util.Vector)>(r2);

        return $r6;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.ServerNameList r0;
        java.io.OutputStream $r1;
        java.io.ByteArrayOutputStream r2;
        int i0, $i1;
        java.util.Vector $r3;
        java.lang.Object $r4;
        org.spongycastle.crypto.tls.ServerName r5;

        r0 := @this: org.spongycastle.crypto.tls.ServerNameList;

        $r1 := @parameter0: java.io.OutputStream;

        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        i0 = 0;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.ServerNameList: java.util.Vector serverNameList>;

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.ServerNameList: java.util.Vector serverNameList>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r5 = (org.spongycastle.crypto.tls.ServerName) $r4;

        virtualinvoke r5.<org.spongycastle.crypto.tls.ServerName: void encode(java.io.OutputStream)>(r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = virtualinvoke r2.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>(i0);

        i0 = virtualinvoke r2.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(i0, $r1);

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r1);

        return;
    }
    public java.util.Vector getServerNameList()
    {
        org.spongycastle.crypto.tls.ServerNameList r0;
        java.util.Vector r1;

        r0 := @this: org.spongycastle.crypto.tls.ServerNameList;

        r1 = r0.<org.spongycastle.crypto.tls.ServerNameList: java.util.Vector serverNameList>;

        return r1;
    }
