org.spongycastle.crypto.tls.AbstractTlsContext extends java.lang.Object implements org.spongycastle.crypto.tls.TlsContext
private static long counter
private org.spongycastle.crypto.tls.ProtocolVersion clientVersion
private org.spongycastle.crypto.prng.RandomGenerator nonceRandom
private java.security.SecureRandom secureRandom
private org.spongycastle.crypto.tls.SecurityParameters securityParameters
private org.spongycastle.crypto.tls.ProtocolVersion serverVersion
private org.spongycastle.crypto.tls.TlsSession session
private java.lang.Object userObject
    static void <clinit>()
    {
        long $l0;

        $l0 = staticinvoke <org.spongycastle.util.Times: long nanoTime()>();

        <org.spongycastle.crypto.tls.AbstractTlsContext: long counter> = $l0;

        return;
    }
    void <init>(java.security.SecureRandom, org.spongycastle.crypto.tls.SecurityParameters)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        java.security.SecureRandom $r1;
        org.spongycastle.crypto.tls.SecurityParameters $r2;
        byte[] r3;
        org.spongycastle.crypto.Digest $r4;
        int $i0;
        org.spongycastle.crypto.prng.DigestRandomGenerator $r5;
        org.spongycastle.crypto.prng.RandomGenerator $r6;
        long $l1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: java.security.SecureRandom;

        $r2 := @parameter1: org.spongycastle.crypto.tls.SecurityParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion clientVersion> = null;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion serverVersion> = null;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.TlsSession session> = null;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: java.lang.Object userObject> = null;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(4);

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        $r5 = new org.spongycastle.crypto.prng.DigestRandomGenerator;

        specialinvoke $r5.<org.spongycastle.crypto.prng.DigestRandomGenerator: void <init>(org.spongycastle.crypto.Digest)>($r4);

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.prng.RandomGenerator nonceRandom> = $r5;

        $r6 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.prng.RandomGenerator nonceRandom>;

        $l1 = staticinvoke <org.spongycastle.crypto.tls.AbstractTlsContext: long nextCounterValue()>();

        interfaceinvoke $r6.<org.spongycastle.crypto.prng.RandomGenerator: void addSeedMaterial(long)>($l1);

        $r6 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.prng.RandomGenerator nonceRandom>;

        $l1 = staticinvoke <org.spongycastle.util.Times: long nanoTime()>();

        interfaceinvoke $r6.<org.spongycastle.crypto.prng.RandomGenerator: void addSeedMaterial(long)>($l1);

        $r6 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.prng.RandomGenerator nonceRandom>;

        interfaceinvoke $r6.<org.spongycastle.crypto.prng.RandomGenerator: void addSeedMaterial(byte[])>(r3);

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: java.security.SecureRandom secureRandom> = $r1;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.SecurityParameters securityParameters> = $r2;

        return;
    }
    private static long nextCounterValue()
    {
        java.lang.Throwable $r0;
        long $l0;

        entermonitor class "Lorg/spongycastle/crypto/tls/AbstractTlsContext;";

     label1:
        $l0 = <org.spongycastle.crypto.tls.AbstractTlsContext: long counter>;

        $l0 = $l0 + 1L;

        <org.spongycastle.crypto.tls.AbstractTlsContext: long counter> = $l0;

     label2:
        exitmonitor class "Lorg/spongycastle/crypto/tls/AbstractTlsContext;";

        return $l0;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lorg/spongycastle/crypto/tls/AbstractTlsContext;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public byte[] exportKeyingMaterial(java.lang.String, byte[], int)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        java.lang.String $r1;
        byte[] $r2, r3, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r5;
        java.lang.IllegalStateException $r8;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        if $r2 == null goto label1;

        $i1 = lengthof $r2;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint16(int)>($i1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'context_value\' must have length less than 2^16 (or be null)");

        throw $r4;

     label1:
        $r5 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getClientRandom()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getServerRandom()>();

        $i1 = lengthof $r6;

        $i2 = lengthof $r7;

        $i1 = $i1 + $i2;

        if $r2 == null goto label2;

        $i2 = lengthof $r2;

        $i2 = $i2 + 2;

        $i1 = $i1 + $i2;

     label2:
        r3 = newarray (byte)[$i1];

        $i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r3, 0, $i2);

        $i2 = lengthof $r6;

        $i3 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r3, $i2, $i3);

        $i3 = lengthof $r7;

        $i2 = $i2 + $i3;

        if $r2 == null goto label3;

        $i3 = lengthof $r2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,byte[],int)>($i3, r3, $i2);

        $i2 = $i2 + 2;

        $i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, $i2, $i3);

        $i3 = lengthof $r2;

        $i2 = $i2 + $i3;

     label3:
        if $i2 == $i1 goto label4;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("error in calculation of seed for export");

        throw $r8;

     label4:
        $r2 = virtualinvoke $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getMasterSecret()>();

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] PRF(org.spongycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int)>(r0, $r2, $r1, r3, $i0);

        return $r2;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        return r1;
    }
    public org.spongycastle.crypto.prng.RandomGenerator getNonceRandomGenerator()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.prng.RandomGenerator r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.prng.RandomGenerator nonceRandom>;

        return r1;
    }
    public org.spongycastle.crypto.tls.TlsSession getResumableSession()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.TlsSession r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.TlsSession session>;

        return r1;
    }
    public java.security.SecureRandom getSecureRandom()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        java.security.SecureRandom r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: java.security.SecureRandom secureRandom>;

        return r1;
    }
    public org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.SecurityParameters r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        return r1;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion serverVersion>;

        return r1;
    }
    public java.lang.Object getUserObject()
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        java.lang.Object r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsContext: java.lang.Object userObject>;

        return r1;
    }
    void setClientVersion(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion clientVersion> = $r1;

        return;
    }
    void setResumableSession(org.spongycastle.crypto.tls.TlsSession)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.TlsSession $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsSession;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.TlsSession session> = $r1;

        return;
    }
    void setServerVersion(org.spongycastle.crypto.tls.ProtocolVersion)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: org.spongycastle.crypto.tls.ProtocolVersion serverVersion> = $r1;

        return;
    }
    public void setUserObject(java.lang.Object)
    {
        org.spongycastle.crypto.tls.AbstractTlsContext r0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsContext;

        $r1 := @parameter0: java.lang.Object;

        r0.<org.spongycastle.crypto.tls.AbstractTlsContext: java.lang.Object userObject> = $r1;

        return;
    }
