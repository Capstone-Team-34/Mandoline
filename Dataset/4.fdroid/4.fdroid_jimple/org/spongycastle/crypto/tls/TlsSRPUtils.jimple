org.spongycastle.crypto.tls.TlsSRPUtils extends java.lang.Object
public static final java.lang.Integer EXT_SRP
    static void <clinit>()
    {
        java.lang.Integer $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(12);

        <org.spongycastle.crypto.tls.TlsSRPUtils: java.lang.Integer EXT_SRP> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsSRPUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsSRPUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void addSRPExtension(java.util.Hashtable, byte[]) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        byte[] $r1;
        java.lang.Integer $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: byte[];

        $r2 = <org.spongycastle.crypto.tls.TlsSRPUtils: java.lang.Integer EXT_SRP>;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsSRPUtils: byte[] createSRPExtension(byte[])>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }
    public static byte[] createSRPExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label1:
        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] encodeOpaque8(byte[])>($r0);

        return $r0;
    }
    public static byte[] getSRPExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsSRPUtils: java.lang.Integer EXT_SRP>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsSRPUtils: byte[] readSRPExtension(byte[])>($r2);

        return $r2;
    }
    public static boolean isSRPCipherSuite(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 49178: goto label2;
            case 49179: goto label2;
            case 49180: goto label2;
            case 49181: goto label2;
            case 49182: goto label2;
            case 49183: goto label2;
            case 49184: goto label2;
            case 49185: goto label2;
            case 49186: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public static byte[] readSRPExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>(r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r0;
    }
    public static java.math.BigInteger readSRPParameter(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.math.BigInteger $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }
    public static void writeSRPParameter(java.math.BigInteger, java.io.OutputStream) throws java.io.IOException
    {
        java.math.BigInteger $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
