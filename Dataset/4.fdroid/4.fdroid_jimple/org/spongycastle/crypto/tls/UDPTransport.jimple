org.spongycastle.crypto.tls.UDPTransport extends java.lang.Object implements org.spongycastle.crypto.tls.DatagramTransport
protected static final int MAX_IP_OVERHEAD
protected static final int MIN_IP_OVERHEAD
protected static final int UDP_OVERHEAD
protected final int receiveLimit
protected final int sendLimit
protected final java.net.DatagramSocket socket
    public void <init>(java.net.DatagramSocket, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        java.net.DatagramSocket $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        $r1 := @parameter0: java.net.DatagramSocket;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke $r1.<java.net.DatagramSocket: boolean isBound()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<java.net.DatagramSocket: boolean isConnected()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'socket\' must be bound and connected");

        throw $r2;

     label2:
        r0.<org.spongycastle.crypto.tls.UDPTransport: java.net.DatagramSocket socket> = $r1;

        $i1 = $i0 + -20;

        $i1 = $i1 + -8;

        r0.<org.spongycastle.crypto.tls.UDPTransport: int receiveLimit> = $i1;

        $i0 = $i0 + -84;

        $i0 = $i0 + -8;

        r0.<org.spongycastle.crypto.tls.UDPTransport: int sendLimit> = $i0;

        return;
    }
    public void close() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        java.net.DatagramSocket $r1;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        $r1 = r0.<org.spongycastle.crypto.tls.UDPTransport: java.net.DatagramSocket socket>;

        virtualinvoke $r1.<java.net.DatagramSocket: void close()>();

        return;
    }
    public int getReceiveLimit()
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        i0 = r0.<org.spongycastle.crypto.tls.UDPTransport: int receiveLimit>;

        return i0;
    }
    public int getSendLimit()
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        i0 = r0.<org.spongycastle.crypto.tls.UDPTransport: int sendLimit>;

        return i0;
    }
    public int receive(byte[], int, int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.net.DatagramPacket r2;
        java.net.DatagramSocket $r3;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.tls.UDPTransport: java.net.DatagramSocket socket>;

        virtualinvoke $r3.<java.net.DatagramSocket: void setSoTimeout(int)>($i2);

        r2 = new java.net.DatagramPacket;

        specialinvoke r2.<java.net.DatagramPacket: void <init>(byte[],int,int)>($r1, $i0, $i1);

        $r3 = r0.<org.spongycastle.crypto.tls.UDPTransport: java.net.DatagramSocket socket>;

        virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r2);

        $i0 = virtualinvoke r2.<java.net.DatagramPacket: int getLength()>();

        return $i0;
    }
    public void send(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.UDPTransport r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.net.DatagramPacket r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        java.net.DatagramSocket $r4;

        r0 := @this: org.spongycastle.crypto.tls.UDPTransport;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.tls.UDPTransport: int getSendLimit()>();

        if $i1 <= $i2 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        r2 = new java.net.DatagramPacket;

        specialinvoke r2.<java.net.DatagramPacket: void <init>(byte[],int,int)>($r1, $i0, $i1);

        $r4 = r0.<org.spongycastle.crypto.tls.UDPTransport: java.net.DatagramSocket socket>;

        virtualinvoke $r4.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r2);

        return;
    }
