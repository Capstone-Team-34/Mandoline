org.spongycastle.crypto.tls.ServerDHParams extends java.lang.Object
protected org.spongycastle.crypto.params.DHPublicKeyParameters publicKey
    public void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)
    {
        org.spongycastle.crypto.tls.ServerDHParams r0;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.ServerDHParams;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHPublicKeyParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'publicKey\' cannot be null");

        throw $r2;

     label1:
        r0.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters publicKey> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.ServerDHParams parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.spongycastle.crypto.tls.ServerDHParams $r1;
        org.spongycastle.crypto.params.DHParameters $r2;
        java.math.BigInteger $r3, $r4, $r5;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r6;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger readDHParameter(java.io.InputStream)>($r0);

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger readDHParameter(java.io.InputStream)>($r0);

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger readDHParameter(java.io.InputStream)>($r0);

        $r1 = new org.spongycastle.crypto.tls.ServerDHParams;

        $r6 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r2 = new org.spongycastle.crypto.params.DHParameters;

        specialinvoke $r2.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4);

        specialinvoke $r6.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r5, $r2);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r6);

        specialinvoke $r1.<org.spongycastle.crypto.tls.ServerDHParams: void <init>(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r6);

        return $r1;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.ServerDHParams r0;
        java.io.OutputStream $r1;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r2;
        org.spongycastle.crypto.params.DHParameters $r3;
        java.math.BigInteger $r4, $r5;

        r0 := @this: org.spongycastle.crypto.tls.ServerDHParams;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters publicKey>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r2 = r0.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters publicKey>;

        $r4 = virtualinvoke $r2.<org.spongycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: void writeDHParameter(java.math.BigInteger,java.io.OutputStream)>($r5, $r1);

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getG()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: void writeDHParameter(java.math.BigInteger,java.io.OutputStream)>($r5, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: void writeDHParameter(java.math.BigInteger,java.io.OutputStream)>($r4, $r1);

        return;
    }
    public org.spongycastle.crypto.params.DHPublicKeyParameters getPublicKey()
    {
        org.spongycastle.crypto.tls.ServerDHParams r0;
        org.spongycastle.crypto.params.DHPublicKeyParameters r1;

        r0 := @this: org.spongycastle.crypto.tls.ServerDHParams;

        r1 = r0.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters publicKey>;

        return r1;
    }
