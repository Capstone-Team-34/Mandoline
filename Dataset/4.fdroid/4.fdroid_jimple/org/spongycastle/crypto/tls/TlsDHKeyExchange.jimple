org.spongycastle.crypto.tls.TlsDHKeyExchange extends org.spongycastle.crypto.tls.AbstractTlsKeyExchange
protected org.spongycastle.crypto.tls.TlsAgreementCredentials agreementCredentials
protected org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey
protected org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey
protected org.spongycastle.crypto.params.DHParameters dhParameters
protected org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey
protected org.spongycastle.crypto.tls.TlsSigner tlsSigner
    public void <init>(int, java.util.Vector, org.spongycastle.crypto.params.DHParameters)
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        org.spongycastle.crypto.params.DHParameters $r2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.tls.TlsRSASigner $r4;
        org.spongycastle.crypto.tls.TlsDSSSigner $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: org.spongycastle.crypto.params.DHParameters;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void <init>(int,java.util.Vector)>($i0, $r1);

        lookupswitch($i0)
        {
            case 3: goto label5;
            case 4: goto label1;
            case 5: goto label4;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported key exchange algorithm");

        throw $r3;

     label2:
        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner> = null;

     label3:
        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters> = $r2;

        return;

     label4:
        $r4 = new org.spongycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsRSASigner: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner> = $r4;

        goto label3;

     label5:
        $r5 = new org.spongycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner> = $r5;

        goto label3;
    }
    public void generateClientKeyExchange(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        java.io.OutputStream $r1;
        org.spongycastle.crypto.params.DHParameters $r2;
        org.spongycastle.crypto.tls.TlsAgreementCredentials $r3;
        org.spongycastle.crypto.tls.TlsContext $r4;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsAgreementCredentials agreementCredentials>;

        if $r3 != null goto label1;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters,java.io.OutputStream)>($r5, $r2, $r1);

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey> = $r6;

     label1:
        return;
    }
    public byte[] generatePremasterSecret() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.TlsAgreementCredentials $r1;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r2;
        byte[] $r3;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsAgreementCredentials agreementCredentials>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsAgreementCredentials agreementCredentials>;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        $r3 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsAgreementCredentials: byte[] generateAgreement(org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r2);

        return $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey>;

        if $r4 == null goto label2;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: byte[] calculateDHBasicAgreement(org.spongycastle.crypto.params.DHPublicKeyParameters,org.spongycastle.crypto.params.DHPrivateKeyParameters)>($r2, $r4);

        return $r3;

     label2:
        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r5;
    }
    protected int getMinimumPrimeBits()
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        return 1024;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.TlsSigner $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsSigner: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

     label1:
        return;
    }
    public void processClientCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        return;
    }
    public void processClientCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.TlsCredentials r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsAgreementCredentials r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        r1 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $z0 = r1 instanceof org.spongycastle.crypto.tls.TlsAgreementCredentials;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.tls.TlsAgreementCredentials) r1;

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsAgreementCredentials agreementCredentials> = r2;

        return;

     label1:
        $z0 = r1 instanceof org.spongycastle.crypto.tls.TlsSignerCredentials;

        if $z0 != 0 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label2:
        return;
    }
    public void processClientKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.params.DHParameters $r2;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r3;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger readDHParameter(java.io.InputStream)>($r1);

        $r3 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        specialinvoke $r3.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r4, $r2);

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r3);

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = $r3;

        return;
    }
    public void processServerCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        org.spongycastle.asn1.x509.Certificate $r3;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.tls.TlsSigner $r6;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r7;
        org.spongycastle.crypto.params.DHParameters $r8;
        java.lang.RuntimeException r9;
        java.lang.ClassCastException r10;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(42);

        throw $r2;

     label01:
        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label02:
        $r5 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r4);

        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = $r5;

     label03:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        if $r6 != null goto label11;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

     label04:
        $r7 = (org.spongycastle.crypto.params.DHPublicKeyParameters) $r5;

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r7);

     label05:
        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = $r7;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

     label06:
        $r8 = virtualinvoke $r7.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters)>($r8);

     label07:
        r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters> = $r8;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r3, 8);

     label08:
        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        return;

     label09:
        r9 := @caughtexception;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(43, r9);

        throw $r2;

     label10:
        r10 := @caughtexception;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(46, r10);

        throw $r2;

     label11:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.tls.TlsSigner tlsSigner>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z0 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsSigner: boolean isValidPublicKey(org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r5);

        if $z0 != 0 goto label12;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(46);

        throw $r2;

     label12:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r3, 128);

        goto label08;

        catch java.lang.RuntimeException from label02 to label03 with label09;
        catch java.lang.ClassCastException from label04 to label05 with label10;
        catch java.lang.ClassCastException from label06 to label07 with label10;
    }
    public boolean requiresServerKeyExchange()
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: int keyExchange>;

        lookupswitch($i0)
        {
            case 3: goto label2;
            case 5: goto label2;
            case 11: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public void skipServerCredentials() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r1;
    }
    public void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.tls.CertificateRequest $r1;
        short[] $r2;
        int i0, $i1;
        short $s2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateRequest;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.CertificateRequest: short[] getCertificateTypes()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $s2 = $r2[i0];

        lookupswitch($s2)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 64: goto label3;
            default: goto label2;
        };

     label2:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
    protected org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsDHKeyExchange r0;
        org.spongycastle.crypto.params.DHParameters $r1;
        java.math.BigInteger $r2;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.params.DHParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.DHParameters: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsDHKeyExchange: int getMinimumPrimeBits()>();

        if $i0 >= $i1 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(71);

        throw $r3;

     label1:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHParameters validateDHParameters(org.spongycastle.crypto.params.DHParameters)>($r1);

        return $r1;
    }
