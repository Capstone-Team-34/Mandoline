org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState extends java.lang.Object
boolean allowCertificateStatus
org.spongycastle.crypto.tls.CertificateRequest certificateRequest
org.spongycastle.crypto.tls.Certificate clientCertificate
short clientCertificateType
java.util.Hashtable clientExtensions
boolean expectSessionTicket
org.spongycastle.crypto.tls.TlsKeyExchange keyExchange
int[] offeredCipherSuites
short[] offeredCompressionMethods
boolean resumedSession
boolean secure_renegotiation
org.spongycastle.crypto.tls.TlsServer server
org.spongycastle.crypto.tls.TlsServerContextImpl serverContext
org.spongycastle.crypto.tls.TlsCredentials serverCredentials
java.util.Hashtable serverExtensions
    protected void <init>()
    {
        org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState r0;

        r0 := @this: org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.TlsServer server> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.TlsServerContextImpl serverContext> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: int[] offeredCipherSuites> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: short[] offeredCompressionMethods> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: java.util.Hashtable clientExtensions> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: java.util.Hashtable serverExtensions> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: boolean resumedSession> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: boolean secure_renegotiation> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: boolean allowCertificateStatus> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: boolean expectSessionTicket> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.TlsCredentials serverCredentials> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = null;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: short clientCertificateType> = -1;

        r0.<org.spongycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState: org.spongycastle.crypto.tls.Certificate clientCertificate> = null;

        return;
    }
