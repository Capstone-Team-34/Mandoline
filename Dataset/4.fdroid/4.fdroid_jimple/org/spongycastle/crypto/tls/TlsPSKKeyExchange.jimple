org.spongycastle.crypto.tls.TlsPSKKeyExchange extends org.spongycastle.crypto.tls.AbstractTlsKeyExchange
protected short[] clientECPointFormats
protected org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey
protected org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey
protected org.spongycastle.crypto.params.DHParameters dhParameters
protected org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey
protected org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey
protected int[] namedCurves
protected byte[] premasterSecret
protected byte[] psk
protected org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity
protected org.spongycastle.crypto.tls.TlsPSKIdentityManager pskIdentityManager
protected byte[] psk_identity_hint
protected org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey
protected org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials
protected short[] serverECPointFormats
protected org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey
    public void <init>(int, java.util.Vector, org.spongycastle.crypto.tls.TlsPSKIdentity, org.spongycastle.crypto.tls.TlsPSKIdentityManager, org.spongycastle.crypto.params.DHParameters, int[], short[], short[])
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        int $i0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsPSKIdentity $r2;
        org.spongycastle.crypto.tls.TlsPSKIdentityManager $r3;
        org.spongycastle.crypto.params.DHParameters $r4;
        int[] $r5;
        short[] $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: org.spongycastle.crypto.tls.TlsPSKIdentity;

        $r3 := @parameter3: org.spongycastle.crypto.tls.TlsPSKIdentityManager;

        $r4 := @parameter4: org.spongycastle.crypto.params.DHParameters;

        $r5 := @parameter5: int[];

        $r6 := @parameter6: short[];

        $r7 := @parameter7: short[];

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void <init>(int,java.util.Vector)>($i0, $r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials> = null;

        lookupswitch($i0)
        {
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 24: goto label2;
            default: goto label1;
        };

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported key exchange algorithm");

        throw $r8;

     label2:
        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity> = $r2;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentityManager pskIdentityManager> = $r3;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters> = $r4;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int[] namedCurves> = $r5;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] clientECPointFormats> = $r6;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] serverECPointFormats> = $r7;

        return;
    }
    public void generateClientKeyExchange(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        java.io.OutputStream $r1;
        byte[] $r2, $r5;
        org.spongycastle.crypto.tls.TlsPSKIdentity $r3;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        org.spongycastle.crypto.tls.TlsContext $r6;
        org.spongycastle.crypto.tls.SecurityParameters $r7;
        int $i0;
        java.security.SecureRandom $r8;
        org.spongycastle.crypto.params.DHParameters $r9;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r10;
        short[] $r11;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r12;
        org.spongycastle.crypto.params.ECDomainParameters $r13;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r14;
        org.spongycastle.crypto.params.RSAKeyParameters $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint>;

        if $r2 != null goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity>;

        interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentity: void skipIdentityHint()>();

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity>;

        $r2 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentity: byte[] getPSKIdentity()>();

        if $r2 != null goto label3;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r4;

     label2:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity>;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint>;

        interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentity: void notifyIdentityHint(byte[])>($r2);

        goto label1;

     label3:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentity pskIdentity>;

        $r5 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentity: byte[] getPSK()>();

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk> = $r5;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        if $r5 != null goto label4;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r4;

     label4:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, $r1);

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        $r7.<org.spongycastle.crypto.tls.SecurityParameters: byte[] pskIdentity> = $r2;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 14 goto label5;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r9 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters,java.io.OutputStream)>($r8, $r9, $r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey> = $r10;

        return;

     label5:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 24 goto label6;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r11 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] serverECPointFormats>;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey>;

        $r13 = virtualinvoke $r12.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r14 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,short[],org.spongycastle.crypto.params.ECDomainParameters,java.io.OutputStream)>($r8, $r11, $r13, $r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey> = $r14;

        return;

     label6:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 15 goto label7;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r15 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsRSAUtils: byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)>($r6, $r15, $r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] premasterSecret> = $r2;

     label7:
        return;
    }
    protected byte[] generateOtherSecret(int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        int $i0, $i1;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r1;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r2;
        byte[] $r3;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r5;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i1 != 14 goto label2;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey>;

        if $r1 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: byte[] calculateDHBasicAgreement(org.spongycastle.crypto.params.DHPublicKeyParameters,org.spongycastle.crypto.params.DHPrivateKeyParameters)>($r2, $r1);

        return $r3;

     label1:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r4;

     label2:
        $i1 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i1 != 24 goto label4;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey>;

        if $r5 == null goto label3;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] calculateECDHBasicAgreement(org.spongycastle.crypto.params.ECPublicKeyParameters,org.spongycastle.crypto.params.ECPrivateKeyParameters)>($r6, $r5);

        return $r3;

     label3:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r4;

     label4:
        $i1 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i1 != 15 goto label5;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] premasterSecret>;

        return $r3;

     label5:
        $r3 = newarray (byte)[$i0];

        return $r3;
    }
    public byte[] generatePremasterSecret() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        $i0 = lengthof $r2;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] generateOtherSecret(int)>($i0);

        r1 = new java.io.ByteArrayOutputStream;

        $i0 = lengthof $r2;

        $i0 = $i0 + 4;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk> = null;

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public byte[] generateServerKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        java.io.ByteArrayOutputStream r1;
        short[] $r2;
        org.spongycastle.crypto.tls.TlsPSKIdentityManager $r3;
        byte[] $r4;
        boolean $z0;
        int $i0;
        org.spongycastle.crypto.params.DHParameters $r5;
        org.spongycastle.crypto.tls.TlsFatalAlert $r6;
        org.spongycastle.crypto.tls.TlsContext $r7;
        java.security.SecureRandom $r8;
        org.spongycastle.crypto.params.DHPrivateKeyParameters $r9;
        int[] $r10;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r11;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentityManager pskIdentityManager>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentityManager: byte[] getHint()>();

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint> = $r4;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint>;

        if $r4 != null goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: boolean requiresServerKeyExchange()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint>;

        if $r4 != null goto label3;

        $r4 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r4, r1);

     label2:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 14 goto label6;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        if $r5 != null goto label4;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r6;

     label3:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r4, r1);

        goto label2;

     label4:
        $r7 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r5 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom,org.spongycastle.crypto.params.DHParameters,java.io.OutputStream)>($r8, $r5, r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey> = $r9;

     label5:
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

     label6:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 24 goto label5;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        $r10 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int[] namedCurves>;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] clientECPointFormats>;

        $r11 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom,int[],short[],java.io.OutputStream)>($r8, $r10, $r2, r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey> = $r11;

        goto label5;
    }
    public void processClientCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        org.spongycastle.crypto.tls.TlsCredentials $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;
    }
    public void processClientKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        java.io.InputStream $r1;
        byte[] $r2, $r4;
        org.spongycastle.crypto.tls.TlsPSKIdentityManager $r3;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;
        org.spongycastle.crypto.tls.TlsContext $r6;
        org.spongycastle.crypto.tls.SecurityParameters $r7;
        int $i0;
        java.math.BigInteger $r8;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r9;
        org.spongycastle.crypto.params.DHParameters $r10;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r11;
        org.spongycastle.crypto.params.ECDomainParameters $r12;
        short[] $r13;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r14;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsEncryptionCredentials $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsPSKIdentityManager pskIdentityManager>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsPSKIdentityManager: byte[] getPSK(byte[])>($r2);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk> = $r4;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk>;

        if $r4 != null goto label1;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(115);

        throw $r5;

     label1:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $r7.<org.spongycastle.crypto.tls.SecurityParameters: byte[] pskIdentity> = $r2;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 14 goto label2;

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: java.math.BigInteger readDHParameter(java.io.InputStream)>($r1);

        $r9 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters>;

        specialinvoke $r9.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r8, $r10);

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r9);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = $r9;

        return;

     label2:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 24 goto label3;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r1);

        $r11 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey>;

        $r12 = virtualinvoke $r11.<org.spongycastle.crypto.params.ECPrivateKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r13 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] serverECPointFormats>;

        $r14 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPublicKeyParameters deserializeECPublicKey(short[],org.spongycastle.crypto.params.ECDomainParameters,byte[])>($r13, $r12, $r2);

        $r14 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPublicKeyParameters validateECPublicKey(org.spongycastle.crypto.params.ECPublicKeyParameters)>($r14);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey> = $r14;

        return;

     label3:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 15 goto label6;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r6);

        if $z0 == 0 goto label5;

        $r2 = staticinvoke <org.spongycastle.util.io.Streams: byte[] readAll(java.io.InputStream)>($r1);

     label4:
        $r15 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials>;

        $r2 = interfaceinvoke $r15.<org.spongycastle.crypto.tls.TlsEncryptionCredentials: byte[] decryptPreMasterSecret(byte[])>($r2);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] premasterSecret> = $r2;

        return;

     label5:
        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        goto label4;

     label6:
        return;
    }
    public void processServerCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        java.lang.RuntimeException r2;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        boolean $z0;
        org.spongycastle.asn1.x509.Certificate $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r6;
        org.spongycastle.crypto.params.RSAKeyParameters $r7;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 == 15 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(42);

        throw $r3;

     label2:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label3:
        $r6 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r5);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = $r6;

     label4:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z0 = virtualinvoke $r6.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 == 0 goto label6;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label5:
        r2 := @caughtexception;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(43, r2);

        throw $r3;

     label6:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $r7 = (org.spongycastle.crypto.params.RSAKeyParameters) $r6;

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.spongycastle.crypto.params.RSAKeyParameters)>($r7);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey> = $r7;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r4, 32);

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        return;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }
    public void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.tls.TlsCredentials $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.TlsEncryptionCredentials $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r2 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $z0 = $r2 instanceof org.spongycastle.crypto.tls.TlsEncryptionCredentials;

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        $r4 = (org.spongycastle.crypto.tls.TlsEncryptionCredentials) $r2;

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials> = $r4;

        return;
    }
    public void processServerKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        java.io.InputStream $r1;
        byte[] $r2;
        int $i0;
        org.spongycastle.crypto.tls.ServerDHParams $r3;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r4;
        org.spongycastle.crypto.params.DHParameters $r5;
        int[] $r6;
        short[] $r7;
        org.spongycastle.crypto.params.ECDomainParameters $r8;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r9;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: byte[] psk_identity_hint> = $r2;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 14 goto label1;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.tls.ServerDHParams parse(java.io.InputStream)>($r1);

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.tls.ServerDHParams: org.spongycastle.crypto.params.DHPublicKeyParameters getPublicKey()>();

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsDHUtils: org.spongycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.spongycastle.crypto.params.DHPublicKeyParameters)>($r4);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey> = $r4;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.params.DHPublicKeyParameters: org.spongycastle.crypto.params.DHParameters getParameters()>();

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.DHParameters dhParameters> = $r5;

        return;

     label1:
        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 24 goto label2;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int[] namedCurves>;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] clientECPointFormats>;

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECDomainParameters readECParameters(int[],short[],java.io.InputStream)>($r6, $r7, $r1);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r1);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: short[] clientECPointFormats>;

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPublicKeyParameters deserializeECPublicKey(short[],org.spongycastle.crypto.params.ECDomainParameters,byte[])>($r7, $r8, $r2);

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPublicKeyParameters validateECPublicKey(org.spongycastle.crypto.params.ECPublicKeyParameters)>($r9);

        r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: org.spongycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey> = $r9;

     label2:
        return;
    }
    public boolean requiresServerKeyExchange()
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        lookupswitch($i0)
        {
            case 14: goto label2;
            case 24: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public void skipServerCredentials() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $i0 = r0.<org.spongycastle.crypto.tls.TlsPSKKeyExchange: int keyExchange>;

        if $i0 != 15 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r1;

     label1:
        return;
    }
    public void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        org.spongycastle.crypto.tls.CertificateRequest $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateRequest;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;
    }
    protected org.spongycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.spongycastle.crypto.params.RSAKeyParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsPSKKeyExchange r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsPSKKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.params.RSAKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean isProbablePrime(int)>(2);

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label1:
        return $r1;
    }
