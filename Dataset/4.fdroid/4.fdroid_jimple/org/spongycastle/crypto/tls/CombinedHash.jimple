org.spongycastle.crypto.tls.CombinedHash extends java.lang.Object implements org.spongycastle.crypto.tls.TlsHandshakeHash
protected org.spongycastle.crypto.tls.TlsContext context
protected org.spongycastle.crypto.Digest md5
protected org.spongycastle.crypto.Digest sha1
    void <init>()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(1);

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5> = $r1;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>(2);

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1> = $r1;

        return;
    }
    void <init>(org.spongycastle.crypto.tls.CombinedHash)
    {
        org.spongycastle.crypto.tls.CombinedHash r0, $r1;
        org.spongycastle.crypto.tls.TlsContext $r2;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context>;

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context> = $r2;

        $r3 = $r1.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>(1, $r3);

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5> = $r3;

        $r3 = $r1.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>(2, $r3);

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1> = $r3;

        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        byte[] $r1, $r4, $r5;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsContext $r2;
        boolean $z0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        $r4 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] IPAD>;

        $r5 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] OPAD>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.CombinedHash: void ssl3Complete(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r3, $r4, $r5, 48);

        $r3 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        $r4 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] IPAD>;

        $r5 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] OPAD>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.CombinedHash: void ssl3Complete(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r3, $r4, $r5, 40);

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        $r3 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        $i0 = $i0 + $i1;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        $i0 = $i1 + $i0;

        return $i0;
    }
    public org.spongycastle.crypto.Digest forkPRFHash()
    {
        org.spongycastle.crypto.tls.CombinedHash r0, $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 = new org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke $r1.<org.spongycastle.crypto.tls.CombinedHash: void <init>(org.spongycastle.crypto.tls.CombinedHash)>(r0);

        return $r1;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public byte[] getFinalHash(short)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        short $s0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $s0 := @parameter0: short;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CombinedHash doesn\'t support multiple hashes");

        throw $r1;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.tls.TlsContext $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        return;
    }
    public org.spongycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        return r0;
    }
    public void reset()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        return;
    }
    public void sealHashAlgorithms()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        return;
    }
    protected void ssl3Complete(org.spongycastle.crypto.Digest, byte[], byte[], int)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, $r3, r4;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsContext $r5;
        org.spongycastle.crypto.tls.SecurityParameters $r6;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $r5 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsContext context>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        r4 = $r6.<org.spongycastle.crypto.tls.SecurityParameters: byte[] masterSecret>;

        $i1 = lengthof r4;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i1);

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i1];

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        $i1 = lengthof r4;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i1);

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, $i0);

        $i0 = lengthof $r2;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        return;
    }
    public org.spongycastle.crypto.tls.TlsHandshakeHash stopTracking()
    {
        org.spongycastle.crypto.tls.CombinedHash r0, $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 = new org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke $r1.<org.spongycastle.crypto.tls.CombinedHash: void <init>(org.spongycastle.crypto.tls.CombinedHash)>(r0);

        return $r1;
    }
    public void trackHashAlgorithm(short)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        short $s0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $s0 := @parameter0: short;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CombinedHash only supports calculating the legacy PRF for handshake hash");

        throw $r1;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        $r1 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.tls.CombinedHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest md5>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r2 = r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.Digest sha1>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
