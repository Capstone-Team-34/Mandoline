org.spongycastle.crypto.tls.AbstractTlsKeyExchange extends java.lang.Object implements org.spongycastle.crypto.tls.TlsKeyExchange
protected org.spongycastle.crypto.tls.TlsContext context
protected int keyExchange
protected java.util.Vector supportedSignatureAlgorithms
    protected void <init>(int, java.util.Vector)
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        int $i0;
        java.util.Vector $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: int keyExchange> = $i0;

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms> = $r1;

        return;
    }
    public byte[] generateServerKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: boolean requiresServerKeyExchange()>();

        if $z0 == 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label1:
        return null;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.ProtocolVersion $r2;
        boolean $z0;
        java.util.Vector $r3;
        int $i0;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSignatureAlgorithmsExtensionAllowed(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        if $z0 == 0 goto label6;

        $r3 = r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms>;

        if $r3 != null goto label7;

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: int keyExchange>;

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label5;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label5;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label3;
            case 14: goto label3;
            case 15: goto label5;
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label1;
            case 21: goto label3;
            case 22: goto label2;
            case 23: goto label5;
            case 24: goto label3;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unsupported key exchange algorithm");

        throw $r4;

     label2:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector getDefaultDSSSignatureAlgorithms()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms> = $r3;

     label3:
        return;

     label4:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector getDefaultECDSASignatureAlgorithms()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms> = $r3;

        return;

     label5:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector getDefaultRSASignatureAlgorithms()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms> = $r3;

        return;

     label6:
        $r3 = r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms>;

        if $r3 == null goto label7;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supported_signature_algorithms not allowed for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label7:
        return;
    }
    public void processClientCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        return;
    }
    public void processClientKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;
    }
    public void processServerCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        java.util.Vector $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: java.util.Vector supportedSignatureAlgorithms>;

        if $r2 != null goto label1;

     label1:
        return;
    }
    public void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        org.spongycastle.crypto.tls.TlsCredentials $r1;
        org.spongycastle.crypto.tls.Certificate $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r2);

        return;
    }
    public void processServerKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        java.io.InputStream $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: boolean requiresServerKeyExchange()>();

        if $z0 != 0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label1:
        return;
    }
    public boolean requiresServerKeyExchange()
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        return 0;
    }
    public void skipClientCredentials() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        return;
    }
    public void skipServerKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsKeyExchange r0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsKeyExchange;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: boolean requiresServerKeyExchange()>();

        if $z0 == 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r1;

     label1:
        return;
    }
