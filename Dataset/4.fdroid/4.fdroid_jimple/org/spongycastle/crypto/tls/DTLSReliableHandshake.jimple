org.spongycastle.crypto.tls.DTLSReliableHandshake extends java.lang.Object
private static final int MAX_RECEIVE_AHEAD
private java.util.Hashtable currentInboundFlight
private org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash
private int message_seq
private int next_receive_seq
private java.util.Vector outboundFlight
private java.util.Hashtable previousInboundFlight
private final org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer
private boolean sending
    void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.DTLSRecordLayer)
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r2;
        java.util.Hashtable $r3;
        java.util.Vector $r4;
        org.spongycastle.crypto.tls.DeferredHash $r5;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r6;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.tls.DTLSRecordLayer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight> = $r3;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight> = null;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Vector outboundFlight> = $r4;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending> = 1;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int message_seq> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq> = 0;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer> = $r2;

        $r5 = new org.spongycastle.crypto.tls.DeferredHash;

        specialinvoke $r5.<org.spongycastle.crypto.tls.DeferredHash: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash> = $r5;

        $r6 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsHandshakeHash: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

        return;
    }
    static int access$100(org.spongycastle.crypto.tls.DTLSReliableHandshake)
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake $r0;
        int i0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        i0 = $r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        return i0;
    }
    static java.util.Hashtable access$200(org.spongycastle.crypto.tls.DTLSReliableHandshake)
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake $r0;
        java.util.Hashtable r1;

        $r0 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        r1 = $r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        return r1;
    }
    static boolean access$300(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Hashtable;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean checkAll(java.util.Hashtable)>($r0);

        return $z0;
    }
    static void access$400(org.spongycastle.crypto.tls.DTLSReliableHandshake) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake $r0;

        $r0 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        specialinvoke $r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void resendOutboundFlight()>();

        return;
    }
    static void access$500(java.util.Hashtable)
    {
        java.util.Hashtable $r0;

        $r0 := @parameter0: java.util.Hashtable;

        staticinvoke <org.spongycastle.crypto.tls.DTLSReliableHandshake: void resetAll(java.util.Hashtable)>($r0);

        return;
    }
    private static boolean checkAll(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        java.util.Enumeration $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.spongycastle.crypto.tls.DTLSReassembler $r3;
        byte[] $r4;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = (org.spongycastle.crypto.tls.DTLSReassembler) $r2;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSReassembler: byte[] getBodyIfComplete()>();

        if $r4 != null goto label1;

        return 0;

     label2:
        return 1;
    }
    private void checkInboundFlight()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        int $i0, $i1;
        java.util.Hashtable $r1;
        java.util.Enumeration $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        if $i1 < $i0 goto label1;

        goto label1;

     label2:
        return;
    }
    private void prepareInboundFlight()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        java.util.Hashtable $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        staticinvoke <org.spongycastle.crypto.tls.DTLSReliableHandshake: void resetAll(java.util.Hashtable)>($r1);

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight> = $r1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight> = $r1;

        return;
    }
    private void resendOutboundFlight() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;
        int i0, $i1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSRecordLayer: void resetWriteEpoch()>();

        i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Vector outboundFlight>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Vector outboundFlight>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r4 = (org.spongycastle.crypto.tls.DTLSReliableHandshake$Message) $r3;

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void writeMessage(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message)>($r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private static void resetAll(java.util.Hashtable)
    {
        java.util.Hashtable $r0;
        java.util.Enumeration $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.spongycastle.crypto.tls.DTLSReassembler $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = (org.spongycastle.crypto.tls.DTLSReassembler) $r2;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSReassembler: void reset()>();

        goto label1;

     label2:
        return;
    }
    private org.spongycastle.crypto.tls.DTLSReliableHandshake$Message updateHandshakeMessagesDigest(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r1;
        byte[] r2, $r3;
        short $s0;
        int $i1;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $s0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: short getType()>();

        if $s0 == 0 goto label1;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: byte[] getBody()>();

        r2 = newarray (byte)[12];

        $s0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: short getType()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>($s0, r2, 0);

        $i1 = lengthof $r3;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,byte[],int)>($i1, r2, 1);

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: int getSeq()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,byte[],int)>($i1, r2, 4);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,byte[],int)>(0, r2, 6);

        $i1 = lengthof $r3;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,byte[],int)>($i1, r2, 9);

        $r4 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        $i1 = lengthof r2;

        interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsHandshakeHash: void update(byte[],int,int)>(r2, 0, $i1);

        $r4 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        $i1 = lengthof $r3;

        interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsHandshakeHash: void update(byte[],int,int)>($r3, 0, $i1);

     label1:
        return $r1;
    }
    private void writeHandshakeFragment(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message, int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer r2;
        short $s3;
        byte[] $r3;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = new org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer;

        $i2 = $i1 + 12;

        specialinvoke r2.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: void <init>(int)>($i2);

        $s3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: short getType()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s3, r2);

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: byte[] getBody()>();

        $i2 = lengthof $r3;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i2, r2);

        $i2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: int getSeq()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i2, r2);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i0, r2);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i1, r2);

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: byte[] getBody()>();

        virtualinvoke r2.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: void write(byte[],int,int)>($r3, $i0, $i1);

        $r4 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke r2.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: void sendToRecordLayer(org.spongycastle.crypto.tls.DTLSRecordLayer)>($r4);

        return;
    }
    private void writeMessage(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r1;
        int i0, i1, i2, $i3;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        i0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.DTLSRecordLayer: int getSendLimit()>();

        i0 = i0 + -12;

        if i0 >= 1 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: byte[] getBody()>();

        i1 = lengthof $r4;

        i2 = 0;

     label2:
        $i3 = i1 - i2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i0);

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void writeHandshakeFragment(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message,int,int)>($r1, i2, $i3);

        i2 = i2 + $i3;

        if i2 < i1 goto label2;

        return;
    }
    void finish()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$1 r1;
        boolean $z0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r2;
        java.util.Hashtable $r3;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        r1 = null;

        $z0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void checkInboundFlight()>();

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.DTLSRecordLayer: void handshakeSuccessful(org.spongycastle.crypto.tls.DTLSHandshakeRetransmit)>(r1);

        return;

     label2:
        $r3 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        if $r3 == null goto label1;

        r1 = new org.spongycastle.crypto.tls.DTLSReliableHandshake$1;

        specialinvoke r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$1: void <init>(org.spongycastle.crypto.tls.DTLSReliableHandshake)>(r0);

        goto label1;
    }
    org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.TlsHandshakeHash r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        return r1;
    }
    void notifyHelloComplete()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        $r1 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsHandshakeHash: org.spongycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash> = $r1;

        return;
    }
    org.spongycastle.crypto.tls.TlsHandshakeHash prepareToFinish()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r1, r2;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        $r1 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsHandshakeHash: org.spongycastle.crypto.tls.TlsHandshakeHash stopTracking()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash> = $r1;

        return r2;
    }
    org.spongycastle.crypto.tls.DTLSReliableHandshake$Message receiveMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        boolean $z0;
        java.util.Hashtable $r1;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        org.spongycastle.crypto.tls.DTLSReassembler r4;
        byte[] $r5, $r9;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r6;
        short $s2;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r7;
        java.io.IOException $r8;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $z0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending>;

        if $z0 == 0 goto label01;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending> = 0;

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void prepareInboundFlight()>();

     label01:
        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

        $i0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.spongycastle.crypto.tls.DTLSReassembler) $r3;

        if r4 == null goto label02;

        $r5 = virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: byte[] getBodyIfComplete()>();

        if $r5 == null goto label02;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight> = null;

        $r6 = new org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $i0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        $i1 = $i0 + 1;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq> = $i1;

        $s2 = virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: short getMsgType()>();

        specialinvoke $r6.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: void <init>(int,short,byte[],org.spongycastle.crypto.tls.DTLSReliableHandshake$1)>($i0, $s2, $r5, null);

        $r6 = specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message updateHandshakeMessagesDigest(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message)>($r6);

        return $r6;

     label02:
        $r5 = null;

        $i0 = 1000;

     label03:
        $r7 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        $i1 = virtualinvoke $r7.<org.spongycastle.crypto.tls.DTLSRecordLayer: int getReceiveLimit()>();

        if $r5 == null goto label04;

        $i3 = lengthof $r5;

        if $i3 >= $i1 goto label05;

     label04:
        $r5 = newarray (byte)[$i1];

     label05:
        $r7 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

     label06:
        $i4 = virtualinvoke $r7.<org.spongycastle.crypto.tls.DTLSRecordLayer: int receive(byte[],int,int,int)>($r5, 0, $i1, $i0);

     label07:
        if $i4 >= 0 goto label09;

     label08:
        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void resendOutboundFlight()>();

        $i0 = $i0 * 2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 60000);

        goto label03;

     label09:
        if $i4 < 12 goto label05;

     label10:
        $i3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>($r5, 9);

     label11:
        $i5 = $i3 + 12;

        if $i4 != $i5 goto label05;

     label12:
        $i4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(byte[],int)>($r5, 4);

     label13:
        $i5 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        $i5 = $i5 + 10;

        if $i4 > $i5 goto label05;

     label14:
        $s2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(byte[],int)>($r5, 0);

        $i5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>($r5, 1);

        $i6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint24(byte[],int)>($r5, 6);

     label15:
        $i7 = $i6 + $i3;

        if $i7 > $i5 goto label05;

        $i7 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        if $i4 >= $i7 goto label29;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight>;

        if $r1 == null goto label05;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight>;

     label16:
        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i4);

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

     label17:
        r4 = (org.spongycastle.crypto.tls.DTLSReassembler) $r3;

        if r4 == null goto label05;

     label18:
        virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: void contributeFragment(short,int,byte[],int,int,int)>($s2, $i5, $r5, 12, $i6, $i3);

     label19:
        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight>;

     label20:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean checkAll(java.util.Hashtable)>($r1);

     label21:
        if $z0 == 0 goto label05;

     label22:
        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void resendOutboundFlight()>();

     label23:
        $i3 = $i0 * 2;

     label24:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, 60000);

     label25:
        $i0 = $i3;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight>;

     label26:
        staticinvoke <org.spongycastle.crypto.tls.DTLSReliableHandshake: void resetAll(java.util.Hashtable)>($r1);

     label27:
        goto label05;

     label28:
        $r8 := @caughtexception;

        goto label08;

     label29:
        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

     label30:
        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i4);

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

     label31:
        r4 = (org.spongycastle.crypto.tls.DTLSReassembler) $r3;

        if r4 != null goto label35;

        r4 = new org.spongycastle.crypto.tls.DTLSReassembler;

     label32:
        specialinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: void <init>(short,int)>($s2, $i5);

     label33:
        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable currentInboundFlight>;

     label34:
        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r4);

     label35:
        virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: void contributeFragment(short,int,byte[],int,int,int)>($s2, $i5, $r5, 12, $i6, $i3);

     label36:
        $i3 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        if $i4 != $i3 goto label05;

     label37:
        $r9 = virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: byte[] getBodyIfComplete()>();

     label38:
        if $r9 == null goto label05;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Hashtable previousInboundFlight> = null;

        $r6 = new org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $i1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq>;

        $i3 = $i1 + 1;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int next_receive_seq> = $i3;

     label39:
        $s2 = virtualinvoke r4.<org.spongycastle.crypto.tls.DTLSReassembler: short getMsgType()>();

        specialinvoke $r6.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: void <init>(int,short,byte[],org.spongycastle.crypto.tls.DTLSReliableHandshake$1)>($i1, $s2, $r9, null);

        $r6 = specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message updateHandshakeMessagesDigest(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message)>($r6);

     label40:
        return $r6;

        catch java.io.IOException from label06 to label07 with label28;
        catch java.io.IOException from label10 to label11 with label28;
        catch java.io.IOException from label12 to label13 with label28;
        catch java.io.IOException from label14 to label15 with label28;
        catch java.io.IOException from label16 to label17 with label28;
        catch java.io.IOException from label18 to label19 with label28;
        catch java.io.IOException from label20 to label21 with label28;
        catch java.io.IOException from label22 to label23 with label28;
        catch java.io.IOException from label24 to label25 with label28;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.io.IOException from label30 to label31 with label28;
        catch java.io.IOException from label32 to label33 with label28;
        catch java.io.IOException from label34 to label36 with label28;
        catch java.io.IOException from label37 to label38 with label28;
        catch java.io.IOException from label39 to label40 with label28;
    }
    byte[] receiveMessageBody(short) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        short $s0, $s1;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message receiveMessage()>();

        $s1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: short getType()>();

        if $s1 == $s0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: byte[] getBody()>();

        return $r3;
    }
    void resetHandshakeMessagesDigest()
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.TlsHandshakeHash handshakeHash>;

        interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsHandshakeHash: void reset()>();

        return;
    }
    void sendMessage(short, byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake r0;
        short $s0;
        byte[] $r1;
        org.spongycastle.crypto.tls.DTLSReliableHandshake$Message r2;
        int $i1, $i2;
        boolean $z0;
        java.util.Vector $r3;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake;

        $s0 := @parameter0: short;

        $r1 := @parameter1: byte[];

        $i1 = lengthof $r1;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint24(int)>($i1);

        $z0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void checkInboundFlight()>();

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: boolean sending> = 1;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Vector outboundFlight>;

        virtualinvoke $r3.<java.util.Vector: void removeAllElements()>();

     label1:
        r2 = new org.spongycastle.crypto.tls.DTLSReliableHandshake$Message;

        $i1 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int message_seq>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: int message_seq> = $i2;

        specialinvoke r2.<org.spongycastle.crypto.tls.DTLSReliableHandshake$Message: void <init>(int,short,byte[],org.spongycastle.crypto.tls.DTLSReliableHandshake$1)>($i1, $s0, $r1, null);

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: java.util.Vector outboundFlight>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: void writeMessage(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message)>(r2);

        specialinvoke r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake: org.spongycastle.crypto.tls.DTLSReliableHandshake$Message updateHandshakeMessagesDigest(org.spongycastle.crypto.tls.DTLSReliableHandshake$Message)>(r2);

        return;
    }
