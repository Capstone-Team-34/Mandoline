org.spongycastle.crypto.tls.CertificateURL extends java.lang.Object
protected short type
protected java.util.Vector urlAndHashList
    public void <init>(short, java.util.Vector)
    {
        org.spongycastle.crypto.tls.CertificateURL r0;
        short $s0;
        java.util.Vector $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.tls.CertificateURL;

        $s0 := @parameter0: short;

        $r1 := @parameter1: java.util.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.CertChainType: boolean isValid(short)>($s0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'type\' is not a valid CertChainType value");

        throw $r2;

     label1:
        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'urlAndHashList\' must have length > 0");

        throw $r2;

     label3:
        r0.<org.spongycastle.crypto.tls.CertificateURL: short type> = $s0;

        r0.<org.spongycastle.crypto.tls.CertificateURL: java.util.Vector urlAndHashList> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.CertificateURL parse(org.spongycastle.crypto.tls.TlsContext, java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        java.io.InputStream $r1;
        java.io.ByteArrayInputStream r2;
        java.util.Vector r3;
        short $s0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        int $i1;
        byte[] $r5;
        org.spongycastle.crypto.tls.URLAndHash $r6;
        org.spongycastle.crypto.tls.CertificateURL $r7;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: java.io.InputStream;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r1);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.CertChainType: boolean isValid(short)>($s0);

        if $z0 != 0 goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r4;

     label1:
        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r1);

        if $i1 >= 1 goto label2;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r4;

     label2:
        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>($i1, $r1);

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

     label3:
        $i1 = virtualinvoke r2.<java.io.ByteArrayInputStream: int available()>();

        if $i1 <= 0 goto label4;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.URLAndHash: org.spongycastle.crypto.tls.URLAndHash parse(org.spongycastle.crypto.tls.TlsContext,java.io.InputStream)>($r0, r2);

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        goto label3;

     label4:
        $r7 = new org.spongycastle.crypto.tls.CertificateURL;

        specialinvoke $r7.<org.spongycastle.crypto.tls.CertificateURL: void <init>(short,java.util.Vector)>($s0, r3);

        return $r7;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.CertificateURL r0;
        java.io.OutputStream $r1;
        org.spongycastle.crypto.tls.CertificateURL$ListBuffer16 r2;
        short $s0;
        int i1, $i2;
        java.util.Vector $r3;
        java.lang.Object $r4;
        org.spongycastle.crypto.tls.URLAndHash r5;

        r0 := @this: org.spongycastle.crypto.tls.CertificateURL;

        $r1 := @parameter0: java.io.OutputStream;

        $s0 = r0.<org.spongycastle.crypto.tls.CertificateURL: short type>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s0, $r1);

        r2 = new org.spongycastle.crypto.tls.CertificateURL$ListBuffer16;

        specialinvoke r2.<org.spongycastle.crypto.tls.CertificateURL$ListBuffer16: void <init>(org.spongycastle.crypto.tls.CertificateURL)>(r0);

        i1 = 0;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.CertificateURL: java.util.Vector urlAndHashList>;

        $i2 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i1 >= $i2 goto label2;

        $r3 = r0.<org.spongycastle.crypto.tls.CertificateURL: java.util.Vector urlAndHashList>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.spongycastle.crypto.tls.URLAndHash) $r4;

        virtualinvoke r5.<org.spongycastle.crypto.tls.URLAndHash: void encode(java.io.OutputStream)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.spongycastle.crypto.tls.CertificateURL$ListBuffer16: void encodeTo(java.io.OutputStream)>($r1);

        return;
    }
    public short getType()
    {
        org.spongycastle.crypto.tls.CertificateURL r0;
        short s0;

        r0 := @this: org.spongycastle.crypto.tls.CertificateURL;

        s0 = r0.<org.spongycastle.crypto.tls.CertificateURL: short type>;

        return s0;
    }
    public java.util.Vector getURLAndHashList()
    {
        org.spongycastle.crypto.tls.CertificateURL r0;
        java.util.Vector r1;

        r0 := @this: org.spongycastle.crypto.tls.CertificateURL;

        r1 = r0.<org.spongycastle.crypto.tls.CertificateURL: java.util.Vector urlAndHashList>;

        return r1;
    }
