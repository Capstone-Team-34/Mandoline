org.spongycastle.crypto.tls.SSL3Mac extends java.lang.Object implements org.spongycastle.crypto.Mac
static final byte[] IPAD
private static final byte IPAD_BYTE
static final byte[] OPAD
private static final byte OPAD_BYTE
private org.spongycastle.crypto.Digest digest
private int padLength
private byte[] secret
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.SSL3Mac: byte[] genPad(byte,int)>(54, 48);

        <org.spongycastle.crypto.tls.SSL3Mac: byte[] IPAD> = $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.SSL3Mac: byte[] genPad(byte,int)>(92, 48);

        <org.spongycastle.crypto.tls.SSL3Mac: byte[] OPAD> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        if $i0 != 20 goto label1;

        r0.<org.spongycastle.crypto.tls.SSL3Mac: int padLength> = 40;

        return;

     label1:
        r0.<org.spongycastle.crypto.tls.SSL3Mac: int padLength> = 48;

        return;
    }
    private static byte[] genPad(byte, int)
    {
        byte $b0;
        int $i1;
        byte[] r0;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        r0 = newarray (byte)[$i1];

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>(r0, $b0);

        return r0;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        byte[] $r1, r2, $r4, $r5;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.tls.SSL3Mac: byte[] secret>;

        $r5 = r0.<org.spongycastle.crypto.tls.SSL3Mac: byte[] secret>;

        $i1 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $r4 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] OPAD>;

        $i1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: int padLength>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $i1 = lengthof r2;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.tls.SSL3Mac: void reset()>();

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/SSL3MAC");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        int $i0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        return $i0;
    }
    public org.spongycastle.crypto.Digest getUnderlyingDigest()
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.KeyParameter $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $r2 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.tls.SSL3Mac: byte[] secret> = $r3;

        virtualinvoke r0.<org.spongycastle.crypto.tls.SSL3Mac: void reset()>();

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void reset()>();

        $r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $r2 = r0.<org.spongycastle.crypto.tls.SSL3Mac: byte[] secret>;

        $r3 = r0.<org.spongycastle.crypto.tls.SSL3Mac: byte[] secret>;

        $i0 = lengthof $r3;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        $r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        $r2 = <org.spongycastle.crypto.tls.SSL3Mac: byte[] IPAD>;

        $i0 = r0.<org.spongycastle.crypto.tls.SSL3Mac: int padLength>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.tls.SSL3Mac r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.tls.SSL3Mac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.tls.SSL3Mac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
