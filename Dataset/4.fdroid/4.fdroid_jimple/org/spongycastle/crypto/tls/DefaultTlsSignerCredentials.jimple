org.spongycastle.crypto.tls.DefaultTlsSignerCredentials extends org.spongycastle.crypto.tls.AbstractTlsSignerCredentials
protected org.spongycastle.crypto.tls.Certificate certificate
protected org.spongycastle.crypto.tls.TlsContext context
protected org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey
protected org.spongycastle.crypto.tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm
protected org.spongycastle.crypto.tls.TlsSigner signer
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.Certificate, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.DefaultTlsSignerCredentials r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.Certificate $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsSignerCredentials;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.tls.Certificate;

        $r3 := @parameter2: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        specialinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: void <init>(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.Certificate,org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.tls.SignatureAndHashAlgorithm)>($r1, $r2, $r3, null);

        return;
    }
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.Certificate, org.spongycastle.crypto.params.AsymmetricKeyParameter, org.spongycastle.crypto.tls.SignatureAndHashAlgorithm)
    {
        org.spongycastle.crypto.tls.DefaultTlsSignerCredentials r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.Certificate $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsRSASigner $r6;
        org.spongycastle.crypto.tls.TlsSigner $r7;
        org.spongycastle.crypto.tls.TlsDSSSigner $r8;
        org.spongycastle.crypto.tls.TlsECDSASigner $r9;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.lang.String $r12;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsSignerCredentials;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.tls.Certificate;

        $r3 := @parameter2: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r4 := @parameter3: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSignerCredentials: void <init>()>();

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be null");

        throw $r5;

     label1:
        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be empty");

        throw $r5;

     label2:
        if $r3 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' cannot be null");

        throw $r5;

     label3:
        $z0 = virtualinvoke $r3.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' must be private");

        throw $r5;

     label4:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r1);

        if $z0 == 0 goto label5;

        if $r4 != null goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'signatureAndHashAlgorithm\' cannot be null for (D)TLS 1.2+");

        throw $r5;

     label5:
        $z0 = $r3 instanceof org.spongycastle.crypto.params.RSAKeyParameters;

        if $z0 == 0 goto label7;

        $r6 = new org.spongycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsRSASigner: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer> = $r6;

     label6:
        $r7 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsSigner: void init(org.spongycastle.crypto.tls.TlsContext)>($r1);

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.Certificate certificate> = $r2;

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey> = $r3;

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm> = $r4;

        return;

     label7:
        $z0 = $r3 instanceof org.spongycastle.crypto.params.DSAPrivateKeyParameters;

        if $z0 == 0 goto label8;

        $r8 = new org.spongycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r8.<org.spongycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer> = $r8;

        goto label6;

     label8:
        $z0 = $r3 instanceof org.spongycastle.crypto.params.ECPrivateKeyParameters;

        if $z0 == 0 goto label9;

        $r9 = new org.spongycastle.crypto.tls.TlsECDSASigner;

        specialinvoke $r9.<org.spongycastle.crypto.tls.TlsECDSASigner: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer> = $r9;

        goto label6;

     label9:
        $r5 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'privateKey\' type not supported: ");

        $r11 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r5;
    }
    public byte[] generateCertificateSignature(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DefaultTlsSignerCredentials r0;
        byte[] $r1;
        org.spongycastle.crypto.CryptoException r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.tls.TlsContext $r4;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsSigner $r5;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r6;
        org.spongycastle.crypto.tls.TlsFatalAlert $r7;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsSignerCredentials;

        $r1 := @parameter0: byte[];

        $r4 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsContext context>;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r4);

     label2:
        if $z0 == 0 goto label5;

        $r5 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer>;

        $r6 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm>;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey>;

     label3:
        $r1 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsSigner: byte[] generateRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter,byte[])>($r6, $r3, $r1);

     label4:
        return $r1;

     label5:
        $r5 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.TlsSigner signer>;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey>;

     label6:
        $r1 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsSigner: byte[] generateRawSignature(org.spongycastle.crypto.params.AsymmetricKeyParameter,byte[])>($r3, $r1);

     label7:
        return $r1;

     label8:
        r2 := @caughtexception;

        $r7 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r7.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(80, r2);

        throw $r7;

        catch org.spongycastle.crypto.CryptoException from label1 to label2 with label8;
        catch org.spongycastle.crypto.CryptoException from label3 to label4 with label8;
        catch org.spongycastle.crypto.CryptoException from label6 to label7 with label8;
    }
    public org.spongycastle.crypto.tls.Certificate getCertificate()
    {
        org.spongycastle.crypto.tls.DefaultTlsSignerCredentials r0;
        org.spongycastle.crypto.tls.Certificate r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsSignerCredentials;

        r1 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.Certificate certificate>;

        return r1;
    }
    public org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm()
    {
        org.spongycastle.crypto.tls.DefaultTlsSignerCredentials r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsSignerCredentials;

        r1 = r0.<org.spongycastle.crypto.tls.DefaultTlsSignerCredentials: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm>;

        return r1;
    }
