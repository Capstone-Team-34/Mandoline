org.spongycastle.crypto.tls.TlsStreamCipher extends java.lang.Object implements org.spongycastle.crypto.tls.TlsCipher
protected org.spongycastle.crypto.tls.TlsContext context
protected org.spongycastle.crypto.StreamCipher decryptCipher
protected org.spongycastle.crypto.StreamCipher encryptCipher
protected org.spongycastle.crypto.tls.TlsMac readMac
protected boolean usesNonce
protected org.spongycastle.crypto.tls.TlsMac writeMac
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.StreamCipher, org.spongycastle.crypto.StreamCipher, org.spongycastle.crypto.Digest, org.spongycastle.crypto.Digest, int, boolean) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.StreamCipher $r2, $r3;
        org.spongycastle.crypto.Digest $r4, $r5;
        int $i0, i1, $i2, $i3;
        boolean $z0, $z1;
        org.spongycastle.crypto.tls.TlsMac r6, r10, $r14;
        org.spongycastle.crypto.params.KeyParameter r7, r8, r11;
        byte[] $r9;
        java.lang.Object r12, r13;
        org.spongycastle.crypto.tls.TlsFatalAlert $r15;
        org.spongycastle.crypto.params.ParametersWithIV $r16;
        org.spongycastle.crypto.CipherParameters $r17;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.StreamCipher;

        $r3 := @parameter2: org.spongycastle.crypto.StreamCipher;

        $r4 := @parameter3: org.spongycastle.crypto.Digest;

        $r5 := @parameter4: org.spongycastle.crypto.Digest;

        $i0 := @parameter5: int;

        $z0 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z1 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: boolean isServer()>();

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: boolean usesNonce> = $z0;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher> = $r2;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher> = $r3;

        i1 = $i0 * 2;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i1 = i1 + $i2;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i1 = i1 + $i2;

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateKeyBlock(org.spongycastle.crypto.tls.TlsContext,int)>($r1, i1);

        r10 = new org.spongycastle.crypto.tls.TlsMac;

        r6 = r10;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        specialinvoke r10.<org.spongycastle.crypto.tls.TlsMac: void <init>(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.Digest,byte[],int,int)>($r1, $r4, $r9, 0, $i2);

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r14 = new org.spongycastle.crypto.tls.TlsMac;

        $i3 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        specialinvoke $r14.<org.spongycastle.crypto.tls.TlsMac: void <init>(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.Digest,byte[],int,int)>($r1, $r5, $r9, $i2, $i3);

        $i3 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i2 = $i2 + $i3;

        r8 = new org.spongycastle.crypto.params.KeyParameter;

        r7 = r8;

        specialinvoke r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r9, $i2, $i0);

        $i2 = $i2 + $i0;

        r11 = new org.spongycastle.crypto.params.KeyParameter;

        r8 = r11;

        specialinvoke r11.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r9, $i2, $i0);

        $i0 = $i2 + $i0;

        if $i0 == i1 goto label1;

        $r15 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r15.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r15;

     label1:
        if $z1 == 0 goto label4;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac writeMac> = $r14;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac readMac> = r6;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher> = $r3;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher> = $r2;

        r11 = r7;

        r7 = r8;

     label2:
        if $z0 == 0 goto label5;

        $r9 = newarray (byte)[8];

        $r16 = new org.spongycastle.crypto.params.ParametersWithIV;

        r12 = $r16;

        specialinvoke $r16.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r7, $r9);

        $r16 = new org.spongycastle.crypto.params.ParametersWithIV;

        r13 = $r16;

        specialinvoke $r16.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r11, $r9);

     label3:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher>;

        $r17 = (org.spongycastle.crypto.CipherParameters) r12;

        interfaceinvoke $r2.<org.spongycastle.crypto.StreamCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r17);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher>;

        $r17 = (org.spongycastle.crypto.CipherParameters) r13;

        interfaceinvoke $r2.<org.spongycastle.crypto.StreamCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r17);

        return;

     label4:
        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac writeMac> = r6;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac readMac> = $r14;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher> = $r2;

        r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher> = $r3;

        goto label2;

     label5:
        r13 = r11;

        r12 = r7;

        goto label3;
    }
    protected void checkMAC(long, short, byte[], int, int, byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        long $l0;
        short $s1;
        byte[] $r1, $r2;
        int $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.tls.TlsMac $r3;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: byte[];

        $i4 := @parameter6: int;

        $i5 := @parameter7: int;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i2, $i3);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        $r2 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r2, $i4, $i5);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r1, $r2);

        if $z0 != 0 goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(20);

        throw $r4;

     label1:
        return;
    }
    public byte[] decodeCiphertext(long, short, byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        long $l0;
        short $s1;
        byte[] $r1, r2;
        int $i2, $i3, i4;
        boolean $z0;
        org.spongycastle.crypto.StreamCipher $r3;
        org.spongycastle.crypto.tls.TlsMac $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: boolean usesNonce>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsStreamCipher: void updateIV(org.spongycastle.crypto.StreamCipher,boolean,long)>($r3, 0, $l0);

     label1:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        i4 = virtualinvoke $r4.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        if $i3 >= i4 goto label2;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r5;

     label2:
        i4 = $i3 - i4;

        r2 = newarray (byte)[$i3];

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher decryptCipher>;

        interfaceinvoke $r3.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i2, $i3, r2, 0);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsStreamCipher: void checkMAC(long,short,byte[],int,int,byte[],int,int)>($l0, $s1, r2, i4, $i3, r2, 0, i4);

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i4);

        return $r1;
    }
    public byte[] encodePlaintext(long, short, byte[], int, int)
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        long $l0;
        short $s1;
        byte[] $r1, r2;
        int $i2, $i3, $i4;
        boolean $z0;
        org.spongycastle.crypto.StreamCipher $r3;
        org.spongycastle.crypto.tls.TlsMac $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: boolean usesNonce>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsStreamCipher: void updateIV(org.spongycastle.crypto.StreamCipher,boolean,long)>($r3, 1, $l0);

     label1:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $i4 = virtualinvoke $r4.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        $i4 = $i4 + $i3;

        r2 = newarray (byte)[$i4];

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher>;

        interfaceinvoke $r3.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i2, $i3, r2, 0);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r1, $i2, $i3);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.StreamCipher encryptCipher>;

        $i2 = lengthof $r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r1, 0, $i2, r2, $i3);

        return r2;
    }
    public int getPlaintextLimit(int)
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsMac $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsStreamCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        $i0 = $i0 - $i1;

        return $i0;
    }
    protected void updateIV(org.spongycastle.crypto.StreamCipher, boolean, long)
    {
        org.spongycastle.crypto.tls.TlsStreamCipher r0;
        org.spongycastle.crypto.StreamCipher $r1;
        boolean $z0;
        long $l0;
        byte[] r2;
        org.spongycastle.crypto.params.ParametersWithIV $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsStreamCipher;

        $r1 := @parameter0: org.spongycastle.crypto.StreamCipher;

        $z0 := @parameter1: boolean;

        $l0 := @parameter2: long;

        r2 = newarray (byte)[8];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint64(long,byte[],int)>($l0, r2, 0);

        $r3 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(null, r2);

        interfaceinvoke $r1.<org.spongycastle.crypto.StreamCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r3);

        return;
    }
