org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer extends java.io.ByteArrayOutputStream
    void <init>(int)
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        return;
    }
    void sendToRecordLayer(org.spongycastle.crypto.tls.DTLSRecordLayer) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer r0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DTLSRecordLayer;

        $r2 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: byte[] buf>;

        $i0 = r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: int count>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSRecordLayer: void send(byte[],int,int)>($r2, 0, $i0);

        r0.<org.spongycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer: byte[] buf> = null;

        return;
    }
