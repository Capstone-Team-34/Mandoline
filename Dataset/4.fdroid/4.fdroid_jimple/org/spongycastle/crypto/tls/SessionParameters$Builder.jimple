org.spongycastle.crypto.tls.SessionParameters$Builder extends java.lang.Object
private int cipherSuite
private short compressionAlgorithm
private byte[] encodedServerExtensions
private byte[] masterSecret
private org.spongycastle.crypto.tls.Certificate peerCertificate
private byte[] pskIdentity
private byte[] srpIdentity
    public void <init>()
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: int cipherSuite> = -1;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: short compressionAlgorithm> = -1;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] masterSecret> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.Certificate peerCertificate> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] pskIdentity> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] srpIdentity> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] encodedServerExtensions> = null;

        return;
    }
    private void validate(boolean, java.lang.String)
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        boolean $z0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required session parameter \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not configured");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }
    public org.spongycastle.crypto.tls.SessionParameters build()
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        byte[] $r2, $r3, $r4, $r6;
        boolean $z0, $z1;
        int $i0;
        short $s1;
        org.spongycastle.crypto.tls.SessionParameters $r5;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $z0 = 1;

        $i0 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: int cipherSuite>;

        if $i0 < 0 goto label4;

        $z1 = 1;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: void validate(boolean,java.lang.String)>($z1, "cipherSuite");

        $s1 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: short compressionAlgorithm>;

        if $s1 < 0 goto label5;

        $z1 = 1;

     label2:
        specialinvoke r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: void validate(boolean,java.lang.String)>($z1, "compressionAlgorithm");

        $r2 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] masterSecret>;

        if $r2 == null goto label6;

     label3:
        specialinvoke r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: void validate(boolean,java.lang.String)>($z0, "masterSecret");

        $r5 = new org.spongycastle.crypto.tls.SessionParameters;

        $i0 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: int cipherSuite>;

        $s1 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: short compressionAlgorithm>;

        $r6 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] masterSecret>;

        $r1 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        $r2 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] pskIdentity>;

        $r3 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] srpIdentity>;

        $r4 = r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] encodedServerExtensions>;

        specialinvoke $r5.<org.spongycastle.crypto.tls.SessionParameters: void <init>(int,short,byte[],org.spongycastle.crypto.tls.Certificate,byte[],byte[],byte[],org.spongycastle.crypto.tls.SessionParameters$1)>($i0, $s1, $r6, $r1, $r2, $r3, $r4, null);

        return $r5;

     label4:
        $z1 = 0;

        goto label1;

     label5:
        $z1 = 0;

        goto label2;

     label6:
        $z0 = 0;

        goto label3;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setCipherSuite(int)
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: int cipherSuite> = $i0;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setCompressionAlgorithm(short)
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $s0 := @parameter0: short;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: short compressionAlgorithm> = $s0;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setMasterSecret(byte[])
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] masterSecret> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setPSKIdentity(byte[])
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] pskIdentity> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setPeerCertificate(org.spongycastle.crypto.tls.Certificate)
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        org.spongycastle.crypto.tls.Certificate $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: org.spongycastle.crypto.tls.Certificate peerCertificate> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setPskIdentity(byte[])
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] pskIdentity> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setSRPIdentity(byte[])
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] srpIdentity> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.tls.SessionParameters$Builder setServerExtensions(java.util.Hashtable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SessionParameters$Builder r0;
        java.util.Hashtable $r1;
        java.io.ByteArrayOutputStream r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters$Builder;

        $r1 := @parameter0: java.util.Hashtable;

        if $r1 != null goto label1;

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] encodedServerExtensions> = null;

        return r0;

     label1:
        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void writeExtensions(java.io.OutputStream,java.util.Hashtable)>(r2, $r1);

        $r3 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.spongycastle.crypto.tls.SessionParameters$Builder: byte[] encodedServerExtensions> = $r3;

        return r0;
    }
