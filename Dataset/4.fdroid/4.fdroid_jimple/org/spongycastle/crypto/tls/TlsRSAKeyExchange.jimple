org.spongycastle.crypto.tls.TlsRSAKeyExchange extends org.spongycastle.crypto.tls.AbstractTlsKeyExchange
protected byte[] premasterSecret
protected org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey
protected org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials
protected org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey
    public void <init>(java.util.Vector)
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        java.util.Vector $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void <init>(int,java.util.Vector)>(1, $r1);

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey> = null;

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials> = null;

        return;
    }
    public void generateClientKeyExchange(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        java.io.OutputStream $r1;
        org.spongycastle.crypto.params.RSAKeyParameters $r2;
        byte[] $r3;
        org.spongycastle.crypto.tls.TlsContext $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: java.io.OutputStream;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsRSAUtils: byte[] generateEncryptedPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)>($r4, $r2, $r1);

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: byte[] premasterSecret> = $r3;

        return;
    }
    public byte[] generatePremasterSecret() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        byte[] $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: byte[] premasterSecret>;

        if $r1 != null goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: byte[] premasterSecret>;

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: byte[] premasterSecret> = null;

        return $r1;
    }
    public void processClientCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.tls.TlsCredentials $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $z0 = $r1 instanceof org.spongycastle.crypto.tls.TlsSignerCredentials;

        if $z0 != 0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;

     label1:
        return;
    }
    public void processClientKeyExchange(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.tls.TlsContext $r2;
        boolean $z0;
        byte[] $r3;
        org.spongycastle.crypto.tls.TlsEncryptionCredentials $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.tls.TlsContext context>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r2);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <org.spongycastle.util.io.Streams: byte[] readAll(java.io.InputStream)>($r1);

     label1:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials>;

        $r3 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsEncryptionCredentials: byte[] decryptPreMasterSecret(byte[])>($r3);

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: byte[] premasterSecret> = $r3;

        return;

     label2:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        goto label1;
    }
    public void processServerCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        java.lang.RuntimeException r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.asn1.x509.Certificate $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r6;
        org.spongycastle.crypto.params.RSAKeyParameters $r7;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(42);

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label2:
        $r6 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r5);

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = $r6;

     label3:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z0 = virtualinvoke $r6.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 == 0 goto label5;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label4:
        r2 := @caughtexception;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(43, r2);

        throw $r3;

     label5:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $r7 = (org.spongycastle.crypto.params.RSAKeyParameters) $r6;

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.spongycastle.crypto.params.RSAKeyParameters)>($r7);

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.params.RSAKeyParameters rsaServerPublicKey> = $r7;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void validateKeyUsage(org.spongycastle.asn1.x509.Certificate,int)>($r4, 32);

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }
    public void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.tls.TlsCredentials $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.TlsEncryptionCredentials $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r2 := @parameter0: org.spongycastle.crypto.tls.TlsCredentials;

        $z0 = $r2 instanceof org.spongycastle.crypto.tls.TlsEncryptionCredentials;

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        $r4 = (org.spongycastle.crypto.tls.TlsEncryptionCredentials) $r2;

        r0.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: org.spongycastle.crypto.tls.TlsEncryptionCredentials serverCredentials> = $r4;

        return;
    }
    public void skipServerCredentials() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r1;
    }
    public void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.tls.CertificateRequest $r1;
        short[] $r2;
        int i0, $i1;
        short $s2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateRequest;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.tls.CertificateRequest: short[] getCertificateTypes()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $s2 = $r2[i0];

        lookupswitch($s2)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 64: goto label3;
            default: goto label2;
        };

     label2:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
    protected org.spongycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.spongycastle.crypto.params.RSAKeyParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsRSAKeyExchange r0;
        org.spongycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r1 := @parameter0: org.spongycastle.crypto.params.RSAKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean isProbablePrime(int)>(2);

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label1:
        return $r1;
    }
