org.spongycastle.crypto.tls.AbstractTlsServer extends org.spongycastle.crypto.tls.AbstractTlsPeer implements org.spongycastle.crypto.tls.TlsServer
protected org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory
protected short[] clientECPointFormats
protected java.util.Hashtable clientExtensions
protected org.spongycastle.crypto.tls.ProtocolVersion clientVersion
protected org.spongycastle.crypto.tls.TlsServerContext context
protected boolean eccCipherSuitesOffered
protected boolean encryptThenMACOffered
protected short maxFragmentLengthOffered
protected int[] namedCurves
protected int[] offeredCipherSuites
protected short[] offeredCompressionMethods
protected int selectedCipherSuite
protected short selectedCompressionMethod
protected short[] serverECPointFormats
protected java.util.Hashtable serverExtensions
protected org.spongycastle.crypto.tls.ProtocolVersion serverVersion
protected java.util.Vector supportedSignatureAlgorithms
protected boolean truncatedHMacOffered
    public void <init>()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.DefaultTlsCipherFactory $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = new org.spongycastle.crypto.tls.DefaultTlsCipherFactory;

        specialinvoke $r1.<org.spongycastle.crypto.tls.DefaultTlsCipherFactory: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)>($r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.TlsCipherFactory $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCipherFactory;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsPeer: void <init>()>();

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory> = $r1;

        return;
    }
    protected boolean allowEncryptThenMAC()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        return 1;
    }
    protected boolean allowTruncatedHMac()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        return 0;
    }
    protected java.util.Hashtable checkServerExtensions()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        java.util.Hashtable $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable serverExtensions>;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable serverExtensions> = $r1;

        return $r1;
    }
    public org.spongycastle.crypto.tls.CertificateRequest getCertificateRequest() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        return null;
    }
    public org.spongycastle.crypto.tls.CertificateStatus getCertificateStatus() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        return null;
    }
    public org.spongycastle.crypto.tls.TlsCipher getCipher() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.TlsServerContext $r1;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsCipherFactory $r2;
        org.spongycastle.crypto.tls.TlsCipher $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int selectedCipherSuite>;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getEncryptionAlgorithm(int)>($i0);

        $i1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int selectedCipherSuite>;

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getMACAlgorithm(int)>($i1);

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.TlsCipherFactory cipherFactory>;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.TlsServerContext context>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsCipherFactory: org.spongycastle.crypto.tls.TlsCipher createCipher(org.spongycastle.crypto.tls.TlsContext,int,int)>($r1, $i0, $i1);

        return $r3;
    }
protected abstract int[] getCipherSuites() { 
// no body
} 
    public org.spongycastle.crypto.tls.TlsCompression getCompression() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        org.spongycastle.crypto.tls.TlsNullCompression $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $s0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short selectedCompressionMethod>;

        lookupswitch($s0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label2:
        $r2 = new org.spongycastle.crypto.tls.TlsNullCompression;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsNullCompression: void <init>()>();

        return $r2;
    }
    protected short[] getCompressionMethods()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        short[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = newarray (short)[1];

        $r1[0] = 0;

        return $r1;
    }
    protected org.spongycastle.crypto.tls.ProtocolVersion getMaximumVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv11>;

        return r1;
    }
    protected org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion()
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.ProtocolVersion r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        r1 = <org.spongycastle.crypto.tls.ProtocolVersion: org.spongycastle.crypto.tls.ProtocolVersion TLSv10>;

        return r1;
    }
    public org.spongycastle.crypto.tls.NewSessionTicket getNewSessionTicket() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.NewSessionTicket $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = new org.spongycastle.crypto.tls.NewSessionTicket;

        $r2 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.NewSessionTicket: void <init>(long,byte[])>(0L, $r2);

        return $r1;
    }
    public int getSelectedCipherSuite() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        int i0, i1;
        int[] $r1, $r3;
        short[] $r2;
        boolean $z0, $z1;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] namedCurves>;

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] clientECPointFormats>;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean supportsClientECCCapabilities(int[],short[])>($r1, $r2);

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] getCipherSuites()>();

        i1 = 0;

     label1:
        i0 = lengthof $r1;

        if i1 >= i0 goto label4;

        i0 = $r1[i1];

        $r3 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] offeredCipherSuites>;

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r3, i0);

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isECCCipherSuite(int)>(i0);

        if $z1 != 0 goto label3;

     label2:
        $r4 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion serverVersion>;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidCipherSuiteForVersion(int,org.spongycastle.crypto.tls.ProtocolVersion)>(i0, $r4);

        if $z1 == 0 goto label3;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int selectedCipherSuite> = i0;

        return i0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r5;
    }
    public short getSelectedCompressionMethod() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        short[] $r1, $r2;
        int i0, $i1;
        short $s2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] getCompressionMethods()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] offeredCompressionMethods>;

        $s2 = $r1[i0];

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r2, $s2);

        if $z0 == 0 goto label2;

        $s2 = $r1[i0];

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short selectedCompressionMethod> = $s2;

        return $s2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r3;
    }
    public java.util.Hashtable getServerExtensions() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        boolean $z0;
        int $i0;
        java.util.Hashtable $r1;
        short $s1;
        short[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $z0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean encryptThenMACOffered>;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean allowEncryptThenMAC()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int selectedCipherSuite>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isBlockCipherSuite(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable checkServerExtensions()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: void addEncryptThenMACExtension(java.util.Hashtable)>($r1);

     label1:
        $s1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered>;

        if $s1 < 0 goto label2;

        $s1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s1);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable checkServerExtensions()>();

        $s1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered>;

        staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: void addMaxFragmentLengthExtension(java.util.Hashtable,short)>($r1, $s1);

     label2:
        $z0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean truncatedHMacOffered>;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean allowTruncatedHMac()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable checkServerExtensions()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: void addTruncatedHMacExtension(java.util.Hashtable)>($r1);

     label3:
        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] clientECPointFormats>;

        if $r2 == null goto label4;

        $i0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int selectedCipherSuite>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isECCCipherSuite(int)>($i0);

        if $z0 == 0 goto label4;

        $r2 = newarray (short)[3];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 2;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] serverECPointFormats> = $r2;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable checkServerExtensions()>();

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] serverECPointFormats>;

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void addSupportedPointFormatsExtension(java.util.Hashtable,short[])>($r1, $r2);

     label4:
        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable serverExtensions>;

        return $r1;
    }
    public java.util.Vector getServerSupplementalData() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        return null;
    }
    public org.spongycastle.crypto.tls.ProtocolVersion getServerVersion() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1, $r2;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion getMinimumVersion()>();

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion getMaximumVersion()>();

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r1);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion serverVersion> = $r1;

        return $r1;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isLaterVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r1);

        if $z0 == 0 goto label2;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion serverVersion> = $r1;

        return $r1;

     label2:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(70);

        throw $r3;
    }
    public void init(org.spongycastle.crypto.tls.TlsServerContext)
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.TlsServerContext $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsServerContext;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.TlsServerContext context> = $r1;

        return;
    }
    public void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.Certificate $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;
    }
    public void notifyClientVersion(org.spongycastle.crypto.tls.ProtocolVersion) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: org.spongycastle.crypto.tls.ProtocolVersion;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion> = $r1;

        return;
    }
    public void notifyFallback(boolean) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        boolean $z0;
        org.spongycastle.crypto.tls.ProtocolVersion $r1, $r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion getMaximumVersion()>();

        $r2 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isLaterVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(86);

        throw $r3;

     label1:
        return;
    }
    public void notifyOfferedCipherSuites(int[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: int[];

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] offeredCipherSuites> = $r1;

        $r1 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] offeredCipherSuites>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean containsECCCipherSuites(int[])>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean eccCipherSuitesOffered> = $z0;

        return;
    }
    public void notifyOfferedCompressionMethods(short[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        short[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: short[];

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] offeredCompressionMethods> = $r1;

        return;
    }
    public void processClientExtensions(java.util.Hashtable) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        java.util.Hashtable $r1;
        boolean $z0;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;
        java.util.Vector $r3;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        int[] $r5;
        short[] $r6;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: java.util.Hashtable;

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Hashtable clientExtensions> = $r1;

        if $r1 == null goto label3;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasEncryptThenMACExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean encryptThenMACOffered> = $z0;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: short getMaxFragmentLengthExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered> = $s0;

        $s0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered>;

        if $s0 < 0 goto label1;

        $s0 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short maxFragmentLengthOffered>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.MaxFragmentLength: boolean isValid(short)>($s0);

        if $z0 != 0 goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r2;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasTruncatedHMacExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: boolean truncatedHMacOffered> = $z0;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector getSignatureAlgorithmsExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Vector supportedSignatureAlgorithms> = $r3;

        $r3 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: java.util.Vector supportedSignatureAlgorithms>;

        if $r3 == null goto label2;

        $r4 = r0.<org.spongycastle.crypto.tls.AbstractTlsServer: org.spongycastle.crypto.tls.ProtocolVersion clientVersion>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSignatureAlgorithmsExtensionAllowed(org.spongycastle.crypto.tls.ProtocolVersion)>($r4);

        if $z0 != 0 goto label2;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r2;

     label2:
        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int[] getSupportedEllipticCurvesExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: int[] namedCurves> = $r5;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: short[] getSupportedPointFormatsExtension(java.util.Hashtable)>($r1);

        r0.<org.spongycastle.crypto.tls.AbstractTlsServer: short[] clientECPointFormats> = $r6;

     label3:
        return;
    }
    public void processClientSupplementalData(java.util.Vector) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: java.util.Vector;

        if $r1 == null goto label1;

        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r2;

     label1:
        return;
    }
    protected boolean supportsClientECCCapabilities(int[], short[])
    {
        org.spongycastle.crypto.tls.AbstractTlsServer r0;
        int[] $r1;
        short[] $r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsServer;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: short[];

        if $r1 != null goto label1;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean hasAnySupportedNamedCurves()>();

        return $z0;

     label1:
        i1 = 0;

     label2:
        i0 = lengthof $r1;

        if i1 >= i0 goto label5;

        i0 = $r1[i1];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.NamedCurve: boolean isValid(int)>(i0);

        if $z0 == 0 goto label4;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.NamedCurve: boolean refersToASpecificNamedCurve(int)>(i0);

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isSupportedNamedCurve(int)>(i0);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return 0;
    }
