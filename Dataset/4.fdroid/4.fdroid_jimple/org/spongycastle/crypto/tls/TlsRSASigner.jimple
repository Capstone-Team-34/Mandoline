org.spongycastle.crypto.tls.TlsRSASigner extends org.spongycastle.crypto.tls.AbstractTlsSigner
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: void <init>()>();

        return;
    }
    protected org.spongycastle.crypto.AsymmetricBlockCipher createRSAImpl()
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.encodings.PKCS1Encoding $r1;
        org.spongycastle.crypto.engines.RSABlindedEngine $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 = new org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r2 = new org.spongycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r2.<org.spongycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        specialinvoke $r1.<org.spongycastle.crypto.encodings.PKCS1Encoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)>($r2);

        return $r1;
    }
    public org.spongycastle.crypto.Signer createSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.spongycastle.crypto.params.ParametersWithRandom $r3;
        org.spongycastle.crypto.tls.TlsContext $r4;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.Signer $r6;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.tls.TlsContext context>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, $r5);

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.Signer makeSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.spongycastle.crypto.CipherParameters)>($r1, 0, 1, $r3);

        return $r6;
    }
    public org.spongycastle.crypto.Signer createVerifyer(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.spongycastle.crypto.Signer $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.Signer makeSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.spongycastle.crypto.CipherParameters)>($r1, 0, 0, $r2);

        return $r3;
    }
    public byte[] generateRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, org.spongycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        byte[] $r3;
        org.spongycastle.crypto.params.ParametersWithRandom $r4;
        org.spongycastle.crypto.tls.TlsContext $r5;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.Signer $r7;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 := @parameter2: byte[];

        $r4 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.tls.TlsContext context>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        specialinvoke $r4.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, $r6);

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.Signer makeSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.spongycastle.crypto.CipherParameters)>($r1, 1, 1, $r4);

        $i0 = lengthof $r3;

        interfaceinvoke $r7.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r3, 0, $i0);

        $r3 = interfaceinvoke $r7.<org.spongycastle.crypto.Signer: byte[] generateSignature()>();

        return $r3;
    }
    public boolean isValidPublicKey(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.RSAKeyParameters;

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected org.spongycastle.crypto.Signer makeSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, boolean, boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        boolean $z0, $z1, $z2, $z3;
        org.spongycastle.crypto.CipherParameters $r2;
        org.spongycastle.crypto.tls.TlsContext $r3;
        short $s0;
        java.lang.Object r4, r5;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.crypto.AsymmetricBlockCipher $r8;
        java.lang.IllegalStateException $r9;
        org.spongycastle.crypto.digests.NullDigest $r10;
        org.spongycastle.crypto.signers.RSADigestSigner $r11;
        org.spongycastle.crypto.tls.CombinedHash $r12;
        org.spongycastle.crypto.signers.GenericSigner $r13;
        org.spongycastle.crypto.Signer $r14;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r2 := @parameter3: org.spongycastle.crypto.CipherParameters;

        if $r1 == null goto label2;

        $z2 = 1;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.tls.TlsContext context>;

        $z3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r3);

        if $z2 == $z3 goto label3;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label2:
        $z2 = 0;

        goto label1;

     label3:
        if $r1 == null goto label4;

        $s0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        if $s0 == 1 goto label4;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>()>();

        throw $r9;

     label4:
        if $z0 == 0 goto label7;

        $r10 = new org.spongycastle.crypto.digests.NullDigest;

        r4 = $r10;

        specialinvoke $r10.<org.spongycastle.crypto.digests.NullDigest: void <init>()>();

     label5:
        if $r1 == null goto label9;

        $r11 = new org.spongycastle.crypto.signers.RSADigestSigner;

        r5 = $r11;

        $s0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.asn1.ASN1ObjectIdentifier getOIDForHashAlgorithm(short)>($s0);

        $r7 = (org.spongycastle.crypto.Digest) r4;

        specialinvoke $r11.<org.spongycastle.crypto.signers.RSADigestSigner: void <init>(org.spongycastle.crypto.Digest,org.spongycastle.asn1.ASN1ObjectIdentifier)>($r7, $r6);

     label6:
        $r14 = (org.spongycastle.crypto.Signer) r5;

        interfaceinvoke $r14.<org.spongycastle.crypto.Signer: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z1, $r2);

        $r14 = (org.spongycastle.crypto.Signer) r5;

        return $r14;

     label7:
        if $r1 != null goto label8;

        $r12 = new org.spongycastle.crypto.tls.CombinedHash;

        r4 = $r12;

        specialinvoke $r12.<org.spongycastle.crypto.tls.CombinedHash: void <init>()>();

        goto label5;

     label8:
        $s0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s0);

        goto label5;

     label9:
        $r13 = new org.spongycastle.crypto.signers.GenericSigner;

        r5 = $r13;

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.AsymmetricBlockCipher createRSAImpl()>();

        $r7 = (org.spongycastle.crypto.Digest) r4;

        specialinvoke $r13.<org.spongycastle.crypto.signers.GenericSigner: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest)>($r8, $r7);

        goto label6;
    }
    public boolean verifyRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, byte[], org.spongycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.tls.TlsRSASigner r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        byte[] $r2, $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.Signer $r5;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsRSASigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r4 := @parameter3: byte[];

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsRSASigner: org.spongycastle.crypto.Signer makeSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.spongycastle.crypto.CipherParameters)>($r1, 1, 0, $r3);

        $i0 = lengthof $r4;

        interfaceinvoke $r5.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r4, 0, $i0);

        $z0 = interfaceinvoke $r5.<org.spongycastle.crypto.Signer: boolean verifySignature(byte[])>($r2);

        return $z0;
    }
