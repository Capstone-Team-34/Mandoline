org.spongycastle.crypto.tls.DigitallySigned extends java.lang.Object
protected org.spongycastle.crypto.tls.SignatureAndHashAlgorithm algorithm
protected byte[] signature
    public void <init>(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm, byte[])
    {
        org.spongycastle.crypto.tls.DigitallySigned r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.crypto.tls.DigitallySigned;

        $r1 := @parameter0: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'signature\' cannot be null");

        throw $r3;

     label1:
        r0.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm algorithm> = $r1;

        r0.<org.spongycastle.crypto.tls.DigitallySigned: byte[] signature> = $r2;

        return;
    }
    public static org.spongycastle.crypto.tls.DigitallySigned parse(org.spongycastle.crypto.tls.TlsContext, java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r2;
        boolean $z0;
        byte[] $r3;
        org.spongycastle.crypto.tls.DigitallySigned $r4;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: java.io.InputStream;

        r2 = null;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label1;

        r2 = staticinvoke <org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm parse(java.io.InputStream)>($r1);

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        $r4 = new org.spongycastle.crypto.tls.DigitallySigned;

        specialinvoke $r4.<org.spongycastle.crypto.tls.DigitallySigned: void <init>(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[])>(r2, $r3);

        return $r4;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DigitallySigned r0;
        java.io.OutputStream $r1;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.DigitallySigned;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm algorithm>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm algorithm>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void encode(java.io.OutputStream)>($r1);

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.DigitallySigned: byte[] signature>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r3, $r1);

        return;
    }
    public org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm()
    {
        org.spongycastle.crypto.tls.DigitallySigned r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r1;

        r0 := @this: org.spongycastle.crypto.tls.DigitallySigned;

        r1 = r0.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm algorithm>;

        return r1;
    }
    public byte[] getSignature()
    {
        org.spongycastle.crypto.tls.DigitallySigned r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.DigitallySigned;

        r1 = r0.<org.spongycastle.crypto.tls.DigitallySigned: byte[] signature>;

        return r1;
    }
