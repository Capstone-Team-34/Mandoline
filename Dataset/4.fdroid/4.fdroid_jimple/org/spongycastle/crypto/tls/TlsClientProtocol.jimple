org.spongycastle.crypto.tls.TlsClientProtocol extends org.spongycastle.crypto.tls.TlsProtocol
protected org.spongycastle.crypto.tls.TlsAuthentication authentication
protected org.spongycastle.crypto.tls.CertificateRequest certificateRequest
protected org.spongycastle.crypto.tls.CertificateStatus certificateStatus
protected org.spongycastle.crypto.tls.TlsKeyExchange keyExchange
protected byte[] selectedSessionID
protected org.spongycastle.crypto.tls.TlsClient tlsClient
org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext
    public void <init>(java.io.InputStream, java.io.OutputStream, java.security.SecureRandom)
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void <init>(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)>($r1, $r2, $r3);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateStatus certificateStatus> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = null;

        return;
    }
    protected void cleanupHandshake()
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void cleanupHandshake()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateStatus certificateStatus> = null;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = null;

        return;
    }
    public void connect(org.spongycastle.crypto.tls.TlsClient) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsClient $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r5;
        org.spongycastle.crypto.tls.TlsClientContextImpl $r6;
        java.security.SecureRandom $r7;
        boolean $z0;
        org.spongycastle.crypto.prng.RandomGenerator $r8;
        byte[] $r9;
        org.spongycastle.crypto.tls.RecordStream $r10;
        org.spongycastle.crypto.tls.TlsSession $r11;
        org.spongycastle.crypto.tls.SessionParameters $r12;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsClient;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'tlsClient\' cannot be null");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        if $r3 == null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("\'connect\' can only be called once");

        throw $r4;

     label2:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient> = $r1;

        $r5 = new org.spongycastle.crypto.tls.SecurityParameters;

        specialinvoke $r5.<org.spongycastle.crypto.tls.SecurityParameters: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters> = $r5;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r5.<org.spongycastle.crypto.tls.SecurityParameters: int entity> = 1;

        $r6 = new org.spongycastle.crypto.tls.TlsClientContextImpl;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.security.SecureRandom secureRandom>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsClientContextImpl: void <init>(java.security.SecureRandom,org.spongycastle.crypto.tls.SecurityParameters)>($r7, $r5);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext> = $r6;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $z0 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsClient: boolean shouldUseGMTUnixTime()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext>;

        $r8 = virtualinvoke $r6.<org.spongycastle.crypto.tls.TlsClientContextImpl: org.spongycastle.crypto.prng.RandomGenerator getNonceRandomGenerator()>();

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: byte[] createRandomBlock(boolean,org.spongycastle.crypto.prng.RandomGenerator)>($z0, $r8);

        $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom> = $r9;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext>;

        interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: void init(org.spongycastle.crypto.tls.TlsClientContext)>($r6);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext>;

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void init(org.spongycastle.crypto.tls.TlsContext)>($r6);

        $r11 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsClient: org.spongycastle.crypto.tls.TlsSession getSessionToResume()>();

        if $r11 == null goto label3;

        $z0 = interfaceinvoke $r11.<org.spongycastle.crypto.tls.TlsSession: boolean isResumable()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<org.spongycastle.crypto.tls.TlsSession: org.spongycastle.crypto.tls.SessionParameters exportSessionParameters()>();

        if $r12 == null goto label3;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession> = $r11;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters> = $r12;

     label3:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendClientHelloMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void completeHandshake()>();

        return;
    }
    protected org.spongycastle.crypto.tls.TlsContext getContext()
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsClientContextImpl r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext>;

        return r1;
    }
    org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsClientContextImpl r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClientContextImpl tlsClientContext>;

        return r1;
    }
    protected org.spongycastle.crypto.tls.TlsPeer getPeer()
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsClient r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        return r1;
    }
    protected void handleHandshakeMessage(short, byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        short $s0;
        byte[] $r1;
        java.io.ByteArrayInputStream r2;
        org.spongycastle.crypto.tls.DigitallySigned r3;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        org.spongycastle.crypto.tls.Certificate $r5;
        org.spongycastle.crypto.tls.TlsKeyExchange $r6;
        org.spongycastle.crypto.tls.TlsClient $r7;
        org.spongycastle.crypto.tls.TlsAuthentication $r8;
        org.spongycastle.crypto.tls.CertificateStatus $r9;
        org.spongycastle.crypto.tls.RecordStream $r10;
        org.spongycastle.crypto.tls.SecurityParameters $r11;
        org.spongycastle.crypto.tls.SessionParameters $r12;
        org.spongycastle.crypto.tls.TlsPeer $r13;
        org.spongycastle.crypto.tls.TlsCompression $r14;
        org.spongycastle.crypto.tls.TlsCipher $r15;
        int $i1;
        org.spongycastle.crypto.tls.TlsSessionImpl $r16;
        java.util.Vector $r17;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r18;
        org.spongycastle.crypto.tls.TlsCredentials r19, $r24;
        org.spongycastle.crypto.tls.CertificateRequest $r20;
        org.spongycastle.crypto.tls.TlsContext $r21;
        org.spongycastle.crypto.tls.TlsSignerCredentials r22;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r23;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $s0 := @parameter0: short;

        $r1 := @parameter1: byte[];

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 == 0 goto label03;

        if $s0 != 20 goto label01;

        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        if $s0 == 2 goto label02;

     label01:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label02:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void processFinishedMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 15;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendFinishedMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 13;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 16;

        return;

     label03:
        lookupswitch($s0)
        {
            case 0: goto label53;
            case 1: goto label04;
            case 2: goto label19;
            case 3: goto label04;
            case 4: goto label49;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label04;
            case 10: goto label04;
            case 11: goto label05;
            case 12: goto label39;
            case 13: goto label44;
            case 14: goto label26;
            case 15: goto label04;
            case 16: goto label04;
            case 17: goto label04;
            case 18: goto label04;
            case 19: goto label04;
            case 20: goto label15;
            case 21: goto label04;
            case 22: goto label11;
            case 23: goto label23;
            default: goto label04;
        };

     label04:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label05:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 2: goto label07;
            case 3: goto label08;
            default: goto label06;
        };

     label06:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label07:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void handleSupplementalData(java.util.Vector)>(null);

     label08:
        $r5 = staticinvoke <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate parse(java.io.InputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate> = $r5;

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        if $r5 == null goto label09;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        $z0 = virtualinvoke $r5.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label10;

     label09:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean allowCertificateStatus> = 0;

     label10:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void processServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r5);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsClient: org.spongycastle.crypto.tls.TlsAuthentication getAuthentication()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication> = $r8;

        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsAuthentication: void notifyServerCertificate(org.spongycastle.crypto.tls.Certificate)>($r5);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 4;

        return;

     label11:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 4: goto label13;
            default: goto label12;
        };

     label12:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label13:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean allowCertificateStatus>;

        if $z0 != 0 goto label14;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label14:
        $r9 = staticinvoke <org.spongycastle.crypto.tls.CertificateStatus: org.spongycastle.crypto.tls.CertificateStatus parse(java.io.InputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateStatus certificateStatus> = $r9;

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 5;

        return;

     label15:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 13: goto label17;
            case 14: goto label18;
            default: goto label16;
        };

     label16:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label17:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean expectSessionTicket>;

        if $z0 == 0 goto label18;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label18:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void processFinishedMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 15;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 16;

        return;

     label19:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 1: goto label21;
            default: goto label20;
        };

     label20:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label21:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void receiveServerHelloMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 2;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void notifyHelloComplete()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void applyMaxFragmentLengthExtension()>();

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 == 0 goto label22;

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $r1 = virtualinvoke $r12.<org.spongycastle.crypto.tls.SessionParameters: byte[] getMasterSecret()>();

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        $r11.<org.spongycastle.crypto.tls.SecurityParameters: byte[] masterSecret> = $r1;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r13 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r14 = interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCompression getCompression()>();

        $r13 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r15 = interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCipher getCipher()>();

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void setPendingConnectionState(org.spongycastle.crypto.tls.TlsCompression,org.spongycastle.crypto.tls.TlsCipher)>($r14, $r15);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendChangeCipherSpecMessage()>();

        return;

     label22:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void invalidateSession()>();

        $r1 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        $i1 = lengthof $r1;

        if $i1 <= 0 goto label54;

        $r16 = new org.spongycastle.crypto.tls.TlsSessionImpl;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        specialinvoke $r16.<org.spongycastle.crypto.tls.TlsSessionImpl: void <init>(byte[],org.spongycastle.crypto.tls.SessionParameters)>($r1, null);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession> = $r16;

        return;

     label23:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 2: goto label25;
            default: goto label24;
        };

     label24:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label25:
        $r17 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)>(r2);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void handleSupplementalData(java.util.Vector)>($r17);

        return;

     label26:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 2: goto label28;
            case 3: goto label29;
            case 4: goto label30;
            case 5: goto label30;
            case 6: goto label31;
            case 7: goto label31;
            default: goto label27;
        };

     label27:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r4;

     label28:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void handleSupplementalData(java.util.Vector)>(null);

     label29:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipServerCredentials()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication> = null;

     label30:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipServerKeyExchange()>();

     label31:
        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 8;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r18 = virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()>();

        interfaceinvoke $r18.<org.spongycastle.crypto.tls.TlsHandshakeHash: void sealHashAlgorithms()>();

        $r7 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r17 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsClient: java.util.Vector getClientSupplementalData()>();

        if $r17 == null goto label32;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendSupplementalDataMessage(java.util.Vector)>($r17);

     label32:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 9;

        r19 = null;

        $r20 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r20 != null goto label36;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipClientCredentials()>();

     label33:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 10;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendClientKeyExchangeMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 11;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r18 = virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash prepareToFinish()>();

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r21 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: byte[] getCurrentPRFHash(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsHandshakeHash,byte[])>($r21, $r18, null);

        $r11.<org.spongycastle.crypto.tls.SecurityParameters: byte[] sessionHash> = $r1;

        $r21 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void establishMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsKeyExchange)>($r21, $r6);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r13 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r14 = interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCompression getCompression()>();

        $r13 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r15 = interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCipher getCipher()>();

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void setPendingConnectionState(org.spongycastle.crypto.tls.TlsCompression,org.spongycastle.crypto.tls.TlsCipher)>($r14, $r15);

        if r19 == null goto label35;

        $z0 = r19 instanceof org.spongycastle.crypto.tls.TlsSignerCredentials;

        if $z0 == 0 goto label35;

        r22 = (org.spongycastle.crypto.tls.TlsSignerCredentials) r19;

        $r21 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r23 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsSignerCredentials)>($r21, r22);

        if $r23 != null goto label38;

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r1 = virtualinvoke $r11.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getSessionHash()>();

     label34:
        $r1 = interfaceinvoke r22.<org.spongycastle.crypto.tls.TlsSignerCredentials: byte[] generateCertificateSignature(byte[])>($r1);

        r3 = new org.spongycastle.crypto.tls.DigitallySigned;

        specialinvoke r3.<org.spongycastle.crypto.tls.DigitallySigned: void <init>(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[])>($r23, $r1);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendCertificateVerifyMessage(org.spongycastle.crypto.tls.DigitallySigned)>(r3);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 12;

     label35:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendChangeCipherSpecMessage()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendFinishedMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 13;

        return;

     label36:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication>;

        $r20 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        $r24 = interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsAuthentication: org.spongycastle.crypto.tls.TlsCredentials getClientCredentials(org.spongycastle.crypto.tls.CertificateRequest)>($r20);

        r19 = $r24;

        if $r24 != null goto label37;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipClientCredentials()>();

        $r5 = <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendCertificateMessage(org.spongycastle.crypto.tls.Certificate)>($r5);

        goto label33;

     label37:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void processClientCredentials(org.spongycastle.crypto.tls.TlsCredentials)>($r24);

        $r5 = interfaceinvoke $r24.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void sendCertificateMessage(org.spongycastle.crypto.tls.Certificate)>($r5);

        goto label33;

     label38:
        $s0 = virtualinvoke $r23.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $r1 = interfaceinvoke $r18.<org.spongycastle.crypto.tls.TlsHandshakeHash: byte[] getFinalHash(short)>($s0);

        goto label34;

     label39:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 2: goto label41;
            case 3: goto label42;
            case 4: goto label43;
            case 5: goto label43;
            default: goto label40;
        };

     label40:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label41:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void handleSupplementalData(java.util.Vector)>(null);

     label42:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipServerCredentials()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication> = null;

     label43:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void processServerKeyExchange(java.io.InputStream)>(r2);

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 6;

        return;

     label44:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 4: goto label46;
            case 5: goto label46;
            case 6: goto label47;
            default: goto label45;
        };

     label45:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label46:
        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipServerKeyExchange()>();

     label47:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsAuthentication authentication>;

        if $r8 != null goto label48;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r4;

     label48:
        $r21 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r20 = staticinvoke <org.spongycastle.crypto.tls.CertificateRequest: org.spongycastle.crypto.tls.CertificateRequest parse(org.spongycastle.crypto.tls.TlsContext,java.io.InputStream)>($r21, r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = $r20;

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        $r6 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r20 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest)>($r20);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r18 = virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()>();

        $r20 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        $r17 = virtualinvoke $r20.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector getSupportedSignatureAlgorithms()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void trackHashAlgorithms(org.spongycastle.crypto.tls.TlsHandshakeHash,java.util.Vector)>($r18, $r17);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 7;

        return;

     label49:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 13: goto label51;
            default: goto label50;
        };

     label50:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label51:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean expectSessionTicket>;

        if $z0 != 0 goto label52;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r4;

     label52:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void invalidateSession()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void receiveNewSessionTicketMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 14;

        return;

     label53:
        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r2);

        $s0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state>;

        if $s0 != 16 goto label54;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: void refuseRenegotiation()>();

     label54:
        return;
    }
    protected void handleSupplementalData(java.util.Vector) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        java.util.Vector $r1;
        org.spongycastle.crypto.tls.TlsClient $r2;
        org.spongycastle.crypto.tls.TlsKeyExchange $r3;
        org.spongycastle.crypto.tls.TlsContext $r4;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: java.util.Vector;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsClient: void processServerSupplementalData(java.util.Vector)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short connection_state> = 3;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsClient: org.spongycastle.crypto.tls.TlsKeyExchange getKeyExchange()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = $r3;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r4 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsKeyExchange: void init(org.spongycastle.crypto.tls.TlsContext)>($r4);

        return;
    }
    protected void receiveNewSessionTicketMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        java.io.ByteArrayInputStream $r1;
        org.spongycastle.crypto.tls.TlsClient $r2;
        org.spongycastle.crypto.tls.NewSessionTicket $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.NewSessionTicket: org.spongycastle.crypto.tls.NewSessionTicket parse(java.io.InputStream)>($r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsClient: void notifyNewSessionTicket(org.spongycastle.crypto.tls.NewSessionTicket)>($r3);

        return;
    }
    protected void receiveServerHelloMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        java.io.ByteArrayInputStream $r1;
        org.spongycastle.crypto.tls.ProtocolVersion $r2, $r5;
        boolean $z0, $z1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.RecordStream $r4;
        org.spongycastle.crypto.tls.TlsContext $r6;
        org.spongycastle.crypto.tls.AbstractTlsContext $r7;
        org.spongycastle.crypto.tls.TlsClient $r8;
        org.spongycastle.crypto.tls.SecurityParameters $r9, $r22;
        byte[] $r10, $r12;
        int $i0, $i2;
        org.spongycastle.crypto.tls.TlsSession $r11;
        int[] $r13;
        short $s1, $s3;
        short[] $r14;
        java.util.Hashtable $r15, r20;
        java.util.Enumeration $r16;
        java.lang.Object $r17;
        java.lang.Integer r18, $r19;
        org.spongycastle.crypto.tls.SessionParameters $r21;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.ProtocolVersion readVersion(java.io.InputStream)>($r1);

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z0 == 0 goto label01;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label01:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.ProtocolVersion getReadVersion()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean equals(org.spongycastle.crypto.tls.ProtocolVersion)>($r5);

        if $z0 != 0 goto label02;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label02:
        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r5 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r5);

        if $z0 != 0 goto label03;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label03:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void setWriteVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()>();

        virtualinvoke $r7.<org.spongycastle.crypto.tls.AbstractTlsContext: void setServerVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void notifyServerVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>(32, $r1);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom> = $r10;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID> = $r10;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        $i0 = lengthof $r10;

        if $i0 <= 32 goto label04;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label04:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void notifySessionID(byte[])>($r10);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        $i0 = lengthof $r10;

        if $i0 <= 0 goto label07;

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        if $r11 == null goto label07;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: byte[] selectedSessionID>;

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        $r12 = interfaceinvoke $r11.<org.spongycastle.crypto.tls.TlsSession: byte[] getSessionID()>();

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r10, $r12);

        if $z0 == 0 goto label07;

        $z0 = 1;

     label05:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession> = $z0;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r1);

        $r13 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r13, $i0);

        if $z0 == 0 goto label06;

        if $i0 == 0 goto label06;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.CipherSuite: boolean isSCSV(int)>($i0);

        if $z0 != 0 goto label06;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r2 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidCipherSuiteForVersion(int,org.spongycastle.crypto.tls.ProtocolVersion)>($i0, $r2);

        if $z0 != 0 goto label08;

     label06:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label07:
        $z0 = 0;

        goto label05;

     label08:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void notifySelectedCipherSuite(int)>($i0);

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r1);

        $r14 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short[] offeredCompressionMethods>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r14, $s1);

        if $z0 != 0 goto label09;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label09:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void notifySelectedCompressionMethod(short)>($s1);

        $r15 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable serverExtensions> = $r15;

        $r15 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable serverExtensions>;

        if $r15 == null goto label12;

        $r15 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable serverExtensions>;

        $r16 = virtualinvoke $r15.<java.util.Hashtable: java.util.Enumeration keys()>();

     label10:
        $z0 = interfaceinvoke $r16.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label12;

        $r17 = interfaceinvoke $r16.<java.util.Enumeration: java.lang.Object nextElement()>();

        r18 = (java.lang.Integer) $r17;

        $r19 = <org.spongycastle.crypto.tls.TlsClientProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        $z0 = virtualinvoke r18.<java.lang.Integer: boolean equals(java.lang.Object)>($r19);

        if $z0 != 0 goto label10;

        $r15 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r15, r18);

        if $r10 != null goto label11;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(110);

        throw $r3;

     label11:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 == 0 goto label10;

        goto label10;

     label12:
        $r15 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable serverExtensions>;

        r18 = <org.spongycastle.crypto.tls.TlsClientProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r15, r18);

        if $r10 == null goto label13;

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean secure_renegotiation> = 1;

        $r12 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        $r12 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: byte[] createRenegotiationInfo(byte[])>($r12);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r10, $r12);

        if $z0 != 0 goto label13;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r3;

     label13:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean secure_renegotiation>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void notifySecureRenegotiation(boolean)>($z0);

        $r15 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions>;

        r20 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable serverExtensions>;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 == 0 goto label16;

        $r21 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $i2 = virtualinvoke $r21.<org.spongycastle.crypto.tls.SessionParameters: int getCipherSuite()>();

        if $i0 != $i2 goto label14;

        $r21 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $s3 = virtualinvoke $r21.<org.spongycastle.crypto.tls.SessionParameters: short getCompressionAlgorithm()>();

        if $s1 == $s3 goto label15;

     label14:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label15:
        $r15 = null;

        $r21 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        r20 = virtualinvoke $r21.<org.spongycastle.crypto.tls.SessionParameters: java.util.Hashtable readServerExtensions()>();

     label16:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int cipherSuite> = $i0;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: short compressionAlgorithm> = $s1;

        if r20 == null goto label20;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasEncryptThenMACExtension(java.util.Hashtable)>(r20);

        if $z0 == 0 goto label17;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isBlockCipherSuite(int)>($i0);

        if $z1 != 0 goto label17;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label17:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean encryptThenMAC> = $z0;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasExtendedMasterSecretExtension(java.util.Hashtable)>(r20);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean extendedMasterSecret> = $z0;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $s1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short processMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short)>($r15, r20, 47);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: short maxFragmentLength> = $s1;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasTruncatedHMacExtension(java.util.Hashtable)>(r20);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean truncatedHMac> = $z0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 != 0 goto label22;

        r18 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_status_request>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)>(r20, r18, 47);

        if $z0 == 0 goto label22;

        $z0 = 1;

     label18:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean allowCertificateStatus> = $z0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean resumedSession>;

        if $z0 != 0 goto label23;

        r18 = <org.spongycastle.crypto.tls.TlsProtocol: java.lang.Integer EXT_SessionTicket>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)>(r20, r18, 47);

        if $z0 == 0 goto label23;

        $z0 = 1;

     label19:
        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: boolean expectSessionTicket> = $z0;

     label20:
        if $r15 == null goto label21;

        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsClient: void processServerExtensions(java.util.Hashtable)>(r20);

     label21:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r22 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $i0 = virtualinvoke $r22.<org.spongycastle.crypto.tls.SecurityParameters: int getCipherSuite()>();

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: int getPRFAlgorithm(org.spongycastle.crypto.tls.TlsContext,int)>($r6, $i0);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int prfAlgorithm> = $i0;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int verifyDataLength> = 12;

        return;

     label22:
        $z0 = 0;

        goto label18;

     label23:
        $z0 = 0;

        goto label19;
    }
    protected void sendCertificateVerifyMessage(org.spongycastle.crypto.tls.DigitallySigned) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.DigitallySigned $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DigitallySigned;

        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 15);

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DigitallySigned: void encode(java.io.OutputStream)>(r2);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendClientHelloMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r1;
        org.spongycastle.crypto.tls.RecordStream $r2;
        org.spongycastle.crypto.tls.TlsClient $r3;
        org.spongycastle.crypto.tls.ProtocolVersion $r4;
        boolean $z0, $z1, $z2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;
        org.spongycastle.crypto.tls.AbstractTlsContext $r6;
        byte[] r7, $r9;
        org.spongycastle.crypto.tls.TlsSession $r8;
        int $i0;
        int[] $r10;
        short[] $r11;
        org.spongycastle.crypto.tls.SessionParameters $r12;
        short $s1;
        java.util.Hashtable $r13;
        org.spongycastle.crypto.tls.SecurityParameters $r14;
        java.lang.Integer $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: org.spongycastle.crypto.tls.ProtocolVersion getClientHelloRecordLayerVersion()>();

        virtualinvoke $r2.<org.spongycastle.crypto.tls.RecordStream: void setWriteVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r4);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z0 == 0 goto label01;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r5;

     label01:
        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()>();

        virtualinvoke $r6.<org.spongycastle.crypto.tls.AbstractTlsContext: void setClientVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r4);

        r7 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        if $r8 == null goto label03;

        $r8 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsSession tlsSession>;

        $r9 = interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsSession: byte[] getSessionID()>();

        r7 = $r9;

        if $r9 == null goto label02;

        $i0 = lengthof $r9;

        if $i0 <= 32 goto label03;

     label02:
        r7 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

     label03:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $z0 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: boolean isFallback()>();

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r10 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: int[] getCipherSuites()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites> = $r10;

        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r11 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: short[] getCompressionMethods()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short[] offeredCompressionMethods> = $r11;

        $i0 = lengthof r7;

        if $i0 <= 0 goto label05;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        if $r12 == null goto label05;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $i0 = virtualinvoke $r12.<org.spongycastle.crypto.tls.SessionParameters: int getCipherSuite()>();

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r10, $i0);

        if $z1 == 0 goto label04;

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short[] offeredCompressionMethods>;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SessionParameters sessionParameters>;

        $s1 = virtualinvoke $r12.<org.spongycastle.crypto.tls.SessionParameters: short getCompressionAlgorithm()>();

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r11, $s1);

        if $z1 != 0 goto label05;

     label04:
        r7 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

     label05:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsClient tlsClient>;

        $r13 = interfaceinvoke $r3.<org.spongycastle.crypto.tls.TlsClient: java.util.Hashtable getClientExtensions()>();

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions> = $r13;

        r1 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion,java.io.OutputStream)>($r4, r1);

        $r14 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9 = virtualinvoke $r14.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getClientRandom()>();

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void write(byte[])>($r9);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>(r7, r1);

        $r13 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions>;

        $r15 = <org.spongycastle.crypto.tls.TlsClientProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        r7 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r13, $r15);

        if r7 != null goto label11;

        $z1 = 1;

     label06:
        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $z2 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r10, 255);

        if $z2 != 0 goto label12;

        $z2 = 1;

     label07:
        if $z1 == 0 goto label08;

        if $z2 == 0 goto label08;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $r10 = staticinvoke <org.spongycastle.util.Arrays: int[] append(int[],int)>($r10, 255);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites> = $r10;

     label08:
        if $z0 == 0 goto label09;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r10, 22016);

        if $z0 != 0 goto label09;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        $r10 = staticinvoke <org.spongycastle.util.Arrays: int[] append(int[],int)>($r10, 22016);

        r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites> = $r10;

     label09:
        $r10 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: int[] offeredCipherSuites>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16ArrayWithUint16Length(int[],java.io.OutputStream)>($r10, r1);

        $r11 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: short[] offeredCompressionMethods>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)>($r11, r1);

        $r13 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions>;

        if $r13 == null goto label10;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: java.util.Hashtable clientExtensions>;

        staticinvoke <org.spongycastle.crypto.tls.TlsClientProtocol: void writeExtensions(java.io.OutputStream,java.util.Hashtable)>(r1, $r13);

     label10:
        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;

     label11:
        $z1 = 0;

        goto label06;

     label12:
        $z2 = 0;

        goto label07;
    }
    protected void sendClientKeyExchangeMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsClientProtocol r0;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r1;
        org.spongycastle.crypto.tls.TlsKeyExchange $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsClientProtocol;

        r1 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 16);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsClientProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsKeyExchange: void generateClientKeyExchange(java.io.OutputStream)>(r1);

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
