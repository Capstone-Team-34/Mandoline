org.spongycastle.crypto.tls.NewSessionTicket extends java.lang.Object
protected byte[] ticket
protected long ticketLifetimeHint
    public void <init>(long, byte[])
    {
        org.spongycastle.crypto.tls.NewSessionTicket r0;
        long $l0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.NewSessionTicket;

        $l0 := @parameter0: long;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.NewSessionTicket: long ticketLifetimeHint> = $l0;

        r0.<org.spongycastle.crypto.tls.NewSessionTicket: byte[] ticket> = $r1;

        return;
    }
    public static org.spongycastle.crypto.tls.NewSessionTicket parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.spongycastle.crypto.tls.NewSessionTicket $r1;
        long $l0;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $l0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: long readUint32(java.io.InputStream)>($r0);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r0);

        $r1 = new org.spongycastle.crypto.tls.NewSessionTicket;

        specialinvoke $r1.<org.spongycastle.crypto.tls.NewSessionTicket: void <init>(long,byte[])>($l0, $r2);

        return $r1;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.NewSessionTicket r0;
        java.io.OutputStream $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.NewSessionTicket;

        $r1 := @parameter0: java.io.OutputStream;

        $l0 = r0.<org.spongycastle.crypto.tls.NewSessionTicket: long ticketLifetimeHint>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint32(long,java.io.OutputStream)>($l0, $r1);

        $r2 = r0.<org.spongycastle.crypto.tls.NewSessionTicket: byte[] ticket>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
    public byte[] getTicket()
    {
        org.spongycastle.crypto.tls.NewSessionTicket r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.NewSessionTicket;

        r1 = r0.<org.spongycastle.crypto.tls.NewSessionTicket: byte[] ticket>;

        return r1;
    }
    public long getTicketLifetimeHint()
    {
        org.spongycastle.crypto.tls.NewSessionTicket r0;
        long l0;

        r0 := @this: org.spongycastle.crypto.tls.NewSessionTicket;

        l0 = r0.<org.spongycastle.crypto.tls.NewSessionTicket: long ticketLifetimeHint>;

        return l0;
    }
