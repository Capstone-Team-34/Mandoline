org.spongycastle.crypto.tls.DeferredHash extends java.lang.Object implements org.spongycastle.crypto.tls.TlsHandshakeHash
protected static final int BUFFERING_HASH_LIMIT
private org.spongycastle.crypto.tls.DigestInputBuffer buf
protected org.spongycastle.crypto.tls.TlsContext context
private java.util.Hashtable hashes
private java.lang.Short prfHashAlgorithm
    void <init>()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        org.spongycastle.crypto.tls.DigestInputBuffer $r1;
        java.util.Hashtable $r2;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.tls.DigestInputBuffer;

        specialinvoke $r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes> = $r2;

        r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm> = null;

        return;
    }
    private void <init>(java.lang.Short, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        java.lang.Short $r1;
        org.spongycastle.crypto.Digest $r2;
        java.util.Hashtable $r3;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 := @parameter0: java.lang.Short;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf> = null;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes> = $r3;

        r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm> = $r1;

        $r3 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    protected void checkStopBuffering()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        org.spongycastle.crypto.tls.DigestInputBuffer $r1;
        java.util.Hashtable $r2;
        int $i0;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.crypto.Digest r5;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r1 == null goto label3;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        if $i0 > 4 goto label3;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (org.spongycastle.crypto.Digest) $r4;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>(r5);

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf> = null;

     label3:
        return;
    }
    protected void checkTrackingHash(java.lang.Short)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        java.lang.Short $r1;
        java.util.Hashtable $r2;
        boolean $z0;
        short $s0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 := @parameter0: java.lang.Short;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $s0 = virtualinvoke $r1.<java.lang.Short: short shortValue()>();

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s0);

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label1:
        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        byte[] $r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Use fork() to get a definite Digest");

        throw $r2;
    }
    public org.spongycastle.crypto.Digest forkPRFHash()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        java.lang.Short $r1;
        org.spongycastle.crypto.tls.DigestInputBuffer $r2;
        short $s0;
        org.spongycastle.crypto.Digest $r3;
        java.util.Hashtable $r4;
        java.lang.Object $r5;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        virtualinvoke r0.<org.spongycastle.crypto.tls.DeferredHash: void checkStopBuffering()>();

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r2 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        $s0 = virtualinvoke $r1.<java.lang.Short: short shortValue()>();

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest createHash(short)>($s0);

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>($r3);

        return $r3;

     label1:
        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        $s0 = virtualinvoke $r1.<java.lang.Short: short shortValue()>();

        $r4 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (org.spongycastle.crypto.Digest) $r5;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>($s0, $r3);

        return $r3;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Use fork() to get a definite Digest");

        throw $r1;
    }
    public int getDigestSize()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Use fork() to get a definite Digest");

        throw $r1;
    }
    public byte[] getFinalHash(short)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        short $s0;
        byte[] r1;
        java.util.Hashtable $r2;
        java.lang.Short $r3;
        java.lang.Object $r4;
        org.spongycastle.crypto.Digest r5;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        org.spongycastle.crypto.tls.DigestInputBuffer $r9;
        int $i1;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $s0 := @parameter0: short;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r3 = staticinvoke <org.spongycastle.util.Shorts: java.lang.Short valueOf(short)>($s0);

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.spongycastle.crypto.Digest) $r4;

        if r5 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HashAlgorithm ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not being tracked");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>($s0, r5);

        $r9 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r9 == null goto label2;

        $r9 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r9.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>(r5);

     label2:
        $i1 = interfaceinvoke r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i1];

        interfaceinvoke r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        return r1;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        org.spongycastle.crypto.tls.TlsContext $r1;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        return;
    }
    public org.spongycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined()
    {
        org.spongycastle.crypto.tls.CombinedHash r0;
        org.spongycastle.crypto.tls.DeferredHash r1;
        org.spongycastle.crypto.tls.TlsContext $r2;
        org.spongycastle.crypto.tls.SecurityParameters $r3;
        int $i0;
        org.spongycastle.crypto.tls.DigestInputBuffer $r4;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r5;
        short $s1;
        java.lang.Short $r6;

        r1 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r2 = r1.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.TlsContext context>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.tls.SecurityParameters: int getPrfAlgorithm()>();

        if $i0 != 0 goto label1;

        r0 = new org.spongycastle.crypto.tls.CombinedHash;

        specialinvoke r0.<org.spongycastle.crypto.tls.CombinedHash: void <init>()>();

        $r2 = r1.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.TlsContext context>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.CombinedHash: void init(org.spongycastle.crypto.tls.TlsContext)>($r2);

        $r4 = r1.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>(r0);

        $r5 = virtualinvoke r0.<org.spongycastle.crypto.tls.CombinedHash: org.spongycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined()>();

        return $r5;

     label1:
        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short getHashAlgorithmForPRFAlgorithm(int)>($i0);

        $r6 = staticinvoke <org.spongycastle.util.Shorts: java.lang.Short valueOf(short)>($s1);

        r1.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm> = $r6;

        $r6 = r1.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        virtualinvoke r1.<org.spongycastle.crypto.tls.DeferredHash: void checkTrackingHash(java.lang.Short)>($r6);

        return r1;
    }
    public void reset()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        org.spongycastle.crypto.tls.DigestInputBuffer $r1;
        java.util.Hashtable $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.crypto.Digest r5;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void reset()>();

        return;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (org.spongycastle.crypto.Digest) $r4;

        interfaceinvoke r5.<org.spongycastle.crypto.Digest: void reset()>();

        goto label2;

     label3:
        return;
    }
    public void sealHashAlgorithms()
    {
        org.spongycastle.crypto.tls.DeferredHash r0;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        virtualinvoke r0.<org.spongycastle.crypto.tls.DeferredHash: void checkStopBuffering()>();

        return;
    }
    public org.spongycastle.crypto.tls.TlsHandshakeHash stopTracking()
    {
        org.spongycastle.crypto.tls.DeferredHash r0, r1;
        java.lang.Short $r2;
        short $s0;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.crypto.tls.DigestInputBuffer $r6;
        org.spongycastle.crypto.tls.TlsContext $r7;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        $s0 = virtualinvoke $r2.<java.lang.Short: short shortValue()>();

        $r3 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.spongycastle.crypto.Digest) $r4;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.Digest cloneHash(short,org.spongycastle.crypto.Digest)>($s0, $r5);

        $r6 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r6 == null goto label1;

        $r6 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r6.<org.spongycastle.crypto.tls.DigestInputBuffer: void updateDigest(org.spongycastle.crypto.Digest)>($r5);

     label1:
        r1 = new org.spongycastle.crypto.tls.DeferredHash;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.lang.Short prfHashAlgorithm>;

        specialinvoke r1.<org.spongycastle.crypto.tls.DeferredHash: void <init>(java.lang.Short,org.spongycastle.crypto.Digest)>($r2, $r5);

        $r7 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.TlsContext context>;

        virtualinvoke r1.<org.spongycastle.crypto.tls.DeferredHash: void init(org.spongycastle.crypto.tls.TlsContext)>($r7);

        return r1;
    }
    public void trackHashAlgorithm(short)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        short $s0;
        java.lang.Short $r1;
        org.spongycastle.crypto.tls.DigestInputBuffer $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $s0 := @parameter0: short;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too late to track more hash algorithms");

        throw $r3;

     label1:
        $r1 = staticinvoke <org.spongycastle.util.Shorts: java.lang.Short valueOf(short)>($s0);

        virtualinvoke r0.<org.spongycastle.crypto.tls.DeferredHash: void checkTrackingHash(java.lang.Short)>($r1);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        byte $b0;
        org.spongycastle.crypto.tls.DigestInputBuffer $r1;
        java.util.Hashtable $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.spongycastle.crypto.Digest r5;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DigestInputBuffer: void write(int)>($b0);

        return;

     label1:
        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (org.spongycastle.crypto.Digest) $r4;

        interfaceinvoke r5.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        goto label2;

     label3:
        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.tls.DeferredHash r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.tls.DigestInputBuffer $r2;
        java.util.Hashtable $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.spongycastle.crypto.Digest r6;

        r0 := @this: org.spongycastle.crypto.tls.DeferredHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        if $r2 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.tls.DeferredHash: org.spongycastle.crypto.tls.DigestInputBuffer buf>;

        virtualinvoke $r2.<org.spongycastle.crypto.tls.DigestInputBuffer: void write(byte[],int,int)>($r1, $i0, $i1);

        return;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.DeferredHash: java.util.Hashtable hashes>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (org.spongycastle.crypto.Digest) $r5;

        interfaceinvoke r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        goto label2;

     label3:
        return;
    }
