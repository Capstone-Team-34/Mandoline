org.spongycastle.crypto.tls.CertificateRequest extends java.lang.Object
protected java.util.Vector certificateAuthorities
protected short[] certificateTypes
protected java.util.Vector supportedSignatureAlgorithms
    public void <init>(short[], java.util.Vector, java.util.Vector)
    {
        org.spongycastle.crypto.tls.CertificateRequest r0;
        short[] $r1;
        java.util.Vector $r2, $r3;

        r0 := @this: org.spongycastle.crypto.tls.CertificateRequest;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: java.util.Vector;

        $r3 := @parameter2: java.util.Vector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.CertificateRequest: short[] certificateTypes> = $r1;

        r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector supportedSignatureAlgorithms> = $r2;

        r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities> = $r3;

        return;
    }
    public static org.spongycastle.crypto.tls.CertificateRequest parse(org.spongycastle.crypto.tls.TlsContext, java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsContext $r0;
        java.io.InputStream $r1;
        java.io.ByteArrayInputStream r2;
        java.util.Vector r3, r5;
        short[] r4;
        short $s0, $s2;
        int i1;
        boolean $z0;
        byte[] $r6;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.x500.X500Name $r8;
        org.spongycastle.crypto.tls.CertificateRequest $r9;

        $r0 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r1 := @parameter1: java.io.InputStream;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r1);

        r4 = newarray (short)[$s0];

        i1 = 0;

     label1:
        if i1 >= $s0 goto label2;

        $s2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r1);

        r4[i1] = $s2;

        i1 = i1 + 1;

        goto label1;

     label2:
        r5 = null;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r0);

        if $z0 == 0 goto label3;

        r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)>(0, $r1);

     label3:
        r3 = new java.util.Vector;

        specialinvoke r3.<java.util.Vector: void <init>()>();

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r1);

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

     label4:
        i1 = virtualinvoke r2.<java.io.ByteArrayInputStream: int available()>();

        if i1 <= 0 goto label5;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r2);

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.asn1.ASN1Primitive readDERObject(byte[])>($r6);

        $r8 = staticinvoke <org.spongycastle.asn1.x500.X500Name: org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object)>($r7);

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        goto label4;

     label5:
        $r9 = new org.spongycastle.crypto.tls.CertificateRequest;

        specialinvoke $r9.<org.spongycastle.crypto.tls.CertificateRequest: void <init>(short[],java.util.Vector,java.util.Vector)>(r4, r5, r3);

        return $r9;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.CertificateRequest r0;
        java.io.OutputStream $r1;
        java.util.Vector r2, $r4;
        short[] $r3;
        int $i0, i1, $i2;
        boolean $z0;
        java.lang.Object $r5;
        org.spongycastle.asn1.x500.X500Name r6;
        byte[] $r7;

        r0 := @this: org.spongycastle.crypto.tls.CertificateRequest;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.CertificateRequest: short[] certificateTypes>;

        if $r3 == null goto label01;

        $r3 = r0.<org.spongycastle.crypto.tls.CertificateRequest: short[] certificateTypes>;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label05;

     label01:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(int,java.io.OutputStream)>(0, $r1);

     label02:
        r2 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector supportedSignatureAlgorithms>;

        if r2 == null goto label03;

        r2 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector supportedSignatureAlgorithms>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)>(r2, 0, $r1);

     label03:
        r2 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        if r2 == null goto label04;

        r2 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        $z0 = virtualinvoke r2.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label06;

     label04:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(0, $r1);

        return;

     label05:
        $r3 = r0.<org.spongycastle.crypto.tls.CertificateRequest: short[] certificateTypes>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)>($r3, $r1);

        goto label02;

     label06:
        r2 = new java.util.Vector;

        $r4 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        specialinvoke r2.<java.util.Vector: void <init>(int)>($i0);

        $i0 = 0;

        i1 = 0;

     label07:
        $r4 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        $i2 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if i1 >= $i2 goto label08;

        $r4 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r6 = (org.spongycastle.asn1.x500.X500Name) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.asn1.x500.X500Name: byte[] getEncoded(java.lang.String)>("DER");

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        $i2 = lengthof $r7;

        $i2 = $i2 + 2;

        $i0 = $i0 + $i2;

        i1 = i1 + 1;

        goto label07;

     label08:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, $r1);

        $i0 = 0;

     label09:
        i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        if $i0 >= i1 goto label10;

        $r5 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r7 = (byte[]) $r5;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r7, $r1);

        $i0 = $i0 + 1;

        goto label09;

     label10:
        return;
    }
    public java.util.Vector getCertificateAuthorities()
    {
        org.spongycastle.crypto.tls.CertificateRequest r0;
        java.util.Vector r1;

        r0 := @this: org.spongycastle.crypto.tls.CertificateRequest;

        r1 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector certificateAuthorities>;

        return r1;
    }
    public short[] getCertificateTypes()
    {
        org.spongycastle.crypto.tls.CertificateRequest r0;
        short[] r1;

        r0 := @this: org.spongycastle.crypto.tls.CertificateRequest;

        r1 = r0.<org.spongycastle.crypto.tls.CertificateRequest: short[] certificateTypes>;

        return r1;
    }
    public java.util.Vector getSupportedSignatureAlgorithms()
    {
        org.spongycastle.crypto.tls.CertificateRequest r0;
        java.util.Vector r1;

        r0 := @this: org.spongycastle.crypto.tls.CertificateRequest;

        r1 = r0.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector supportedSignatureAlgorithms>;

        return r1;
    }
