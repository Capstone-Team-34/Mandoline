org.spongycastle.crypto.tls.DefaultTlsClient extends org.spongycastle.crypto.tls.AbstractTlsClient
    public void <init>()
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void <init>()>();

        return;
    }
    public void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        org.spongycastle.crypto.tls.TlsCipherFactory $r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsCipherFactory;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsClient: void <init>(org.spongycastle.crypto.tls.TlsCipherFactory)>($r1);

        return;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createDHEKeyExchange(int)
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsDHEKeyExchange $r1;
        java.util.Vector $r2;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.crypto.tls.TlsDHEKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsDHEKeyExchange: void <init>(int,java.util.Vector,org.spongycastle.crypto.params.DHParameters)>($i0, $r2, null);

        return $r1;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createDHKeyExchange(int)
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsDHKeyExchange $r1;
        java.util.Vector $r2;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.crypto.tls.TlsDHKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsDHKeyExchange: void <init>(int,java.util.Vector,org.spongycastle.crypto.params.DHParameters)>($i0, $r2, null);

        return $r1;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createECDHEKeyExchange(int)
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsECDHEKeyExchange $r1;
        java.util.Vector $r2;
        int[] $r3;
        short[] $r4, $r5;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.crypto.tls.TlsECDHEKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: int[] namedCurves>;

        $r4 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: short[] clientECPointFormats>;

        $r5 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: short[] serverECPointFormats>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsECDHEKeyExchange: void <init>(int,java.util.Vector,int[],short[],short[])>($i0, $r2, $r3, $r4, $r5);

        return $r1;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createECDHKeyExchange(int)
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsECDHKeyExchange $r1;
        java.util.Vector $r2;
        int[] $r3;
        short[] $r4, $r5;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.crypto.tls.TlsECDHKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: int[] namedCurves>;

        $r4 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: short[] clientECPointFormats>;

        $r5 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: short[] serverECPointFormats>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsECDHKeyExchange: void <init>(int,java.util.Vector,int[],short[],short[])>($i0, $r2, $r3, $r4, $r5);

        return $r1;
    }
    protected org.spongycastle.crypto.tls.TlsKeyExchange createRSAKeyExchange()
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        org.spongycastle.crypto.tls.TlsRSAKeyExchange $r1;
        java.util.Vector $r2;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $r1 = new org.spongycastle.crypto.tls.TlsRSAKeyExchange;

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: java.util.Vector supportedSignatureAlgorithms>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsRSAKeyExchange: void <init>(java.util.Vector)>($r2);

        return $r1;
    }
    public int[] getCipherSuites()
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $r1 = newarray (int)[15];

        $r1[0] = 49195;

        $r1[1] = 49187;

        $r1[2] = 49161;

        $r1[3] = 49199;

        $r1[4] = 49191;

        $r1[5] = 49171;

        $r1[6] = 162;

        $r1[7] = 64;

        $r1[8] = 50;

        $r1[9] = 158;

        $r1[10] = 103;

        $r1[11] = 51;

        $r1[12] = 156;

        $r1[13] = 60;

        $r1[14] = 47;

        return $r1;
    }
    public org.spongycastle.crypto.tls.TlsKeyExchange getKeyExchange() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DefaultTlsClient r0;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        org.spongycastle.crypto.tls.TlsKeyExchange $r2;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsClient;

        $i0 = r0.<org.spongycastle.crypto.tls.DefaultTlsClient: int selectedCipherSuite>;

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int getKeyExchangeAlgorithm(int)>($i0);

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label1;
            case 3: goto label3;
            case 4: goto label1;
            case 5: goto label3;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label1;
            case 14: goto label1;
            case 15: goto label1;
            case 16: goto label4;
            case 17: goto label5;
            case 18: goto label4;
            case 19: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label2:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createDHKeyExchange(int)>($i0);

        return $r2;

     label3:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createDHEKeyExchange(int)>($i0);

        return $r2;

     label4:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createECDHKeyExchange(int)>($i0);

        return $r2;

     label5:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createECDHEKeyExchange(int)>($i0);

        return $r2;

     label6:
        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.DefaultTlsClient: org.spongycastle.crypto.tls.TlsKeyExchange createRSAKeyExchange()>();

        return $r2;
    }
