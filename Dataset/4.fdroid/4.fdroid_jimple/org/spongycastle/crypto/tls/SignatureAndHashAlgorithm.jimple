org.spongycastle.crypto.tls.SignatureAndHashAlgorithm extends java.lang.Object
protected short hash
protected short signature
    public void <init>(short, short)
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0;
        short $s0, $s1;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint8(short)>($s0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'hash\' should be a uint8");

        throw $r1;

     label1:
        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidUint8(short)>($s1);

        if $z0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'signature\' should be a uint8");

        throw $r1;

     label2:
        if $s1 != 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'signature\' MUST NOT be \"anonymous\"");

        throw $r1;

     label3:
        r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short hash> = $s0;

        r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short signature> = $s1;

        return;
    }
    public static org.spongycastle.crypto.tls.SignatureAndHashAlgorithm parse(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r1;
        short $s0, $s1;

        $r0 := @parameter0: java.io.InputStream;

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r0);

        $s1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r0);

        $r1 = new org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        specialinvoke $r1.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: void <init>(short,short)>($s0, $s1);

        return $r1;
    }
    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0;
        java.io.OutputStream $r1;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r1 := @parameter0: java.io.OutputStream;

        $s0 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s0, $r1);

        $s0 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s0, $r1);

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        short $s0, $s1;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.crypto.tls.SignatureAndHashAlgorithm) $r1;

        $s0 = virtualinvoke r2.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $s1 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        if $s0 != $s1 goto label2;

        $s0 = virtualinvoke r2.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        $s1 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        if $s0 != $s1 goto label2;

        return 1;

     label2:
        return 0;
    }
    public short getHash()
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0;
        short s0;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        s0 = r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short hash>;

        return s0;
    }
    public short getSignature()
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0;
        short s0;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        s0 = r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short signature>;

        return s0;
    }
    public int hashCode()
    {
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm r0;
        short $s0;
        int $i1;

        r0 := @this: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm;

        $s0 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $i1 = $s0 << 16;

        $s0 = virtualinvoke r0.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getSignature()>();

        $i1 = $i1 | $s0;

        return $i1;
    }
