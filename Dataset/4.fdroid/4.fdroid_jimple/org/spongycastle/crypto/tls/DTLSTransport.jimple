org.spongycastle.crypto.tls.DTLSTransport extends java.lang.Object implements org.spongycastle.crypto.tls.DatagramTransport
private final org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer
    void <init>(org.spongycastle.crypto.tls.DTLSRecordLayer)
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 := @parameter0: org.spongycastle.crypto.tls.DTLSRecordLayer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer> = $r1;

        return;
    }
    public void close() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSRecordLayer: void close()>();

        return;
    }
    public int getReceiveLimit() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        int $i0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSRecordLayer: int getReceiveLimit()>();

        return $i0;
    }
    public int getSendLimit() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        int $i0;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r1;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.DTLSRecordLayer: int getSendLimit()>();

        return $i0;
    }
    public int receive(byte[], int, int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.tls.TlsFatalAlert r2;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r3;
        short $s3;
        java.io.IOException r4;
        java.lang.RuntimeException r5;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

     label2:
        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: int receive(byte[],int,int,int)>($r1, $i0, $i1, $i2);

     label3:
        return $i0;

     label4:
        r2 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        $s3 = virtualinvoke r2.<org.spongycastle.crypto.tls.TlsFatalAlert: short getAlertDescription()>();

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>($s3);

        throw r2;

     label5:
        r4 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>(80);

        throw r4;

     label6:
        r5 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>(80);

        r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(80, r5);

        throw r2;

        catch org.spongycastle.crypto.tls.TlsFatalAlert from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label1 to label3 with label6;
    }
    public void send(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DTLSTransport r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert r2;
        short $s2;
        org.spongycastle.crypto.tls.DTLSRecordLayer $r3;
        java.io.IOException r4;
        java.lang.RuntimeException r5;

        r0 := @this: org.spongycastle.crypto.tls.DTLSTransport;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

     label2:
        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void send(byte[],int,int)>($r1, $i0, $i1);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        $s2 = virtualinvoke r2.<org.spongycastle.crypto.tls.TlsFatalAlert: short getAlertDescription()>();

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>($s2);

        throw r2;

     label5:
        r4 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>(80);

        throw r4;

     label6:
        r5 := @caughtexception;

        $r3 = r0.<org.spongycastle.crypto.tls.DTLSTransport: org.spongycastle.crypto.tls.DTLSRecordLayer recordLayer>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.DTLSRecordLayer: void fail(short)>(80);

        r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(80, r5);

        throw r2;

        catch org.spongycastle.crypto.tls.TlsFatalAlert from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label1 to label3 with label6;
    }
