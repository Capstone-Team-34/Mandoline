org.spongycastle.crypto.tls.TlsBlockCipher extends java.lang.Object implements org.spongycastle.crypto.tls.TlsCipher
protected org.spongycastle.crypto.tls.TlsContext context
protected org.spongycastle.crypto.BlockCipher decryptCipher
protected org.spongycastle.crypto.BlockCipher encryptCipher
protected boolean encryptThenMAC
protected byte[] randomData
protected org.spongycastle.crypto.tls.TlsMac readMac
protected boolean useExplicitIV
protected org.spongycastle.crypto.tls.TlsMac writeMac
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.BlockCipher, org.spongycastle.crypto.BlockCipher, org.spongycastle.crypto.Digest, org.spongycastle.crypto.Digest, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.BlockCipher $r2, $r3;
        org.spongycastle.crypto.Digest $r4, $r5;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.tls.TlsMac r6, r13;
        org.spongycastle.crypto.params.KeyParameter r7, r8;
        byte[] $r9, $r12;
        org.spongycastle.crypto.prng.RandomGenerator $r10;
        boolean $z0;
        org.spongycastle.crypto.tls.SecurityParameters $r11;
        org.spongycastle.crypto.tls.TlsFatalAlert $r14;
        org.spongycastle.crypto.params.ParametersWithIV r15, r16;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.BlockCipher;

        $r3 := @parameter2: org.spongycastle.crypto.BlockCipher;

        $r4 := @parameter3: org.spongycastle.crypto.Digest;

        $r5 := @parameter4: org.spongycastle.crypto.Digest;

        $i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        $r9 = newarray (byte)[256];

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: byte[] randomData> = $r9;

        $r10 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.prng.RandomGenerator getNonceRandomGenerator()>();

        $r9 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: byte[] randomData>;

        interfaceinvoke $r10.<org.spongycastle.crypto.prng.RandomGenerator: void nextBytes(byte[])>($r9);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv11(org.spongycastle.crypto.tls.TlsContext)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV> = $z0;

        $r11 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.SecurityParameters getSecurityParameters()>();

        $z0 = $r11.<org.spongycastle.crypto.tls.SecurityParameters: boolean encryptThenMAC>;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC> = $z0;

        $i1 = $i0 * 2;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 + $i2;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 + $i2;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 != 0 goto label1;

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i3 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i2 = $i2 + $i3;

        $i1 = $i1 + $i2;

     label1:
        $r12 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] calculateKeyBlock(org.spongycastle.crypto.tls.TlsContext,int)>($r1, $i1);

        r6 = new org.spongycastle.crypto.tls.TlsMac;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        specialinvoke r6.<org.spongycastle.crypto.tls.TlsMac: void <init>(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.Digest,byte[],int,int)>($r1, $r4, $r12, 0, $i2);

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r13 = new org.spongycastle.crypto.tls.TlsMac;

        $i3 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        specialinvoke r13.<org.spongycastle.crypto.tls.TlsMac: void <init>(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.Digest,byte[],int,int)>($r1, $r5, $r12, $i2, $i3);

        $i3 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i2 = $i2 + $i3;

        r7 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke r7.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r12, $i2, $i0);

        $i2 = $i2 + $i0;

        r8 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r12, $i2, $i0);

        $i0 = $i2 + $i0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r9 = newarray (byte)[$i2];

        $i2 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r12 = newarray (byte)[$i2];

     label2:
        if $i0 == $i1 goto label4;

        $r14 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r14.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r14;

     label3:
        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i2 = $i2 + $i0;

        $r9 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r12, $i0, $i2);

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 + $i2;

        $i2 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i2 = $i2 + $i0;

        $r12 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r12, $i0, $i2);

        $i2 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 + $i2;

        goto label2;

     label4:
        $z0 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsContext: boolean isServer()>();

        if $z0 == 0 goto label6;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac> = r13;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac> = r6;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher> = $r3;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher> = $r2;

        r15 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke r15.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r8, $r12);

        r16 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke r16.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r7, $r9);

     label5:
        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, r15);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, r16);

        return;

     label6:
        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac> = r6;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac> = r13;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher> = $r2;

        r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher> = $r3;

        r15 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke r15.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r7, $r9);

        r16 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke r16.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(r8, $r12);

        goto label5;
    }
    protected int checkPaddingConstantTime(byte[], int, int, int, int)
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, i4, i6, i7;
        byte b5, $b8;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsContext $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        i4 = $i0 + $i1;

        $i0 = i4 + -1;

        b5 = $r1[$i0];

        $i0 = b5 & 255;

        $i0 = $i0 + 1;

        i6 = 0;

        i7 = 0;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsContext context>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r2);

        if $z0 == 0 goto label1;

        if $i0 > $i2 goto label2;

     label1:
        $i2 = $i3 + $i0;

        if $i2 <= $i1 goto label5;

     label2:
        $i0 = 0;

     label3:
        $r1 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: byte[] randomData>;

        $i2 = i6;

     label4:
        if $i2 >= 256 goto label7;

        $i1 = $i2 + 1;

        $b8 = $r1[$i2];

        $i2 = $b8 ^ b5;

        $i2 = $i2 | i7;

        i7 = (byte) $i2;

        $i2 = $i1;

        goto label4;

     label5:
        $i2 = i4 - $i0;

     label6:
        $i1 = $i2 + 1;

        $b8 = $r1[$i2];

        $i2 = $b8 ^ b5;

        $i2 = $i2 | i7;

        i7 = (byte) $i2;

        if $i1 < i4 goto label8;

        i6 = $i0;

        if i7 == 0 goto label3;

        $i0 = 0;

        goto label3;

     label7:
        b5 = $r1[0];

        $i1 = b5 ^ i7;

        b5 = (byte) $i1;

        $r1[0] = b5;

        return $i0;

     label8:
        $i2 = $i1;

        goto label6;
    }
    protected int chooseExtraPadBlocks(java.security.SecureRandom, int)
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        java.security.SecureRandom $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $r1 := @parameter0: java.security.SecureRandom;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsBlockCipher: int lowestBitSet(int)>($i1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        return $i0;
    }
    public byte[] decodeCiphertext(long, short, byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        long $l0;
        short $s1;
        byte[] $r1, $r5, $r6;
        int $i2, i3, $i4, $i5, $i6, i7, $i8;
        org.spongycastle.crypto.BlockCipher $r2;
        org.spongycastle.crypto.tls.TlsMac $r3;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        org.spongycastle.crypto.params.ParametersWithIV $r7;
        byte $b9;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i4 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher>;

        $i5 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r3 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        $i6 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label03;

        i7 = $i5 + $i6;

     label01:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label02;

        i7 = i7 + $i5;

     label02:
        if $i2 >= i7 goto label04;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r4;

     label03:
        i7 = $i6 + 1;

        i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i7);

        goto label01;

     label04:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label22;

        i7 = $i2 - $i6;

     label05:
        i3 = i7 % $i5;

        if i3 == 0 goto label06;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(21);

        throw $r4;

     label06:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label09;

        i3 = $i4 + $i2;

        $i8 = i3 - $i6;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i8, i3);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        $i2 = $i2 - $i6;

        $r6 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r1, $i4, $i2);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r6, $r5);

        if $z0 != 0 goto label08;

        $z0 = 1;

     label07:
        if $z0 == 0 goto label09;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(20);

        throw $r4;

     label08:
        $z0 = 0;

        goto label07;

     label09:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label21;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher>;

        $r7 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke $r7.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[],int,int)>(null, $r1, $i4, $i5);

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r7);

        $i4 = $i4 + $i5;

        $i2 = i7 - $i5;

     label10:
        i7 = 0;

     label11:
        if i7 >= $i2 goto label12;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher decryptCipher>;

        i3 = $i4 + i7;

        $i8 = $i4 + i7;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, i3, $r1, $i8);

        i7 = i7 + $i5;

        goto label11;

     label12:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label17;

        i7 = 0;

     label13:
        i7 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsBlockCipher: int checkPaddingConstantTime(byte[],int,int,int,int)>($r1, $i4, $i2, $i5, i7);

        if i7 != 0 goto label18;

        $i5 = 1;

     label14:
        i7 = $i2 - i7;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 != 0 goto label16;

        i7 = i7 - $i6;

        i3 = $i4 + i7;

        $i8 = i3 + $i6;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, i3, $i8);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        $i2 = $i2 - $i6;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: byte[] randomData>;

        $r6 = virtualinvoke $r3.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMacConstantTime(long,short,byte[],int,int,int,byte[])>($l0, $s1, $r1, $i4, i7, $i2, $r6);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r6, $r5);

        if $z0 != 0 goto label19;

        $b9 = 1;

     label15:
        $i5 = $i5 | $b9;

     label16:
        if $i5 == 0 goto label20;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(20);

        throw $r4;

     label17:
        i7 = $i6;

        goto label13;

     label18:
        $i5 = 0;

        goto label14;

     label19:
        $b9 = 0;

        goto label15;

     label20:
        $i2 = $i4 + i7;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i4, $i2);

        return $r1;

     label21:
        $i2 = i7;

        goto label10;

     label22:
        i7 = $i2;

        goto label05;
    }
    public byte[] encodePlaintext(long, short, byte[], int, int)
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        long $l0;
        short $s1;
        byte[] $r1, r3, $r9;
        int $i2, $i3, i4, i5, $i6, $i7;
        org.spongycastle.crypto.params.ParametersWithIV $r2;
        org.spongycastle.crypto.BlockCipher $r4;
        org.spongycastle.crypto.tls.TlsMac $r5;
        org.spongycastle.crypto.tls.TlsContext $r6;
        org.spongycastle.crypto.tls.ProtocolVersion $r7;
        boolean $z0;
        java.security.SecureRandom $r8;
        org.spongycastle.crypto.prng.RandomGenerator $r10;
        byte $b8;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher>;

        $i6 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r5 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        i4 = virtualinvoke $r5.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsContext context>;

        $r7 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        i5 = $i3;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 != 0 goto label01;

        i5 = $i3 + i4;

     label01:
        $i7 = $i6 + -1;

        i5 = i5 % $i6;

        $i7 = $i7 - i5;

        $z0 = virtualinvoke $r7.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z0 != 0 goto label02;

        $z0 = virtualinvoke $r7.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isSSL()>();

        if $z0 != 0 goto label02;

        i5 = 255 - $i7;

        i5 = i5 / $i6;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsContext context>;

        $r8 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: java.security.SecureRandom getSecureRandom()>();

        i5 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsBlockCipher: int chooseExtraPadBlocks(java.security.SecureRandom,int)>($r8, i5);

        i5 = i5 * $i6;

        $i7 = $i7 + i5;

     label02:
        i4 = $i3 + i4;

        i4 = i4 + $i7;

        i4 = i4 + 1;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label03;

        i4 = i4 + $i6;

     label03:
        $r9 = newarray (byte)[i4];

        i5 = 0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label04;

        r3 = newarray (byte)[$i6];

        $r6 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsContext context>;

        $r10 = interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.prng.RandomGenerator getNonceRandomGenerator()>();

        interfaceinvoke $r10.<org.spongycastle.crypto.prng.RandomGenerator: void nextBytes(byte[])>(r3);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher>;

        $r2 = new org.spongycastle.crypto.params.ParametersWithIV;

        specialinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>(null, r3);

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r9, 0, $i6);

        i5 = $i6;

     label04:
        i4 = i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r9, i5, $i3);

        i5 = i5 + $i3;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 != 0 goto label10;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $r1 = virtualinvoke $r5.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r1, $i2, $i3);

        $i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r9, i5, $i2);

        $i2 = lengthof $r1;

        $i2 = i5 + $i2;

     label05:
        $i3 = 0;

     label06:
        if $i3 > $i7 goto label07;

        $b8 = (byte) $i7;

        $r9[$i2] = $b8;

        $i3 = $i3 + 1;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        $i3 = i4;

     label08:
        if $i3 >= $i2 goto label09;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r9, $i3, $r9, $i3);

        $i3 = $i3 + $i6;

        goto label08;

     label09:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label11;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $r1 = virtualinvoke $r5.<org.spongycastle.crypto.tls.TlsMac: byte[] calculateMac(long,short,byte[],int,int)>($l0, $s1, $r9, 0, $i2);

        $i3 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r9, $i2, $i3);

        return $r9;

     label10:
        $i2 = i5;

        goto label05;

     label11:
        return $r9;
    }
    public int getPlaintextLimit(int)
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        int $i0, $i1, $i2, i3;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.tls.TlsMac $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.BlockCipher encryptCipher>;

        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r2 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        $i2 = virtualinvoke $r2.<org.spongycastle.crypto.tls.TlsMac: int getSize()>();

        i3 = $i0;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean useExplicitIV>;

        if $z0 == 0 goto label1;

        i3 = $i0 - $i1;

     label1:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: boolean encryptThenMAC>;

        if $z0 == 0 goto label3;

        $i0 = i3 - $i2;

        $i2 = $i0 % $i1;

        $i0 = $i0 - $i2;

     label2:
        $i0 = $i0 + -1;

        return $i0;

     label3:
        $i0 = i3 % $i1;

        $i0 = i3 - $i0;

        $i0 = $i0 - $i2;

        goto label2;
    }
    public org.spongycastle.crypto.tls.TlsMac getReadMac()
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        org.spongycastle.crypto.tls.TlsMac r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        r1 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac readMac>;

        return r1;
    }
    public org.spongycastle.crypto.tls.TlsMac getWriteMac()
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        org.spongycastle.crypto.tls.TlsMac r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        r1 = r0.<org.spongycastle.crypto.tls.TlsBlockCipher: org.spongycastle.crypto.tls.TlsMac writeMac>;

        return r1;
    }
    protected int lowestBitSet(int)
    {
        org.spongycastle.crypto.tls.TlsBlockCipher r0;
        int $i0, $i1, i2;

        r0 := @this: org.spongycastle.crypto.tls.TlsBlockCipher;

        $i1 := @parameter0: int;

        if $i1 != 0 goto label1;

        return 32;

     label1:
        i2 = 0;

     label2:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label3;

        i2 = i2 + 1;

        $i1 = $i1 >> 1;

        goto label2;

     label3:
        return i2;
    }
