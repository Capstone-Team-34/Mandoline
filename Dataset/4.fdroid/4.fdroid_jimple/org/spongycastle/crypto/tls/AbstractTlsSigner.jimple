org.spongycastle.crypto.tls.AbstractTlsSigner extends java.lang.Object implements org.spongycastle.crypto.tls.TlsSigner
protected org.spongycastle.crypto.tls.TlsContext context
    public void <init>()
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.crypto.Signer createSigner(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        org.spongycastle.crypto.Signer $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: org.spongycastle.crypto.Signer createSigner(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(null, $r1);

        return $r2;
    }
    public org.spongycastle.crypto.Signer createVerifyer(org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        org.spongycastle.crypto.Signer $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: org.spongycastle.crypto.Signer createVerifyer(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(null, $r1);

        return $r2;
    }
    public byte[] generateRawSignature(org.spongycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        $r1 := @parameter0: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r2 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: byte[] generateRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,org.spongycastle.crypto.params.AsymmetricKeyParameter,byte[])>(null, $r1, $r2);

        return $r2;
    }
    public void init(org.spongycastle.crypto.tls.TlsContext)
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;
        org.spongycastle.crypto.tls.TlsContext $r1;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        return;
    }
    public boolean verifyRawSignature(byte[], org.spongycastle.crypto.params.AsymmetricKeyParameter, byte[]) throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.crypto.tls.AbstractTlsSigner r0;
        byte[] $r1, $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.AbstractTlsSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        $r3 := @parameter2: byte[];

        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsSigner: boolean verifyRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.spongycastle.crypto.params.AsymmetricKeyParameter,byte[])>(null, $r1, $r2, $r3);

        return $z0;
    }
