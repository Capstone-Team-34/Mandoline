org.spongycastle.crypto.tls.TlsECCUtils extends java.lang.Object
private static final java.lang.String[] CURVE_NAMES
public static final java.lang.Integer EXT_ec_point_formats
public static final java.lang.Integer EXT_elliptic_curves
    static void <clinit>()
    {
        java.lang.Integer $r0;
        java.lang.String[] $r1;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(10);

        <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_elliptic_curves> = $r0;

        $r0 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(11);

        <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_ec_point_formats> = $r0;

        $r1 = newarray (java.lang.String)[28];

        $r1[0] = "sect163k1";

        $r1[1] = "sect163r1";

        $r1[2] = "sect163r2";

        $r1[3] = "sect193r1";

        $r1[4] = "sect193r2";

        $r1[5] = "sect233k1";

        $r1[6] = "sect233r1";

        $r1[7] = "sect239k1";

        $r1[8] = "sect283k1";

        $r1[9] = "sect283r1";

        $r1[10] = "sect409k1";

        $r1[11] = "sect409r1";

        $r1[12] = "sect571k1";

        $r1[13] = "sect571r1";

        $r1[14] = "secp160k1";

        $r1[15] = "secp160r1";

        $r1[16] = "secp160r2";

        $r1[17] = "secp192k1";

        $r1[18] = "secp192r1";

        $r1[19] = "secp224k1";

        $r1[20] = "secp224r1";

        $r1[21] = "secp256k1";

        $r1[22] = "secp256r1";

        $r1[23] = "secp384r1";

        $r1[24] = "secp521r1";

        $r1[25] = "brainpoolP256r1";

        $r1[26] = "brainpoolP384r1";

        $r1[27] = "brainpoolP512r1";

        <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.String[] CURVE_NAMES> = $r1;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.tls.TlsECCUtils r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsECCUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void addSupportedEllipticCurvesExtension(java.util.Hashtable, int[]) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        int[] $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: int[];

        $r2 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_elliptic_curves>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] createSupportedEllipticCurvesExtension(int[])>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static void addSupportedPointFormatsExtension(java.util.Hashtable, short[]) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        short[] $r1;
        java.lang.Integer $r2;
        byte[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 := @parameter1: short[];

        $r2 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_ec_point_formats>;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] createSupportedPointFormatsExtension(short[])>($r1);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }
    public static boolean areOnSameCurve(org.spongycastle.crypto.params.ECDomainParameters, org.spongycastle.crypto.params.ECDomainParameters)
    {
        org.spongycastle.crypto.params.ECDomainParameters $r0, $r1;
        org.spongycastle.math.ec.ECCurve $r2, $r3;
        boolean $z0;
        org.spongycastle.math.ec.ECPoint $r4, $r5;
        java.math.BigInteger $r6, $r7;

        $r0 := @parameter0: org.spongycastle.crypto.params.ECDomainParameters;

        $r1 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        $r2 = virtualinvoke $r0.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r0.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $z0 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: boolean equals(org.spongycastle.math.ec.ECPoint)>($r5);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r0.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r0.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static byte[] calculateECDHBasicAgreement(org.spongycastle.crypto.params.ECPublicKeyParameters, org.spongycastle.crypto.params.ECPrivateKeyParameters)
    {
        org.spongycastle.crypto.params.ECPublicKeyParameters $r0;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r1;
        org.spongycastle.crypto.agreement.ECDHBasicAgreement r2;
        java.math.BigInteger $r3;
        int $i0;
        byte[] $r4;

        $r0 := @parameter0: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r1 := @parameter1: org.spongycastle.crypto.params.ECPrivateKeyParameters;

        r2 = new org.spongycastle.crypto.agreement.ECDHBasicAgreement;

        specialinvoke r2.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: void <init>()>();

        virtualinvoke r2.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: void init(org.spongycastle.crypto.CipherParameters)>($r1);

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: java.math.BigInteger calculateAgreement(org.spongycastle.crypto.CipherParameters)>($r0);

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.agreement.ECDHBasicAgreement: int getFieldSize()>();

        $r4 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i0, $r3);

        return $r4;
    }
    private static void checkNamedCurve(int[], int) throws java.io.IOException
    {
        int[] $r0;
        int $i0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r0, $i0);

        if $z0 != 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r1;

     label1:
        return;
    }
    public static boolean containsECCCipherSuites(int[])
    {
        int[] $r0;
        boolean $z0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $i1 = $r0[i0];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isECCCipherSuite(int)>($i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static byte[] createSupportedEllipticCurvesExtension(int[]) throws java.io.IOException
    {
        int[] $r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $r0 := @parameter0: int[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 >= 1 goto label2;

     label1:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r2;

     label2:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] encodeUint16ArrayWithUint16Length(int[])>($r0);

        return $r1;
    }
    public static byte[] createSupportedPointFormatsExtension(short[]) throws java.io.IOException
    {
        short[] $r0;
        boolean $z0;
        byte[] $r1;

        $r0 := @parameter0: short[];

        if $r0 == null goto label1;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r0, 0);

        if $z0 != 0 goto label2;

     label1:
        $r0 = staticinvoke <org.spongycastle.util.Arrays: short[] append(short[],short)>($r0, 0);

     label2:
        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] encodeUint8ArrayWithUint8Length(short[])>($r0);

        return $r1;
    }
    public static java.math.BigInteger deserializeECFieldElement(int, byte[]) throws java.io.IOException
    {
        int $i0, $i1;
        byte[] $r0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;
        java.math.BigInteger $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i1 = lengthof $r0;

        if $i1 == $i0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r1;

     label1:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        return $r2;
    }
    public static org.spongycastle.math.ec.ECPoint deserializeECPoint(short[], org.spongycastle.math.ec.ECCurve, byte[]) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.math.ec.ECCurve $r1;
        byte[] $r2;
        int $i0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        byte $b1;
        boolean $z0;
        short s2;
        org.spongycastle.math.ec.ECPoint $r4;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.math.ec.ECCurve;

        $r2 := @parameter2: byte[];

        if $r2 == null goto label01;

        $i0 = lengthof $r2;

        if $i0 >= 1 goto label02;

     label01:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label02:
        $b1 = $r2[0];

        lookupswitch($b1)
        {
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label09;
            default: goto label03;
        };

     label03:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label04:
        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isF2mCurve(org.spongycastle.math.ec.ECCurve)>($r1);

        if $z0 == 0 goto label07;

        s2 = 2;

     label05:
        if s2 == 0 goto label10;

        if $r0 == null goto label06;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r0, s2);

        if $z0 != 0 goto label10;

     label06:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label07:
        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpCurve(org.spongycastle.math.ec.ECCurve)>($r1);

        if $z0 == 0 goto label08;

        s2 = 1;

        goto label05;

     label08:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label09:
        s2 = 0;

        goto label05;

     label10:
        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>($r2);

        return $r4;
    }
    public static org.spongycastle.crypto.params.ECPublicKeyParameters deserializeECPublicKey(short[], org.spongycastle.crypto.params.ECDomainParameters, byte[]) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;
        byte[] $r2;
        java.lang.RuntimeException r3;
        org.spongycastle.math.ec.ECCurve $r4;
        org.spongycastle.math.ec.ECPoint $r5;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r6;
        org.spongycastle.crypto.tls.TlsFatalAlert $r7;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        $r2 := @parameter2: byte[];

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.math.ec.ECPoint deserializeECPoint(short[],org.spongycastle.math.ec.ECCurve,byte[])>($r0, $r4, $r2);

     label2:
        $r6 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

     label3:
        specialinvoke $r6.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r5, $r1);

     label4:
        return $r6;

     label5:
        r3 := @caughtexception;

        $r7 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r7.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(47, r3);

        throw $r7;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
    }
    public static org.spongycastle.crypto.AsymmetricCipherKeyPair generateECKeyPair(java.security.SecureRandom, org.spongycastle.crypto.params.ECDomainParameters)
    {
        java.security.SecureRandom $r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;
        org.spongycastle.crypto.generators.ECKeyPairGenerator r2;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r3;
        org.spongycastle.crypto.params.ECKeyGenerationParameters $r4;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        r2 = new org.spongycastle.crypto.generators.ECKeyPairGenerator;

        specialinvoke r2.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void <init>()>();

        $r4 = new org.spongycastle.crypto.params.ECKeyGenerationParameters;

        specialinvoke $r4.<org.spongycastle.crypto.params.ECKeyGenerationParameters: void <init>(org.spongycastle.crypto.params.ECDomainParameters,java.security.SecureRandom)>($r1, $r0);

        virtualinvoke r2.<org.spongycastle.crypto.generators.ECKeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>($r4);

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.generators.ECKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        return $r3;
    }
    public static org.spongycastle.crypto.params.ECPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom, short[], org.spongycastle.crypto.params.ECDomainParameters, java.io.OutputStream) throws java.io.IOException
    {
        java.security.SecureRandom $r0;
        short[] $r1;
        org.spongycastle.crypto.params.ECDomainParameters $r2;
        java.io.OutputStream $r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.crypto.params.ECPublicKeyParameters r6;
        org.spongycastle.math.ec.ECPoint $r7;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r8;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: short[];

        $r2 := @parameter2: org.spongycastle.crypto.params.ECDomainParameters;

        $r3 := @parameter3: java.io.OutputStream;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.AsymmetricCipherKeyPair generateECKeyPair(java.security.SecureRandom,org.spongycastle.crypto.params.ECDomainParameters)>($r0, $r2);

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r6 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECPoint(short[],org.spongycastle.math.ec.ECPoint,java.io.OutputStream)>($r1, $r7, $r3);

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        $r8 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r5;

        return $r8;
    }
    static org.spongycastle.crypto.params.ECPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom, int[], short[], java.io.OutputStream) throws java.io.IOException
    {
        java.security.SecureRandom $r0;
        int[] $r1;
        short[] $r2;
        java.io.OutputStream $r3;
        int i0, i1, i2;
        org.spongycastle.crypto.params.ECDomainParameters r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;
        boolean $z0;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r6;

        $r0 := @parameter0: java.security.SecureRandom;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: short[];

        $r3 := @parameter3: java.io.OutputStream;

        i1 = -1;

        if $r1 != null goto label03;

        i1 = 23;

     label01:
        r4 = null;

        if i1 < 0 goto label06;

        r4 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int)>(i1);

     label02:
        if r4 != null goto label08;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r5;

     label03:
        i2 = 0;

     label04:
        i0 = lengthof $r1;

        if i2 >= i0 goto label01;

        i0 = $r1[i2];

        $z0 = staticinvoke <org.spongycastle.crypto.tls.NamedCurve: boolean isValid(int)>(i0);

        if $z0 == 0 goto label05;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isSupportedNamedCurve(int)>(i0);

        if $z0 == 0 goto label05;

        i1 = i0;

        goto label01;

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r1, 65281);

        if $z0 == 0 goto label07;

        r4 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int)>(23);

        goto label02;

     label07:
        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r1, 65282);

        if $z0 == 0 goto label02;

        r4 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int)>(10);

        goto label02;

     label08:
        if i1 >= 0 goto label10;

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeExplicitECParameters(short[],org.spongycastle.crypto.params.ECDomainParameters,java.io.OutputStream)>($r2, r4, $r3);

     label09:
        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,short[],org.spongycastle.crypto.params.ECDomainParameters,java.io.OutputStream)>($r0, $r2, r4, $r3);

        return $r6;

     label10:
        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeNamedECParameters(int,java.io.OutputStream)>(i1, $r3);

        goto label09;
    }
    public static java.lang.String getNameOfNamedCurve(int)
    {
        int $i0;
        boolean $z0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isSupportedNamedCurve(int)>($i0);

        if $z0 == 0 goto label1;

        $r0 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.String[] CURVE_NAMES>;

        $i0 = $i0 + -1;

        $r1 = $r0[$i0];

        return $r1;

     label1:
        return null;
    }
    public static org.spongycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int)
    {
        int $i0;
        java.lang.String $r0;
        org.spongycastle.asn1.x9.X9ECParameters $r1, r2;
        org.spongycastle.crypto.params.ECDomainParameters $r3;
        org.spongycastle.math.ec.ECCurve $r4;
        org.spongycastle.math.ec.ECPoint $r5;
        java.math.BigInteger $r6, $r7;
        byte[] $r8;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.String getNameOfNamedCurve(int)>($i0);

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.spongycastle.crypto.ec.CustomNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

        r2 = $r1;

        if $r1 != null goto label2;

        $r1 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>($r0);

        r2 = $r1;

        if $r1 == null goto label3;

     label2:
        $r3 = new org.spongycastle.crypto.params.ECDomainParameters;

        $r4 = virtualinvoke r2.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r5 = virtualinvoke r2.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke r2.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke r2.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getH()>();

        $r8 = virtualinvoke r2.<org.spongycastle.asn1.x9.X9ECParameters: byte[] getSeed()>();

        specialinvoke $r3.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r4, $r5, $r6, $r7, $r8);

        return $r3;

     label3:
        return null;
    }
    public static int[] getSupportedEllipticCurvesExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        int[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_elliptic_curves>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int[] readSupportedEllipticCurvesExtension(byte[])>($r2);

        return $r3;
    }
    public static short[] getSupportedPointFormatsExtension(java.util.Hashtable) throws java.io.IOException
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;
        byte[] $r2;
        short[] $r3;

        $r0 := @parameter0: java.util.Hashtable;

        $r1 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.Integer EXT_ec_point_formats>;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: short[] readSupportedPointFormatsExtension(byte[])>($r2);

        return $r3;
    }
    public static boolean hasAnySupportedNamedCurves()
    {
        java.lang.String[] $r0;
        int $i0;

        $r0 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.String[] CURVE_NAMES>;

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isCompressionPreferred(short[], short)
    {
        short[] $r0;
        short $s0, s1;
        int $i2, i3;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        if $r0 != null goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof $r0;

        if i3 >= $i2 goto label4;

        s1 = $r0[i3];

        if s1 == 0 goto label4;

        if s1 != $s0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }
    public static boolean isECCCipherSuite(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 49153: goto label2;
            case 49154: goto label2;
            case 49155: goto label2;
            case 49156: goto label2;
            case 49157: goto label2;
            case 49158: goto label2;
            case 49159: goto label2;
            case 49160: goto label2;
            case 49161: goto label2;
            case 49162: goto label2;
            case 49163: goto label2;
            case 49164: goto label2;
            case 49165: goto label2;
            case 49166: goto label2;
            case 49167: goto label2;
            case 49168: goto label2;
            case 49169: goto label2;
            case 49170: goto label2;
            case 49171: goto label2;
            case 49172: goto label2;
            case 49173: goto label2;
            case 49174: goto label2;
            case 49175: goto label2;
            case 49176: goto label2;
            case 49177: goto label2;
            case 49187: goto label2;
            case 49188: goto label2;
            case 49189: goto label2;
            case 49190: goto label2;
            case 49191: goto label2;
            case 49192: goto label2;
            case 49193: goto label2;
            case 49194: goto label2;
            case 49195: goto label2;
            case 49196: goto label2;
            case 49197: goto label2;
            case 49198: goto label2;
            case 49199: goto label2;
            case 49200: goto label2;
            case 49201: goto label2;
            case 49202: goto label2;
            case 49203: goto label2;
            case 49204: goto label2;
            case 49205: goto label2;
            case 49206: goto label2;
            case 49207: goto label2;
            case 49208: goto label2;
            case 49209: goto label2;
            case 49210: goto label2;
            case 49211: goto label2;
            case 49266: goto label2;
            case 49267: goto label2;
            case 49268: goto label2;
            case 49269: goto label2;
            case 49270: goto label2;
            case 49271: goto label2;
            case 49272: goto label2;
            case 49273: goto label2;
            case 49286: goto label2;
            case 49287: goto label2;
            case 49288: goto label2;
            case 49289: goto label2;
            case 49290: goto label2;
            case 49291: goto label2;
            case 49292: goto label2;
            case 49293: goto label2;
            case 49306: goto label2;
            case 49307: goto label2;
            case 49324: goto label2;
            case 49325: goto label2;
            case 49326: goto label2;
            case 49327: goto label2;
            case 52243: goto label2;
            case 52244: goto label2;
            case 58386: goto label2;
            case 58387: goto label2;
            case 58388: goto label2;
            case 58389: goto label2;
            case 58392: goto label2;
            case 58393: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    public static boolean isSupportedNamedCurve(int)
    {
        int $i0, $i1;
        java.lang.String[] $r0;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $r0 = <org.spongycastle.crypto.tls.TlsECCUtils: java.lang.String[] CURVE_NAMES>;

        $i1 = lengthof $r0;

        if $i0 > $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static int readECExponent(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0, $i1;
        java.io.InputStream $r0;
        java.math.BigInteger $r1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r0);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        if $i1 >= 32 goto label1;

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        if $i1 <= 0 goto label1;

        if $i1 >= $i0 goto label1;

        return $i1;

     label1:
        $r2 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r2.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r2;
    }
    public static java.math.BigInteger readECFieldElement(int, java.io.InputStream) throws java.io.IOException
    {
        int $i0;
        java.io.InputStream $r0;
        byte[] $r1;
        java.math.BigInteger $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.InputStream;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r0);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger deserializeECFieldElement(int,byte[])>($i0, $r1);

        return $r2;
    }
    public static java.math.BigInteger readECParameter(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.math.BigInteger $r1;
        byte[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.math.BigInteger;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }
    public static org.spongycastle.crypto.params.ECDomainParameters readECParameters(int[], short[], java.io.InputStream) throws java.io.IOException
    {
        int[] $r0;
        short[] $r1;
        java.io.InputStream $r2;
        java.lang.RuntimeException r3;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        java.math.BigInteger $r5, $r6, $r7, $r9, $r10;
        int $i1, $i2, i3, i4;
        byte[] $r8;
        org.spongycastle.math.ec.ECCurve$Fp r11;
        org.spongycastle.math.ec.ECPoint $r12;
        org.spongycastle.crypto.params.ECDomainParameters $r13;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve$F2m $r14;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: short[];

        $r2 := @parameter2: java.io.InputStream;

     label01:
        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r2);

     label02:
        lookupswitch($s0)
        {
            case 1: goto label06;
            case 2: goto label12;
            case 3: goto label29;
            default: goto label03;
        };

     label03:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label04:
        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label05:
        r3 := @caughtexception;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(47, r3);

        throw $r4;

     label06:
        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void checkNamedCurve(int[],int)>($r0, 65281);

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r2);

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECFieldElement(int,java.io.InputStream)>($i1, $r2);

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECFieldElement(int,java.io.InputStream)>($i1, $r2);

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r2);

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r2);

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r2);

     label07:
        r11 = new org.spongycastle.math.ec.ECCurve$Fp;

     label08:
        specialinvoke r11.<org.spongycastle.math.ec.ECCurve$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, $r7, $r9, $r10);

        $r12 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.math.ec.ECPoint deserializeECPoint(short[],org.spongycastle.math.ec.ECCurve,byte[])>($r1, r11, $r8);

     label09:
        $r13 = new org.spongycastle.crypto.params.ECDomainParameters;

     label10:
        specialinvoke $r13.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)>(r11, $r12, $r9, $r10);

     label11:
        return $r13;

     label12:
        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void checkNamedCurve(int[],int)>($r0, 65282);

        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r2);

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r2);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.ECBasisType: boolean isValid(short)>($s0);

     label13:
        if $z0 != 0 goto label15;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label14:
        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label15:
        $i2 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int readECExponent(int,java.io.InputStream)>($i1, $r2);

     label16:
        i3 = -1;

        i4 = -1;

        if $s0 != 2 goto label19;

     label17:
        i3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int readECExponent(int,java.io.InputStream)>($i1, $r2);

     label18:
        i4 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: int readECExponent(int,java.io.InputStream)>($i1, $r2);

     label19:
        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECFieldElement(int,java.io.InputStream)>($i1, $r2);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECFieldElement(int,java.io.InputStream)>($i1, $r2);

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r2);

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r2);

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: java.math.BigInteger readECParameter(java.io.InputStream)>($r2);

     label20:
        if $s0 != 2 goto label26;

        $r14 = new org.spongycastle.math.ec.ECCurve$F2m;

     label21:
        specialinvoke $r14.<org.spongycastle.math.ec.ECCurve$F2m: void <init>(int,int,int,int,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($i1, $i2, i3, i4, $r5, $r6, $r7, $r9);

     label22:
        $r12 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.math.ec.ECPoint deserializeECPoint(short[],org.spongycastle.math.ec.ECCurve,byte[])>($r1, $r14, $r8);

     label23:
        $r13 = new org.spongycastle.crypto.params.ECDomainParameters;

     label24:
        specialinvoke $r13.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)>($r14, $r12, $r7, $r9);

     label25:
        return $r13;

     label26:
        $r14 = new org.spongycastle.math.ec.ECCurve$F2m;

     label27:
        specialinvoke $r14.<org.spongycastle.math.ec.ECCurve$F2m: void <init>(int,int,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($i1, $i2, $r5, $r6, $r7, $r9);

     label28:
        goto label22;

     label29:
        $i1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r2);

        $z0 = staticinvoke <org.spongycastle.crypto.tls.NamedCurve: boolean refersToASpecificNamedCurve(int)>($i1);

     label30:
        if $z0 != 0 goto label32;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label31:
        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label32:
        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void checkNamedCurve(int[],int)>($r0, $i1);

        $r13 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: org.spongycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int)>($i1);

     label33:
        return $r13;

        catch java.lang.RuntimeException from label01 to label02 with label05;
        catch java.lang.RuntimeException from label04 to label05 with label05;
        catch java.lang.RuntimeException from label06 to label07 with label05;
        catch java.lang.RuntimeException from label08 to label09 with label05;
        catch java.lang.RuntimeException from label10 to label11 with label05;
        catch java.lang.RuntimeException from label12 to label13 with label05;
        catch java.lang.RuntimeException from label14 to label16 with label05;
        catch java.lang.RuntimeException from label17 to label18 with label05;
        catch java.lang.RuntimeException from label18 to label19 with label05;
        catch java.lang.RuntimeException from label19 to label20 with label05;
        catch java.lang.RuntimeException from label21 to label22 with label05;
        catch java.lang.RuntimeException from label22 to label23 with label05;
        catch java.lang.RuntimeException from label24 to label25 with label05;
        catch java.lang.RuntimeException from label27 to label28 with label05;
        catch java.lang.RuntimeException from label29 to label30 with label05;
        catch java.lang.RuntimeException from label31 to label33 with label05;
    }
    public static int[] readSupportedEllipticCurvesExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        int[] $r4;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>(r1);

        if $i0 < 2 goto label2;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label3;

     label2:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label3:
        $i0 = $i0 / 2;

        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int[] readUint16Array(int,java.io.InputStream)>($i0, r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        return $r4;
    }
    public static short[] readSupportedPointFormatsExtension(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.io.ByteArrayInputStream r1;
        java.lang.IllegalArgumentException $r2;
        short $s0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        short[] $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'extensionData\' cannot be null");

        throw $r2;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>(r1);

        if $s0 >= 1 goto label2;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r3;

     label2:
        $r4 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short[] readUint8Array(int,java.io.InputStream)>($s0, r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: void assertEmpty(java.io.ByteArrayInputStream)>(r1);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r4, 0);

        if $z0 != 0 goto label3;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r3;

     label3:
        return $r4;
    }
    public static byte[] serializeECFieldElement(int, java.math.BigInteger) throws java.io.IOException
    {
        int $i0;
        java.math.BigInteger $r0;
        byte[] $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.BigInteger;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i0, $r0);

        return $r1;
    }
    public static byte[] serializeECPoint(short[], org.spongycastle.math.ec.ECPoint) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        boolean z0, $z1;
        byte[] $r3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.math.ec.ECPoint;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        z0 = 0;

        $z1 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpCurve(org.spongycastle.math.ec.ECCurve)>($r2);

        if $z1 == 0 goto label2;

        z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isCompressionPreferred(short[],short)>($r0, 1);

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded(boolean)>(z0);

        return $r3;

     label2:
        $z1 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isF2mCurve(org.spongycastle.math.ec.ECCurve)>($r2);

        if $z1 == 0 goto label1;

        z0 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: boolean isCompressionPreferred(short[],short)>($r0, 2);

        goto label1;
    }
    public static byte[] serializeECPublicKey(short[], org.spongycastle.crypto.params.ECPublicKeyParameters) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r1;
        org.spongycastle.math.ec.ECPoint $r2;
        byte[] $r3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] serializeECPoint(short[],org.spongycastle.math.ec.ECPoint)>($r0, $r2);

        return $r3;
    }
    public static org.spongycastle.crypto.params.ECPublicKeyParameters validateECPublicKey(org.spongycastle.crypto.params.ECPublicKeyParameters) throws java.io.IOException
    {
        org.spongycastle.crypto.params.ECPublicKeyParameters $r0;

        $r0 := @parameter0: org.spongycastle.crypto.params.ECPublicKeyParameters;

        return $r0;
    }
    public static void writeECExponent(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0;
        java.io.OutputStream $r0;
        long $l1;
        java.math.BigInteger $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECParameter(java.math.BigInteger,java.io.OutputStream)>($r1, $r0);

        return;
    }
    public static void writeECFieldElement(int, java.math.BigInteger, java.io.OutputStream) throws java.io.IOException
    {
        int $i0;
        java.math.BigInteger $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.BigInteger;

        $r1 := @parameter2: java.io.OutputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] serializeECFieldElement(int,java.math.BigInteger)>($i0, $r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
    public static void writeECFieldElement(org.spongycastle.math.ec.ECFieldElement, java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.math.ec.ECFieldElement $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: org.spongycastle.math.ec.ECFieldElement;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = virtualinvoke $r0.<org.spongycastle.math.ec.ECFieldElement: byte[] getEncoded()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
    public static void writeECParameter(java.math.BigInteger, java.io.OutputStream) throws java.io.IOException
    {
        java.math.BigInteger $r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r2, $r1);

        return;
    }
    public static void writeECPoint(short[], org.spongycastle.math.ec.ECPoint, java.io.OutputStream) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.io.OutputStream $r2;
        byte[] $r3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] serializeECPoint(short[],org.spongycastle.math.ec.ECPoint)>($r0, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r3, $r2);

        return;
    }
    public static void writeExplicitECParameters(short[], org.spongycastle.crypto.params.ECDomainParameters, java.io.OutputStream) throws java.io.IOException
    {
        short[] $r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;
        java.io.OutputStream $r2;
        int i0;
        org.spongycastle.math.ec.ECCurve $r3;
        boolean $z0;
        org.spongycastle.math.field.FiniteField $r4;
        java.math.BigInteger $r5;
        org.spongycastle.math.ec.ECFieldElement $r6;
        org.spongycastle.math.ec.ECPoint $r7;
        byte[] $r8;
        org.spongycastle.math.field.PolynomialExtensionField r9;
        org.spongycastle.math.field.Polynomial $r10;
        int[] $r11;
        java.lang.IllegalArgumentException $r12;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpCurve(org.spongycastle.math.ec.ECCurve)>($r3);

        if $z0 == 0 goto label2;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(1, $r2);

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $r5 = interfaceinvoke $r4.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECParameter(java.math.BigInteger,java.io.OutputStream)>($r5, $r2);

     label1:
        $r6 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECFieldElement(org.spongycastle.math.ec.ECFieldElement,java.io.OutputStream)>($r6, $r2);

        $r6 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECFieldElement(org.spongycastle.math.ec.ECFieldElement,java.io.OutputStream)>($r6, $r2);

        $r7 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: byte[] serializeECPoint(short[],org.spongycastle.math.ec.ECPoint)>($r0, $r7);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r8, $r2);

        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECParameter(java.math.BigInteger,java.io.OutputStream)>($r5, $r2);

        $r5 = virtualinvoke $r1.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECParameter(java.math.BigInteger,java.io.OutputStream)>($r5, $r2);

        return;

     label2:
        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isF2mCurve(org.spongycastle.math.ec.ECCurve)>($r3);

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        r9 = (org.spongycastle.math.field.PolynomialExtensionField) $r4;

        $r10 = interfaceinvoke r9.<org.spongycastle.math.field.PolynomialExtensionField: org.spongycastle.math.field.Polynomial getMinimalPolynomial()>();

        $r11 = interfaceinvoke $r10.<org.spongycastle.math.field.Polynomial: int[] getExponentsPresent()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(2, $r2);

        i0 = lengthof $r11;

        i0 = i0 + -1;

        i0 = $r11[i0];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>(i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(i0, $r2);

        i0 = lengthof $r11;

        if i0 != 3 goto label3;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(1, $r2);

        i0 = $r11[1];

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECExponent(int,java.io.OutputStream)>(i0, $r2);

        goto label1;

     label3:
        i0 = lengthof $r11;

        if i0 != 5 goto label4;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(2, $r2);

        i0 = $r11[1];

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECExponent(int,java.io.OutputStream)>(i0, $r2);

        i0 = $r11[2];

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECExponent(int,java.io.OutputStream)>(i0, $r2);

        i0 = $r11[3];

        staticinvoke <org.spongycastle.crypto.tls.TlsECCUtils: void writeECExponent(int,java.io.OutputStream)>(i0, $r2);

        goto label1;

     label4:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only trinomial and pentomial curves are supported");

        throw $r12;

     label5:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'ecParameters\' not a known curve type");

        throw $r12;
    }
    public static void writeNamedECParameters(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0;
        java.io.OutputStream $r0;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.NamedCurve: boolean refersToASpecificNamedCurve(int)>($i0);

        if $z0 != 0 goto label1;

        $r1 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r1.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r1;

     label1:
        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(3, $r0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void checkUint16(int)>($i0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, $r0);

        return;
    }
