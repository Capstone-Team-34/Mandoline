org.spongycastle.crypto.tls.TlsServerProtocol extends org.spongycastle.crypto.tls.TlsProtocol
protected org.spongycastle.crypto.tls.CertificateRequest certificateRequest
protected short clientCertificateType
protected org.spongycastle.crypto.tls.TlsKeyExchange keyExchange
protected org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash
protected org.spongycastle.crypto.tls.TlsCredentials serverCredentials
protected org.spongycastle.crypto.tls.TlsServer tlsServer
org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext
    public void <init>(java.io.InputStream, java.io.OutputStream, java.security.SecureRandom)
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void <init>(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)>($r1, $r2, $r3);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short clientCertificateType> = -1;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash> = null;

        return;
    }
    public void accept(org.spongycastle.crypto.tls.TlsServer) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.TlsServer $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r5;
        org.spongycastle.crypto.tls.TlsServerContextImpl $r6;
        java.security.SecureRandom $r7;
        boolean $z0;
        org.spongycastle.crypto.prng.RandomGenerator $r8;
        byte[] $r9;
        org.spongycastle.crypto.tls.RecordStream $r10;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsServer;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'tlsServer\' cannot be null");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        if $r3 == null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("\'accept\' can only be called once");

        throw $r4;

     label2:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer> = $r1;

        $r5 = new org.spongycastle.crypto.tls.SecurityParameters;

        specialinvoke $r5.<org.spongycastle.crypto.tls.SecurityParameters: void <init>()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters> = $r5;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r5.<org.spongycastle.crypto.tls.SecurityParameters: int entity> = 0;

        $r6 = new org.spongycastle.crypto.tls.TlsServerContextImpl;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.security.SecureRandom secureRandom>;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsServerContextImpl: void <init>(java.security.SecureRandom,org.spongycastle.crypto.tls.SecurityParameters)>($r7, $r5);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext> = $r6;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $z0 = interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsServer: boolean shouldUseGMTUnixTime()>();

        $r6 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext>;

        $r8 = virtualinvoke $r6.<org.spongycastle.crypto.tls.TlsServerContextImpl: org.spongycastle.crypto.prng.RandomGenerator getNonceRandomGenerator()>();

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: byte[] createRandomBlock(boolean,org.spongycastle.crypto.prng.RandomGenerator)>($z0, $r8);

        $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom> = $r9;

        $r1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext>;

        interfaceinvoke $r1.<org.spongycastle.crypto.tls.TlsServer: void init(org.spongycastle.crypto.tls.TlsServerContext)>($r6);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext>;

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void init(org.spongycastle.crypto.tls.TlsContext)>($r6);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r10.<org.spongycastle.crypto.tls.RecordStream: void setRestrictReadVersion(boolean)>(0);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void completeHandshake()>();

        return;
    }
    protected void cleanupHandshake()
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void cleanupHandshake()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = null;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash> = null;

        return;
    }
    protected boolean expectCertificateVerifyMessage()
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        boolean $z0;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short clientCertificateType>;

        if $s0 < 0 goto label1;

        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short clientCertificateType>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasSigningCapability(short)>($s0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected org.spongycastle.crypto.tls.TlsContext getContext()
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.TlsServerContextImpl r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext>;

        return r1;
    }
    org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.TlsServerContextImpl r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServerContextImpl tlsServerContext>;

        return r1;
    }
    protected org.spongycastle.crypto.tls.TlsPeer getPeer()
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.TlsServer r1;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        r1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        return r1;
    }
    protected void handleHandshakeMessage(short, byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        short $s0;
        byte[] $r1;
        java.io.ByteArrayInputStream r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;
        org.spongycastle.crypto.tls.RecordStream $r4;
        org.spongycastle.crypto.tls.TlsServer $r5;
        java.util.Vector $r6;
        org.spongycastle.crypto.tls.TlsKeyExchange $r7;
        org.spongycastle.crypto.tls.TlsContext $r8;
        org.spongycastle.crypto.tls.TlsCredentials $r9;
        org.spongycastle.crypto.tls.Certificate r10, $r14;
        boolean $z0;
        org.spongycastle.crypto.tls.CertificateStatus $r11;
        org.spongycastle.crypto.tls.CertificateRequest $r12;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r13;
        org.spongycastle.crypto.tls.NewSessionTicket $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $s0 := @parameter0: short;

        $r1 := @parameter1: byte[];

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        lookupswitch($s0)
        {
            case 1: goto label02;
            case 11: goto label17;
            case 15: goto label30;
            case 16: goto label22;
            case 20: goto label34;
            case 23: goto label14;
            default: goto label01;
        };

     label01:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label02:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 0: goto label04;
            case 16: goto label13;
            default: goto label03;
        };

     label03:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label04:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void receiveClientHelloMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendServerHelloMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 2;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: void notifyHelloComplete()>();

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: java.util.Vector getServerSupplementalData()>();

        if $r6 == null goto label05;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendSupplementalDataMessage(java.util.Vector)>($r6);

     label05:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 3;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r7 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.TlsKeyExchange getKeyExchange()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange> = $r7;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: void init(org.spongycastle.crypto.tls.TlsContext)>($r8);

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r9 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.TlsCredentials getCredentials()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials> = $r9;

        r10 = null;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials>;

        if $r9 != null goto label12;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipServerCredentials()>();

     label06:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 4;

        if r10 == null goto label07;

        $z0 = virtualinvoke r10.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label08;

     label07:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean allowCertificateStatus> = 0;

     label08:
        $z0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean allowCertificateStatus>;

        if $z0 == 0 goto label09;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r11 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.CertificateStatus getCertificateStatus()>();

        if $r11 == null goto label09;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendCertificateStatusMessage(org.spongycastle.crypto.tls.CertificateStatus)>($r11);

     label09:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 5;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r1 = interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: byte[] generateServerKeyExchange()>();

        if $r1 == null goto label10;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendServerKeyExchangeMessage(byte[])>($r1);

     label10:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 6;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials>;

        if $r9 == null goto label11;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r12 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.CertificateRequest getCertificateRequest()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest> = $r12;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r12 == null goto label11;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: void validateCertificateRequest(org.spongycastle.crypto.tls.CertificateRequest)>($r12);

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendCertificateRequestMessage(org.spongycastle.crypto.tls.CertificateRequest)>($r12);

        $r4 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r13 = virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()>();

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        $r6 = virtualinvoke $r12.<org.spongycastle.crypto.tls.CertificateRequest: java.util.Vector getSupportedSignatureAlgorithms()>();

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void trackHashAlgorithms(org.spongycastle.crypto.tls.TlsHandshakeHash,java.util.Vector)>($r13, $r6);

     label11:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 7;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendServerHelloDoneMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 8;

        $r4 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r13 = virtualinvoke $r4.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash getHandshakeHash()>();

        interfaceinvoke $r13.<org.spongycastle.crypto.tls.TlsHandshakeHash: void sealHashAlgorithms()>();

        return;

     label12:
        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: void processServerCredentials(org.spongycastle.crypto.tls.TlsCredentials)>($r9);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials>;

        $r14 = interfaceinvoke $r9.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        r10 = $r14;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendCertificateMessage(org.spongycastle.crypto.tls.Certificate)>($r14);

        goto label06;

     label13:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void refuseRenegotiation()>();

        return;

     label14:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 8: goto label16;
            default: goto label15;
        };

     label15:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label16:
        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)>(r2);

        interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: void processClientSupplementalData(java.util.Vector)>($r6);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 9;

        return;

     label17:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 8: goto label19;
            case 9: goto label20;
            default: goto label18;
        };

     label18:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label19:
        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: void processClientSupplementalData(java.util.Vector)>(null);

     label20:
        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r12 != null goto label21;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label21:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void receiveCertificateMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 10;

        return;

     label22:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 8: goto label24;
            case 9: goto label25;
            case 10: goto label26;
            default: goto label23;
        };

     label23:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label24:
        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: void processClientSupplementalData(java.util.Vector)>(null);

     label25:
        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r12 != null goto label27;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipClientCredentials()>();

     label26:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 11;

        return;

     label27:
        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r8);

        if $z0 == 0 goto label28;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label28:
        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r8);

        if $z0 == 0 goto label29;

        r10 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        if r10 != null goto label26;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label29:
        r10 = <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate)>(r10);

        goto label26;

     label30:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 11: goto label32;
            default: goto label31;
        };

     label31:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label32:
        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean expectCertificateVerifyMessage()>();

        if $z0 != 0 goto label33;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label33:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void receiveCertificateVerifyMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 12;

        return;

     label34:
        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state>;

        lookupswitch($s0)
        {
            case 11: goto label36;
            case 12: goto label37;
            default: goto label35;
        };

     label35:
        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label36:
        $z0 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean expectCertificateVerifyMessage()>();

        if $z0 == 0 goto label37;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r3;

     label37:
        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void processFinishedMessage(java.io.ByteArrayInputStream)>(r2);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 13;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean expectSessionTicket>;

        if $z0 == 0 goto label38;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r15 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.NewSessionTicket getNewSessionTicket()>();

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendNewSessionTicketMessage(org.spongycastle.crypto.tls.NewSessionTicket)>($r15);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendChangeCipherSpecMessage()>();

     label38:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 14;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendFinishedMessage()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 15;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short connection_state> = 16;

        return;
    }
    protected void handleWarningMessage(short) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        short $s0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        boolean $z0;
        org.spongycastle.crypto.tls.CertificateRequest $r2;
        org.spongycastle.crypto.tls.Certificate $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $s0 := @parameter0: short;

        lookupswitch($s0)
        {
            case 41: goto label2;
            default: goto label1;
        };

     label1:
        specialinvoke r0.<org.spongycastle.crypto.tls.TlsProtocol: void handleWarningMessage(short)>($s0);

        return;

     label2:
        $r1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isSSL(org.spongycastle.crypto.tls.TlsContext)>($r1);

        if $z0 == 0 goto label3;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r2 == null goto label3;

        $r3 = <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate EMPTY_CHAIN>;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate)>($r3);

     label3:
        return;
    }
    protected void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.Certificate $r1, $r4;
        org.spongycastle.crypto.tls.CertificateRequest $r2;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.tls.TlsFatalAlert $r5;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsKeyExchange $r6;
        org.spongycastle.crypto.tls.TlsServer $r7;
        org.spongycastle.crypto.tls.TlsCredentials $r8;
        short $s0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.Certificate;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.CertificateRequest certificateRequest>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        if $r4 == null goto label2;

        $r5 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r5.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(10);

        throw $r5;

     label2:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate> = $r1;

        $z0 = virtualinvoke $r1.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void skipClientCredentials()>();

     label3:
        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        interfaceinvoke $r7.<org.spongycastle.crypto.tls.TlsServer: void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        return;

     label4:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsCredentials serverCredentials>;

        $r4 = interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsCredentials: org.spongycastle.crypto.tls.Certificate getCertificate()>();

        $s0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short getClientCertificateType(org.spongycastle.crypto.tls.Certificate,org.spongycastle.crypto.tls.Certificate)>($r1, $r4);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short clientCertificateType> = $s0;

        $r6 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r6.<org.spongycastle.crypto.tls.TlsKeyExchange: void processClientCertificate(org.spongycastle.crypto.tls.Certificate)>($r1);

        goto label3;
    }
    protected void receiveCertificateMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        java.io.ByteArrayInputStream $r1;
        org.spongycastle.crypto.tls.Certificate $r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.Certificate: org.spongycastle.crypto.tls.Certificate parse(java.io.InputStream)>($r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r1);

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void notifyClientCertificate(org.spongycastle.crypto.tls.Certificate)>($r2);

        return;
    }
    protected void receiveCertificateVerifyMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        java.io.ByteArrayInputStream $r1;
        java.lang.Exception r2;
        org.spongycastle.crypto.tls.TlsContext $r3;
        org.spongycastle.crypto.tls.DigitallySigned $r4;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r5;
        org.spongycastle.crypto.tls.SignatureAndHashAlgorithm $r6;
        short $s0;
        byte[] $r7, $r13;
        org.spongycastle.crypto.tls.Certificate $r8;
        org.spongycastle.asn1.x509.Certificate $r9;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r10;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r11;
        org.spongycastle.crypto.tls.TlsSigner $r12;
        org.spongycastle.crypto.tls.TlsFatalAlert $r14;
        org.spongycastle.crypto.tls.SecurityParameters $r15;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r4 = staticinvoke <org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.DigitallySigned parse(org.spongycastle.crypto.tls.TlsContext,java.io.InputStream)>($r3, $r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r1);

     label01:
        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isTLSv12(org.spongycastle.crypto.tls.TlsContext)>($r3);

     label02:
        if $z0 == 0 goto label08;

     label03:
        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash>;

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm()>();

        $s0 = virtualinvoke $r6.<org.spongycastle.crypto.tls.SignatureAndHashAlgorithm: short getHash()>();

        $r7 = interfaceinvoke $r5.<org.spongycastle.crypto.tls.TlsHandshakeHash: byte[] getFinalHash(short)>($s0);

     label04:
        $r8 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        $r9 = virtualinvoke $r8.<org.spongycastle.crypto.tls.Certificate: org.spongycastle.asn1.x509.Certificate getCertificateAt(int)>(0);

        $r10 = virtualinvoke $r9.<org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        $r11 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r10);

        $s0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short clientCertificateType>;

        $r12 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.TlsSigner createTlsSigner(short)>($s0);

        $r3 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsSigner: void init(org.spongycastle.crypto.tls.TlsContext)>($r3);

        $r6 = virtualinvoke $r4.<org.spongycastle.crypto.tls.DigitallySigned: org.spongycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm()>();

        $r13 = virtualinvoke $r4.<org.spongycastle.crypto.tls.DigitallySigned: byte[] getSignature()>();

        $z0 = interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsSigner: boolean verifyRawSignature(org.spongycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.spongycastle.crypto.params.AsymmetricKeyParameter,byte[])>($r6, $r13, $r11, $r7);

     label05:
        if $z0 != 0 goto label10;

        $r14 = new org.spongycastle.crypto.tls.TlsFatalAlert;

     label06:
        specialinvoke $r14.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(51);

        throw $r14;

     label07:
        r2 := @caughtexception;

        $r14 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r14.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short,java.lang.Throwable)>(51, r2);

        throw $r14;

     label08:
        $r15 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r7 = virtualinvoke $r15.<org.spongycastle.crypto.tls.SecurityParameters: byte[] getSessionHash()>();

     label09:
        goto label04;

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label07;
        catch java.lang.Exception from label03 to label04 with label07;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Exception from label06 to label07 with label07;
        catch java.lang.Exception from label08 to label09 with label07;
    }
    protected void receiveClientHelloMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        java.io.ByteArrayInputStream $r1;
        org.spongycastle.crypto.tls.ProtocolVersion $r2;
        org.spongycastle.crypto.tls.RecordStream $r3;
        boolean $z0;
        org.spongycastle.crypto.tls.TlsFatalAlert $r4;
        byte[] $r5, $r6;
        int $i0, $i1;
        int[] $r7;
        short $s2;
        short[] $r8;
        java.util.Hashtable $r9;
        org.spongycastle.crypto.tls.SecurityParameters $r10;
        org.spongycastle.crypto.tls.AbstractTlsContext $r11;
        org.spongycastle.crypto.tls.TlsServer $r12;
        java.lang.Integer $r13;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: org.spongycastle.crypto.tls.ProtocolVersion readVersion(java.io.InputStream)>($r1);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: void setWriteVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isDTLS()>();

        if $z0 == 0 goto label1;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label1:
        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readFully(int,java.io.InputStream)>(32, $r1);

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r1);

        $i0 = lengthof $r6;

        if $i0 <= 32 goto label2;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label2:
        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r1);

        if $i0 < 2 goto label3;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label4;

     label3:
        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(50);

        throw $r4;

     label4:
        $i0 = $i0 / 2;

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: int[] readUint16Array(int,java.io.InputStream)>($i0, $r1);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: int[] offeredCipherSuites> = $r7;

        $s2 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r1);

        if $s2 >= 1 goto label5;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(47);

        throw $r4;

     label5:
        $r8 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: short[] readUint8Array(int,java.io.InputStream)>($s2, $r1);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short[] offeredCompressionMethods> = $r8;

        $r9 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)>($r1);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions> = $r9;

        $r10 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions>;

        $z0 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasExtendedMasterSecretExtension(java.util.Hashtable)>($r9);

        $r10.<org.spongycastle.crypto.tls.SecurityParameters: boolean extendedMasterSecret> = $z0;

        $r11 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()>();

        virtualinvoke $r11.<org.spongycastle.crypto.tls.AbstractTlsContext: void setClientVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void notifyClientVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r2);

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: int[] offeredCipherSuites>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r7, 22016);

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void notifyFallback(boolean)>($z0);

        $r10 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10.<org.spongycastle.crypto.tls.SecurityParameters: byte[] clientRandom> = $r5;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: int[] offeredCipherSuites>;

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void notifyOfferedCipherSuites(int[])>($r7);

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r8 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short[] offeredCompressionMethods>;

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void notifyOfferedCompressionMethods(short[])>($r8);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: int[] offeredCipherSuites>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r7, 255);

        if $z0 == 0 goto label6;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean secure_renegotiation> = 1;

     label6:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions>;

        $r13 = <org.spongycastle.crypto.tls.TlsServerProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        $r5 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r9, $r13);

        if $r5 == null goto label7;

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean secure_renegotiation> = 1;

        $r6 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        $r6 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: byte[] createRenegotiationInfo(byte[])>($r6);

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r5, $r6);

        if $z0 != 0 goto label7;

        $r4 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r4.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(40);

        throw $r4;

     label7:
        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $z0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean secure_renegotiation>;

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void notifySecureRenegotiation(boolean)>($z0);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions>;

        if $r9 == null goto label8;

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions>;

        interfaceinvoke $r12.<org.spongycastle.crypto.tls.TlsServer: void processClientExtensions(java.util.Hashtable)>($r9);

     label8:
        return;
    }
    protected void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        java.io.ByteArrayInputStream $r1;
        org.spongycastle.crypto.tls.TlsKeyExchange $r2;
        org.spongycastle.crypto.tls.RecordStream $r3;
        org.spongycastle.crypto.tls.TlsHandshakeHash $r4;
        org.spongycastle.crypto.tls.SecurityParameters $r5;
        org.spongycastle.crypto.tls.TlsContext $r6;
        byte[] $r7;
        org.spongycastle.crypto.tls.TlsPeer $r8;
        org.spongycastle.crypto.tls.TlsCompression $r9;
        org.spongycastle.crypto.tls.TlsCipher $r10;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: java.io.ByteArrayInputStream;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsKeyExchange: void processClientKeyExchange(java.io.InputStream)>($r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: void assertEmpty(java.io.ByteArrayInputStream)>($r1);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: org.spongycastle.crypto.tls.TlsHandshakeHash prepareToFinish()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash> = $r4;

        $r5 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r4 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsHandshakeHash prepareFinishHash>;

        $r7 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: byte[] getCurrentPRFHash(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsHandshakeHash,byte[])>($r6, $r4, null);

        $r5.<org.spongycastle.crypto.tls.SecurityParameters: byte[] sessionHash> = $r7;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsKeyExchange keyExchange>;

        staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: void establishMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.tls.TlsKeyExchange)>($r6, $r2);

        $r3 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r9 = interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCompression getCompression()>();

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsPeer getPeer()>();

        $r10 = interfaceinvoke $r8.<org.spongycastle.crypto.tls.TlsPeer: org.spongycastle.crypto.tls.TlsCipher getCipher()>();

        virtualinvoke $r3.<org.spongycastle.crypto.tls.RecordStream: void setPendingConnectionState(org.spongycastle.crypto.tls.TlsCompression,org.spongycastle.crypto.tls.TlsCipher)>($r9, $r10);

        $z0 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean expectSessionTicket>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void sendChangeCipherSpecMessage()>();

     label1:
        return;
    }
    protected void sendCertificateRequestMessage(org.spongycastle.crypto.tls.CertificateRequest) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.CertificateRequest $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateRequest;

        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 13);

        virtualinvoke $r1.<org.spongycastle.crypto.tls.CertificateRequest: void encode(java.io.OutputStream)>(r2);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendCertificateStatusMessage(org.spongycastle.crypto.tls.CertificateStatus) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.CertificateStatus $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.CertificateStatus;

        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 22);

        virtualinvoke $r1.<org.spongycastle.crypto.tls.CertificateStatus: void encode(java.io.OutputStream)>(r2);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendNewSessionTicketMessage(org.spongycastle.crypto.tls.NewSessionTicket) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.NewSessionTicket $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;
        org.spongycastle.crypto.tls.TlsFatalAlert $r3;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: org.spongycastle.crypto.tls.NewSessionTicket;

        if $r1 != null goto label1;

        $r3 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r3.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r3;

     label1:
        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 4);

        virtualinvoke $r1.<org.spongycastle.crypto.tls.NewSessionTicket: void encode(java.io.OutputStream)>(r2);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
    protected void sendServerHelloDoneMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        r1 = newarray (byte)[4];

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,byte[],int)>(14, r1, 0);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint24(int,byte[],int)>(0, r1, 1);

        $i0 = lengthof r1;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void writeHandshakeMessage(byte[],int,int)>(r1, 0, $i0);

        return;
    }
    protected void sendServerHelloMessage() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r1;
        boolean $z0, $z1;
        org.spongycastle.crypto.tls.TlsServer $r2;
        org.spongycastle.crypto.tls.ProtocolVersion $r3, $r5;
        org.spongycastle.crypto.tls.TlsContext $r4;
        org.spongycastle.crypto.tls.TlsFatalAlert $r6;
        org.spongycastle.crypto.tls.RecordStream $r7;
        org.spongycastle.crypto.tls.AbstractTlsContext $r8;
        org.spongycastle.crypto.tls.SecurityParameters $r9, $r16;
        byte[] $r10;
        int $i0;
        int[] $r11;
        short $s1;
        short[] $r12;
        java.util.Hashtable $r13, $r15;
        java.lang.Integer $r14;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $z0 = 1;

        r1 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        specialinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short)>(r0, 2);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsServer: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $r4 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r5 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getClientVersion()>();

        $z1 = virtualinvoke $r3.<org.spongycastle.crypto.tls.ProtocolVersion: boolean isEqualOrEarlierVersionOf(org.spongycastle.crypto.tls.ProtocolVersion)>($r5);

        if $z1 != 0 goto label01;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r6;

     label01:
        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r7.<org.spongycastle.crypto.tls.RecordStream: void setReadVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r3);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r7.<org.spongycastle.crypto.tls.RecordStream: void setWriteVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r3);

        $r7 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.RecordStream recordStream>;

        virtualinvoke $r7.<org.spongycastle.crypto.tls.RecordStream: void setRestrictReadVersion(boolean)>(1);

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.AbstractTlsContext getContextAdmin()>();

        virtualinvoke $r8.<org.spongycastle.crypto.tls.AbstractTlsContext: void setServerVersion(org.spongycastle.crypto.tls.ProtocolVersion)>($r3);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeVersion(org.spongycastle.crypto.tls.ProtocolVersion,java.io.OutputStream)>($r3, r1);

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r10 = $r9.<org.spongycastle.crypto.tls.SecurityParameters: byte[] serverRandom>;

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void write(byte[])>($r10);

        $r10 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r10, r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsServer: int getSelectedCipherSuite()>();

        $r11 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: int[] offeredCipherSuites>;

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(int[],int)>($r11, $i0);

        if $z1 == 0 goto label02;

        if $i0 == 0 goto label02;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.CipherSuite: boolean isSCSV(int)>($i0);

        if $z1 != 0 goto label02;

        $r4 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r3 = interfaceinvoke $r4.<org.spongycastle.crypto.tls.TlsContext: org.spongycastle.crypto.tls.ProtocolVersion getServerVersion()>();

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean isValidCipherSuiteForVersion(int,org.spongycastle.crypto.tls.ProtocolVersion)>($i0, $r3);

        if $z1 != 0 goto label03;

     label02:
        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r6;

     label03:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int cipherSuite> = $i0;

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $s1 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsServer: short getSelectedCompressionMethod()>();

        $r12 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short[] offeredCompressionMethods>;

        $z1 = staticinvoke <org.spongycastle.util.Arrays: boolean contains(short[],short)>($r12, $s1);

        if $z1 != 0 goto label04;

        $r6 = new org.spongycastle.crypto.tls.TlsFatalAlert;

        specialinvoke $r6.<org.spongycastle.crypto.tls.TlsFatalAlert: void <init>(short)>(80);

        throw $r6;

     label04:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: short compressionAlgorithm> = $s1;

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, r1);

        staticinvoke <org.spongycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s1, r1);

        $r2 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsServer tlsServer>;

        $r13 = interfaceinvoke $r2.<org.spongycastle.crypto.tls.TlsServer: java.util.Hashtable getServerExtensions()>();

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions> = $r13;

        $z1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean secure_renegotiation>;

        if $z1 == 0 goto label06;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r14 = <org.spongycastle.crypto.tls.TlsServerProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: byte[] getExtensionData(java.util.Hashtable,java.lang.Integer)>($r13, $r14);

        if $r10 != null goto label11;

        $z1 = 1;

     label05:
        if $z1 == 0 goto label06;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r13 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>($r13);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions> = $r13;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r14 = <org.spongycastle.crypto.tls.TlsServerProtocol: java.lang.Integer EXT_RenegotiationInfo>;

        $r10 = <org.spongycastle.crypto.tls.TlsUtils: byte[] EMPTY_BYTES>;

        $r10 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: byte[] createRenegotiationInfo(byte[])>($r10);

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r10);

     label06:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $z1 = $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean extendedMasterSecret>;

        if $z1 == 0 goto label07;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r13 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable)>($r13);

        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions> = $r13;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: void addExtendedMasterSecretExtension(java.util.Hashtable)>($r13);

     label07:
        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        if $r13 == null goto label10;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasEncryptThenMACExtension(java.util.Hashtable)>($r13);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean encryptThenMAC> = $z1;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable clientExtensions>;

        $r15 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $s1 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: short processMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short)>($r13, $r15, 80);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: short maxFragmentLength> = $s1;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsExtensionsUtils: boolean hasTruncatedHMacExtension(java.util.Hashtable)>($r13);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: boolean truncatedHMac> = $z1;

        $z1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean resumedSession>;

        if $z1 != 0 goto label12;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r14 = <org.spongycastle.crypto.tls.TlsExtensionsUtils: java.lang.Integer EXT_status_request>;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)>($r13, $r14, 80);

        if $z1 == 0 goto label12;

        $z1 = 1;

     label08:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean allowCertificateStatus> = $z1;

        $z1 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean resumedSession>;

        if $z1 != 0 goto label13;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        $r14 = <org.spongycastle.crypto.tls.TlsProtocol: java.lang.Integer EXT_SessionTicket>;

        $z1 = staticinvoke <org.spongycastle.crypto.tls.TlsUtils: boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)>($r13, $r14, 80);

        if $z1 == 0 goto label13;

     label09:
        r0.<org.spongycastle.crypto.tls.TlsServerProtocol: boolean expectSessionTicket> = $z0;

        $r13 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: java.util.Hashtable serverExtensions>;

        staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: void writeExtensions(java.io.OutputStream,java.util.Hashtable)>(r1, $r13);

     label10:
        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r4 = virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.TlsContext getContext()>();

        $r16 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $i0 = virtualinvoke $r16.<org.spongycastle.crypto.tls.SecurityParameters: int getCipherSuite()>();

        $i0 = staticinvoke <org.spongycastle.crypto.tls.TlsServerProtocol: int getPRFAlgorithm(org.spongycastle.crypto.tls.TlsContext,int)>($r4, $i0);

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int prfAlgorithm> = $i0;

        $r9 = r0.<org.spongycastle.crypto.tls.TlsServerProtocol: org.spongycastle.crypto.tls.SecurityParameters securityParameters>;

        $r9.<org.spongycastle.crypto.tls.SecurityParameters: int verifyDataLength> = 12;

        virtualinvoke r0.<org.spongycastle.crypto.tls.TlsServerProtocol: void applyMaxFragmentLengthExtension()>();

        virtualinvoke r1.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;

     label11:
        $z1 = 0;

        goto label05;

     label12:
        $z1 = 0;

        goto label08;

     label13:
        $z0 = 0;

        goto label09;
    }
    protected void sendServerKeyExchangeMessage(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.TlsServerProtocol r0;
        byte[] $r1;
        org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.tls.TlsServerProtocol;

        $r1 := @parameter0: byte[];

        r2 = new org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage;

        $i0 = lengthof $r1;

        specialinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void <init>(org.spongycastle.crypto.tls.TlsProtocol,short,int)>(r0, 12, $i0);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void write(byte[])>($r1);

        virtualinvoke r2.<org.spongycastle.crypto.tls.TlsProtocol$HandshakeMessage: void writeToRecordStream()>();

        return;
    }
