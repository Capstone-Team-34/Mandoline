org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials extends org.spongycastle.crypto.tls.AbstractTlsEncryptionCredentials
protected org.spongycastle.crypto.tls.Certificate certificate
protected org.spongycastle.crypto.tls.TlsContext context
protected org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey
    public void <init>(org.spongycastle.crypto.tls.TlsContext, org.spongycastle.crypto.tls.Certificate, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials r0;
        org.spongycastle.crypto.tls.TlsContext $r1;
        org.spongycastle.crypto.tls.Certificate $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials;

        $r1 := @parameter0: org.spongycastle.crypto.tls.TlsContext;

        $r2 := @parameter1: org.spongycastle.crypto.tls.Certificate;

        $r3 := @parameter2: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        specialinvoke r0.<org.spongycastle.crypto.tls.AbstractTlsEncryptionCredentials: void <init>()>();

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be null");

        throw $r4;

     label1:
        $z0 = virtualinvoke $r2.<org.spongycastle.crypto.tls.Certificate: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'certificate\' cannot be empty");

        throw $r4;

     label2:
        if $r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' cannot be null");

        throw $r4;

     label3:
        $z0 = virtualinvoke $r3.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 != 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'privateKey\' must be private");

        throw $r4;

     label4:
        $z0 = $r3 instanceof org.spongycastle.crypto.params.RSAKeyParameters;

        if $z0 == 0 goto label5;

        r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.tls.TlsContext context> = $r1;

        r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.tls.Certificate certificate> = $r2;

        r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey> = $r3;

        return;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'privateKey\' type not supported: ");

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }
    public byte[] decryptPreMasterSecret(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials r0;
        byte[] $r1;
        org.spongycastle.crypto.tls.TlsContext $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.crypto.params.RSAKeyParameters $r4;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.tls.TlsContext context>;

        $r3 = r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey>;

        $r4 = (org.spongycastle.crypto.params.RSAKeyParameters) $r3;

        $r1 = staticinvoke <org.spongycastle.crypto.tls.TlsRSAUtils: byte[] safeDecryptPreMasterSecret(org.spongycastle.crypto.tls.TlsContext,org.spongycastle.crypto.params.RSAKeyParameters,byte[])>($r2, $r4, $r1);

        return $r1;
    }
    public org.spongycastle.crypto.tls.Certificate getCertificate()
    {
        org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials r0;
        org.spongycastle.crypto.tls.Certificate r1;

        r0 := @this: org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials;

        r1 = r0.<org.spongycastle.crypto.tls.DefaultTlsEncryptionCredentials: org.spongycastle.crypto.tls.Certificate certificate>;

        return r1;
    }
