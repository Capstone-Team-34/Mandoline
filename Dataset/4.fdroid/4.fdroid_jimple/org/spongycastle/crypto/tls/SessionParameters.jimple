org.spongycastle.crypto.tls.SessionParameters extends java.lang.Object
private int cipherSuite
private short compressionAlgorithm
private byte[] encodedServerExtensions
private byte[] masterSecret
private org.spongycastle.crypto.tls.Certificate peerCertificate
private byte[] pskIdentity
private byte[] srpIdentity
    private void <init>(int, short, byte[], org.spongycastle.crypto.tls.Certificate, byte[], byte[], byte[])
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        int $i0;
        short $s1;
        byte[] $r1, $r3, $r4, $r5;
        org.spongycastle.crypto.tls.Certificate $r2;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: org.spongycastle.crypto.tls.Certificate;

        $r3 := @parameter4: byte[];

        $r4 := @parameter5: byte[];

        $r5 := @parameter6: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] pskIdentity> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] srpIdentity> = null;

        r0.<org.spongycastle.crypto.tls.SessionParameters: int cipherSuite> = $i0;

        r0.<org.spongycastle.crypto.tls.SessionParameters: short compressionAlgorithm> = $s1;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] masterSecret> = $r1;

        r0.<org.spongycastle.crypto.tls.SessionParameters: org.spongycastle.crypto.tls.Certificate peerCertificate> = $r2;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] pskIdentity> = $r1;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] srpIdentity> = $r1;

        r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] encodedServerExtensions> = $r5;

        return;
    }
    void <init>(int, short, byte[], org.spongycastle.crypto.tls.Certificate, byte[], byte[], byte[], org.spongycastle.crypto.tls.SessionParameters$1)
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        int $i0;
        short $s1;
        byte[] $r1, $r3, $r4, $r5;
        org.spongycastle.crypto.tls.Certificate $r2;
        org.spongycastle.crypto.tls.SessionParameters$1 $r6;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: org.spongycastle.crypto.tls.Certificate;

        $r3 := @parameter4: byte[];

        $r4 := @parameter5: byte[];

        $r5 := @parameter6: byte[];

        $r6 := @parameter7: org.spongycastle.crypto.tls.SessionParameters$1;

        specialinvoke r0.<org.spongycastle.crypto.tls.SessionParameters: void <init>(int,short,byte[],org.spongycastle.crypto.tls.Certificate,byte[],byte[],byte[])>($i0, $s1, $r1, $r2, $r3, $r4, $r5);

        return;
    }
    public void clear()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        $r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] masterSecret>;

        if $r1 == null goto label1;

        $r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] masterSecret>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

     label1:
        return;
    }
    public org.spongycastle.crypto.tls.SessionParameters copy()
    {
        org.spongycastle.crypto.tls.SessionParameters r0, $r1;
        int $i0;
        short $s1;
        byte[] $r2, $r4, $r5, $r6;
        org.spongycastle.crypto.tls.Certificate $r3;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        $r1 = new org.spongycastle.crypto.tls.SessionParameters;

        $i0 = r0.<org.spongycastle.crypto.tls.SessionParameters: int cipherSuite>;

        $s1 = r0.<org.spongycastle.crypto.tls.SessionParameters: short compressionAlgorithm>;

        $r2 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] masterSecret>;

        $r3 = r0.<org.spongycastle.crypto.tls.SessionParameters: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        $r4 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] pskIdentity>;

        $r5 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] srpIdentity>;

        $r6 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] encodedServerExtensions>;

        specialinvoke $r1.<org.spongycastle.crypto.tls.SessionParameters: void <init>(int,short,byte[],org.spongycastle.crypto.tls.Certificate,byte[],byte[],byte[])>($i0, $s1, $r2, $r3, $r4, $r5, $r6);

        return $r1;
    }
    public int getCipherSuite()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        i0 = r0.<org.spongycastle.crypto.tls.SessionParameters: int cipherSuite>;

        return i0;
    }
    public short getCompressionAlgorithm()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        short s0;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        s0 = r0.<org.spongycastle.crypto.tls.SessionParameters: short compressionAlgorithm>;

        return s0;
    }
    public byte[] getMasterSecret()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] masterSecret>;

        return r1;
    }
    public byte[] getPSKIdentity()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] pskIdentity>;

        return r1;
    }
    public org.spongycastle.crypto.tls.Certificate getPeerCertificate()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        org.spongycastle.crypto.tls.Certificate r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: org.spongycastle.crypto.tls.Certificate peerCertificate>;

        return r1;
    }
    public byte[] getPskIdentity()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] pskIdentity>;

        return r1;
    }
    public byte[] getSRPIdentity()
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        r1 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] srpIdentity>;

        return r1;
    }
    public java.util.Hashtable readServerExtensions() throws java.io.IOException
    {
        org.spongycastle.crypto.tls.SessionParameters r0;
        java.io.ByteArrayInputStream r1;
        java.util.Hashtable $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.tls.SessionParameters;

        $r3 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] encodedServerExtensions>;

        if $r3 != null goto label1;

        return null;

     label1:
        r1 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.spongycastle.crypto.tls.SessionParameters: byte[] encodedServerExtensions>;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r2 = staticinvoke <org.spongycastle.crypto.tls.TlsProtocol: java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)>(r1);

        return $r2;
    }
