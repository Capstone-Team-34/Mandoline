org.spongycastle.crypto.parsers.ECIESPublicKeyParser extends java.lang.Object implements org.spongycastle.crypto.KeyParser
private org.spongycastle.crypto.params.ECDomainParameters ecParams
    public void <init>(org.spongycastle.crypto.params.ECDomainParameters)
    {
        org.spongycastle.crypto.parsers.ECIESPublicKeyParser r0;
        org.spongycastle.crypto.params.ECDomainParameters $r1;

        r0 := @this: org.spongycastle.crypto.parsers.ECIESPublicKeyParser;

        $r1 := @parameter0: org.spongycastle.crypto.params.ECDomainParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: org.spongycastle.crypto.params.ECDomainParameters ecParams> = $r1;

        return;
    }
    public org.spongycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.crypto.parsers.ECIESPublicKeyParser r0;
        java.io.InputStream $r1;
        int $i0, $i1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        org.spongycastle.math.ec.ECCurve $r6;
        byte[] r7;
        byte $b2;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r8;
        org.spongycastle.math.ec.ECPoint $r9;

        r0 := @this: org.spongycastle.crypto.parsers.ECIESPublicKeyParser;

        $r1 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label5;
            case 5: goto label1;
            case 6: goto label5;
            case 7: goto label5;
            default: goto label1;
        };

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sender\'s public key has invalid point encoding 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i0, 16);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Sender\'s public key invalid.");

        throw $r2;

     label3:
        $r5 = r0.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: org.spongycastle.crypto.params.ECDomainParameters ecParams>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i1 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        $i1 = $i1 + 1;

        r7 = newarray (byte)[$i1];

     label4:
        $b2 = (byte) $i0;

        r7[0] = $b2;

        $i0 = lengthof r7;

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>(r7, 1, $i0);

        $r8 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r5 = r0.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: org.spongycastle.crypto.params.ECDomainParameters ecParams>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r9 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>(r7);

        $r5 = r0.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: org.spongycastle.crypto.params.ECDomainParameters ecParams>;

        specialinvoke $r8.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r9, $r5);

        return $r8;

     label5:
        $r5 = r0.<org.spongycastle.crypto.parsers.ECIESPublicKeyParser: org.spongycastle.crypto.params.ECDomainParameters ecParams>;

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i1 = virtualinvoke $r6.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        $i1 = $i1 * 2;

        $i1 = $i1 + 1;

        r7 = newarray (byte)[$i1];

        goto label4;
    }
