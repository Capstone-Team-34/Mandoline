org.spongycastle.crypto.modes.NISTCTSBlockCipher extends org.spongycastle.crypto.BufferedBlockCipher
public static final int CS1
public static final int CS2
public static final int CS3
private final int blockSize
private final int type
    public void <init>(int, org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.modes.CBCBlockCipher $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.BufferedBlockCipher: void <init>()>();

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type> = $i0;

        $r2 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r2.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r2;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int blockSize> = $i0;

        $i0 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int blockSize>;

        $i0 = $i0 * 2;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf> = $r3;

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff> = 0;

        return;
    }
    public int doFinal(byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException, org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        byte[] $r1, r2, r5, $r6;
        int $i0, i1, $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.BlockCipher $r4;
        boolean $z0;
        org.spongycastle.crypto.modes.CBCBlockCipher $r7;
        byte $b6, $b7;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        i1 = i1 + $i0;

        $i2 = lengthof $r1;

        if i1 <= $i2 goto label01;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer to small in doFinal");

        throw $r3;

     label01:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        i1 = i1 - $i2;

        r2 = newarray (byte)[$i2];

        $z0 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label08;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        if $i3 >= $i2 goto label02;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("need at least one block of input for NISTCTS");

        throw $r3;

     label02:
        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        if $i3 <= $i2 goto label07;

        r5 = newarray (byte)[$i2];

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type>;

        if $i3 == 2 goto label03;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type>;

        if $i3 != 3 goto label06;

     label03:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r2, 0);

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i2, r5, 0, i1);

        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r5, 0, r5, 0);

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type>;

        if $i3 != 2 goto label05;

        if i1 != $i2 goto label05;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, $i2);

        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i0, i1);

     label04:
        $i0 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        virtualinvoke r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: void reset()>();

        return $i0;

     label05:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i0, $i2);

        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, i1);

        goto label04;

     label06:
        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i2);

        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, 0, r2, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, i1);

        r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i3 = $i3 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, r5, 0, i1);

        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r5, 0, r5, 0);

        $i0 = $i0 + i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i0, $i2);

        goto label04;

     label07:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r5, 0, r2, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, $i2);

        goto label04;

     label08:
        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        if $i3 >= $i2 goto label09;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("need at least one block of input for CTS");

        throw $r3;

     label09:
        r5 = newarray (byte)[$i2];

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        if $i3 <= $i2 goto label19;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type>;

        if $i3 == 3 goto label10;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int type>;

        if $i3 != 2 goto label15;

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i3 = lengthof $r6;

        $i4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i3 = $i3 - $i4;

        $i3 = $i3 % $i2;

        if $i3 == 0 goto label15;

     label10:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $z0 = $r4 instanceof org.spongycastle.crypto.modes.CBCBlockCipher;

        if $z0 == 0 goto label13;

        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r7 = (org.spongycastle.crypto.modes.CBCBlockCipher) $r4;

        $r4 = virtualinvoke $r7.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r2, 0);

     label11:
        $i3 = $i2;

     label12:
        $i4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        if $i3 == $i4 goto label14;

        $i4 = $i3 - $i2;

        $i5 = $i3 - $i2;

        $b6 = r2[$i5];

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $b7 = $r6[$i3];

        $i5 = $b6 ^ $b7;

        $b6 = (byte) $i5;

        r5[$i4] = $b6;

        $i3 = $i3 + 1;

        goto label12;

     label13:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r2, 0);

        goto label11;

     label14:
        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i2, r2, 0, i1);

        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, 0, $r1, $i0);

        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i0, i1);

        goto label04;

     label15:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r7 = (org.spongycastle.crypto.modes.CBCBlockCipher) $r4;

        $r4 = virtualinvoke $r7.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i3 = $i3 - $i2;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, $i3, r5, 0);

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i2);

        if i1 == $i2 goto label16;

        $i3 = $i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i1, r2, i1, $i3);

     label16:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, 0, r2, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, $i2);

        $i3 = 0;

     label17:
        if $i3 == i1 goto label18;

        $b6 = r5[$i3];

        r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $b7 = r2[$i3];

        $i4 = $b6 ^ $b7;

        $b6 = (byte) $i4;

        r5[$i3] = $b6;

        $i3 = $i3 + 1;

        goto label17;

     label18:
        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, $i0, i1);

        goto label04;

     label19:
        $r4 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r5, 0, r2, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, $i2);

        goto label04;
    }
    public int getOutputSize(int)
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public int getUpdateOutputSize(int)
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        int $i0, i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i0 = $i0 + i1;

        $r1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r1;

        i1 = $i0 % i1;

        if i1 != 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r1;

        $i0 = $i0 - i1;

        return $i0;

     label1:
        $i0 = $i0 - i1;

        return $i0;
    }
    public int processByte(byte, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        byte $b0;
        byte[] $r1, $r2;
        int $i1, i2, $i3, $i4;
        org.spongycastle.crypto.BlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        i2 = 0;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i4 = lengthof $r2;

        if $i3 != $i4 goto label1;

        $r3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i2 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r2, 0, $r1, $i1);

        $r1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int blockSize>;

        $r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i3, $r2, 0, $i1);

        $i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int blockSize>;

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff> = $i1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i3 = $i1 + 1;

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff> = $i3;

        $r1[$i1] = $b0;

        return i2;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.NISTCTSBlockCipher r0;
        byte[] $r1, $r2, $r5, $r7;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.BlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.modes.NISTCTSBlockCipher;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i0 := @parameter4: int;

        if $i3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        $i4 = virtualinvoke r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int getBlockSize()>();

        $i5 = virtualinvoke r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int getUpdateOutputSize(int)>($i3);

        if $i5 <= 0 goto label2;

        $i5 = $i0 + $i5;

        i1 = lengthof $r2;

        if $i5 <= i1 goto label2;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label2:
        $i5 = 0;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r5;

        $i6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        i1 = i1 - $i6;

        if $i3 <= i1 goto label4;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, $i5, i1);

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, $i0);

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $r7 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r7, 0, $i4);

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff> = $i4;

        $i3 = $i3 - i1;

        $i2 = $i2 + i1;

     label3:
        if $i3 <= $i4 goto label4;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i1 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, i1, $i4);

        $r6 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        i1 = $i0 + $i5;

        i1 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, i1);

        $i5 = $i5 + i1;

        $r5 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $r7 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r7, 0, $i4);

        $i3 = $i3 - $i4;

        $i2 = $i2 + $i4;

        goto label3;

     label4:
        $r2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: byte[] buf>;

        $i0 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i0, $i3);

        $i2 = r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff>;

        $i2 = $i2 + $i3;

        r0.<org.spongycastle.crypto.modes.NISTCTSBlockCipher: int bufOff> = $i2;

        return $i5;
    }
