org.spongycastle.crypto.modes.CBCBlockCipher extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private byte[] IV
private int blockSize
private byte[] cbcNextV
private byte[] cbcV
private org.spongycastle.crypto.BlockCipher cipher
private boolean encrypting
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = null;

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize> = $i0;

        $i0 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] IV> = $r2;

        $i0 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV> = $r2;

        $i0 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcNextV> = $r2;

        return;
    }
    private int decryptBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        byte[] $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3, $i6;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.BlockCipher $r5;
        byte $b4, $b5;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        $i2 = $i2 + $i0;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcNextV>;

        $i2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r4, 0, $i2);

        $r5 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        $i2 = 0;

     label2:
        $i3 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        if $i2 >= $i3 goto label3;

        $i3 = $i1 + $i2;

        $b4 = $r2[$i3];

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $b5 = $r1[$i2];

        $i6 = $b4 ^ $b5;

        $b4 = (byte) $i6;

        $r2[$i3] = $b4;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $r2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcNextV>;

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV> = $r2;

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcNextV> = $r1;

        return $i0;
    }
    private int encryptBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        byte[] $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.DataLengthException $r3;
        byte $b4, $b5;
        org.spongycastle.crypto.BlockCipher $r5;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        $i2 = $i2 + $i0;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label1:
        $i2 = 0;

     label2:
        $i3 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        if $i2 >= $i3 goto label3;

        $r4 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $b4 = $r4[$i2];

        $i3 = $i0 + $i2;

        $b5 = $r1[$i3];

        $i3 = $b4 ^ $b5;

        $b4 = (byte) $i3;

        $r4[$i2] = $b4;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r5 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, 0, $r2, $i1);

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $r4 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r1, 0, $i2);

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/CBC");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        return $i0;
    }
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        org.spongycastle.crypto.BlockCipher r1;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        boolean $z0, z1, $z2;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.ParametersWithIV r2;
        byte[] $r3, $r5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.crypto.BlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        z1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: boolean encrypting>;

        r0.<org.spongycastle.crypto.modes.CBCBlockCipher: boolean encrypting> = $z0;

        $z2 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z2 == 0 goto label3;

        r2 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        $i0 = lengthof $r3;

        $i1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int blockSize>;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialisation vector must be the same length as block size");

        throw $r4;

     label1:
        $r5 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] IV>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, 0, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.modes.CBCBlockCipher: void reset()>();

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        if $r1 == null goto label2;

        $r6 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;

     label2:
        if z1 == $z0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot change encrypting state without providing key.");

        throw $r4;

     label3:
        virtualinvoke r0.<org.spongycastle.crypto.modes.CBCBlockCipher: void reset()>();

        if $r1 == null goto label4;

        $r6 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        return;

     label4:
        if z1 == $z0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot change encrypting state without providing key.");

        throw $r4;

     label5:
        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: boolean encrypting>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.modes.CBCBlockCipher: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.modes.CBCBlockCipher r0;
        byte[] $r1, $r2, $r3;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.modes.CBCBlockCipher;

        $r2 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] IV>;

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcV>;

        $r3 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] IV>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        $r1 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: byte[] cbcNextV>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r4 = r0.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: void reset()>();

        return;
    }
