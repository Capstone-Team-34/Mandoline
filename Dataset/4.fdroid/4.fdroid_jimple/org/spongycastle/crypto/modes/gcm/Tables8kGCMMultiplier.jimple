org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier extends java.lang.Object implements org.spongycastle.crypto.modes.gcm.GCMMultiplier
private byte[] H
private int[][][] M
    public void <init>()
    {
        org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier r0;

        r0 := @this: org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void init(byte[])
    {
        org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier r0;
        byte[] $r1, $r6;
        int[][][] $r2;
        int[] $r3, $r8, $r9;
        java.lang.Class $r4;
        java.lang.Object $r5;
        int[][] $r7;
        int i0, $i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        if $r2 != null goto label03;

        $r3 = newarray (int)[3];

        $r3[0] = 32;

        $r3[1] = 16;

        $r3[2] = 4;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r2 = (int[][][]) $r5;

        r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M> = $r2;

     label01:
        $r6 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: byte[] H> = $r6;

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[1];

        $r3 = $r7[8];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void asInts(byte[],int[])>($r1, $r3);

        i0 = 4;

     label02:
        if i0 < 1 goto label04;

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[1];

        $i1 = i0 + i0;

        $r3 = $r7[$i1];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[1];

        $r8 = $r7[i0];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiplyP(int[],int[])>($r3, $r8);

        i0 = i0 >> 1;

        goto label02;

     label03:
        $r6 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: byte[] H>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(byte[],byte[])>($r6, $r1);

        if $z0 == 0 goto label01;

        return;

     label04:
        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[1];

        $r3 = $r7[1];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[0];

        $r8 = $r7[8];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiplyP(int[],int[])>($r3, $r8);

        i0 = 4;

     label05:
        if i0 < 1 goto label06;

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[0];

        $i1 = i0 + i0;

        $r3 = $r7[$i1];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[0];

        $r8 = $r7[i0];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiplyP(int[],int[])>($r3, $r8);

        i0 = i0 >> 1;

        goto label05;

     label06:
        i0 = 0;

     label07:
        $i1 = 2;

     label08:
        if $i1 >= 16 goto label11;

        i2 = 1;

     label09:
        if i2 >= $i1 goto label10;

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[i0];

        $r3 = $r7[$i1];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[i0];

        $r8 = $r7[i2];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[i0];

        $i3 = $i1 + i2;

        $r9 = $r7[$i3];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void xor(int[],int[],int[])>($r3, $r8, $r9);

        i2 = i2 + 1;

        goto label09;

     label10:
        $i1 = $i1 + $i1;

        goto label08;

     label11:
        i0 = i0 + 1;

        if i0 == 32 goto label13;

        if i0 <= 1 goto label07;

        $i1 = 8;

     label12:
        if $i1 <= 0 goto label07;

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        i2 = i0 + -2;

        $r7 = $r2[i2];

        $r3 = $r7[$i1];

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $r7 = $r2[i0];

        $r8 = $r7[$i1];

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiplyP8(int[],int[])>($r3, $r8);

        $i1 = $i1 >> 1;

        goto label12;

     label13:
        return;
    }
    public void multiplyH(byte[])
    {
        org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier r0;
        byte[] $r1;
        int[] r2, r5;
        int i0, $i1, $i3;
        int[][][] $r3;
        int[][] $r4;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier;

        $r1 := @parameter0: byte[];

        r2 = newarray (int)[4];

        i0 = 15;

     label1:
        if i0 < 0 goto label2;

        $r3 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $i1 = i0 + i0;

        $r4 = $r3[$i1];

        $b2 = $r1[i0];

        $i1 = $b2 & 15;

        r5 = $r4[$i1];

        $i1 = r2[0];

        $i3 = r5[0];

        $i1 = $i1 ^ $i3;

        r2[0] = $i1;

        $i1 = r2[1];

        $i3 = r5[1];

        $i1 = $i1 ^ $i3;

        r2[1] = $i1;

        $i1 = r2[2];

        $i3 = r5[2];

        $i1 = $i1 ^ $i3;

        r2[2] = $i1;

        $i1 = r2[3];

        $i3 = r5[3];

        $i1 = $i1 ^ $i3;

        r2[3] = $i1;

        $r3 = r0.<org.spongycastle.crypto.modes.gcm.Tables8kGCMMultiplier: int[][][] M>;

        $i1 = i0 + i0;

        $i1 = $i1 + 1;

        $r4 = $r3[$i1];

        $b2 = $r1[i0];

        $i1 = $b2 & 240;

        $i1 = $i1 >>> 4;

        r5 = $r4[$i1];

        $i1 = r2[0];

        $i3 = r5[0];

        $i1 = $i1 ^ $i3;

        r2[0] = $i1;

        $i1 = r2[1];

        $i3 = r5[1];

        $i1 = $i1 ^ $i3;

        r2[1] = $i1;

        $i1 = r2[2];

        $i3 = r5[2];

        $i1 = $i1 ^ $i3;

        r2[2] = $i1;

        $i1 = r2[3];

        $i3 = r5[3];

        $i1 = $i1 ^ $i3;

        r2[3] = $i1;

        i0 = i0 + -1;

        goto label1;

     label2:
        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int[],byte[],int)>(r2, $r1, 0);

        return;
    }
