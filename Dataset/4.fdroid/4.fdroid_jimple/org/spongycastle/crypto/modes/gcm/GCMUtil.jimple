org.spongycastle.crypto.modes.gcm.GCMUtil extends java.lang.Object
private static final int E1
private static final long E1L
private static final int[] LOOKUP
    static void <clinit>()
    {
        int[] $r0;

        $r0 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] generateLookup()>();

        <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] LOOKUP> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.crypto.modes.gcm.GCMUtil r0;

        r0 := @this: org.spongycastle.crypto.modes.gcm.GCMUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void asBytes(int[], byte[])
    {
        int[] $r0;
        byte[] $r1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: byte[];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int[],byte[],int)>($r0, $r1, 0);

        return;
    }
    public static void asBytes(long[], byte[])
    {
        long[] $r0;
        byte[] $r1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: byte[];

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long[],byte[],int)>($r0, $r1, 0);

        return;
    }
    public static byte[] asBytes(int[])
    {
        int[] $r0;
        byte[] r1;

        $r0 := @parameter0: int[];

        r1 = newarray (byte)[16];

        staticinvoke <org.spongycastle.util.Pack: void intToBigEndian(int[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static byte[] asBytes(long[])
    {
        long[] $r0;
        byte[] r1;

        $r0 := @parameter0: long[];

        r1 = newarray (byte)[16];

        staticinvoke <org.spongycastle.util.Pack: void longToBigEndian(long[],byte[],int)>($r0, r1, 0);

        return r1;
    }
    public static void asInts(byte[], int[])
    {
        byte[] $r0;
        int[] $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: int[];

        staticinvoke <org.spongycastle.util.Pack: void bigEndianToInt(byte[],int,int[])>($r0, 0, $r1);

        return;
    }
    public static int[] asInts(byte[])
    {
        byte[] $r0;
        int[] r1;

        $r0 := @parameter0: byte[];

        r1 = newarray (int)[4];

        staticinvoke <org.spongycastle.util.Pack: void bigEndianToInt(byte[],int,int[])>($r0, 0, r1);

        return r1;
    }
    public static void asLongs(byte[], long[])
    {
        byte[] $r0;
        long[] $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: long[];

        staticinvoke <org.spongycastle.util.Pack: void bigEndianToLong(byte[],int,long[])>($r0, 0, $r1);

        return;
    }
    public static long[] asLongs(byte[])
    {
        byte[] $r0;
        long[] r1;

        $r0 := @parameter0: byte[];

        r1 = newarray (long)[2];

        staticinvoke <org.spongycastle.util.Pack: void bigEndianToLong(byte[],int,long[])>($r0, 0, r1);

        return r1;
    }
    private static int[] generateLookup()
    {
        int[] r0;
        int $i0, i1, i2, i3;

        r0 = newarray (int)[256];

        i1 = 0;

     label1:
        if i1 >= 256 goto label5;

        i2 = 0;

        i3 = 7;

     label2:
        if i3 < 0 goto label4;

        $i0 = 1 << i3;

        $i0 = $i0 & i1;

        if $i0 == 0 goto label3;

        $i0 = 7 - i3;

        $i0 = -520093696 >>> $i0;

        i2 = i2 ^ $i0;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        r0[i1] = i2;

        i1 = i1 + 1;

        goto label1;

     label5:
        return r0;
    }
    public static void multiply(byte[], byte[])
    {
        byte[] $r0, $r1;
        int[] $r2, $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] asInts(byte[])>($r0);

        $r3 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] asInts(byte[])>($r1);

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiply(int[],int[])>($r2, $r3);

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void asBytes(int[],byte[])>($r2, $r0);

        return;
    }
    public static void multiply(int[], int[])
    {
        int[] $r0, $r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i1 = $r0[0];

        i2 = $r0[1];

        i3 = $r0[2];

        i4 = $r0[3];

        i5 = 0;

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

     label1:
        if i9 >= 4 goto label4;

        i10 = $r1[i9];

        i11 = 0;

     label2:
        if i11 >= 32 goto label3;

        i0 = i10 >> 31;

        i10 = i10 << 1;

        $i12 = i1 & i0;

        i5 = i5 ^ $i12;

        $i12 = i2 & i0;

        i6 = i6 ^ $i12;

        $i12 = i3 & i0;

        i7 = i7 ^ $i12;

        i0 = i4 & i0;

        i8 = i8 ^ i0;

        i0 = i4 << 31;

        i0 = i0 >> 8;

        i4 = i4 >>> 1;

        $i12 = i3 << 31;

        i4 = i4 | $i12;

        i3 = i3 >>> 1;

        $i12 = i2 << 31;

        i3 = i3 | $i12;

        i2 = i2 >>> 1;

        $i12 = i1 << 31;

        i2 = i2 | $i12;

        i1 = i1 >>> 1;

        i0 = -520093696 & i0;

        i1 = i1 ^ i0;

        i11 = i11 + 1;

        goto label2;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        $r0[0] = i5;

        $r0[1] = i6;

        $r0[2] = i7;

        $r0[3] = i8;

        return;
    }
    public static void multiply(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, l2, l3, l4, l6, $l8;
        int i5, i7;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l1 = $r0[0];

        l2 = $r0[1];

        l3 = 0L;

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= 2 goto label4;

        l6 = $r1[i5];

        i7 = 0;

     label2:
        if i7 >= 64 goto label3;

        l0 = l6 >> 63;

        l6 = l6 << 1;

        $l8 = l1 & l0;

        l3 = l3 ^ $l8;

        l0 = l2 & l0;

        l4 = l4 ^ l0;

        l0 = l2 << 63;

        l0 = l0 >> 8;

        l2 = l2 >>> 1;

        $l8 = l1 << 63;

        l2 = l2 | $l8;

        l1 = l1 >>> 1;

        l0 = -2233785415175766016L & l0;

        l1 = l1 ^ l0;

        i7 = i7 + 1;

        goto label2;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $r0[0] = l3;

        $r0[1] = l4;

        return;
    }
    public static void multiplyP(int[])
    {
        int[] $r0;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $i1 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int shiftRight(int[])>($r0);

        i0 = $i1 >> 8;

        $i1 = $r0[0];

        i0 = -520093696 & i0;

        $i1 = $i1 ^ i0;

        $r0[0] = $i1;

        return;
    }
    public static void multiplyP(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i1 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int shiftRight(int[],int[])>($r0, $r1);

        i0 = $i1 >> 8;

        $i1 = $r1[0];

        i0 = -520093696 & i0;

        $i1 = $i1 ^ i0;

        $r1[0] = $i1;

        return;
    }
    public static void multiplyP8(int[])
    {
        int[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int shiftRightN(int[],int)>($r0, 8);

        $i1 = $r0[0];

        $r1 = <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] LOOKUP>;

        $i0 = $i0 >>> 24;

        $i0 = $r1[$i0];

        $i1 = $i1 ^ $i0;

        $r0[0] = $i1;

        return;
    }
    public static void multiplyP8(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int shiftRightN(int[],int,int[])>($r0, 8, $r1);

        $i1 = $r1[0];

        $r0 = <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] LOOKUP>;

        $i0 = $i0 >>> 24;

        $i0 = $r0[$i0];

        $i1 = $i1 ^ $i0;

        $r1[0] = $i1;

        return;
    }
    public static byte[] oneAsBytes()
    {
        byte[] r0;

        r0 = newarray (byte)[16];

        r0[0] = -128;

        return r0;
    }
    public static int[] oneAsInts()
    {
        int[] r0;

        r0 = newarray (int)[4];

        r0[0] = -2147483648;

        return r0;
    }
    public static long[] oneAsLongs()
    {
        long[] r0;

        r0 = newarray (long)[2];

        r0[0] = -9223372036854775808L;

        return r0;
    }
    static int shiftRight(int[])
    {
        int[] $r0;
        int i0, $i1, $i2;

        $r0 := @parameter0: int[];

        i0 = $r0[0];

        $i1 = i0 >>> 1;

        $r0[0] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[1];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r0[1] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[2];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r0[2] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[3];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r0[3] = $i1;

        i0 = i0 << 31;

        return i0;
    }
    static int shiftRight(int[], int[])
    {
        int[] $r0, $r1;
        int i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        i0 = $r0[0];

        $i1 = i0 >>> 1;

        $r1[0] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[1];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r1[1] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[2];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r1[2] = $i1;

        $i1 = i0 << 31;

        i0 = $r0[3];

        $i2 = i0 >>> 1;

        $i1 = $i2 | $i1;

        $r1[3] = $i1;

        i0 = i0 << 31;

        return i0;
    }
    static long shiftRight(long[])
    {
        long[] $r0;
        long l0, l1, $l2;

        $r0 := @parameter0: long[];

        l1 = $r0[0];

        l0 = l1 >>> 1;

        $r0[0] = l0;

        l0 = l1 << 63;

        l1 = $r0[1];

        $l2 = l1 >>> 1;

        l0 = $l2 | l0;

        $r0[1] = l0;

        l1 = l1 << 63;

        return l1;
    }
    static long shiftRight(long[], long[])
    {
        long[] $r0, $r1;
        long l0, l1, $l2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        l1 = $r0[0];

        l0 = l1 >>> 1;

        $r1[0] = l0;

        l0 = l1 << 63;

        l1 = $r0[1];

        $l2 = l1 >>> 1;

        l0 = $l2 | l0;

        $r1[1] = l0;

        l1 = l1 << 63;

        return l1;
    }
    static int shiftRightN(int[], int)
    {
        int[] $r0;
        int $i0, i1, i2, $i3, $i4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        i2 = $r0[0];

        i1 = 32 - $i0;

        $i3 = i2 >>> $i0;

        $r0[0] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[1];

        $i4 = i2 >>> $i0;

        $i3 = $i4 | $i3;

        $r0[1] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[2];

        $i4 = i2 >>> $i0;

        $i3 = $i4 | $i3;

        $r0[2] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[3];

        $i0 = i2 >>> $i0;

        $i0 = $i0 | $i3;

        $r0[3] = $i0;

        $i0 = i2 << i1;

        return $i0;
    }
    static int shiftRightN(int[], int, int[])
    {
        int[] $r0, $r1;
        int $i0, i1, i2, $i3, $i4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        i2 = $r0[0];

        i1 = 32 - $i0;

        $i3 = i2 >>> $i0;

        $r1[0] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[1];

        $i4 = i2 >>> $i0;

        $i3 = $i4 | $i3;

        $r1[1] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[2];

        $i4 = i2 >>> $i0;

        $i3 = $i4 | $i3;

        $r1[2] = $i3;

        $i3 = i2 << i1;

        i2 = $r0[3];

        $i0 = i2 >>> $i0;

        $i0 = $i0 | $i3;

        $r1[3] = $i0;

        $i0 = i2 << i1;

        return $i0;
    }
    public static void xor(byte[], byte[])
    {
        byte[] $r0, $r1;
        int i0, $i3;
        byte $b1, $b2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        i0 = 0;

     label1:
        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r0[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r0[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r0[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r0[i0] = $b1;

        i0 = i0 + 1;

        if i0 < 16 goto label1;

        return;
    }
    public static void xor(byte[], byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i3;
        byte $b2, $b4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

     label1:
        $i1 = $i1 + -1;

        if $i1 < 0 goto label2;

        $b2 = $r0[$i1];

        $i3 = $i0 + $i1;

        $b4 = $r1[$i3];

        $i3 = $b2 ^ $b4;

        $b2 = (byte) $i3;

        $r0[$i1] = $b2;

        goto label1;

     label2:
        return;
    }
    public static void xor(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int i0, $i3;
        byte $b1, $b2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        i0 = 0;

     label1:
        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r2[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r2[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r2[i0] = $b1;

        i0 = i0 + 1;

        $b1 = $r0[i0];

        $b2 = $r1[i0];

        $i3 = $b1 ^ $b2;

        $b1 = (byte) $i3;

        $r2[i0] = $b1;

        i0 = i0 + 1;

        if i0 < 16 goto label1;

        return;
    }
    public static void xor(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = $r0[0];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        $r0[0] = $i0;

        $i0 = $r0[1];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        $r0[1] = $i0;

        $i0 = $r0[2];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        $r0[2] = $i0;

        $i0 = $r0[3];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        $r0[3] = $i0;

        return;
    }
    public static void xor(int[], int[], int[])
    {
        int[] $r0, $r1, $r2;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = $r0[0];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        $r2[0] = $i0;

        $i0 = $r0[1];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        $r2[1] = $i0;

        $i0 = $r0[2];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        $r2[2] = $i0;

        $i0 = $r0[3];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        $r2[3] = $i0;

        return;
    }
    public static void xor(long[], long[])
    {
        long[] $r0, $r1;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r0[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r0[1] = $l0;

        return;
    }
    public static void xor(long[], long[], long[])
    {
        long[] $r0, $r1, $r2;
        long $l0, $l1;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: long[];

        $r2 := @parameter2: long[];

        $l0 = $r0[0];

        $l1 = $r1[0];

        $l0 = $l0 ^ $l1;

        $r2[0] = $l0;

        $l0 = $r0[1];

        $l1 = $r1[1];

        $l0 = $l0 ^ $l1;

        $r2[1] = $l0;

        return;
    }
