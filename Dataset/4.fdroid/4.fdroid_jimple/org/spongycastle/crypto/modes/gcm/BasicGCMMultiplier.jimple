org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier extends java.lang.Object implements org.spongycastle.crypto.modes.gcm.GCMMultiplier
private int[] H
    public void <init>()
    {
        org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier r0;

        r0 := @this: org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void init(byte[])
    {
        org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier r0;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] asInts(byte[])>($r1);

        r0.<org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier: int[] H> = $r2;

        return;
    }
    public void multiplyH(byte[])
    {
        org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier r0;
        byte[] $r1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier;

        $r1 := @parameter0: byte[];

        $r3 = staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: int[] asInts(byte[])>($r1);

        $r2 = r0.<org.spongycastle.crypto.modes.gcm.BasicGCMMultiplier: int[] H>;

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void multiply(int[],int[])>($r3, $r2);

        staticinvoke <org.spongycastle.crypto.modes.gcm.GCMUtil: void asBytes(int[],byte[])>($r3, $r1);

        return;
    }
