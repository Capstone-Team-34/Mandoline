org.spongycastle.crypto.modes.CCMBlockCipher extends java.lang.Object implements org.spongycastle.crypto.modes.AEADBlockCipher
private org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText
private int blockSize
private org.spongycastle.crypto.BlockCipher cipher
private org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data
private boolean forEncryption
private byte[] initialAssociatedText
private org.spongycastle.crypto.CipherParameters keyParam
private byte[] macBlock
private int macSize
private byte[] nonce
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r2;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream;

        specialinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void <init>(org.spongycastle.crypto.modes.CCMBlockCipher)>(r0);

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText> = $r2;

        $r2 = new org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream;

        specialinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void <init>(org.spongycastle.crypto.modes.CCMBlockCipher)>(r0);

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data> = $r2;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize> = $i0;

        $i0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock> = $r3;

        $i0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        if $i0 == 16 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cipher required with a block size of 16.");

        throw $r4;

     label1:
        return;
    }
    private int calculateMac(byte[], int, int, byte[])
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1, $r2, r3, $r7, $r8;
        int $i0, $i1, $i2, i4, $i5, $i6;
        org.spongycastle.crypto.macs.CBCBlockCipherMac r4;
        org.spongycastle.crypto.BlockCipher $r5;
        org.spongycastle.crypto.CipherParameters $r6;
        boolean $z0;
        byte $b3;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r9;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        r4 = new org.spongycastle.crypto.macs.CBCBlockCipherMac;

        $r5 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i2 = $i2 * 8;

        specialinvoke r4.<org.spongycastle.crypto.macs.CBCBlockCipherMac: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r5, $i2);

        $r6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.CipherParameters keyParam>;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r6);

        r3 = newarray (byte)[16];

        $z0 = specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean hasAssociatedText()>();

        if $z0 == 0 goto label1;

        $b3 = r3[0];

        $i2 = $b3 | 64;

        $b3 = (byte) $i2;

        r3[0] = $b3;

     label1:
        $b3 = r3[0];

        $i2 = interfaceinvoke r4.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $i2 = $i2 + -2;

        $i2 = $i2 / 2;

        $i2 = $i2 & 7;

        $i2 = $i2 << 3;

        $i2 = $b3 | $i2;

        $b3 = (byte) $i2;

        r3[0] = $b3;

        $b3 = r3[0];

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i2 = lengthof $r7;

        $i2 = 15 - $i2;

        $i2 = $i2 + -1;

        $i2 = $i2 & 7;

        $i2 = $b3 | $i2;

        $b3 = (byte) $i2;

        r3[0] = $b3;

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $r8 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i2 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r3, 1, $i2);

        $i2 = $i1;

        i4 = 1;

     label2:
        if $i2 <= 0 goto label3;

        $i5 = lengthof r3;

        $i5 = $i5 - i4;

        $i6 = $i2 & 255;

        $b3 = (byte) $i6;

        r3[$i5] = $b3;

        $i2 = $i2 >>> 8;

        i4 = i4 + 1;

        goto label2;

     label3:
        $i2 = lengthof r3;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r3, 0, $i2);

        $z0 = specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean hasAssociatedText()>();

        if $z0 == 0 goto label9;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int getAssociatedTextLength()>();

        if $i2 >= 65280 goto label8;

        i4 = $i2 >> 8;

        $b3 = (byte) i4;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = (byte) $i2;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = 2;

     label4:
        r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText>;

        if r3 == null goto label5;

        r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText>;

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText>;

        i4 = lengthof $r7;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r3, 0, i4);

     label5:
        $r9 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        i4 = virtualinvoke $r9.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: int size()>();

        if i4 <= 0 goto label6;

        $r9 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        r3 = virtualinvoke $r9.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: byte[] getBuffer()>();

        $r9 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        i4 = virtualinvoke $r9.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: int size()>();

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>(r3, 0, i4);

     label6:
        $i2 = $b3 + $i2;

        $i2 = $i2 % 16;

        if $i2 == 0 goto label9;

     label7:
        if $i2 == 16 goto label9;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>(0);

        $i2 = $i2 + 1;

        goto label7;

     label8:
        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>(-1);

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>(-2);

        i4 = $i2 >> 24;

        $b3 = (byte) i4;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        i4 = $i2 >> 16;

        $b3 = (byte) i4;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        i4 = $i2 >> 8;

        $b3 = (byte) i4;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = (byte) $i2;

        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = 6;

        goto label4;

     label9:
        interfaceinvoke r4.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        $i0 = interfaceinvoke r4.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r2, 0);

        return $i0;
    }
    private int getAssociatedTextLength()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        int $i0, $i1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: int size()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText>;

        if $r2 != null goto label2;

        $i1 = 0;

     label1:
        $i0 = $i1 + $i0;

        return $i0;

     label2:
        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText>;

        $i1 = lengthof $r2;

        goto label1;
    }
    private boolean hasAssociatedText()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int getAssociatedTextLength()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int doFinal(byte[], int) throws java.lang.IllegalStateException, org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1, $r3;
        int $i0, $i1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        $r3 = virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: byte[] getBuffer()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        $i1 = virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: int size()>();

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int processPacket(byte[],int,int,byte[],int)>($r3, 0, $i1, $r1, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: void reset()>();

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/CCM");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public byte[] getMac()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $i0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public int getOutputSize(int)
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        int $i0, $i1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        $i1 = virtualinvoke $r1.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: int size()>();

        $i0 = $i0 + $i1;

        $z0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i0 = $i1 + $i0;

        return $i0;

     label1:
        $i1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        if $i0 >= $i1 goto label2;

        return 0;

     label2:
        $i1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i0 = $i0 - $i1;

        return $i0;
    }
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        org.spongycastle.crypto.BlockCipher r1;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        r1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        return r1;
    }
    public int getUpdateOutputSize(int)
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $i0 := @parameter0: int;

        return 0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.params.AEADParameters r2;
        byte[] $r3;
        int $i0;
        java.lang.Object r4;
        org.spongycastle.crypto.params.ParametersWithIV r5;
        java.lang.StringBuilder $r6, $r10;
        java.lang.Class $r7;
        java.lang.String $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean forEncryption> = $z0;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.AEADParameters;

        if $z0 == 0 goto label4;

        r2 = (org.spongycastle.crypto.params.AEADParameters) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.AEADParameters: byte[] getNonce()>();

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce> = $r3;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.AEADParameters: byte[] getAssociatedText()>();

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText> = $r3;

        $i0 = virtualinvoke r2.<org.spongycastle.crypto.params.AEADParameters: int getMacSize()>();

        $i0 = $i0 / 8;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize> = $i0;

        r4 = virtualinvoke r2.<org.spongycastle.crypto.params.AEADParameters: org.spongycastle.crypto.params.KeyParameter getKey()>();

     label1:
        if r4 == null goto label2;

        $r1 = (org.spongycastle.crypto.CipherParameters) r4;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.CipherParameters keyParam> = $r1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        if $r3 == null goto label3;

        $r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i0 = lengthof $r3;

        if $i0 < 7 goto label3;

        $r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $i0 = lengthof $r3;

        if $i0 <= 13 goto label6;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nonce must have length from 7 to 13 octets");

        throw $r9;

     label4:
        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label5;

        r5 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r3 = virtualinvoke r5.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce> = $r3;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] initialAssociatedText> = null;

        $r3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i0 = lengthof $r3;

        $i0 = $i0 / 2;

        r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize> = $i0;

        r4 = virtualinvoke r5.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        goto label1;

     label5:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameters passed to CCM: ");

        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r9;

     label6:
        virtualinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: void reset()>();

        return;
    }
    public void processAADByte(byte)
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte $b0;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r1;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        virtualinvoke $r1.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void write(int)>($b0);

        return;
    }
    public void processAADBytes(byte[], int, int)
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public int processByte(byte, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte $b0;
        byte[] $r1;
        int $i1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void write(int)>($b0);

        return 0;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r4;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i2 = lengthof $r1;

        $i3 = $i0 + $i1;

        if $i2 >= $i3 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Input buffer too short");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        virtualinvoke $r4.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }
    public int processPacket(byte[], int, int, byte[], int) throws java.lang.IllegalStateException, org.spongycastle.crypto.InvalidCipherTextException, org.spongycastle.crypto.DataLengthException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1, $r2, r4, $r7, $r8;
        int $i0, $i1, $i2, i3, i4, $i6, $i7, $i8;
        org.spongycastle.crypto.modes.SICBlockCipher r3;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r5;
        java.lang.IllegalStateException $r6;
        byte $b5;
        org.spongycastle.crypto.BlockCipher $r9;
        org.spongycastle.crypto.params.ParametersWithIV $r10;
        org.spongycastle.crypto.OutputLengthException $r11;
        org.spongycastle.crypto.InvalidCipherTextException $r12;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r5 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.CipherParameters keyParam>;

        if $r5 != null goto label01;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CCM cipher unitialized.");

        throw $r6;

     label01:
        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        i4 = lengthof r4;

        i4 = 15 - i4;

        if i4 >= 4 goto label02;

        i3 = i4 * 8;

        i3 = 1 << i3;

        if $i1 < i3 goto label02;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CCM packet too large for choice of q.");

        throw $r6;

     label02:
        i3 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r4 = newarray (byte)[i3];

        i4 = i4 + -1;

        i4 = i4 & 7;

        $b5 = (byte) i4;

        r4[0] = $b5;

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        $r8 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] nonce>;

        i4 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 1, i4);

        r3 = new org.spongycastle.crypto.modes.SICBlockCipher;

        $r9 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        specialinvoke r3.<org.spongycastle.crypto.modes.SICBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r9);

        $z0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        $r10 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r5 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.CipherParameters keyParam>;

        specialinvoke $r10.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r5, r4);

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r10);

        i3 = $i0;

        i4 = $i2;

        $z0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label06;

        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i6 = $i1 + $i6;

        $i7 = lengthof $r2;

        $i8 = $i6 + $i2;

        if $i7 >= $i8 goto label03;

        $r11 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r11.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("Output buffer too short.");

        throw $r11;

     label03:
        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>($r1, $i0, $i1, r4);

        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r4 = newarray (byte)[$i7];

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, r4, 0);

     label04:
        $i7 = $i0 + $i1;

        $i8 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i7 = $i7 - $i8;

        if i3 >= $i7 goto label05;

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, i3, $r2, i4);

        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i4 = i4 + $i7;

        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i3 = i3 + $i7;

        goto label04;

     label05:
        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r7 = newarray (byte)[$i7];

        $i7 = $i1 + $i0;

        $i7 = $i7 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i3, $r7, 0, $i7);

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r7, 0);

        $i0 = $i1 + $i0;

        $i0 = $i0 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r2, i4, $i0);

        $i0 = $i2 + $i1;

        $i1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r2, $i0, $i1);

        return $i6;

     label06:
        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        if $i1 >= $i6 goto label07;

        $r12 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r12.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data too short");

        throw $r12;

     label07:
        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i1 = $i1 - $i6;

        $i6 = lengthof $r2;

        $i7 = $i1 + $i2;

        if $i6 >= $i7 goto label08;

        $r11 = new org.spongycastle.crypto.OutputLengthException;

        specialinvoke $r11.<org.spongycastle.crypto.OutputLengthException: void <init>(java.lang.String)>("Output buffer too short.");

        throw $r11;

     label08:
        $i6 = $i0 + $i1;

        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i6, r4, 0, $i7);

        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r4, 0, $r7, 0);

        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

     label09:
        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i7 = lengthof r4;

        if $i6 == $i7 goto label10;

        r4 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        r4[$i6] = 0;

        $i6 = $i6 + 1;

        goto label09;

     label10:
        $i6 = $i0 + $i1;

        $i7 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i6 = $i6 - $i7;

        if i3 >= $i6 goto label11;

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, i3, $r2, i4);

        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i4 = i4 + $i6;

        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        i3 = i3 + $i6;

        goto label10;

     label11:
        $i6 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        r4 = newarray (byte)[$i6];

        $i6 = i3 - $i0;

        $i6 = $i1 - $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i3, r4, 0, $i6);

        interfaceinvoke r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r4, 0, r4, 0);

        $i0 = i3 - $i0;

        $i0 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r2, i4, $i0);

        $i0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r1 = newarray (byte)[$i0];

        specialinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>($r2, $i2, $i1, $r1);

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r2, $r1);

        if $z0 != 0 goto label12;

        $r12 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r12.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("mac check in CCM failed");

        throw $r12;

     label12:
        return $i1;
    }
    public byte[] processPacket(byte[], int, int) throws java.lang.IllegalStateException, org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2;
        boolean $z0;
        org.spongycastle.crypto.InvalidCipherTextException $r3;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $i2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i2 = $i2 + $i1;

        r2 = newarray (byte)[$i2];

     label1:
        virtualinvoke r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int processPacket(byte[],int,int,byte[],int)>($r1, $i0, $i1, r2, 0);

        return r2;

     label2:
        $i2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        if $i1 >= $i2 goto label3;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data too short");

        throw $r3;

     label3:
        $i2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: int macSize>;

        $i2 = $i1 - $i2;

        r2 = newarray (byte)[$i2];

        goto label1;
    }
    public void reset()
    {
        org.spongycastle.crypto.modes.CCMBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.crypto.modes.CCMBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText>;

        virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.modes.CCMBlockCipher: org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data>;

        virtualinvoke $r2.<org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream: void reset()>();

        return;
    }
