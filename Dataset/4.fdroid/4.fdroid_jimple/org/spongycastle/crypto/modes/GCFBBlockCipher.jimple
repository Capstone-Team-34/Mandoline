org.spongycastle.crypto.modes.GCFBBlockCipher extends org.spongycastle.crypto.StreamBlockCipher
private static final byte[] C
private final org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine
private long counter
private boolean forEncryption
private org.spongycastle.crypto.params.KeyParameter key
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[32];

        $r0[0] = 105;

        $r0[1] = 0;

        $r0[2] = 114;

        $r0[3] = 34;

        $r0[4] = 100;

        $r0[5] = -55;

        $r0[6] = 4;

        $r0[7] = 35;

        $r0[8] = -115;

        $r0[9] = 58;

        $r0[10] = -37;

        $r0[11] = -106;

        $r0[12] = 70;

        $r0[13] = -23;

        $r0[14] = 42;

        $r0[15] = -60;

        $r0[16] = 24;

        $r0[17] = -2;

        $r0[18] = -84;

        $r0[19] = -108;

        $r0[20] = 0;

        $r0[21] = -19;

        $r0[22] = 7;

        $r0[23] = 18;

        $r0[24] = -64;

        $r0[25] = -122;

        $r0[26] = -36;

        $r0[27] = -62;

        $r0[28] = -17;

        $r0[29] = 76;

        $r0[30] = -87;

        $r0[31] = 43;

        <org.spongycastle.crypto.modes.GCFBBlockCipher: byte[] C> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        org.spongycastle.crypto.modes.CFBBlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.StreamBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter> = 0L;

        $r2 = new org.spongycastle.crypto.modes.CFBBlockCipher;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke $r2.<org.spongycastle.crypto.modes.CFBBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r1, $i0);

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine> = $r2;

        return;
    }
    protected byte calculateByte(byte)
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        byte $b0, $b2;
        byte[] r1, $r6;
        org.spongycastle.crypto.params.ParametersWithIV $r2;
        long $l1;
        org.spongycastle.crypto.modes.CFBBlockCipher $r3;
        org.spongycastle.crypto.BlockCipher $r4;
        org.spongycastle.crypto.params.KeyParameter $r5;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $b0 := @parameter0: byte;

        $l1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $l1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter>;

        $l1 = $l1 % 1024L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r5 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.params.KeyParameter key>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r5);

        r1 = newarray (byte)[32];

        $r6 = <org.spongycastle.crypto.modes.GCFBBlockCipher: byte[] C>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r1, 0);

        $r6 = <org.spongycastle.crypto.modes.GCFBBlockCipher: byte[] C>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 8, r1, 8);

        $r6 = <org.spongycastle.crypto.modes.GCFBBlockCipher: byte[] C>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 16, r1, 16);

        $r6 = <org.spongycastle.crypto.modes.GCFBBlockCipher: byte[] C>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 24, r1, 24);

        $r5 = new org.spongycastle.crypto.params.KeyParameter;

        specialinvoke $r5.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>(r1);

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.params.KeyParameter key> = $r5;

        $r5 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.params.KeyParameter key>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r5);

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        r1 = virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: byte[] getCurrentIV()>();

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r1, 0, r1, 0);

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $z0 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: boolean forEncryption>;

        $r2 = new org.spongycastle.crypto.params.ParametersWithIV;

        $r5 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.params.KeyParameter key>;

        specialinvoke $r2.<org.spongycastle.crypto.params.ParametersWithIV: void <init>(org.spongycastle.crypto.CipherParameters,byte[])>($r5, r1);

        virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r2);

     label1:
        $l1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter>;

        $l1 = $l1 + 1L;

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter> = $l1;

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $b0 = virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: byte calculateByte(byte)>($b0);

        return $b0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        org.spongycastle.crypto.modes.CFBBlockCipher $r1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $r2 = virtualinvoke $r1.<org.spongycastle.crypto.modes.CFBBlockCipher: java.lang.String getAlgorithmName()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(47);

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/G");

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(47);

        $i0 = $i0 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.modes.CFBBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.modes.CFBBlockCipher: int getBlockSize()>();

        return $i0;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.modes.CFBBlockCipher $r2;
        org.spongycastle.crypto.params.ParametersWithIV r3;
        org.spongycastle.crypto.params.ParametersWithRandom r4;
        org.spongycastle.crypto.params.ParametersWithSBox r5;
        org.spongycastle.crypto.params.KeyParameter r6;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter> = 0L;

        $r2 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        virtualinvoke $r2.<org.spongycastle.crypto.modes.CFBBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, r1);

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: boolean forEncryption> = $z0;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label1;

        r3 = (org.spongycastle.crypto.params.ParametersWithIV) r1;

        r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

     label1:
        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r4 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r4.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

     label2:
        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithSBox;

        if $z0 == 0 goto label3;

        r5 = (org.spongycastle.crypto.params.ParametersWithSBox) r1;

        r1 = virtualinvoke r5.<org.spongycastle.crypto.params.ParametersWithSBox: org.spongycastle.crypto.CipherParameters getParameters()>();

     label3:
        r6 = (org.spongycastle.crypto.params.KeyParameter) r1;

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.params.KeyParameter key> = r6;

        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.modes.CFBBlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $i2 = virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: int getBlockSize()>();

        virtualinvoke r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i2, $r2, $i1);

        $r3 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        $i0 = virtualinvoke $r3.<org.spongycastle.crypto.modes.CFBBlockCipher: int getBlockSize()>();

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.modes.GCFBBlockCipher r0;
        org.spongycastle.crypto.modes.CFBBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.modes.GCFBBlockCipher;

        r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: long counter> = 0L;

        $r1 = r0.<org.spongycastle.crypto.modes.GCFBBlockCipher: org.spongycastle.crypto.modes.CFBBlockCipher cfbEngine>;

        virtualinvoke $r1.<org.spongycastle.crypto.modes.CFBBlockCipher: void reset()>();

        return;
    }
