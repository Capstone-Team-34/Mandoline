org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher extends java.lang.Object implements org.spongycastle.crypto.BlockCipher
private byte[] FR
private byte[] FRE
private byte[] IV
private int blockSize
private org.spongycastle.crypto.BlockCipher cipher
private int count
private boolean forEncryption
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize> = $i0;

        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] IV> = $r2;

        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR> = $r2;

        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE> = $r2;

        return;
    }
    private int decryptBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        byte[] $r1, $r2, $r4, $r6;
        int $i0, $i1, $i4, $i5, $i6;
        byte b2, b3, $b7;
        org.spongycastle.crypto.DataLengthException $r3;
        org.spongycastle.crypto.BlockCipher $r5;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + $i0;

        $i5 = lengthof $r1;

        if $i4 <= $i5 goto label01;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label01:
        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + $i1;

        $i5 = lengthof $r2;

        if $i4 <= $i5 goto label02;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label02:
        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i4 <= $i5 goto label04;

        b2 = $r1[$i0];

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -2;

        $r4[$i4] = b2;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -2;

        b2 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, $i4);

        $r2[$i1] = b2;

        $i4 = $i0 + 1;

        b2 = $r1[$i4];

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -1;

        $r4[$i4] = b2;

        $i4 = $i1 + 1;

        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i5 = $i5 + -1;

        b2 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, $i5);

        $r2[$i4] = b2;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i4 = 2;

     label03:
        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i4 >= $i5 goto label07;

        $i5 = $i0 + $i4;

        b2 = $r1[$i5];

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i5 = $i4 + -2;

        $r4[$i5] = b2;

        $i5 = $i1 + $i4;

        $i6 = $i4 + -2;

        b2 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, $i6);

        $r2[$i5] = b2;

        $i4 = $i4 + 1;

        goto label03;

     label04:
        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        if $i4 != 0 goto label08;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i1 = 0;

     label05:
        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i1 >= $i4 goto label06;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = $i0 + $i1;

        b2 = $r1[$i4];

        $r4[$i1] = b2;

        $i4 = $i0 + $i1;

        b2 = $r1[$i4];

        b2 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, $i1);

        $r2[$i1] = b2;

        $i1 = $i1 + 1;

        goto label05;

     label06:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count> = $i0;

     label07:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        return $i0;

     label08:
        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i4 != $i5 goto label07;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        b2 = $r1[$i0];

        $i4 = $i0 + 1;

        b3 = $r1[$i4];

        $b7 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, 0);

        $r2[$i1] = $b7;

        $i4 = $i1 + 1;

        $b7 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b3, 1);

        $r2[$i4] = $b7;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 2, $r6, 0, $i4);

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -2;

        $r4[$i4] = b2;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i4 = $i4 + -1;

        $r4[$i4] = b3;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i4 = 2;

     label09:
        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i4 >= $i5 goto label10;

        $i5 = $i0 + $i4;

        b2 = $r1[$i5];

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i5 = $i4 + -2;

        $r4[$i5] = b2;

        $i5 = $i1 + $i4;

        $i6 = $i4 + -2;

        b2 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>(b2, $i6);

        $r2[$i5] = b2;

        $i4 = $i4 + 1;

        goto label09;

     label10:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count> = $i0;

        goto label07;
    }
    private int encryptBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        byte[] $r1, $r2, $r4, $r6;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        org.spongycastle.crypto.DataLengthException $r3;
        byte $b4;
        org.spongycastle.crypto.BlockCipher $r5;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + $i0;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label01;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r3;

     label01:
        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + $i1;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label02;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label02:
        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i2 <= $i3 goto label04;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + -2;

        $b4 = $r1[$i0];

        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i3 = $i3 + -2;

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, $i3);

        $r2[$i1] = $b4;

        $r4[$i2] = $b4;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + -1;

        $i3 = $i1 + 1;

        $i5 = $i0 + 1;

        $b4 = $r1[$i5];

        $i5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i5 = $i5 + -1;

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, $i5);

        $r2[$i3] = $b4;

        $r4[$i2] = $b4;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i2 = 2;

     label03:
        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i2 >= $i3 goto label07;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i3 = $i2 + -2;

        $i5 = $i1 + $i2;

        $i6 = $i0 + $i2;

        $b4 = $r1[$i6];

        $i6 = $i2 + -2;

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, $i6);

        $r2[$i5] = $b4;

        $r4[$i3] = $b4;

        $i2 = $i2 + 1;

        goto label03;

     label04:
        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        if $i2 != 0 goto label08;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i2 = 0;

     label05:
        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i2 >= $i3 goto label06;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i3 = $i1 + $i2;

        $i5 = $i0 + $i2;

        $b4 = $r1[$i5];

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, $i2);

        $r2[$i3] = $b4;

        $r4[$i2] = $b4;

        $i2 = $i2 + 1;

        goto label05;

     label06:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count> = $i0;

     label07:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        return $i0;

     label08:
        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i2 != $i3 goto label07;

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $b4 = $r1[$i0];

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, 0);

        $r2[$i1] = $b4;

        $i2 = $i1 + 1;

        $i3 = $i0 + 1;

        $b4 = $r1[$i3];

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, 1);

        $r2[$i2] = $b4;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + -2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 2, $r6, 0, $i2);

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i2 = $i2 + -2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r4, $i2, 2);

        $r5 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r6 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r6, 0);

        $i2 = 2;

     label09:
        $i3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        if $i2 >= $i3 goto label10;

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i3 = $i2 + -2;

        $i5 = $i1 + $i2;

        $i6 = $i0 + $i2;

        $b4 = $r1[$i6];

        $i6 = $i2 + -2;

        $b4 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte encryptByte(byte,int)>($b4, $i6);

        $r2[$i5] = $b4;

        $r4[$i3] = $b4;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        $i0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count>;

        $i1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int blockSize>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count> = $i0;

        goto label07;
    }
    private byte encryptByte(byte, int)
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        byte $b0, $b2;
        int $i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $r1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FRE>;

        $b2 = $r1[$i1];

        $i1 = $b2 ^ $b0;

        $b0 = (byte) $i1;

        return $b0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/OpenPGPCFB");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        return $i0;
    }
    public org.spongycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        org.spongycastle.crypto.BlockCipher r1;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        r1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: boolean forEncryption> = $z0;

        virtualinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r1);

        return;
    }
    public int processBlock(byte[], int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return $i0;
    }
    public void reset()
    {
        org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher r0;
        byte[] $r1, $r2, $r3;
        int $i0;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher;

        r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: int count> = 0;

        $r2 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] IV>;

        $r1 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $r3 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: byte[] FR>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        $r4 = r0.<org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: void reset()>();

        return;
    }
