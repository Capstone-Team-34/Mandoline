org.spongycastle.crypto.modes.OldCTSBlockCipher extends org.spongycastle.crypto.BufferedBlockCipher
private int blockSize
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.BufferedBlockCipher: void <init>()>();

        $z0 = $r1 instanceof org.spongycastle.crypto.modes.OFBBlockCipher;

        if $z0 != 0 goto label1;

        $z0 = $r1 instanceof org.spongycastle.crypto.modes.CFBBlockCipher;

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CTSBlockCipher can only accept ECB, or CBC ciphers");

        throw $r2;

     label2:
        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int blockSize> = $i0;

        $i0 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int blockSize>;

        $i0 = $i0 * 2;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf> = $r3;

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff> = 0;

        return;
    }
    public int doFinal(byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException, org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        byte[] $r1, r2, r3, $r7;
        int $i0, i1, $i2, $i3, $i4, $i7;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.BlockCipher $r5;
        boolean $z0;
        byte $b5, $b6;
        org.spongycastle.crypto.modes.CBCBlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        i1 = i1 + $i0;

        $i2 = lengthof $r1;

        if i1 <= $i2 goto label01;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer to small in doFinal");

        throw $r4;

     label01:
        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $i2 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        i1 = i1 - $i2;

        r2 = newarray (byte)[$i2];

        $z0 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label10;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, 0, r2, 0);

        $i3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        if $i3 >= $i2 goto label02;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("need at least one block of input for CTS");

        throw $r4;

     label02:
        $i3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

     label03:
        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i4 = lengthof r3;

        if $i3 == $i4 goto label04;

        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i4 = $i3 - $i2;

        $b5 = r2[$i4];

        r3[$i3] = $b5;

        $i3 = $i3 + 1;

        goto label03;

     label04:
        $i3 = $i2;

     label05:
        $i4 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        if $i3 == $i4 goto label06;

        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $b5 = r3[$i3];

        $i4 = $i3 - $i2;

        $b6 = r2[$i4];

        $i4 = $b5 ^ $b6;

        $b5 = (byte) $i4;

        r3[$i3] = $b5;

        $i3 = $i3 + 1;

        goto label05;

     label06:
        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $z0 = $r5 instanceof org.spongycastle.crypto.modes.CBCBlockCipher;

        if $z0 == 0 goto label09;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r6 = (org.spongycastle.crypto.modes.CBCBlockCipher) $r5;

        $r5 = virtualinvoke $r6.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, $i2, $r1, $i0);

     label07:
        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, i1);

     label08:
        $i0 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        virtualinvoke r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: void reset()>();

        return $i0;

     label09:
        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, $i2, $r1, $i0);

        goto label07;

     label10:
        r3 = newarray (byte)[$i2];

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $z0 = $r5 instanceof org.spongycastle.crypto.modes.CBCBlockCipher;

        if $z0 == 0 goto label13;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r6 = (org.spongycastle.crypto.modes.CBCBlockCipher) $r5;

        $r5 = virtualinvoke $r6.<org.spongycastle.crypto.modes.CBCBlockCipher: org.spongycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, r2, 0);

     label11:
        $i3 = $i2;

     label12:
        $i4 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        if $i3 == $i4 goto label14;

        $i4 = $i3 - $i2;

        $i7 = $i3 - $i2;

        $b5 = r2[$i7];

        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $b6 = $r7[$i3];

        $i7 = $b5 ^ $b6;

        $b5 = (byte) $i7;

        r3[$i4] = $b5;

        $i3 = $i3 + 1;

        goto label12;

     label13:
        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, r2, 0);

        goto label11;

     label14:
        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i2, r2, 0, i1);

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, 0, $r1, $i0);

        $i0 = $i0 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i0, i1);

        goto label08;
    }
    public int getOutputSize(int)
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public int getUpdateOutputSize(int)
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        int $i0, i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        $i0 = $i0 + i1;

        $r1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r1;

        i1 = $i0 % i1;

        if i1 != 0 goto label1;

        $r1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r1;

        $i0 = $i0 - i1;

        return $i0;

     label1:
        $i0 = $i0 - i1;

        return $i0;
    }
    public int processByte(byte, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        byte $b0;
        byte[] $r1, $r2;
        int $i1, i2, $i3, $i4;
        org.spongycastle.crypto.BlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        i2 = 0;

        $i3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        $r2 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i4 = lengthof $r2;

        if $i3 != $i4 goto label1;

        $r3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r2 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i2 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r2, 0, $r1, $i1);

        $r1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int blockSize>;

        $r2 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i3, $r2, 0, $i1);

        $i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int blockSize>;

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff> = $i1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        $i3 = $i1 + 1;

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff> = $i3;

        $r1[$i1] = $b0;

        return i2;
    }
    public int processBytes(byte[], int, int, byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.modes.OldCTSBlockCipher r0;
        byte[] $r1, $r2, $r5, $r7;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.DataLengthException $r4;
        org.spongycastle.crypto.BlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.modes.OldCTSBlockCipher;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i0 := @parameter4: int;

        if $i3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        $i4 = virtualinvoke r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int getBlockSize()>();

        $i5 = virtualinvoke r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int getUpdateOutputSize(int)>($i3);

        if $i5 <= 0 goto label2;

        $i5 = $i0 + $i5;

        i1 = lengthof $r2;

        if $i5 <= i1 goto label2;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label2:
        $i5 = 0;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i1 = lengthof $r5;

        $i6 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        i1 = i1 - $i6;

        if $i3 <= i1 goto label4;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, $i5, i1);

        $r6 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i5 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, $i0);

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r7, 0, $i4);

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff> = $i4;

        $i3 = $i3 - i1;

        $i2 = $i2 + i1;

     label3:
        if $i3 <= $i4 goto label4;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i1 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, i1, $i4);

        $r6 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        i1 = $i0 + $i5;

        i1 = interfaceinvoke $r6.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, i1);

        $i5 = $i5 + i1;

        $r5 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $r7 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r7, 0, $i4);

        $i3 = $i3 - $i4;

        $i2 = $i2 + $i4;

        goto label3;

     label4:
        $r2 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: byte[] buf>;

        $i0 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i0, $i3);

        $i2 = r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff>;

        $i2 = $i2 + $i3;

        r0.<org.spongycastle.crypto.modes.OldCTSBlockCipher: int bufOff> = $i2;

        return $i5;
    }
