org.spongycastle.crypto.commitments.GeneralHashCommitter extends java.lang.Object implements org.spongycastle.crypto.Committer
private final int byteLength
private final org.spongycastle.crypto.Digest digest
private final java.security.SecureRandom random
    public void <init>(org.spongycastle.crypto.ExtendedDigest, java.security.SecureRandom)
    {
        org.spongycastle.crypto.commitments.GeneralHashCommitter r0;
        org.spongycastle.crypto.ExtendedDigest $r1;
        java.security.SecureRandom $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.commitments.GeneralHashCommitter;

        $r1 := @parameter0: org.spongycastle.crypto.ExtendedDigest;

        $r2 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.ExtendedDigest: int getByteLength()>();

        r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: int byteLength> = $i0;

        r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: java.security.SecureRandom random> = $r2;

        return;
    }
    private byte[] calculateCommitment(byte[], byte[])
    {
        org.spongycastle.crypto.commitments.GeneralHashCommitter r0;
        byte[] $r1, $r2, r3;
        int $i0;
        org.spongycastle.crypto.Digest $r4;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.commitments.GeneralHashCommitter;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r1;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r2;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r2;

        $i0 = $i0 >>> 8;

        $b1 = (byte) $i0;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte)>($b1);

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r2;

        $b1 = (byte) $i0;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte)>($b1);

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        return r3;
    }
    public org.spongycastle.crypto.Commitment commit(byte[])
    {
        org.spongycastle.crypto.commitments.GeneralHashCommitter r0;
        byte[] $r1, r2;
        int $i0, $i1;
        org.spongycastle.crypto.DataLengthException $r3;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.Commitment $r5;

        r0 := @this: org.spongycastle.crypto.commitments.GeneralHashCommitter;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: int byteLength>;

        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label1;

        $r3 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Message to be committed to too large for digest.");

        throw $r3;

     label1:
        $i0 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: int byteLength>;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

        r2 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: java.security.SecureRandom random>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        $r5 = new org.spongycastle.crypto.Commitment;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: byte[] calculateCommitment(byte[],byte[])>(r2, $r1);

        specialinvoke $r5.<org.spongycastle.crypto.Commitment: void <init>(byte[],byte[])>(r2, $r1);

        return $r5;
    }
    public boolean isRevealed(org.spongycastle.crypto.Commitment, byte[])
    {
        org.spongycastle.crypto.commitments.GeneralHashCommitter r0;
        org.spongycastle.crypto.Commitment $r1;
        byte[] $r2, $r3;
        int $i0, $i1;
        org.spongycastle.crypto.DataLengthException $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.commitments.GeneralHashCommitter;

        $r1 := @parameter0: org.spongycastle.crypto.Commitment;

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r2;

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.Commitment: byte[] getSecret()>();

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $i1 = r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: int byteLength>;

        if $i0 == $i1 goto label1;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("Message and witness secret lengths do not match.");

        throw $r4;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.Commitment: byte[] getSecret()>();

        $r2 = specialinvoke r0.<org.spongycastle.crypto.commitments.GeneralHashCommitter: byte[] calculateCommitment(byte[],byte[])>($r3, $r2);

        $r3 = virtualinvoke $r1.<org.spongycastle.crypto.Commitment: byte[] getCommitment()>();

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r3, $r2);

        return $z0;
    }
