org.spongycastle.crypto.examples.JPAKEExample extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.crypto.examples.JPAKEExample r0;

        r0 := @this: org.spongycastle.crypto.examples.JPAKEExample;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.math.BigInteger deriveSessionKey(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        org.spongycastle.crypto.digests.SHA256Digest r1;
        byte[] r2, $r3;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        r1 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke r1.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        $r3 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = virtualinvoke r1.<org.spongycastle.crypto.digests.SHA256Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        virtualinvoke r1.<org.spongycastle.crypto.digests.SHA256Digest: void update(byte[],int,int)>($r3, 0, $i0);

        virtualinvoke r1.<org.spongycastle.crypto.digests.SHA256Digest: int doFinal(byte[],int)>(r2, 0);

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(byte[])>(r2);

        return $r0;
    }
    public static void main(java.lang.String[]) throws org.spongycastle.crypto.CryptoException
    {
        java.lang.String[] $r0;
        org.spongycastle.crypto.agreement.jpake.JPAKEParticipant r1, r5;
        org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup r2;
        org.spongycastle.crypto.digests.SHA256Digest r3;
        java.security.SecureRandom r4;
        java.lang.String r6, r7, $r13;
        java.math.BigInteger $r8, $r9, $r10, $r14;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r12;
        int $i0;
        char[] $r15;
        org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload $r16, $r17;
        java.math.BigInteger[] $r18;
        org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload $r19, $r20;
        org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload $r21, $r22;

        $r0 := @parameter0: java.lang.String[];

        r2 = <org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups: org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup NIST_3072>;

        $r8 = virtualinvoke r2.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getP()>();

        $r9 = virtualinvoke r2.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getQ()>();

        $r10 = virtualinvoke r2.<org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup: java.math.BigInteger getG()>();

        r6 = "password";

        r7 = "password";

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("********* Initialization **********");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Public parameters for the cyclic group:");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p (");

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits): ");

        $r13 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("q (");

        $i0 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits): ");

        $r13 = virtualinvoke $r9.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g (");

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits): ");

        $r13 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p mod q = ");

        $r14 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r13 = virtualinvoke $r14.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g^{q} mod p = ");

        $r8 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, $r8);

        $r13 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Secret passwords used by Alice and Bob: \"");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" and \"");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        r3 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke r3.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        r4 = new java.security.SecureRandom;

        specialinvoke r4.<java.security.SecureRandom: void <init>()>();

        r1 = new org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r15 = virtualinvoke r6.<java.lang.String: char[] toCharArray()>();

        specialinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void <init>(java.lang.String,char[],org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup,org.spongycastle.crypto.Digest,java.security.SecureRandom)>("alice", $r15, r2, r3, r4);

        r5 = new org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;

        $r15 = virtualinvoke r7.<java.lang.String: char[] toCharArray()>();

        specialinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void <init>(java.lang.String,char[],org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup,org.spongycastle.crypto.Digest,java.security.SecureRandom)>("bob", $r15, r2, r3, r4);

        $r16 = virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload createRound1PayloadToSend()>();

        $r17 = virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload createRound1PayloadToSend()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("************ Round 1 **************");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice sends to Bob: ");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g^{x1}=");

        $r8 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx1()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g^{x2}=");

        $r8 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx2()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x1}={");

        $r18 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX1()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};{");

        $r18 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX1()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x2}={");

        $r18 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX2()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};{");

        $r18 = virtualinvoke $r16.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX2()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob sends to Alice: ");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g^{x3}=");

        $r8 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx1()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g^{x4}=");

        $r8 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger getGx2()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x3}={");

        $r18 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX1()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};{");

        $r18 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX1()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x4}={");

        $r18 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX2()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("};{");

        $r18 = virtualinvoke $r17.<org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload: java.math.BigInteger[] getKnowledgeProofForX2()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound1PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload)>($r17);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice checks g^{x4}!=1: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice checks KP{x3}: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice checks KP{x4}: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound1PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload)>($r16);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob checks g^{x2}!=1: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob checks KP{x1},: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob checks KP{x2},: OK");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        $r19 = virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload createRound2PayloadToSend()>();

        $r20 = virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload createRound2PayloadToSend()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("************ Round 2 **************");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice sends to Bob: ");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A=");

        $r8 = virtualinvoke $r19.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger getA()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x2*s}={");

        $r18 = virtualinvoke $r19.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] getKnowledgeProofForX2s()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("},{");

        $r18 = virtualinvoke $r19.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] getKnowledgeProofForX2s()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob sends to Alice");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("B=");

        $r8 = virtualinvoke $r20.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger getA()>();

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KP{x4*s}={");

        $r18 = virtualinvoke $r20.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] getKnowledgeProofForX2s()>();

        $r8 = $r18[0];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("},{");

        $r18 = virtualinvoke $r20.<org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload: java.math.BigInteger[] getKnowledgeProofForX2s()>();

        $r8 = $r18[1];

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound2PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload)>($r20);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice checks KP{x4*s}: OK\n");

        virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound2PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload)>($r19);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob checks KP{x2*s}: OK\n");

        $r8 = virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger calculateKeyingMaterial()>();

        $r9 = virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: java.math.BigInteger calculateKeyingMaterial()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("********* After round 2 ***********");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alice computes key material \t K=");

        r6 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bob computes key material \t K=");

        r6 = virtualinvoke $r9.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println()>();

        staticinvoke <org.spongycastle.crypto.examples.JPAKEExample: java.math.BigInteger deriveSessionKey(java.math.BigInteger)>($r8);

        staticinvoke <org.spongycastle.crypto.examples.JPAKEExample: java.math.BigInteger deriveSessionKey(java.math.BigInteger)>($r9);

        $r21 = virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload createRound3PayloadToSend(java.math.BigInteger)>($r8);

        $r22 = virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload createRound3PayloadToSend(java.math.BigInteger)>($r9);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("************ Round 3 **************");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice sends to Bob: ");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MacTag=");

        $r10 = virtualinvoke $r21.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: java.math.BigInteger getMacTag()>();

        r6 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob sends to Alice: ");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MacTag=");

        $r10 = virtualinvoke $r22.<org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload: java.math.BigInteger getMacTag()>();

        r6 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString(int)>(16);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>(r6);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("");

        virtualinvoke r1.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound3PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload,java.math.BigInteger)>($r22, $r8);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Alice checks MacTag: OK\n");

        virtualinvoke r5.<org.spongycastle.crypto.agreement.jpake.JPAKEParticipant: void validateRound3PayloadReceived(org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload,java.math.BigInteger)>($r21, $r9);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Bob checks MacTag: OK\n");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("MacTags validated, therefore the keying material matches.");

        return;
    }
