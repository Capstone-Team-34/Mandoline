org.spongycastle.crypto.util.PublicKeyFactory extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.crypto.util.PublicKeyFactory r0;

        r0 := @this: org.spongycastle.crypto.util.PublicKeyFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        org.spongycastle.asn1.ASN1InputStream $r1;
        org.spongycastle.asn1.ASN1Primitive $r2;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new org.spongycastle.asn1.ASN1InputStream;

        specialinvoke $r1.<org.spongycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>($r0);

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>();

        $r3 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r2);

        $r4 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r3);

        return $r4;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws java.io.IOException
    {
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r2, $r3;
        boolean $z0;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.asn1.pkcs.RSAPublicKey $r5;
        java.math.BigInteger $r6, $r7, $r11, $r12, r13, $r14;
        org.spongycastle.asn1.x9.DHPublicKey $r8;
        org.spongycastle.asn1.ASN1Encodable $r9;
        org.spongycastle.asn1.x9.DomainParameters $r10;
        org.spongycastle.crypto.params.DHValidationParameters r15, $r31;
        org.spongycastle.asn1.x9.ValidationParams $r16;
        byte[] $r17;
        int $i0;
        org.spongycastle.asn1.pkcs.DHParameter $r18;
        org.spongycastle.asn1.ASN1Integer r19;
        org.spongycastle.asn1.oiw.ElGamalParameter $r20;
        org.spongycastle.crypto.params.DSAParameters r21, $r36;
        org.spongycastle.asn1.x509.DSAParameter $r22;
        org.spongycastle.asn1.x9.X962Parameters $r23;
        org.spongycastle.asn1.x9.X9ECParameters $r24, r25;
        java.lang.Object r26;
        org.spongycastle.math.ec.ECCurve $r27;
        org.spongycastle.math.ec.ECPoint $r28;
        org.spongycastle.asn1.DERBitString $r29;
        org.spongycastle.crypto.params.RSAKeyParameters $r30;
        org.spongycastle.crypto.params.DHParameters $r32;
        org.spongycastle.crypto.params.DHPublicKeyParameters $r33;
        org.spongycastle.crypto.params.ElGamalParameters $r34;
        org.spongycastle.crypto.params.ElGamalPublicKeyParameters $r35;
        org.spongycastle.crypto.params.DSAPublicKeyParameters $r37;
        org.spongycastle.crypto.params.ECNamedDomainParameters $r38;
        org.spongycastle.asn1.DEROctetString $r39;
        org.spongycastle.asn1.x9.X9ECPoint $r40;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r41;
        org.spongycastle.crypto.params.ECDomainParameters $r42;
        java.lang.RuntimeException $r43;

        $r0 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r1 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label01;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.x509.X509ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ea_rsa>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label02;

     label01:
        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        $r5 = staticinvoke <org.spongycastle.asn1.pkcs.RSAPublicKey: org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object)>($r4);

        $r30 = new org.spongycastle.crypto.params.RSAKeyParameters;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.asn1.pkcs.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r30.<org.spongycastle.crypto.params.RSAKeyParameters: void <init>(boolean,java.math.BigInteger,java.math.BigInteger)>(0, $r6, $r7);

        return $r30;

     label02:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dhpublicnumber>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label05;

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        $r8 = staticinvoke <org.spongycastle.asn1.x9.DHPublicKey: org.spongycastle.asn1.x9.DHPublicKey getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r8.<org.spongycastle.asn1.x9.DHPublicKey: java.math.BigInteger getY()>();

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r10 = staticinvoke <org.spongycastle.asn1.x9.DomainParameters: org.spongycastle.asn1.x9.DomainParameters getInstance(java.lang.Object)>($r9);

        $r7 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: java.math.BigInteger getP()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: java.math.BigInteger getG()>();

        $r12 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: java.math.BigInteger getQ()>();

        r13 = null;

        $r14 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: java.math.BigInteger getJ()>();

        if $r14 == null goto label03;

        r13 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: java.math.BigInteger getJ()>();

     label03:
        r15 = null;

        $r16 = virtualinvoke $r10.<org.spongycastle.asn1.x9.DomainParameters: org.spongycastle.asn1.x9.ValidationParams getValidationParams()>();

        if $r16 == null goto label04;

        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.x9.ValidationParams: byte[] getSeed()>();

        $r14 = virtualinvoke $r16.<org.spongycastle.asn1.x9.ValidationParams: java.math.BigInteger getPgenCounter()>();

        $r31 = new org.spongycastle.crypto.params.DHValidationParameters;

        r15 = $r31;

        $i0 = virtualinvoke $r14.<java.math.BigInteger: int intValue()>();

        specialinvoke $r31.<org.spongycastle.crypto.params.DHValidationParameters: void <init>(byte[],int)>($r17, $i0);

     label04:
        $r33 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r32 = new org.spongycastle.crypto.params.DHParameters;

        specialinvoke $r32.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.spongycastle.crypto.params.DHValidationParameters)>($r7, $r11, $r12, r13, r15);

        specialinvoke $r33.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r6, $r32);

        return $r33;

     label05:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label08;

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r18 = staticinvoke <org.spongycastle.asn1.pkcs.DHParameter: org.spongycastle.asn1.pkcs.DHParameter getInstance(java.lang.Object)>($r9);

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        r19 = (org.spongycastle.asn1.ASN1Integer) $r4;

        $r6 = virtualinvoke $r18.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getL()>();

        if $r6 != null goto label07;

        $i0 = 0;

     label06:
        $r32 = new org.spongycastle.crypto.params.DHParameters;

        $r6 = virtualinvoke $r18.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getP()>();

        $r7 = virtualinvoke $r18.<org.spongycastle.asn1.pkcs.DHParameter: java.math.BigInteger getG()>();

        specialinvoke $r32.<org.spongycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)>($r6, $r7, null, $i0);

        $r33 = new org.spongycastle.crypto.params.DHPublicKeyParameters;

        $r6 = virtualinvoke r19.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        specialinvoke $r33.<org.spongycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DHParameters)>($r6, $r32);

        return $r33;

     label07:
        $i0 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();

        goto label06;

     label08:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier elGamalAlgorithm>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label09;

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r20 = staticinvoke <org.spongycastle.asn1.oiw.ElGamalParameter: org.spongycastle.asn1.oiw.ElGamalParameter getInstance(java.lang.Object)>($r9);

        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        r19 = (org.spongycastle.asn1.ASN1Integer) $r4;

        $r35 = new org.spongycastle.crypto.params.ElGamalPublicKeyParameters;

        $r6 = virtualinvoke r19.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r34 = new org.spongycastle.crypto.params.ElGamalParameters;

        $r7 = virtualinvoke $r20.<org.spongycastle.asn1.oiw.ElGamalParameter: java.math.BigInteger getP()>();

        $r11 = virtualinvoke $r20.<org.spongycastle.asn1.oiw.ElGamalParameter: java.math.BigInteger getG()>();

        specialinvoke $r34.<org.spongycastle.crypto.params.ElGamalParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r7, $r11);

        specialinvoke $r35.<org.spongycastle.crypto.params.ElGamalPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.ElGamalParameters)>($r6, $r34);

        return $r35;

     label09:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label10;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.oiw.OIWObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label12;

     label10:
        $r4 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        r19 = (org.spongycastle.asn1.ASN1Integer) $r4;

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        r21 = null;

        if $r9 == null goto label11;

        $r4 = interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r22 = staticinvoke <org.spongycastle.asn1.x509.DSAParameter: org.spongycastle.asn1.x509.DSAParameter getInstance(java.lang.Object)>($r4);

        $r36 = new org.spongycastle.crypto.params.DSAParameters;

        r21 = $r36;

        $r6 = virtualinvoke $r22.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getP()>();

        $r7 = virtualinvoke $r22.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getQ()>();

        $r11 = virtualinvoke $r22.<org.spongycastle.asn1.x509.DSAParameter: java.math.BigInteger getG()>();

        specialinvoke $r36.<org.spongycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r7, $r11);

     label11:
        $r37 = new org.spongycastle.crypto.params.DSAPublicKeyParameters;

        $r6 = virtualinvoke r19.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        specialinvoke $r37.<org.spongycastle.crypto.params.DSAPublicKeyParameters: void <init>(java.math.BigInteger,org.spongycastle.crypto.params.DSAParameters)>($r6, r21);

        return $r37;

     label12:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r3 = <org.spongycastle.asn1.x9.X9ObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey>;

        $z0 = virtualinvoke $r2.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label16;

        $r9 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>();

        $r23 = staticinvoke <org.spongycastle.asn1.x9.X962Parameters: org.spongycastle.asn1.x9.X962Parameters getInstance(java.lang.Object)>($r9);

        $z0 = virtualinvoke $r23.<org.spongycastle.asn1.x9.X962Parameters: boolean isNamedCurve()>();

        if $z0 == 0 goto label15;

        $r4 = virtualinvoke $r23.<org.spongycastle.asn1.x9.X962Parameters: org.spongycastle.asn1.ASN1Primitive getParameters()>();

        $r2 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r4;

        $r24 = staticinvoke <org.spongycastle.crypto.ec.CustomNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2);

        r25 = $r24;

        if $r24 != null goto label13;

        r25 = staticinvoke <org.spongycastle.asn1.x9.ECNamedCurveTable: org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2);

     label13:
        $r38 = new org.spongycastle.crypto.params.ECNamedDomainParameters;

        r26 = $r38;

        $r27 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r28 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getH()>();

        $r17 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: byte[] getSeed()>();

        specialinvoke $r38.<org.spongycastle.crypto.params.ECNamedDomainParameters: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r2, $r27, $r28, $r6, $r7, $r17);

     label14:
        $r39 = new org.spongycastle.asn1.DEROctetString;

        $r29 = virtualinvoke $r0.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.DERBitString getPublicKeyData()>();

        $r17 = virtualinvoke $r29.<org.spongycastle.asn1.DERBitString: byte[] getBytes()>();

        specialinvoke $r39.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r17);

        $r40 = new org.spongycastle.asn1.x9.X9ECPoint;

        $r27 = virtualinvoke r25.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        specialinvoke $r40.<org.spongycastle.asn1.x9.X9ECPoint: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.asn1.ASN1OctetString)>($r27, $r39);

        $r41 = new org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r28 = virtualinvoke $r40.<org.spongycastle.asn1.x9.X9ECPoint: org.spongycastle.math.ec.ECPoint getPoint()>();

        $r42 = (org.spongycastle.crypto.params.ECDomainParameters) r26;

        specialinvoke $r41.<org.spongycastle.crypto.params.ECPublicKeyParameters: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.crypto.params.ECDomainParameters)>($r28, $r42);

        return $r41;

     label15:
        $r4 = virtualinvoke $r23.<org.spongycastle.asn1.x9.X962Parameters: org.spongycastle.asn1.ASN1Primitive getParameters()>();

        $r24 = staticinvoke <org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.asn1.x9.X9ECParameters getInstance(java.lang.Object)>($r4);

        r25 = $r24;

        $r42 = new org.spongycastle.crypto.params.ECDomainParameters;

        r26 = $r42;

        $r27 = virtualinvoke $r24.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r28 = virtualinvoke $r24.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r6 = virtualinvoke $r24.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke $r24.<org.spongycastle.asn1.x9.X9ECParameters: java.math.BigInteger getH()>();

        $r17 = virtualinvoke $r24.<org.spongycastle.asn1.x9.X9ECParameters: byte[] getSeed()>();

        specialinvoke $r42.<org.spongycastle.crypto.params.ECDomainParameters: void <init>(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])>($r27, $r28, $r6, $r7, $r17);

        goto label14;

     label16:
        $r43 = new java.lang.RuntimeException;

        specialinvoke $r43.<java.lang.RuntimeException: void <init>(java.lang.String)>("algorithm identifier in key not recognised");

        throw $r43;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        org.spongycastle.asn1.ASN1Primitive $r1;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r0);

        $r2 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r1);

        $r3 = staticinvoke <org.spongycastle.crypto.util.PublicKeyFactory: org.spongycastle.crypto.params.AsymmetricKeyParameter createKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r2);

        return $r3;
    }
