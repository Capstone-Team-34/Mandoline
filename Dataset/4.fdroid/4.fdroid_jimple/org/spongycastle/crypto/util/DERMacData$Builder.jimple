org.spongycastle.crypto.util.DERMacData$Builder extends java.lang.Object
private org.spongycastle.asn1.ASN1OctetString ephemDataU
private org.spongycastle.asn1.ASN1OctetString ephemDataV
private org.spongycastle.asn1.ASN1OctetString idU
private org.spongycastle.asn1.ASN1OctetString idV
private byte[] text
private final org.spongycastle.crypto.util.DERMacData$Type type
    public void <init>(org.spongycastle.crypto.util.DERMacData$Type, byte[], byte[], byte[], byte[])
    {
        org.spongycastle.crypto.util.DERMacData$Builder r0;
        org.spongycastle.crypto.util.DERMacData$Type $r1;
        byte[] $r2, $r3, $r4, $r5;
        org.spongycastle.asn1.ASN1OctetString $r6;

        r0 := @this: org.spongycastle.crypto.util.DERMacData$Builder;

        $r1 := @parameter0: org.spongycastle.crypto.util.DERMacData$Type;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        $r5 := @parameter4: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.crypto.util.DERMacData$Type type> = $r1;

        $r6 = staticinvoke <org.spongycastle.crypto.util.DerUtil: org.spongycastle.asn1.ASN1OctetString getOctetString(byte[])>($r2);

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idU> = $r6;

        $r6 = staticinvoke <org.spongycastle.crypto.util.DerUtil: org.spongycastle.asn1.ASN1OctetString getOctetString(byte[])>($r3);

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idV> = $r6;

        $r6 = staticinvoke <org.spongycastle.crypto.util.DerUtil: org.spongycastle.asn1.ASN1OctetString getOctetString(byte[])>($r4);

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataU> = $r6;

        $r6 = staticinvoke <org.spongycastle.crypto.util.DerUtil: org.spongycastle.asn1.ASN1OctetString getOctetString(byte[])>($r5);

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataV> = $r6;

        return;
    }
    private byte[] concatenate(byte[], byte[], byte[], byte[], byte[], byte[])
    {
        org.spongycastle.crypto.util.DERMacData$Builder r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.spongycastle.crypto.util.DERMacData$Builder;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        $r5 := @parameter4: byte[];

        $r6 := @parameter5: byte[];

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r1, $r2, $r3);

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r4, $r5, $r6);

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r1, $r2);

        return $r1;
    }
    public org.spongycastle.crypto.util.DERMacData build()
    {
        org.spongycastle.crypto.util.DERMacData$Builder r0;
        int[] $r1;
        org.spongycastle.crypto.util.DERMacData$Type $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        org.spongycastle.crypto.util.DERMacData $r4;
        byte[] $r5, $r7, $r8, $r9, $r10, $r11;
        org.spongycastle.asn1.ASN1OctetString $r6;

        r0 := @this: org.spongycastle.crypto.util.DERMacData$Builder;

        $r1 = <org.spongycastle.crypto.util.DERMacData$1: int[] $SwitchMap$org$spongycastle$crypto$util$DERMacData$Type>;

        $r2 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.crypto.util.DERMacData$Type type>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.util.DERMacData$Type: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unknown type encountered in build");

        throw $r3;

     label2:
        $r4 = new org.spongycastle.crypto.util.DERMacData;

        $r2 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.crypto.util.DERMacData$Type type>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.util.DERMacData$Type: byte[] getHeader()>();

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idU>;

        $r7 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idV>;

        $r8 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataU>;

        $r9 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataV>;

        $r10 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r11 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: byte[] text>;

        $r5 = specialinvoke r0.<org.spongycastle.crypto.util.DERMacData$Builder: byte[] concatenate(byte[],byte[],byte[],byte[],byte[],byte[])>($r5, $r7, $r8, $r9, $r10, $r11);

        specialinvoke $r4.<org.spongycastle.crypto.util.DERMacData: void <init>(byte[],org.spongycastle.crypto.util.DERMacData$1)>($r5, null);

        return $r4;

     label3:
        $r4 = new org.spongycastle.crypto.util.DERMacData;

        $r2 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.crypto.util.DERMacData$Type type>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.util.DERMacData$Type: byte[] getHeader()>();

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idV>;

        $r7 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString idU>;

        $r8 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataV>;

        $r9 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r6 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: org.spongycastle.asn1.ASN1OctetString ephemDataU>;

        $r10 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r6);

        $r11 = r0.<org.spongycastle.crypto.util.DERMacData$Builder: byte[] text>;

        $r5 = specialinvoke r0.<org.spongycastle.crypto.util.DERMacData$Builder: byte[] concatenate(byte[],byte[],byte[],byte[],byte[],byte[])>($r5, $r7, $r8, $r9, $r10, $r11);

        specialinvoke $r4.<org.spongycastle.crypto.util.DERMacData: void <init>(byte[],org.spongycastle.crypto.util.DERMacData$1)>($r5, null);

        return $r4;
    }
    public org.spongycastle.crypto.util.DERMacData$Builder withText(byte[])
    {
        org.spongycastle.crypto.util.DERMacData$Builder r0;
        byte[] $r1;
        org.spongycastle.asn1.DERTaggedObject $r2;
        org.spongycastle.asn1.ASN1OctetString $r3;

        r0 := @this: org.spongycastle.crypto.util.DERMacData$Builder;

        $r1 := @parameter0: byte[];

        $r2 = new org.spongycastle.asn1.DERTaggedObject;

        $r3 = staticinvoke <org.spongycastle.crypto.util.DerUtil: org.spongycastle.asn1.ASN1OctetString getOctetString(byte[])>($r1);

        specialinvoke $r2.<org.spongycastle.asn1.DERTaggedObject: void <init>(boolean,int,org.spongycastle.asn1.ASN1Encodable)>(0, 0, $r3);

        $r1 = staticinvoke <org.spongycastle.crypto.util.DerUtil: byte[] toByteArray(org.spongycastle.asn1.ASN1Primitive)>($r2);

        r0.<org.spongycastle.crypto.util.DERMacData$Builder: byte[] text> = $r1;

        return r0;
    }
