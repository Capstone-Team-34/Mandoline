org.spongycastle.crypto.encodings.PKCS1Encoding extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private static final int HEADER_LENGTH
public static final java.lang.String NOT_STRICT_LENGTH_ENABLED_PROPERTY
public static final java.lang.String STRICT_LENGTH_ENABLED_PROPERTY
private org.spongycastle.crypto.AsymmetricBlockCipher engine
private byte[] fallback
private boolean forEncryption
private boolean forPrivateKey
private int pLen
private java.security.SecureRandom random
private boolean useStrictLength
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen> = -1;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback> = null;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrict()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength> = $z0;

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, int)
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen> = -1;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback> = null;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrict()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength> = $z0;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen> = $i0;

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, byte[])
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        byte[] $r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen> = -1;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback> = null;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrict()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength> = $z0;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback> = $r2;

        $i0 = lengthof $r2;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen> = $i0;

        return;
    }
    private static int checkPkcs1Encoding(byte[], int)
    {
        byte[] $r0;
        int $i0, i1, $i3, $i4, $i5, $i6;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b2 = $r0[0];

        $i3 = $b2 ^ 2;

        i1 = lengthof $r0;

        $i4 = $i0 + 1;

        i1 = i1 - $i4;

        $i4 = 1;

     label1:
        if $i4 >= i1 goto label2;

        $b2 = $r0[$i4];

        $i5 = $b2 >> 1;

        $i5 = $b2 | $i5;

        $i6 = $i5 >> 2;

        $i5 = $i5 | $i6;

        $i6 = $i5 >> 4;

        $i5 = $i5 | $i6;

        $i5 = $i5 & 1;

        $i5 = $i5 + -1;

        $i3 = $i3 | $i5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        i1 = lengthof $r0;

        $i0 = $i0 + 1;

        $i0 = i1 - $i0;

        $b2 = $r0[$i0];

        $i0 = $i3 | $b2;

        $i3 = $i0 >> 1;

        $i0 = $i0 | $i3;

        $i3 = $i0 >> 2;

        $i0 = $i0 | $i3;

        $i3 = $i0 >> 4;

        $i0 = $i0 | $i3;

        $i0 = $i0 & 1;

        $i0 = $i0 + -1;

        $i0 = $i0 ^ -1;

        return $i0;
    }
    private byte[] decodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        byte[] $r1, r4;
        int $i0, $i1, $i4;
        byte b2, b3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r2;
        org.spongycastle.crypto.InvalidCipherTextException $r3;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i4 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        if $i4 == -1 goto label01;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlockOrRandom(byte[],int,int)>($r1, $i0, $i1);

        return $r1;

     label01:
        $r2 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>();

        if $i0 >= $i1 goto label02;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block truncated");

        throw $r3;

     label02:
        b3 = $r1[0];

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey>;

        if $z0 == 0 goto label03;

        if b3 == 2 goto label04;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("unknown block type");

        throw $r3;

     label03:
        if b3 == 1 goto label04;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("unknown block type");

        throw $r3;

     label04:
        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength>;

        if $z0 == 0 goto label05;

        $i0 = lengthof $r1;

        $r2 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        if $i0 == $i1 goto label05;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block incorrect size");

        throw $r3;

     label05:
        $i0 = 1;

     label06:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label07;

        b2 = $r1[$i0];

        if b2 != 0 goto label09;

     label07:
        $i0 = $i0 + 1;

        $i1 = lengthof $r1;

        if $i0 > $i1 goto label08;

        if $i0 >= 10 goto label11;

     label08:
        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("no data in block");

        throw $r3;

     label09:
        if b3 != 1 goto label10;

        if b2 == -1 goto label10;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block padding incorrect");

        throw $r3;

     label10:
        $i0 = $i0 + 1;

        goto label06;

     label11:
        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        r4 = newarray (byte)[$i1];

        $i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r4, 0, $i1);

        return r4;
    }
    private byte[] decodeBlockOrRandom(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        byte[] $r1, r2, r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        org.spongycastle.crypto.InvalidCipherTextException $r3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        java.security.SecureRandom $r6;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey>;

        if $z0 != 0 goto label1;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("sorry, this method is only for decryption, not for signing");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $r1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, $i0, $i1);

        r2 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback>;

        if r2 != null goto label3;

        $i0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        r5 = newarray (byte)[$i0];

        $r6 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random>;

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

     label2:
        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>();

        if $i0 >= $i1 goto label4;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block truncated");

        throw $r3;

     label3:
        r5 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] fallback>;

        goto label2;

     label4:
        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength>;

        if $z0 == 0 goto label5;

        $i0 = lengthof $r1;

        $r4 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        if $i0 == $i1 goto label5;

        $r3 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r3.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block incorrect size");

        throw $r3;

     label5:
        $i0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        $i0 = staticinvoke <org.spongycastle.crypto.encodings.PKCS1Encoding: int checkPkcs1Encoding(byte[],int)>($r1, $i0);

        $i1 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        r2 = newarray (byte)[$i1];

        $i1 = 0;

     label6:
        $i2 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        if $i1 >= $i2 goto label7;

        $i2 = lengthof $r1;

        $i3 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int pLen>;

        $i2 = $i2 - $i3;

        $i2 = $i2 + $i1;

        $b4 = $r1[$i2];

        $i2 = $i0 ^ -1;

        $i2 = $b4 & $i2;

        $b4 = r5[$i1];

        $i3 = $b4 & $i0;

        $i2 = $i2 | $i3;

        $b4 = (byte) $i2;

        r2[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return r2;
    }
    private byte[] encodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        byte[] $r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        boolean $z0;
        java.security.SecureRandom $r5;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: int getInputBlockSize()>();

        if $i1 <= $i2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input data too large");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        r2 = newarray (byte)[$i2];

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey>;

        if $z0 == 0 goto label3;

        r2[0] = 1;

        $i2 = 1;

     label2:
        $i3 = lengthof r2;

        $i3 = $i3 - $i1;

        $i3 = $i3 + -1;

        if $i2 == $i3 goto label7;

        r2[$i2] = -1;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r5 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random>;

        virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        r2[0] = 2;

        $i2 = 1;

     label4:
        $i3 = lengthof r2;

        $i3 = $i3 - $i1;

        $i3 = $i3 + -1;

        if $i2 == $i3 goto label7;

     label5:
        $b4 = r2[$i2];

        if $b4 != 0 goto label6;

        $r5 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random>;

        $i3 = virtualinvoke $r5.<java.security.SecureRandom: int nextInt()>();

        $b4 = (byte) $i3;

        r2[$i2] = $b4;

        goto label5;

     label6:
        $i2 = $i2 + 1;

        goto label4;

     label7:
        $i2 = lengthof r2;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        r2[$i2] = 0;

        $i2 = lengthof r2;

        $i2 = $i2 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, $i2, $i1);

        $r4 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof r2;

        $r1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i0);

        return $r1;
    }
    private boolean useStrict()
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.encodings.PKCS1Encoding$1 $r1;
        java.lang.Object $r2;
        java.lang.String r3, r5;
        org.spongycastle.crypto.encodings.PKCS1Encoding$2 $r4;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $z0 = 0;

        $r1 = new org.spongycastle.crypto.encodings.PKCS1Encoding$1;

        specialinvoke $r1.<org.spongycastle.crypto.encodings.PKCS1Encoding$1: void <init>(org.spongycastle.crypto.encodings.PKCS1Encoding)>(r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        r3 = (java.lang.String) $r2;

        $r4 = new org.spongycastle.crypto.encodings.PKCS1Encoding$2;

        specialinvoke $r4.<org.spongycastle.crypto.encodings.PKCS1Encoding$2: void <init>(org.spongycastle.crypto.encodings.PKCS1Encoding)>(r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);

        r5 = (java.lang.String) $r2;

        if r5 == null goto label2;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label4;

     label3:
        $z0 = 1;

     label4:
        return $z0;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + -10;

     label1:
        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + -10;

        return $i0;
    }
    public org.spongycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        r1 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r4;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter r5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random> = $r3;

        $r4 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r5 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r4;

     label1:
        $r6 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        $z1 = virtualinvoke r5.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey> = $z1;

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption> = $z0;

        return;

     label2:
        r5 = (org.spongycastle.crypto.params.AsymmetricKeyParameter) $r1;

        $z1 = virtualinvoke r5.<org.spongycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random> = $r3;

        goto label1;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.PKCS1Encoding r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
