org.spongycastle.crypto.encodings.OAEPEncoding extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private byte[] defHash
private org.spongycastle.crypto.AsymmetricBlockCipher engine
private boolean forEncryption
private org.spongycastle.crypto.Digest mgf1Hash
private java.security.SecureRandom random
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.digests.SHA1Digest $r2;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,byte[])>($r1, $r2, null);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,byte[])>($r1, $r2, null);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, org.spongycastle.crypto.Digest, byte[])
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2, $r3;
        byte[] $r4, $r5;
        int $i0;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: org.spongycastle.crypto.Digest;

        $r4 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash> = $r3;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r5 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash> = $r5;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void reset()>();

        if $r4 == null goto label1;

        $i0 = lengthof $r4;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i0);

     label1:
        $r4 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r4, 0);

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher, org.spongycastle.crypto.Digest, byte[])
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        org.spongycastle.crypto.Digest $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: byte[];

        specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: void <init>(org.spongycastle.crypto.AsymmetricBlockCipher,org.spongycastle.crypto.Digest,org.spongycastle.crypto.Digest,byte[])>($r1, $r2, $r2, $r3);

        return;
    }
    private void ItoOSP(int, byte[])
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r1[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r1[2] = $b2;

        $i0 = $i0 >>> 0;

        $b2 = (byte) $i0;

        $r1[3] = $b2;

        return;
    }
    private byte[] maskGeneratorFunction1(byte[], int, int, int)
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        byte[] $r1, r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r4 = newarray (byte)[$i2];

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        $i3 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i3];

        r2 = newarray (byte)[4];

        $i3 = 0;

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

     label1:
        $i4 = lengthof r3;

        $i4 = $i2 / $i4;

        if $i3 >= $i4 goto label2;

        specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        $i4 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i4);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i4 = lengthof r3;

        $i4 = $i4 * $i3;

        $i5 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i4, $i5);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i4 = lengthof r3;

        $i4 = $i4 * $i3;

        if $i4 >= $i2 goto label3;

        specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: void ItoOSP(int,byte[])>($i3, r2);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        $i0 = lengthof r2;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i0 = lengthof r3;

        $i0 = $i0 * $i3;

        $i1 = lengthof r4;

        $i2 = lengthof r3;

        $i2 = $i2 * $i3;

        $i1 = $i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i0, $i1);

     label3:
        return r4;
    }
    public byte[] decodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        byte[] $r1, r2, $r5;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;
        org.spongycastle.crypto.InvalidCipherTextException $r4;
        byte $b3, $b4;
        boolean z0;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        r2 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof r2;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        if $i0 >= $i1 goto label02;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i1 = lengthof r2;

        $i0 = $i0 - $i1;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, $i1);

     label01:
        $i0 = lengthof $r1;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof r2;

        $i1 = $i1 * 2;

        $i1 = $i1 + 1;

        if $i0 >= $i1 goto label03;

        $r4 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data too short");

        throw $r4;

     label02:
        $r1 = r2;

        goto label01;

     label03:
        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof r2;

        $i1 = lengthof $r1;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof r2;

        $i1 = $i1 - $i2;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof r2;

        r2 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        $i0 = 0;

     label04:
        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label05;

        $b3 = $r1[$i0];

        $b4 = r2[$i0];

        $i1 = $b3 ^ $b4;

        $b3 = (byte) $i1;

        $r1[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof r2;

        $i1 = lengthof $r1;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof r2;

        $i1 = $i1 - $i2;

        r2 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, 0, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r5;

     label06:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label07;

        $b3 = $r1[$i0];

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r5;

        $i1 = $i0 - $i1;

        $b4 = r2[$i1];

        $i1 = $b3 ^ $b4;

        $b3 = (byte) $i1;

        $r1[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label06;

     label07:
        z0 = 0;

        $i0 = 0;

     label08:
        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof r2;

        if $i0 == $i1 goto label10;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $b3 = r2[$i0];

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof r2;

        $i1 = $i1 + $i0;

        $b4 = $r1[$i1];

        if $b3 == $b4 goto label09;

        z0 = 1;

     label09:
        $i0 = $i0 + 1;

        goto label08;

     label10:
        if z0 == 0 goto label11;

        $r4 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data hash wrong");

        throw $r4;

     label11:
        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof r2;

        $i0 = $i0 * 2;

     label12:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label13;

        $b3 = $r1[$i0];

        if $b3 == 0 goto label15;

     label13:
        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label14;

        $b3 = $r1[$i0];

        if $b3 == 1 goto label16;

     label14:
        $r4 = new org.spongycastle.crypto.InvalidCipherTextException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data start wrong ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label15:
        $i0 = $i0 + 1;

        goto label12;

     label16:
        $i0 = $i0 + 1;

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        r2 = newarray (byte)[$i1];

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

        return r2;
    }
    public byte[] encodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        byte[] $r1, r2, $r3, $r5;
        int $i0, $i1, $i2, $i3;
        java.security.SecureRandom $r4;
        byte $b4, $b5;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i3 = lengthof r2;

        $i3 = $i3 * 2;

        $i2 = $i2 + $i3;

        r2 = newarray (byte)[$i2];

        $i2 = lengthof r2;

        $i2 = $i2 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, $i2, $i1);

        $i0 = lengthof r2;

        $i0 = $i0 - $i1;

        $i0 = $i0 + -1;

        r2[$i0] = 1;

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r3;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r1);

        $i0 = lengthof $r1;

        $i1 = lengthof r2;

        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof $r3;

        $i1 = $i1 - $i2;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>($r1, 0, $i0, $i1);

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r5;

     label1:
        $i1 = lengthof r2;

        if $i0 == $i1 goto label2;

        $b4 = r2[$i0];

        $r5 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r5;

        $i1 = $i0 - $i1;

        $b5 = $r3[$i1];

        $i1 = $b4 ^ $b5;

        $b4 = (byte) $i1;

        r2[$i0] = $b4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i0 = lengthof $r1;

        $i1 = lengthof r2;

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof $r1;

        $i1 = $i1 - $i2;

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i2 = lengthof $r1;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r2, $i0, $i1, $i2);

        $i0 = 0;

     label3:
        $r3 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label4;

        $b4 = r2[$i0];

        $b5 = $r1[$i0];

        $i1 = $b4 ^ $b5;

        $b4 = (byte) $i1;

        r2[$i0] = $b4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof r2;

        $r1 = interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i0);

        return $r1;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        int $i0, $i1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + -1;

        $r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 2;

        $i0 = $i0 - $i1;

     label1:
        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        int $i0, $i1;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + -1;

        $r2 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 2;

        $i0 = $i0 - $i1;

        return $i0;
    }
    public org.spongycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        r1 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.ParametersWithRandom r3;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r3 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r2 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random> = $r2;

     label1:
        $r4 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: boolean forEncryption> = $z0;

        return;

     label2:
        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random> = $r2;

        goto label1;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.OAEPEncoding r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.OAEPEncoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] encodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.spongycastle.crypto.encodings.OAEPEncoding: byte[] decodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
