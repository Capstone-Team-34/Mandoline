org.spongycastle.crypto.encodings.ISO9796d1Encoding extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private static final java.math.BigInteger SIX
private static final java.math.BigInteger SIXTEEN
private static byte[] inverse
private static byte[] shadows
private int bitSize
private org.spongycastle.crypto.AsymmetricBlockCipher engine
private boolean forEncryption
private java.math.BigInteger modulus
private int padBits
    static void <clinit>()
    {
        java.math.BigInteger $r0;
        byte[] $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(16L);

        <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIXTEEN> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6L);

        <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIX> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = 14;

        $r1[1] = 3;

        $r1[2] = 5;

        $r1[3] = 8;

        $r1[4] = 9;

        $r1[5] = 4;

        $r1[6] = 2;

        $r1[7] = 15;

        $r1[8] = 0;

        $r1[9] = 13;

        $r1[10] = 11;

        $r1[11] = 6;

        $r1[12] = 7;

        $r1[13] = 10;

        $r1[14] = 12;

        $r1[15] = 1;

        <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows> = $r1;

        $r1 = newarray (byte)[16];

        $r1[0] = 8;

        $r1[1] = 15;

        $r1[2] = 6;

        $r1[3] = 1;

        $r1[4] = 5;

        $r1[5] = 2;

        $r1[6] = 11;

        $r1[7] = 12;

        $r1[8] = 3;

        $r1[9] = 4;

        $r1[10] = 13;

        $r1[11] = 10;

        $r1[12] = 14;

        $r1[13] = 9;

        $r1[14] = 0;

        $r1[15] = 7;

        <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] inverse> = $r1;

        return;
    }
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int padBits> = 0;

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        return;
    }
    private static byte[] convertOutputDecryptOnly(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int $i0;
        byte[] $r1, r2;
        byte $b1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b1 = $r1[0];

        if $b1 != 0 goto label1;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r2, 0, $i0);

        return r2;

     label1:
        return $r1;
    }
    private byte[] decodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        byte[] $r1, r3;
        int $i0, $i1, i2, $i3, $i5, $i6;
        java.math.BigInteger r2, $r5, $r6;
        org.spongycastle.crypto.AsymmetricBlockCipher $r4;
        boolean $z0;
        byte $b4;
        org.spongycastle.crypto.InvalidCipherTextException $r7;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r4 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $r1 = interfaceinvoke $r4.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, $i0, $i1);

        $i0 = 1;

        $i1 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int bitSize>;

        $i1 = $i1 + 13;

        $i1 = $i1 / 16;

        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r1);

        $r5 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIXTEEN>;

        $r5 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r5);

        $r6 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIX>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label02;

     label01:
        $r1 = staticinvoke <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] convertOutputDecryptOnly(java.math.BigInteger)>(r2);

        $i3 = lengthof $r1;

        $i3 = $i3 + -1;

        $b4 = $r1[$i3];

        $i3 = $b4 & 15;

        if $i3 == 6 goto label04;

        $r7 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r7.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("invalid forcing byte in block");

        throw $r7;

     label02:
        $r5 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger modulus>;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        $r6 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIXTEEN>;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r6);

        $r6 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger SIX>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label03;

        $r5 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger modulus>;

        r2 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        goto label01;

     label03:
        $r7 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r7.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("resulting integer iS or (modulus - iS) is not congruent to 6 mod 16");

        throw $r7;

     label04:
        $i3 = lengthof $r1;

        $i3 = $i3 + -1;

        $i5 = lengthof $r1;

        $i5 = $i5 + -1;

        $b4 = $r1[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 >>> 4;

        r3 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] inverse>;

        i2 = lengthof $r1;

        i2 = i2 + -2;

        $b4 = $r1[i2];

        i2 = $b4 & 255;

        i2 = i2 >> 4;

        $b4 = r3[i2];

        i2 = $b4 << 4;

        $i5 = $i5 | i2;

        $b4 = (byte) $i5;

        $r1[$i3] = $b4;

        r3 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        $b4 = $r1[1];

        $i3 = $b4 & 255;

        $i3 = $i3 >>> 4;

        $b4 = r3[$i3];

        $i3 = $b4 << 4;

        r3 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        $b4 = $r1[1];

        $i5 = $b4 & 15;

        $b4 = r3[$i5];

        $i3 = $i3 | $b4;

        $b4 = (byte) $i3;

        $r1[0] = $b4;

        $z0 = 0;

        $i3 = 0;

        $i5 = lengthof $r1;

        $i5 = $i5 + -1;

     label05:
        i2 = lengthof $r1;

        $i6 = $i1 * 2;

        i2 = i2 - $i6;

        if $i5 < i2 goto label08;

        r3 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        $b4 = $r1[$i5];

        i2 = $b4 & 255;

        i2 = i2 >>> 4;

        $b4 = r3[i2];

        i2 = $b4 << 4;

        r3 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        $b4 = $r1[$i5];

        $i6 = $b4 & 15;

        $b4 = r3[$i6];

        i2 = i2 | $b4;

        $i6 = $i5 + -1;

        $b4 = $r1[$i6];

        $i6 = $b4 ^ i2;

        $i6 = $i6 & 255;

        if $i6 == 0 goto label06;

        if $z0 != 0 goto label07;

        $z0 = 1;

        $i0 = $i5 + -1;

        $b4 = $r1[$i0];

        $i0 = $b4 ^ i2;

        $i0 = $i0 & 255;

        $i3 = $i5 + -1;

     label06:
        $i5 = $i5 + -2;

        goto label05;

     label07:
        $r7 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r7.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("invalid tsums in block");

        throw $r7;

     label08:
        $r1[$i3] = 0;

        $i1 = lengthof $r1;

        $i1 = $i1 - $i3;

        $i1 = $i1 / 2;

        r3 = newarray (byte)[$i1];

        $i1 = 0;

     label09:
        $i5 = lengthof r3;

        if $i1 >= $i5 goto label10;

        $i5 = $i1 * 2;

        $i5 = $i5 + $i3;

        $i5 = $i5 + 1;

        $b4 = $r1[$i5];

        r3[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $i0 = $i0 + -1;

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int padBits> = $i0;

        return r3;
    }
    private byte[] encodeBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        byte[] $r1, r2;
        int $i0, $i1, i2, i3, i5, $i6, $i7, $i8;
        byte b4, $b9;
        org.spongycastle.crypto.AsymmetricBlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int bitSize>;

        i2 = i2 + 7;

        i2 = i2 / 8;

        r2 = newarray (byte)[i2];

        i2 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int padBits>;

        i2 = i2 + 1;

        i3 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int bitSize>;

        i3 = i3 + 13;

        i3 = i3 / 16;

        i5 = 0;

     label1:
        if i5 >= i3 goto label4;

        $i6 = i3 - $i1;

        if i5 <= $i6 goto label3;

        $i6 = $i0 + $i1;

        $i7 = i3 - i5;

        $i6 = $i6 - $i7;

        $i7 = lengthof r2;

        $i7 = $i7 - i3;

        $i8 = i3 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i6, r2, $i7, $i8);

     label2:
        i5 = i5 + $i1;

        goto label1;

     label3:
        $i6 = lengthof r2;

        $i7 = i5 + $i1;

        $i6 = $i6 - $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, $i6, $i1);

        goto label2;

     label4:
        $i0 = lengthof r2;

        i5 = i3 * 2;

        $i0 = $i0 - i5;

     label5:
        i5 = lengthof r2;

        if $i0 == i5 goto label6;

        i5 = lengthof r2;

        i5 = i5 - i3;

        $i6 = $i0 / 2;

        i5 = i5 + $i6;

        b4 = r2[i5];

        $r1 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        i5 = b4 & 255;

        i5 = i5 >>> 4;

        $b9 = $r1[i5];

        i5 = $b9 << 4;

        $r1 = <org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] shadows>;

        $i6 = b4 & 15;

        $b9 = $r1[$i6];

        i5 = i5 | $b9;

        $b9 = (byte) i5;

        r2[$i0] = $b9;

        i5 = $i0 + 1;

        r2[i5] = b4;

        $i0 = $i0 + 2;

        goto label5;

     label6:
        $i0 = lengthof r2;

        $i1 = $i1 * 2;

        $i0 = $i0 - $i1;

        b4 = r2[$i0];

        $i1 = b4 ^ i2;

        b4 = (byte) $i1;

        r2[$i0] = b4;

        $i0 = lengthof r2;

        $i0 = $i0 + -1;

        $i1 = lengthof r2;

        $i1 = $i1 + -1;

        b4 = r2[$i1];

        $i1 = b4 << 4;

        $i1 = $i1 | 6;

        b4 = (byte) $i1;

        r2[$i0] = b4;

        $i0 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int bitSize>;

        $i0 = $i0 + -1;

        $i0 = $i0 % 8;

        $i0 = 8 - $i0;

        b4 = 0;

        if $i0 == 8 goto label8;

        $b9 = r2[0];

        $i1 = 255 >>> $i0;

        $i1 = $b9 & $i1;

        $b9 = (byte) $i1;

        r2[0] = $b9;

        $b9 = r2[0];

        $i0 = 128 >>> $i0;

        $i0 = $b9 | $i0;

        $b9 = (byte) $i0;

        r2[0] = $b9;

     label7:
        $r3 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof r2;

        $i0 = $i0 - b4;

        $r1 = interfaceinvoke $r3.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, b4, $i0);

        return $r1;

     label8:
        r2[0] = 0;

        b4 = r2[1];

        $i0 = b4 | 128;

        b4 = (byte) $i0;

        r2[1] = b4;

        b4 = 1;

        goto label7;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + 1;

        $i0 = $i0 / 2;

     label1:
        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $z0 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + 1;

        $i0 = $i0 / 2;

        return $i0;
    }
    public int getPadBits()
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        i0 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int padBits>;

        return i0;
    }
    public org.spongycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        org.spongycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        r1 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        boolean $z0, $z1;
        org.spongycastle.crypto.CipherParameters $r1, $r3;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        org.spongycastle.crypto.params.RSAKeyParameters r4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        java.math.BigInteger $r6;
        int $i0;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.RSAKeyParameters) $r3;

     label1:
        $r5 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: org.spongycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        $r6 = virtualinvoke r4.<org.spongycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger modulus> = $r6;

        $r6 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: java.math.BigInteger modulus>;

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int bitSize> = $i0;

        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: boolean forEncryption> = $z0;

        return;

     label2:
        r4 = (org.spongycastle.crypto.params.RSAKeyParameters) $r1;

        goto label1;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] encodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: byte[] decodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
    public void setPadBits(int)
    {
        org.spongycastle.crypto.encodings.ISO9796d1Encoding r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.crypto.encodings.ISO9796d1Encoding;

        $i0 := @parameter0: int;

        if $i0 <= 7 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("padBits > 7");

        throw $r1;

     label1:
        r0.<org.spongycastle.crypto.encodings.ISO9796d1Encoding: int padBits> = $i0;

        return;
    }
