org.spongycastle.crypto.params.KDFFeedbackParameters extends java.lang.Object implements org.spongycastle.crypto.DerivationParameters
private static final int UNUSED_R
private final byte[] fixedInputData
private final byte[] iv
private final byte[] ki
private final int r
private final boolean useCounter
    private void <init>(byte[], byte[], byte[], int, boolean)
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        byte[] $r1, $r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A KDF requires Ki (a seed) as input");

        throw $r4;

     label1:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] ki> = $r1;

        if $r3 != null goto label4;

        $r1 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] fixedInputData> = $r1;

     label2:
        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: int r> = $i0;

        if $r2 != null goto label5;

        $r1 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] iv> = $r1;

     label3:
        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: boolean useCounter> = $z0;

        return;

     label4:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] fixedInputData> = $r1;

        goto label2;

     label5:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] iv> = $r1;

        goto label3;
    }
    public static org.spongycastle.crypto.params.KDFFeedbackParameters createWithCounter(byte[], byte[], byte[], int)
    {
        byte[] $r0, $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.params.KDFFeedbackParameters $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        if $i0 == 8 goto label1;

        if $i0 == 16 goto label1;

        if $i0 == 24 goto label1;

        if $i0 == 32 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of counter should be 8, 16, 24 or 32");

        throw $r3;

     label1:
        $r4 = new org.spongycastle.crypto.params.KDFFeedbackParameters;

        specialinvoke $r4.<org.spongycastle.crypto.params.KDFFeedbackParameters: void <init>(byte[],byte[],byte[],int,boolean)>($r0, $r1, $r2, $i0, 1);

        return $r4;
    }
    public static org.spongycastle.crypto.params.KDFFeedbackParameters createWithoutCounter(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        org.spongycastle.crypto.params.KDFFeedbackParameters $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 = new org.spongycastle.crypto.params.KDFFeedbackParameters;

        specialinvoke $r3.<org.spongycastle.crypto.params.KDFFeedbackParameters: void <init>(byte[],byte[],byte[],int,boolean)>($r0, $r1, $r2, -1, 0);

        return $r3;
    }
    public byte[] getFixedInputData()
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        $r1 = r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] fixedInputData>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getIV()
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        r1 = r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] iv>;

        return r1;
    }
    public byte[] getKI()
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        r1 = r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: byte[] ki>;

        return r1;
    }
    public int getR()
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        i0 = r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: int r>;

        return i0;
    }
    public boolean useCounter()
    {
        org.spongycastle.crypto.params.KDFFeedbackParameters r0;
        boolean z0;

        r0 := @this: org.spongycastle.crypto.params.KDFFeedbackParameters;

        z0 = r0.<org.spongycastle.crypto.params.KDFFeedbackParameters: boolean useCounter>;

        return z0;
    }
