org.spongycastle.crypto.params.DHPrivateKeyParameters extends org.spongycastle.crypto.params.DHKeyParameters
private java.math.BigInteger x
    public void <init>(java.math.BigInteger, org.spongycastle.crypto.params.DHParameters)
    {
        org.spongycastle.crypto.params.DHPrivateKeyParameters r0;
        java.math.BigInteger $r1;
        org.spongycastle.crypto.params.DHParameters $r2;

        r0 := @this: org.spongycastle.crypto.params.DHPrivateKeyParameters;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: org.spongycastle.crypto.params.DHParameters;

        specialinvoke r0.<org.spongycastle.crypto.params.DHKeyParameters: void <init>(boolean,org.spongycastle.crypto.params.DHParameters)>(1, $r2);

        r0.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger x> = $r1;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.crypto.params.DHPrivateKeyParameters r0, r3;
        java.lang.Object $r1;
        java.math.BigInteger $r2, $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.params.DHPrivateKeyParameters;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.DHPrivateKeyParameters;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = (org.spongycastle.crypto.params.DHPrivateKeyParameters) $r1;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger getX()>();

        $r2 = r0.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger x>;

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.params.DHKeyParameters: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public java.math.BigInteger getX()
    {
        org.spongycastle.crypto.params.DHPrivateKeyParameters r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.params.DHPrivateKeyParameters;

        r1 = r0.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger x>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.crypto.params.DHPrivateKeyParameters r0;
        java.math.BigInteger $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.params.DHPrivateKeyParameters;

        $r1 = r0.<org.spongycastle.crypto.params.DHPrivateKeyParameters: java.math.BigInteger x>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i1 = specialinvoke r0.<org.spongycastle.crypto.params.DHKeyParameters: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }
