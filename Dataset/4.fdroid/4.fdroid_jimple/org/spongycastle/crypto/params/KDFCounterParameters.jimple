org.spongycastle.crypto.params.KDFCounterParameters extends java.lang.Object implements org.spongycastle.crypto.DerivationParameters
private byte[] fixedInputDataCounterPrefix
private byte[] fixedInputDataCounterSuffix
private byte[] ki
private int r
    public void <init>(byte[], byte[], int)
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        specialinvoke r0.<org.spongycastle.crypto.params.KDFCounterParameters: void <init>(byte[],byte[],byte[],int)>($r1, null, $r2, $i0);

        return;
    }
    public void <init>(byte[], byte[], byte[], int)
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] $r1, $r2, $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A KDF requires Ki (a seed) as input");

        throw $r4;

     label1:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] ki> = $r1;

        if $r2 != null goto label4;

        $r1 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterPrefix> = $r1;

     label2:
        if $r3 != null goto label5;

        $r1 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterSuffix> = $r1;

     label3:
        if $i0 == 8 goto label6;

        if $i0 == 16 goto label6;

        if $i0 == 24 goto label6;

        if $i0 == 32 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of counter should be 8, 16, 24 or 32");

        throw $r4;

     label4:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterPrefix> = $r1;

        goto label2;

     label5:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterSuffix> = $r1;

        goto label3;

     label6:
        r0.<org.spongycastle.crypto.params.KDFCounterParameters: int r> = $i0;

        return;
    }
    public byte[] getFixedInputData()
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        $r1 = r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterSuffix>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getFixedInputDataCounterPrefix()
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        $r1 = r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterPrefix>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getFixedInputDataCounterSuffix()
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        $r1 = r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] fixedInputDataCounterSuffix>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getKI()
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        byte[] r1;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        r1 = r0.<org.spongycastle.crypto.params.KDFCounterParameters: byte[] ki>;

        return r1;
    }
    public int getR()
    {
        org.spongycastle.crypto.params.KDFCounterParameters r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.params.KDFCounterParameters;

        i0 = r0.<org.spongycastle.crypto.params.KDFCounterParameters: int r>;

        return i0;
    }
