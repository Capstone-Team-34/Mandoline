org.spongycastle.crypto.params.ECPublicKeyParameters extends org.spongycastle.crypto.params.ECKeyParameters
org.spongycastle.math.ec.ECPoint Q
    public void <init>(org.spongycastle.math.ec.ECPoint, org.spongycastle.crypto.params.ECDomainParameters)
    {
        org.spongycastle.crypto.params.ECPublicKeyParameters r0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.crypto.params.ECDomainParameters $r2;

        r0 := @this: org.spongycastle.crypto.params.ECPublicKeyParameters;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: org.spongycastle.crypto.params.ECDomainParameters;

        specialinvoke r0.<org.spongycastle.crypto.params.ECKeyParameters: void <init>(boolean,org.spongycastle.crypto.params.ECDomainParameters)>(0, $r2);

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        r0.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint Q> = $r1;

        return;
    }
    public org.spongycastle.math.ec.ECPoint getQ()
    {
        org.spongycastle.crypto.params.ECPublicKeyParameters r0;
        org.spongycastle.math.ec.ECPoint r1;

        r0 := @this: org.spongycastle.crypto.params.ECPublicKeyParameters;

        r1 = r0.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint Q>;

        return r1;
    }
