org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters extends org.spongycastle.crypto.KeyGenerationParameters
private int certainty
private int cntSmallPrimes
private boolean debug
    public void <init>(java.security.SecureRandom, int, int, int)
    {
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters r0;
        java.security.SecureRandom $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters;

        $r1 := @parameter0: java.security.SecureRandom;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: void <init>(java.security.SecureRandom,int,int,int,boolean)>($r1, $i0, $i1, $i2, 0);

        return;
    }
    public void <init>(java.security.SecureRandom, int, int, int, boolean)
    {
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters r0;
        java.security.SecureRandom $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters;

        $r1 := @parameter0: java.security.SecureRandom;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $z0 := @parameter4: boolean;

        specialinvoke r0.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r1, $i0);

        r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: boolean debug> = 0;

        r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int certainty> = $i1;

        $i0 = $i2 % 2;

        if $i0 != 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cntSmallPrimes must be a multiple of 2");

        throw $r2;

     label1:
        if $i2 >= 30 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cntSmallPrimes must be >= 30 for security reasons");

        throw $r2;

     label2:
        r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int cntSmallPrimes> = $i2;

        r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: boolean debug> = $z0;

        return;
    }
    public int getCertainty()
    {
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters;

        i0 = r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int certainty>;

        return i0;
    }
    public int getCntSmallPrimes()
    {
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters;

        i0 = r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: int cntSmallPrimes>;

        return i0;
    }
    public boolean isDebug()
    {
        org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters r0;
        boolean z0;

        r0 := @this: org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters;

        z0 = r0.<org.spongycastle.crypto.params.NaccacheSternKeyGenerationParameters: boolean debug>;

        return z0;
    }
