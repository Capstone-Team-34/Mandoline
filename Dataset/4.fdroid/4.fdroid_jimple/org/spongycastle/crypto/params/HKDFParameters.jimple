org.spongycastle.crypto.params.HKDFParameters extends java.lang.Object implements org.spongycastle.crypto.DerivationParameters
private final byte[] ikm
private final byte[] info
private final byte[] salt
private final boolean skipExpand
    private void <init>(byte[], boolean, byte[], byte[])
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        byte[] $r1, $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        int $i0;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IKM (input keying material) should not be null");

        throw $r4;

     label1:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] ikm> = $r1;

        r0.<org.spongycastle.crypto.params.HKDFParameters: boolean skipExpand> = $z0;

        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label4;

     label2:
        r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] salt> = null;

     label3:
        if $r3 != null goto label5;

        $r1 = newarray (byte)[0];

        r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] info> = $r1;

        return;

     label4:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] salt> = $r1;

        goto label3;

     label5:
        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r3);

        r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] info> = $r1;

        return;
    }
    public void <init>(byte[], byte[], byte[])
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        byte[] $r1, $r2, $r3;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        specialinvoke r0.<org.spongycastle.crypto.params.HKDFParameters: void <init>(byte[],boolean,byte[],byte[])>($r1, 0, $r2, $r3);

        return;
    }
    public static org.spongycastle.crypto.params.HKDFParameters defaultParameters(byte[])
    {
        byte[] $r0;
        org.spongycastle.crypto.params.HKDFParameters $r1;

        $r0 := @parameter0: byte[];

        $r1 = new org.spongycastle.crypto.params.HKDFParameters;

        specialinvoke $r1.<org.spongycastle.crypto.params.HKDFParameters: void <init>(byte[],boolean,byte[],byte[])>($r0, 0, null, null);

        return $r1;
    }
    public static org.spongycastle.crypto.params.HKDFParameters skipExtractParameters(byte[], byte[])
    {
        byte[] $r0, $r1;
        org.spongycastle.crypto.params.HKDFParameters $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new org.spongycastle.crypto.params.HKDFParameters;

        specialinvoke $r2.<org.spongycastle.crypto.params.HKDFParameters: void <init>(byte[],boolean,byte[],byte[])>($r0, 1, null, $r1);

        return $r2;
    }
    public byte[] getIKM()
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        $r1 = r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] ikm>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getInfo()
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        $r1 = r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] info>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[] getSalt()
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        $r1 = r0.<org.spongycastle.crypto.params.HKDFParameters: byte[] salt>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public boolean skipExtract()
    {
        org.spongycastle.crypto.params.HKDFParameters r0;
        boolean z0;

        r0 := @this: org.spongycastle.crypto.params.HKDFParameters;

        z0 = r0.<org.spongycastle.crypto.params.HKDFParameters: boolean skipExpand>;

        return z0;
    }
