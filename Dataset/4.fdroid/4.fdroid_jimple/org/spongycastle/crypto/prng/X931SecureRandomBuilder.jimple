org.spongycastle.crypto.prng.X931SecureRandomBuilder extends java.lang.Object
private byte[] dateTimeVector
private org.spongycastle.crypto.BlockCipher engine
private org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.prng.X931SecureRandomBuilder r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.crypto.prng.X931SecureRandomBuilder;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: void <init>(java.security.SecureRandom,boolean)>($r1, 0);

        return;
    }
    public void <init>(java.security.SecureRandom, boolean)
    {
        org.spongycastle.crypto.prng.X931SecureRandomBuilder r0;
        java.security.SecureRandom $r1;
        boolean $z0;
        org.spongycastle.crypto.prng.BasicEntropySourceProvider $r2;

        r0 := @this: org.spongycastle.crypto.prng.X931SecureRandomBuilder;

        $r1 := @parameter0: java.security.SecureRandom;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: java.security.SecureRandom random> = $r1;

        $r2 = new org.spongycastle.crypto.prng.BasicEntropySourceProvider;

        $r1 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: java.security.SecureRandom random>;

        specialinvoke $r2.<org.spongycastle.crypto.prng.BasicEntropySourceProvider: void <init>(java.security.SecureRandom,boolean)>($r1, $z0);

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider> = $r2;

        return;
    }
    public void <init>(org.spongycastle.crypto.prng.EntropySourceProvider)
    {
        org.spongycastle.crypto.prng.X931SecureRandomBuilder r0;
        org.spongycastle.crypto.prng.EntropySourceProvider $r1;

        r0 := @this: org.spongycastle.crypto.prng.X931SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.prng.EntropySourceProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: java.security.SecureRandom random> = null;

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider> = $r1;

        return;
    }
    public org.spongycastle.crypto.prng.X931SecureRandom build(org.spongycastle.crypto.BlockCipher, org.spongycastle.crypto.params.KeyParameter, boolean)
    {
        org.spongycastle.crypto.prng.X931SecureRandomBuilder r0;
        org.spongycastle.crypto.BlockCipher $r1;
        org.spongycastle.crypto.params.KeyParameter $r2;
        boolean $z0;
        org.spongycastle.crypto.prng.X931RNG $r3;
        byte[] $r4, $r9;
        int $i0;
        long $l1;
        org.spongycastle.crypto.prng.X931SecureRandom $r5;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.prng.EntropySourceProvider $r7;
        org.spongycastle.crypto.prng.EntropySource $r8;

        r0 := @this: org.spongycastle.crypto.prng.X931SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $r2 := @parameter1: org.spongycastle.crypto.params.KeyParameter;

        $z0 := @parameter2: boolean;

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: org.spongycastle.crypto.BlockCipher engine> = $r1;

        $r4 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector>;

        if $r4 != null goto label1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        if $i0 != 8 goto label2;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = staticinvoke <org.spongycastle.util.Pack: byte[] longToBigEndian(long)>($l1);

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector> = $r4;

     label1:
        interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r2);

        $r5 = new org.spongycastle.crypto.prng.X931SecureRandom;

        $r6 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: java.security.SecureRandom random>;

        $r3 = new org.spongycastle.crypto.prng.X931RNG;

        $r4 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r8 = interfaceinvoke $r7.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i0);

        specialinvoke $r3.<org.spongycastle.crypto.prng.X931RNG: void <init>(org.spongycastle.crypto.BlockCipher,byte[],org.spongycastle.crypto.prng.EntropySource)>($r1, $r4, $r8);

        specialinvoke $r5.<org.spongycastle.crypto.prng.X931SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.X931RNG,boolean)>($r6, $r3, $z0);

        return $r5;

     label2:
        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector> = $r4;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = staticinvoke <org.spongycastle.util.Pack: byte[] longToBigEndian(long)>($l1);

        $r9 = r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r9, 0, $i0);

        goto label1;
    }
    public org.spongycastle.crypto.prng.X931SecureRandomBuilder setDateTimeVector(byte[])
    {
        org.spongycastle.crypto.prng.X931SecureRandomBuilder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.prng.X931SecureRandomBuilder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.prng.X931SecureRandomBuilder: byte[] dateTimeVector> = $r1;

        return r0;
    }
