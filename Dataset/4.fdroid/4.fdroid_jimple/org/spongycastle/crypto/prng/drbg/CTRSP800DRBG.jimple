org.spongycastle.crypto.prng.drbg.CTRSP800DRBG extends java.lang.Object implements org.spongycastle.crypto.prng.drbg.SP80090DRBG
private static final int AES_MAX_BITS_REQUEST
private static final long AES_RESEED_MAX
private static final byte[] K_BITS
private static final int TDEA_MAX_BITS_REQUEST
private static final long TDEA_RESEED_MAX
private byte[] _Key
private byte[] _V
private org.spongycastle.crypto.BlockCipher _engine
private org.spongycastle.crypto.prng.EntropySource _entropySource
private boolean _isTDEA
private int _keySizeInBits
private long _reseedCounter
private int _securityStrength
private int _seedLength
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] decode(java.lang.String)>("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F");

        <org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] K_BITS> = $r0;

        return;
    }
    public void <init>(org.spongycastle.crypto.BlockCipher, int, int, org.spongycastle.crypto.prng.EntropySource, byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.prng.EntropySource $r2;
        byte[] $r3, $r4, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: org.spongycastle.crypto.prng.EntropySource;

        $r3 := @parameter4: byte[];

        $r4 := @parameter5: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter> = 0L;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean _isTDEA> = 0;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource> = $r2;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine> = $r1;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _keySizeInBits> = $i0;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _securityStrength> = $i1;

        $i2 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i2 = $i2 * 8;

        $i2 = $i2 + $i0;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _seedLength> = $i2;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean isTDEA(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean _isTDEA> = $z0;

        if $i1 <= 256 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested security strength is not supported by the derivation function");

        throw $r5;

     label1:
        $i0 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int getMaxSecurityStrength(org.spongycastle.crypto.BlockCipher,int)>($r1, $i0);

        if $i0 >= $i1 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested security strength is not supported by block cipher and key size");

        throw $r5;

     label2:
        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: int entropySize()>();

        if $i0 >= $i1 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough entropy for security strength required");

        throw $r5;

     label3:
        $r6 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] getEntropy()>();

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Instantiate_algorithm(byte[],byte[],byte[])>($r6, $r4, $r3);

        return;
    }
    private void BCC(byte[], byte[], byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2, $r3, $r4, r5, r6;
        int i0, $i1, i2, $i3;
        org.spongycastle.crypto.params.KeyParameter $r7;
        org.spongycastle.crypto.BlockCipher $r8;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: byte[];

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $i1 = interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r5 = newarray (byte)[$i1];

        i0 = lengthof $r4;

        i0 = i0 / $i1;

        r6 = newarray (byte)[$i1];

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $r7 = new org.spongycastle.crypto.params.KeyParameter;

        $r2 = virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] expandKey(byte[])>($r2);

        specialinvoke $r7.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r2);

        interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r7);

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r3, 0, r5, 0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i3 = i2 * $i1;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void XOR(byte[],byte[],byte[],int)>(r6, r5, $r4, $i3);

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r6, 0, r5, 0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r1, 0, $i1);

        return;
    }
    private byte[] Block_Cipher_df(byte[], int)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, r2, r3, r4, $r6, $r7;
        int $i0, i1, i2, i3, $i4, $i5;
        org.spongycastle.crypto.BlockCipher $r5;
        org.spongycastle.crypto.params.KeyParameter $r8;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $i4 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        i1 = lengthof $r1;

        i2 = $i0 / 8;

        i3 = i1 + 8;

        i3 = i3 + 1;

        i3 = i3 + $i4;

        i3 = i3 + -1;

        i3 = i3 / $i4;

        i3 = i3 * $i4;

        r3 = newarray (byte)[i3];

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void copyIntToByteArray(byte[],int,int)>(r3, i1, 0);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void copyIntToByteArray(byte[],int,int)>(r3, i2, 4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 8, i1);

        i1 = i1 + 8;

        r3[i1] = -128;

        i1 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _keySizeInBits>;

        i1 = i1 / 8;

        i1 = i1 + $i4;

        $r6 = newarray (byte)[i1];

        r4 = newarray (byte)[$i4];

        r2 = newarray (byte)[$i4];

        i1 = 0;

        i2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _keySizeInBits>;

        i2 = i2 / 8;

        $r1 = newarray (byte)[i2];

        $r7 = <org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] K_BITS>;

        i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r1, 0, i2);

     label1:
        i2 = i1 * $i4;

        i2 = i2 * 8;

        i3 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _keySizeInBits>;

        $i5 = $i4 * 8;

        i3 = i3 + $i5;

        if i2 >= i3 goto label4;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void copyIntToByteArray(byte[],int,int)>(r2, i1, 0);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void BCC(byte[],byte[],byte[],byte[])>(r4, $r1, r2, r3);

        i2 = lengthof $r6;

        i3 = i1 * $i4;

        i2 = i2 - i3;

        if i2 <= $i4 goto label3;

        i2 = $i4;

     label2:
        i3 = i1 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r6, i3, i2);

        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = lengthof $r6;

        i3 = i1 * $i4;

        i2 = i2 - i3;

        goto label2;

     label4:
        r3 = newarray (byte)[$i4];

        i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r1, 0, i1);

        i1 = lengthof $r1;

        i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i1, r3, 0, i2);

        $i0 = $i0 / 2;

        $r6 = newarray (byte)[$i0];

        $i0 = 0;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $r8 = new org.spongycastle.crypto.params.KeyParameter;

        $r1 = virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] expandKey(byte[])>($r1);

        specialinvoke $r8.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r8);

     label5:
        i1 = $i0 * $i4;

        i2 = lengthof $r6;

        if i1 >= i2 goto label8;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, 0, r3, 0);

        i1 = lengthof $r6;

        i2 = $i0 * $i4;

        i1 = i1 - i2;

        if i1 <= $i4 goto label7;

        i1 = $i4;

     label6:
        i2 = $i0 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r6, i2, i1);

        $i0 = $i0 + 1;

        goto label5;

     label7:
        i1 = lengthof $r6;

        i2 = $i0 * $i4;

        i1 = i1 - i2;

        goto label6;

     label8:
        return $r6;
    }
    private void CTR_DRBG_Instantiate_algorithm(byte[], byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r1, $r2, $r3);

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _seedLength>;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] Block_Cipher_df(byte[],int)>($r1, $i0);

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _keySizeInBits>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        $r2 = newarray (byte)[$i1];

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key> = $r2;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V> = $r2;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key>;

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Update(byte[],byte[],byte[])>($r1, $r2, $r3);

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
    private void CTR_DRBG_Reseed_algorithm(byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] getEntropy()>();

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r2, $r1);

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _seedLength>;

        $r1 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] Block_Cipher_df(byte[],int)>($r1, $i0);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key>;

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Update(byte[],byte[],byte[])>($r1, $r2, $r3);

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
    private void CTR_DRBG_Update(byte[], byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2, $r3, r4, r5, $r8;
        org.spongycastle.crypto.params.KeyParameter $r6;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.crypto.BlockCipher $r7;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $i0 = lengthof $r1;

        r5 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        r4 = newarray (byte)[$i0];

        $i0 = 0;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $i1 = interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $r6 = new org.spongycastle.crypto.params.KeyParameter;

        $r8 = virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] expandKey(byte[])>($r2);

        specialinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r8);

        interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r6);

     label1:
        $i2 = $i0 * $i1;

        $i3 = lengthof $r1;

        if $i2 >= $i3 goto label4;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void addOneTo(byte[])>($r3);

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        interfaceinvoke $r7.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r3, 0, r4, 0);

        $i2 = lengthof r5;

        $i3 = $i0 * $i1;

        $i2 = $i2 - $i3;

        if $i2 <= $i1 goto label3;

        $i2 = $i1;

     label2:
        $i3 = $i0 * $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, $i3, $i2);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i2 = lengthof r5;

        $i3 = $i0 * $i1;

        $i2 = $i2 - $i3;

        goto label2;

     label4:
        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void XOR(byte[],byte[],byte[],int)>(r5, $r1, r5, 0);

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r2, 0, $i0);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, $i0, $r3, 0, $i1);

        return;
    }
    private void XOR(byte[], byte[], byte[], int)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2, $r3;
        int $i0, i1, $i2;
        byte $b3, $b4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $b3 = $r2[i1];

        $i2 = i1 + $i0;

        $b4 = $r3[$i2];

        $i2 = $b3 ^ $b4;

        $b3 = (byte) $i2;

        $r1[i1] = $b3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void addOneTo(byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1;
        int i0, i3, $i4;
        byte $b1, b2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        b2 = 1;

        i3 = 1;

     label1:
        i0 = lengthof $r1;

        if i3 > i0 goto label4;

        i0 = lengthof $r1;

        i0 = i0 - i3;

        $b1 = $r1[i0];

        i0 = $b1 & 255;

        i0 = i0 + b2;

        if i0 <= 255 goto label3;

        b2 = 1;

     label2:
        $i4 = lengthof $r1;

        $i4 = $i4 - i3;

        $b1 = (byte) i0;

        $r1[$i4] = $b1;

        i3 = i3 + 1;

        goto label1;

     label3:
        b2 = 0;

        goto label2;

     label4:
        return;
    }
    private void copyIntToByteArray(byte[], int, int)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = $i0 >> 24;

        $b4 = (byte) $i3;

        $r1[$i1] = $b4;

        $i2 = $i1 + 1;

        $i3 = $i0 >> 16;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $i2 = $i1 + 2;

        $i3 = $i0 >> 8;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $i1 = $i1 + 3;

        $b4 = (byte) $i0;

        $r1[$i1] = $b4;

        return;
    }
    private byte[] getEntropy()
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _securityStrength>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        if $i0 >= $i1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy provided by entropy source");

        throw $r3;

     label1:
        return $r1;
    }
    private int getMaxSecurityStrength(org.spongycastle.crypto.BlockCipher, int)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int i0;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean isTDEA(org.spongycastle.crypto.BlockCipher)>($r1);

        if $z0 == 0 goto label1;

        if i0 != 168 goto label1;

        return 112;

     label1:
        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("AES");

        if $z0 != 0 goto label2;

        return -1;

     label2:
        return i0;
    }
    private boolean isTDEA(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        org.spongycastle.crypto.BlockCipher $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("DESede");

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("TDEA");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private void padKey(byte[], int, byte[], int)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i3, $i4, $i5;
        byte b2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        b2 = $r1[$i0];

        $i4 = b2 & 254;

        b2 = (byte) $i4;

        $r2[$i1] = b2;

        $i3 = $i1 + 1;

        b2 = $r1[$i0];

        $i4 = b2 << 7;

        $i5 = $i0 + 1;

        b2 = $r1[$i5];

        $i5 = b2 & 252;

        $i5 = $i5 >>> 1;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 2;

        $i4 = $i0 + 1;

        b2 = $r1[$i4];

        $i4 = b2 << 6;

        $i5 = $i0 + 2;

        b2 = $r1[$i5];

        $i5 = b2 & 248;

        $i5 = $i5 >>> 2;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 3;

        $i4 = $i0 + 2;

        b2 = $r1[$i4];

        $i4 = b2 << 5;

        $i5 = $i0 + 3;

        b2 = $r1[$i5];

        $i5 = b2 & 240;

        $i5 = $i5 >>> 3;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 4;

        $i4 = $i0 + 3;

        b2 = $r1[$i4];

        $i4 = b2 << 4;

        $i5 = $i0 + 4;

        b2 = $r1[$i5];

        $i5 = b2 & 224;

        $i5 = $i5 >>> 4;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 5;

        $i4 = $i0 + 4;

        b2 = $r1[$i4];

        $i4 = b2 << 3;

        $i5 = $i0 + 5;

        b2 = $r1[$i5];

        $i5 = b2 & 192;

        $i5 = $i5 >>> 5;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 6;

        $i4 = $i0 + 5;

        b2 = $r1[$i4];

        $i4 = b2 << 2;

        $i5 = $i0 + 6;

        b2 = $r1[$i5];

        $i5 = b2 & 128;

        $i5 = $i5 >>> 6;

        $i4 = $i4 | $i5;

        b2 = (byte) $i4;

        $r2[$i3] = b2;

        $i3 = $i1 + 7;

        $i0 = $i0 + 6;

        b2 = $r1[$i0];

        $i0 = b2 << 1;

        b2 = (byte) $i0;

        $r2[$i3] = b2;

        $i0 = $i1;

     label1:
        $i3 = $i1 + 7;

        if $i0 > $i3 goto label2;

        b2 = $r2[$i0];

        $i3 = b2 & 254;

        $i4 = b2 >> 1;

        $i5 = b2 >> 2;

        $i4 = $i4 ^ $i5;

        $i5 = b2 >> 3;

        $i4 = $i4 ^ $i5;

        $i5 = b2 >> 4;

        $i4 = $i4 ^ $i5;

        $i5 = b2 >> 5;

        $i4 = $i4 ^ $i5;

        $i5 = b2 >> 6;

        $i4 = $i4 ^ $i5;

        $i5 = b2 >> 7;

        $i4 = $i4 ^ $i5;

        $i4 = $i4 ^ 1;

        $i4 = $i4 & 1;

        $i3 = $i3 | $i4;

        b2 = (byte) $i3;

        $r2[$i0] = b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    byte[] expandKey(byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, r2;
        boolean $z0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean _isTDEA>;

        if $z0 == 0 goto label1;

        r2 = newarray (byte)[24];

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void padKey(byte[],int,byte[],int)>($r1, 0, r2, 0);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void padKey(byte[],int,byte[],int)>($r1, 7, r2, 8);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void padKey(byte[],int,byte[],int)>($r1, 14, r2, 16);

        return r2;

     label1:
        return $r1;
    }
    public int generate(byte[], byte[], boolean)
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1, r2, $r4, $r6, $r7;
        boolean $z0, $z1;
        org.spongycastle.crypto.params.KeyParameter $r3;
        long $l0;
        byte $b1;
        java.lang.IllegalArgumentException $r5;
        int $i2, $i3, $i4;
        org.spongycastle.crypto.BlockCipher $r8;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        $r4 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $z1 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: boolean _isTDEA>;

        if $z1 == 0 goto label02;

        $l0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter>;

        $b1 = $l0 cmp 2147483648L;

        if $b1 <= 0 goto label01;

        return -1;

     label01:
        $z1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: boolean isTooLarge(byte[],int)>($r1, 512);

        if $z1 == 0 goto label03;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 4096");

        throw $r5;

     label02:
        $l0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter>;

        $b1 = $l0 cmp 140737488355328L;

        if $b1 > 0 goto label12;

        $z1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: boolean isTooLarge(byte[],int)>($r1, 32768);

        if $z1 == 0 goto label03;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 262144");

        throw $r5;

     label03:
        if $z0 == 0 goto label04;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Reseed_algorithm(byte[])>($r4);

        $r4 = null;

     label04:
        if $r4 == null goto label09;

        $i2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _seedLength>;

        r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] Block_Cipher_df(byte[],int)>($r4, $i2);

        $r4 = r2;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key>;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Update(byte[],byte[],byte[])>(r2, $r6, $r7);

     label05:
        r2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        $i2 = lengthof r2;

        r2 = newarray (byte)[$i2];

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $r3 = new org.spongycastle.crypto.params.KeyParameter;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key>;

        $r6 = virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] expandKey(byte[])>($r6);

        specialinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r6);

        interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r3);

        $i2 = 0;

     label06:
        $i3 = lengthof $r1;

        $i4 = lengthof r2;

        $i3 = $i3 / $i4;

        if $i2 > $i3 goto label11;

        $i3 = lengthof $r1;

        $i4 = lengthof r2;

        $i4 = $i4 * $i2;

        $i3 = $i3 - $i4;

        $i4 = lengthof r2;

        if $i3 <= $i4 goto label10;

        $i3 = lengthof r2;

     label07:
        if $i3 == 0 goto label08;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void addOneTo(byte[])>($r6);

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: org.spongycastle.crypto.BlockCipher _engine>;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        interfaceinvoke $r8.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r2, 0);

        $i4 = lengthof r2;

        $i4 = $i4 * $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i4, $i3);

     label08:
        $i2 = $i2 + 1;

        goto label06;

     label09:
        $i2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: int _seedLength>;

        $r4 = newarray (byte)[$i2];

        goto label05;

     label10:
        $i3 = lengthof $r1;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        $i4 = lengthof $r6;

        $i4 = $i4 * $i2;

        $i3 = $i3 - $i4;

        goto label07;

     label11:
        r2 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _Key>;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Update(byte[],byte[],byte[])>($r4, r2, $r6);

        $l0 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter>;

        $l0 = $l0 + 1L;

        r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: long _reseedCounter> = $l0;

        $i2 = lengthof $r1;

        $i2 = $i2 * 8;

        return $i2;

     label12:
        return -1;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: byte[] _V>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        return $i0;
    }
    public void reseed(byte[])
    {
        org.spongycastle.crypto.prng.drbg.CTRSP800DRBG r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.CTRSP800DRBG;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.CTRSP800DRBG: void CTR_DRBG_Reseed_algorithm(byte[])>($r1);

        return;
    }
