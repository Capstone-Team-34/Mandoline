org.spongycastle.crypto.prng.drbg.HMacSP800DRBG extends java.lang.Object implements org.spongycastle.crypto.prng.drbg.SP80090DRBG
private static final int MAX_BITS_REQUEST
private static final long RESEED_MAX
private byte[] _K
private byte[] _V
private org.spongycastle.crypto.prng.EntropySource _entropySource
private org.spongycastle.crypto.Mac _hMac
private long _reseedCounter
private int _securityStrength
    public void <init>(org.spongycastle.crypto.Mac, int, org.spongycastle.crypto.prng.EntropySource, byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        org.spongycastle.crypto.Mac $r1;
        int $i0, $i1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        byte[] $r3, $r4, $r6;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.Mac;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.crypto.prng.EntropySource;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: int getMaxSecurityStrength(org.spongycastle.crypto.Mac)>($r1);

        if $i0 <= $i1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested security strength is not supported by the derivation function");

        throw $r5;

     label1:
        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: int entropySize()>();

        if $i1 >= $i0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough entropy for security strength required");

        throw $r5;

     label2:
        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: int _securityStrength> = $i0;

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource> = $r2;

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac> = $r1;

        $r6 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] getEntropy()>();

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r6, $r4, $r3);

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K> = $r4;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K>;

        $i0 = lengthof $r4;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V> = $r4;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r4, 1);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update(byte[])>($r3);

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
    private byte[] getEntropy()
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: int _securityStrength>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        if $i0 >= $i1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy provided by entropy source");

        throw $r3;

     label1:
        return $r1;
    }
    private void hmac_DRBG_Update(byte[])
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update_Func(byte[],byte)>($r1, 0);

        if $r1 == null goto label1;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update_Func(byte[],byte)>($r1, 1);

     label1:
        return;
    }
    private void hmac_DRBG_Update_Func(byte[], byte)
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1, $r4, $r5;
        byte $b0;
        org.spongycastle.crypto.Mac $r2;
        org.spongycastle.crypto.params.KeyParameter $r3;
        int $i1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r3 = new org.spongycastle.crypto.params.KeyParameter;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K>;

        specialinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r4);

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r3);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i1 = lengthof $r5;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r4, 0, $i1);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void update(byte)>($b0);

        if $r1 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $i1 = lengthof $r1;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, 0, $i1);

     label1:
        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r3 = new org.spongycastle.crypto.params.KeyParameter;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K>;

        specialinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r1);

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r3);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i1 = lengthof $r4;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r1, 0, $i1);

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        return;
    }
    public int generate(byte[], byte[], boolean)
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1, r2, $r3, $r5, $r8;
        boolean $z0;
        int i0, $i1, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r4;
        long $l2;
        byte $b3;
        org.spongycastle.crypto.Mac $r6;
        org.spongycastle.crypto.params.KeyParameter $r7;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 := @parameter0: byte[];

        $r3 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $i1 = lengthof $r1;

        $i1 = $i1 * 8;

        if $i1 <= 262144 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 262144");

        throw $r4;

     label1:
        $l2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: long _reseedCounter>;

        $b3 = $l2 cmp 140737488355328L;

        if $b3 <= 0 goto label2;

        return -1;

     label2:
        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void reseed(byte[])>($r3);

        $r3 = null;

     label3:
        if $r3 == null goto label4;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update(byte[])>($r3);

     label4:
        i0 = lengthof $r1;

        r2 = newarray (byte)[i0];

        i0 = lengthof $r1;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i4 = lengthof $r5;

        i0 = i0 / $i4;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r7 = new org.spongycastle.crypto.params.KeyParameter;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _K>;

        specialinvoke $r7.<org.spongycastle.crypto.params.KeyParameter: void <init>(byte[])>($r5);

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: void init(org.spongycastle.crypto.CipherParameters)>($r7);

        $i4 = 0;

     label5:
        if $i4 >= i0 goto label6;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i5 = lengthof $r8;

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r5, 0, $i5);

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r5, 0);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i5 = lengthof $r8;

        $i5 = $i5 * $i4;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i6 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, $i5, $i6);

        $i4 = $i4 + 1;

        goto label5;

     label6:
        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i4 = lengthof $r5;

        $i4 = $i4 * i0;

        $i5 = lengthof r2;

        if $i4 >= $i5 goto label7;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i4 = lengthof $r8;

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: void update(byte[],int,int)>($r5, 0, $i4);

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: org.spongycastle.crypto.Mac _hMac>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Mac: int doFinal(byte[],int)>($r5, 0);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i4 = lengthof $r8;

        $i4 = $i4 * i0;

        $i5 = lengthof r2;

        $r8 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i6 = lengthof $r8;

        i0 = $i6 * i0;

        i0 = $i5 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, $i4, i0);

     label7:
        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update(byte[])>($r3);

        $l2 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: long _reseedCounter>;

        $l2 = $l2 + 1L;

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: long _reseedCounter> = $l2;

        i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, 0, i0);

        return $i1;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] _V>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        return $i0;
    }
    public void reseed(byte[])
    {
        org.spongycastle.crypto.prng.drbg.HMacSP800DRBG r0;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HMacSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: byte[] getEntropy()>();

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[])>($r2, $r1);

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: void hmac_DRBG_Update(byte[])>($r1);

        r0.<org.spongycastle.crypto.prng.drbg.HMacSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
