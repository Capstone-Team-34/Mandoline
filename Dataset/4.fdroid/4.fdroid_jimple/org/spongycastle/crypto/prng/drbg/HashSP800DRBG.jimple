org.spongycastle.crypto.prng.drbg.HashSP800DRBG extends java.lang.Object implements org.spongycastle.crypto.prng.drbg.SP80090DRBG
private static final int MAX_BITS_REQUEST
private static final byte[] ONE
private static final long RESEED_MAX
private static final java.util.Hashtable seedlens
private byte[] _C
private byte[] _V
private org.spongycastle.crypto.Digest _digest
private org.spongycastle.crypto.prng.EntropySource _entropySource
private long _reseedCounter
private int _securityStrength
private int _seedLength
    static void <clinit>()
    {
        byte[] $r0;
        java.util.Hashtable $r1;
        java.lang.Integer $r2;

        $r0 = newarray (byte)[1];

        $r0[0] = 1;

        <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] ONE> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens> = $r1;

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(440);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-1", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(440);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-224", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(440);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-256", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(440);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/256", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(440);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/224", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(888);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-384", $r2);

        $r1 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r2 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(888);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512", $r2);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, int, org.spongycastle.crypto.prng.EntropySource, byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        byte[] $r3, $r4, $r10;
        java.lang.IllegalArgumentException $r5;
        java.util.Hashtable $r6;
        java.lang.String $r7;
        java.lang.Object $r8;
        java.lang.Integer $r9;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.crypto.prng.EntropySource;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: int getMaxSecurityStrength(org.spongycastle.crypto.Digest)>($r1);

        if $i0 <= $i1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested security strength is not supported by the derivation function");

        throw $r5;

     label1:
        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: int entropySize()>();

        if $i1 >= $i0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough entropy for security strength required");

        throw $r5;

     label2:
        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest> = $r1;

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource> = $r2;

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _securityStrength> = $i0;

        $r6 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: java.util.Hashtable seedlens>;

        $r7 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _seedLength> = $i0;

        $r10 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] getEntropy()>();

        $r3 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r10, $r4, $r3);

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _seedLength>;

        $r3 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r1, $r3, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V> = $r3;

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i0 = lengthof $r3;

        $i0 = $i0 + 1;

        $r3 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r10 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i0 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 1, $i0);

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _seedLength>;

        $r3 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r1, $r3, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _C> = $r3;

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
    private void addTo(byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, $r2;
        byte b0, $b3;
        int i1, $i2, $i4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        b0 = 0;

        i1 = 1;

     label1:
        $i2 = lengthof $r2;

        if i1 > $i2 goto label4;

        $i2 = lengthof $r1;

        $i2 = $i2 - i1;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i4 = lengthof $r2;

        $i4 = $i4 - i1;

        $b3 = $r2[$i4];

        $i4 = $b3 & 255;

        $i2 = $i2 + $i4;

        $i2 = $i2 + b0;

        if $i2 <= 255 goto label3;

        b0 = 1;

     label2:
        $i4 = lengthof $r1;

        $i4 = $i4 - i1;

        $b3 = (byte) $i2;

        $r1[$i4] = $b3;

        i1 = i1 + 1;

        goto label1;

     label3:
        b0 = 0;

        goto label2;

     label4:
        i1 = lengthof $r2;

        i1 = i1 + 1;

     label5:
        $i2 = lengthof $r1;

        if i1 > $i2 goto label8;

        $i2 = lengthof $r1;

        $i2 = $i2 - i1;

        $b3 = $r1[$i2];

        $i2 = $b3 & 255;

        $i2 = $i2 + b0;

        if $i2 <= 255 goto label7;

        b0 = 1;

     label6:
        $i4 = lengthof $r1;

        $i4 = $i4 - i1;

        $b3 = (byte) $i2;

        $r1[$i4] = $b3;

        i1 = i1 + 1;

        goto label5;

     label7:
        b0 = 0;

        goto label6;

     label8:
        return;
    }
    private void doHash(byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, $r2;
        int $i0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = lengthof $r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        return;
    }
    private byte[] getEntropy()
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _securityStrength>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        if $i0 >= $i1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy provided by entropy source");

        throw $r3;

     label1:
        return $r1;
    }
    private byte[] hash(byte[])
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, r2;
        int $i0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void doHash(byte[],byte[])>($r1, r2);

        return r2;
    }
    private byte[] hashgen(byte[], int)
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, r2, r3, $r5;
        int $i0, i1, $i2, $i3;
        org.spongycastle.crypto.Digest $r4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i2 = $i0 / 8;

        i1 = $i2 / i1;

        $i2 = lengthof $r1;

        r2 = newarray (byte)[$i2];

        $i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i2);

        $i0 = $i0 / 8;

        $r1 = newarray (byte)[$i0];

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        if $i0 > i1 goto label4;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void doHash(byte[],byte[])>(r2, r3);

        $i2 = lengthof $r1;

        $i3 = lengthof r3;

        $i3 = $i3 * $i0;

        $i2 = $i2 - $i3;

        $i3 = lengthof r3;

        if $i2 <= $i3 goto label3;

        $i2 = lengthof r3;

     label2:
        $i3 = lengthof r3;

        $i3 = $i3 * $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i3, $i2);

        $r5 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] ONE>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void addTo(byte[],byte[])>(r2, $r5);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i2 = lengthof $r1;

        $i3 = lengthof r3;

        $i3 = $i3 * $i0;

        $i2 = $i2 - $i3;

        goto label2;

     label4:
        return $r1;
    }
    public int generate(byte[], byte[], boolean)
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, r2, $r3, $r5, $r6;
        boolean $z0;
        int $i0, $i3, $i4;
        java.lang.IllegalArgumentException $r4;
        long $l1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $r3 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        if $i0 <= 262144 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 262144");

        throw $r4;

     label1:
        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $b2 = $l1 cmp 140737488355328L;

        if $b2 <= 0 goto label2;

        return -1;

     label2:
        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void reseed(byte[])>($r3);

        $r3 = null;

     label3:
        if $r3 == null goto label4;

        r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i3 = lengthof r2;

        $i3 = $i3 + 1;

        $i4 = lengthof $r3;

        $i3 = $i3 + $i4;

        r2 = newarray (byte)[$i3];

        r2[0] = 2;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 1, $i3);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i3 = lengthof $r5;

        $i3 = $i3 + 1;

        $i4 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, $i3, $i4);

        $r3 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] hash(byte[])>(r2);

        r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void addTo(byte[],byte[])>(r2, $r3);

     label4:
        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] hashgen(byte[],int)>($r3, $i0);

        r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i3 = lengthof r2;

        $i3 = $i3 + 1;

        r2 = newarray (byte)[$i3];

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 1, $i3);

        r2[0] = 3;

        r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] hash(byte[])>(r2);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void addTo(byte[],byte[])>($r5, r2);

        r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _C>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void addTo(byte[],byte[])>(r2, $r5);

        r2 = newarray (byte)[4];

        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $l1 = $l1 >> 24;

        $i3 = (int) $l1;

        $b2 = (byte) $i3;

        r2[0] = $b2;

        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $l1 = $l1 >> 16;

        $i3 = (int) $l1;

        $b2 = (byte) $i3;

        r2[1] = $b2;

        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $l1 = $l1 >> 8;

        $i3 = (int) $l1;

        $b2 = (byte) $i3;

        r2[2] = $b2;

        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $i3 = (int) $l1;

        $b2 = (byte) $i3;

        r2[3] = $b2;

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: void addTo(byte[],byte[])>($r5, r2);

        $l1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter>;

        $l1 = $l1 + 1L;

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter> = $l1;

        $i3 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i3);

        return $i0;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        int $i0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i0 = $i0 * 8;

        return $i0;
    }
    public void reseed(byte[])
    {
        org.spongycastle.crypto.prng.drbg.HashSP800DRBG r0;
        byte[] $r1, $r2, $r3, $r4;
        org.spongycastle.crypto.Digest $r5;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.HashSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] getEntropy()>();

        $r3 = <org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] ONE>;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[],byte[])>($r3, $r4, $r2, $r1);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _seedLength>;

        $r1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r5, $r1, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V> = $r1;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i0 = lengthof $r1;

        $i0 = $i0 + 1;

        $r1 = newarray (byte)[$i0];

        $r1[0] = 0;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _V>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 1, $i0);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: int _seedLength>;

        $r1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r5, $r1, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: byte[] _C> = $r1;

        r0.<org.spongycastle.crypto.prng.drbg.HashSP800DRBG: long _reseedCounter> = 1L;

        return;
    }
