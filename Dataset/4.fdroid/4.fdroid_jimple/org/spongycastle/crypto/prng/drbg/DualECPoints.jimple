org.spongycastle.crypto.prng.drbg.DualECPoints extends java.lang.Object
private final int cofactor
private final org.spongycastle.math.ec.ECPoint p
private final org.spongycastle.math.ec.ECPoint q
private final int securityStrength
    public void <init>(int, org.spongycastle.math.ec.ECPoint, org.spongycastle.math.ec.ECPoint, int)
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        int $i0, $i1;
        org.spongycastle.math.ec.ECPoint $r1, $r2;
        org.spongycastle.math.ec.ECCurve $r3, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter2: org.spongycastle.math.ec.ECPoint;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $r4 = virtualinvoke $r2.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $z0 = virtualinvoke $r3.<org.spongycastle.math.ec.ECCurve: boolean equals(org.spongycastle.math.ec.ECCurve)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("points need to be on the same curve");

        throw $r5;

     label1:
        r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: int securityStrength> = $i0;

        r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint p> = $r1;

        r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint q> = $r2;

        r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: int cofactor> = $i1;

        return;
    }
    private static int log2(int)
    {
        int $i0, i1;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $i0 = $i0 >> 1;

        if $i0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
    public int getCofactor()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: int cofactor>;

        return i0;
    }
    public int getMaxOutlen()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint p>;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: int cofactor>;

        $i1 = staticinvoke <org.spongycastle.crypto.prng.drbg.DualECPoints: int log2(int)>($i1);

        $i1 = $i1 + 13;

        $i0 = $i0 - $i1;

        $i0 = $i0 / 8;

        $i0 = $i0 * 8;

        return $i0;
    }
    public org.spongycastle.math.ec.ECPoint getP()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        org.spongycastle.math.ec.ECPoint r1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        r1 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint p>;

        return r1;
    }
    public org.spongycastle.math.ec.ECPoint getQ()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        org.spongycastle.math.ec.ECPoint r1;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        r1 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint q>;

        return r1;
    }
    public int getSecurityStrength()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: int securityStrength>;

        return i0;
    }
    public int getSeedLen()
    {
        org.spongycastle.crypto.prng.drbg.DualECPoints r0;
        org.spongycastle.math.ec.ECPoint $r1;
        org.spongycastle.math.ec.ECCurve $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECPoints;

        $r1 = r0.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint p>;

        $r2 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECCurve getCurve()>();

        $i0 = virtualinvoke $r2.<org.spongycastle.math.ec.ECCurve: int getFieldSize()>();

        return $i0;
    }
