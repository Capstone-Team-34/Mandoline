org.spongycastle.crypto.prng.drbg.DualECSP800DRBG extends java.lang.Object implements org.spongycastle.crypto.prng.drbg.SP80090DRBG
private static final int MAX_ADDITIONAL_INPUT
private static final int MAX_ENTROPY_LENGTH
private static final int MAX_PERSONALIZATION_STRING
private static final long RESEED_MAX
private static final org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints
private static final java.math.BigInteger p256_Px
private static final java.math.BigInteger p256_Py
private static final java.math.BigInteger p256_Qx
private static final java.math.BigInteger p256_Qy
private static final java.math.BigInteger p384_Px
private static final java.math.BigInteger p384_Py
private static final java.math.BigInteger p384_Qx
private static final java.math.BigInteger p384_Qy
private static final java.math.BigInteger p521_Px
private static final java.math.BigInteger p521_Py
private static final java.math.BigInteger p521_Qx
private static final java.math.BigInteger p521_Qy
private org.spongycastle.math.ec.ECPoint _P
private org.spongycastle.math.ec.ECPoint _Q
private org.spongycastle.math.ec.ECCurve$Fp _curve
private org.spongycastle.crypto.Digest _digest
private org.spongycastle.crypto.prng.EntropySource _entropySource
private org.spongycastle.math.ec.ECMultiplier _fixedPointMultiplier
private int _outlen
private long _reseedCounter
private byte[] _s
private int _sLength
private int _securityStrength
private int _seedlen
    static void <clinit>()
    {
        java.math.BigInteger $r0, $r6;
        org.spongycastle.crypto.prng.drbg.DualECPoints[] $r1;
        org.spongycastle.asn1.x9.X9ECParameters $r2;
        org.spongycastle.math.ec.ECCurve $r3;
        org.spongycastle.math.ec.ECCurve$Fp r4;
        org.spongycastle.crypto.prng.drbg.DualECPoints $r5;
        org.spongycastle.math.ec.ECPoint $r7, $r8;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Px> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Py> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("c97445f45cdef9f0d3e05e1e585fc297235b82b5be8ff3efca67c59852018192", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Qx> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("b28ef557ba31dfcbdd21ac46e2a91e3c304f44cb87058ada2cb815151e610046", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Qy> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Px> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Py> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("8e722de3125bddb05580164bfe20b8b432216a62926c57502ceede31c47816edd1e89769124179d0b695106428815065", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Qx> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("023b1660dd701d0839fd45eec36f9ee7b32e13b315dc02610aa1b636e346df671f790f84c5e09b05674dbb7e45c803dd", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Qy> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Px> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Py> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("1b9fa3e518d683c6b65763694ac8efbaec6fab44f2276171a42726507dd08add4c3b3f4c1ebc5b1222ddba077f722943b24c3edfa0f85fe24d0c8c01591f0be6f63", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Qx> = $r0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("1f3bdba585295d9a1110d1df1f9430ef8442c5018976ff3437ef91b81dc0b8132c8d5c39c32d0e004a3092b7d327c0e7a4d26d2c7b69b58f9066652911e457779de", 16);

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Qy> = $r0;

        $r1 = newarray (org.spongycastle.crypto.prng.drbg.DualECPoints)[3];

        <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints> = $r1;

        $r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>("P-256");

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        r4 = (org.spongycastle.math.ec.ECCurve$Fp) $r3;

        $r1 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints>;

        $r5 = new org.spongycastle.crypto.prng.drbg.DualECPoints;

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Px>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Py>;

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Qx>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p256_Qy>;

        $r8 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        specialinvoke $r5.<org.spongycastle.crypto.prng.drbg.DualECPoints: void <init>(int,org.spongycastle.math.ec.ECPoint,org.spongycastle.math.ec.ECPoint,int)>(128, $r7, $r8, 1);

        $r1[0] = $r5;

        $r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>("P-384");

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        r4 = (org.spongycastle.math.ec.ECCurve$Fp) $r3;

        $r1 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints>;

        $r5 = new org.spongycastle.crypto.prng.drbg.DualECPoints;

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Px>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Py>;

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Qx>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p384_Qy>;

        $r8 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        specialinvoke $r5.<org.spongycastle.crypto.prng.drbg.DualECPoints: void <init>(int,org.spongycastle.math.ec.ECPoint,org.spongycastle.math.ec.ECPoint,int)>(192, $r7, $r8, 1);

        $r1[1] = $r5;

        $r2 = staticinvoke <org.spongycastle.asn1.nist.NISTNamedCurves: org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String)>("P-521");

        $r3 = virtualinvoke $r2.<org.spongycastle.asn1.x9.X9ECParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        r4 = (org.spongycastle.math.ec.ECCurve$Fp) $r3;

        $r1 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints>;

        $r5 = new org.spongycastle.crypto.prng.drbg.DualECPoints;

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Px>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Py>;

        $r7 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        $r0 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Qx>;

        $r6 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger p521_Qy>;

        $r8 = virtualinvoke r4.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r0, $r6);

        specialinvoke $r5.<org.spongycastle.crypto.prng.drbg.DualECPoints: void <init>(int,org.spongycastle.math.ec.ECPoint,org.spongycastle.math.ec.ECPoint,int)>(256, $r7, $r8, 1);

        $r1[2] = $r5;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, int, org.spongycastle.crypto.prng.EntropySource, byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;
        org.spongycastle.crypto.prng.EntropySource $r2;
        byte[] $r3, $r4;
        org.spongycastle.crypto.prng.drbg.DualECPoints[] $r5;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.crypto.prng.EntropySource;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        $r5 = <org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.drbg.DualECPoints[] nistPoints>;

        specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: void <init>(org.spongycastle.crypto.prng.drbg.DualECPoints[],org.spongycastle.crypto.Digest,int,org.spongycastle.crypto.prng.EntropySource,byte[],byte[])>($r5, $r1, $i0, $r2, $r3, $r4);

        return;
    }
    public void <init>(org.spongycastle.crypto.prng.drbg.DualECPoints[], org.spongycastle.crypto.Digest, int, org.spongycastle.crypto.prng.EntropySource, byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        org.spongycastle.crypto.prng.drbg.DualECPoints[] $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.prng.EntropySource $r3;
        byte[] $r4, $r5, $r10;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        org.spongycastle.crypto.prng.drbg.DualECPoints $r11;
        org.spongycastle.math.ec.ECPoint $r12;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: org.spongycastle.crypto.prng.drbg.DualECPoints[];

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $i0 := @parameter2: int;

        $r3 := @parameter3: org.spongycastle.crypto.prng.EntropySource;

        $r4 := @parameter4: byte[];

        $r5 := @parameter5: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r6.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECMultiplier _fixedPointMultiplier> = $r6;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.Digest _digest> = $r2;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource> = $r3;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _securityStrength> = $i0;

        $z0 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: boolean isTooLarge(byte[],int)>($r4, 512);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Personalization string too large");

        throw $r7;

     label1:
        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.prng.EntropySource: int entropySize()>();

        if $i1 < $i0 goto label2;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.prng.EntropySource: int entropySize()>();

        if $i1 <= 4096 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EntropySource must provide between ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(4096);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label3:
        $r10 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] getEntropy()>();

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r10, $r5, $r4);

        $i1 = 0;

     label4:
        $i2 = lengthof $r1;

        if $i1 == $i2 goto label6;

        $r11 = $r1[$i1];

        $i2 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: int getSecurityStrength()>();

        if $i0 > $i2 goto label7;

        $i0 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: int getMaxSecurityStrength(org.spongycastle.crypto.Digest)>($r2);

        $r11 = $r1[$i1];

        $i2 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: int getSecurityStrength()>();

        if $i0 >= $i2 goto label5;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested security strength is not supported by digest");

        throw $r7;

     label5:
        $r11 = $r1[$i1];

        $i0 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: int getSeedLen()>();

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _seedlen> = $i0;

        $r11 = $r1[$i1];

        $i0 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: int getMaxOutlen()>();

        $i0 = $i0 / 8;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen> = $i0;

        $r11 = $r1[$i1];

        $r12 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint getP()>();

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _P> = $r12;

        $r11 = $r1[$i1];

        $r12 = virtualinvoke $r11.<org.spongycastle.crypto.prng.drbg.DualECPoints: org.spongycastle.math.ec.ECPoint getQ()>();

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _Q> = $r12;

     label6:
        $r12 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _P>;

        if $r12 != null goto label8;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("security strength cannot be greater than 256 bits");

        throw $r7;

     label7:
        $i1 = $i1 + 1;

        goto label4;

     label8:
        $r2 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _seedlen>;

        $r4 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r2, $r4, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s> = $r4;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s>;

        $i0 = lengthof $r4;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _sLength> = $i0;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter> = 0L;

        return;
    }
    private byte[] getEntropy()
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        byte[] $r1;
        org.spongycastle.crypto.prng.EntropySource $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.prng.EntropySource _entropySource>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        $i0 = lengthof $r1;

        $i1 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _securityStrength>;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        if $i0 >= $i1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy provided by entropy source");

        throw $r3;

     label1:
        return $r1;
    }
    private java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint, java.math.BigInteger)
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        org.spongycastle.math.ec.ECPoint $r1;
        java.math.BigInteger $r2;
        org.spongycastle.math.ec.ECMultiplier $r3;
        org.spongycastle.math.ec.ECFieldElement $r4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: org.spongycastle.math.ec.ECPoint;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECMultiplier _fixedPointMultiplier>;

        $r1 = interfaceinvoke $r3.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r1, $r2);

        $r1 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        $r4 = virtualinvoke $r1.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        return $r2;
    }
    private byte[] pad8(byte[], int)
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        byte[] $r1;
        int $i0, i1, i2, i3, $i5, $i6;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = $i0 % 8;

        if i1 != 0 goto label1;

        return $r1;

     label1:
        $i0 = $i0 % 8;

        $i0 = 8 - $i0;

        i2 = 0;

        i1 = lengthof $r1;

        i3 = i1 + -1;

     label2:
        if i3 < 0 goto label3;

        $b4 = $r1[i3];

        i1 = $b4 & 255;

        $i5 = i1 << $i0;

        $i6 = 8 - $i0;

        i2 = i2 >> $i6;

        i2 = $i5 | i2;

        $b4 = (byte) i2;

        $r1[i3] = $b4;

        i2 = i1;

        i3 = i3 + -1;

        goto label2;

     label3:
        return $r1;
    }
    private byte[] xor(byte[], byte[])
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        byte[] $r1, r2, r3;
        byte $b0, $b3;
        int $i1, $i2;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        r3 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r1 != null goto label1;

        return r3;

     label1:
        $i1 = lengthof r3;

        r2 = newarray (byte)[$i1];

        $i1 = 0;

     label2:
        $i2 = lengthof r2;

        if $i1 == $i2 goto label3;

        $b3 = r3[$i1];

        $b0 = $r1[$i1];

        $i2 = $b3 ^ $b0;

        $b0 = (byte) $i2;

        r2[$i1] = $b0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r2;
    }
    public int generate(byte[], byte[], boolean)
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        byte[] $r1, $r2, $r6;
        boolean $z0, $z1;
        int i0, $i1, $i2, i6, $i7, $i8;
        java.lang.IllegalArgumentException $r3;
        long $l3, $l4;
        byte $b5;
        org.spongycastle.crypto.Digest $r4;
        java.math.BigInteger r5, $r8;
        org.spongycastle.math.ec.ECPoint $r7;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $i1 = lengthof $r1;

        $i1 = $i1 * 8;

        $i2 = lengthof $r1;

        i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        i0 = $i2 / i0;

        $z1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: boolean isTooLarge(byte[],int)>($r2, 512);

        if $z1 == 0 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Additional input too large");

        throw $r3;

     label01:
        $l3 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter>;

        $l4 = (long) i0;

        $l3 = $l3 + $l4;

        $b5 = $l3 cmp 2147483648L;

        if $b5 <= 0 goto label02;

        return -1;

     label02:
        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: void reseed(byte[])>($r2);

        $r2 = null;

     label03:
        if $r2 == null goto label07;

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i2 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _seedlen>;

        $r2 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r4, $r2, $i2);

        r5 = new java.math.BigInteger;

        $r6 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s>;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] xor(byte[],byte[])>($r6, $r2);

        specialinvoke r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

     label04:
        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $i2 = 0;

        i6 = 0;

     label05:
        if i6 >= i0 goto label09;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _P>;

        $r8 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, r5);

        r5 = $r8;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _Q>;

        $r8 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, $r8);

        $r2 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $i7 = lengthof $r2;

        $i8 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        if $i7 <= $i8 goto label08;

        $i7 = lengthof $r2;

        $i8 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        $i7 = $i7 - $i8;

        $i8 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i7, $r1, $i2, $i8);

     label06:
        $i7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        $i2 = $i2 + $i7;

        $l3 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter>;

        $l3 = $l3 + 1L;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter> = $l3;

        i6 = i6 + 1;

        goto label05;

     label07:
        r5 = new java.math.BigInteger;

        $r2 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s>;

        specialinvoke r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        goto label04;

     label08:
        $i7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        $i8 = lengthof $r2;

        $i7 = $i7 - $i8;

        $i7 = $i7 + $i2;

        $i8 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i7, $i8);

        goto label06;

     label09:
        i0 = lengthof $r1;

        if $i2 >= i0 goto label11;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _P>;

        $r8 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, r5);

        r5 = $r8;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _Q>;

        $r8 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, $r8);

        $r2 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        i0 = lengthof $r1;

        i0 = i0 - $i2;

        i6 = lengthof $r2;

        $i7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        if i6 <= $i7 goto label12;

        i6 = lengthof $r2;

        $i7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        i6 = i6 - $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i6, $r1, $i2, i0);

     label10:
        $l3 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter>;

        $l3 = $l3 + 1L;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter> = $l3;

     label11:
        $i2 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _sLength>;

        $r7 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.math.ec.ECPoint _P>;

        r5 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: java.math.BigInteger getScalarMultipleXCoord(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r7, r5);

        $r1 = staticinvoke <org.spongycastle.util.BigIntegers: byte[] asUnsignedByteArray(int,java.math.BigInteger)>($i2, r5);

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s> = $r1;

        return $i1;

     label12:
        i6 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        $i7 = lengthof $r2;

        i6 = i6 - $i7;

        $i2 = i6 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i2, i0);

        goto label10;
    }
    public int getBlockSize()
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _outlen>;

        $i0 = $i0 * 8;

        return $i0;
    }
    public void reseed(byte[])
    {
        org.spongycastle.crypto.prng.drbg.DualECSP800DRBG r0;
        byte[] $r1, $r3, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.crypto.prng.drbg.DualECSP800DRBG;

        $r1 := @parameter0: byte[];

        $z0 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: boolean isTooLarge(byte[],int)>($r1, 512);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Additional input string too large");

        throw $r2;

     label1:
        $r3 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] getEntropy()>();

        $r4 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _seedlen>;

        $r4 = specialinvoke r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] pad8(byte[],int)>($r4, $i0);

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] concatenate(byte[],byte[],byte[])>($r4, $r3, $r1);

        $r5 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: org.spongycastle.crypto.Digest _digest>;

        $i0 = r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: int _seedlen>;

        $r1 = staticinvoke <org.spongycastle.crypto.prng.drbg.Utils: byte[] hash_df(org.spongycastle.crypto.Digest,byte[],int)>($r5, $r1, $i0);

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: byte[] _s> = $r1;

        r0.<org.spongycastle.crypto.prng.drbg.DualECSP800DRBG: long _reseedCounter> = 0L;

        return;
    }
