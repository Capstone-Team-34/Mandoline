org.spongycastle.crypto.prng.drbg.Utils extends java.lang.Object
static final java.util.Hashtable maxSecurityStrengths
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths> = $r0;

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-1", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-224", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-256", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-384", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(192);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/224", $r1);

        $r0 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(256);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512/256", $r1);

        return;
    }
    void <init>()
    {
        org.spongycastle.crypto.prng.drbg.Utils r0;

        r0 := @this: org.spongycastle.crypto.prng.drbg.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static int getMaxSecurityStrength(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.Digest $r0;
        java.util.Hashtable $r1;
        java.lang.String $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $r2 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    static int getMaxSecurityStrength(org.spongycastle.crypto.Mac)
    {
        org.spongycastle.crypto.Mac $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        $r0 := @parameter0: org.spongycastle.crypto.Mac;

        $r1 = interfaceinvoke $r0.<org.spongycastle.crypto.Mac: java.lang.String getAlgorithmName()>();

        $r2 = <org.spongycastle.crypto.prng.drbg.Utils: java.util.Hashtable maxSecurityStrengths>;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("/");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    static byte[] hash_df(org.spongycastle.crypto.Digest, byte[], int)
    {
        org.spongycastle.crypto.Digest $r0;
        byte[] $r1, r2, r3;
        int $i0, i1, i2, $i3, $i5, $i6;
        byte $b4;

        $r0 := @parameter0: org.spongycastle.crypto.Digest;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        i2 = $i0 + 7;

        i2 = i2 / 8;

        r3 = newarray (byte)[i2];

        i2 = lengthof r3;

        i1 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i2 = i2 / i1;

        i1 = 1;

        $i3 = interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i3];

        $i3 = 0;

     label1:
        if $i3 > i2 goto label4;

        $b4 = (byte) i1;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>($b4);

        $i5 = $i0 >> 24;

        $b4 = (byte) $i5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>($b4);

        $i5 = $i0 >> 16;

        $b4 = (byte) $i5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>($b4);

        $i5 = $i0 >> 8;

        $b4 = (byte) $i5;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>($b4);

        $b4 = (byte) $i0;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte)>($b4);

        $i5 = lengthof $r1;

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i5);

        interfaceinvoke $r0.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i5 = lengthof r3;

        $i6 = lengthof r2;

        $i6 = $i6 * $i3;

        $i5 = $i5 - $i6;

        $i6 = lengthof r2;

        if $i5 <= $i6 goto label3;

        $i5 = lengthof r2;

     label2:
        $i6 = lengthof r2;

        $i6 = $i6 * $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, $i6, $i5);

        i1 = i1 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label3:
        $i5 = lengthof r3;

        $i6 = lengthof r2;

        $i6 = $i6 * $i3;

        $i5 = $i5 - $i6;

        goto label2;

     label4:
        i2 = $i0 % 8;

        if i2 == 0 goto label6;

        $i0 = $i0 % 8;

        $i0 = 8 - $i0;

        $i3 = 0;

        i2 = 0;

     label5:
        i1 = lengthof r3;

        if i2 == i1 goto label6;

        $b4 = r3[i2];

        i1 = $b4 & 255;

        $i5 = i1 >>> $i0;

        $i6 = 8 - $i0;

        $i3 = $i3 << $i6;

        $i3 = $i5 | $i3;

        $b4 = (byte) $i3;

        r3[i2] = $b4;

        $i3 = i1;

        i2 = i2 + 1;

        goto label5;

     label6:
        return r3;
    }
    static boolean isTooLarge(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $i1 = lengthof $r0;

        if $i1 <= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
