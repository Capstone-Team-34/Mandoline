org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator extends java.lang.Object implements java.lang.Runnable
private volatile int counter
private volatile boolean stop
final org.spongycastle.crypto.prng.ThreadedSeedGenerator this$0
    private void <init>(org.spongycastle.crypto.prng.ThreadedSeedGenerator)
    {
        org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        org.spongycastle.crypto.prng.ThreadedSeedGenerator $r1;

        r0 := @this: org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.prng.ThreadedSeedGenerator;

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: org.spongycastle.crypto.prng.ThreadedSeedGenerator this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = 0;

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 0;

        return;
    }
    void <init>(org.spongycastle.crypto.prng.ThreadedSeedGenerator, org.spongycastle.crypto.prng.ThreadedSeedGenerator$1)
    {
        org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        org.spongycastle.crypto.prng.ThreadedSeedGenerator $r1;
        org.spongycastle.crypto.prng.ThreadedSeedGenerator$1 $r2;

        r0 := @this: org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.prng.ThreadedSeedGenerator;

        $r2 := @parameter1: org.spongycastle.crypto.prng.ThreadedSeedGenerator$1;

        specialinvoke r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: void <init>(org.spongycastle.crypto.prng.ThreadedSeedGenerator)>($r1);

        return;
    }
    public byte[] generateSeed(int, boolean)
    {
        org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        int $i0, i1, $i2, i3, i4, $i6;
        boolean $z0;
        byte[] r1;
        java.lang.Thread r2;
        java.lang.InterruptedException $r3;
        byte $b5;

        r0 := @this: org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        r2 = new java.lang.Thread;

        specialinvoke r2.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = 0;

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 0;

        i3 = 0;

        virtualinvoke r2.<java.lang.Thread: void start()>();

        if $z0 == 0 goto label07;

     label01:
        i4 = 0;

     label02:
        if i4 >= $i0 goto label11;

     label03:
        i1 = r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        if i1 != i3 goto label08;

     label04:
        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

     label05:
        goto label03;

     label06:
        $r3 := @caughtexception;

        goto label03;

     label07:
        $i0 = $i0 * 8;

        goto label01;

     label08:
        i3 = r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        if $z0 == 0 goto label10;

        i1 = i3 & 255;

        $b5 = (byte) i1;

        r1[i4] = $b5;

     label09:
        i4 = i4 + 1;

        goto label02;

     label10:
        i1 = i4 / 8;

        $b5 = r1[i1];

        $i6 = $b5 << 1;

        $i2 = i3 & 1;

        $i2 = $i6 | $i2;

        $b5 = (byte) $i2;

        r1[i1] = $b5;

        goto label09;

     label11:
        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 1;

        return r1;

        catch java.lang.InterruptedException from label04 to label05 with label06;
    }
    public void run()
    {
        org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

     label1:
        $z0 = r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop>;

        if $z0 != 0 goto label2;

        $i0 = r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = $i0;

        goto label1;

     label2:
        return;
    }
