org.spongycastle.crypto.prng.X931RNG extends java.lang.Object
private static final int BLOCK128_MAX_BITS_REQUEST
private static final long BLOCK128_RESEED_MAX
private static final int BLOCK64_MAX_BITS_REQUEST
private static final long BLOCK64_RESEED_MAX
private final byte[] DT
private final byte[] I
private final byte[] R
private byte[] V
private final org.spongycastle.crypto.BlockCipher engine
private final org.spongycastle.crypto.prng.EntropySource entropySource
private long reseedCounter
    public void <init>(org.spongycastle.crypto.BlockCipher, byte[], org.spongycastle.crypto.prng.EntropySource)
    {
        org.spongycastle.crypto.prng.X931RNG r0;
        org.spongycastle.crypto.BlockCipher $r1;
        byte[] $r2, $r4, $r5;
        org.spongycastle.crypto.prng.EntropySource $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.X931RNG;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: org.spongycastle.crypto.prng.EntropySource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter> = 1L;

        r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine> = $r1;

        r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.prng.EntropySource entropySource> = $r3;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT> = $r4;

        $r4 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        $r5 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, $i0);

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I> = $r2;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R> = $r2;

        return;
    }
    private void increment(byte[])
    {
        org.spongycastle.crypto.prng.X931RNG r0;
        byte[] $r1;
        int $i0, $i2;
        byte $b1;

        r0 := @this: org.spongycastle.crypto.prng.X931RNG;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $b1 = $r1[$i0];

        $i2 = $b1 + 1;

        $b1 = (byte) $i2;

        $r1[$i0] = $b1;

        if $b1 == 0 goto label2;

        return;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return;
    }
    private static boolean isTooLarge(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $i1 = lengthof $r0;

        if $i1 <= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private void process(byte[], byte[], byte[])
    {
        org.spongycastle.crypto.prng.X931RNG r0;
        byte[] $r1, $r2, $r3;
        byte $b0, $b3;
        int i1, $i2;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.prng.X931RNG;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 == $i2 goto label2;

        $b3 = $r2[i1];

        $b0 = $r3[i1];

        $i2 = $b3 ^ $b0;

        $b0 = (byte) $i2;

        $r1[i1] = $b0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, 0, $r1, 0);

        return;
    }
    int generate(byte[], boolean)
    {
        org.spongycastle.crypto.prng.X931RNG r0;
        byte[] $r1, $r2, $r7, $r8;
        boolean $z0, $z1;
        int i0, i1, $i4, $i5;
        long $l2;
        byte $b3;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.prng.EntropySource $r4;
        org.spongycastle.crypto.BlockCipher $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: org.spongycastle.crypto.prng.X931RNG;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        i1 = lengthof $r2;

        if i1 != 8 goto label2;

        $l2 = r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter>;

        $b3 = $l2 cmp 32768L;

        if $b3 <= 0 goto label1;

        return -1;

     label1:
        $z1 = staticinvoke <org.spongycastle.crypto.prng.X931RNG: boolean isTooLarge(byte[],int)>($r1, 512);

        if $z1 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 4096");

        throw $r3;

     label2:
        $l2 = r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter>;

        $b3 = $l2 cmp 8388608L;

        if $b3 > 0 goto label9;

        $z1 = staticinvoke <org.spongycastle.crypto.prng.X931RNG: boolean isTooLarge(byte[],int)>($r1, 32768);

        if $z1 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of bits per request limited to 262144");

        throw $r3;

     label3:
        if $z0 != 0 goto label4;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        if $r2 != null goto label5;

     label4:
        $r4 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.prng.EntropySource entropySource>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V> = $r2;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        i1 = lengthof $r2;

        $r5 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine>;

        i0 = interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        if i1 == i0 goto label5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy returned");

        throw $r6;

     label5:
        i1 = lengthof $r1;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        i0 = lengthof $r2;

        i1 = i1 / i0;

        i0 = 0;

     label6:
        if i0 >= i1 goto label7;

        $r5 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine>;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r2, 0, $r7, 0);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        $r8 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void process(byte[],byte[],byte[])>($r2, $r7, $r8);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r8 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void process(byte[],byte[],byte[])>($r2, $r7, $r8);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $i4 = lengthof $r7;

        $i4 = $i4 * i0;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $i5 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i4, $i5);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void increment(byte[])>($r2);

        i0 = i0 + 1;

        goto label6;

     label7:
        i0 = lengthof $r1;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $i4 = lengthof $r2;

        $i4 = $i4 * i1;

        i0 = i0 - $i4;

        if i0 <= 0 goto label8;

        $r5 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine>;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        interfaceinvoke $r5.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r2, 0, $r7, 0);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        $r8 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void process(byte[],byte[],byte[])>($r2, $r7, $r8);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r8 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] I>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void process(byte[],byte[],byte[])>($r2, $r7, $r8);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $r7 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] R>;

        $i4 = lengthof $r7;

        i1 = $i4 * i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, i1, i0);

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] DT>;

        specialinvoke r0.<org.spongycastle.crypto.prng.X931RNG: void increment(byte[])>($r2);

     label8:
        $l2 = r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter>;

        $l2 = $l2 + 1L;

        r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter> = $l2;

        i1 = lengthof $r1;

        return i1;

     label9:
        return -1;
    }
    void reseed()
    {
        org.spongycastle.crypto.prng.X931RNG r0;
        org.spongycastle.crypto.prng.EntropySource $r1;
        byte[] $r2;
        int $i0, $i1;
        org.spongycastle.crypto.BlockCipher $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.spongycastle.crypto.prng.X931RNG;

        $r1 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.prng.EntropySource entropySource>;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.prng.EntropySource: byte[] getEntropy()>();

        r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V> = $r2;

        $r2 = r0.<org.spongycastle.crypto.prng.X931RNG: byte[] V>;

        $i0 = lengthof $r2;

        $r3 = r0.<org.spongycastle.crypto.prng.X931RNG: org.spongycastle.crypto.BlockCipher engine>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Insufficient entropy returned");

        throw $r4;

     label1:
        r0.<org.spongycastle.crypto.prng.X931RNG: long reseedCounter> = 1L;

        return;
    }
