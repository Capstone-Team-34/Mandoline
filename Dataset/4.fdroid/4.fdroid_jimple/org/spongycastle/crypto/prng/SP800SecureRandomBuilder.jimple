org.spongycastle.crypto.prng.SP800SecureRandomBuilder extends java.lang.Object
private int entropyBitsRequired
private final org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider
private byte[] personalizationString
private final java.security.SecureRandom random
private int securityStrength
    public void <init>()
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: void <init>(java.security.SecureRandom,boolean)>($r1, 0);

        return;
    }
    public void <init>(java.security.SecureRandom, boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        java.security.SecureRandom $r1;
        boolean $z0;
        org.spongycastle.crypto.prng.BasicEntropySourceProvider $r2;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: java.security.SecureRandom;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength> = 256;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired> = 256;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random> = $r1;

        $r2 = new org.spongycastle.crypto.prng.BasicEntropySourceProvider;

        $r1 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        specialinvoke $r2.<org.spongycastle.crypto.prng.BasicEntropySourceProvider: void <init>(java.security.SecureRandom,boolean)>($r1, $z0);

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider> = $r2;

        return;
    }
    public void <init>(org.spongycastle.crypto.prng.EntropySourceProvider)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.prng.EntropySourceProvider $r1;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.prng.EntropySourceProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength> = 256;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired> = 256;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random> = null;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider> = $r1;

        return;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandom buildCTR(org.spongycastle.crypto.BlockCipher, int, byte[], boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1;
        byte[] $r2, $r3;
        boolean $z0;
        org.spongycastle.crypto.prng.SP800SecureRandom $r4;
        java.security.SecureRandom $r5;
        org.spongycastle.crypto.prng.EntropySource $r6;
        org.spongycastle.crypto.prng.EntropySourceProvider $r7;
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder$CTRDRBGProvider $r8;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $z0 := @parameter3: boolean;

        $r4 = new org.spongycastle.crypto.prng.SP800SecureRandom;

        $r5 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        $r7 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i1 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired>;

        $r6 = interfaceinvoke $r7.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i1);

        $r8 = new org.spongycastle.crypto.prng.SP800SecureRandomBuilder$CTRDRBGProvider;

        $r3 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString>;

        $i1 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength>;

        specialinvoke $r8.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder$CTRDRBGProvider: void <init>(org.spongycastle.crypto.BlockCipher,int,byte[],byte[],int)>($r1, $i0, $r2, $r3, $i1);

        specialinvoke $r4.<org.spongycastle.crypto.prng.SP800SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.EntropySource,org.spongycastle.crypto.prng.DRBGProvider,boolean)>($r5, $r6, $r8, $z0);

        return $r4;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandom buildDualEC(org.spongycastle.crypto.Digest, byte[], boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, $r5;
        boolean $z0;
        org.spongycastle.crypto.prng.SP800SecureRandom $r3;
        java.security.SecureRandom $r4;
        int $i0;
        org.spongycastle.crypto.prng.EntropySource $r6;
        org.spongycastle.crypto.prng.EntropySourceProvider $r7;
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder$DualECDRBGProvider $r8;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $r3 = new org.spongycastle.crypto.prng.SP800SecureRandom;

        $r4 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        $r7 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired>;

        $r6 = interfaceinvoke $r7.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i0);

        $r8 = new org.spongycastle.crypto.prng.SP800SecureRandomBuilder$DualECDRBGProvider;

        $r5 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength>;

        specialinvoke $r8.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder$DualECDRBGProvider: void <init>(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r1, $r2, $r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.prng.SP800SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.EntropySource,org.spongycastle.crypto.prng.DRBGProvider,boolean)>($r4, $r6, $r8, $z0);

        return $r3;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandom buildDualEC(org.spongycastle.crypto.prng.drbg.DualECPoints[], org.spongycastle.crypto.Digest, byte[], boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.prng.drbg.DualECPoints[] $r1;
        org.spongycastle.crypto.Digest $r2;
        byte[] $r3, $r4;
        boolean $z0;
        int $i0;
        org.spongycastle.crypto.prng.SP800SecureRandom $r5;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.prng.EntropySource $r7;
        org.spongycastle.crypto.prng.EntropySourceProvider $r8;
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider $r9;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.prng.drbg.DualECPoints[];

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        $r3 := @parameter2: byte[];

        $z0 := @parameter3: boolean;

        $r5 = new org.spongycastle.crypto.prng.SP800SecureRandom;

        $r6 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        $r8 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired>;

        $r7 = interfaceinvoke $r8.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i0);

        $r9 = new org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider;

        $r4 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength>;

        specialinvoke $r9.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider: void <init>(org.spongycastle.crypto.prng.drbg.DualECPoints[],org.spongycastle.crypto.Digest,byte[],byte[],int)>($r1, $r2, $r3, $r4, $i0);

        specialinvoke $r5.<org.spongycastle.crypto.prng.SP800SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.EntropySource,org.spongycastle.crypto.prng.DRBGProvider,boolean)>($r6, $r7, $r9, $z0);

        return $r5;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandom buildHMAC(org.spongycastle.crypto.Mac, byte[], boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.Mac $r1;
        byte[] $r2, $r5;
        boolean $z0;
        org.spongycastle.crypto.prng.SP800SecureRandom $r3;
        java.security.SecureRandom $r4;
        int $i0;
        org.spongycastle.crypto.prng.EntropySource $r6;
        org.spongycastle.crypto.prng.EntropySourceProvider $r7;
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HMacDRBGProvider $r8;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.Mac;

        $r2 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $r3 = new org.spongycastle.crypto.prng.SP800SecureRandom;

        $r4 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        $r7 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired>;

        $r6 = interfaceinvoke $r7.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i0);

        $r8 = new org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HMacDRBGProvider;

        $r5 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength>;

        specialinvoke $r8.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HMacDRBGProvider: void <init>(org.spongycastle.crypto.Mac,byte[],byte[],int)>($r1, $r2, $r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.prng.SP800SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.EntropySource,org.spongycastle.crypto.prng.DRBGProvider,boolean)>($r4, $r6, $r8, $z0);

        return $r3;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandom buildHash(org.spongycastle.crypto.Digest, byte[], boolean)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, $r5;
        boolean $z0;
        org.spongycastle.crypto.prng.SP800SecureRandom $r3;
        java.security.SecureRandom $r4;
        int $i0;
        org.spongycastle.crypto.prng.EntropySource $r6;
        org.spongycastle.crypto.prng.EntropySourceProvider $r7;
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HashDRBGProvider $r8;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        $r3 = new org.spongycastle.crypto.prng.SP800SecureRandom;

        $r4 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: java.security.SecureRandom random>;

        $r7 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: org.spongycastle.crypto.prng.EntropySourceProvider entropySourceProvider>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired>;

        $r6 = interfaceinvoke $r7.<org.spongycastle.crypto.prng.EntropySourceProvider: org.spongycastle.crypto.prng.EntropySource get(int)>($i0);

        $r8 = new org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HashDRBGProvider;

        $r5 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString>;

        $i0 = r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength>;

        specialinvoke $r8.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder$HashDRBGProvider: void <init>(org.spongycastle.crypto.Digest,byte[],byte[],int)>($r1, $r2, $r5, $i0);

        specialinvoke $r3.<org.spongycastle.crypto.prng.SP800SecureRandom: void <init>(java.security.SecureRandom,org.spongycastle.crypto.prng.EntropySource,org.spongycastle.crypto.prng.DRBGProvider,boolean)>($r4, $r6, $r8, $z0);

        return $r3;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandomBuilder setEntropyBitsRequired(int)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int entropyBitsRequired> = $i0;

        return r0;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandomBuilder setPersonalizationString(byte[])
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: byte[] personalizationString> = $r1;

        return r0;
    }
    public org.spongycastle.crypto.prng.SP800SecureRandomBuilder setSecurityStrength(int)
    {
        org.spongycastle.crypto.prng.SP800SecureRandomBuilder r0;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.SP800SecureRandomBuilder;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.crypto.prng.SP800SecureRandomBuilder: int securityStrength> = $i0;

        return r0;
    }
