org.spongycastle.crypto.prng.DigestRandomGenerator extends java.lang.Object implements org.spongycastle.crypto.prng.RandomGenerator
private static long CYCLE_COUNT
private org.spongycastle.crypto.Digest digest
private byte[] seed
private long seedCounter
private byte[] state
private long stateCounter
    static void <clinit>()
    {
        <org.spongycastle.crypto.prng.DigestRandomGenerator: long CYCLE_COUNT> = 10L;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: org.spongycastle.crypto.Digest digest> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed> = $r2;

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long seedCounter> = 1L;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] state> = $r2;

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long stateCounter> = 1L;

        return;
    }
    private void cycleSeed()
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1;
        long $l0, $l1;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $l0 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long seedCounter>;

        $l1 = 1L + $l0;

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long seedCounter> = $l1;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>($l0);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r1);

        return;
    }
    private void digestAddCounter(long)
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        long $l0;
        int i1, $i2;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $l0 := @parameter0: long;

        i1 = 0;

     label1:
        if i1 == 8 goto label2;

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: org.spongycastle.crypto.Digest digest>;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b3);

        $l0 = $l0 >>> 8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void digestDoFinal(byte[])
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, 0);

        return;
    }
    private void digestUpdate(byte[])
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r1;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    private void generateState()
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        long $l0, $l1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $l0 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long stateCounter>;

        $l1 = 1L + $l0;

        r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long stateCounter> = $l1;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>($l0);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r1);

        $l0 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: long stateCounter>;

        $l1 = <org.spongycastle.crypto.prng.DigestRandomGenerator: long CYCLE_COUNT>;

        $l0 = $l0 % $l1;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void cycleSeed()>();

     label1:
        return;
    }
    public void addSeedMaterial(long)
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        long $l0;
        byte[] $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestAddCounter(long)>($l0);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void addSeedMaterial(byte[])
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: byte[];

        entermonitor r0;

     label1:
        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestUpdate(byte[])>($r1);

        $r1 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] seed>;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void digestDoFinal(byte[])>($r1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void nextBytes(byte[])
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void nextBytes(byte[], int, int)
    {
        org.spongycastle.crypto.prng.DigestRandomGenerator r0;
        byte[] $r1, $r2;
        int $i0, $i1, i2, $i3;
        byte $b4;
        java.lang.Throwable $r3;

        r0 := @this: org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        entermonitor r0;

        i2 = 0;

     label01:
        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void generateState()>();

        $i1 = $i0 + $i1;

     label02:
        if $i0 == $i1 goto label07;

        $r2 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

        $i3 = lengthof $r2;

        if i2 != $i3 goto label13;

        specialinvoke r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: void generateState()>();

     label03:
        $i3 = 0;

     label04:
        $r2 = r0.<org.spongycastle.crypto.prng.DigestRandomGenerator: byte[] state>;

     label05:
        i2 = $i3 + 1;

     label06:
        $b4 = $r2[$i3];

        $r1[$i0] = $b4;

        $i0 = $i0 + 1;

        goto label02;

     label07:
        exitmonitor r0;

     label08:
        return;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r3;

     label12:
        $r3 := @caughtexception;

        goto label10;

     label13:
        $i3 = i2;

        goto label04;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label11 with label09;
    }
