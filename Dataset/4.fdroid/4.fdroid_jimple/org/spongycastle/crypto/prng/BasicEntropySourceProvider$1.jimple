org.spongycastle.crypto.prng.BasicEntropySourceProvider$1 extends java.lang.Object implements org.spongycastle.crypto.prng.EntropySource
final org.spongycastle.crypto.prng.BasicEntropySourceProvider this$0
final int val$bitsRequired
    void <init>(org.spongycastle.crypto.prng.BasicEntropySourceProvider, int)
    {
        org.spongycastle.crypto.prng.BasicEntropySourceProvider$1 r0;
        org.spongycastle.crypto.prng.BasicEntropySourceProvider $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.prng.BasicEntropySourceProvider$1;

        $r1 := @parameter0: org.spongycastle.crypto.prng.BasicEntropySourceProvider;

        $i0 := @parameter1: int;

        r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: org.spongycastle.crypto.prng.BasicEntropySourceProvider this$0> = $r1;

        r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: int val$bitsRequired> = $i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int entropySize()
    {
        org.spongycastle.crypto.prng.BasicEntropySourceProvider$1 r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.prng.BasicEntropySourceProvider$1;

        i0 = r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: int val$bitsRequired>;

        return i0;
    }
    public byte[] getEntropy()
    {
        org.spongycastle.crypto.prng.BasicEntropySourceProvider$1 r0;
        org.spongycastle.crypto.prng.BasicEntropySourceProvider $r1;
        java.security.SecureRandom $r2;
        int $i0;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.prng.BasicEntropySourceProvider$1;

        $r1 = r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: org.spongycastle.crypto.prng.BasicEntropySourceProvider this$0>;

        $r2 = staticinvoke <org.spongycastle.crypto.prng.BasicEntropySourceProvider: java.security.SecureRandom access$100(org.spongycastle.crypto.prng.BasicEntropySourceProvider)>($r1);

        $i0 = r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: int val$bitsRequired>;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $r3 = virtualinvoke $r2.<java.security.SecureRandom: byte[] generateSeed(int)>($i0);

        return $r3;
    }
    public boolean isPredictionResistant()
    {
        org.spongycastle.crypto.prng.BasicEntropySourceProvider$1 r0;
        boolean $z0;
        org.spongycastle.crypto.prng.BasicEntropySourceProvider $r1;

        r0 := @this: org.spongycastle.crypto.prng.BasicEntropySourceProvider$1;

        $r1 = r0.<org.spongycastle.crypto.prng.BasicEntropySourceProvider$1: org.spongycastle.crypto.prng.BasicEntropySourceProvider this$0>;

        $z0 = staticinvoke <org.spongycastle.crypto.prng.BasicEntropySourceProvider: boolean access$000(org.spongycastle.crypto.prng.BasicEntropySourceProvider)>($r1);

        return $z0;
    }
