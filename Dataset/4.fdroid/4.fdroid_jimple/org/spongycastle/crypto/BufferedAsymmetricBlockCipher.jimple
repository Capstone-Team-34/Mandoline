org.spongycastle.crypto.BufferedAsymmetricBlockCipher extends java.lang.Object
protected byte[] buf
protected int bufOff
private final org.spongycastle.crypto.AsymmetricBlockCipher cipher
    public void <init>(org.spongycastle.crypto.AsymmetricBlockCipher)
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 := @parameter0: org.spongycastle.crypto.AsymmetricBlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher> = $r1;

        return;
    }
    public byte[] doFinal() throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $r2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i0 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r2, 0, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void reset()>();

        return $r2;
    }
    public int getBufferPosition()
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        i0 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        return i0;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        return $i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        return $i0;
    }
    public org.spongycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        org.spongycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters $r1;
        int $i0;
        org.spongycastle.crypto.AsymmetricBlockCipher $r2;
        byte $b1;
        byte[] $r3;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>($z0, $r1);

        $r2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: org.spongycastle.crypto.AsymmetricBlockCipher cipher>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        if $z0 == 0 goto label2;

        $b1 = 1;

     label1:
        $i0 = $b1 + $i0;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf> = $r3;

        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = 0;

        return;

     label2:
        $b1 = 0;

        goto label1;
    }
    public void processByte(byte)
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte $b0;
        int $i1, $i2;
        byte[] $r1;
        org.spongycastle.crypto.DataLengthException $r2;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i2 = lengthof $r1;

        if $i1 < $i2 goto label1;

        $r2 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r2.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("attempt to process message too long for cipher");

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i1 = $i2 + 1;

        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = $i1;

        $r1[$i2] = $b0;

        return;
    }
    public void processBytes(byte[], int, int)
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.DataLengthException $r4;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 != 0 goto label1;

        return;

     label1:
        if $i1 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r2;

     label2:
        $i2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i2 = $i2 + $i1;

        $r3 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i3 = lengthof $r3;

        if $i2 <= $i3 goto label3;

        $r4 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("attempt to process message too long for cipher");

        throw $r4;

     label3:
        $r3 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i2 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, $i2, $i1);

        $i0 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = $i0;

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.BufferedAsymmetricBlockCipher r0;
        byte[] $r1;
        int i0, $i1;

        r0 := @this: org.spongycastle.crypto.BufferedAsymmetricBlockCipher;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        if $r1 == null goto label2;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: byte[] buf>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.BufferedAsymmetricBlockCipher: int bufOff> = 0;

        return;
    }
