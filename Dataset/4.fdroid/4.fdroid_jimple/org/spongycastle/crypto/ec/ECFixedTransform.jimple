org.spongycastle.crypto.ec.ECFixedTransform extends java.lang.Object implements org.spongycastle.crypto.ec.ECPairFactorTransform
private java.math.BigInteger k
private org.spongycastle.crypto.params.ECPublicKeyParameters key
    public void <init>(java.math.BigInteger)
    {
        org.spongycastle.crypto.ec.ECFixedTransform r0;
        java.math.BigInteger $r1;

        r0 := @this: org.spongycastle.crypto.ec.ECFixedTransform;

        $r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.ec.ECFixedTransform: java.math.BigInteger k> = $r1;

        return;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.ec.ECFixedTransform r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.ec.ECFixedTransform;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public java.math.BigInteger getTransformValue()
    {
        org.spongycastle.crypto.ec.ECFixedTransform r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.ec.ECFixedTransform;

        r1 = r0.<org.spongycastle.crypto.ec.ECFixedTransform: java.math.BigInteger k>;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.ec.ECFixedTransform r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.ec.ECFixedTransform;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ECPublicKeyParameters are required for fixed transform.");

        throw $r2;

     label1:
        $r3 = (org.spongycastle.crypto.params.ECPublicKeyParameters) $r1;

        r0.<org.spongycastle.crypto.ec.ECFixedTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key> = $r3;

        return;
    }
    public org.spongycastle.crypto.ec.ECPair transform(org.spongycastle.crypto.ec.ECPair)
    {
        org.spongycastle.crypto.ec.ECFixedTransform r0;
        org.spongycastle.crypto.ec.ECPair $r1;
        org.spongycastle.math.ec.ECPoint[] r2;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        java.math.BigInteger $r6, $r8;
        org.spongycastle.math.ec.ECMultiplier $r7;
        org.spongycastle.math.ec.ECPoint $r9, $r10;
        org.spongycastle.math.ec.ECCurve $r11;

        r0 := @this: org.spongycastle.crypto.ec.ECFixedTransform;

        $r1 := @parameter0: org.spongycastle.crypto.ec.ECPair;

        $r3 = r0.<org.spongycastle.crypto.ec.ECFixedTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ECFixedTransform not initialised");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.crypto.ec.ECFixedTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.ec.ECFixedTransform: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

        $r8 = r0.<org.spongycastle.crypto.ec.ECFixedTransform: java.math.BigInteger k>;

        $r6 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r6);

        r2 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        $r9 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r9 = interfaceinvoke $r7.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r9, $r6);

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getX()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

        r2[0] = $r9;

        $r3 = r0.<org.spongycastle.crypto.ec.ECFixedTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        $r9 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r6);

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getY()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

        r2[1] = $r9;

        $r11 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        virtualinvoke $r11.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r2);

        $r1 = new org.spongycastle.crypto.ec.ECPair;

        $r9 = r2[0];

        $r10 = r2[1];

        specialinvoke $r1.<org.spongycastle.crypto.ec.ECPair: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.math.ec.ECPoint)>($r9, $r10);

        return $r1;
    }
