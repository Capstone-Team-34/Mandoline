org.spongycastle.crypto.ec.ECElGamalDecryptor extends java.lang.Object implements org.spongycastle.crypto.ec.ECDecryptor
private org.spongycastle.crypto.params.ECPrivateKeyParameters key
    public void <init>()
    {
        org.spongycastle.crypto.ec.ECElGamalDecryptor r0;

        r0 := @this: org.spongycastle.crypto.ec.ECElGamalDecryptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.math.ec.ECPoint decrypt(org.spongycastle.crypto.ec.ECPair)
    {
        org.spongycastle.crypto.ec.ECElGamalDecryptor r0;
        org.spongycastle.crypto.ec.ECPair $r1;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r2;
        java.lang.IllegalStateException $r3;
        org.spongycastle.math.ec.ECPoint $r4, $r6;
        java.math.BigInteger $r5;

        r0 := @this: org.spongycastle.crypto.ec.ECElGamalDecryptor;

        $r1 := @parameter0: org.spongycastle.crypto.ec.ECPair;

        $r2 = r0.<org.spongycastle.crypto.ec.ECElGamalDecryptor: org.spongycastle.crypto.params.ECPrivateKeyParameters key>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ECElGamalDecryptor not initialised");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getX()>();

        $r2 = r0.<org.spongycastle.crypto.ec.ECElGamalDecryptor: org.spongycastle.crypto.params.ECPrivateKeyParameters key>;

        $r5 = virtualinvoke $r2.<org.spongycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r4 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r5);

        $r6 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getY()>();

        $r4 = virtualinvoke $r6.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint subtract(org.spongycastle.math.ec.ECPoint)>($r4);

        $r4 = virtualinvoke $r4.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint normalize()>();

        return $r4;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.ec.ECElGamalDecryptor r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ECPrivateKeyParameters $r3;

        r0 := @this: org.spongycastle.crypto.ec.ECElGamalDecryptor;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ECPrivateKeyParameters;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ECPrivateKeyParameters are required for decryption.");

        throw $r2;

     label1:
        $r3 = (org.spongycastle.crypto.params.ECPrivateKeyParameters) $r1;

        r0.<org.spongycastle.crypto.ec.ECElGamalDecryptor: org.spongycastle.crypto.params.ECPrivateKeyParameters key> = $r3;

        return;
    }
