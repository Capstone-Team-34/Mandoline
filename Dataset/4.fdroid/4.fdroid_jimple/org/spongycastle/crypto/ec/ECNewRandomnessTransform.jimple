org.spongycastle.crypto.ec.ECNewRandomnessTransform extends java.lang.Object implements org.spongycastle.crypto.ec.ECPairFactorTransform
private org.spongycastle.crypto.params.ECPublicKeyParameters key
private java.math.BigInteger lastK
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.crypto.ec.ECNewRandomnessTransform r0;

        r0 := @this: org.spongycastle.crypto.ec.ECNewRandomnessTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()
    {
        org.spongycastle.crypto.ec.ECNewRandomnessTransform r0;
        org.spongycastle.math.ec.FixedPointCombMultiplier $r1;

        r0 := @this: org.spongycastle.crypto.ec.ECNewRandomnessTransform;

        $r1 = new org.spongycastle.math.ec.FixedPointCombMultiplier;

        specialinvoke $r1.<org.spongycastle.math.ec.FixedPointCombMultiplier: void <init>()>();

        return $r1;
    }
    public java.math.BigInteger getTransformValue()
    {
        org.spongycastle.crypto.ec.ECNewRandomnessTransform r0;
        java.math.BigInteger r1;

        r0 := @this: org.spongycastle.crypto.ec.ECNewRandomnessTransform;

        r1 = r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: java.math.BigInteger lastK>;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.ec.ECNewRandomnessTransform r0;
        org.spongycastle.crypto.CipherParameters r1;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r4;
        java.security.SecureRandom $r5;

        r0 := @this: org.spongycastle.crypto.ec.ECNewRandomnessTransform;

        r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $z0 = r1 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ECPublicKeyParameters are required for new randomness transform.");

        throw $r3;

     label1:
        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key> = $r4;

        $r5 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: java.security.SecureRandom random> = $r5;

        return;

     label2:
        $z0 = r1 instanceof org.spongycastle.crypto.params.ECPublicKeyParameters;

        if $z0 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ECPublicKeyParameters are required for new randomness transform.");

        throw $r3;

     label3:
        $r4 = (org.spongycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key> = $r4;

        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: java.security.SecureRandom random> = $r5;

        return;
    }
    public org.spongycastle.crypto.ec.ECPair transform(org.spongycastle.crypto.ec.ECPair)
    {
        org.spongycastle.crypto.ec.ECNewRandomnessTransform r0;
        org.spongycastle.crypto.ec.ECPair $r1;
        org.spongycastle.math.ec.ECPoint[] r2;
        org.spongycastle.crypto.params.ECPublicKeyParameters $r3;
        java.lang.IllegalStateException $r4;
        org.spongycastle.crypto.params.ECDomainParameters $r5;
        java.math.BigInteger $r6;
        org.spongycastle.math.ec.ECMultiplier $r7;
        java.security.SecureRandom $r8;
        org.spongycastle.math.ec.ECPoint $r9, $r10;
        org.spongycastle.math.ec.ECCurve $r11;

        r0 := @this: org.spongycastle.crypto.ec.ECNewRandomnessTransform;

        $r1 := @parameter0: org.spongycastle.crypto.ec.ECPair;

        $r3 = r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ECNewRandomnessTransform not initialised");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        $r5 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.crypto.params.ECDomainParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $r7 = virtualinvoke r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier()>();

        $r8 = r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: java.security.SecureRandom random>;

        $r6 = staticinvoke <org.spongycastle.crypto.ec.ECUtil: java.math.BigInteger generateK(java.math.BigInteger,java.security.SecureRandom)>($r6, $r8);

        r2 = newarray (org.spongycastle.math.ec.ECPoint)[2];

        $r9 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECPoint getG()>();

        $r9 = interfaceinvoke $r7.<org.spongycastle.math.ec.ECMultiplier: org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger)>($r9, $r6);

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getX()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

        r2[0] = $r9;

        $r3 = r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: org.spongycastle.crypto.params.ECPublicKeyParameters key>;

        $r9 = virtualinvoke $r3.<org.spongycastle.crypto.params.ECPublicKeyParameters: org.spongycastle.math.ec.ECPoint getQ()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r6);

        $r10 = virtualinvoke $r1.<org.spongycastle.crypto.ec.ECPair: org.spongycastle.math.ec.ECPoint getY()>();

        $r9 = virtualinvoke $r9.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint)>($r10);

        r2[1] = $r9;

        $r11 = virtualinvoke $r5.<org.spongycastle.crypto.params.ECDomainParameters: org.spongycastle.math.ec.ECCurve getCurve()>();

        virtualinvoke $r11.<org.spongycastle.math.ec.ECCurve: void normalizeAll(org.spongycastle.math.ec.ECPoint[])>(r2);

        r0.<org.spongycastle.crypto.ec.ECNewRandomnessTransform: java.math.BigInteger lastK> = $r6;

        $r1 = new org.spongycastle.crypto.ec.ECPair;

        $r9 = r2[0];

        $r10 = r2[1];

        specialinvoke $r1.<org.spongycastle.crypto.ec.ECPair: void <init>(org.spongycastle.math.ec.ECPoint,org.spongycastle.math.ec.ECPoint)>($r9, $r10);

        return $r1;
    }
