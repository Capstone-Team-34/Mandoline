org.spongycastle.crypto.io.CipherInputStream extends java.io.FilterInputStream
private static final int INPUT_BUF_SIZE
private org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher
private byte[] buf
private int bufOff
private org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher
private boolean finalized
private byte[] inBuf
private byte[] markBuf
private int markBufOff
private long markPosition
private int maxBuf
private org.spongycastle.crypto.SkippingCipher skippingCipher
private org.spongycastle.crypto.StreamCipher streamCipher
    public void <init>(java.io.InputStream, org.spongycastle.crypto.BufferedBlockCipher)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.BufferedBlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.crypto.BufferedBlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void <init>(java.io.InputStream,org.spongycastle.crypto.BufferedBlockCipher,int)>($r1, $r2, 2048);

        return;
    }
    public void <init>(java.io.InputStream, org.spongycastle.crypto.BufferedBlockCipher, int)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        int $i0;
        org.spongycastle.crypto.BufferedBlockCipher r2;
        byte[] $r3;
        boolean $z0;
        org.spongycastle.crypto.SkippingCipher r4;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.spongycastle.crypto.BufferedBlockCipher;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher> = r2;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf> = $r3;

        $z0 = r2 instanceof org.spongycastle.crypto.SkippingCipher;

        if $z0 == 0 goto label2;

        r4 = (org.spongycastle.crypto.SkippingCipher) r2;

     label1:
        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher> = r4;

        return;

     label2:
        r4 = null;

        goto label1;
    }
    public void <init>(java.io.InputStream, org.spongycastle.crypto.StreamCipher)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.StreamCipher $r2;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.crypto.StreamCipher;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void <init>(java.io.InputStream,org.spongycastle.crypto.StreamCipher,int)>($r1, $r2, 2048);

        return;
    }
    public void <init>(java.io.InputStream, org.spongycastle.crypto.StreamCipher, int)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        int $i0;
        org.spongycastle.crypto.StreamCipher r2;
        byte[] $r3;
        boolean $z0;
        org.spongycastle.crypto.SkippingCipher r4;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.spongycastle.crypto.StreamCipher;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.StreamCipher streamCipher> = r2;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf> = $r3;

        $z0 = r2 instanceof org.spongycastle.crypto.SkippingCipher;

        if $z0 == 0 goto label2;

        r4 = (org.spongycastle.crypto.SkippingCipher) r2;

     label1:
        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher> = r4;

        return;

     label2:
        r4 = null;

        goto label1;
    }
    public void <init>(java.io.InputStream, org.spongycastle.crypto.modes.AEADBlockCipher)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        org.spongycastle.crypto.modes.AEADBlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.crypto.modes.AEADBlockCipher;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void <init>(java.io.InputStream,org.spongycastle.crypto.modes.AEADBlockCipher,int)>($r1, $r2, 2048);

        return;
    }
    public void <init>(java.io.InputStream, org.spongycastle.crypto.modes.AEADBlockCipher, int)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.io.InputStream $r1;
        int $i0;
        org.spongycastle.crypto.modes.AEADBlockCipher r2;
        byte[] $r3;
        boolean $z0;
        org.spongycastle.crypto.SkippingCipher r4;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.spongycastle.crypto.modes.AEADBlockCipher;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher> = r2;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf> = $r3;

        $z0 = r2 instanceof org.spongycastle.crypto.SkippingCipher;

        if $z0 == 0 goto label2;

        r4 = (org.spongycastle.crypto.SkippingCipher) r2;

     label1:
        r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher> = r4;

        return;

     label2:
        r4 = null;

        goto label1;
    }
    private void ensureCapacity(int, boolean)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        int $i0, i1;
        boolean $z0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;
        byte[] $r2;
        org.spongycastle.crypto.modes.AEADBlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        i1 = $i0;

        if $z0 == 0 goto label4;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        if $r1 == null goto label3;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        i1 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i0);

     label1:
        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        if $r2 == null goto label2;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i0 = lengthof $r2;

        if $i0 >= i1 goto label6;

     label2:
        $r2 = newarray (byte)[i1];

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf> = $r2;

        return;

     label3:
        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        if $r3 == null goto label1;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        i1 = interfaceinvoke $r3.<org.spongycastle.crypto.modes.AEADBlockCipher: int getOutputSize(int)>($i0);

        goto label1;

     label4:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        if $r1 == null goto label5;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        i1 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int getUpdateOutputSize(int)>($i0);

        goto label1;

     label5:
        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        if $r3 == null goto label1;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        i1 = interfaceinvoke $r3.<org.spongycastle.crypto.modes.AEADBlockCipher: int getUpdateOutputSize(int)>($i0);

        goto label1;

     label6:
        return;
    }
    private void finaliseCipher() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        org.spongycastle.crypto.BufferedBlockCipher $r1;
        byte[] $r2;
        int $i0;
        org.spongycastle.crypto.modes.AEADBlockCipher $r3;
        org.spongycastle.crypto.InvalidCipherTextException r4;
        org.spongycastle.crypto.io.InvalidCipherTextIOException $r5;
        java.lang.Exception r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

     label01:
        r0.<org.spongycastle.crypto.io.CipherInputStream: boolean finalized> = 1;

     label02:
        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void ensureCapacity(int,boolean)>(0, 1);

     label03:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

     label04:
        if $r1 == null goto label09;

     label05:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

     label06:
        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r2, 0);

     label07:
        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = $i0;

     label08:
        return;

     label09:
        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

     label10:
        if $r3 == null goto label16;

     label11:
        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

     label12:
        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.modes.AEADBlockCipher: int doFinal(byte[],int)>($r2, 0);

     label13:
        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = $i0;

     label14:
        return;

     label15:
        r4 := @caughtexception;

        $r5 = new org.spongycastle.crypto.io.InvalidCipherTextIOException;

        specialinvoke $r5.<org.spongycastle.crypto.io.InvalidCipherTextIOException: void <init>(java.lang.String,java.lang.Throwable)>("Error finalising cipher", r4);

        throw $r5;

     label16:
        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = 0;

     label17:
        return;

     label18:
        r6 := @caughtexception;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error finalising cipher ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r7;

        catch org.spongycastle.crypto.InvalidCipherTextException from label02 to label03 with label15;
        catch org.spongycastle.crypto.InvalidCipherTextException from label06 to label07 with label15;
        catch org.spongycastle.crypto.InvalidCipherTextException from label12 to label13 with label15;
        catch java.lang.Exception from label01 to label04 with label18;
        catch java.lang.Exception from label05 to label08 with label18;
        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label11 to label14 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }
    private int nextChunk() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        java.lang.Exception r1;
        boolean $z0;
        int $i0;
        java.io.InputStream $r2;
        byte[] $r3, $r5;
        org.spongycastle.crypto.BufferedBlockCipher $r4;
        org.spongycastle.crypto.io.CipherIOException $r6;
        org.spongycastle.crypto.modes.AEADBlockCipher $r7;
        org.spongycastle.crypto.StreamCipher $r8;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $z0 = r0.<org.spongycastle.crypto.io.CipherInputStream: boolean finalized>;

        if $z0 == 0 goto label01;

        return -1;

     label01:
        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = 0;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = 0;

     label02:
        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        if $i0 != 0 goto label15;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

        if $i0 != -1 goto label04;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void finaliseCipher()>();

        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        if $i0 != 0 goto label03;

        return -1;

     label03:
        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        return $i0;

     label04:
        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void ensureCapacity(int,boolean)>($i0, 0);

        $r4 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

     label05:
        if $r4 == null goto label09;

     label06:
        $r4 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.BufferedBlockCipher bufferedBlockCipher>;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf>;

        $r5 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i0 = virtualinvoke $r4.<org.spongycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r3, 0, $i0, $r5, 0);

        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = $i0;

     label07:
        goto label02;

     label08:
        r1 := @caughtexception;

        $r6 = new org.spongycastle.crypto.io.CipherIOException;

        specialinvoke $r6.<org.spongycastle.crypto.io.CipherIOException: void <init>(java.lang.String,java.lang.Throwable)>("Error processing stream ", r1);

        throw $r6;

     label09:
        $r7 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

     label10:
        if $r7 == null goto label13;

     label11:
        $r7 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.modes.AEADBlockCipher aeadBlockCipher>;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf>;

        $r5 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.modes.AEADBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r3, 0, $i0, $r5, 0);

        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = $i0;

     label12:
        goto label02;

     label13:
        $r8 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.StreamCipher streamCipher>;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf>;

        $r5 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        interfaceinvoke $r8.<org.spongycastle.crypto.StreamCipher: int processBytes(byte[],int,int,byte[],int)>($r3, 0, $i0, $r5, 0);

        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = $i0;

     label14:
        goto label02;

     label15:
        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        return $i0;

        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label08;
        catch java.lang.Exception from label11 to label12 with label08;
        catch java.lang.Exception from label13 to label14 with label08;
    }
    public int available() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $i1 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i0 = $i1 - $i0;

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;
        byte[] $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

     label1:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        $z0 = r0.<org.spongycastle.crypto.io.CipherInputStream: boolean finalized>;

        if $z0 != 0 goto label3;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void finaliseCipher()>();

     label3:
        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = 0;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf> = 0;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int markBufOff> = 0;

        r0.<org.spongycastle.crypto.io.CipherInputStream: long markPosition> = 0L;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf>;

        if $r2 == null goto label4;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf> = null;

     label4:
        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        if $r2 == null goto label5;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf> = null;

     label5:
        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] inBuf>;

        staticinvoke <org.spongycastle.util.Arrays: void fill(byte[],byte)>($r2, 0);

        return;

     label6:
        $r3 := @caughtexception;

        $z0 = r0.<org.spongycastle.crypto.io.CipherInputStream: boolean finalized>;

        if $z0 != 0 goto label7;

        specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: void finaliseCipher()>();

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
    }
    public void mark(int)
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        int $i0;
        byte[] $r1, $r4, $r5;
        long $l1;
        java.io.InputStream $r2;
        org.spongycastle.crypto.SkippingCipher $r3;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void mark(int)>($i0);

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        if $r3 == null goto label1;

        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        $l1 = interfaceinvoke $r3.<org.spongycastle.crypto.SkippingCipher: long getPosition()>();

        r0.<org.spongycastle.crypto.io.CipherInputStream: long markPosition> = $l1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        if $r1 == null goto label2;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf> = $r1;

        $r4 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf>;

        $r5 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, 0, $i0);

     label2:
        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int markBufOff> = $i0;

        return;
    }
    public boolean markSupported()
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        boolean $z0;
        org.spongycastle.crypto.SkippingCipher $r1;
        java.io.InputStream $r2;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        if $r1 == null goto label1;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        $z0 = virtualinvoke $r2.<java.io.InputStream: boolean markSupported()>();

        return $z0;

     label1:
        return 0;
    }
    public int read() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i1 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        if $i0 < $i1 goto label1;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int nextChunk()>();

        if $i0 >= 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i0 = $i1 + 1;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i0;

        $b2 = $r1[$i1];

        $i0 = $b2 & 255;

        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i3 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        if $i2 < $i3 goto label1;

        $i2 = specialinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int nextChunk()>();

        if $i2 >= 0 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int available()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf>;

        $i2 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r1, $i0, $i1);

        $i0 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i0 = $i0 + $i1;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i0;

        return $i1;
    }
    public void reset() throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        long $l0;
        org.spongycastle.crypto.SkippingCipher $r1;
        java.io.IOException $r2;
        java.io.InputStream $r3;
        byte[] $r4;
        int $i1;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("cipher must implement SkippingCipher to be used with reset()");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        virtualinvoke $r3.<java.io.InputStream: void reset()>();

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        $l0 = r0.<org.spongycastle.crypto.io.CipherInputStream: long markPosition>;

        interfaceinvoke $r1.<org.spongycastle.crypto.SkippingCipher: long seekTo(long)>($l0);

        $r4 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf>;

        if $r4 == null goto label2;

        $r4 = r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] markBuf>;

        r0.<org.spongycastle.crypto.io.CipherInputStream: byte[] buf> = $r4;

     label2:
        $i1 = r0.<org.spongycastle.crypto.io.CipherInputStream: int markBufOff>;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i1;

        return;
    }
    public long skip(long) throws java.io.IOException
    {
        org.spongycastle.crypto.io.CipherInputStream r0;
        long l0, $l3;
        byte $b1;
        org.spongycastle.crypto.SkippingCipher $r1;
        int $i2, $i4;
        java.io.InputStream $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.crypto.io.CipherInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        return 0L;

     label1:
        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        if $r1 == null goto label4;

        $i2 = virtualinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int available()>();

        $l3 = (long) $i2;

        $b1 = l0 cmp $l3;

        if $b1 > 0 goto label2;

        $i2 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $l3 = (long) $i2;

        $l3 = $l3 + l0;

        $i2 = (int) $l3;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i2;

        return l0;

     label2:
        $i4 = r0.<org.spongycastle.crypto.io.CipherInputStream: int maxBuf>;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i4;

        $r2 = r0.<org.spongycastle.crypto.io.CipherInputStream: java.io.InputStream in>;

        $l3 = (long) $i2;

        l0 = l0 - $l3;

        l0 = virtualinvoke $r2.<java.io.InputStream: long skip(long)>(l0);

        $r1 = r0.<org.spongycastle.crypto.io.CipherInputStream: org.spongycastle.crypto.SkippingCipher skippingCipher>;

        $l3 = interfaceinvoke $r1.<org.spongycastle.crypto.SkippingCipher: long skip(long)>(l0);

        $b1 = l0 cmp $l3;

        if $b1 == 0 goto label3;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to skip cipher ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $l3 = (long) $i2;

        l0 = l0 + $l3;

        return l0;

     label4:
        $i2 = virtualinvoke r0.<org.spongycastle.crypto.io.CipherInputStream: int available()>();

        $l3 = (long) $i2;

        l0 = staticinvoke <java.lang.Math: long min(long,long)>(l0, $l3);

        $i2 = (int) l0;

        $i4 = r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff>;

        $i4 = $i4 + $i2;

        r0.<org.spongycastle.crypto.io.CipherInputStream: int bufOff> = $i4;

        l0 = (long) $i2;

        return l0;
    }
