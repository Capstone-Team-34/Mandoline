org.spongycastle.crypto.macs.SkeinMac extends java.lang.Object implements org.spongycastle.crypto.Mac
public static final int SKEIN_1024
public static final int SKEIN_256
public static final int SKEIN_512
private org.spongycastle.crypto.digests.SkeinEngine engine
    public void <init>(int, int)
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        int $i0, $i1;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.crypto.digests.SkeinEngine;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(int,int)>($i0, $i1);

        r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine> = $r1;

        return;
    }
    public void <init>(org.spongycastle.crypto.macs.SkeinMac)
    {
        org.spongycastle.crypto.macs.SkeinMac r0, $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2, $r3;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 := @parameter0: org.spongycastle.crypto.macs.SkeinMac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.spongycastle.crypto.digests.SkeinEngine;

        $r3 = $r1.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void <init>(org.spongycastle.crypto.digests.SkeinEngine)>($r3);

        r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine> = $r2;

        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine $r2;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int doFinal(byte[],int)>($r1, $i0);

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.digests.SkeinEngine $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skein-MAC-");

        $r2 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        int $i0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        $i0 = virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: int getOutputSize()>();

        return $i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        org.spongycastle.crypto.CipherParameters r1;
        boolean $z0;
        org.spongycastle.crypto.params.SkeinParameters r2;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        org.spongycastle.crypto.params.SkeinParameters$Builder $r5;
        org.spongycastle.crypto.params.KeyParameter r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;
        org.spongycastle.crypto.digests.SkeinEngine $r10;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = r1 instanceof org.spongycastle.crypto.params.SkeinParameters;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.SkeinParameters) r1;

     label1:
        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.SkeinParameters: byte[] getKey()>();

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Skein MAC requires a key parameter.");

        throw $r4;

     label2:
        $z0 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label3;

        $r5 = new org.spongycastle.crypto.params.SkeinParameters$Builder;

        specialinvoke $r5.<org.spongycastle.crypto.params.SkeinParameters$Builder: void <init>()>();

        r6 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r5 = virtualinvoke $r5.<org.spongycastle.crypto.params.SkeinParameters$Builder: org.spongycastle.crypto.params.SkeinParameters$Builder setKey(byte[])>($r3);

        r2 = virtualinvoke $r5.<org.spongycastle.crypto.params.SkeinParameters$Builder: org.spongycastle.crypto.params.SkeinParameters build()>();

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter passed to Skein MAC init - ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        $r10 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r10.<org.spongycastle.crypto.digests.SkeinEngine: void init(org.spongycastle.crypto.params.SkeinParameters)>(r2);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        byte $b0;
        org.spongycastle.crypto.digests.SkeinEngine $r1;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r1.<org.spongycastle.crypto.digests.SkeinEngine: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.macs.SkeinMac r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.digests.SkeinEngine $r2;

        r0 := @this: org.spongycastle.crypto.macs.SkeinMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.macs.SkeinMac: org.spongycastle.crypto.digests.SkeinEngine engine>;

        virtualinvoke $r2.<org.spongycastle.crypto.digests.SkeinEngine: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
