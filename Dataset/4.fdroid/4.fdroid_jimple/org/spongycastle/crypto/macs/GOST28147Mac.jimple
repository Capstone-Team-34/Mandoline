org.spongycastle.crypto.macs.GOST28147Mac extends java.lang.Object implements org.spongycastle.crypto.Mac
private byte[] S
private int blockSize
private byte[] buf
private int bufOff
private boolean firstStep
private byte[] mac
private int macSize
private int[] workingKey
    public void <init>()
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize> = 8;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int macSize> = 4;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep> = 1;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey> = null;

        $r1 = newarray (byte)[128];

        $r1[0] = 9;

        $r1[1] = 6;

        $r1[2] = 3;

        $r1[3] = 2;

        $r1[4] = 8;

        $r1[5] = 11;

        $r1[6] = 1;

        $r1[7] = 7;

        $r1[8] = 10;

        $r1[9] = 4;

        $r1[10] = 14;

        $r1[11] = 15;

        $r1[12] = 12;

        $r1[13] = 0;

        $r1[14] = 13;

        $r1[15] = 5;

        $r1[16] = 3;

        $r1[17] = 7;

        $r1[18] = 14;

        $r1[19] = 9;

        $r1[20] = 8;

        $r1[21] = 10;

        $r1[22] = 15;

        $r1[23] = 0;

        $r1[24] = 5;

        $r1[25] = 2;

        $r1[26] = 6;

        $r1[27] = 12;

        $r1[28] = 11;

        $r1[29] = 4;

        $r1[30] = 13;

        $r1[31] = 1;

        $r1[32] = 14;

        $r1[33] = 4;

        $r1[34] = 6;

        $r1[35] = 2;

        $r1[36] = 11;

        $r1[37] = 3;

        $r1[38] = 13;

        $r1[39] = 8;

        $r1[40] = 12;

        $r1[41] = 15;

        $r1[42] = 5;

        $r1[43] = 10;

        $r1[44] = 0;

        $r1[45] = 7;

        $r1[46] = 1;

        $r1[47] = 9;

        $r1[48] = 14;

        $r1[49] = 7;

        $r1[50] = 10;

        $r1[51] = 12;

        $r1[52] = 13;

        $r1[53] = 1;

        $r1[54] = 3;

        $r1[55] = 9;

        $r1[56] = 0;

        $r1[57] = 2;

        $r1[58] = 11;

        $r1[59] = 4;

        $r1[60] = 15;

        $r1[61] = 8;

        $r1[62] = 5;

        $r1[63] = 6;

        $r1[64] = 11;

        $r1[65] = 5;

        $r1[66] = 1;

        $r1[67] = 9;

        $r1[68] = 8;

        $r1[69] = 13;

        $r1[70] = 15;

        $r1[71] = 0;

        $r1[72] = 14;

        $r1[73] = 4;

        $r1[74] = 2;

        $r1[75] = 3;

        $r1[76] = 12;

        $r1[77] = 7;

        $r1[78] = 10;

        $r1[79] = 6;

        $r1[80] = 3;

        $r1[81] = 10;

        $r1[82] = 13;

        $r1[83] = 12;

        $r1[84] = 1;

        $r1[85] = 2;

        $r1[86] = 0;

        $r1[87] = 11;

        $r1[88] = 7;

        $r1[89] = 5;

        $r1[90] = 9;

        $r1[91] = 4;

        $r1[92] = 8;

        $r1[93] = 15;

        $r1[94] = 14;

        $r1[95] = 6;

        $r1[96] = 1;

        $r1[97] = 13;

        $r1[98] = 2;

        $r1[99] = 9;

        $r1[100] = 7;

        $r1[101] = 10;

        $r1[102] = 6;

        $r1[103] = 0;

        $r1[104] = 8;

        $r1[105] = 12;

        $r1[106] = 4;

        $r1[107] = 5;

        $r1[108] = 15;

        $r1[109] = 3;

        $r1[110] = 11;

        $r1[111] = 14;

        $r1[112] = 11;

        $r1[113] = 10;

        $r1[114] = 15;

        $r1[115] = 5;

        $r1[116] = 0;

        $r1[117] = 12;

        $r1[118] = 14;

        $r1[119] = 8;

        $r1[120] = 6;

        $r1[121] = 2;

        $r1[122] = 3;

        $r1[123] = 9;

        $r1[124] = 1;

        $r1[125] = 7;

        $r1[126] = 13;

        $r1[127] = 4;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S> = $r1;

        $i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac> = $r1;

        $i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf> = $r1;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = 0;

        return;
    }
    private byte[] CM5func(byte[], int, byte[])
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1, $r2, r3;
        int $i0, $i1;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        r3 = newarray (byte)[$i1];

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r3, 0, $i1);

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $b2 = r3[$i0];

        $b3 = $r2[$i0];

        $i1 = $b2 ^ $b3;

        $b2 = (byte) $i1;

        r3[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r3;
    }
    private int bytesToint(byte[], int)
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1;
        int $i0, $i1, $i3;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 + 3;

        $b2 = $r1[$i1];

        $i1 = $b2 << 24;

        $i1 = $i1 & -16777216;

        $i3 = $i0 + 2;

        $b2 = $r1[$i3];

        $i3 = $b2 << 16;

        $i3 = $i3 & 16711680;

        $i1 = $i1 + $i3;

        $i3 = $i0 + 1;

        $b2 = $r1[$i3];

        $i3 = $b2 << 8;

        $i3 = $i3 & 65280;

        $i1 = $i1 + $i3;

        $b2 = $r1[$i0];

        $i0 = $b2 & 255;

        $i0 = $i1 + $i0;

        return $i0;
    }
    private int[] generateWorkingKey(byte[])
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1;
        int[] r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        if $i1 == 32 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key length invalid. Key needs to be 32 byte - 256 bit!!!");

        throw $r3;

     label1:
        r2 = newarray (int)[8];

        $i1 = 0;

     label2:
        if $i1 == 8 goto label3;

        $i0 = $i1 * 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bytesToint(byte[],int)>($r1, $i0);

        r2[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r2;
    }
    private void gost28147MacFunc(int[], byte[], int, byte[], int)
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        int[] $r1;
        byte[] $r2, $r3;
        int $i0, $i1, i2, $i3, i4, i5, $i6;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $r3 := @parameter3: byte[];

        $i1 := @parameter4: int;

        $i3 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bytesToint(byte[],int)>($r2, $i0);

        $i0 = $i0 + 4;

        $i0 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bytesToint(byte[],int)>($r2, $i0);

        i4 = 0;

     label1:
        if i4 >= 2 goto label4;

        i5 = 0;

     label2:
        if i5 >= 8 goto label3;

        i2 = $i3;

        $i6 = $r1[i5];

        $i3 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int gost28147_mainStep(int,int)>($i3, $i6);

        $i3 = $i0 ^ $i3;

        $i0 = i2;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void intTobytes(int,byte[],int)>($i3, $r3, $i1);

        $i1 = $i1 + 4;

        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void intTobytes(int,byte[],int)>($i0, $r3, $i1);

        return;
    }
    private int gost28147_mainStep(int, int)
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        int $i0, $i1, $i3;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i1 + $i0;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i1 = $i0 >> 0;

        $i1 = $i1 & 15;

        $b2 = $r1[$i1];

        $i1 = $b2 << 0;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 4;

        $i3 = $i3 & 15;

        $i3 = $i3 + 16;

        $b2 = $r1[$i3];

        $i3 = $b2 << 4;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 8;

        $i3 = $i3 & 15;

        $i3 = $i3 + 32;

        $b2 = $r1[$i3];

        $i3 = $b2 << 8;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 12;

        $i3 = $i3 & 15;

        $i3 = $i3 + 48;

        $b2 = $r1[$i3];

        $i3 = $b2 << 12;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 16;

        $i3 = $i3 & 15;

        $i3 = $i3 + 64;

        $b2 = $r1[$i3];

        $i3 = $b2 << 16;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 20;

        $i3 = $i3 & 15;

        $i3 = $i3 + 80;

        $b2 = $r1[$i3];

        $i3 = $b2 << 20;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i3 = $i0 >> 24;

        $i3 = $i3 & 15;

        $i3 = $i3 + 96;

        $b2 = $r1[$i3];

        $i3 = $b2 << 24;

        $i1 = $i1 + $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $i0 = $i0 >> 28;

        $i0 = $i0 & 15;

        $i0 = $i0 + 112;

        $b2 = $r1[$i0];

        $i0 = $b2 << 28;

        $i1 = $i1 + $i0;

        $i0 = $i1 << 11;

        $i1 = $i1 >>> 21;

        $i0 = $i0 | $i1;

        return $i0;
    }
    private void intTobytes(int, byte[], int)
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        byte $b4;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i1 + 3;

        $i3 = $i0 >>> 24;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $i2 = $i1 + 2;

        $i3 = $i0 >>> 16;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $i2 = $i1 + 1;

        $i3 = $i0 >>> 8;

        $b4 = (byte) $i3;

        $r1[$i2] = $b4;

        $b4 = (byte) $i0;

        $r1[$i1] = $b4;

        return;
    }
    public int doFinal(byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        int[] $r5;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

     label1:
        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $i2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        if $i1 >= $i2 goto label2;

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $r3[$i1] = 0;

        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = $i1;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i1 = lengthof $r3;

        $r3 = newarray (byte)[$i1];

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i1);

        $z0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep>;

        if $z0 == 0 goto label4;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep> = 0;

     label3:
        $r5 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey>;

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void gost28147MacFunc(int[],byte[],int,byte[],int)>($r5, $r3, 0, $r2, 0);

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $i1 = lengthof $r2;

        $i1 = $i1 / 2;

        $i2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int macSize>;

        $i1 = $i1 - $i2;

        $i2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i1, $r1, $i0, $i2);

        virtualinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int macSize>;

        return $i0;

     label4:
        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] CM5func(byte[],int,byte[])>($r3, 0, $r2);

        goto label3;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        return "GOST28147Mac";
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int macSize>;

        return i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        org.spongycastle.crypto.CipherParameters r1;
        int $i0;
        byte[] $r2, $r4, $r5;
        boolean $z0;
        org.spongycastle.crypto.params.ParametersWithSBox r3;
        org.spongycastle.crypto.params.KeyParameter $r6;
        int[] $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9;
        java.lang.Class $r10;
        java.lang.String $r11;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf> = $r2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithSBox;

        if $z0 == 0 goto label1;

        r3 = (org.spongycastle.crypto.params.ParametersWithSBox) r1;

        $r2 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithSBox: byte[] getSBox()>();

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] S>;

        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithSBox: byte[] getSBox()>();

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, $i0);

        r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithSBox: org.spongycastle.crypto.CipherParameters getParameters()>();

        if r1 == null goto label3;

        r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithSBox: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r6 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r2 = virtualinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r7 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] generateWorkingKey(byte[])>($r2);

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey> = $r7;

        return;

     label1:
        $z0 = r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label2;

        $r6 = (org.spongycastle.crypto.params.KeyParameter) r1;

        $r2 = virtualinvoke $r6.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r7 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] generateWorkingKey(byte[])>($r2);

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey> = $r7;

        return;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to GOST28147 init - ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label3:
        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        int i0, $i1;
        byte[] $r1;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = 0;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep> = 1;

        return;
    }
    public void update(byte) throws java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte $b0;
        byte[] $r1, $r2, $r3;
        int $i1, $i2;
        boolean $z0;
        int[] $r4;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i2 = lengthof $r2;

        if $i1 != $i2 goto label2;

        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i1 = lengthof $r2;

        $r2 = newarray (byte)[$i1];

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        $z0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep>;

        if $z0 == 0 goto label3;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep> = 0;

     label1:
        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey>;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void gost28147MacFunc(int[],byte[],int,byte[],int)>($r4, $r2, 0, $r1, 0);

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = 0;

     label2:
        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = $i2;

        $r2[$i1] = $b0;

        return;

     label3:
        $r2 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $r2 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] CM5func(byte[],int,byte[])>($r2, 0, $r1);

        goto label1;
    }
    public void update(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.GOST28147Mac r0;
        byte[] $r1, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        int[] $r6;

        r0 := @this: org.spongycastle.crypto.macs.GOST28147Mac;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r2;

     label1:
        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $i3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        i0 = i0 - $i3;

        if $i2 <= i0 goto label5;

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r3, $i3, i0);

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $i3 = lengthof $r3;

        $r3 = newarray (byte)[$i3];

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r5 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $i3 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i3);

        $z0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep>;

        if $z0 == 0 goto label4;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: boolean firstStep> = 0;

     label2:
        $r6 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey>;

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void gost28147MacFunc(int[],byte[],int,byte[],int)>($r6, $r3, 0, $r4, 0);

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = 0;

        $i2 = $i2 - i0;

        $i1 = $i1 + i0;

     label3:
        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        if $i2 <= i0 goto label5;

        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] CM5func(byte[],int,byte[])>($r1, $i1, $r3);

        $r6 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int[] workingKey>;

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: void gost28147MacFunc(int[],byte[],int,byte[],int)>($r6, $r3, 0, $r4, 0);

        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $i2 = $i2 - i0;

        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int blockSize>;

        $i1 = $i1 + i0;

        goto label3;

     label4:
        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        $r4 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] mac>;

        $r3 = specialinvoke r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] CM5func(byte[],int,byte[])>($r3, 0, $r4);

        goto label2;

     label5:
        $r3 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: byte[] buf>;

        i0 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r3, i0, $i2);

        $i1 = r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff>;

        $i1 = $i1 + $i2;

        r0.<org.spongycastle.crypto.macs.GOST28147Mac: int bufOff> = $i1;

        return;
    }
