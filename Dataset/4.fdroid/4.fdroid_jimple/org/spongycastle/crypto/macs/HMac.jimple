org.spongycastle.crypto.macs.HMac extends java.lang.Object implements org.spongycastle.crypto.Mac
private static final byte IPAD
private static final byte OPAD
private static java.util.Hashtable blockLengths
private int blockLength
private org.spongycastle.crypto.Digest digest
private int digestSize
private byte[] inputPad
private org.spongycastle.util.Memoable ipadState
private org.spongycastle.util.Memoable opadState
private byte[] outputBuf
    static void <clinit>()
    {
        java.util.Hashtable $r0;
        java.lang.Integer $r1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths> = $r0;

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(32);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("GOST3411", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(16);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD2", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD4", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("MD5", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("RIPEMD128", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("RIPEMD160", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-1", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-224", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-256", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-384", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SHA-512", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("Tiger", $r1);

        $r0 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r1 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("Whirlpool", $r1);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.macs.HMac r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 = staticinvoke <org.spongycastle.crypto.macs.HMac: int getByteLength(org.spongycastle.crypto.Digest)>($r1);

        specialinvoke r0.<org.spongycastle.crypto.macs.HMac: void <init>(org.spongycastle.crypto.Digest,int)>($r1, $i0);

        return;
    }
    private void <init>(org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.crypto.macs.HMac r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest> = $r1;

        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.macs.HMac: int digestSize> = $i1;

        r0.<org.spongycastle.crypto.macs.HMac: int blockLength> = $i0;

        $i0 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad> = $r2;

        $i1 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        $i0 = r0.<org.spongycastle.crypto.macs.HMac: int digestSize>;

        $i0 = $i1 + $i0;

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf> = $r2;

        return;
    }
    private static int getByteLength(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.Digest r0;
        boolean $z0;
        org.spongycastle.crypto.ExtendedDigest r1;
        int $i0;
        java.util.Hashtable $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        java.lang.Integer r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;

        r0 := @parameter0: org.spongycastle.crypto.Digest;

        $z0 = r0 instanceof org.spongycastle.crypto.ExtendedDigest;

        if $z0 == 0 goto label1;

        r1 = (org.spongycastle.crypto.ExtendedDigest) r0;

        $i0 = interfaceinvoke r1.<org.spongycastle.crypto.ExtendedDigest: int getByteLength()>();

        return $i0;

     label1:
        $r2 = <org.spongycastle.crypto.macs.HMac: java.util.Hashtable blockLengths>;

        $r3 = interfaceinvoke r0.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.lang.Integer) $r4;

        if r5 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown digest passed: ");

        $r3 = interfaceinvoke r0.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label2:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }
    private static void xorPad(byte[], int, byte)
    {
        byte[] $r0;
        int $i0, i2, $i4;
        byte $b1, $b3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 := @parameter2: byte;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $b3 = $r0[i2];

        $i4 = $b3 ^ $b1;

        $b3 = (byte) $i4;

        $r0[i2] = $b3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.macs.HMac r0;
        byte[] $r1, $r3, $r7;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.Digest $r2, $r6;
        org.spongycastle.util.Memoable $r4, $r5;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r3 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $i1 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r3, $i1);

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable opadState>;

        if $r4 == null goto label3;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r4 = (org.spongycastle.util.Memoable) $r2;

        $r5 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable opadState>;

        interfaceinvoke $r4.<org.spongycastle.util.Memoable: void reset(org.spongycastle.util.Memoable)>($r5);

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r3 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $i1 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        $r6 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $i2 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, $i1, $i2);

     label1:
        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        $i1 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

     label2:
        $r1 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label4;

        $r1 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $r1[$i1] = 0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r3 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $r7 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        $i1 = lengthof $r7;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, $i1);

        goto label1;

     label4:
        $r4 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable ipadState>;

        if $r4 == null goto label5;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r4 = (org.spongycastle.util.Memoable) $r2;

        $r5 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable ipadState>;

        interfaceinvoke $r4.<org.spongycastle.util.Memoable: void reset(org.spongycastle.util.Memoable)>($r5);

        return $i0;

     label5:
        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $r3 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $i1 = lengthof $r3;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i1);

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.HMac r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/HMAC");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.HMac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int digestSize>;

        return i0;
    }
    public org.spongycastle.crypto.Digest getUnderlyingDigest()
    {
        org.spongycastle.crypto.macs.HMac r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        r1 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.macs.HMac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.Digest $r2;
        org.spongycastle.crypto.params.KeyParameter $r3;
        byte[] $r4, $r5;
        int i0, $i1;
        boolean $z0;
        org.spongycastle.util.Memoable $r6;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void reset()>();

        $r3 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r4 = virtualinvoke $r3.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        i0 = lengthof $r4;

        $i1 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, i0);

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r4, 0);

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int digestSize>;

     label1:
        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label3;

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $r4[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, i0);

        goto label1;

     label3:
        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $r5 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, i0);

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        staticinvoke <org.spongycastle.crypto.macs.HMac: void xorPad(byte[],int,byte)>($r4, i0, 54);

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        staticinvoke <org.spongycastle.crypto.macs.HMac: void xorPad(byte[],int,byte)>($r4, i0, 92);

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $z0 = $r2 instanceof org.spongycastle.util.Memoable;

        if $z0 == 0 goto label4;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r6 = (org.spongycastle.util.Memoable) $r2;

        $r6 = interfaceinvoke $r6.<org.spongycastle.util.Memoable: org.spongycastle.util.Memoable copy()>();

        r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable opadState> = $r6;

        $r6 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable opadState>;

        $r2 = (org.spongycastle.crypto.Digest) $r6;

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] outputBuf>;

        i0 = r0.<org.spongycastle.crypto.macs.HMac: int blockLength>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, i0);

     label4:
        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $r5 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        i0 = lengthof $r5;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, i0);

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $z0 = $r2 instanceof org.spongycastle.util.Memoable;

        if $z0 == 0 goto label5;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r6 = (org.spongycastle.util.Memoable) $r2;

        $r6 = interfaceinvoke $r6.<org.spongycastle.util.Memoable: org.spongycastle.util.Memoable copy()>();

        r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.util.Memoable ipadState> = $r6;

     label5:
        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.HMac r0;
        byte[] $r1, $r3;
        org.spongycastle.crypto.Digest $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $r3 = r0.<org.spongycastle.crypto.macs.HMac: byte[] inputPad>;

        $i0 = lengthof $r3;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.macs.HMac r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.macs.HMac r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.macs.HMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.macs.HMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
