org.spongycastle.crypto.macs.VMPCMac extends java.lang.Object implements org.spongycastle.crypto.Mac
private byte[] P
private byte[] T
private byte g
private byte n
private byte s
private byte[] workingIV
private byte[] workingKey
private byte x1
private byte x2
private byte x3
private byte x4
    public void <init>()
    {
        org.spongycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte n> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P> = null;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = 0;

        return;
    }
    private void initKey(byte[], byte[])
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        byte[] $r1, $r2, $r3, $r4;
        int i0, $i2, $i4;
        byte $b1, $b3;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = 0;

        $r3 = newarray (byte)[256];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P> = $r3;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = (byte) i0;

        $r3[i0] = $b1;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        if i0 >= 768 goto label4;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r4 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $b3 = $r4[$i2];

        $i2 = $b1 + $b3;

        $i4 = lengthof $r1;

        $i4 = i0 % $i4;

        $b1 = $r1[$i4];

        $i2 = $i2 + $b1;

        $i2 = $i2 & 255;

        $b1 = $r3[$i2];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b1;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $b1 = $r3[$i2];

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $r4 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b3 & 255;

        $b3 = $r4[$i4];

        $r3[$i2] = $b3;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i2 = $b3 & 255;

        $r3[$i2] = $b1;

        i0 = i0 + 1;

        goto label3;

     label4:
        i0 = 0;

     label5:
        if i0 >= 768 goto label6;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $b3 = $r3[$i2];

        $i2 = $b1 + $b3;

        $i4 = lengthof $r2;

        $i4 = i0 % $i4;

        $b1 = $r2[$i4];

        $i2 = $i2 + $b1;

        $i2 = $i2 & 255;

        $b1 = $r1[$i2];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $b1 = $r1[$i2];

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i2 = i0 & 255;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b3 & 255;

        $b3 = $r3[$i4];

        $r1[$i2] = $b3;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i2 = $b3 & 255;

        $r1[$i2] = $b1;

        i0 = i0 + 1;

        goto label5;

     label6:
        r0.<org.spongycastle.crypto.macs.VMPCMac: byte n> = 0;

        return;
    }
    public int doFinal(byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        byte[] $r1, r2, $r3, $r4, $r5;
        int $i0, i1, $i4, $i5;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = 1;

     label1:
        if i1 >= 25 goto label2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i4 = $b3 & 255;

        $b3 = $r3[$i4];

        $i4 = $b2 + $b3;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $i4 = $b2 + $b3;

        $i4 = $i4 + i1;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $i4 = $b2 + $b3;

        $i4 = $i4 + i1;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $i4 = $b2 + $b3;

        $i4 = $i4 + i1;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b2 + $b3;

        $i4 = $i4 + i1;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b2 & 31;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i5 = $b2 & 31;

        $b2 = $r3[$i5];

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $i5 = $b2 ^ $b3;

        $b2 = (byte) $i5;

        r2[$i4] = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b2 + 1;

        $i4 = $i4 & 31;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i5 = $b2 + 1;

        $i5 = $i5 & 31;

        $b2 = $r3[$i5];

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $i5 = $b2 ^ $b3;

        $b2 = (byte) $i5;

        r2[$i4] = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b2 + 2;

        $i4 = $i4 & 31;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i5 = $b2 + 2;

        $i5 = $i5 & 31;

        $b2 = $r3[$i5];

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $i5 = $b2 ^ $b3;

        $b2 = (byte) $i5;

        r2[$i4] = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b2 + 3;

        $i4 = $i4 & 31;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i5 = $b2 + 3;

        $i5 = $i5 & 31;

        $b2 = $r3[$i5];

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4>;

        $i5 = $b2 ^ $b3;

        $b2 = (byte) $i5;

        r2[$i4] = $b2;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b2 + 4;

        $i4 = $i4 & 31;

        $b2 = (byte) $i4;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte g> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i4 = $b2 & 255;

        $b2 = r2[$i4];

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i4 = $b3 & 255;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i5 = $b3 & 255;

        $b3 = $r3[$i5];

        r2[$i4] = $b3;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b3 & 255;

        r2[$i4] = $b2;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i4 = $b2 + 1;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte n> = $b2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 0;

     label3:
        if i1 >= 768 goto label4;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $b3 = $r3[$i4];

        $i4 = $b2 + $b3;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $i5 = i1 & 31;

        $b2 = $r3[$i5];

        $i4 = $i4 + $b2;

        $i4 = $i4 & 255;

        $b2 = r2[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b2;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $b2 = r2[$i4];

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i5 = $b3 & 255;

        $b3 = $r3[$i5];

        r2[$i4] = $b3;

        r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b3 & 255;

        r2[$i4] = $b2;

        i1 = i1 + 1;

        goto label3;

     label4:
        r2 = newarray (byte)[20];

        i1 = 0;

     label5:
        if i1 >= 20 goto label6;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r4 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $b3 = $r4[$i4];

        $i4 = $b2 + $b3;

        $i4 = $i4 & 255;

        $b2 = $r3[$i4];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b2;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $r4 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $r5 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b2 & 255;

        $b2 = $r5[$i4];

        $i4 = $b2 & 255;

        $b2 = $r4[$i4];

        $i4 = $b2 + 1;

        $i4 = $i4 & 255;

        $b2 = $r3[$i4];

        r2[i1] = $b2;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $b2 = $r3[$i4];

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $i4 = i1 & 255;

        $r4 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i5 = $b3 & 255;

        $b3 = $r4[$i5];

        $r3[$i4] = $b3;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b3 & 255;

        $r3[$i4] = $b2;

        i1 = i1 + 1;

        goto label5;

     label6:
        i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r1, $i0, i1);

        virtualinvoke r0.<org.spongycastle.crypto.macs.VMPCMac: void reset()>();

        $i0 = lengthof r2;

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        return "VMPC-MAC";
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.VMPCMac r0;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        return 20;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.ParametersWithIV r3;
        org.spongycastle.crypto.params.KeyParameter r4;
        byte[] $r5;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC Init parameters must include an IV");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.ParametersWithIV) $r1;

        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        r4 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r1 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: org.spongycastle.crypto.CipherParameters getParameters()>();

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC Init parameters must include a key");

        throw $r2;

     label2:
        $r5 = virtualinvoke r3.<org.spongycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingIV> = $r5;

        $r5 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        if $r5 == null goto label3;

        $r5 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        $i0 = lengthof $r5;

        if $i0 < 1 goto label3;

        $r5 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        $i0 = lengthof $r5;

        if $i0 <= 768 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC-MAC requires 1 to 768 bytes of IV");

        throw $r2;

     label4:
        $r5 = virtualinvoke r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingKey> = $r5;

        virtualinvoke r0.<org.spongycastle.crypto.macs.VMPCMac: void reset()>();

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        byte[] $r1, $r2;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingKey>;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] workingIV>;

        specialinvoke r0.<org.spongycastle.crypto.macs.VMPCMac: void initKey(byte[],byte[])>($r2, $r1);

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte n> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1> = 0;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte g> = 0;

        $r1 = newarray (byte)[32];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T> = $r1;

        i0 = 0;

     label1:
        if i0 >= 32 goto label2;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void update(byte) throws java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        byte $b0, $b1, $b2;
        byte[] $r1, $r2, $r3;
        int $i3, $i4;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i3 = $b2 & 255;

        $b2 = $r2[$i3];

        $i3 = $b1 + $b2;

        $i3 = $i3 & 255;

        $b1 = $r1[$i3];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte s> = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $r3 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i3 = $b1 & 255;

        $b1 = $r3[$i3];

        $i3 = $b1 & 255;

        $b1 = $r2[$i3];

        $i3 = $b1 + 1;

        $i3 = $i3 & 255;

        $b1 = $r1[$i3];

        $i3 = $b1 ^ $b0;

        $b0 = (byte) $i3;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $i3 = $b1 + $b2;

        $i3 = $i3 & 255;

        $b1 = $r1[$i3];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4> = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $i3 = $b1 + $b2;

        $i3 = $i3 & 255;

        $b1 = $r1[$i3];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3> = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $i3 = $b1 + $b2;

        $i3 = $i3 & 255;

        $b1 = $r1[$i3];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2> = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $b2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i3 = $b1 + $b2;

        $i3 = $i3 + $b0;

        $i3 = $i3 & 255;

        $b0 = $r1[$i3];

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1> = $b0;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i3 = $b0 & 31;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b0 & 31;

        $b0 = $r2[$i4];

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x1>;

        $i4 = $b0 ^ $b1;

        $b0 = (byte) $i4;

        $r1[$i3] = $b0;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i3 = $b0 + 1;

        $i3 = $i3 & 31;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b0 + 1;

        $i4 = $i4 & 31;

        $b0 = $r2[$i4];

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x2>;

        $i4 = $b0 ^ $b1;

        $b0 = (byte) $i4;

        $r1[$i3] = $b0;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i3 = $b0 + 2;

        $i3 = $i3 & 31;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b0 + 2;

        $i4 = $i4 & 31;

        $b0 = $r2[$i4];

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x3>;

        $i4 = $b0 ^ $b1;

        $b0 = (byte) $i4;

        $r1[$i3] = $b0;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i3 = $b0 + 3;

        $i3 = $i3 & 31;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] T>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i4 = $b0 + 3;

        $i4 = $i4 & 31;

        $b0 = $r2[$i4];

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte x4>;

        $i4 = $b0 ^ $b1;

        $b0 = (byte) $i4;

        $r1[$i3] = $b0;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte g>;

        $i3 = $b0 + 4;

        $i3 = $i3 & 31;

        $b0 = (byte) $i3;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte g> = $b0;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i3 = $b0 & 255;

        $b0 = $r1[$i3];

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i3 = $b1 & 255;

        $r2 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i4 = $b1 & 255;

        $b1 = $r2[$i4];

        $r1[$i3] = $b1;

        $r1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte[] P>;

        $b1 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte s>;

        $i3 = $b1 & 255;

        $r1[$i3] = $b0;

        $b0 = r0.<org.spongycastle.crypto.macs.VMPCMac: byte n>;

        $i3 = $b0 + 1;

        $i3 = $i3 & 255;

        $b0 = (byte) $i3;

        r0.<org.spongycastle.crypto.macs.VMPCMac: byte n> = $b0;

        return;
    }
    public void update(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.VMPCMac r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.DataLengthException $r2;
        byte $b3;

        r0 := @this: org.spongycastle.crypto.macs.VMPCMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = $i0 + $i1;

        $i2 = lengthof $r1;

        if $i0 <= $i2 goto label1;

        $r2 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r2.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r2;

     label1:
        $i0 = 0;

     label2:
        if $i0 >= $i1 goto label3;

        $b3 = $r1[$i0];

        virtualinvoke r0.<org.spongycastle.crypto.macs.VMPCMac: void update(byte)>($b3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
