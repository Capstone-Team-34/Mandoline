org.spongycastle.crypto.macs.CMac extends java.lang.Object implements org.spongycastle.crypto.Mac
private byte[] Lu
private byte[] Lu2
private byte[] ZEROES
private byte[] buf
private int bufOff
private org.spongycastle.crypto.BlockCipher cipher
private byte[] mac
private int macSize
private byte[] poly
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.macs.CMac r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        specialinvoke r0.<org.spongycastle.crypto.macs.CMac: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r1, $i0);

        return;
    }
    public void <init>(org.spongycastle.crypto.BlockCipher, int)
    {
        org.spongycastle.crypto.macs.CMac r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.crypto.modes.CBCBlockCipher $r5;
        byte[] $r6;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = $i0 % 8;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MAC size must be multiple of 8");

        throw $r2;

     label1:
        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = $i1 * 8;

        if $i0 <= $i1 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAC size must be less or equal to ");

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r5.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher> = $r5;

        $i0 = $i0 / 8;

        r0.<org.spongycastle.crypto.macs.CMac: int macSize> = $i0;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r6 = staticinvoke <org.spongycastle.crypto.macs.CMac: byte[] lookupPoly(int)>($i0);

        r0.<org.spongycastle.crypto.macs.CMac: byte[] poly> = $r6;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.CMac: byte[] mac> = $r6;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.CMac: byte[] buf> = $r6;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r6 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.CMac: byte[] ZEROES> = $r6;

        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = 0;

        return;
    }
    private byte[] doubleLu(byte[])
    {
        org.spongycastle.crypto.macs.CMac r0;
        byte[] $r1, r2, $r3;
        int i0, $i1, $i4;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: byte[];

        i0 = lengthof $r1;

        r2 = newarray (byte)[i0];

        i0 = staticinvoke <org.spongycastle.crypto.macs.CMac: int shiftLeft(byte[],byte[])>($r1, r2);

        i0 = neg i0;

        i0 = i0 & 255;

        $i1 = lengthof $r1;

        $i1 = $i1 + -3;

        $b2 = r2[$i1];

        $r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] poly>;

        $b3 = $r3[1];

        $i4 = $b3 & i0;

        $i4 = $b2 ^ $i4;

        $b2 = (byte) $i4;

        r2[$i1] = $b2;

        $i1 = lengthof $r1;

        $i1 = $i1 + -2;

        $b2 = r2[$i1];

        $r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] poly>;

        $b3 = $r3[2];

        $i4 = $b3 & i0;

        $i4 = $b2 ^ $i4;

        $b2 = (byte) $i4;

        r2[$i1] = $b2;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $b2 = r2[$i1];

        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] poly>;

        $b3 = $r1[3];

        i0 = $b3 & i0;

        i0 = $b2 ^ i0;

        $b2 = (byte) i0;

        r2[$i1] = $b2;

        return r2;
    }
    private static byte[] lookupPoly(int)
    {
        int $i0, $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        byte[] $r3;

        $i0 := @parameter0: int;

        $i1 = $i0 * 8;

        lookupswitch($i1)
        {
            case 64: goto label02;
            case 128: goto label04;
            case 160: goto label05;
            case 192: goto label06;
            case 224: goto label07;
            case 256: goto label08;
            case 320: goto label09;
            case 384: goto label10;
            case 448: goto label11;
            case 512: goto label12;
            case 768: goto label13;
            case 1024: goto label14;
            case 2048: goto label15;
            default: goto label01;
        };

     label01:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown block size for CMAC: ");

        $i0 = $i0 * 8;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label02:
        $i0 = 27;

     label03:
        $r3 = staticinvoke <org.spongycastle.util.Pack: byte[] intToBigEndian(int)>($i0);

        return $r3;

     label04:
        $i0 = 135;

        goto label03;

     label05:
        $i0 = 45;

        goto label03;

     label06:
        $i0 = 135;

        goto label03;

     label07:
        $i0 = 777;

        goto label03;

     label08:
        $i0 = 1061;

        goto label03;

     label09:
        $i0 = 27;

        goto label03;

     label10:
        $i0 = 4109;

        goto label03;

     label11:
        $i0 = 2129;

        goto label03;

     label12:
        $i0 = 293;

        goto label03;

     label13:
        $i0 = 655377;

        goto label03;

     label14:
        $i0 = 524355;

        goto label03;

     label15:
        $i0 = 548865;

        goto label03;
    }
    private static int shiftLeft(byte[], byte[])
    {
        byte[] $r0, $r1;
        int i0, i1, i2, $i4;
        byte $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        i1 = lengthof $r0;

        i2 = 0;

     label1:
        i1 = i1 + -1;

        if i1 < 0 goto label2;

        $b3 = $r0[i1];

        i0 = $b3 & 255;

        $i4 = i0 << 1;

        i2 = $i4 | i2;

        $b3 = (byte) i2;

        $r1[i1] = $b3;

        i0 = i0 >>> 7;

        i2 = i0 & 1;

        goto label1;

     label2:
        return i2;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.macs.CMac r0;
        byte[] $r1, r3, $r4;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BlockCipher $r2;
        byte $b3, $b4;
        org.spongycastle.crypto.paddings.ISO7816d4Padding $r5;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i2 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        if $i2 != $i1 goto label3;

        r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] Lu>;

     label1:
        $i1 = 0;

     label2:
        $r4 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        $i2 = lengthof $r4;

        if $i1 >= $i2 goto label4;

        $r4 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $b3 = $r4[$i1];

        $b4 = r3[$i1];

        $i2 = $b3 ^ $b4;

        $b3 = (byte) $i2;

        $r4[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r5 = new org.spongycastle.crypto.paddings.ISO7816d4Padding;

        specialinvoke $r5.<org.spongycastle.crypto.paddings.ISO7816d4Padding: void <init>()>();

        r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        virtualinvoke $r5.<org.spongycastle.crypto.paddings.ISO7816d4Padding: int addPadding(byte[],int)>(r3, $i1);

        r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] Lu2>;

        goto label1;

     label4:
        $r2 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $r4 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, 0, $r4, 0);

        r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        $i1 = r0.<org.spongycastle.crypto.macs.CMac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, $i0, $i1);

        virtualinvoke r0.<org.spongycastle.crypto.macs.CMac: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.macs.CMac: int macSize>;

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.CMac r0;
        java.lang.String $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r1;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.CMac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        i0 = r0.<org.spongycastle.crypto.macs.CMac: int macSize>;

        return i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.macs.CMac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        byte[] r2, $r4;
        org.spongycastle.crypto.BlockCipher $r3;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.spongycastle.crypto.macs.CMac: void validate(org.spongycastle.crypto.CipherParameters)>($r1);

        $r3 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r1);

        r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] ZEROES>;

        $i0 = lengthof r2;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.macs.CMac: byte[] ZEROES>;

        interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, r2, 0);

        r2 = specialinvoke r0.<org.spongycastle.crypto.macs.CMac: byte[] doubleLu(byte[])>(r2);

        r0.<org.spongycastle.crypto.macs.CMac: byte[] Lu> = r2;

        r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] Lu>;

        r2 = specialinvoke r0.<org.spongycastle.crypto.macs.CMac: byte[] doubleLu(byte[])>(r2);

        r0.<org.spongycastle.crypto.macs.CMac: byte[] Lu2> = r2;

        virtualinvoke r0.<org.spongycastle.crypto.macs.CMac: void reset()>();

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.CMac r0;
        int i0, $i1;
        byte[] $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = 0;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.macs.CMac r0;
        byte $b0;
        int $i1, $i2;
        byte[] $r1, $r3;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i2 = lengthof $r1;

        if $i1 != $i2 goto label1;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $r3 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, 0, $r3, 0);

        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = $i2;

        $r1[$i1] = $b0;

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.macs.CMac r0;
        byte[] $r1, $r2, $r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        if $i3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        i0 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        i0 = $i1 - i0;

        if $i3 <= i0 goto label3;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i4 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i4, i0);

        $r4 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, 0);

        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = 0;

        $i3 = $i3 - i0;

        $i2 = $i2 + i0;

     label2:
        if $i3 <= $i1 goto label3;

        $r4 = r0.<org.spongycastle.crypto.macs.CMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] mac>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i2, $r2, 0);

        $i3 = $i3 - $i1;

        $i2 = $i2 + $i1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.crypto.macs.CMac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i1, $i3);

        $i2 = r0.<org.spongycastle.crypto.macs.CMac: int bufOff>;

        $i2 = $i2 + $i3;

        r0.<org.spongycastle.crypto.macs.CMac: int bufOff> = $i2;

        return;
    }
    void validate(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.macs.CMac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.crypto.macs.CMac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CMac mode only permits key to be set.");

        throw $r2;

     label1:
        return;
    }
