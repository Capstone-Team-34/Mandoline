org.spongycastle.crypto.macs.OldHMac extends java.lang.Object implements org.spongycastle.crypto.Mac
private static final int BLOCK_LENGTH
private static final byte IPAD
private static final byte OPAD
private org.spongycastle.crypto.Digest digest
private int digestSize
private byte[] inputPad
private byte[] outputPad
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0;
        byte[] $r2;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[64];

        r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad> = $r2;

        $r2 = newarray (byte)[64];

        r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad> = $r2;

        r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest> = $r1;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.crypto.macs.OldHMac: int digestSize> = $i0;

        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        byte[] $r1, r2, $r4, $r5;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = r0.<org.spongycastle.crypto.macs.OldHMac: int digestSize>;

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $r4 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad>;

        $r5 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad>;

        $i1 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $i1 = lengthof r2;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i1);

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, $i0);

        virtualinvoke r0.<org.spongycastle.crypto.macs.OldHMac: void reset()>();

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/HMAC");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        i0 = r0.<org.spongycastle.crypto.macs.OldHMac: int digestSize>;

        return i0;
    }
    public org.spongycastle.crypto.Digest getUnderlyingDigest()
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        org.spongycastle.crypto.Digest r1;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        r1 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        return r1;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        byte[] $r1, $r5, $r6;
        org.spongycastle.crypto.CipherParameters $r2;
        org.spongycastle.crypto.Digest $r3;
        org.spongycastle.crypto.params.KeyParameter $r4;
        int $i0, $i1;
        byte $b2;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r2 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void reset()>();

        $r4 = (org.spongycastle.crypto.params.KeyParameter) $r2;

        $r1 = virtualinvoke $r4.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r1;

        if $i0 <= 64 goto label2;

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $i0 = lengthof $r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r1, 0);

        $i0 = r0.<org.spongycastle.crypto.macs.OldHMac: int digestSize>;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $r1[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, 0, $i0);

        $i0 = lengthof $r1;

     label3:
        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $r1[$i0] = 0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad> = $r1;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $r5 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad>;

        $r6 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i0 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, 0, $i0);

        $i0 = 0;

     label5:
        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $b2 = $r1[$i0];

        $i1 = $b2 ^ 54;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label8;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] outputPad>;

        $b2 = $r1[$i0];

        $i1 = $b2 ^ 92;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $r5 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i0 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        byte[] $r1, $r3;
        org.spongycastle.crypto.Digest $r2;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r2 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $r3 = r0.<org.spongycastle.crypto.macs.OldHMac: byte[] inputPad>;

        $i0 = lengthof $r3;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.macs.OldHMac r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.crypto.macs.OldHMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.crypto.macs.OldHMac: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
