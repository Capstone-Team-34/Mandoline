org.spongycastle.crypto.macs.BlockCipherMac extends java.lang.Object implements org.spongycastle.crypto.Mac
private byte[] buf
private int bufOff
private org.spongycastle.crypto.BlockCipher cipher
private byte[] mac
private int macSize
    public void <init>(org.spongycastle.crypto.BlockCipher)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $i0 = $i0 * 8;

        $i0 = $i0 / 2;

        specialinvoke r0.<org.spongycastle.crypto.macs.BlockCipherMac: void <init>(org.spongycastle.crypto.BlockCipher,int)>($r1, $i0);

        return;
    }
    public void <init>(org.spongycastle.crypto.BlockCipher, int)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        org.spongycastle.crypto.BlockCipher $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.modes.CBCBlockCipher $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r1 := @parameter0: org.spongycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = $i0 % 8;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MAC size must be multiple of 8");

        throw $r2;

     label1:
        $r3 = new org.spongycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r3.<org.spongycastle.crypto.modes.CBCBlockCipher: void <init>(org.spongycastle.crypto.BlockCipher)>($r1);

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher> = $r3;

        $i0 = $i0 / 8;

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int macSize> = $i0;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac> = $r4;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf> = $r4;

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        return;
    }
    public int doFinal(byte[], int)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        byte[] $r1, $r2, $r4;
        int $i0, $i1, $i2;
        org.spongycastle.crypto.BlockCipher $r3;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $i1 = interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

     label1:
        $i2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        if $i2 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $r2[$i2] = 0;

        $i2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i2 = $i2 + 1;

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = $i2;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r3.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r2, 0);

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        $i1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, $i1);

        virtualinvoke r0.<org.spongycastle.crypto.macs.BlockCipherMac: void reset()>();

        $i0 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int macSize>;

        return $i0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        java.lang.String $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r1;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        int i0;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        i0 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int macSize>;

        return i0;
    }
    public void init(org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        org.spongycastle.crypto.CipherParameters $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.spongycastle.crypto.macs.BlockCipherMac: void reset()>();

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r1);

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        int i0, $i1;
        byte[] $r1;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: void reset()>();

        return;
    }
    public void update(byte)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        byte $b0;
        int $i1, $i2;
        byte[] $r1, $r3;
        org.spongycastle.crypto.BlockCipher $r2;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $b0 := @parameter0: byte;

        $i1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $r1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i2 = lengthof $r1;

        if $i1 != $i2 goto label1;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r3 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r2.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, 0, $r3, 0);

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

     label1:
        $r1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i2 = $i1 + 1;

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = $i2;

        $r1[$i1] = $b0;

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.crypto.macs.BlockCipherMac r0;
        byte[] $r1, $r2, $r5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.crypto.BlockCipher $r4;

        r0 := @this: org.spongycastle.crypto.macs.BlockCipherMac;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i2 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $i3 = interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int getBlockSize()>();

        i0 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        i0 = $i3 - i0;

        if $i2 <= i0 goto label3;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i4 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i4, i0);

        $r4 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, 0);

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = 0;

        $i2 = $i2 - i0;

        $i1 = $i1 + i0;

     label2:
        if $i2 <= $i3 goto label3;

        $r4 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: org.spongycastle.crypto.BlockCipher cipher>;

        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] mac>;

        interfaceinvoke $r4.<org.spongycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i1, $r2, 0);

        $i2 = $i2 - $i3;

        $i1 = $i1 + $i3;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: byte[] buf>;

        $i3 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i3, $i2);

        $i1 = r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff>;

        $i1 = $i1 + $i2;

        r0.<org.spongycastle.crypto.macs.BlockCipherMac: int bufOff> = $i1;

        return;
    }
