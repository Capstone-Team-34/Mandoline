org.spongycastle.crypto.macs.SipHash extends java.lang.Object implements org.spongycastle.crypto.Mac
protected final int c
protected final int d
protected long k0
protected long k1
protected long m
protected long v0
protected long v1
protected long v2
protected long v3
protected int wordCount
protected int wordPos
    public void <init>()
    {
        org.spongycastle.crypto.macs.SipHash r0;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = 0L;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = 0;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordCount> = 0;

        r0.<org.spongycastle.crypto.macs.SipHash: int c> = 2;

        r0.<org.spongycastle.crypto.macs.SipHash: int d> = 4;

        return;
    }
    public void <init>(int, int)
    {
        org.spongycastle.crypto.macs.SipHash r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = 0L;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = 0;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordCount> = 0;

        r0.<org.spongycastle.crypto.macs.SipHash: int c> = $i0;

        r0.<org.spongycastle.crypto.macs.SipHash: int d> = $i1;

        return;
    }
    protected static long rotateLeft(long, int)
    {
        long $l0, $l2;
        int $i1;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = $l0 << $i1;

        $i1 = neg $i1;

        $l0 = $l0 >>> $i1;

        $l0 = $l2 | $l0;

        return $l0;
    }
    protected void applySipRounds(int)
    {
        org.spongycastle.crypto.macs.SipHash r0;
        int $i0, i5;
        long l1, l2, l3, l4;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $i0 := @parameter0: int;

        l1 = r0.<org.spongycastle.crypto.macs.SipHash: long v0>;

        l2 = r0.<org.spongycastle.crypto.macs.SipHash: long v1>;

        l3 = r0.<org.spongycastle.crypto.macs.SipHash: long v2>;

        l4 = r0.<org.spongycastle.crypto.macs.SipHash: long v3>;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        l1 = l1 + l2;

        l3 = l3 + l4;

        l2 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l2, 13);

        l4 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l4, 16);

        l2 = l2 ^ l1;

        l4 = l4 ^ l3;

        l1 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l1, 32);

        l3 = l3 + l2;

        l1 = l1 + l4;

        l2 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l2, 17);

        l4 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l4, 21);

        l2 = l2 ^ l3;

        l4 = l4 ^ l1;

        l3 = staticinvoke <org.spongycastle.crypto.macs.SipHash: long rotateLeft(long,int)>(l3, 32);

        i5 = i5 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.crypto.macs.SipHash: long v0> = l1;

        r0.<org.spongycastle.crypto.macs.SipHash: long v1> = l2;

        r0.<org.spongycastle.crypto.macs.SipHash: long v2> = l3;

        r0.<org.spongycastle.crypto.macs.SipHash: long v3> = l4;

        return;
    }
    public int doFinal(byte[], int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.SipHash r0;
        byte[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 = virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: long doFinal()>();

        staticinvoke <org.spongycastle.util.Pack: void longToLittleEndian(long,byte[],int)>($l1, $r1, $i0);

        return 8;
    }
    public long doFinal() throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.SipHash r0;
        long l0, $l3;
        int $i1, $i2;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        l0 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $i1 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        $i1 = 7 - $i1;

        $i1 = $i1 << 3;

        l0 = l0 >>> $i1;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = l0;

        l0 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        l0 = l0 >>> 8;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = l0;

        l0 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $i1 = r0.<org.spongycastle.crypto.macs.SipHash: int wordCount>;

        $i2 = $i1 << 3;

        $i1 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        $i1 = $i2 + $i1;

        $l3 = (long) $i1;

        $l3 = $l3 & 255L;

        $l3 = $l3 << 56;

        l0 = l0 | $l3;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = l0;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void processMessageWord()>();

        l0 = r0.<org.spongycastle.crypto.macs.SipHash: long v2>;

        l0 = l0 ^ 255L;

        r0.<org.spongycastle.crypto.macs.SipHash: long v2> = l0;

        $i1 = r0.<org.spongycastle.crypto.macs.SipHash: int d>;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void applySipRounds(int)>($i1);

        l0 = r0.<org.spongycastle.crypto.macs.SipHash: long v0>;

        $l3 = r0.<org.spongycastle.crypto.macs.SipHash: long v1>;

        l0 = l0 ^ $l3;

        $l3 = r0.<org.spongycastle.crypto.macs.SipHash: long v2>;

        l0 = l0 ^ $l3;

        $l3 = r0.<org.spongycastle.crypto.macs.SipHash: long v3>;

        l0 = l0 ^ $l3;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void reset()>();

        return l0;
    }
    public java.lang.String getAlgorithmName()
    {
        org.spongycastle.crypto.macs.SipHash r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SipHash-");

        $i0 = r0.<org.spongycastle.crypto.macs.SipHash: int c>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i0 = r0.<org.spongycastle.crypto.macs.SipHash: int d>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int getMacSize()
    {
        org.spongycastle.crypto.macs.SipHash r0;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        return 8;
    }
    public void init(org.spongycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.crypto.macs.SipHash r0;
        org.spongycastle.crypto.CipherParameters $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        org.spongycastle.crypto.params.KeyParameter r3;
        byte[] $r4;
        int $i0;
        long $l1;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $r1 := @parameter0: org.spongycastle.crypto.CipherParameters;

        $z0 = $r1 instanceof org.spongycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'params\' must be an instance of KeyParameter");

        throw $r2;

     label1:
        r3 = (org.spongycastle.crypto.params.KeyParameter) $r1;

        $r4 = virtualinvoke r3.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r4;

        if $i0 == 16 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'params\' must be a 128-bit key");

        throw $r2;

     label2:
        $l1 = staticinvoke <org.spongycastle.util.Pack: long littleEndianToLong(byte[],int)>($r4, 0);

        r0.<org.spongycastle.crypto.macs.SipHash: long k0> = $l1;

        $l1 = staticinvoke <org.spongycastle.util.Pack: long littleEndianToLong(byte[],int)>($r4, 8);

        r0.<org.spongycastle.crypto.macs.SipHash: long k1> = $l1;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void reset()>();

        return;
    }
    protected void processMessageWord()
    {
        org.spongycastle.crypto.macs.SipHash r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $i0 = r0.<org.spongycastle.crypto.macs.SipHash: int wordCount>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordCount> = $i0;

        $l1 = r0.<org.spongycastle.crypto.macs.SipHash: long v3>;

        $l2 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l1 = $l1 ^ $l2;

        r0.<org.spongycastle.crypto.macs.SipHash: long v3> = $l1;

        $i0 = r0.<org.spongycastle.crypto.macs.SipHash: int c>;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void applySipRounds(int)>($i0);

        $l1 = r0.<org.spongycastle.crypto.macs.SipHash: long v0>;

        $l2 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l1 = $l1 ^ $l2;

        r0.<org.spongycastle.crypto.macs.SipHash: long v0> = $l1;

        return;
    }
    public void reset()
    {
        org.spongycastle.crypto.macs.SipHash r0;
        long $l0;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $l0 = r0.<org.spongycastle.crypto.macs.SipHash: long k0>;

        $l0 = $l0 ^ 8317987319222330741L;

        r0.<org.spongycastle.crypto.macs.SipHash: long v0> = $l0;

        $l0 = r0.<org.spongycastle.crypto.macs.SipHash: long k1>;

        $l0 = $l0 ^ 7237128888997146477L;

        r0.<org.spongycastle.crypto.macs.SipHash: long v1> = $l0;

        $l0 = r0.<org.spongycastle.crypto.macs.SipHash: long k0>;

        $l0 = $l0 ^ 7816392313619706465L;

        r0.<org.spongycastle.crypto.macs.SipHash: long v2> = $l0;

        $l0 = r0.<org.spongycastle.crypto.macs.SipHash: long k1>;

        $l0 = $l0 ^ 8387220255154660723L;

        r0.<org.spongycastle.crypto.macs.SipHash: long v3> = $l0;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = 0L;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = 0;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordCount> = 0;

        return;
    }
    public void update(byte) throws java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.SipHash r0;
        byte $b0;
        long $l1, $l2;
        int $i3;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $b0 := @parameter0: byte;

        $l1 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l1 = $l1 >>> 8;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l1;

        $l1 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l2 = (long) $b0;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 56;

        $l1 = $l1 | $l2;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l1;

        $i3 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        $i3 = $i3 + 1;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = $i3;

        if $i3 != 8 goto label1;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void processMessageWord()>();

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = 0;

     label1:
        return;
    }
    public void update(byte[], int, int) throws org.spongycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.spongycastle.crypto.macs.SipHash r0;
        byte[] $r1;
        int $i0, $i1, i2, i3, i4, $i8;
        long $l5, $l7, $l9;
        byte $b6;

        r0 := @this: org.spongycastle.crypto.macs.SipHash;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i4 = 0;

        i3 = $i1 & -8;

        i2 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        if i2 != 0 goto label4;

     label1:
        if i4 >= i3 goto label2;

        i2 = $i0 + i4;

        $l5 = staticinvoke <org.spongycastle.util.Pack: long littleEndianToLong(byte[],int)>($r1, i2);

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void processMessageWord()>();

        i4 = i4 + 8;

        goto label1;

     label2:
        if i4 >= $i1 goto label3;

        $l5 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l5 = $l5 >>> 8;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        $l5 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        i2 = $i0 + i4;

        $b6 = $r1[i2];

        $l7 = (long) $b6;

        $l7 = $l7 & 255L;

        $l7 = $l7 << 56;

        $l5 = $l5 | $l7;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        i4 = i4 + 1;

        goto label2;

     label3:
        $i0 = $i1 - i3;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = $i0;

        return;

     label4:
        i2 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        i2 = i2 << 3;

     label5:
        if i4 >= i3 goto label6;

        $i8 = $i0 + i4;

        $l5 = staticinvoke <org.spongycastle.util.Pack: long littleEndianToLong(byte[],int)>($r1, $i8);

        $l7 = $l5 << i2;

        $l9 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $i8 = neg i2;

        $l9 = $l9 >>> $i8;

        $l7 = $l7 | $l9;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l7;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void processMessageWord()>();

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        i4 = i4 + 8;

        goto label5;

     label6:
        if i4 >= $i1 goto label8;

        $l5 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        $l5 = $l5 >>> 8;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        $l5 = r0.<org.spongycastle.crypto.macs.SipHash: long m>;

        i3 = $i0 + i4;

        $b6 = $r1[i3];

        $l7 = (long) $b6;

        $l7 = $l7 & 255L;

        $l7 = $l7 << 56;

        $l5 = $l5 | $l7;

        r0.<org.spongycastle.crypto.macs.SipHash: long m> = $l5;

        i3 = r0.<org.spongycastle.crypto.macs.SipHash: int wordPos>;

        i3 = i3 + 1;

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = i3;

        if i3 != 8 goto label7;

        virtualinvoke r0.<org.spongycastle.crypto.macs.SipHash: void processMessageWord()>();

        r0.<org.spongycastle.crypto.macs.SipHash: int wordPos> = 0;

     label7:
        i4 = i4 + 1;

        goto label6;

     label8:
        return;
    }
