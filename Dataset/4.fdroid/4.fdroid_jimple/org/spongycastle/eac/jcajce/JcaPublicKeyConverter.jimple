org.spongycastle.eac.jcajce.JcaPublicKeyConverter extends java.lang.Object
private org.spongycastle.eac.jcajce.EACHelper helper
    public void <init>()
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        org.spongycastle.eac.jcajce.DefaultEACHelper $r1;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.eac.jcajce.DefaultEACHelper;

        specialinvoke $r1.<org.spongycastle.eac.jcajce.DefaultEACHelper: void <init>()>();

        r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.eac.jcajce.EACHelper helper> = $r1;

        return;
    }
    private static java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        org.spongycastle.math.field.FiniteField $r1;
        java.security.spec.ECField $r2;
        org.spongycastle.math.ec.ECFieldElement $r3;
        java.math.BigInteger $r4, $r5;
        java.security.spec.EllipticCurve $r6;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.field.FiniteField getField()>();

        $r2 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: java.security.spec.ECField convertField(org.spongycastle.math.field.FiniteField)>($r1);

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getA()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r3 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECFieldElement getB()>();

        $r5 = virtualinvoke $r3.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r6 = new java.security.spec.EllipticCurve;

        specialinvoke $r6.<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])>($r2, $r4, $r5, null);

        return $r6;
    }
    private static org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)
    {
        java.security.spec.EllipticCurve $r0;
        java.security.spec.ECField $r1;
        java.math.BigInteger $r2, $r3, $r6;
        boolean $z0;
        org.spongycastle.math.ec.ECCurve$Fp $r4;
        java.security.spec.ECFieldFp r5;
        java.lang.IllegalStateException $r7;

        $r0 := @parameter0: java.security.spec.EllipticCurve;

        $r1 = virtualinvoke $r0.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();

        $r2 = virtualinvoke $r0.<java.security.spec.EllipticCurve: java.math.BigInteger getA()>();

        $r3 = virtualinvoke $r0.<java.security.spec.EllipticCurve: java.math.BigInteger getB()>();

        $z0 = $r1 instanceof java.security.spec.ECFieldFp;

        if $z0 == 0 goto label1;

        $r4 = new org.spongycastle.math.ec.ECCurve$Fp;

        r5 = (java.security.spec.ECFieldFp) $r1;

        $r6 = virtualinvoke r5.<java.security.spec.ECFieldFp: java.math.BigInteger getP()>();

        specialinvoke $r4.<org.spongycastle.math.ec.ECCurve$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r6, $r2, $r3);

        return $r4;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not implemented yet!!!");

        throw $r7;
    }
    private static java.security.spec.ECField convertField(org.spongycastle.math.field.FiniteField)
    {
        org.spongycastle.math.field.FiniteField r0;
        boolean $z0;
        java.security.spec.ECFieldFp $r1;
        java.math.BigInteger $r2;
        org.spongycastle.math.field.PolynomialExtensionField r3;
        org.spongycastle.math.field.Polynomial $r4;
        int[] $r5;
        int $i0;
        java.security.spec.ECFieldF2m $r6;

        r0 := @parameter0: org.spongycastle.math.field.FiniteField;

        $z0 = staticinvoke <org.spongycastle.math.ec.ECAlgorithms: boolean isFpField(org.spongycastle.math.field.FiniteField)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.security.spec.ECFieldFp;

        $r2 = interfaceinvoke r0.<org.spongycastle.math.field.FiniteField: java.math.BigInteger getCharacteristic()>();

        specialinvoke $r1.<java.security.spec.ECFieldFp: void <init>(java.math.BigInteger)>($r2);

        return $r1;

     label1:
        r3 = (org.spongycastle.math.field.PolynomialExtensionField) r0;

        $r4 = interfaceinvoke r3.<org.spongycastle.math.field.PolynomialExtensionField: org.spongycastle.math.field.Polynomial getMinimalPolynomial()>();

        $r5 = interfaceinvoke $r4.<org.spongycastle.math.field.Polynomial: int[] getExponentsPresent()>();

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOfRange(int[],int,int)>($r5, 1, $i0);

        $r5 = staticinvoke <org.spongycastle.util.Arrays: int[] reverse(int[])>($r5);

        $r6 = new java.security.spec.ECFieldF2m;

        $i0 = interfaceinvoke $r4.<org.spongycastle.math.field.Polynomial: int getDegree()>();

        specialinvoke $r6.<java.security.spec.ECFieldF2m: void <init>(int,int[])>($i0, $r5);

        return $r6;
    }
    private static org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve, java.security.spec.ECPoint)
    {
        org.spongycastle.math.ec.ECCurve $r0;
        java.security.spec.ECPoint $r1;
        java.math.BigInteger $r2, $r3;
        org.spongycastle.math.ec.ECPoint $r4;

        $r0 := @parameter0: org.spongycastle.math.ec.ECCurve;

        $r1 := @parameter1: java.security.spec.ECPoint;

        $r2 = virtualinvoke $r1.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r3 = virtualinvoke $r1.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r4 = virtualinvoke $r0.<org.spongycastle.math.ec.ECCurve: org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger)>($r2, $r3);

        return $r4;
    }
    private java.security.PublicKey getECPublicKeyPublicKey(org.spongycastle.asn1.eac.ECDSAPublicKey) throws org.spongycastle.eac.EACException, java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        org.spongycastle.asn1.eac.ECDSAPublicKey $r1;
        java.security.spec.ECPublicKeySpec r2;
        java.security.spec.ECParameterSpec $r3;
        java.security.spec.ECPoint $r4;
        org.spongycastle.eac.jcajce.EACHelper $r5;
        java.security.KeyFactory $r6;
        java.security.PublicKey $r7;
        java.security.NoSuchProviderException r8;
        org.spongycastle.eac.EACException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        java.security.NoSuchAlgorithmException r12;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.eac.ECDSAPublicKey;

        $r3 = specialinvoke r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: java.security.spec.ECParameterSpec getParams(org.spongycastle.asn1.eac.ECDSAPublicKey)>($r1);

        $r4 = specialinvoke r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: java.security.spec.ECPoint getPublicPoint(org.spongycastle.asn1.eac.ECDSAPublicKey)>($r1);

        r2 = new java.security.spec.ECPublicKeySpec;

        specialinvoke r2.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r4, $r3);

        $r5 = r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.eac.jcajce.EACHelper helper>;

     label1:
        $r6 = interfaceinvoke $r5.<org.spongycastle.eac.jcajce.EACHelper: java.security.KeyFactory createKeyFactory(java.lang.String)>("ECDSA");

     label2:
        $r7 = virtualinvoke $r6.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r2);

        return $r7;

     label3:
        r8 := @caughtexception;

        $r9 = new org.spongycastle.eac.EACException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find provider: ");

        $r11 = virtualinvoke r8.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.eac.EACException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r8);

        throw $r9;

     label4:
        r12 := @caughtexception;

        $r9 = new org.spongycastle.eac.EACException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find algorithm ECDSA: ");

        $r11 = virtualinvoke r12.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.eac.EACException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r12);

        throw $r9;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }
    private java.security.spec.ECParameterSpec getParams(org.spongycastle.asn1.eac.ECDSAPublicKey)
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        org.spongycastle.asn1.eac.ECDSAPublicKey $r1;
        org.spongycastle.math.ec.ECCurve$Fp r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.math.BigInteger $r4, $r5, $r6, $r13;
        byte[] $r7;
        org.spongycastle.math.ec.ECPoint $r8;
        java.security.spec.EllipticCurve $r9;
        java.security.spec.ECParameterSpec $r10;
        java.security.spec.ECPoint $r11;
        org.spongycastle.math.ec.ECFieldElement $r12;
        int $i0;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.eac.ECDSAPublicKey;

        $z0 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: boolean hasParameters()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Public key does not contains EC Params");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getPrimeModulusP()>();

        r2 = new org.spongycastle.math.ec.ECCurve$Fp;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getFirstCoefA()>();

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getSecondCoefB()>();

        specialinvoke r2.<org.spongycastle.math.ec.ECCurve$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r4, $r5, $r6);

        $r7 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: byte[] getBasePointG()>();

        $r8 = virtualinvoke r2.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>($r7);

        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getOrderOfBasePointR()>();

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getCofactorF()>();

        $r9 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve)>(r2);

        $r10 = new java.security.spec.ECParameterSpec;

        $r11 = new java.security.spec.ECPoint;

        $r12 = virtualinvoke $r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r6 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r12 = virtualinvoke $r8.<org.spongycastle.math.ec.ECPoint: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r13 = virtualinvoke $r12.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        specialinvoke $r11.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r13);

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        specialinvoke $r10.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r9, $r11, $r4, $i0);

        return $r10;
    }
    private java.security.spec.ECPoint getPublicPoint(org.spongycastle.asn1.eac.ECDSAPublicKey)
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        org.spongycastle.asn1.eac.ECDSAPublicKey $r1;
        org.spongycastle.math.ec.ECCurve$Fp r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.math.BigInteger $r4, $r5, $r6;
        byte[] $r7;
        org.spongycastle.math.ec.ECPoint $r8;
        org.spongycastle.math.ec.ECPoint$Fp r9;
        java.security.spec.ECPoint $r10;
        org.spongycastle.math.ec.ECFieldElement $r11;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.eac.ECDSAPublicKey;

        $z0 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: boolean hasParameters()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Public key does not contains EC Params");

        throw $r3;

     label1:
        $r4 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getPrimeModulusP()>();

        r2 = new org.spongycastle.math.ec.ECCurve$Fp;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getFirstCoefA()>();

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: java.math.BigInteger getSecondCoefB()>();

        specialinvoke r2.<org.spongycastle.math.ec.ECCurve$Fp: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r4, $r5, $r6);

        $r7 = virtualinvoke $r1.<org.spongycastle.asn1.eac.ECDSAPublicKey: byte[] getPublicPointY()>();

        $r8 = virtualinvoke r2.<org.spongycastle.math.ec.ECCurve$Fp: org.spongycastle.math.ec.ECPoint decodePoint(byte[])>($r7);

        r9 = (org.spongycastle.math.ec.ECPoint$Fp) $r8;

        $r10 = new java.security.spec.ECPoint;

        $r11 = virtualinvoke r9.<org.spongycastle.math.ec.ECPoint$Fp: org.spongycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r4 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r11 = virtualinvoke r9.<org.spongycastle.math.ec.ECPoint$Fp: org.spongycastle.math.ec.ECFieldElement getAffineYCoord()>();

        $r5 = virtualinvoke $r11.<org.spongycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        specialinvoke $r10.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r5);

        return $r10;
    }
    public java.security.PublicKey getKey(org.spongycastle.asn1.eac.PublicKeyDataObject) throws org.spongycastle.eac.EACException, java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        java.security.spec.RSAPublicKeySpec r1;
        org.spongycastle.asn1.eac.PublicKeyDataObject r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3, $r4;
        boolean $z0;
        org.spongycastle.asn1.eac.ECDSAPublicKey r5;
        java.security.PublicKey $r6;
        org.spongycastle.asn1.eac.RSAPublicKey r7;
        java.math.BigInteger $r8, $r9;
        org.spongycastle.eac.jcajce.EACHelper $r10;
        java.security.KeyFactory $r11;
        java.security.NoSuchProviderException r12;
        org.spongycastle.eac.EACException $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        java.security.NoSuchAlgorithmException r16;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        r2 := @parameter0: org.spongycastle.asn1.eac.PublicKeyDataObject;

        $r3 = virtualinvoke r2.<org.spongycastle.asn1.eac.PublicKeyDataObject: org.spongycastle.asn1.ASN1ObjectIdentifier getUsage()>();

        $r4 = <org.spongycastle.asn1.eac.EACObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA>;

        $z0 = virtualinvoke $r3.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean on(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r4);

        if $z0 == 0 goto label1;

        r5 = (org.spongycastle.asn1.eac.ECDSAPublicKey) r2;

        $r6 = specialinvoke r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: java.security.PublicKey getECPublicKeyPublicKey(org.spongycastle.asn1.eac.ECDSAPublicKey)>(r5);

        return $r6;

     label1:
        r7 = (org.spongycastle.asn1.eac.RSAPublicKey) r2;

        r1 = new java.security.spec.RSAPublicKeySpec;

        $r8 = virtualinvoke r7.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r9 = virtualinvoke r7.<org.spongycastle.asn1.eac.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke r1.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r8, $r9);

        $r10 = r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.eac.jcajce.EACHelper helper>;

     label2:
        $r11 = interfaceinvoke $r10.<org.spongycastle.eac.jcajce.EACHelper: java.security.KeyFactory createKeyFactory(java.lang.String)>("RSA");

        $r6 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r1);

     label3:
        return $r6;

     label4:
        r12 := @caughtexception;

        $r13 = new org.spongycastle.eac.EACException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find provider: ");

        $r15 = virtualinvoke r12.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.eac.EACException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r12);

        throw $r13;

     label5:
        r16 := @caughtexception;

        $r13 = new org.spongycastle.eac.EACException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find algorithm ECDSA: ");

        $r15 = virtualinvoke r16.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.spongycastle.eac.EACException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r16);

        throw $r13;

        catch java.security.NoSuchProviderException from label2 to label3 with label4;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label5;
    }
    public org.spongycastle.asn1.eac.PublicKeyDataObject getPublicKeyDataObject(org.spongycastle.asn1.ASN1ObjectIdentifier, java.security.PublicKey)
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.security.PublicKey $r2;
        boolean $z0;
        java.security.interfaces.RSAPublicKey r3;
        org.spongycastle.asn1.eac.RSAPublicKey $r4;
        java.math.BigInteger $r5, $r6, $r13, $r18;
        java.security.interfaces.ECPublicKey r7;
        java.security.spec.ECParameterSpec $r8;
        org.spongycastle.asn1.eac.ECDSAPublicKey $r9;
        java.security.spec.EllipticCurve $r10;
        java.security.spec.ECField $r11;
        java.security.spec.ECFieldFp $r12;
        org.spongycastle.math.ec.ECCurve $r14;
        java.security.spec.ECPoint $r15;
        org.spongycastle.math.ec.ECPoint $r16;
        byte[] $r17, $r19;
        int $i0;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: java.security.PublicKey;

        $z0 = $r2 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label1;

        r3 = (java.security.interfaces.RSAPublicKey) $r2;

        $r4 = new org.spongycastle.asn1.eac.RSAPublicKey;

        $r5 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r4.<org.spongycastle.asn1.eac.RSAPublicKey: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,java.math.BigInteger,java.math.BigInteger)>($r1, $r5, $r6);

        return $r4;

     label1:
        r7 = (java.security.interfaces.ECPublicKey) $r2;

        $r8 = interfaceinvoke r7.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r9 = new org.spongycastle.asn1.eac.ECDSAPublicKey;

        $r10 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r11 = virtualinvoke $r10.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();

        $r12 = (java.security.spec.ECFieldFp) $r11;

        $r5 = virtualinvoke $r12.<java.security.spec.ECFieldFp: java.math.BigInteger getP()>();

        $r10 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r6 = virtualinvoke $r10.<java.security.spec.EllipticCurve: java.math.BigInteger getA()>();

        $r10 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r13 = virtualinvoke $r10.<java.security.spec.EllipticCurve: java.math.BigInteger getB()>();

        $r10 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r14 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r10);

        $r15 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r16 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint)>($r14, $r15);

        $r17 = virtualinvoke $r16.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded()>();

        $r18 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r10 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r14 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve)>($r10);

        $r15 = interfaceinvoke r7.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r16 = staticinvoke <org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint)>($r14, $r15);

        $r19 = virtualinvoke $r16.<org.spongycastle.math.ec.ECPoint: byte[] getEncoded()>();

        $i0 = virtualinvoke $r8.<java.security.spec.ECParameterSpec: int getCofactor()>();

        specialinvoke $r9.<org.spongycastle.asn1.eac.ECDSAPublicKey: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte[],java.math.BigInteger,byte[],int)>($r1, $r5, $r6, $r13, $r17, $r18, $r19, $i0);

        return $r9;
    }
    public org.spongycastle.eac.jcajce.JcaPublicKeyConverter setProvider(java.lang.String)
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        java.lang.String $r1;
        org.spongycastle.eac.jcajce.NamedEACHelper $r2;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.eac.jcajce.NamedEACHelper;

        specialinvoke $r2.<org.spongycastle.eac.jcajce.NamedEACHelper: void <init>(java.lang.String)>($r1);

        r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.eac.jcajce.EACHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.eac.jcajce.JcaPublicKeyConverter setProvider(java.security.Provider)
    {
        org.spongycastle.eac.jcajce.JcaPublicKeyConverter r0;
        java.security.Provider $r1;
        org.spongycastle.eac.jcajce.ProviderEACHelper $r2;

        r0 := @this: org.spongycastle.eac.jcajce.JcaPublicKeyConverter;

        $r1 := @parameter0: java.security.Provider;

        $r2 = new org.spongycastle.eac.jcajce.ProviderEACHelper;

        specialinvoke $r2.<org.spongycastle.eac.jcajce.ProviderEACHelper: void <init>(java.security.Provider)>($r1);

        r0.<org.spongycastle.eac.jcajce.JcaPublicKeyConverter: org.spongycastle.eac.jcajce.EACHelper helper> = $r2;

        return r0;
    }
