org.spongycastle.x509.X509V1CertificateGenerator extends java.lang.Object
private org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId
private org.spongycastle.asn1.ASN1ObjectIdentifier sigOID
private java.lang.String signatureAlgorithm
private org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen
    public void <init>()
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r1;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.asn1.x509.V1TBSCertificateGenerator;

        specialinvoke $r1.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void <init>()>();

        r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen> = $r1;

        return;
    }
    private java.security.cert.X509Certificate generateJcaObject(org.spongycastle.asn1.x509.TBSCertificate, byte[]) throws java.security.cert.CertificateEncodingException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        org.spongycastle.asn1.x509.TBSCertificate $r1;
        byte[] $r2;
        java.security.cert.CertificateParsingException r3;
        org.spongycastle.asn1.ASN1EncodableVector r4;
        org.spongycastle.asn1.x509.Certificate $r5;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r6;
        org.spongycastle.asn1.DERBitString $r7;
        org.spongycastle.jce.provider.X509CertificateObject $r8;
        org.spongycastle.asn1.DERSequence $r9;
        org.spongycastle.x509.ExtCertificateEncodingException $r10;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.x509.TBSCertificate;

        $r2 := @parameter1: byte[];

        r4 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r1);

        $r6 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId>;

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r7 = new org.spongycastle.asn1.DERBitString;

        specialinvoke $r7.<org.spongycastle.asn1.DERBitString: void <init>(byte[])>($r2);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r8 = new org.spongycastle.jce.provider.X509CertificateObject;

        $r9 = new org.spongycastle.asn1.DERSequence;

     label1:
        specialinvoke $r9.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r4);

        $r5 = staticinvoke <org.spongycastle.asn1.x509.Certificate: org.spongycastle.asn1.x509.Certificate getInstance(java.lang.Object)>($r9);

        specialinvoke $r8.<org.spongycastle.jce.provider.X509CertificateObject: void <init>(org.spongycastle.asn1.x509.Certificate)>($r5);

     label2:
        return $r8;

     label3:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.x509.ExtCertificateEncodingException;

        specialinvoke $r10.<org.spongycastle.x509.ExtCertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>("exception producing certificate object", r3);

        throw $r10;

        catch java.security.cert.CertificateParsingException from label1 to label2 with label3;
    }
    public java.security.cert.X509Certificate generate(java.security.PrivateKey) throws java.security.cert.CertificateEncodingException, java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.security.cert.X509Certificate $r2;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generate(java.security.PrivateKey,java.security.SecureRandom)>($r1, null);

        return $r2;
    }
    public java.security.cert.X509Certificate generate(java.security.PrivateKey, java.lang.String) throws java.security.cert.CertificateEncodingException, java.lang.IllegalStateException, java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.lang.String $r2;
        java.security.cert.X509Certificate $r3;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom)>($r1, $r2, null);

        return $r3;
    }
    public java.security.cert.X509Certificate generate(java.security.PrivateKey, java.lang.String, java.security.SecureRandom) throws java.security.cert.CertificateEncodingException, java.lang.IllegalStateException, java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.lang.String $r2, $r8;
        java.security.SecureRandom $r3;
        java.io.IOException r4;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r5;
        org.spongycastle.asn1.x509.TBSCertificate $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        byte[] $r9;
        java.security.cert.X509Certificate $r10;
        org.spongycastle.x509.ExtCertificateEncodingException $r11;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.SecureRandom;

        $r5 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r6 = virtualinvoke $r5.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: org.spongycastle.asn1.x509.TBSCertificate generateTBSCertificate()>();

        $r7 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier sigOID>;

        $r8 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.lang.String signatureAlgorithm>;

     label1:
        $r9 = staticinvoke <org.spongycastle.x509.X509Util: byte[] calculateSignature(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.spongycastle.asn1.ASN1Encodable)>($r7, $r8, $r2, $r1, $r3, $r6);

     label2:
        $r10 = specialinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generateJcaObject(org.spongycastle.asn1.x509.TBSCertificate,byte[])>($r6, $r9);

        return $r10;

     label3:
        r4 := @caughtexception;

        $r11 = new org.spongycastle.x509.ExtCertificateEncodingException;

        specialinvoke $r11.<org.spongycastle.x509.ExtCertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>("exception encoding TBS cert", r4);

        throw $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.security.cert.X509Certificate generate(java.security.PrivateKey, java.security.SecureRandom) throws java.security.cert.CertificateEncodingException, java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;
        java.io.IOException r3;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r4;
        org.spongycastle.asn1.x509.TBSCertificate $r5;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r6;
        java.lang.String $r7;
        byte[] $r8;
        java.security.cert.X509Certificate $r9;
        org.spongycastle.x509.ExtCertificateEncodingException $r10;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.security.SecureRandom;

        $r4 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: org.spongycastle.asn1.x509.TBSCertificate generateTBSCertificate()>();

        $r6 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier sigOID>;

        $r7 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.lang.String signatureAlgorithm>;

     label1:
        $r8 = staticinvoke <org.spongycastle.x509.X509Util: byte[] calculateSignature(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.spongycastle.asn1.ASN1Encodable)>($r6, $r7, $r1, $r2, $r5);

     label2:
        $r9 = specialinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generateJcaObject(org.spongycastle.asn1.x509.TBSCertificate,byte[])>($r5, $r8);

        return $r9;

     label3:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.x509.ExtCertificateEncodingException;

        specialinvoke $r10.<org.spongycastle.x509.ExtCertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>("exception encoding TBS cert", r3);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey) throws java.lang.SecurityException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.security.NoSuchProviderException r2;
        java.security.cert.X509Certificate $r3;
        java.lang.SecurityException $r4;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

     label1:
        $r3 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom)>($r1, "SC", null);

     label2:
        return $r3;

     label3:
        r2 := @caughtexception;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("BC provider not installed!");

        throw $r4;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }
    public java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey, java.lang.String) throws java.security.NoSuchProviderException, java.lang.SecurityException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.lang.String $r2;
        java.security.cert.X509Certificate $r3;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom)>($r1, $r2, null);

        return $r3;
    }
    public java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey, java.lang.String, java.security.SecureRandom) throws java.security.NoSuchProviderException, java.lang.SecurityException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.lang.String $r2;
        java.security.SecureRandom $r3;
        java.security.cert.X509Certificate $r4;
        java.security.NoSuchProviderException r5;
        java.security.SignatureException r6;
        java.security.InvalidKeyException r7;
        java.security.GeneralSecurityException r8;
        java.lang.SecurityException $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.SecureRandom;

     label1:
        $r4 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom)>($r1, $r2, $r3);

     label2:
        return $r4;

     label3:
        r5 := @caughtexception;

        throw r5;

     label4:
        r6 := @caughtexception;

        throw r6;

     label5:
        r7 := @caughtexception;

        throw r7;

     label6:
        r8 := @caughtexception;

        $r9 = new java.lang.SecurityException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r2);

        throw $r9;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
        catch java.security.SignatureException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label1 to label2 with label6;
    }
    public java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey, java.security.SecureRandom) throws java.lang.SecurityException, java.security.SignatureException, java.security.InvalidKeyException
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;
        java.security.NoSuchProviderException r3;
        java.security.cert.X509Certificate $r4;
        java.lang.SecurityException $r5;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.security.SecureRandom;

     label1:
        $r4 = virtualinvoke r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom)>($r1, "SC", $r2);

     label2:
        return $r4;

     label3:
        r3 := @caughtexception;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("BC provider not installed!");

        throw $r5;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }
    public java.util.Iterator getSignatureAlgNames()
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.util.Iterator $r1;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 = staticinvoke <org.spongycastle.x509.X509Util: java.util.Iterator getAlgNames()>();

        return $r1;
    }
    public void reset()
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r1;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 = new org.spongycastle.asn1.x509.V1TBSCertificateGenerator;

        specialinvoke $r1.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void <init>()>();

        r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen> = $r1;

        return;
    }
    public void setIssuerDN(javax.security.auth.x500.X500Principal)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        javax.security.auth.x500.X500Principal $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r3;
        org.spongycastle.jce.X509Principal $r4;
        byte[] $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: javax.security.auth.x500.X500Principal;

        $r3 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r4 = new org.spongycastle.jce.X509Principal;

     label1:
        $r5 = virtualinvoke $r1.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        specialinvoke $r4.<org.spongycastle.jce.X509Principal: void <init>(byte[])>($r5);

        virtualinvoke $r3.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setIssuer(org.spongycastle.asn1.x509.X509Name)>($r4);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t process principal: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void setIssuerDN(org.spongycastle.asn1.x509.X509Name)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        org.spongycastle.asn1.x509.X509Name $r1;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r2;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.x509.X509Name;

        $r2 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        virtualinvoke $r2.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setIssuer(org.spongycastle.asn1.x509.X509Name)>($r1);

        return;
    }
    public void setNotAfter(java.util.Date)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.util.Date $r1;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r2;
        org.spongycastle.asn1.x509.Time $r3;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.util.Date;

        $r2 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r3 = new org.spongycastle.asn1.x509.Time;

        specialinvoke $r3.<org.spongycastle.asn1.x509.Time: void <init>(java.util.Date)>($r1);

        virtualinvoke $r2.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setEndDate(org.spongycastle.asn1.x509.Time)>($r3);

        return;
    }
    public void setNotBefore(java.util.Date)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.util.Date $r1;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r2;
        org.spongycastle.asn1.x509.Time $r3;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.util.Date;

        $r2 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r3 = new org.spongycastle.asn1.x509.Time;

        specialinvoke $r3.<org.spongycastle.asn1.x509.Time: void <init>(java.util.Date)>($r1);

        virtualinvoke $r2.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setStartDate(org.spongycastle.asn1.x509.Time)>($r3);

        return;
    }
    public void setPublicKey(java.security.PublicKey)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.security.PublicKey $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r3;
        byte[] $r4;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.security.PublicKey;

     label1:
        $r3 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r4 = interfaceinvoke $r1.<java.security.PublicKey: byte[] getEncoded()>();

        $r5 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r4);

        virtualinvoke $r3.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setSubjectPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r5);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to process key - ");

        $r8 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void setSerialNumber(java.math.BigInteger)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.math.BigInteger $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r4;
        org.spongycastle.asn1.ASN1Integer $r5;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("serial number must be a positive integer");

        throw $r3;

     label1:
        $r4 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r5 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r5.<org.spongycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r1);

        virtualinvoke $r4.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setSerialNumber(org.spongycastle.asn1.ASN1Integer)>($r5);

        return;
    }
    public void setSignatureAlgorithm(java.lang.String)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        java.lang.String $r1;
        java.lang.Exception r2;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r3;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r4;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: java.lang.String;

        r0.<org.spongycastle.x509.X509V1CertificateGenerator: java.lang.String signatureAlgorithm> = $r1;

     label1:
        $r3 = staticinvoke <org.spongycastle.x509.X509Util: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithmOID(java.lang.String)>($r1);

        r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier sigOID> = $r3;

     label2:
        $r3 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.ASN1ObjectIdentifier sigOID>;

        $r4 = staticinvoke <org.spongycastle.x509.X509Util: org.spongycastle.asn1.x509.AlgorithmIdentifier getSigAlgID(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String)>($r3, $r1);

        r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId> = $r4;

        $r5 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r4 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId>;

        virtualinvoke $r5.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setSignature(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r4);

        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown signature type requested");

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void setSubjectDN(javax.security.auth.x500.X500Principal)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        javax.security.auth.x500.X500Principal $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r3;
        org.spongycastle.jce.X509Principal $r4;
        byte[] $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: javax.security.auth.x500.X500Principal;

        $r3 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        $r4 = new org.spongycastle.jce.X509Principal;

     label1:
        $r5 = virtualinvoke $r1.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        specialinvoke $r4.<org.spongycastle.jce.X509Principal: void <init>(byte[])>($r5);

        virtualinvoke $r3.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setSubject(org.spongycastle.asn1.x509.X509Name)>($r4);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t process principal: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void setSubjectDN(org.spongycastle.asn1.x509.X509Name)
    {
        org.spongycastle.x509.X509V1CertificateGenerator r0;
        org.spongycastle.asn1.x509.X509Name $r1;
        org.spongycastle.asn1.x509.V1TBSCertificateGenerator $r2;

        r0 := @this: org.spongycastle.x509.X509V1CertificateGenerator;

        $r1 := @parameter0: org.spongycastle.asn1.x509.X509Name;

        $r2 = r0.<org.spongycastle.x509.X509V1CertificateGenerator: org.spongycastle.asn1.x509.V1TBSCertificateGenerator tbsGen>;

        virtualinvoke $r2.<org.spongycastle.asn1.x509.V1TBSCertificateGenerator: void setSubject(org.spongycastle.asn1.x509.X509Name)>($r1);

        return;
    }
