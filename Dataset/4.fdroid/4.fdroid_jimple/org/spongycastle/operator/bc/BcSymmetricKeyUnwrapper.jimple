org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper extends org.spongycastle.operator.SymmetricKeyUnwrapper
private java.security.SecureRandom random
private org.spongycastle.crypto.Wrapper wrapper
private org.spongycastle.crypto.params.KeyParameter wrappingKey
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.crypto.Wrapper, org.spongycastle.crypto.params.KeyParameter)
    {
        org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.crypto.Wrapper $r2;
        org.spongycastle.crypto.params.KeyParameter $r3;

        r0 := @this: org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.Wrapper;

        $r3 := @parameter2: org.spongycastle.crypto.params.KeyParameter;

        specialinvoke r0.<org.spongycastle.operator.SymmetricKeyUnwrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1);

        r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: org.spongycastle.crypto.Wrapper wrapper> = $r2;

        r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: org.spongycastle.crypto.params.KeyParameter wrappingKey> = $r3;

        return;
    }
    public org.spongycastle.operator.GenericKey generateUnwrappedKey(org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[]) throws org.spongycastle.operator.OperatorException
    {
        org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        byte[] $r2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        int $i0;
        org.spongycastle.crypto.Wrapper $r4;
        org.spongycastle.crypto.params.KeyParameter $r5;
        org.spongycastle.operator.GenericKey $r6;
        org.spongycastle.operator.OperatorException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: byte[];

        $r4 = r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: org.spongycastle.crypto.Wrapper wrapper>;

        $r5 = r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: org.spongycastle.crypto.params.KeyParameter wrappingKey>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Wrapper: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r5);

        $r6 = new org.spongycastle.operator.GenericKey;

        $r4 = r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: org.spongycastle.crypto.Wrapper wrapper>;

        $i0 = lengthof $r2;

     label1:
        $r2 = interfaceinvoke $r4.<org.spongycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>($r2, 0, $i0);

        specialinvoke $r6.<org.spongycastle.operator.GenericKey: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r2);

     label2:
        return $r6;

     label3:
        r3 := @caughtexception;

        $r7 = new org.spongycastle.operator.OperatorException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to unwrap key: ");

        $r9 = virtualinvoke r3.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r3);

        throw $r7;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }
    public org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper setSecureRandom(java.security.SecureRandom)
    {
        org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper;

        $r1 := @parameter0: java.security.SecureRandom;

        r0.<org.spongycastle.operator.bc.BcSymmetricKeyUnwrapper: java.security.SecureRandom random> = $r1;

        return r0;
    }
