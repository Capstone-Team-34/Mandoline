org.spongycastle.operator.bc.BcSignerOutputStream extends java.io.OutputStream
private org.spongycastle.crypto.Signer sig
    void <init>(org.spongycastle.crypto.Signer)
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        org.spongycastle.crypto.Signer $r1;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $r1 := @parameter0: org.spongycastle.crypto.Signer;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig> = $r1;

        return;
    }
    byte[] getSignature() throws org.spongycastle.crypto.CryptoException
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        byte[] $r1;
        org.spongycastle.crypto.Signer $r2;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $r2 = r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig>;

        $r1 = interfaceinvoke $r2.<org.spongycastle.crypto.Signer: byte[] generateSignature()>();

        return $r1;
    }
    boolean verify(byte[])
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        byte[] $r1;
        boolean $z0;
        org.spongycastle.crypto.Signer $r2;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig>;

        $z0 = interfaceinvoke $r2.<org.spongycastle.crypto.Signer: boolean verifySignature(byte[])>($r1);

        return $z0;
    }
    public void write(int) throws java.io.IOException
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        int $i0;
        org.spongycastle.crypto.Signer $r1;
        byte $b1;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig>;

        $b1 = (byte) $i0;

        interfaceinvoke $r1.<org.spongycastle.crypto.Signer: void update(byte)>($b1);

        return;
    }
    public void write(byte[]) throws java.io.IOException
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        byte[] $r1;
        org.spongycastle.crypto.Signer $r2;
        int $i0;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig>;

        $i0 = lengthof $r1;

        interfaceinvoke $r2.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        org.spongycastle.operator.bc.BcSignerOutputStream r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Signer $r2;

        r0 := @this: org.spongycastle.operator.bc.BcSignerOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.operator.bc.BcSignerOutputStream: org.spongycastle.crypto.Signer sig>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Signer: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
