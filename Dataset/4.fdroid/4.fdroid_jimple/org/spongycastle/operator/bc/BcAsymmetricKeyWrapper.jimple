org.spongycastle.operator.bc.BcAsymmetricKeyWrapper extends org.spongycastle.operator.AsymmetricKeyWrapper
private org.spongycastle.crypto.params.AsymmetricKeyParameter publicKey
private java.security.SecureRandom random
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.operator.bc.BcAsymmetricKeyWrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;

        r0 := @this: org.spongycastle.operator.bc.BcAsymmetricKeyWrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        specialinvoke r0.<org.spongycastle.operator.AsymmetricKeyWrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1);

        r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: org.spongycastle.crypto.params.AsymmetricKeyParameter publicKey> = $r2;

        return;
    }
protected abstract org.spongycastle.crypto.AsymmetricBlockCipher createAsymmetricWrapper(org.spongycastle.asn1.ASN1ObjectIdentifier) { 
// no body
} 
    public byte[] generateWrappedKey(org.spongycastle.operator.GenericKey) throws org.spongycastle.operator.OperatorException
    {
        org.spongycastle.operator.bc.BcAsymmetricKeyWrapper r0;
        org.spongycastle.operator.GenericKey $r1;
        org.spongycastle.crypto.InvalidCipherTextException r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r4;
        org.spongycastle.crypto.AsymmetricBlockCipher $r5;
        java.lang.Object r6;
        java.security.SecureRandom $r7;
        byte[] $r8;
        int $i0;
        org.spongycastle.crypto.params.ParametersWithRandom $r9;
        org.spongycastle.operator.OperatorException $r10;
        org.spongycastle.crypto.CipherParameters $r11;

        r0 := @this: org.spongycastle.operator.bc.BcAsymmetricKeyWrapper;

        $r1 := @parameter0: org.spongycastle.operator.GenericKey;

        $r3 = virtualinvoke r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r5 = virtualinvoke r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: org.spongycastle.crypto.AsymmetricBlockCipher createAsymmetricWrapper(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r4);

        r6 = r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: org.spongycastle.crypto.params.AsymmetricKeyParameter publicKey>;

        $r7 = r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: java.security.SecureRandom random>;

        if $r7 == null goto label1;

        $r9 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r7 = r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: java.security.SecureRandom random>;

        $r11 = (org.spongycastle.crypto.CipherParameters) r6;

        specialinvoke $r9.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r11, $r7);

        r6 = $r9;

     label1:
        $r8 = staticinvoke <org.spongycastle.operator.bc.OperatorUtils: byte[] getKeyBytes(org.spongycastle.operator.GenericKey)>($r1);

     label2:
        $r11 = (org.spongycastle.crypto.CipherParameters) r6;

     label3:
        interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r11);

     label4:
        $i0 = lengthof $r8;

     label5:
        $r8 = interfaceinvoke $r5.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r8, 0, $i0);

     label6:
        return $r8;

     label7:
        r2 := @caughtexception;

        $r10 = new org.spongycastle.operator.OperatorException;

        specialinvoke $r10.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>("unable to encrypt contents key", r2);

        throw $r10;

        catch org.spongycastle.crypto.InvalidCipherTextException from label1 to label2 with label7;
        catch org.spongycastle.crypto.InvalidCipherTextException from label3 to label4 with label7;
        catch org.spongycastle.crypto.InvalidCipherTextException from label5 to label6 with label7;
    }
    public org.spongycastle.operator.bc.BcAsymmetricKeyWrapper setSecureRandom(java.security.SecureRandom)
    {
        org.spongycastle.operator.bc.BcAsymmetricKeyWrapper r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.operator.bc.BcAsymmetricKeyWrapper;

        $r1 := @parameter0: java.security.SecureRandom;

        r0.<org.spongycastle.operator.bc.BcAsymmetricKeyWrapper: java.security.SecureRandom random> = $r1;

        return r0;
    }
