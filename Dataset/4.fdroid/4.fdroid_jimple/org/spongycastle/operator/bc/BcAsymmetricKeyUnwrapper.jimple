org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper extends org.spongycastle.operator.AsymmetricKeyUnwrapper
private org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.crypto.params.AsymmetricKeyParameter)
    {
        org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;

        r0 := @this: org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.crypto.params.AsymmetricKeyParameter;

        specialinvoke r0.<org.spongycastle.operator.AsymmetricKeyUnwrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1);

        r0.<org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey> = $r2;

        return;
    }
protected abstract org.spongycastle.crypto.AsymmetricBlockCipher createAsymmetricUnwrapper(org.spongycastle.asn1.ASN1ObjectIdentifier) { 
// no body
} 
    public org.spongycastle.operator.GenericKey generateUnwrappedKey(org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[]) throws org.spongycastle.operator.OperatorException
    {
        org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r4;
        byte[] $r2;
        org.spongycastle.crypto.InvalidCipherTextException r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5, $r8;
        org.spongycastle.crypto.AsymmetricBlockCipher $r6;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r7;
        int $i0;
        boolean $z0;
        org.spongycastle.operator.GenericKey $r9;
        org.spongycastle.operator.OperatorException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;

        r0 := @this: org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: byte[];

        $r4 = virtualinvoke r0.<org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r6 = virtualinvoke r0.<org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper: org.spongycastle.crypto.AsymmetricBlockCipher createAsymmetricUnwrapper(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r5);

        $r7 = r0.<org.spongycastle.operator.bc.BcAsymmetricKeyUnwrapper: org.spongycastle.crypto.params.AsymmetricKeyParameter privateKey>;

        interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r7);

        $i0 = lengthof $r2;

     label01:
        $r2 = interfaceinvoke $r6.<org.spongycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r2, 0, $i0);

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

     label02:
        $r8 = <org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

     label03:
        $z0 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: boolean equals(java.lang.Object)>($r8);

     label04:
        if $z0 == 0 goto label07;

        $r9 = new org.spongycastle.operator.GenericKey;

     label05:
        specialinvoke $r9.<org.spongycastle.operator.GenericKey: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r2);

     label06:
        return $r9;

     label07:
        $r9 = new org.spongycastle.operator.GenericKey;

     label08:
        specialinvoke $r9.<org.spongycastle.operator.GenericKey: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[])>($r1, $r2);

     label09:
        return $r9;

     label10:
        r3 := @caughtexception;

        $r10 = new org.spongycastle.operator.OperatorException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to recover secret key: ");

        $r12 = virtualinvoke r3.<org.spongycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r3);

        throw $r10;

        catch org.spongycastle.crypto.InvalidCipherTextException from label01 to label02 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label03 to label04 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label05 to label06 with label10;
        catch org.spongycastle.crypto.InvalidCipherTextException from label08 to label09 with label10;
    }
