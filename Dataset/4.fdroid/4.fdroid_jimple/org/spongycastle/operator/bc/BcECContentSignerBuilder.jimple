org.spongycastle.operator.bc.BcECContentSignerBuilder extends org.spongycastle.operator.bc.BcContentSignerBuilder
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier)
    {
        org.spongycastle.operator.bc.BcECContentSignerBuilder r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;

        r0 := @this: org.spongycastle.operator.bc.BcECContentSignerBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        specialinvoke r0.<org.spongycastle.operator.bc.BcContentSignerBuilder: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1, $r2);

        return;
    }
    protected org.spongycastle.crypto.Signer createSigner(org.spongycastle.asn1.x509.AlgorithmIdentifier, org.spongycastle.asn1.x509.AlgorithmIdentifier) throws org.spongycastle.operator.OperatorCreationException
    {
        org.spongycastle.operator.bc.BcECContentSignerBuilder r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r2;
        org.spongycastle.crypto.signers.ECDSASigner $r3;
        org.spongycastle.crypto.ExtendedDigest $r4;
        org.spongycastle.operator.bc.BcDigestProvider $r5;
        org.spongycastle.crypto.signers.DSADigestSigner $r6;

        r0 := @this: org.spongycastle.operator.bc.BcECContentSignerBuilder;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r5 = r0.<org.spongycastle.operator.bc.BcECContentSignerBuilder: org.spongycastle.operator.bc.BcDigestProvider digestProvider>;

        $r4 = interfaceinvoke $r5.<org.spongycastle.operator.bc.BcDigestProvider: org.spongycastle.crypto.ExtendedDigest get(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r2);

        $r6 = new org.spongycastle.crypto.signers.DSADigestSigner;

        $r3 = new org.spongycastle.crypto.signers.ECDSASigner;

        specialinvoke $r3.<org.spongycastle.crypto.signers.ECDSASigner: void <init>()>();

        specialinvoke $r6.<org.spongycastle.crypto.signers.DSADigestSigner: void <init>(org.spongycastle.crypto.DSA,org.spongycastle.crypto.Digest)>($r3, $r4);

        return $r6;
    }
