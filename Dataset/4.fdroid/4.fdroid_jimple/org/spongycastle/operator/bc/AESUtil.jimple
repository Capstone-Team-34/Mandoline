org.spongycastle.operator.bc.AESUtil extends java.lang.Object
    void <init>()
    {
        org.spongycastle.operator.bc.AESUtil r0;

        r0 := @this: org.spongycastle.operator.bc.AESUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static org.spongycastle.asn1.x509.AlgorithmIdentifier determineKeyEncAlg(org.spongycastle.crypto.params.KeyParameter)
    {
        org.spongycastle.crypto.params.KeyParameter $r0;
        int i0;
        byte[] $r1;
        org.spongycastle.asn1.ASN1ObjectIdentifier r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: org.spongycastle.crypto.params.KeyParameter;

        $r1 = virtualinvoke $r0.<org.spongycastle.crypto.params.KeyParameter: byte[] getKey()>();

        i0 = lengthof $r1;

        i0 = i0 * 8;

        if i0 != 128 goto label2;

        r2 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_wrap>;

     label1:
        $r3 = new org.spongycastle.asn1.x509.AlgorithmIdentifier;

        specialinvoke $r3.<org.spongycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.spongycastle.asn1.ASN1ObjectIdentifier)>(r2);

        return $r3;

     label2:
        if i0 != 192 goto label3;

        r2 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_wrap>;

        goto label1;

     label3:
        if i0 != 256 goto label4;

        r2 = <org.spongycastle.asn1.nist.NISTObjectIdentifiers: org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_wrap>;

        goto label1;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal keysize in AES");

        throw $r4;
    }
