org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper extends org.spongycastle.operator.AsymmetricKeyUnwrapper
private java.util.Map extraMappings
private org.spongycastle.operator.jcajce.OperatorHelper helper
private java.security.PrivateKey privKey
private boolean unwrappedKeyMustBeEncodable
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, java.security.PrivateKey)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        java.security.PrivateKey $r2;
        org.spongycastle.jcajce.util.DefaultJcaJceHelper $r3;
        org.spongycastle.operator.jcajce.OperatorHelper $r4;
        java.util.HashMap $r5;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: java.security.PrivateKey;

        specialinvoke r0.<org.spongycastle.operator.AsymmetricKeyUnwrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1);

        $r4 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.DefaultJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.DefaultJcaJceHelper: void <init>()>();

        specialinvoke $r4.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.util.Map extraMappings> = $r5;

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.security.PrivateKey privKey> = $r2;

        return;
    }
    public org.spongycastle.operator.GenericKey generateUnwrappedKey(org.spongycastle.asn1.x509.AlgorithmIdentifier, byte[]) throws org.spongycastle.operator.OperatorException
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1, $r4;
        byte[] $r2, $r13;
        org.spongycastle.operator.jcajce.OperatorHelper $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r5;
        java.util.Map $r6;
        javax.crypto.Cipher $r7;
        java.security.AlgorithmParameters $r8;
        java.security.PrivateKey $r9;
        java.lang.String $r10;
        java.security.Key $r11, r12;
        boolean $z0;
        int $i0;
        java.lang.Object r14;
        java.security.GeneralSecurityException $r15;
        java.lang.Exception r16;
        java.lang.IllegalStateException $r17;
        java.lang.UnsupportedOperationException $r18;
        java.security.ProviderException $r19;
        java.security.InvalidKeyException r20;
        java.lang.StringBuilder $r21, $r26;
        javax.crypto.IllegalBlockSizeException r22;
        javax.crypto.BadPaddingException r23;
        javax.crypto.spec.SecretKeySpec $r24;
        org.spongycastle.operator.jcajce.JceGenericKey $r25;
        org.spongycastle.operator.OperatorException $r27;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: byte[];

        $r3 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper>;

     label01:
        $r4 = virtualinvoke r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

     label02:
        $r6 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.util.Map extraMappings>;

     label03:
        $r7 = virtualinvoke $r3.<org.spongycastle.operator.jcajce.OperatorHelper: javax.crypto.Cipher createAsymmetricWrapper(org.spongycastle.asn1.ASN1ObjectIdentifier,java.util.Map)>($r5, $r6);

     label04:
        $r3 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper>;

     label05:
        $r4 = virtualinvoke r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r8 = virtualinvoke $r3.<org.spongycastle.operator.jcajce.OperatorHelper: java.security.AlgorithmParameters createAlgorithmParameters(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r4);

     label06:
        if $r8 == null goto label24;

        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.security.PrivateKey privKey>;

     label07:
        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(4, $r9, $r8);

     label08:
        $r3 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper>;

     label09:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.operator.jcajce.OperatorHelper: java.lang.String getKeyAlgorithmName(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r5);

        $r11 = virtualinvoke $r7.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, $r10, 3);

     label10:
        r12 = $r11;

        $z0 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: boolean unwrappedKeyMustBeEncodable>;

        if $z0 == 0 goto label16;

     label11:
        $r13 = interfaceinvoke $r11.<java.security.Key: byte[] getEncoded()>();

     label12:
        if $r13 == null goto label15;

     label13:
        $i0 = lengthof $r13;

     label14:
        if $i0 != 0 goto label16;

     label15:
        r12 = null;

     label16:
        $r11 = r12;

     label17:
        if $r11 != null goto label41;

        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.security.PrivateKey privKey>;

     label18:
        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r9);

     label19:
        $r24 = new javax.crypto.spec.SecretKeySpec;

        r14 = $r24;

     label20:
        $r2 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r10 = virtualinvoke $r5.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        specialinvoke $r24.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r10);

     label21:
        $r25 = new org.spongycastle.operator.jcajce.JceGenericKey;

        $r11 = (java.security.Key) r14;

     label22:
        specialinvoke $r25.<org.spongycastle.operator.jcajce.JceGenericKey: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.Key)>($r1, $r11);

     label23:
        return $r25;

     label24:
        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.security.PrivateKey privKey>;

     label25:
        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(4, $r9);

     label26:
        goto label08;

     label27:
        $r15 := @caughtexception;

        $r11 = null;

        goto label17;

     label28:
        r16 := @caughtexception;

        r12 = null;

        goto label16;

     label29:
        $r17 := @caughtexception;

        $r11 = null;

        goto label17;

     label30:
        $r18 := @caughtexception;

        $r11 = null;

        goto label17;

     label31:
        $r19 := @caughtexception;

        $r11 = null;

        goto label17;

     label32:
        r20 := @caughtexception;

     label33:
        $r27 = new org.spongycastle.operator.OperatorException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key invalid: ");

        $r10 = virtualinvoke r20.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r20);

        throw $r27;

     label34:
        r22 := @caughtexception;

     label35:
        $r27 = new org.spongycastle.operator.OperatorException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal blocksize: ");

        $r10 = virtualinvoke r22.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r22);

        throw $r27;

     label36:
        r23 := @caughtexception;

     label37:
        $r27 = new org.spongycastle.operator.OperatorException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad padding: ");

        $r10 = virtualinvoke r23.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r23);

        throw $r27;

     label38:
        r23 := @caughtexception;

        goto label37;

     label39:
        r22 := @caughtexception;

        goto label35;

     label40:
        r20 := @caughtexception;

        goto label33;

     label41:
        r14 = $r11;

        goto label21;

        catch java.security.InvalidKeyException from label01 to label02 with label32;
        catch java.security.InvalidKeyException from label03 to label04 with label32;
        catch java.security.InvalidKeyException from label05 to label06 with label32;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label34;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label34;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label34;
        catch javax.crypto.BadPaddingException from label01 to label02 with label36;
        catch javax.crypto.BadPaddingException from label03 to label04 with label36;
        catch javax.crypto.BadPaddingException from label05 to label06 with label36;
        catch java.security.GeneralSecurityException from label07 to label08 with label27;
        catch java.security.GeneralSecurityException from label09 to label10 with label27;
        catch java.lang.IllegalStateException from label07 to label08 with label29;
        catch java.lang.IllegalStateException from label09 to label10 with label29;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label30;
        catch java.lang.UnsupportedOperationException from label09 to label10 with label30;
        catch java.security.ProviderException from label07 to label08 with label31;
        catch java.security.ProviderException from label09 to label10 with label31;
        catch java.lang.Exception from label11 to label12 with label28;
        catch java.lang.Exception from label13 to label14 with label28;
        catch java.security.InvalidKeyException from label18 to label19 with label40;
        catch java.security.InvalidKeyException from label20 to label21 with label40;
        catch javax.crypto.IllegalBlockSizeException from label18 to label19 with label39;
        catch javax.crypto.IllegalBlockSizeException from label20 to label21 with label39;
        catch javax.crypto.BadPaddingException from label18 to label19 with label38;
        catch javax.crypto.BadPaddingException from label20 to label21 with label38;
        catch java.security.InvalidKeyException from label22 to label23 with label32;
        catch javax.crypto.IllegalBlockSizeException from label22 to label23 with label34;
        catch javax.crypto.BadPaddingException from label22 to label23 with label36;
        catch java.security.GeneralSecurityException from label25 to label26 with label27;
        catch java.lang.IllegalStateException from label25 to label26 with label29;
        catch java.lang.UnsupportedOperationException from label25 to label26 with label30;
        catch java.security.ProviderException from label25 to label26 with label31;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setAlgorithmMapping(org.spongycastle.asn1.ASN1ObjectIdentifier, java.lang.String)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.lang.String $r2;
        java.util.Map $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: java.util.Map extraMappings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setMustProduceEncodableUnwrappedKey(boolean)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        boolean $z0;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $z0 := @parameter0: boolean;

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: boolean unwrappedKeyMustBeEncodable> = $z0;

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setProvider(java.lang.String)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        java.lang.String $r1;
        org.spongycastle.operator.jcajce.OperatorHelper $r2;
        org.spongycastle.jcajce.util.NamedJcaJceHelper $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.NamedJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.NamedJcaJceHelper: void <init>(java.lang.String)>($r1);

        specialinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setProvider(java.security.Provider)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper r0;
        java.security.Provider $r1;
        org.spongycastle.operator.jcajce.OperatorHelper $r2;
        org.spongycastle.jcajce.util.ProviderJcaJceHelper $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper;

        $r1 := @parameter0: java.security.Provider;

        $r2 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.ProviderJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.ProviderJcaJceHelper: void <init>(java.security.Provider)>($r1);

        specialinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r2;

        return r0;
    }
