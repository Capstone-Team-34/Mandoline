org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper extends org.spongycastle.operator.AsymmetricKeyWrapper
private java.util.Map extraMappings
private org.spongycastle.operator.jcajce.OperatorHelper helper
private java.security.PublicKey publicKey
private java.security.SecureRandom random
    public void <init>(java.security.PublicKey)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        java.security.PublicKey $r1;
        org.spongycastle.jcajce.util.DefaultJcaJceHelper $r2;
        byte[] $r3;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r4;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r5;
        org.spongycastle.operator.jcajce.OperatorHelper $r6;
        java.util.HashMap $r7;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: java.security.PublicKey;

        $r3 = interfaceinvoke $r1.<java.security.PublicKey: byte[] getEncoded()>();

        $r4 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>();

        specialinvoke r0.<org.spongycastle.operator.AsymmetricKeyWrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r5);

        $r6 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r2 = new org.spongycastle.jcajce.util.DefaultJcaJceHelper;

        specialinvoke $r2.<org.spongycastle.jcajce.util.DefaultJcaJceHelper: void <init>()>();

        specialinvoke $r6.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r2);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.util.Map extraMappings> = $r7;

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.PublicKey publicKey> = $r1;

        return;
    }
    public void <init>(java.security.cert.X509Certificate)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        java.security.cert.X509Certificate $r1;
        java.security.PublicKey $r2;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        specialinvoke r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: void <init>(java.security.PublicKey)>($r2);

        return;
    }
    public void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier, java.security.PublicKey)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r1;
        java.security.PublicKey $r2;
        org.spongycastle.jcajce.util.DefaultJcaJceHelper $r3;
        org.spongycastle.operator.jcajce.OperatorHelper $r4;
        java.util.HashMap $r5;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        $r2 := @parameter1: java.security.PublicKey;

        specialinvoke r0.<org.spongycastle.operator.AsymmetricKeyWrapper: void <init>(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r1);

        $r4 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.DefaultJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.DefaultJcaJceHelper: void <init>()>();

        specialinvoke $r4.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.util.Map extraMappings> = $r5;

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.PublicKey publicKey> = $r2;

        return;
    }
    public byte[] generateWrappedKey(org.spongycastle.operator.GenericKey) throws org.spongycastle.operator.OperatorException
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        org.spongycastle.operator.GenericKey $r1;
        org.spongycastle.operator.jcajce.OperatorHelper $r2;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r3;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r4;
        java.util.Map $r5;
        javax.crypto.Cipher $r6;
        java.security.AlgorithmParameters $r7;
        byte[] r8, $r12;
        java.security.PublicKey $r9;
        java.security.SecureRandom $r10;
        java.security.Key $r11;
        java.security.InvalidKeyException $r13, r14;
        org.spongycastle.operator.OperatorException $r15;
        java.security.GeneralSecurityException r16, $r20;
        java.security.ProviderException $r17;
        java.lang.UnsupportedOperationException $r18;
        java.lang.IllegalStateException $r19;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: org.spongycastle.operator.GenericKey;

        $r2 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper>;

        $r3 = virtualinvoke r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r5 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.util.Map extraMappings>;

        $r6 = virtualinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: javax.crypto.Cipher createAsymmetricWrapper(org.spongycastle.asn1.ASN1ObjectIdentifier,java.util.Map)>($r4, $r5);

        $r2 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper>;

        $r3 = virtualinvoke r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r7 = virtualinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: java.security.AlgorithmParameters createAlgorithmParameters(org.spongycastle.asn1.x509.AlgorithmIdentifier)>($r3);

        r8 = null;

        if $r7 == null goto label07;

        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.PublicKey publicKey>;

        $r10 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.SecureRandom random>;

     label01:
        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(3, $r9, $r7, $r10);

     label02:
        $r11 = staticinvoke <org.spongycastle.operator.jcajce.OperatorUtils: java.security.Key getJceKey(org.spongycastle.operator.GenericKey)>($r1);

        $r12 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>($r11);

     label03:
        r8 = $r12;

     label04:
        if r8 != null goto label17;

        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.PublicKey publicKey>;

        $r10 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.SecureRandom random>;

     label05:
        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(1, $r9, $r10);

        $r11 = staticinvoke <org.spongycastle.operator.jcajce.OperatorUtils: java.security.Key getJceKey(org.spongycastle.operator.GenericKey)>($r1);

        r8 = interfaceinvoke $r11.<java.security.Key: byte[] getEncoded()>();

        r8 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r8);

     label06:
        return r8;

     label07:
        $r9 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.PublicKey publicKey>;

        $r10 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.SecureRandom random>;

     label08:
        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(3, $r9, $r10);

     label09:
        goto label02;

     label10:
        $r13 := @caughtexception;

        goto label04;

     label11:
        r14 := @caughtexception;

        $r15 = new org.spongycastle.operator.OperatorException;

        specialinvoke $r15.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>("unable to encrypt contents key", r14);

        throw $r15;

     label12:
        r16 := @caughtexception;

        $r15 = new org.spongycastle.operator.OperatorException;

        specialinvoke $r15.<org.spongycastle.operator.OperatorException: void <init>(java.lang.String,java.lang.Throwable)>("unable to encrypt contents key", r16);

        throw $r15;

     label13:
        $r17 := @caughtexception;

        goto label04;

     label14:
        $r18 := @caughtexception;

        goto label04;

     label15:
        $r19 := @caughtexception;

        goto label04;

     label16:
        $r20 := @caughtexception;

        goto label04;

     label17:
        return r8;

        catch java.security.InvalidKeyException from label01 to label03 with label10;
        catch java.security.GeneralSecurityException from label01 to label03 with label16;
        catch java.lang.IllegalStateException from label01 to label03 with label15;
        catch java.lang.UnsupportedOperationException from label01 to label03 with label14;
        catch java.security.ProviderException from label01 to label03 with label13;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch java.security.GeneralSecurityException from label05 to label06 with label12;
        catch java.security.InvalidKeyException from label08 to label09 with label10;
        catch java.security.GeneralSecurityException from label08 to label09 with label16;
        catch java.lang.IllegalStateException from label08 to label09 with label15;
        catch java.lang.UnsupportedOperationException from label08 to label09 with label14;
        catch java.security.ProviderException from label08 to label09 with label13;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper setAlgorithmMapping(org.spongycastle.asn1.ASN1ObjectIdentifier, java.lang.String)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r1;
        java.lang.String $r2;
        java.util.Map $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1ObjectIdentifier;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.util.Map extraMappings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper setProvider(java.lang.String)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        java.lang.String $r1;
        org.spongycastle.operator.jcajce.OperatorHelper $r2;
        org.spongycastle.jcajce.util.NamedJcaJceHelper $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.NamedJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.NamedJcaJceHelper: void <init>(java.lang.String)>($r1);

        specialinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper setProvider(java.security.Provider)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        java.security.Provider $r1;
        org.spongycastle.operator.jcajce.OperatorHelper $r2;
        org.spongycastle.jcajce.util.ProviderJcaJceHelper $r3;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: java.security.Provider;

        $r2 = new org.spongycastle.operator.jcajce.OperatorHelper;

        $r3 = new org.spongycastle.jcajce.util.ProviderJcaJceHelper;

        specialinvoke $r3.<org.spongycastle.jcajce.util.ProviderJcaJceHelper: void <init>(java.security.Provider)>($r1);

        specialinvoke $r2.<org.spongycastle.operator.jcajce.OperatorHelper: void <init>(org.spongycastle.jcajce.util.JcaJceHelper)>($r3);

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: org.spongycastle.operator.jcajce.OperatorHelper helper> = $r2;

        return r0;
    }
    public org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper setSecureRandom(java.security.SecureRandom)
    {
        org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper r0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper;

        $r1 := @parameter0: java.security.SecureRandom;

        r0.<org.spongycastle.operator.jcajce.JceAsymmetricKeyWrapper: java.security.SecureRandom random> = $r1;

        return r0;
    }
