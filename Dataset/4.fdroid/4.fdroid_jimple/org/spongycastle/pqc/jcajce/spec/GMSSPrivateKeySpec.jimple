org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec extends java.lang.Object implements java.security.spec.KeySpec
private byte[][][] currentAuthPath
private java.util.Vector[][] currentRetain
private byte[][] currentRootSig
private byte[][] currentSeed
private java.util.Vector[] currentStack
private org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash
private org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS
private int[] index
private byte[][][] keep
private int[] minTreehash
private byte[][][] nextAuthPath
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf
private org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot
private byte[][] nextNextSeed
private java.util.Vector[][] nextRetain
private byte[][] nextRoot
private org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig
private java.util.Vector[] nextStack
private org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf
    public void <init>(int[], byte[][], byte[][], byte[][][], byte[][][], org.spongycastle.pqc.crypto.gmss.Treehash[][], org.spongycastle.pqc.crypto.gmss.Treehash[][], java.util.Vector[], java.util.Vector[], java.util.Vector[][], java.util.Vector[][], byte[][][], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], int[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootSig[], org.spongycastle.pqc.crypto.gmss.GMSSParameters)
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        int[] $r1, $r16;
        byte[][] $r2, $r3, $r17, $r19;
        byte[][][] $r4, $r5, $r12;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r6, $r7;
        java.util.Vector[] $r8, $r9;
        java.util.Vector[][] $r10, $r11;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r13, $r14, $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r18;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r20;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r21;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: byte[][];

        $r4 := @parameter3: byte[][][];

        $r5 := @parameter4: byte[][][];

        $r6 := @parameter5: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r7 := @parameter6: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r8 := @parameter7: java.util.Vector[];

        $r9 := @parameter8: java.util.Vector[];

        $r10 := @parameter9: java.util.Vector[][];

        $r11 := @parameter10: java.util.Vector[][];

        $r12 := @parameter11: byte[][][];

        $r13 := @parameter12: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r14 := @parameter13: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r15 := @parameter14: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r16 := @parameter15: int[];

        $r17 := @parameter16: byte[][];

        $r18 := @parameter17: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        $r19 := @parameter18: byte[][];

        $r20 := @parameter19: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        $r21 := @parameter20: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: int[] index> = $r1;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] currentSeed> = $r2;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] nextNextSeed> = $r3;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] currentAuthPath> = $r4;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] nextAuthPath> = $r5;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash> = $r6;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash> = $r7;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] currentStack> = $r8;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] nextStack> = $r9;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] currentRetain> = $r10;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] nextRetain> = $r11;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] keep> = $r12;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf> = $r13;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf> = $r14;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf> = $r15;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: int[] minTreehash> = $r16;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] nextRoot> = $r17;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot> = $r18;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] currentRootSig> = $r19;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig> = $r20;

        r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS> = $r21;

        return;
    }
    private static java.util.Vector[] clone(java.util.Vector[])
    {
        java.util.Vector[] $r0, r2;
        java.util.Vector $r1, $r3;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Vector[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r2 = newarray (java.util.Vector)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r3 = new java.util.Vector;

        $r1 = $r0[$i0];

        specialinvoke $r3.<java.util.Vector: void <init>(java.util.Collection)>($r1);

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r2;
    }
    private static org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.spongycastle.pqc.crypto.gmss.GMSSLeaf[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    private static org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootCalc)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    private static org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootSig[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootSig)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    private static org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.Treehash[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    private static byte[][] clone(byte[][])
    {
        byte[][] $r0, r1;
        byte[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    private static java.util.Vector[][] clone(java.util.Vector[][])
    {
        java.util.Vector[][] $r0, r1;
        java.util.Vector[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Vector[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (java.util.Vector[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] clone(java.util.Vector[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    private static org.spongycastle.pqc.crypto.gmss.Treehash[][] clone(org.spongycastle.pqc.crypto.gmss.Treehash[][])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r0, r1;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    private static byte[][][] clone(byte[][][])
    {
        byte[][][] $r0, r1;
        byte[][] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[][])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] clone(byte[][])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    public byte[][][] getCurrentAuthPath()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] currentAuthPath>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] clone(byte[][][])>($r1);

        return $r1;
    }
    public java.util.Vector[][] getCurrentRetain()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        java.util.Vector[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] currentRetain>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] clone(java.util.Vector[][])>($r1);

        return $r1;
    }
    public byte[][] getCurrentRootSig()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] currentRootSig>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public byte[][] getCurrentSeed()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] currentSeed>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public java.util.Vector[] getCurrentStack()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        java.util.Vector[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] currentStack>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] clone(java.util.Vector[])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.Treehash[][] getCurrentTreehash()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] clone(org.spongycastle.pqc.crypto.gmss.Treehash[][])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSParameters getGmssPS()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        return r1;
    }
    public int[] getIndex()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: int[] index>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public byte[][][] getKeep()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] keep>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] clone(byte[][][])>($r1);

        return $r1;
    }
    public int[] getMinTreehash()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: int[] minTreehash>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public byte[][][] getNextAuthPath()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] nextAuthPath>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][][] clone(byte[][][])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] getNextNextLeaf()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.spongycastle.pqc.crypto.gmss.GMSSLeaf[])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] getNextNextRoot()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[])>($r1);

        return $r1;
    }
    public byte[][] getNextNextSeed()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] nextNextSeed>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public java.util.Vector[][] getNextRetain()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        java.util.Vector[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] nextRetain>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[][] clone(java.util.Vector[][])>($r1);

        return $r1;
    }
    public byte[][] getNextRoot()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] nextRoot>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] getNextRootSig()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootSig[])>($r1);

        return $r1;
    }
    public java.util.Vector[] getNextStack()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        java.util.Vector[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] nextStack>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: java.util.Vector[] clone(java.util.Vector[])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.Treehash[][] getNextTreehash()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.Treehash[][] clone(org.spongycastle.pqc.crypto.gmss.Treehash[][])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] getUpperLeaf()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.spongycastle.pqc.crypto.gmss.GMSSLeaf[])>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] getUpperTreehashLeaf()
    {
        org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec r0;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec;

        $r1 = r0.<org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $r1 = staticinvoke <org.spongycastle.pqc.jcajce.spec.GMSSPrivateKeySpec: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.spongycastle.pqc.crypto.gmss.GMSSLeaf[])>($r1);

        return $r1;
    }
