org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi extends java.security.KeyFactorySpi
public static final java.lang.String OID
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }
    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.spec.KeySpec $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.spec.KeySpec;

        return null;
    }
    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.spec.KeySpec $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.spec.KeySpec;

        return null;
    }
    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        return null;
    }
    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.Key $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        return null;
    }
    public java.security.PrivateKey generatePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        byte[][] r1;
        java.io.IOException r2, r3;
        java.security.spec.KeySpec r4;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey $r5;
        org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec r6;
        java.security.spec.PKCS8EncodedKeySpec r7;
        byte[] $r8, $r17, $r18, $r19, $r20;
        org.spongycastle.asn1.ASN1Primitive $r9;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r10;
        org.spongycastle.asn1.ASN1Encodable $r11;
        org.spongycastle.asn1.ASN1Sequence $r12;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r13;
        org.spongycastle.asn1.ASN1Integer $r14;
        java.math.BigInteger $r15;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.asn1.ASN1OctetString $r16;
        java.security.spec.InvalidKeySpecException $r21;
        java.lang.StringBuilder $r22;
        java.lang.String $r23;
        java.lang.Class $r24;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        r4 := @parameter0: java.security.spec.KeySpec;

        $z0 = r4 instanceof org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec;

        if $z0 == 0 goto label01;

        $r5 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        r6 = (org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec) r4;

        specialinvoke $r5.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: void <init>(org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec)>(r6);

        return $r5;

     label01:
        $z0 = r4 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z0 == 0 goto label34;

        r7 = (java.security.spec.PKCS8EncodedKeySpec) r4;

        $r8 = virtualinvoke r7.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

     label02:
        $r9 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r8);

        $r10 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r9);

     label03:
        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r9 = interfaceinvoke $r11.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

     label04:
        $r12 = (org.spongycastle.asn1.ASN1Sequence) $r9;

     label05:
        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

     label06:
        $r13 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r11;

     label07:
        virtualinvoke $r13.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

     label08:
        $r14 = (org.spongycastle.asn1.ASN1Integer) $r11;

     label09:
        $r15 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r15.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

     label10:
        $r14 = (org.spongycastle.asn1.ASN1Integer) $r11;

     label11:
        $r15 = virtualinvoke $r14.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = virtualinvoke $r15.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

     label12:
        $r16 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label13:
        $r8 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(4);

     label14:
        $r16 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label15:
        $r17 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(5);

     label16:
        $r16 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label17:
        $r18 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(6);

     label18:
        $r16 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label19:
        $r19 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(7);

     label20:
        $r12 = (org.spongycastle.asn1.ASN1Sequence) $r11;

     label21:
        $i2 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

     label22:
        r1 = newarray (byte[])[$i2];

        $i2 = 0;

     label23:
        $i3 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

     label24:
        if $i2 >= $i3 goto label30;

     label25:
        $r11 = virtualinvoke $r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i2);

     label26:
        $r16 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label27:
        $r20 = virtualinvoke $r16.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

     label28:
        r1[$i2] = $r20;

        $i2 = $i2 + 1;

        goto label23;

     label29:
        r3 := @caughtexception;

        $r21 = new java.security.spec.InvalidKeySpecException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to decode PKCS8EncodedKeySpec: ");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r23);

        throw $r21;

     label30:
        $r5 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        r6 = new org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec;

     label31:
        specialinvoke r6.<org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec: void <init>(java.lang.String,int,int,byte[],byte[],byte[],byte[],byte[][])>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i1, $r8, $r17, $r18, $r19, r1);

        specialinvoke $r5.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: void <init>(org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec)>(r6);

     label32:
        return $r5;

     label33:
        r2 := @caughtexception;

        $r21 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Unable to decode PKCS8EncodedKeySpec.");

        throw $r21;

     label34:
        $r21 = new java.security.spec.InvalidKeySpecException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key specification: ");

        $r24 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r23);

        throw $r21;

        catch java.io.IOException from label02 to label03 with label29;
        catch java.io.IOException from label03 to label04 with label33;
        catch java.io.IOException from label05 to label06 with label33;
        catch java.io.IOException from label07 to label08 with label33;
        catch java.io.IOException from label09 to label10 with label33;
        catch java.io.IOException from label11 to label12 with label33;
        catch java.io.IOException from label13 to label14 with label33;
        catch java.io.IOException from label15 to label16 with label33;
        catch java.io.IOException from label17 to label18 with label33;
        catch java.io.IOException from label19 to label20 with label33;
        catch java.io.IOException from label21 to label22 with label33;
        catch java.io.IOException from label23 to label24 with label33;
        catch java.io.IOException from label25 to label26 with label33;
        catch java.io.IOException from label27 to label28 with label33;
        catch java.io.IOException from label31 to label32 with label33;
    }
    public java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.ASN1Encodable $r3;
        org.spongycastle.asn1.ASN1Primitive $r4;
        org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey $r5;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        java.lang.String $r8;
        int $i0, $i1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r9;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r10;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r11;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r12;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r13;
        java.security.spec.InvalidKeySpecException $r14;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r4 = interfaceinvoke $r3.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>();

        $r5 = staticinvoke <org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey getInstance(java.lang.Object)>($r4);

     label2:
        $r6 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

     label3:
        $r7 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: int getN()>();

        $i1 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: int getK()>();

        $r9 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r10 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly()>();

        $r11 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.Permutation getP()>();

        $r12 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH()>();

        $r13 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv()>();

        specialinvoke $r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.Permutation,org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>($r8, $i0, $i1, $r9, $r10, $r11, $r12, $r13);

     label4:
        return $r6;

     label5:
        r2 := @caughtexception;

        $r14 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r14.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Unable to decode PKCS8EncodedKeySpec");

        throw $r14;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public java.security.PublicKey generatePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.io.IOException r1, r2;
        java.security.spec.KeySpec r3;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey $r4;
        org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec r5;
        java.security.spec.X509EncodedKeySpec r6;
        byte[] $r7;
        org.spongycastle.asn1.ASN1Primitive $r8;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r9;
        org.spongycastle.asn1.ASN1Sequence $r10;
        org.spongycastle.asn1.ASN1Encodable $r11;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r12;
        org.spongycastle.asn1.ASN1Integer $r13;
        java.math.BigInteger $r14;
        int $i0, $i1;
        org.spongycastle.asn1.ASN1OctetString $r15;
        java.security.spec.InvalidKeySpecException $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;
        java.lang.Class $r19;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        r3 := @parameter0: java.security.spec.KeySpec;

        $z0 = r3 instanceof org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec;

        if $z0 == 0 goto label01;

        $r4 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        r5 = (org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec) r3;

        specialinvoke $r4.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: void <init>(org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec)>(r5);

        return $r4;

     label01:
        $z0 = r3 instanceof java.security.spec.X509EncodedKeySpec;

        if $z0 == 0 goto label19;

        r6 = (java.security.spec.X509EncodedKeySpec) r3;

        $r7 = virtualinvoke r6.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

     label02:
        $r8 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r7);

        $r9 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r8);

     label03:
        $r8 = virtualinvoke $r9.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

     label04:
        $r10 = (org.spongycastle.asn1.ASN1Sequence) $r8;

     label05:
        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

     label06:
        $r12 = (org.spongycastle.asn1.ASN1ObjectIdentifier) $r11;

     label07:
        virtualinvoke $r12.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

     label08:
        $r13 = (org.spongycastle.asn1.ASN1Integer) $r11;

     label09:
        $r14 = virtualinvoke $r13.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r14.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

     label10:
        $r13 = (org.spongycastle.asn1.ASN1Integer) $r11;

     label11:
        $r14 = virtualinvoke $r13.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = virtualinvoke $r14.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke $r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

     label12:
        $r15 = (org.spongycastle.asn1.ASN1OctetString) $r11;

     label13:
        $r7 = virtualinvoke $r15.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

     label14:
        $r4 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        r5 = new org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec;

     label15:
        specialinvoke r5.<org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec: void <init>(java.lang.String,int,int,byte[])>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i1, $r7);

        specialinvoke $r4.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: void <init>(org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec)>(r5);

     label16:
        return $r4;

     label17:
        r1 := @caughtexception;

        $r16 = new java.security.spec.InvalidKeySpecException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to decode X509EncodedKeySpec: ");

        $r18 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label18:
        r2 := @caughtexception;

        $r16 = new java.security.spec.InvalidKeySpecException;

        $r18 = virtualinvoke r2.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label19:
        $r16 = new java.security.spec.InvalidKeySpecException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key specification: ");

        $r19 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r16;

        catch java.io.IOException from label02 to label03 with label18;
        catch java.io.IOException from label03 to label04 with label17;
        catch java.io.IOException from label05 to label06 with label17;
        catch java.io.IOException from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label17;
        catch java.io.IOException from label11 to label12 with label17;
        catch java.io.IOException from label13 to label14 with label17;
        catch java.io.IOException from label15 to label16 with label17;
    }
    public java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        java.io.IOException r2;
        org.spongycastle.asn1.ASN1Primitive $r3;
        org.spongycastle.asn1.ASN1Sequence r4;
        org.spongycastle.pqc.asn1.McElieceCCA2PublicKey $r5;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        java.lang.String $r8;
        int $i0, $i1;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r9;
        java.security.spec.InvalidKeySpecException $r10;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

     label1:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

     label2:
        r4 = (org.spongycastle.asn1.ASN1Sequence) $r3;

     label3:
        $r5 = staticinvoke <org.spongycastle.pqc.asn1.McElieceCCA2PublicKey: org.spongycastle.pqc.asn1.McElieceCCA2PublicKey getInstance(java.lang.Object)>(r4);

     label4:
        $r6 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

     label5:
        $r7 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier getOID()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PublicKey: int getN()>();

        $i1 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PublicKey: int getT()>();

        $r9 = virtualinvoke $r5.<org.spongycastle.pqc.asn1.McElieceCCA2PublicKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getG()>();

        specialinvoke $r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2Matrix)>($r8, $i0, $i1, $r9);

     label6:
        return $r6;

     label7:
        r2 := @caughtexception;

        $r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Unable to decode X509EncodedKeySpec");

        throw $r10;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
    public java.security.spec.KeySpec getKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        byte[] $r5;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey r6;
        org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec $r7;
        int $i0, $i1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r8;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r9;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r10;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r11;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r12;
        java.security.spec.X509EncodedKeySpec $r13;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey r14;
        org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec $r15;
        java.security.spec.InvalidKeySpecException $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        if $z0 == 0 goto label2;

        $r3 = class "Ljava/security/spec/PKCS8EncodedKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new java.security.spec.PKCS8EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r5);

        return $r4;

     label1:
        $r3 = class "Lorg/spongycastle/pqc/jcajce/spec/McElieceCCA2PrivateKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label5;

        r6 = (org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey) $r1;

        $r7 = new org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec;

        $i0 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: int getN()>();

        $i1 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: int getK()>();

        $r8 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r9 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly()>();

        $r10 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.Permutation getP()>();

        $r11 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH()>();

        $r12 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv()>();

        specialinvoke $r7.<org.spongycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.Permutation,org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i1, $r8, $r9, $r10, $r11, $r12);

        return $r7;

     label2:
        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        if $z0 == 0 goto label4;

        $r3 = class "Ljava/security/spec/X509EncodedKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        $r13 = new java.security.spec.X509EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r13.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5);

        return $r13;

     label3:
        $r3 = class "Lorg/spongycastle/pqc/jcajce/spec/McElieceCCA2PublicKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label5;

        r14 = (org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey) $r1;

        $r15 = new org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec;

        $i0 = virtualinvoke r14.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: int getN()>();

        $i1 = virtualinvoke r14.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: int getT()>();

        $r11 = virtualinvoke r14.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getG()>();

        specialinvoke $r15.<org.spongycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2Matrix)>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i1, $r11);

        return $r15;

     label4:
        $r16 = new java.security.spec.InvalidKeySpecException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type: ");

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label5:
        $r16 = new java.security.spec.InvalidKeySpecException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key specification: ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r16;
    }
    public java.security.Key translateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi r0;
        java.security.Key $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Unsupported key type.");

        throw $r2;

     label2:
        return $r1;
    }
