org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi extends org.spongycastle.pqc.jcajce.provider.util.AsymmetricBlockCipher implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
private org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher
private org.spongycastle.crypto.Digest digest
    public void <init>(org.spongycastle.crypto.Digest, org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricBlockCipher: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher> = $r2;

        return;
    }
    public int getKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        java.security.Key r1;
        boolean $z0;
        java.security.PublicKey r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters r4;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r5;
        int $i0;
        java.security.PrivateKey r6;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        r1 := @parameter0: java.security.Key;

        $z0 = r1 instanceof java.security.PublicKey;

        if $z0 == 0 goto label2;

        r2 = (java.security.PublicKey) r1;

        $r3 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r2);

        r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters) $r3;

     label1:
        $r5 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters)>(r4);

        return $i0;

     label2:
        r6 = (java.security.PrivateKey) r1;

        $r3 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>(r6);

        r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters) $r3;

        goto label1;
    }
    public java.lang.String getName()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        return "McEliecePKCS";
    }
    protected void initCipherDecrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        java.security.Key $r3;
        java.security.PrivateKey $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r6;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        $r3 := @parameter0: java.security.Key;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r4 = (java.security.PrivateKey) $r3;

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r4);

        $r5 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r2);

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $i0 = $r6.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int maxPlainTextSize>;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: int maxPlainTextSize> = $i0;

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $i0 = $r6.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int cipherTextSize>;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: int cipherTextSize> = $i0;

        return;
    }
    protected void initCipherEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.ParametersWithRandom r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        java.security.Key $r5;
        java.security.PublicKey $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r8;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        $r5 := @parameter0: java.security.Key;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter2: java.security.SecureRandom;

        $r6 = (java.security.PublicKey) $r5;

        $r4 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r6);

        r3 = new org.spongycastle.crypto.params.ParametersWithRandom;

        specialinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r4, $r2);

        $r7 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void reset()>();

        $r8 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        virtualinvoke $r8.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, r3);

        $r8 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $i0 = $r8.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int maxPlainTextSize>;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: int maxPlainTextSize> = $i0;

        $r8 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $i0 = $r8.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int cipherTextSize>;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: int cipherTextSize> = $i0;

        return;
    }
    protected byte[] messageDecrypt(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        byte[] $r1;
        java.lang.Exception r2;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        $r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $r1 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: byte[] messageDecrypt(byte[])>($r1);

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected byte[] messageEncrypt(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi r0;
        byte[] $r1;
        java.lang.Exception r2;
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi;

        $r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher>;

        $r1 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: byte[] messageEncrypt(byte[])>($r1);

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
