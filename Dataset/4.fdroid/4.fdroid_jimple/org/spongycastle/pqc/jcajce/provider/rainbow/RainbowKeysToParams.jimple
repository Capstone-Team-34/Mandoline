org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey $r0;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey r1;
        org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters $r2;
        short[][] $r3, $r5;
        short[] $r4, $r6;
        int[] $r7;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r8;
        java.security.InvalidKeyException $r9;

        $r0 := @parameter0: java.security.PrivateKey;

        $z0 = $r0 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey;

        if $z0 == 0 goto label1;

        r1 = (org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey) $r0;

        $r2 = new org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters;

        $r3 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[][] getInvA1()>();

        $r4 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[] getB1()>();

        $r5 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[][] getInvA2()>();

        $r6 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[] getB2()>();

        $r7 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: int[] getVi()>();

        $r8 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers()>();

        specialinvoke $r2.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: void <init>(short[][],short[],short[][],short[],int[],org.spongycastle.pqc.crypto.rainbow.Layer[])>($r3, $r4, $r5, $r6, $r7, $r8);

        return $r2;

     label1:
        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t identify Rainbow private key.");

        throw $r9;
    }
    public static org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.PublicKey $r0;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey r1;
        org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters $r2;
        int $i0;
        short[][] $r3, $r4;
        short[] $r5;
        java.security.InvalidKeyException $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;

        $r0 := @parameter0: java.security.PublicKey;

        $z0 = $r0 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey;

        if $z0 == 0 goto label1;

        r1 = (org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey) $r0;

        $r2 = new org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters;

        $i0 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: int getDocLength()>();

        $r3 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[][] getCoeffQuadratic()>();

        $r4 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[][] getCoeffSingular()>();

        $r5 = virtualinvoke r1.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[] getCoeffScalar()>();

        specialinvoke $r2.<org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters: void <init>(int,short[][],short[][],short[])>($i0, $r3, $r4, $r5);

        return $r2;

     label1:
        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t identify Rainbow public key: ");

        $r8 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r6;
    }
