org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi extends java.security.SignatureSpi
private org.spongycastle.crypto.Digest digest
private java.security.SecureRandom random
private org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer
    protected void <init>(org.spongycastle.crypto.Digest, org.spongycastle.pqc.crypto.rainbow.RainbowSigner)
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer> = $r2;

        return;
    }
    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.security.PrivateKey $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        java.lang.Object r3;
        java.security.SecureRandom $r4;
        org.spongycastle.crypto.Digest $r5;
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner $r6;
        org.spongycastle.crypto.params.ParametersWithRandom $r7;
        org.spongycastle.crypto.CipherParameters $r8;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

        r3 = $r2;

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: java.security.SecureRandom random>;

        if $r4 == null goto label1;

        $r7 = new org.spongycastle.crypto.params.ParametersWithRandom;

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: java.security.SecureRandom random>;

        specialinvoke $r7.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r2, $r4);

        r3 = $r7;

     label1:
        $r5 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void reset()>();

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer>;

        $r8 = (org.spongycastle.crypto.CipherParameters) r3;

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, $r8);

        return;
    }
    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: java.security.SecureRandom random> = $r2;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: void engineInitSign(java.security.PrivateKey)>($r1);

        return;
    }
    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.security.PublicKey $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.spongycastle.crypto.Digest $r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner $r4;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r1);

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void reset()>();

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer>;

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r2);

        return;
    }
    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }
    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }
    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        java.lang.Exception r1;
        byte[] r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner $r4;
        java.security.SignatureException $r5;
        java.lang.String $r6;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label1:
        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer>;

        r2 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: byte[] generateSignature(byte[])>(r2);

     label2:
        return r2;

     label3:
        r1 := @caughtexception;

        $r5 = new java.security.SignatureException;

        $r6 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi r0;
        byte[] $r1, r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi;

        $r1 := @parameter0: byte[];

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi: org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer>;

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: boolean verifySignature(byte[],byte[])>(r2, $r1);

        return $z0;
    }
