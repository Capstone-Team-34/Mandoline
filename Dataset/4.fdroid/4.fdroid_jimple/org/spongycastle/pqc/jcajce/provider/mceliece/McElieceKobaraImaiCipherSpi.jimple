org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi extends org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher implements org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers org.spongycastle.asn1.x509.X509ObjectIdentifiers
private java.io.ByteArrayOutputStream buf
private org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher
private org.spongycastle.crypto.Digest digest
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void <init>()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf> = $r1;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf> = $r1;

        return;
    }
    protected void <init>(org.spongycastle.crypto.Digest, org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        org.spongycastle.crypto.Digest $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void <init>()>();

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf> = $r3;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.crypto.Digest digest> = $r1;

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher> = $r2;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf> = $r3;

        return;
    }
    private byte[] pad()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        byte[] $r1;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(1);

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        $r1 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

        return $r1;
    }
    private byte[] unpad(byte[]) throws javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        byte[] $r1, r2;
        int $i0;
        byte $b1;
        javax.crypto.BadPaddingException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $b1 = $r1[$i0];

        if $b1 != 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $b1 = $r1[$i0];

        if $b1 == 1 goto label3;

        $r3 = new javax.crypto.BadPaddingException;

        specialinvoke $r3.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>("invalid ciphertext");

        throw $r3;

     label3:
        r2 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        return r2;
    }
    protected int decryptOutputSize(int)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $i0 := @parameter0: int;

        return 0;
    }
    public byte[] doFinal(byte[], int, int) throws javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r2;
        java.lang.Exception r3, r5;
        java.io.ByteArrayOutputStream $r4;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: byte[] update(byte[],int,int)>($r1, $i0, $i1);

        $i0 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: int opMode>;

        if $i0 != 1 goto label5;

     label1:
        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: byte[] pad()>();

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] messageEncrypt(byte[])>($r1);

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        virtualinvoke r3.<java.lang.Exception: void printStackTrace()>();

     label4:
        return null;

     label5:
        $i0 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: int opMode>;

        if $i0 != 2 goto label4;

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        $r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

     label6:
        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] messageDecrypt(byte[])>($r1);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: byte[] unpad(byte[])>($r1);

     label7:
        return $r1;

     label8:
        r5 := @caughtexception;

        virtualinvoke r5.<java.lang.Exception: void printStackTrace()>();

        goto label4;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label6 to label7 with label8;
    }
    protected int encryptOutputSize(int)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $i0 := @parameter0: int;

        return 0;
    }
    public int getKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.security.Key r1;
        boolean $z0;
        java.security.PublicKey r2;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters r4;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r5;
        int $i0;
        java.security.PrivateKey r6;
        java.security.InvalidKeyException $r7;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        r1 := @parameter0: java.security.Key;

        $z0 = r1 instanceof java.security.PublicKey;

        if $z0 == 0 goto label1;

        r2 = (java.security.PublicKey) r1;

        $r3 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>(r2);

        r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) $r3;

        $r5 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters)>(r4);

        return $i0;

     label1:
        $z0 = r1 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label2;

        r6 = (java.security.PrivateKey) r1;

        $r3 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>(r6);

        r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) $r3;

        $r5 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters)>(r4);

        return $i0;

     label2:
        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>()>();

        throw $r7;
    }
    public java.lang.String getName()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        return "McElieceKobaraImaiCipher";
    }
    protected void initCipherDecrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r2;
        java.security.Key $r3;
        java.io.ByteArrayOutputStream $r4;
        java.security.PrivateKey $r5;
        org.spongycastle.crypto.Digest $r6;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r7;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r3 := @parameter0: java.security.Key;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        $r5 = (java.security.PrivateKey) $r3;

        $r2 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r5);

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void reset()>();

        $r7 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        virtualinvoke $r7.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(0, $r2);

        return;
    }
    protected void initCipherEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.crypto.params.ParametersWithRandom r3;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r4;
        java.security.Key $r5;
        java.io.ByteArrayOutputStream $r6;
        java.security.PublicKey $r7;
        org.spongycastle.crypto.Digest $r8;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r9;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r5 := @parameter0: java.security.Key;

        $r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter2: java.security.SecureRandom;

        $r6 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>();

        $r7 = (java.security.PublicKey) $r5;

        $r4 = staticinvoke <org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams: org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r7);

        r3 = new org.spongycastle.crypto.params.ParametersWithRandom;

        specialinvoke r3.<org.spongycastle.crypto.params.ParametersWithRandom: void <init>(org.spongycastle.crypto.CipherParameters,java.security.SecureRandom)>($r4, $r2);

        $r8 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.crypto.Digest digest>;

        interfaceinvoke $r8.<org.spongycastle.crypto.Digest: void reset()>();

        $r9 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        virtualinvoke $r9.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: void init(boolean,org.spongycastle.crypto.CipherParameters)>(1, r3);

        return;
    }
    public byte[] messageDecrypt() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.security.NoSuchAlgorithmException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.lang.Exception r1;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r4;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

     label1:
        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $r3 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] messageDecrypt(byte[])>($r3);

        $r3 = specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: byte[] unpad(byte[])>($r3);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public byte[] messageEncrypt() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.security.NoSuchAlgorithmException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        java.lang.Exception r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

     label1:
        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: byte[] pad()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] messageEncrypt(byte[])>($r3);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public byte[] update(byte[], int, int)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi: java.io.ByteArrayOutputStream buf>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r1 = newarray (byte)[0];

        return $r1;
    }
