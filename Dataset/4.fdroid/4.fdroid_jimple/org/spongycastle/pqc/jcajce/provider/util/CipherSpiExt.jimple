org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt extends javax.crypto.CipherSpi
public static final int DECRYPT_MODE
public static final int ENCRYPT_MODE
protected int opMode
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        return;
    }
public abstract int doFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException { 
// no body
} 
    public final byte[] doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] doFinal(byte[],int,int)>(null, 0, 0);

        return $r1;
    }
    public final byte[] doFinal(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] doFinal(byte[],int,int)>($r1, 0, $i0);

        return $r1;
    }
public abstract byte[] doFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException { 
// no body
} 
    protected final int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int doFinal(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

        return $i0;
    }
    protected final byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] doFinal(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
    protected final int engineGetBlockSize()
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int getBlockSize()>();

        return $i0;
    }
    protected final byte[] engineGetIV()
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] getIV()>();

        return $r1;
    }
    protected final int engineGetKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        java.security.Key $r1;
        int $i0;
        boolean $z0;
        java.security.InvalidKeyException $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof java.security.Key;

        if $z0 != 0 goto label1;

        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Unsupported key.");

        throw $r2;

     label1:
        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int getKeySize(java.security.Key)>($r1);

        return $i0;
    }
    protected final int engineGetOutputSize(int)
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $i0 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int getOutputSize(int)>($i0);

        return $i0;
    }
    protected final java.security.AlgorithmParameters engineGetParameters()
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        return null;
    }
    protected final void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        int $i0;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void engineInit(int,java.security.Key,java.security.SecureRandom)>($i0, $r1, $r3);

        return;

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r3);

        return;
    }
    protected final void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.lang.String $r4;
        java.security.InvalidParameterException $r5;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r5 = new java.security.InvalidParameterException;

        $r4 = virtualinvoke r3.<java.security.InvalidAlgorithmParameterException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r4);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        int $i0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r4;
        java.security.InvalidKeyException $r5;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter3: java.security.SecureRandom;

        if $r2 == null goto label1;

        $z0 = $r2 instanceof java.security.spec.AlgorithmParameterSpec;

        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r4.<java.security.InvalidAlgorithmParameterException: void <init>()>();

        throw $r4;

     label1:
        if $r1 == null goto label2;

        $z0 = $r1 instanceof java.security.Key;

        if $z0 != 0 goto label3;

     label2:
        $r5 = new java.security.InvalidKeyException;

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>()>();

        throw $r5;

     label3:
        r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int opMode> = $i0;

        if $i0 != 1 goto label4;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r1, $r2, $r3);

        return;

     label4:
        if $i0 != 2 goto label5;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void initDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r1, $r2);

     label5:
        return;
    }
    protected final void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void setMode(java.lang.String)>($r1);

        return;
    }
    protected final void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void setPadding(java.lang.String)>($r1);

        return;
    }
    protected final int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: int update(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

        return $i0;
    }
    protected final byte[] engineUpdate(byte[], int, int)
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] update(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
public abstract int getBlockSize() { 
// no body
} 
public abstract byte[] getIV() { 
// no body
} 
public abstract int getKeySize(java.security.Key) throws java.security.InvalidKeyException { 
// no body
} 
public abstract java.lang.String getName() { 
// no body
} 
public abstract int getOutputSize(int) { 
// no body
} 
public abstract java.security.spec.AlgorithmParameterSpec getParameters() { 
// no body
} 
public abstract void initDecrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException { 
// no body
} 
public abstract void initEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException { 
// no body
} 
protected abstract void setMode(java.lang.String) throws java.security.NoSuchAlgorithmException { 
// no body
} 
protected abstract void setPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException { 
// no body
} 
public abstract int update(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException { 
// no body
} 
    public final byte[] update(byte[])
    {
        org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: byte[] update(byte[],int,int)>($r1, 0, $i0);

        return $r1;
    }
public abstract byte[] update(byte[], int, int) { 
// no body
} 
