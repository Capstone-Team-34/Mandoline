org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 extends org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi: void <init>(java.lang.String)>("McElieceCCA-2");

        return;
    }
    public void <init>(java.lang.String)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi: void <init>(java.lang.String)>($r1);

        return;
    }
    public java.security.KeyPair generateKeyPair()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 r0;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey $r1;
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey $r2;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator $r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r4;
        org.spongycastle.crypto.params.AsymmetricKeyParameter $r5;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r6;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters r7;
        java.security.KeyPair $r8;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2;

        $r3 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg>;

        $r4 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate()>();

        r6 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) $r5;

        $r5 = virtualinvoke $r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic()>();

        r7 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r5;

        $r8 = new java.security.KeyPair;

        $r1 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        specialinvoke $r1.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: void <init>(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)>(r7);

        $r2 = new org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        specialinvoke $r2.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: void <init>(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)>(r6);

        specialinvoke $r8.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r1, $r2);

        return $r8;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 r0;
        int $i0;
        java.security.SecureRandom $r1;
        org.spongycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec r2;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r2 = new org.spongycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec;

        specialinvoke r2.<org.spongycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec: void <init>()>();

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: void initialize(java.security.spec.AlgorithmParameterSpec)>(r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public void initialize(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters r2;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator $r4;
        org.spongycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec r5;
        java.security.SecureRandom $r6;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r4 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator;

        specialinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void <init>()>();

        r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg> = $r4;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec)>($r1);

        r5 = (org.spongycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec) $r1;

        r2 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters;

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        $r3 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters;

        $i0 = virtualinvoke r5.<org.spongycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec: int getM()>();

        $i1 = virtualinvoke r5.<org.spongycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec: int getT()>();

        specialinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: void <init>(int,int)>($i0, $i1);

        specialinvoke r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)>($r6, $r3);

        $r4 = r0.<org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg>;

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>(r2);

        return;
    }
