org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2Primitives extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2Primitives r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2Primitives;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters, org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r1, r9;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r5;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r6;
        org.spongycastle.pqc.math.linearalgebra.Vector $r8;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector[] $r10;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getK()>();

        $r2 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.Permutation getP()>();

        $r3 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r4 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly()>();

        $r5 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH()>();

        $r6 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv()>();

        $r7 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.Permutation: org.spongycastle.pqc.math.linearalgebra.Permutation computeInverse()>();

        $r8 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r7);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector rightMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)>(r9);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GoppaCode: org.spongycastle.pqc.math.linearalgebra.GF2Vector syndromeDecode(org.spongycastle.pqc.math.linearalgebra.GF2Vector,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>($r1, $r3, $r4, $r6);

        $r8 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>($r1);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r2);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r2);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        r9 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector extractRightVector(int)>($i0);

        $r10 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Vector)[2];

        $r10[0] = r9;

        $r10[1] = $r1;

        return $r10;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey, org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r1, r9;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r5;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r6;
        org.spongycastle.pqc.math.linearalgebra.Vector $r8;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector[] $r10;

        $r0 := @parameter0: org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: int getK()>();

        $r2 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.Permutation getP()>();

        $r3 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r4 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly()>();

        $r5 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH()>();

        $r6 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv()>();

        $r7 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.Permutation: org.spongycastle.pqc.math.linearalgebra.Permutation computeInverse()>();

        $r8 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r7);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector rightMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)>(r9);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GoppaCode: org.spongycastle.pqc.math.linearalgebra.GF2Vector syndromeDecode(org.spongycastle.pqc.math.linearalgebra.GF2Vector,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>($r1, $r3, $r4, $r6);

        $r8 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>($r1);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r2);

        r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r8 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r2);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        r9 = virtualinvoke r9.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector extractRightVector(int)>($i0);

        $r10 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Vector)[2];

        $r10[0] = r9;

        $r10[1] = $r1;

        return $r10;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters, org.spongycastle.pqc.math.linearalgebra.GF2Vector, org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r1, $r2;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r3;
        org.spongycastle.pqc.math.linearalgebra.Vector $r4;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r2 := @parameter2: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r3 = virtualinvoke $r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getMatrixG()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector leftMultiplyLeftCompactForm(org.spongycastle.pqc.math.linearalgebra.Vector)>($r1);

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>($r2);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r4;

        return $r1;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey, org.spongycastle.pqc.math.linearalgebra.GF2Vector, org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r1, $r2;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r3;
        org.spongycastle.pqc.math.linearalgebra.Vector $r4;

        $r0 := @parameter0: org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r2 := @parameter2: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r3 = virtualinvoke $r0.<org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getG()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector leftMultiplyLeftCompactForm(org.spongycastle.pqc.math.linearalgebra.Vector)>($r1);

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>($r2);

        $r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r4;

        return $r1;
    }
