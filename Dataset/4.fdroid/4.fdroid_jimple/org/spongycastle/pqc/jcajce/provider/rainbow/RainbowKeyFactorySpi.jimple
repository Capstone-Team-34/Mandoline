org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi extends java.security.KeyFactorySpi implements org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }
    public java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        java.lang.Exception r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey $r3;
        org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec r4;
        java.security.spec.PKCS8EncodedKeySpec r5;
        byte[] $r6;
        org.spongycastle.asn1.ASN1Primitive $r7;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r8;
        java.security.PrivateKey $r9;
        java.security.spec.InvalidKeySpecException $r10;
        java.lang.String $r11;
        java.lang.StringBuilder $r12;
        java.lang.Class $r13;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey;

        r4 = (org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec) r2;

        specialinvoke $r3.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: void <init>(org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec)>(r4);

        return $r3;

     label1:
        $z0 = r2 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z0 == 0 goto label5;

        r5 = (java.security.spec.PKCS8EncodedKeySpec) r2;

        $r6 = virtualinvoke r5.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

     label2:
        $r7 = staticinvoke <org.spongycastle.asn1.ASN1Primitive: org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[])>($r6);

        $r8 = staticinvoke <org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r7);

        $r9 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r8);

     label3:
        return $r9;

     label4:
        r1 := @caughtexception;

        $r10 = new java.security.spec.InvalidKeySpecException;

        $r11 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label5:
        $r10 = new java.security.spec.InvalidKeySpecException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key specification: ");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    public java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        java.lang.Exception r1;
        java.security.spec.KeySpec r2;
        boolean $z0;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey $r3;
        org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec r4;
        java.security.spec.X509EncodedKeySpec r5;
        byte[] $r6;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r7;
        java.security.PublicKey $r8;
        java.security.spec.InvalidKeySpecException $r9;
        java.lang.String $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        r2 := @parameter0: java.security.spec.KeySpec;

        $z0 = r2 instanceof org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey;

        r4 = (org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec) r2;

        specialinvoke $r3.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: void <init>(org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec)>(r4);

        return $r3;

     label1:
        $z0 = r2 instanceof java.security.spec.X509EncodedKeySpec;

        if $z0 == 0 goto label5;

        r5 = (java.security.spec.X509EncodedKeySpec) r2;

        $r6 = virtualinvoke r5.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

     label2:
        $r7 = staticinvoke <org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r6);

        $r8 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi: java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo)>($r7);

     label3:
        return $r8;

     label4:
        r1 := @caughtexception;

        $r9 = new java.security.spec.InvalidKeySpecException;

        $r10 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label5:
        $r9 = new java.security.spec.InvalidKeySpecException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key specification: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch java.lang.Exception from label2 to label3 with label4;
    }
    public final java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        java.security.Key $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        byte[] $r5;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey r6;
        org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec $r7;
        short[][] $r8, $r10;
        short[] $r9, $r11;
        int[] $r12;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r13;
        java.security.spec.X509EncodedKeySpec $r14;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey r15;
        org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec $r16;
        int $i0;
        java.security.spec.InvalidKeySpecException $r17;
        java.lang.StringBuilder $r18;
        java.lang.String $r19;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.Class;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey;

        if $z0 == 0 goto label2;

        $r3 = class "Ljava/security/spec/PKCS8EncodedKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new java.security.spec.PKCS8EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r5);

        return $r4;

     label1:
        $r3 = class "Lorg/spongycastle/pqc/jcajce/spec/RainbowPrivateKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label5;

        r6 = (org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey) $r1;

        $r7 = new org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec;

        $r8 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[][] getInvA1()>();

        $r9 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[] getB1()>();

        $r10 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[][] getInvA2()>();

        $r11 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: short[] getB2()>();

        $r12 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: int[] getVi()>();

        $r13 = virtualinvoke r6.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers()>();

        specialinvoke $r7.<org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec: void <init>(short[][],short[],short[][],short[],int[],org.spongycastle.pqc.crypto.rainbow.Layer[])>($r8, $r9, $r10, $r11, $r12, $r13);

        return $r7;

     label2:
        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey;

        if $z0 == 0 goto label4;

        $r3 = class "Ljava/security/spec/X509EncodedKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        $r14 = new java.security.spec.X509EncodedKeySpec;

        $r5 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r14.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5);

        return $r14;

     label3:
        $r3 = class "Lorg/spongycastle/pqc/jcajce/spec/RainbowPublicKeySpec;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label5;

        r15 = (org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey) $r1;

        $r16 = new org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec;

        $i0 = virtualinvoke r15.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: int getDocLength()>();

        $r8 = virtualinvoke r15.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[][] getCoeffQuadratic()>();

        $r10 = virtualinvoke r15.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[][] getCoeffSingular()>();

        $r9 = virtualinvoke r15.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: short[] getCoeffScalar()>();

        specialinvoke $r16.<org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec: void <init>(int,short[][],short[][],short[])>($i0, $r8, $r10, $r9);

        return $r16;

     label4:
        $r17 = new java.security.spec.InvalidKeySpecException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type: ");

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label5:
        $r17 = new java.security.spec.InvalidKeySpecException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key specification: ");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r19);

        throw $r17;
    }
    public final java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        java.security.Key $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        $r1 := @parameter0: java.security.Key;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Unsupported key type");

        throw $r2;

     label2:
        return $r1;
    }
    public java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) throws java.io.IOException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        org.spongycastle.asn1.pkcs.PrivateKeyInfo $r1;
        org.spongycastle.asn1.ASN1Encodable $r2;
        org.spongycastle.pqc.asn1.RainbowPrivateKey $r3;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey $r4;
        short[][] $r5, $r7;
        short[] $r6, $r8;
        int[] $r9;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r10;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.pkcs.PrivateKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.pkcs.PrivateKeyInfo: org.spongycastle.asn1.ASN1Encodable parsePrivateKey()>();

        $r3 = staticinvoke <org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.asn1.RainbowPrivateKey getInstance(java.lang.Object)>($r2);

        $r4 = new org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey;

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: short[][] getInvA1()>();

        $r6 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: short[] getB1()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: short[][] getInvA2()>();

        $r8 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: short[] getB2()>();

        $r9 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: int[] getVi()>();

        $r10 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers()>();

        specialinvoke $r4.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey: void <init>(short[][],short[],short[][],short[],int[],org.spongycastle.pqc.crypto.rainbow.Layer[])>($r5, $r6, $r7, $r8, $r9, $r10);

        return $r4;
    }
    public java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) throws java.io.IOException
    {
        org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi r0;
        org.spongycastle.asn1.x509.SubjectPublicKeyInfo $r1;
        org.spongycastle.asn1.ASN1Primitive $r2;
        org.spongycastle.pqc.asn1.RainbowPublicKey $r3;
        org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey $r4;
        int $i0;
        short[][] $r5, $r6;
        short[] $r7;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi;

        $r1 := @parameter0: org.spongycastle.asn1.x509.SubjectPublicKeyInfo;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.x509.SubjectPublicKeyInfo: org.spongycastle.asn1.ASN1Primitive parsePublicKey()>();

        $r3 = staticinvoke <org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.pqc.asn1.RainbowPublicKey getInstance(java.lang.Object)>($r2);

        $r4 = new org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey;

        $i0 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPublicKey: int getDocLength()>();

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPublicKey: short[][] getCoeffQuadratic()>();

        $r6 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPublicKey: short[][] getCoeffSingular()>();

        $r7 = virtualinvoke $r3.<org.spongycastle.pqc.asn1.RainbowPublicKey: short[] getCoeffScalar()>();

        specialinvoke $r4.<org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey: void <init>(int,short[][],short[][],short[])>($i0, $r5, $r6, $r7);

        return $r4;
    }
