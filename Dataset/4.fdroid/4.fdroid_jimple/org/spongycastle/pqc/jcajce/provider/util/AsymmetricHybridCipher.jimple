org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher extends org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt
protected java.security.spec.AlgorithmParameterSpec paramSpec
    public void <init>()
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        specialinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.CipherSpiExt: void <init>()>();

        return;
    }
protected abstract int decryptOutputSize(int) { 
// no body
} 
    public final int doFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        javax.crypto.ShortBufferException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = lengthof $r2;

        $i4 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int getOutputSize(int)>($i1);

        if $i3 >= $i4 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("Output buffer too short.");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: byte[] doFinal(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

        $i0 = lengthof $r1;

        return $i0;
    }
public abstract byte[] doFinal(byte[], int, int) throws javax.crypto.BadPaddingException { 
// no body
} 
protected abstract int encryptOutputSize(int) { 
// no body
} 
    public final int getBlockSize()
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        return 0;
    }
    public final byte[] getIV()
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        return null;
    }
    public final int getOutputSize(int)
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int opMode>;

        if $i1 != 1 goto label1;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int encryptOutputSize(int)>($i0);

        return $i0;

     label1:
        $i0 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int decryptOutputSize(int)>($i0);

        return $i0;
    }
    public final java.security.spec.AlgorithmParameterSpec getParameters()
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.spec.AlgorithmParameterSpec r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        r1 = r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: java.security.spec.AlgorithmParameterSpec paramSpec>;

        return r1;
    }
protected abstract void initCipherDecrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException { 
// no body
} 
protected abstract void initCipherEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException { 
// no body
} 
    public final void initDecrypt(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.InvalidAlgorithmParameterException r2;
        java.security.InvalidParameterException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r1, null);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = new java.security.InvalidParameterException;

        specialinvoke $r3.<java.security.InvalidParameterException: void <init>(java.lang.String)>("This cipher needs algorithm parameters for initialization (cannot be null).");

        throw $r3;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public final void initDecrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int opMode> = 2;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r1, $r2);

        return;
    }
    public final void initEncrypt(java.security.Key) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.InvalidAlgorithmParameterException r2;
        java.security.SecureRandom $r3;
        java.security.InvalidParameterException $r4;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

        $r3 = new java.security.SecureRandom;

     label1:
        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r1, null, $r3);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r4 = new java.security.InvalidParameterException;

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>("This cipher needs algorithm parameters for initialization (cannot be null).");

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public final void initEncrypt(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException r3;
        java.security.InvalidParameterException $r4;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.SecureRandom;

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r1, null, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new java.security.InvalidParameterException;

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>("This cipher needs algorithm parameters for initialization (cannot be null).");

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }
    public final void initEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r1, $r2, $r3);

        return;
    }
    public final void initEncrypt(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter2: java.security.SecureRandom;

        r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int opMode> = 1;

        virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($r1, $r2, $r3);

        return;
    }
    protected final void setMode(java.lang.String)
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.lang.String;

        return;
    }
    protected final void setPadding(java.lang.String)
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        java.lang.String $r1;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: java.lang.String;

        return;
    }
    public final int update(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        javax.crypto.ShortBufferException $r3;

        r0 := @this: org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = lengthof $r2;

        $i4 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: int getOutputSize(int)>($i1);

        if $i3 >= $i4 goto label1;

        $r3 = new javax.crypto.ShortBufferException;

        specialinvoke $r3.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>("output");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.spongycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher: byte[] update(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

        $i0 = lengthof $r1;

        return $i0;
    }
public abstract byte[] update(byte[], int, int) { 
// no body
} 
