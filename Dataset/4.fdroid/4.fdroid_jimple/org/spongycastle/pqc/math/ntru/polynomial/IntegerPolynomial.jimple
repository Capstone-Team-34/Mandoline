org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial extends java.lang.Object implements org.spongycastle.pqc.math.ntru.polynomial.Polynomial
private static final java.util.List BIGINT_PRIMES
private static final int NUM_EQUAL_RESULTANTS
private static final int[] PRIMES
public int[] coeffs
    static void <clinit>()
    {
        java.math.BigInteger $r0;
        int[] $r1;
        java.util.ArrayList $r2;
        int i0, $i1;
        java.util.List $r3;
        long $l2;

        $r1 = newarray (int)[619];

        $r1[0] = 4507;

        $r1[1] = 4513;

        $r1[2] = 4517;

        $r1[3] = 4519;

        $r1[4] = 4523;

        $r1[5] = 4547;

        $r1[6] = 4549;

        $r1[7] = 4561;

        $r1[8] = 4567;

        $r1[9] = 4583;

        $r1[10] = 4591;

        $r1[11] = 4597;

        $r1[12] = 4603;

        $r1[13] = 4621;

        $r1[14] = 4637;

        $r1[15] = 4639;

        $r1[16] = 4643;

        $r1[17] = 4649;

        $r1[18] = 4651;

        $r1[19] = 4657;

        $r1[20] = 4663;

        $r1[21] = 4673;

        $r1[22] = 4679;

        $r1[23] = 4691;

        $r1[24] = 4703;

        $r1[25] = 4721;

        $r1[26] = 4723;

        $r1[27] = 4729;

        $r1[28] = 4733;

        $r1[29] = 4751;

        $r1[30] = 4759;

        $r1[31] = 4783;

        $r1[32] = 4787;

        $r1[33] = 4789;

        $r1[34] = 4793;

        $r1[35] = 4799;

        $r1[36] = 4801;

        $r1[37] = 4813;

        $r1[38] = 4817;

        $r1[39] = 4831;

        $r1[40] = 4861;

        $r1[41] = 4871;

        $r1[42] = 4877;

        $r1[43] = 4889;

        $r1[44] = 4903;

        $r1[45] = 4909;

        $r1[46] = 4919;

        $r1[47] = 4931;

        $r1[48] = 4933;

        $r1[49] = 4937;

        $r1[50] = 4943;

        $r1[51] = 4951;

        $r1[52] = 4957;

        $r1[53] = 4967;

        $r1[54] = 4969;

        $r1[55] = 4973;

        $r1[56] = 4987;

        $r1[57] = 4993;

        $r1[58] = 4999;

        $r1[59] = 5003;

        $r1[60] = 5009;

        $r1[61] = 5011;

        $r1[62] = 5021;

        $r1[63] = 5023;

        $r1[64] = 5039;

        $r1[65] = 5051;

        $r1[66] = 5059;

        $r1[67] = 5077;

        $r1[68] = 5081;

        $r1[69] = 5087;

        $r1[70] = 5099;

        $r1[71] = 5101;

        $r1[72] = 5107;

        $r1[73] = 5113;

        $r1[74] = 5119;

        $r1[75] = 5147;

        $r1[76] = 5153;

        $r1[77] = 5167;

        $r1[78] = 5171;

        $r1[79] = 5179;

        $r1[80] = 5189;

        $r1[81] = 5197;

        $r1[82] = 5209;

        $r1[83] = 5227;

        $r1[84] = 5231;

        $r1[85] = 5233;

        $r1[86] = 5237;

        $r1[87] = 5261;

        $r1[88] = 5273;

        $r1[89] = 5279;

        $r1[90] = 5281;

        $r1[91] = 5297;

        $r1[92] = 5303;

        $r1[93] = 5309;

        $r1[94] = 5323;

        $r1[95] = 5333;

        $r1[96] = 5347;

        $r1[97] = 5351;

        $r1[98] = 5381;

        $r1[99] = 5387;

        $r1[100] = 5393;

        $r1[101] = 5399;

        $r1[102] = 5407;

        $r1[103] = 5413;

        $r1[104] = 5417;

        $r1[105] = 5419;

        $r1[106] = 5431;

        $r1[107] = 5437;

        $r1[108] = 5441;

        $r1[109] = 5443;

        $r1[110] = 5449;

        $r1[111] = 5471;

        $r1[112] = 5477;

        $r1[113] = 5479;

        $r1[114] = 5483;

        $r1[115] = 5501;

        $r1[116] = 5503;

        $r1[117] = 5507;

        $r1[118] = 5519;

        $r1[119] = 5521;

        $r1[120] = 5527;

        $r1[121] = 5531;

        $r1[122] = 5557;

        $r1[123] = 5563;

        $r1[124] = 5569;

        $r1[125] = 5573;

        $r1[126] = 5581;

        $r1[127] = 5591;

        $r1[128] = 5623;

        $r1[129] = 5639;

        $r1[130] = 5641;

        $r1[131] = 5647;

        $r1[132] = 5651;

        $r1[133] = 5653;

        $r1[134] = 5657;

        $r1[135] = 5659;

        $r1[136] = 5669;

        $r1[137] = 5683;

        $r1[138] = 5689;

        $r1[139] = 5693;

        $r1[140] = 5701;

        $r1[141] = 5711;

        $r1[142] = 5717;

        $r1[143] = 5737;

        $r1[144] = 5741;

        $r1[145] = 5743;

        $r1[146] = 5749;

        $r1[147] = 5779;

        $r1[148] = 5783;

        $r1[149] = 5791;

        $r1[150] = 5801;

        $r1[151] = 5807;

        $r1[152] = 5813;

        $r1[153] = 5821;

        $r1[154] = 5827;

        $r1[155] = 5839;

        $r1[156] = 5843;

        $r1[157] = 5849;

        $r1[158] = 5851;

        $r1[159] = 5857;

        $r1[160] = 5861;

        $r1[161] = 5867;

        $r1[162] = 5869;

        $r1[163] = 5879;

        $r1[164] = 5881;

        $r1[165] = 5897;

        $r1[166] = 5903;

        $r1[167] = 5923;

        $r1[168] = 5927;

        $r1[169] = 5939;

        $r1[170] = 5953;

        $r1[171] = 5981;

        $r1[172] = 5987;

        $r1[173] = 6007;

        $r1[174] = 6011;

        $r1[175] = 6029;

        $r1[176] = 6037;

        $r1[177] = 6043;

        $r1[178] = 6047;

        $r1[179] = 6053;

        $r1[180] = 6067;

        $r1[181] = 6073;

        $r1[182] = 6079;

        $r1[183] = 6089;

        $r1[184] = 6091;

        $r1[185] = 6101;

        $r1[186] = 6113;

        $r1[187] = 6121;

        $r1[188] = 6131;

        $r1[189] = 6133;

        $r1[190] = 6143;

        $r1[191] = 6151;

        $r1[192] = 6163;

        $r1[193] = 6173;

        $r1[194] = 6197;

        $r1[195] = 6199;

        $r1[196] = 6203;

        $r1[197] = 6211;

        $r1[198] = 6217;

        $r1[199] = 6221;

        $r1[200] = 6229;

        $r1[201] = 6247;

        $r1[202] = 6257;

        $r1[203] = 6263;

        $r1[204] = 6269;

        $r1[205] = 6271;

        $r1[206] = 6277;

        $r1[207] = 6287;

        $r1[208] = 6299;

        $r1[209] = 6301;

        $r1[210] = 6311;

        $r1[211] = 6317;

        $r1[212] = 6323;

        $r1[213] = 6329;

        $r1[214] = 6337;

        $r1[215] = 6343;

        $r1[216] = 6353;

        $r1[217] = 6359;

        $r1[218] = 6361;

        $r1[219] = 6367;

        $r1[220] = 6373;

        $r1[221] = 6379;

        $r1[222] = 6389;

        $r1[223] = 6397;

        $r1[224] = 6421;

        $r1[225] = 6427;

        $r1[226] = 6449;

        $r1[227] = 6451;

        $r1[228] = 6469;

        $r1[229] = 6473;

        $r1[230] = 6481;

        $r1[231] = 6491;

        $r1[232] = 6521;

        $r1[233] = 6529;

        $r1[234] = 6547;

        $r1[235] = 6551;

        $r1[236] = 6553;

        $r1[237] = 6563;

        $r1[238] = 6569;

        $r1[239] = 6571;

        $r1[240] = 6577;

        $r1[241] = 6581;

        $r1[242] = 6599;

        $r1[243] = 6607;

        $r1[244] = 6619;

        $r1[245] = 6637;

        $r1[246] = 6653;

        $r1[247] = 6659;

        $r1[248] = 6661;

        $r1[249] = 6673;

        $r1[250] = 6679;

        $r1[251] = 6689;

        $r1[252] = 6691;

        $r1[253] = 6701;

        $r1[254] = 6703;

        $r1[255] = 6709;

        $r1[256] = 6719;

        $r1[257] = 6733;

        $r1[258] = 6737;

        $r1[259] = 6761;

        $r1[260] = 6763;

        $r1[261] = 6779;

        $r1[262] = 6781;

        $r1[263] = 6791;

        $r1[264] = 6793;

        $r1[265] = 6803;

        $r1[266] = 6823;

        $r1[267] = 6827;

        $r1[268] = 6829;

        $r1[269] = 6833;

        $r1[270] = 6841;

        $r1[271] = 6857;

        $r1[272] = 6863;

        $r1[273] = 6869;

        $r1[274] = 6871;

        $r1[275] = 6883;

        $r1[276] = 6899;

        $r1[277] = 6907;

        $r1[278] = 6911;

        $r1[279] = 6917;

        $r1[280] = 6947;

        $r1[281] = 6949;

        $r1[282] = 6959;

        $r1[283] = 6961;

        $r1[284] = 6967;

        $r1[285] = 6971;

        $r1[286] = 6977;

        $r1[287] = 6983;

        $r1[288] = 6991;

        $r1[289] = 6997;

        $r1[290] = 7001;

        $r1[291] = 7013;

        $r1[292] = 7019;

        $r1[293] = 7027;

        $r1[294] = 7039;

        $r1[295] = 7043;

        $r1[296] = 7057;

        $r1[297] = 7069;

        $r1[298] = 7079;

        $r1[299] = 7103;

        $r1[300] = 7109;

        $r1[301] = 7121;

        $r1[302] = 7127;

        $r1[303] = 7129;

        $r1[304] = 7151;

        $r1[305] = 7159;

        $r1[306] = 7177;

        $r1[307] = 7187;

        $r1[308] = 7193;

        $r1[309] = 7207;

        $r1[310] = 7211;

        $r1[311] = 7213;

        $r1[312] = 7219;

        $r1[313] = 7229;

        $r1[314] = 7237;

        $r1[315] = 7243;

        $r1[316] = 7247;

        $r1[317] = 7253;

        $r1[318] = 7283;

        $r1[319] = 7297;

        $r1[320] = 7307;

        $r1[321] = 7309;

        $r1[322] = 7321;

        $r1[323] = 7331;

        $r1[324] = 7333;

        $r1[325] = 7349;

        $r1[326] = 7351;

        $r1[327] = 7369;

        $r1[328] = 7393;

        $r1[329] = 7411;

        $r1[330] = 7417;

        $r1[331] = 7433;

        $r1[332] = 7451;

        $r1[333] = 7457;

        $r1[334] = 7459;

        $r1[335] = 7477;

        $r1[336] = 7481;

        $r1[337] = 7487;

        $r1[338] = 7489;

        $r1[339] = 7499;

        $r1[340] = 7507;

        $r1[341] = 7517;

        $r1[342] = 7523;

        $r1[343] = 7529;

        $r1[344] = 7537;

        $r1[345] = 7541;

        $r1[346] = 7547;

        $r1[347] = 7549;

        $r1[348] = 7559;

        $r1[349] = 7561;

        $r1[350] = 7573;

        $r1[351] = 7577;

        $r1[352] = 7583;

        $r1[353] = 7589;

        $r1[354] = 7591;

        $r1[355] = 7603;

        $r1[356] = 7607;

        $r1[357] = 7621;

        $r1[358] = 7639;

        $r1[359] = 7643;

        $r1[360] = 7649;

        $r1[361] = 7669;

        $r1[362] = 7673;

        $r1[363] = 7681;

        $r1[364] = 7687;

        $r1[365] = 7691;

        $r1[366] = 7699;

        $r1[367] = 7703;

        $r1[368] = 7717;

        $r1[369] = 7723;

        $r1[370] = 7727;

        $r1[371] = 7741;

        $r1[372] = 7753;

        $r1[373] = 7757;

        $r1[374] = 7759;

        $r1[375] = 7789;

        $r1[376] = 7793;

        $r1[377] = 7817;

        $r1[378] = 7823;

        $r1[379] = 7829;

        $r1[380] = 7841;

        $r1[381] = 7853;

        $r1[382] = 7867;

        $r1[383] = 7873;

        $r1[384] = 7877;

        $r1[385] = 7879;

        $r1[386] = 7883;

        $r1[387] = 7901;

        $r1[388] = 7907;

        $r1[389] = 7919;

        $r1[390] = 7927;

        $r1[391] = 7933;

        $r1[392] = 7937;

        $r1[393] = 7949;

        $r1[394] = 7951;

        $r1[395] = 7963;

        $r1[396] = 7993;

        $r1[397] = 8009;

        $r1[398] = 8011;

        $r1[399] = 8017;

        $r1[400] = 8039;

        $r1[401] = 8053;

        $r1[402] = 8059;

        $r1[403] = 8069;

        $r1[404] = 8081;

        $r1[405] = 8087;

        $r1[406] = 8089;

        $r1[407] = 8093;

        $r1[408] = 8101;

        $r1[409] = 8111;

        $r1[410] = 8117;

        $r1[411] = 8123;

        $r1[412] = 8147;

        $r1[413] = 8161;

        $r1[414] = 8167;

        $r1[415] = 8171;

        $r1[416] = 8179;

        $r1[417] = 8191;

        $r1[418] = 8209;

        $r1[419] = 8219;

        $r1[420] = 8221;

        $r1[421] = 8231;

        $r1[422] = 8233;

        $r1[423] = 8237;

        $r1[424] = 8243;

        $r1[425] = 8263;

        $r1[426] = 8269;

        $r1[427] = 8273;

        $r1[428] = 8287;

        $r1[429] = 8291;

        $r1[430] = 8293;

        $r1[431] = 8297;

        $r1[432] = 8311;

        $r1[433] = 8317;

        $r1[434] = 8329;

        $r1[435] = 8353;

        $r1[436] = 8363;

        $r1[437] = 8369;

        $r1[438] = 8377;

        $r1[439] = 8387;

        $r1[440] = 8389;

        $r1[441] = 8419;

        $r1[442] = 8423;

        $r1[443] = 8429;

        $r1[444] = 8431;

        $r1[445] = 8443;

        $r1[446] = 8447;

        $r1[447] = 8461;

        $r1[448] = 8467;

        $r1[449] = 8501;

        $r1[450] = 8513;

        $r1[451] = 8521;

        $r1[452] = 8527;

        $r1[453] = 8537;

        $r1[454] = 8539;

        $r1[455] = 8543;

        $r1[456] = 8563;

        $r1[457] = 8573;

        $r1[458] = 8581;

        $r1[459] = 8597;

        $r1[460] = 8599;

        $r1[461] = 8609;

        $r1[462] = 8623;

        $r1[463] = 8627;

        $r1[464] = 8629;

        $r1[465] = 8641;

        $r1[466] = 8647;

        $r1[467] = 8663;

        $r1[468] = 8669;

        $r1[469] = 8677;

        $r1[470] = 8681;

        $r1[471] = 8689;

        $r1[472] = 8693;

        $r1[473] = 8699;

        $r1[474] = 8707;

        $r1[475] = 8713;

        $r1[476] = 8719;

        $r1[477] = 8731;

        $r1[478] = 8737;

        $r1[479] = 8741;

        $r1[480] = 8747;

        $r1[481] = 8753;

        $r1[482] = 8761;

        $r1[483] = 8779;

        $r1[484] = 8783;

        $r1[485] = 8803;

        $r1[486] = 8807;

        $r1[487] = 8819;

        $r1[488] = 8821;

        $r1[489] = 8831;

        $r1[490] = 8837;

        $r1[491] = 8839;

        $r1[492] = 8849;

        $r1[493] = 8861;

        $r1[494] = 8863;

        $r1[495] = 8867;

        $r1[496] = 8887;

        $r1[497] = 8893;

        $r1[498] = 8923;

        $r1[499] = 8929;

        $r1[500] = 8933;

        $r1[501] = 8941;

        $r1[502] = 8951;

        $r1[503] = 8963;

        $r1[504] = 8969;

        $r1[505] = 8971;

        $r1[506] = 8999;

        $r1[507] = 9001;

        $r1[508] = 9007;

        $r1[509] = 9011;

        $r1[510] = 9013;

        $r1[511] = 9029;

        $r1[512] = 9041;

        $r1[513] = 9043;

        $r1[514] = 9049;

        $r1[515] = 9059;

        $r1[516] = 9067;

        $r1[517] = 9091;

        $r1[518] = 9103;

        $r1[519] = 9109;

        $r1[520] = 9127;

        $r1[521] = 9133;

        $r1[522] = 9137;

        $r1[523] = 9151;

        $r1[524] = 9157;

        $r1[525] = 9161;

        $r1[526] = 9173;

        $r1[527] = 9181;

        $r1[528] = 9187;

        $r1[529] = 9199;

        $r1[530] = 9203;

        $r1[531] = 9209;

        $r1[532] = 9221;

        $r1[533] = 9227;

        $r1[534] = 9239;

        $r1[535] = 9241;

        $r1[536] = 9257;

        $r1[537] = 9277;

        $r1[538] = 9281;

        $r1[539] = 9283;

        $r1[540] = 9293;

        $r1[541] = 9311;

        $r1[542] = 9319;

        $r1[543] = 9323;

        $r1[544] = 9337;

        $r1[545] = 9341;

        $r1[546] = 9343;

        $r1[547] = 9349;

        $r1[548] = 9371;

        $r1[549] = 9377;

        $r1[550] = 9391;

        $r1[551] = 9397;

        $r1[552] = 9403;

        $r1[553] = 9413;

        $r1[554] = 9419;

        $r1[555] = 9421;

        $r1[556] = 9431;

        $r1[557] = 9433;

        $r1[558] = 9437;

        $r1[559] = 9439;

        $r1[560] = 9461;

        $r1[561] = 9463;

        $r1[562] = 9467;

        $r1[563] = 9473;

        $r1[564] = 9479;

        $r1[565] = 9491;

        $r1[566] = 9497;

        $r1[567] = 9511;

        $r1[568] = 9521;

        $r1[569] = 9533;

        $r1[570] = 9539;

        $r1[571] = 9547;

        $r1[572] = 9551;

        $r1[573] = 9587;

        $r1[574] = 9601;

        $r1[575] = 9613;

        $r1[576] = 9619;

        $r1[577] = 9623;

        $r1[578] = 9629;

        $r1[579] = 9631;

        $r1[580] = 9643;

        $r1[581] = 9649;

        $r1[582] = 9661;

        $r1[583] = 9677;

        $r1[584] = 9679;

        $r1[585] = 9689;

        $r1[586] = 9697;

        $r1[587] = 9719;

        $r1[588] = 9721;

        $r1[589] = 9733;

        $r1[590] = 9739;

        $r1[591] = 9743;

        $r1[592] = 9749;

        $r1[593] = 9767;

        $r1[594] = 9769;

        $r1[595] = 9781;

        $r1[596] = 9787;

        $r1[597] = 9791;

        $r1[598] = 9803;

        $r1[599] = 9811;

        $r1[600] = 9817;

        $r1[601] = 9829;

        $r1[602] = 9833;

        $r1[603] = 9839;

        $r1[604] = 9851;

        $r1[605] = 9857;

        $r1[606] = 9859;

        $r1[607] = 9871;

        $r1[608] = 9883;

        $r1[609] = 9887;

        $r1[610] = 9901;

        $r1[611] = 9907;

        $r1[612] = 9923;

        $r1[613] = 9929;

        $r1[614] = 9931;

        $r1[615] = 9941;

        $r1[616] = 9949;

        $r1[617] = 9967;

        $r1[618] = 9973;

        <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] PRIMES> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.util.List BIGINT_PRIMES> = $r2;

        i0 = 0;

     label1:
        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] PRIMES>;

        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        $r3 = <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.util.List BIGINT_PRIMES>;

        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] PRIMES>;

        $i1 = $r1[i0];

        $l2 = (long) $i1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r1;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1;
        int $i0, $i1;
        java.math.BigInteger[] $r2;
        int[] $r3;
        java.math.BigInteger $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        $r3 = newarray (int)[$i1];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r3;

        $i1 = 0;

     label1:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = $r2[$i1];

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int intValue()>();

        $r3[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(int[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r1;

        return;
    }
    private boolean equalsAbsOne()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, $i1;
        boolean $z0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $z0 = 1;

        $i0 = 1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[$i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = $r1[0];

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i0 != 1 goto label5;

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label4;
    }
    private boolean equalsZero()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream, int, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeModQ(java.io.InputStream,int,int)>($r0, $i0, $i1);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeModQ(byte[],int,int)>($r0, $i0, $i1);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Sves(byte[], int)
    {
        byte[] $r0;
        int $i0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeMod3Sves(byte[],int)>($r0, $i0);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeMod3Tight(java.io.InputStream,int)>($r0, $i0);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(byte[], int)
    {
        byte[] $r0;
        int $i0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeMod3Tight(byte[],int)>($r0, $i0);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mod2ToModq(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r2, r7, $r10;
        int $i0, i1, $i2;
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r1, r3, r5, $r6;
        boolean $z0;
        java.lang.Object $r4;
        int[] $r8, $r9;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: boolean is64BitJVM()>();

        if $z0 == 0 goto label3;

        if $i0 != 2048 goto label3;

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r0);

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r2);

        i1 = 2;

     label1:
        if i1 >= $i0 goto label2;

        i1 = i1 * 2;

        $r4 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: java.lang.Object clone()>();

        r5 = (org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2) $r4;

        $i2 = i1 + -1;

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void mult2And(int)>($i2);

        $r6 = virtualinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 mult(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r3);

        r3 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 mult(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r3);

        $i2 = i1 + -1;

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void subAnd(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2,int)>(r3, $i2);

        r3 = r5;

        goto label1;

     label2:
        r0 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        return r0;

     label3:
        i1 = 2;

     label4:
        if i1 >= $i0 goto label5;

        i1 = i1 * 2;

        r7 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r8 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r9 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r9;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r8, $i2);

        specialinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r8);

        specialinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult2(int)>(i1);

        $r10 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r2, i1);

        $r2 = virtualinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r2, i1);

        virtualinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r2, i1);

        $r2 = r7;

        goto label4;

     label5:
        return $r2;
    }
    private void mult2(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 * 2;

        $r1[i1] = $i2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 % $i0;

        $r1[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1, r3, r4, r6, r7;
        int[] r2, r5, $r8;
        int i0, $i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r9;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r8 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r8;

        if $i1 > 32 goto label04;

        i0 = $i1 * 2;

        i0 = i0 + -1;

        r0 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r8 = newarray (int)[i0];

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r8);

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        $i3 = i2 - $i1;

        $i3 = $i3 + 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

     label02:
        $i4 = $i1 + -1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i4);

        if $i3 > $i4 goto label03;

        $r8 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r8[i2];

        $i5 = r5[$i3];

        $i6 = i2 - $i3;

        $i6 = r2[$i6];

        $i5 = $i5 * $i6;

        $i4 = $i4 + $i5;

        $r8[i2] = $i4;

        $i3 = $i3 + 1;

        goto label02;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        i0 = $i1 / 2;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>(r2, i0);

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r8);

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOfRange(int[],int,int)>(r2, i0, $i1);

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r2);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>(r5, i0);

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r2);

        r7 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r5 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOfRange(int[],int,int)>(r5, i0, $i1);

        specialinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r5);

        $r9 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r9;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r4);

        $r9 = virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        $r1 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r9;

        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r7);

        r3 = specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r6);

        r4 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r7);

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r3);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r4);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i1 = $i1 * 2;

        $i1 = $i1 + -1;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i1);

        $i1 = 0;

     label05:
        r5 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = lengthof r5;

        if $i1 >= i2 goto label06;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = r2[$i1];

        r5[$i1] = i2;

        $i1 = $i1 + 1;

        goto label05;

     label06:
        $i1 = 0;

     label07:
        r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = lengthof r5;

        if $i1 >= i2 goto label08;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = i0 + $i1;

        $i3 = r5[i2];

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = r2[$i1];

        $i3 = $i3 + $i4;

        r5[i2] = $i3;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $i1 = 0;

     label09:
        r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = lengthof r5;

        if $i1 >= i2 goto label11;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = i0 * 2;

        i2 = i2 + $i1;

        $i3 = r5[i2];

        r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = r2[$i1];

        $i3 = $i3 + $i4;

        r5[i2] = $i3;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        return r0;

     label11:
        return $r1;
    }
    private void multShiftSub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int, int, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int $i0, $i1, $i2, i3, $i4, i5, $i6;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i3 = lengthof $r2;

        i5 = $i1;

     label1:
        if i5 >= i3 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i6 = $r3[i5];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = i5 - $i1;

        $i4 = $r3[$i4];

        $i4 = $i4 * $i0;

        $i6 = $i6 - $i4;

        $i6 = $i6 % $i2;

        $r2[i5] = $i6;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
    private void sort(int[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int[] $r1;
        int i0, i1, $i2;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: int[];

        z0 = 1;

     label1:
        if z0 == 0 goto label4;

        z0 = 0;

        i1 = 0;

     label2:
        i0 = lengthof $r1;

        i0 = i0 + -1;

        if i1 == i0 goto label1;

        i0 = $r1[i1];

        $i2 = i1 + 1;

        $i2 = $r1[$i2];

        if i0 <= $i2 goto label3;

        i0 = $r1[i1];

        $i2 = i1 + 1;

        $i2 = $r1[$i2];

        $r1[i1] = $i2;

        $i2 = i1 + 1;

        $r1[$i2] = i0;

        z0 = 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }
    private java.math.BigInteger squareSum()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        java.math.BigInteger r1, $r3;
        int i0, $i1, $i2;
        int[] $r2;
        long $l3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r1 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r2[i0];

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r2[i0];

        $i1 = $i1 * $i2;

        $l3 = (long) $i1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r2;

     label1:
        $i0 = 0;

     label2:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r2[$i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r3[$i0];

        $i1 = $i1 + $i2;

        $r2[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    public void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        return;
    }
    public void center0(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label5;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i3 = neg $i0;

        $i3 = $i3 / 2;

        if $i2 >= $i3 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 + $i0;

        $r1[i1] = $i2;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i3 = $i0 / 2;

        if $i2 <= $i3 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 - $i0;

        $r1[i1] = $i2;

        goto label3;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }
    public long centeredNormSq(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, i2;
        long l3, $l4, $l5;
        java.lang.Object $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = lengthof $r2;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r1;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void shiftGap(int)>($i0);

        $l4 = 0L;

        l3 = 0L;

        $i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = lengthof $r2;

        if $i0 == i2 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = $r2[$i0];

        $l5 = (long) i2;

        $l4 = $l4 + $l5;

        i2 = i2 * i2;

        $l5 = (long) i2;

        l3 = l3 + $l5;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $l5 = $l4 * $l4;

        $l4 = (long) i1;

        $l4 = $l5 / $l4;

        l3 = l3 - $l4;

        return l3;
    }
    public void clear()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        java.lang.Object $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r3);

        return $r1;
    }
    public int count(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, i2, $i3;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = lengthof $r1;

        if i2 == $i3 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r1[i2];

        if $i3 != $i0 goto label2;

        i1 = i1 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }
    int degree()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label1:
        if $i0 <= 0 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[$i0];

        if $i1 != 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $i0;
    }
    public void div(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2, i3, $i4;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = $i0 + 1;

        i1 = i1 / 2;

        i3 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i3 >= $i2 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i3];

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r2[i3];

        if $i4 <= 0 goto label3;

        $i4 = i1;

     label2:
        $i2 = $i4 + $i2;

        $r1[i3] = $i2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i3];

        $i2 = $i2 / $i0;

        $r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label3:
        $i4 = neg i1;

        goto label2;

     label4:
        return;
    }
    public void ensurePositive(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label4;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        if $i2 >= 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 + $i0;

        $r1[i1] = $i2;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int[] $r1, $r3;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) r2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(int[],int[])>($r3, $r1);

        return $z0;

     label1:
        return 0;
    }
    public boolean equalsOne()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        boolean $z0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $z0 = 1;

        i0 = 1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = $r1[0];

        if i0 != 1 goto label5;

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label4;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertF3()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, r2, r3, r4, r6;
        int i0, $i1, i2, $i3, $i4, $i5;
        int[] $r1, $r5;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r1;

        i2 = 0;

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i3 = i0 + 1;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i3);

        $r1 = r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[0] = 1;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i3 = i0 + 1;

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i3);

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i3 = i0 + 1;

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i3);

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = i0 + 1;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r1, $i3);

        r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r1;

        virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(3);

        r0 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i3 = i0 + 1;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i3);

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[0] = -1;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[i0] = 1;

     label01:
        $r1 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r1[0];

        if $i3 != 0 goto label04;

        $i3 = 1;

     label02:
        if $i3 > i0 goto label03;

        $r1 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $i3 + -1;

        $r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r5[$i3];

        $r1[$i4] = $i1;

        $r1 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = i0 + 1;

        $i4 = $i4 - $i3;

        $r5 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = i0 - $i3;

        $i1 = $r5[$i1];

        $r1[$i4] = $i1;

        $i3 = $i3 + 1;

        goto label02;

     label03:
        $r1 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[i0] = 0;

        $r1 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[0] = 0;

        i2 = i2 + 1;

        $z0 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equalsZero()>();

        if $z0 == 0 goto label01;

        return null;

     label04:
        $z0 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equalsAbsOne()>();

        if $z0 == 0 goto label05;

        $r1 = r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r1[i0];

        if $i3 == 0 goto label08;

        return null;

     label05:
        $i3 = virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        $i4 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        if $i3 >= $i4 goto label06;

        r6 = r4;

        r4 = r0;

        r0 = r6;

        r6 = r2;

        r2 = r3;

        r3 = r6;

     label06:
        $r1 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r1[0];

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r1[0];

        if $i3 != $i4 goto label07;

        virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r0, 3);

        virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r3, 3);

        goto label01;

     label07:
        virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r0, 3);

        virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r3, 3);

        goto label01;

     label08:
        r0 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i0);

        i2 = i2 % i0;

        $i3 = i0 + -1;

     label09:
        if $i3 < 0 goto label11;

        $i4 = $i3 - i2;

        if $i4 >= 0 goto label10;

        $i4 = $i4 + i0;

     label10:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r5[0];

        $r5 = r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i5 = $r5[$i3];

        $i1 = $i1 * $i5;

        $r1[$i4] = $i1;

        $i3 = $i3 + -1;

        goto label09;

     label11:
        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void ensurePositive(int)>(3);

        return r0;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, r1, r3, r4, r5, r7;
        int $i0, i1, $i2, i3, $i4, $i5;
        int[] $r2, $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = lengthof $r2;

        i3 = 0;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i4 = i1 + 1;

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i4);

        $r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[0] = 1;

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i4 = i1 + 1;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i4);

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i4 = i1 + 1;

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i4);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = i1 + 1;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, $i4);

        r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r2;

        virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(2);

        r5 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i4 = i1 + 1;

        specialinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i4);

        $r2 = r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[0] = 1;

        $r2 = r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[i1] = 1;

     label01:
        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r2[0];

        if $i4 != 0 goto label04;

        $i4 = 1;

     label02:
        if $i4 > i1 goto label03;

        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i5 = $i4 + -1;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r6[$i4];

        $r2[$i5] = $i2;

        $r2 = r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i5 = i1 + 1;

        $i5 = $i5 - $i4;

        $r6 = r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = i1 - $i4;

        $i2 = $r6[$i2];

        $r2[$i5] = $i2;

        $i4 = $i4 + 1;

        goto label02;

     label03:
        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[i1] = 0;

        $r2 = r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[0] = 0;

        i3 = i3 + 1;

        $z0 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equalsZero()>();

        if $z0 == 0 goto label01;

        return null;

     label04:
        $z0 = virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equalsOne()>();

        if $z0 == 0 goto label05;

        $r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r2[i1];

        if $i4 == 0 goto label07;

        return null;

     label05:
        $i4 = virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        $i5 = virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        if $i4 >= $i5 goto label06;

        r7 = r4;

        r4 = r5;

        r5 = r7;

        r7 = r3;

        r3 = r1;

        r1 = r7;

     label06:
        virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r5, 2);

        virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r1, 2);

        goto label01;

     label07:
        r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i1);

        i3 = i3 % i1;

        $i4 = i1 + -1;

     label08:
        if $i4 < 0 goto label10;

        $i5 = $i4 - i3;

        if $i5 >= 0 goto label09;

        $i5 = $i5 + i1;

     label09:
        $r2 = r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r6 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r6[$i4];

        $r2[$i5] = $i2;

        $i4 = $i4 + -1;

        goto label08;

     label10:
        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mod2ToModq(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r1, $i0);

        return r0;
    }
    public void mod(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 % $i0;

        $r1[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void mod3()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        $i1 = $i1 % 3;

        $r1[i0] = $i1;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        if $i1 <= 1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        $i1 = $i1 + -3;

        $r1[i0] = $i1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        if $i1 >= -1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r1[i0];

        $i1 = $i1 + 3;

        $r1[i0] = $i1;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
    void modCenter(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label5;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i3 = $i0 / 2;

        if $i2 >= $i3 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 + $i0;

        $r1[i1] = $i2;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i3 = $i0 / 2;

        if $i2 < $i3 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 - $i0;

        $r1[i1] = $i2;

        goto label3;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }
    public void modPositive(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void ensurePositive(int)>($i0);

        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r0);

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        return $r1;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r2, $r4;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 == i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r3;

     label1:
        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 <= i0 goto label4;

        $i1 = i0;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $i1 - i0;

        $i3 = $r2[$i2];

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = $r4[$i1];

        $i3 = $i3 + $i4;

        $r2[$i2] = $i3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r2;

     label4:
        return r0;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        r0 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        return r0;
    }
    public void mult(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 * $i0;

        $r1[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void mult3(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 * 3;

        $r1[i1] = $i2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 % $i0;

        $r1[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.ModularResultant resultant(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, r1, r4, r5, r6;
        int $i0, i1, $i2, i3, i4, $i5, $i6;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant $r7;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r8;
        long $l7;
        java.math.BigInteger $r9, $r10;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = lengthof $r3;

        i1 = i1 + 1;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, i1);

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        i1 = lengthof $r2;

        r0 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i1);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[0] = -1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = i1 + -1;

        $r2[$i2] = 1;

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r2);

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i1);

        r5 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i1);

        $r2 = r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2[0] = 1;

        i3 = i1 + -1;

        i1 = virtualinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        i4 = i3;

        $i2 = 1;

     label1:
        if i1 <= 0 goto label3;

        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i5 = $r2[i1];

        $i5 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int invert(int,int)>($i5, $i0);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i6 = $r2[i3];

        $i5 = $i6 * $i5;

        $i5 = $i5 % $i0;

        $i6 = i3 - i1;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void multShiftSub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int,int,int)>(r4, $i5, $i6, $i0);

        i3 = i3 - i1;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void multShiftSub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int,int,int)>(r5, $i5, i3, $i0);

        $i5 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        i3 = $i5;

        if $i5 >= i1 goto label1;

        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i3 = $r2[i1];

        $i6 = i4 - $i5;

        i3 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int pow(int,int,int)>(i3, $i6, $i0);

        $i2 = $i2 * i3;

        $i2 = $i2 % $i0;

        i4 = i4 % 2;

        if i4 != 1 goto label2;

        i4 = i1 % 2;

        if i4 != 1 goto label2;

        $i2 = neg $i2;

        $i2 = $i2 % $i0;

     label2:
        r6 = r0;

        r0 = r4;

        r4 = r6;

        i3 = i1;

        r6 = r1;

        r1 = r5;

        r5 = r6;

        i4 = i1;

        i1 = $i5;

        goto label1;

     label3:
        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = $r2[0];

        i1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int pow(int,int,int)>(i1, i3, $i0);

        i1 = $i2 * i1;

        i1 = i1 % $i0;

        $r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r2[0];

        $i2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int invert(int,int)>($i2, $i0);

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult(int)>($i2);

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult(int)>(i1);

        virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        $r2 = r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3 = r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r3;

        $i2 = $i2 + -1;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, $i2);

        r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r2;

        $r7 = new org.spongycastle.pqc.math.ntru.polynomial.ModularResultant;

        $r8 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r5);

        $l7 = (long) i1;

        $r9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);

        $l7 = (long) $i0;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);

        specialinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger,java.math.BigInteger)>($r8, $r9, $r10);

        return $r7;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.Resultant resultant()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, i1, $i2;
        java.math.BigInteger r1, r3, r5, r6, $r10, $r13, $r14, $r15;
        java.util.LinkedList r2;
        int[] $r4;
        java.util.List $r7;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant $r11, r16;
        org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean $r12;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r17;
        java.math.BigInteger[] $r18;
        org.spongycastle.pqc.math.ntru.polynomial.Resultant $r19;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r4;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        r5 = null;

        r1 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ONE>;

        r6 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ONE>;

        i1 = 1;

        $r7 = <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.util.List BIGINT_PRIMES>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.math.BigInteger) $r9;

     label02:
        $i2 = virtualinvoke r5.<java.math.BigInteger: int intValue()>();

        $r11 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant resultant(int)>($i2);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r11);

        $r10 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r12 = staticinvoke <org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean calculate(java.math.BigInteger,java.math.BigInteger)>(r5, r1);

        r3 = r6;

        $r13 = $r12.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger x>;

        $r13 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        $r13 = $r11.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger res>;

        $r14 = $r12.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger y>;

        r1 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        r1 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r1);

        $r13 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r10);

        r6 = $r13;

        r1 = $r10;

        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $r14 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r14);

        $r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i2 = virtualinvoke $r13.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r14);

        if $i2 <= 0 goto label06;

        r6 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

     label03:
        $z0 = virtualinvoke r6.<java.math.BigInteger: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label07;

        i1 = i1 + 1;

        if i1 < 3 goto label01;

     label04:
        i1 = virtualinvoke r2.<java.util.LinkedList: int size()>();

        if i1 <= 1 goto label08;

        $r9 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r11 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r9;

        $r9 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r16 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r9;

        $r11 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant combineRho(org.spongycastle.pqc.math.ntru.polynomial.ModularResultant,org.spongycastle.pqc.math.ntru.polynomial.ModularResultant)>($r11, r16);

        virtualinvoke r2.<java.util.LinkedList: void addLast(java.lang.Object)>($r11);

        goto label04;

     label05:
        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>();

        goto label02;

     label06:
        $i2 = virtualinvoke $r13.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i2 >= 0 goto label03;

        r6 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        goto label03;

     label07:
        i1 = 1;

        goto label01;

     label08:
        $r9 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r11 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r9;

        $r17 = $r11.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        r3 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3);

        r5 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        i1 = virtualinvoke r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);

        if i1 <= 0 goto label09;

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

     label09:
        i1 = virtualinvoke r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r5);

        if i1 >= 0 goto label10;

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

     label10:
        i1 = 0;

     label11:
        if i1 >= i0 goto label14;

        $r18 = $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r1 = $r18[i1];

        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);

        if $i2 <= 0 goto label12;

        $r18 = $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r13 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        $r18[i1] = $r13;

     label12:
        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r5);

        if $i2 >= 0 goto label13;

        $r18 = $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        $r18[i1] = r1;

     label13:
        i1 = i1 + 1;

        goto label11;

     label14:
        $r19 = new org.spongycastle.pqc.math.ntru.polynomial.Resultant;

        specialinvoke $r19.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger)>($r17, r6);

        return $r19;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.Resultant resultantMultiThread()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1, $i2;
        java.math.BigInteger r1, $r5, $r6, r7, r17, $r20;
        java.lang.Exception r2;
        java.util.concurrent.LinkedBlockingQueue r3;
        int[] $r4;
        java.util.List $r8;
        java.util.Iterator $r9;
        java.lang.Runtime $r10;
        java.util.concurrent.ExecutorService $r11;
        boolean $z0;
        java.lang.Object $r12;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask $r13;
        java.util.concurrent.Future $r14, r16;
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant r15, $r22, $r23;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r18;
        java.math.BigInteger[] $r19;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$CombineTask $r21;
        java.lang.IllegalStateException $r24;
        java.lang.String $r25;
        org.spongycastle.pqc.math.ntru.polynomial.Resultant $r26;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r4;

        $r5 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.math.BigInteger squareSum()>();

        $i1 = i0 + 1;

        $i1 = $i1 / 2;

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1);

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $i1 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int degree()>();

        $i1 = $i1 + 1;

        $i1 = $i1 / 2;

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000L);

        $r5 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ONE>;

        r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r8 = <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.util.List BIGINT_PRIMES>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r10.<java.lang.Runtime: int availableProcessors()>();

        $r11 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>($i1);

     label01:
        $i1 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i1 >= 0 goto label04;

        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.math.BigInteger) $r12;

     label02:
        $r13 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask;

        $i1 = virtualinvoke r7.<java.math.BigInteger: int intValue()>();

        specialinvoke $r13.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1)>(r0, $i1, null);

        $r14 = interfaceinvoke $r11.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r13);

        virtualinvoke r3.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>($r14);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        goto label01;

     label03:
        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>();

        goto label02;

     label04:
        r15 = null;

     label05:
        $z0 = virtualinvoke r3.<java.util.concurrent.LinkedBlockingQueue: boolean isEmpty()>();

        if $z0 != 0 goto label09;

     label06:
        $r12 = virtualinvoke r3.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();

        $r14 = (java.util.concurrent.Future) $r12;

        $r12 = virtualinvoke r3.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>();

        r16 = (java.util.concurrent.Future) $r12;

     label07:
        if r16 != null goto label15;

     label08:
        $r12 = interfaceinvoke $r14.<java.util.concurrent.Future: java.lang.Object get()>();

        r15 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r12;

     label09:
        interfaceinvoke $r11.<java.util.concurrent.ExecutorService: void shutdown()>();

        r1 = r15.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger res>;

        r17 = r1;

        $r18 = r15.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r6);

        r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i1 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i1 <= 0 goto label10;

        r17 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

     label10:
        $i1 = virtualinvoke r17.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r7);

        if $i1 >= 0 goto label11;

        r17 = virtualinvoke r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

     label11:
        $i1 = 0;

     label12:
        if $i1 >= i0 goto label19;

        $r19 = $r18.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r1 = $r19[$i1];

        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i2 <= 0 goto label13;

        $r19 = $r18.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r20 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r19[$i1] = $r20;

     label13:
        $i2 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r7);

        if $i2 >= 0 goto label14;

        $r19 = $r18.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $r19[$i1] = r1;

     label14:
        $i1 = $i1 + 1;

        goto label12;

     label15:
        $r21 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$CombineTask;

     label16:
        $r12 = interfaceinvoke $r14.<java.util.concurrent.Future: java.lang.Object get()>();

        $r22 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r12;

        $r12 = interfaceinvoke r16.<java.util.concurrent.Future: java.lang.Object get()>();

        $r23 = (org.spongycastle.pqc.math.ntru.polynomial.ModularResultant) $r12;

        specialinvoke $r21.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$CombineTask: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.ModularResultant,org.spongycastle.pqc.math.ntru.polynomial.ModularResultant,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1)>(r0, $r22, $r23, null);

        $r14 = interfaceinvoke $r11.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r21);

        virtualinvoke r3.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>($r14);

     label17:
        goto label05;

     label18:
        r2 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        $r25 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label19:
        $r26 = new org.spongycastle.pqc.math.ntru.polynomial.Resultant;

        specialinvoke $r26.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger)>($r18, r17);

        return $r26;

        catch java.lang.Exception from label06 to label07 with label18;
        catch java.lang.Exception from label08 to label09 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }
    public void rotate1()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1, $i2;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r2;

        i0 = i0 + -1;

        i0 = $r1[i0];

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        if $i2 <= 0 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $i2 + -1;

        $i1 = $r2[$i1];

        $r1[$i2] = $i1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1[0] = i0;

        return;
    }
    void shiftGap(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, i2, i3, i4, i5;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modCenter(int)>($i0);

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sort(int[])>($r1);

        i4 = 0;

        i5 = 0;

        i3 = 0;

     label1:
        i2 = lengthof $r1;

        i2 = i2 + -1;

        if i3 >= i2 goto label3;

        i2 = i3 + 1;

        i2 = $r1[i2];

        i1 = $r1[i3];

        i2 = i2 - i1;

        if i2 <= i4 goto label2;

        i4 = i2;

        i5 = $r1[i3];

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        i3 = $r1[0];

        i2 = lengthof $r1;

        i2 = i2 + -1;

        i2 = $r1[i2];

        i1 = $i0 - i2;

        i1 = i1 + i3;

        if i1 <= i4 goto label5;

        $i0 = i2 + i3;

        $i0 = $i0 / 2;

     label4:
        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(int)>($i0);

        return;

     label5:
        i4 = i4 / 2;

        i5 = i4 + i5;

        $i0 = $i0 / 2;

        $i0 = i5 + $i0;

        goto label4;
    }
    void sub(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        $i2 = $i2 - $i0;

        $r1[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs> = $r2;

     label1:
        $i0 = 0;

     label2:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r2[$i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r3[$i0];

        $i1 = $i1 - $i2;

        $r2[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    public void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        return;
    }
    public int sumCoeffs()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        i0 = 0;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = $r1[i1];

        i0 = i0 + $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i0;
    }
    public byte[] toBinary(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int $i0;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: byte[] encodeModQ(int[],int)>($r2, $i0);

        return $r1;
    }
    public byte[] toBinary3Sves()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: byte[] encodeMod3Sves(int[])>($r2);

        return $r1;
    }
    public byte[] toBinary3Tight()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        int i0, $i1;
        java.math.BigInteger r1, $r3;
        int[] $r2;
        long $l2;
        byte[] $r4, r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r1 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r2;

        i0 = i0 + -1;

     label1:
        if i0 < 0 goto label2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r2[i0];

        $i1 = $i1 + 1;

        $l2 = (long) $i1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        i0 = i0 + -1;

        goto label1;

     label2:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = lengthof $r2;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        $r4 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        r5 = $r4;

        $i1 = lengthof $r4;

        if $i1 >= i0 goto label3;

        r5 = newarray (byte)[i0];

        $i1 = lengthof $r4;

        $i1 = i0 - $i1;

        i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, $i1, i0);

        return r5;

     label3:
        $i1 = lengthof $r4;

        if $i1 <= i0 goto label4;

        i0 = lengthof $r4;

        r5 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r4, 1, i0);

     label4:
        return r5;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()
    {
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r0;
        java.lang.Object $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r1;

        return r0;
    }
