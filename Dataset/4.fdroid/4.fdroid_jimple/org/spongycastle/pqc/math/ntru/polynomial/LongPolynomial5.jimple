org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 extends java.lang.Object
private long[] coeffs
private int numCoeffs
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;
        int $i0, i1, i2, $i3;
        long[] $r3;
        long $l4, $l5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r2;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        $i0 = $i0 + 4;

        $i0 = $i0 / 5;

        $r3 = newarray (long)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs> = $r3;

        $i0 = 0;

        i1 = 0;

        i2 = 0;

     label1:
        $i3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        if i2 >= $i3 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $l4 = $r3[$i0];

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r2[i2];

        $l5 = (long) $i3;

        $l5 = $l5 << i1;

        $l4 = $l4 | $l5;

        $r3[$i0] = $l4;

        i1 = i1 + 12;

        if i1 < 60 goto label2;

        i1 = 0;

        $i0 = $i0 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }
    private void <init>(long[], int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 r0;
        long[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        $r1 := @parameter0: long[];

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs> = $r1;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs> = $i0;

        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 mult(org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 r0, $r8;
        org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial $r1;
        int i0, i2, i3, $i4, $i5, i7;
        long l1, $l6, $l8, l9;
        long[] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        long[][] r6;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        i2 = lengthof $r2;

        i3 = interfaceinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial: int size()>();

        i3 = i3 + 4;

        i3 = i3 / 5;

        i2 = i2 + i3;

        i2 = i2 + -1;

        $r3 = newarray (int)[2];

        $r3[0] = 5;

        $r3[1] = i2;

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (long[][]) $r5;

        $r3 = interfaceinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial: int[] getOnes()>();

        i2 = 0;

     label01:
        i3 = lengthof $r3;

        if i2 == i3 goto label04;

        i0 = $r3[i2];

        i3 = i0 / 5;

        $i4 = i3 * 5;

        i0 = i0 - $i4;

        $i4 = 0;

     label02:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $i5 = lengthof $r2;

        if $i4 >= $i5 goto label03;

        $r2 = r6[i0];

        $r7 = r6[i0];

        l1 = $r7[i3];

        $r7 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $l6 = $r7[$i4];

        l1 = l1 + $l6;

        l1 = l1 & 576319980446939135L;

        $r2[i3] = l1;

        i3 = i3 + 1;

        $i4 = $i4 + 1;

        goto label02;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        $r3 = interfaceinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial: int[] getNegOnes()>();

        i2 = 0;

     label05:
        i3 = lengthof $r3;

        if i2 == i3 goto label08;

        i0 = $r3[i2];

        i3 = i0 / 5;

        $i4 = i3 * 5;

        i0 = i0 - $i4;

        $i4 = 0;

     label06:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $i5 = lengthof $r2;

        if $i4 >= $i5 goto label07;

        $r2 = r6[i0];

        $r7 = r6[i0];

        l1 = $r7[i3];

        l1 = 576601524159907840L + l1;

        $r7 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $l6 = $r7[$i4];

        l1 = l1 - $l6;

        l1 = l1 & 576319980446939135L;

        $r2[i3] = l1;

        i3 = i3 + 1;

        $i4 = $i4 + 1;

        goto label06;

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        $r2 = r6[0];

        $r7 = r6[0];

        i2 = lengthof $r7;

        i2 = i2 + 1;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>($r2, i2);

        i0 = 1;

     label09:
        if i0 > 4 goto label12;

        $i4 = i0 * 12;

        i3 = 60 - $i4;

        l1 = 1L << i3;

        l1 = l1 - 1L;

        $r7 = r6[i0];

        $i5 = lengthof $r7;

        i7 = 0;

     label10:
        if i7 >= $i5 goto label11;

        $r7 = r6[i0];

        $l6 = $r7[i7];

        $l6 = $l6 >> i3;

        $r7 = r6[i0];

        $l8 = $r7[i7];

        l9 = $l8 & l1;

        $l8 = $r2[i7];

        l9 = l9 << $i4;

        $l8 = $l8 + l9;

        $l8 = $l8 & 576319980446939135L;

        $r2[i7] = $l8;

        i2 = i7 + 1;

        $l8 = $r2[i2];

        $l6 = $l8 + $l6;

        $l6 = $l6 & 576319980446939135L;

        $r2[i2] = $l6;

        i7 = i7 + 1;

        goto label10;

     label11:
        i0 = i0 + 1;

        goto label09;

     label12:
        i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        i2 = i2 % 5;

        i2 = i2 * 12;

        $r7 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        i3 = lengthof $r7;

        i3 = i3 + -1;

     label13:
        i0 = lengthof $r2;

        if i3 >= i0 goto label19;

        $r7 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        i0 = lengthof $r7;

        i0 = i0 + -1;

        if i3 != i0 goto label18;

        i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        if i0 != 5 goto label17;

        l1 = 0L;

     label14:
        $i4 = 0;

     label15:
        i0 = $i4 / 5;

        $i5 = i0 * 5;

        $i4 = $i4 - $i5;

        $i5 = $i4 * 12;

        $l6 = l1 << $i5;

        $i4 = 5 - $i4;

        $i4 = $i4 * 12;

        l1 = l1 >> $i4;

        $l8 = $r2[i0];

        $l6 = $l8 + $l6;

        $l6 = $l6 & 576319980446939135L;

        $r2[i0] = $l6;

        i0 = i0 + 1;

        $r7 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $i4 = lengthof $r7;

        if i0 >= $i4 goto label16;

        $l6 = $r2[i0];

        l1 = $l6 + l1;

        l1 = l1 & 576319980446939135L;

        $r2[i0] = l1;

     label16:
        i3 = i3 + 1;

        goto label13;

     label17:
        l1 = $r2[i3];

        l1 = l1 >> i2;

        goto label14;

     label18:
        l1 = $r2[i3];

        i0 = i3 * 5;

        $i4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        $i4 = i0 - $i4;

        goto label15;

     label19:
        $r8 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        specialinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: void <init>(long[],int)>($r2, i2);

        return $r8;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 r0;
        int[] r1;
        int $i0, i1, i2, $i3;
        long[] $r2;
        long $l4;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        r1 = newarray (int)[$i0];

        $i0 = 0;

        i1 = 0;

        i2 = 0;

     label1:
        $i3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: int numCoeffs>;

        if i2 >= $i3 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: long[] coeffs>;

        $l4 = $r2[$i0];

        $l4 = $l4 >> i1;

        $l4 = $l4 & 2047L;

        $i3 = (int) $l4;

        r1[i2] = $i3;

        i1 = i1 + 12;

        if i1 < 60 goto label2;

        i1 = 0;

        $i0 = $i0 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r1);

        return $r3;
    }
