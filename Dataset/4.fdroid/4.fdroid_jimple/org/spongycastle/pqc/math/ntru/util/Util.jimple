org.spongycastle.pqc.math.ntru.util.Util extends java.lang.Object
private static volatile boolean IS_64_BITNESS_KNOWN
private static volatile boolean IS_64_BIT_JVM
    public void <init>()
    {
        org.spongycastle.pqc.math.ntru.util.Util r0;

        r0 := @this: org.spongycastle.pqc.math.ntru.util.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial generateRandomTernary(int, int, int, boolean, java.security.SecureRandom)
    {
        int $i0, $i1, $i2;
        boolean $z0;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r0 := @parameter4: java.security.SecureRandom;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>($i0, $i1, $i2, $r0);

        return $r1;

     label1:
        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>($i0, $i1, $i2, $r0);

        return $r2;
    }
    public static int[] generateRandomTernary(int, int, int, java.security.SecureRandom)
    {
        int $i0, $i1, $i2, i3;
        java.security.SecureRandom $r0;
        int[] r1;
        java.util.ArrayList r2;
        java.lang.Integer $r3, $r4, $r5;
        java.lang.Object $r6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.security.SecureRandom;

        $r3 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(1);

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(-1);

        $r5 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(0);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= $i1 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i2 goto label4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 >= $i0 goto label5;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label4;

     label5:
        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(r2, $r0);

        r1 = newarray (int)[$i0];

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r1[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return r1;
    }
    public static int invert(int, int)
    {
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.euclid.IntEuclidean $r0;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = $i1 % $i0;

        if $i1 >= 0 goto label1;

        $i1 = $i1 + $i0;

     label1:
        $r0 = staticinvoke <org.spongycastle.pqc.math.ntru.euclid.IntEuclidean: org.spongycastle.pqc.math.ntru.euclid.IntEuclidean calculate(int,int)>($i1, $i0);

        $i1 = $r0.<org.spongycastle.pqc.math.ntru.euclid.IntEuclidean: int x>;

        return $i1;
    }
    public static boolean is64BitJVM()
    {
        boolean $z0;
        java.lang.String $r0, $r1, $r2;

        $z0 = <org.spongycastle.pqc.math.ntru.util.Util: boolean IS_64_BITNESS_KNOWN>;

        if $z0 != 0 goto label3;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sun.arch.data.model");

        $r2 = "amd64";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r2 = "x86_64";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r2 = "ppc64";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r0 = "64";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

     label1:
        $z0 = 1;

     label2:
        <org.spongycastle.pqc.math.ntru.util.Util: boolean IS_64_BIT_JVM> = $z0;

        <org.spongycastle.pqc.math.ntru.util.Util: boolean IS_64_BITNESS_KNOWN> = 1;

     label3:
        $z0 = <org.spongycastle.pqc.math.ntru.util.Util: boolean IS_64_BIT_JVM>;

        return $z0;

     label4:
        $z0 = 0;

        goto label2;
    }
    public static int pow(int, int, int)
    {
        int $i0, $i1, $i2, $i3, i4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = 1;

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $i3 = $i3 * $i0;

        $i3 = $i3 % $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return $i3;
    }
    public static long pow(long, int, long)
    {
        long $l0, $l2, $l3;
        int $i1, i4;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $l3 = 1L;

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $l3 = $l3 * $l0;

        $l3 = $l3 % $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return $l3;
    }
    public static byte[] readFullLength(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        byte[] r1;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        r1 = newarray (byte)[$i0];

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r1);

        $i1 = lengthof r1;

        if $i0 == $i1 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Not enough bytes to read.");

        throw $r2;

     label1:
        return r1;
    }
