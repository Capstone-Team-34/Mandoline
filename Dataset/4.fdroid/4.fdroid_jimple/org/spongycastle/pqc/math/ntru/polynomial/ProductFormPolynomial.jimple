org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial extends java.lang.Object implements org.spongycastle.pqc.math.ntru.polynomial.Polynomial
private org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1
private org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2
private org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial, org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial, org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1, $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1> = $r1;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2> = $r2;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3> = $r3;

        return;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream, int, int, int, int, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r1;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r2, $r3, $r4;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream,int,int,int)>($r0, $i0, $i1, $i1);

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream,int,int,int)>($r0, $i0, $i2, $i2);

        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream,int,int,int)>($r0, $i0, $i3, $i4);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial)>($r2, $r3, $r4);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(byte[], int, int, int, int, int) throws java.io.IOException
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r1;
        java.io.ByteArrayInputStream $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream,int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int, int, int, int, int, java.security.SecureRandom)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r1;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r2, $r3, $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r0 := @parameter5: java.security.SecureRandom;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>($i0, $i1, $i1, $r0);

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>($i0, $i2, $i2, $r0);

        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>($i0, $i3, $i4, $r0);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial)>($r2, $r3, $r4);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r5, $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial) $r1;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        if $r5 != null goto label4;

        $r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        if $r5 == null goto label5;

        return 0;

     label4:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        if $r5 != null goto label6;

        $r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        if $r5 == null goto label7;

        return 0;

     label6:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        if $r5 != null goto label8;

        $r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        if $r5 == null goto label9;

        return 0;

     label8:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $i0 = 0;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        if $r1 != null goto label4;

        $i1 = 0;

     label1:
        $i1 = $i1 + 31;

        $i1 = $i1 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        if $r1 != null goto label5;

        $i2 = 0;

     label2:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        if $r1 != null goto label6;

     label3:
        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $i1 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int hashCode()>();

        goto label1;

     label5:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $i2 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int hashCode()>();

        goto label2;

     label6:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int hashCode()>();

        goto label3;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r3);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        return $r3;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        return $r3;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        return $r1;
    }
    public byte[] toBinary()
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1;
        byte[] $r2, $r3, $r4, $r5;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: byte[] toBinary()>();

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: byte[] toBinary()>();

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $r4 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: byte[] toBinary()>();

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r4;

        $i0 = $i0 + $i1;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i0);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, $i0, $i1);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, $i0, $i1);

        return $r5;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()
    {
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1, $r2;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3>;

        $r4 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r4);

        return $r3;
    }
