org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial extends org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial implements org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial
    void <init>(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i0);

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void checkTernarity()>();

        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(int[])>($r2);

        return;
    }
    public void <init>(int[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r1 := @parameter0: int[];

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r1);

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void checkTernarity()>();

        return;
    }
    private void checkTernarity()
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int i0, i1;
        int[] $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        i1 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i0 = lengthof $r1;

        if i1 == i0 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i0 = $r1[i1];

        if i0 < -1 goto label2;

        if i0 <= 1 goto label3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal value: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be one of {-1, 0, 1}");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int, int, int, java.security.SecureRandom)
    {
        int $i0, $i1, $i2;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.security.SecureRandom;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int[] generateRandomTernary(int,int,int,java.security.SecureRandom)>($i0, $i1, $i2, $r0);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int, java.security.SecureRandom)
    {
        int $i0, $i1, i2;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.security.SecureRandom;

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(int)>($i0);

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r2 = r1.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        $i1 = virtualinvoke $r0.<java.security.SecureRandom: int nextInt(int)>(3);

        $i1 = $i1 + -1;

        $r2[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public int[] getNegOnes()
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int i0, i1, i2, i3;
        int[] r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i0 = lengthof r1;

        r1 = newarray (int)[i0];

        i2 = 0;

        i3 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i1 = $r2[i2];

        if i1 != -1 goto label4;

        i1 = i3 + 1;

        r1[i3] = i2;

     label2:
        i2 = i2 + 1;

        i3 = i1;

        goto label1;

     label3:
        r1 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>(r1, i3);

        return r1;

     label4:
        i1 = i3;

        goto label2;
    }
    public int[] getOnes()
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int i0, i1, i2, i3;
        int[] r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i0 = lengthof r1;

        r1 = newarray (int)[i0];

        i2 = 0;

        i3 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        i1 = $r2[i2];

        if i1 != 1 goto label4;

        i1 = i3 + 1;

        r1[i3] = i2;

     label2:
        i2 = i2 + 1;

        i3 = i1;

        goto label1;

     label3:
        r1 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>(r1, i3);

        return r1;

     label4:
        i1 = i3;

        goto label2;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int $i0;
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 r2;
        java.lang.Object $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        if $i0 != 2048 goto label1;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        $r1 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r3;

        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(2048);

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        r2 = virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5 mult(org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial)>(r0);

        $r1 = virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial5: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        return $r1;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r1, $i0);

        return $r1;
    }
    public int size()
    {
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: int[] coeffs>;

        $i0 = lengthof $r1;

        return $i0;
    }
