org.spongycastle.pqc.math.ntru.util.ArrayEncoder extends java.lang.Object
private static final int[] BIT1_TABLE
private static final int[] BIT2_TABLE
private static final int[] BIT3_TABLE
private static final int[] COEFF1_TABLE
private static final int[] COEFF2_TABLE
    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[8];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 1;

        $r0[4] = 1;

        $r0[5] = 1;

        $r0[6] = -1;

        $r0[7] = -1;

        <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] COEFF1_TABLE> = $r0;

        $r0 = newarray (int)[8];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = -1;

        $r0[3] = 0;

        $r0[4] = 1;

        $r0[5] = -1;

        $r0[6] = 0;

        $r0[7] = 1;

        <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] COEFF2_TABLE> = $r0;

        $r0 = newarray (int)[9];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 1;

        $r0[7] = 0;

        $r0[8] = 1;

        <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT1_TABLE> = $r0;

        $r0 = newarray (int)[9];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 1;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 1;

        $r0[8] = 0;

        <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT2_TABLE> = $r0;

        $r0 = newarray (int)[9];

        $r0[0] = 1;

        $r0[1] = 0;

        $r0[2] = 1;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 1;

        $r0[6] = 1;

        $r0[7] = 1;

        $r0[8] = 0;

        <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT3_TABLE> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.pqc.math.ntru.util.ArrayEncoder r0;

        r0 := @this: org.spongycastle.pqc.math.ntru.util.ArrayEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int[] decodeMod3Sves(byte[], int)
    {
        byte[] $r0;
        int $i0, i1, i2, $i3, i4, i5;
        int[] r1, $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        r1 = newarray (int)[$i0];

        i4 = 0;

        i5 = 0;

     label1:
        i1 = lengthof $r0;

        i1 = i1 * 8;

        if i5 >= i1 goto label3;

        $i3 = i5 + 1;

        i2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int getBit(byte[],int)>($r0, i5);

        i1 = $i3 + 1;

        $i3 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int getBit(byte[],int)>($r0, $i3);

        i5 = i1 + 1;

        i1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int getBit(byte[],int)>($r0, i1);

        i2 = i2 * 4;

        $i3 = $i3 * 2;

        i2 = i2 + $i3;

        i2 = i2 + i1;

        i1 = i4 + 1;

        $r2 = <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] COEFF1_TABLE>;

        $i3 = $r2[i2];

        r1[i4] = $i3;

        i4 = i1 + 1;

        $r2 = <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] COEFF2_TABLE>;

        i2 = $r2[i2];

        r1[i1] = i2;

        i1 = $i0 + -2;

        if i4 <= i1 goto label2;

        return r1;

     label2:
        goto label1;

     label3:
        return r1;
    }
    public static int[] decodeMod3Tight(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, i1;
        double $d0, $d1;
        byte[] $r1;
        int[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(3.0);

        $d0 = $d0 * $d1;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d0 = $d0 / $d1;

        $d0 = $d0 / 8.0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i1 = (int) $d0;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: byte[] readFullLength(java.io.InputStream,int)>($r0, i1);

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeMod3Tight(byte[],int)>($r1, $i0);

        return $r2;
    }
    public static int[] decodeMod3Tight(byte[], int)
    {
        byte[] $r0;
        int $i0, i1, $i2;
        int[] r1;
        java.math.BigInteger r2, $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        r2 = new java.math.BigInteger;

        specialinvoke r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        r1 = newarray (int)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        $r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $i2 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        $i2 = $i2 + -1;

        r1[i1] = $i2;

        $i2 = r1[i1];

        if $i2 <= 1 goto label2;

        $i2 = r1[i1];

        $i2 = $i2 + -3;

        r1[i1] = $i2;

     label2:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }
    public static int[] decodeModQ(java.io.InputStream, int, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, i2;
        byte[] $r1;
        int[] $r2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1);

        i2 = 31 - i2;

        i2 = $i0 * i2;

        i2 = i2 + 7;

        i2 = i2 / 8;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: byte[] readFullLength(java.io.InputStream,int)>($r0, i2);

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeModQ(byte[],int,int)>($r1, $i0, $i1);

        return $r2;
    }
    public static int[] decodeModQ(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, i2, i3, $i4, $i5, $i6;
        int[] r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = newarray (int)[$i0];

        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1);

        $i1 = 31 - $i1;

        $i0 = $i0 * $i1;

        i2 = 0;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label3;

        if i3 <= 0 goto label2;

        $i4 = i3 % $i1;

        if $i4 != 0 goto label2;

        i2 = i2 + 1;

     label2:
        $i5 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int getBit(byte[],int)>($r0, i3);

        $i4 = r1[i2];

        $i6 = i3 % $i1;

        $i5 = $i5 << $i6;

        $i4 = $i4 + $i5;

        r1[i2] = $i4;

        i3 = i3 + 1;

        goto label1;

     label3:
        return r1;
    }
    public static byte[] encodeMod3Sves(int[])
    {
        int[] $r0, r1, $r4;
        int i0, i1, i2, i3, i4;
        byte[] r2;
        java.lang.IllegalStateException $r3;
        byte $b5;

        $r0 := @parameter0: int[];

        i2 = lengthof $r0;

        i2 = i2 * 3;

        i2 = i2 + 1;

        i2 = i2 / 2;

        i2 = i2 + 7;

        i2 = i2 / 8;

        r2 = newarray (byte)[i2];

        i2 = 0;

        i3 = 0;

        i4 = 0;

     label1:
        i0 = lengthof $r0;

        i0 = i0 / 2;

        i0 = i0 * 2;

        if i4 >= i0 goto label6;

        i1 = i4 + 1;

        i4 = $r0[i4];

        i0 = i4 + 1;

        i4 = i1 + 1;

        i1 = $r0[i1];

        i1 = i1 + 1;

        if i0 != 0 goto label2;

        if i1 != 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal encoding!");

        throw $r3;

     label2:
        i0 = i0 * 3;

        i0 = i0 + i1;

        r1 = newarray (int)[3];

        $r4 = <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT1_TABLE>;

        i1 = $r4[i0];

        r1[0] = i1;

        $r4 = <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT2_TABLE>;

        i1 = $r4[i0];

        r1[1] = i1;

        $r4 = <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] BIT3_TABLE>;

        i0 = $r4[i0];

        r1[2] = i0;

        i0 = 0;

     label3:
        if i0 >= 3 goto label1;

        $b5 = r2[i3];

        i1 = r1[i0];

        i1 = i1 << i2;

        i1 = $b5 | i1;

        $b5 = (byte) i1;

        r2[i3] = $b5;

        if i2 != 7 goto label5;

        i2 = 0;

        i3 = i3 + 1;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return r2;
    }
    public static byte[] encodeMod3Tight(int[])
    {
        int[] $r0;
        int i0, $i1;
        java.math.BigInteger r1, $r2;
        long $l2;
        byte[] $r3, r4;

        $r0 := @parameter0: int[];

        r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i0 = lengthof $r0;

        i0 = i0 + -1;

     label1:
        if i0 < 0 goto label2;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $i1 = $r0[i0];

        $i1 = $i1 + 1;

        $l2 = (long) $i1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        i0 = i0 + -1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        i0 = lengthof $r0;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        i0 = i0 + 7;

        i0 = i0 / 8;

        $r3 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        r4 = $r3;

        $i1 = lengthof $r3;

        if $i1 >= i0 goto label3;

        r4 = newarray (byte)[i0];

        $i1 = lengthof $r3;

        $i1 = i0 - $i1;

        i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, $i1, i0);

        return r4;

     label3:
        $i1 = lengthof $r3;

        if $i1 <= i0 goto label4;

        i0 = lengthof $r3;

        r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r3, 1, i0);

     label4:
        return r4;
    }
    public static byte[] encodeModQ(int[], int)
    {
        int[] $r0;
        int $i0, i1, i2, i3, i4, $i5;
        byte[] r1;
        byte $b6;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 31 - $i0;

        i2 = lengthof $r0;

        i2 = i2 * $i0;

        i2 = i2 + 7;

        i2 = i2 / 8;

        r1 = newarray (byte)[i2];

        i2 = 0;

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = lengthof $r0;

        if i4 >= $i5 goto label6;

        $i5 = 0;

     label2:
        if $i5 >= $i0 goto label5;

        i1 = $r0[i4];

        i1 = i1 >> $i5;

        i1 = i1 & 1;

        $b6 = r1[i3];

        i1 = i1 << i2;

        i1 = $b6 | i1;

        $b6 = (byte) i1;

        r1[i3] = $b6;

        if i2 != 7 goto label4;

        i2 = 0;

        i3 = i3 + 1;

     label3:
        $i5 = $i5 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return r1;
    }
    private static int getBit(byte[], int)
    {
        byte[] $r0;
        int $i0, i1;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = $i0 / 8;

        $b2 = $r0[i1];

        i1 = $b2 & 255;

        $i0 = $i0 % 8;

        $i0 = i1 >> $i0;

        $i0 = $i0 & 1;

        return $i0;
    }
