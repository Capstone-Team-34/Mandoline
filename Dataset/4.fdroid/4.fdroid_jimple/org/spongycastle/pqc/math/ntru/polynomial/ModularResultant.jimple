org.spongycastle.pqc.math.ntru.polynomial.ModularResultant extends org.spongycastle.pqc.math.ntru.polynomial.Resultant
java.math.BigInteger modulus
    void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial, java.math.BigInteger, java.math.BigInteger)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1;
        java.math.BigInteger $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger)>($r1, $r2);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger modulus> = $r3;

        return;
    }
    static org.spongycastle.pqc.math.ntru.polynomial.ModularResultant combineRho(org.spongycastle.pqc.math.ntru.polynomial.ModularResultant, org.spongycastle.pqc.math.ntru.polynomial.ModularResultant)
    {
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant $r0, $r1;
        java.math.BigInteger r2, r3, $r4, $r8;
        org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean $r5;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r6, $r9;
        java.lang.Object $r7;

        $r0 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant;

        $r1 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant;

        r2 = $r0.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger modulus>;

        r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger modulus>;

        $r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r5 = staticinvoke <org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean calculate(java.math.BigInteger,java.math.BigInteger)>(r3, r2);

        $r6 = $r0.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r6 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r7;

        $r8 = $r5.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger x>;

        r3 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mult(java.math.BigInteger)>(r3);

        $r9 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r7 = virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r9 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r7;

        r3 = $r5.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger y>;

        r2 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r2);

        virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mult(java.math.BigInteger)>(r2);

        virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r9);

        virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mod(java.math.BigInteger)>($r4);

        $r0 = new org.spongycastle.pqc.math.ntru.polynomial.ModularResultant;

        specialinvoke $r0.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger,java.math.BigInteger)>($r6, null, $r4);

        return $r0;
    }
