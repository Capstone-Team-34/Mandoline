org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial extends java.lang.Object
private static final java.math.BigDecimal ONE_HALF
private static final java.math.BigDecimal ZERO
java.math.BigDecimal[] coeffs
    static void <clinit>()
    {
        java.math.BigDecimal $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>("0");

        <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ZERO> = $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>("0.5");

        <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ONE_HALF> = $r0;

        return;
    }
    void <init>(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        int $i0, i1;
        java.math.BigDecimal $r1;
        java.math.BigDecimal[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (java.math.BigDecimal)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r2;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ZERO>;

        $r2[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1;
        int i0, i1;
        java.math.BigDecimal $r2;
        java.math.BigInteger[] $r3;
        java.math.BigDecimal[] $r4;
        java.math.BigInteger $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r3;

        $r4 = newarray (java.math.BigDecimal)[i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r2 = new java.math.BigDecimal;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = $r3[i1];

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r5);

        $r4[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    void <init>(java.math.BigDecimal[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        java.math.BigDecimal[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: java.math.BigDecimal[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r1;

        return;
    }
    private java.math.BigDecimal[] copyOf(java.math.BigDecimal[], int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        java.math.BigDecimal[] $r1, r2;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: java.math.BigDecimal[];

        $i1 := @parameter1: int;

        r2 = newarray (java.math.BigDecimal)[$i1];

        $i0 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        $i1 = lengthof $r1;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i1);

        return r2;
    }
    private java.math.BigDecimal[] copyOfRange(java.math.BigDecimal[], int, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        java.math.BigDecimal[] $r1, r2;
        int $i0, $i1, i2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: java.math.BigDecimal[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1 - $i0;

        $i1 = $i1 - $i0;

        r2 = newarray (java.math.BigDecimal)[$i1];

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        if $i1 >= i2 goto label1;

        $i1 = lengthof $r1;

        i2 = $i1 - $i0;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, i2);

        return r2;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r1, r3, r5, r6, r11;
        java.math.BigDecimal[] r2, r4, $r7;
        int i0, i1, $i2, $i3;
        java.lang.Object $r8;
        java.math.BigDecimal $r9, $r10;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        r4 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r7 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r7;

        if i0 > 1 goto label3;

        r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        r4 = (java.math.BigDecimal[]) $r8;

        i1 = 0;

     label1:
        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof r2;

        if i1 >= i0 goto label2;

        $r9 = r4[i1];

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r10 = r2[0];

        $r9 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r10);

        r4[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>(r4);

        return r0;

     label3:
        i1 = i0 / 2;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int)>(r2, i1);

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>($r7);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        r2 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOfRange(java.math.BigDecimal[],int,int)>(r2, i1, i0);

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>(r2);

        r5 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        r2 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int)>(r4, i1);

        specialinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>(r2);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        r4 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOfRange(java.math.BigDecimal[],int,int)>(r4, i1, i0);

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>(r4);

        $r8 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) $r8;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>($r1);

        $r8 = virtualinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.lang.Object clone()>();

        r11 = (org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) $r8;

        virtualinvoke r11.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>(r6);

        r3 = specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>(r5);

        $r1 = specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>(r6);

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>(r11);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>(r3);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>($r1);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        i0 = i0 * 2;

        i0 = i0 + -1;

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(int)>(i0);

        i0 = 0;

     label4:
        r4 = r3.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = lengthof r4;

        if i0 >= $i2 goto label5;

        r4 = r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r9 = r2[i0];

        r4[i0] = $r9;

        i0 = i0 + 1;

        goto label4;

     label5:
        i0 = 0;

     label6:
        r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = lengthof r4;

        if i0 >= $i2 goto label7;

        r4 = r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = i1 + i0;

        r2 = r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i3 = i1 + i0;

        $r9 = r2[$i3];

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r10 = r2[i0];

        $r9 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r10);

        r4[$i2] = $r9;

        i0 = i0 + 1;

        goto label6;

     label7:
        i0 = 0;

     label8:
        r4 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = lengthof r4;

        if i0 >= $i2 goto label9;

        r4 = r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = i1 * 2;

        $i2 = $i2 + i0;

        r2 = r6.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i3 = i1 * 2;

        $i3 = $i3 + i0;

        $r9 = r2[$i3];

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r10 = r2[i0];

        $r9 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r10);

        r4[$i2] = $r9;

        i0 = i0 + 1;

        goto label8;

     label9:
        return r6;
    }
    public void add(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r1;
        int i0, $i1;
        java.math.BigDecimal[] $r2, $r3;
        java.math.BigDecimal $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r3;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int)>($r2, $i1);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ZERO>;

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = $r3[i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r5 = $r3[i0];

        $r4 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r5);

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r1;
        java.lang.Object $r2;
        java.math.BigDecimal[] $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.math.BigDecimal[]) $r2;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(java.math.BigDecimal[])>($r3);

        return $r1;
    }
    public java.math.BigDecimal[] getCoeffs()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        java.math.BigDecimal[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i0 = lengthof r1;

        r1 = newarray (java.math.BigDecimal)[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public void halve()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        java.math.BigDecimal $r1, $r4;
        int i0, $i1;
        java.math.BigDecimal[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = $r3[i0];

        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ONE_HALF>;

        $r1 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r1);

        $r2[i0] = $r1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r1;
        int i0, $i1, $i2, $i3;
        java.math.BigDecimal[] $r2, $r4;
        java.lang.IllegalArgumentException $r3;
        java.math.BigDecimal $r5, $r6;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 == i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r3;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>($r1);

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 <= i0 goto label4;

        $i1 = i0;

     label2:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i2 = $i1 - i0;

        $r4 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i3 = $i1 - i0;

        $r5 = $r4[$i3];

        $r4 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r6 = $r4[$i1];

        $r5 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r6);

        $r2[$i2] = $r5;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int)>($r2, i0);

        $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r2;

     label4:
        return $r1;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r2;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        specialinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        r0 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>($r2);

        return r0;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial round()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0;
        int i0, i1;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r1;
        java.math.BigDecimal[] $r2;
        java.math.BigInteger[] $r3;
        java.math.BigDecimal $r4;
        java.math.BigInteger $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = $r2[i1];

        $r4 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(0, 6);

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $r3[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    void sub(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r0, $r1;
        int i0, $i1;
        java.math.BigDecimal[] $r2, $r3;
        java.math.BigDecimal $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r3;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int)>($r2, $i1);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = <org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal ZERO>;

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = $r3[i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r5 = $r3[i0];

        $r4 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r5);

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }
