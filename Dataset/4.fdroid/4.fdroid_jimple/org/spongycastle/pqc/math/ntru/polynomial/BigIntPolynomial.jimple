org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial extends java.lang.Object
private static final double LOG_10_2
java.math.BigInteger[] coeffs
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double log10(double)>(2.0);

        <org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: double LOG_10_2> = $d0;

        return;
    }
    void <init>(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        int $i0, i1;
        java.math.BigInteger $r1;
        java.math.BigInteger[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (java.math.BigInteger)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r2;

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        $r2[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        java.math.BigInteger $r2;
        int[] $r3;
        int $i0, $i1;
        java.math.BigInteger[] $r4;
        long $l2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof $r3;

        $r4 = newarray (java.math.BigInteger)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r4;

        $i0 = 0;

     label1:
        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = $r3[$i0];

        $l2 = (long) $i1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r4[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    void <init>(java.math.BigInteger[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.math.BigInteger[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r1;

        return;
    }
    static org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial generateRandomSmall(int, int, int)
    {
        int $i0, $i1, $i2, i3;
        java.util.ArrayList r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r1;
        java.math.BigInteger $r2;
        java.security.SecureRandom $r3;
        java.math.BigInteger[] $r4;
        java.lang.Object $r5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= $i1 goto label2;

        $r2 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ONE>;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i2 goto label4;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-1L);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 >= $i0 goto label5;

        $r2 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label4;

     label5:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(r0, $r3);

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(int)>($i0);

        $i0 = 0;

     label6:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label7;

        $r4 = r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (java.math.BigInteger) $r5;

        $r4[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        return r1;
    }
    private java.math.BigInteger maxCoeffAbs()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger[] $r1;
        java.math.BigInteger $r2, $r3;
        int i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = $r1[0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger abs()>();

        i0 = 1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r1[i0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i1 <= 0 goto label2;

        $r2 = $r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return $r2;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1, r3, r4, r6, r7;
        java.math.BigInteger[] r2, r5, $r8;
        int i0, i1, $i2, $i3;
        java.math.BigInteger $r9, $r10;
        java.lang.Object $r11;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r8 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r8;

        if i0 > 1 goto label3;

        r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r5 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] clone(java.math.BigInteger[])>(r5);

        i1 = 0;

     label1:
        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof r2;

        if i1 >= i0 goto label2;

        $r9 = r5[i1];

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r10 = r2[0];

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        r5[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>(r5);

        return r0;

     label3:
        i1 = i0 / 2;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>(r2, i1);

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>($r8);

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        r2 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOfRange(java.math.BigInteger[],int,int)>(r2, i1, i0);

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>(r2);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        r2 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>(r5, i1);

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>(r2);

        r7 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        r5 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOfRange(java.math.BigInteger[],int,int)>(r5, i1, i0);

        specialinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>(r5);

        $r11 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r11;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r4);

        $r11 = virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r1 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r11;

        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r7);

        r3 = specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r6);

        r4 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r7);

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r3);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>(r4);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        i0 = i0 * 2;

        i0 = i0 + -1;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(int)>(i0);

        i0 = 0;

     label4:
        r5 = r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = lengthof r5;

        if i0 >= $i2 goto label5;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r9 = r2[i0];

        r5[i0] = $r9;

        i0 = i0 + 1;

        goto label4;

     label5:
        i0 = 0;

     label6:
        r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = lengthof r5;

        if i0 >= $i2 goto label7;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = i1 + i0;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i3 = i1 + i0;

        $r9 = r2[$i3];

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r10 = r2[i0];

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        r5[$i2] = $r9;

        i0 = i0 + 1;

        goto label6;

     label7:
        i0 = 0;

     label8:
        r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = lengthof r5;

        if i0 >= $i2 goto label9;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = i1 * 2;

        $i2 = $i2 + i0;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i3 = i1 * 2;

        $i3 = $i3 + i0;

        $r9 = r2[$i3];

        r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r10 = r2[i0];

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        r5[$i2] = $r9;

        i0 = i0 + 1;

        goto label8;

     label9:
        return $r1;
    }
    public void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1;
        int i0, $i1;
        java.math.BigInteger[] $r2, $r3;
        java.math.BigInteger $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>($r2, $i1);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = $r3[i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = $r3[i0];

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }
    void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial, java.math.BigInteger)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 := @parameter1: java.math.BigInteger;

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mod(java.math.BigInteger)>($r2);

        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1;
        java.lang.Object $r2;
        java.math.BigInteger[] $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.math.BigInteger[]) $r2;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>($r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial div(java.math.BigDecimal, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigDecimal $r1, $r4;
        int $i0, i1, $i2;
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial r2;
        double $d0, $d1;
        java.math.BigInteger $r3;
        java.math.BigInteger[] $r5;
        java.math.BigDecimal[] $r6;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.math.BigDecimal;

        $i0 := @parameter1: int;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger maxCoeffAbs()>();

        i1 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $d1 = (double) i1;

        $d0 = <org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: double LOG_10_2>;

        $d0 = $d1 * $d0;

        i1 = (int) $d0;

        i1 = i1 + 1;

        $r4 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigDecimal BIGDEC_ONE>;

        i1 = i1 + $i0;

        i1 = i1 + 1;

        $r1 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>($r1, i1, 6);

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i1 = lengthof $r5;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void <init>(int)>(i1);

        i1 = 0;

     label1:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = lengthof $r5;

        if i1 >= $i2 goto label2;

        $r6 = r2.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: java.math.BigDecimal[] coeffs>;

        $r4 = new java.math.BigDecimal;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r5[i1];

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r3);

        $r4 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r1);

        $r4 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>($i0, 6);

        $r6[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }
    public void div(java.math.BigInteger)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger $r1, $r2, $r3, $r6;
        int i0, $i1;
        java.math.BigInteger[] $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ONE>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        i0 = 0;

     label1:
        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r5[i0];

        $r6 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i1 <= 0 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r5[i0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

     label2:
        $r4[i0] = $r3;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r5[i0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4[i0] = $r3;

        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r5[i0];

        $r6 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        goto label2;

     label4:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        java.math.BigInteger[] $r5, $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r1;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(java.lang.Object[],java.lang.Object[])>($r5, $r6);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }
    public java.math.BigInteger[] getCoeffs()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] clone(java.math.BigInteger[])>($r1);

        return $r1;
    }
    public int getMaxCoeffLength()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        double $d0, $d1;
        java.math.BigInteger $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger maxCoeffAbs()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $d1 = (double) $i0;

        $d0 = <org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: double LOG_10_2>;

        $d0 = $d1 * $d0;

        $i0 = (int) $d0;

        $i0 = $i0 + 1;

        return $i0;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        int $i0;
        java.math.BigInteger[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i0 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + 31;

        return $i0;
    }
    public void mod(java.math.BigInteger)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger $r1, $r2;
        int i0, $i1;
        java.math.BigInteger[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.math.BigInteger;

        i0 = 0;

     label1:
        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = $r4[i0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r3[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1;
        int i0, $i1, $i2, $i3;
        java.math.BigInteger[] $r2, $r4;
        java.lang.IllegalArgumentException $r3;
        java.math.BigInteger $r5, $r6;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 == i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r3;

     label1:
        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r1);

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if $i1 <= i0 goto label4;

        $i1 = i0;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i2 = $i1 - i0;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i3 = $i1 - i0;

        $r5 = $r4[$i3];

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r6 = $r4[$i1];

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $r2[$i2] = $r5;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>($r2, i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r2;

     label4:
        return r0;
    }
    void mult(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        int $i0;
        java.math.BigInteger $r1;
        long $l1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mult(java.math.BigInteger)>($r1);

        return;
    }
    public void mult(java.math.BigInteger)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger $r1, $r2;
        int i0, $i1;
        java.math.BigInteger[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: java.math.BigInteger;

        i0 = 0;

     label1:
        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r2 = $r4[i0];

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r3[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void sub(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0, $r1;
        int i0, $i1;
        java.math.BigInteger[] $r2, $r3;
        java.math.BigInteger $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: java.math.BigInteger[] copyOf(java.math.BigInteger[],int)>($r2, $i1);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs> = $r2;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r4 = $r3[i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r5 = $r3[i0];

        $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r2[i0] = $r4;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }
    java.math.BigInteger sumCoeffs()
    {
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial r0;
        java.math.BigInteger $r1, $r3;
        int i0, $i1;
        java.math.BigInteger[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        $r1 = <org.spongycastle.pqc.math.ntru.polynomial.Constants: java.math.BigInteger BIGINT_ZERO>;

        i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $r3 = $r2[i0];

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return $r1;
    }
