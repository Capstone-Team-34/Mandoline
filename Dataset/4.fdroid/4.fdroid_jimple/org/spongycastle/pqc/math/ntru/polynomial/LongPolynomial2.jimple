org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 extends java.lang.Object
private long[] coeffs
private int numCoeffs
    private void <init>(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        int $i0;
        long[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[$i0];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r1;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int i0, $i2, i3, $i4;
        long $l1, $l6;
        int[] $r2;
        long[] $r3;
        byte $b5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i2 = lengthof $r2;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs> = $i2;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        $i2 = $i2 + 1;

        $i2 = $i2 / 2;

        $r3 = newarray (long)[$i2];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r3;

        $i2 = 0;

        i3 = 0;

     label1:
        $i4 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        if i3 >= $i4 goto label7;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i0 = i3 + 1;

        $i4 = $r2[i3];

     label2:
        if $i4 >= 0 goto label3;

        $i4 = $i4 + 2048;

        goto label2;

     label3:
        i3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        if i0 >= i3 goto label5;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i3 = i0 + 1;

        i0 = $r2[i0];

        $l1 = (long) i0;

     label4:
        $b5 = $l1 cmp 0L;

        if $b5 >= 0 goto label6;

        $l1 = $l1 + 2048L;

        goto label4;

     label5:
        $l1 = 0L;

        i3 = i0;

        goto label4;

     label6:
        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l6 = (long) $i4;

        $l1 = $l1 << 24;

        $l6 = $l6 + $l1;

        $r3[$i2] = $l6;

        $i2 = $i2 + 1;

        goto label1;

     label7:
        return;
    }
    private void <init>(long[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        long[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: long[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r1;

        return;
    }
    private void add(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, $r1;
        long[] $r2, $r3;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i0 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>($r2, $i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r2;

     label1:
        $i0 = 0;

     label2:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l2 = $r3[$i0];

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l3 = $r3[$i0];

        $l2 = $l2 + $l3;

        $l2 = $l2 & 34342963199L;

        $r2[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, $r1, r3, r4, r6, r7;
        long[] r2, r5, $r8, $r9;
        long l0, l2, $l7;
        int i1, $i3, i4, $i5, $i6, $i8;
        java.lang.Object $r10;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r8 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = lengthof $r8;

        if $i3 > 32 goto label04;

        i1 = $i3 * 2;

        r0 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r8 = newarray (long)[i1];

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>($r8);

        i4 = 0;

     label01:
        if i4 >= i1 goto label10;

        $i5 = i4 - $i3;

        $i5 = $i5 + 1;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i5);

     label02:
        $i6 = $i3 + -1;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i6);

        if $i5 > $i6 goto label03;

        $i6 = i4 - $i5;

        l0 = r2[$i6];

        l2 = r5[$i5];

        l0 = l0 * l2;

        l2 = 2047L & l0;

        l2 = 34342961152L + l2;

        l2 = l0 & l2;

        l0 = l0 >>> 48;

        l0 = l0 & 2047L;

        $r8 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r9 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l7 = $r9[i4];

        l2 = $l7 + l2;

        l2 = l2 & 34342963199L;

        $r8[i4] = l2;

        $r8 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i6 = i4 + 1;

        $r9 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i8 = i4 + 1;

        l2 = $r9[$i8];

        l0 = l2 + l0;

        l0 = l0 & 34342963199L;

        $r8[$i6] = l0;

        $i5 = $i5 + 1;

        goto label02;

     label03:
        i4 = i4 + 1;

        goto label01;

     label04:
        i1 = $i3 / 2;

        r3 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r8 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>(r2, i1);

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>($r8);

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOfRange(long[],int,int)>(r2, i1, $i3);

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>(r2);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>(r5, i1);

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>(r2);

        r7 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r5 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOfRange(long[],int,int)>(r5, i1, $i3);

        specialinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>(r5);

        $r10 = virtualinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: java.lang.Object clone()>();

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2) $r10;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void add(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r4);

        $r10 = virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: java.lang.Object clone()>();

        $r1 = (org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2) $r10;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void add(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r7);

        r3 = specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r6);

        r4 = specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r7);

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>($r1);

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void sub(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r3);

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void sub(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>(r4);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $i3 = $i3 * 2;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(int)>($i3);

        $i3 = 0;

     label05:
        r5 = r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i4 = lengthof r5;

        if $i3 >= i4 goto label06;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        r2 = r3.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        l0 = r2[$i3];

        l0 = l0 & 34342963199L;

        r5[$i3] = l0;

        $i3 = $i3 + 1;

        goto label05;

     label06:
        $i3 = 0;

     label07:
        r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i4 = lengthof r5;

        if $i3 >= i4 goto label08;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i4 = i1 + $i3;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i5 = i1 + $i3;

        l0 = r2[$i5];

        r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        l2 = r2[$i3];

        l0 = l0 + l2;

        l0 = l0 & 34342963199L;

        r5[i4] = l0;

        $i3 = $i3 + 1;

        goto label07;

     label08:
        $i3 = 0;

     label09:
        r5 = r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i4 = lengthof r5;

        if $i3 >= i4 goto label11;

        r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i4 = i1 * 2;

        i4 = i4 + $i3;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i5 = i1 * 2;

        $i5 = $i5 + $i3;

        l0 = r2[$i5];

        r2 = r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        l2 = r2[$i3];

        l0 = l0 + l2;

        l0 = l0 & 34342963199L;

        r5[i4] = l0;

        $i3 = $i3 + 1;

        goto label09;

     label10:
        return r0;

     label11:
        return $r1;
    }
    private void sub(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, $r1;
        long[] $r2, $r3;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i0 = lengthof $r2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i0 = lengthof $r3;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>($r2, $i0);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r2;

     label1:
        $i0 = 0;

     label2:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l2 = $r3[$i0];

        $l2 = 140737496743936L + $l2;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l3 = $r3[$i0];

        $l2 = $l2 - $l3;

        $l2 = $l2 & 34342963199L;

        $r2[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, r1;
        java.lang.Object $r2;
        long[] $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r1 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (long[]) $r2;

        specialinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>($r3);

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs> = $i0;

        return r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        long[] $r1, $r3;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        r0 = (org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2) r2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(long[],long[])>($r3, $r1);

        return $z0;

     label1:
        return 0;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 mult(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, $r1, $r4;
        int i0, $i1, $i2, $i3;
        long[] $r2, $r5;
        java.lang.IllegalArgumentException $r3;
        long $l4, $l5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i0 = lengthof $r2;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i2 = lengthof $r2;

        if $i2 != i0 goto label1;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        $i3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        if $i2 == $i3 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r3;

     label2:
        $r4 = specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2)>($r1);

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i2 = lengthof $r2;

        if $i2 <= i0 goto label5;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        $i2 = $i2 % 2;

        if $i2 != 0 goto label6;

        $i2 = i0;

     label3:
        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label4;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = $i2 - i0;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = $i2 - i0;

        $l4 = $r5[$i1];

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l5 = $r5[$i2];

        $l4 = $l4 + $l5;

        $l4 = $l4 & 34342963199L;

        $r2[$i3] = $l4;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>($r2, i0);

        $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r2;

     label5:
        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: void <init>(long[])>($r2);

        i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs> = i0;

        return $r1;

     label6:
        $i2 = i0;

     label7:
        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label8;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = $i2 - i0;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = $i2 - i0;

        $l4 = $r5[$i1];

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = $i2 + -1;

        $l5 = $r5[$i1];

        $l5 = $l5 >> 24;

        $l4 = $l4 + $l5;

        $r2[$i3] = $l4;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = $i2 - i0;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i1 = $i2 - i0;

        $l4 = $r5[$i1];

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l5 = $r5[$i2];

        $l5 = $l5 & 2047L;

        $l5 = $l5 << 24;

        $l4 = $l4 + $l5;

        $r2[$i3] = $l4;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = $i2 - i0;

        $l4 = $r2[$i3];

        $l4 = $l4 & 34342963199L;

        $r2[$i3] = $l4;

        $i2 = $i2 + 1;

        goto label7;

     label8:
        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r2 = staticinvoke <org.spongycastle.util.Arrays: long[] copyOf(long[],int)>($r2, i0);

        $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs> = $r2;

        $r2 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i0 = lengthof $r5;

        i0 = i0 + -1;

        $l4 = $r2[i0];

        $l4 = $l4 & 2047L;

        $r2[i0] = $l4;

        goto label5;
    }
    public void mult2And(int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        int $i0, $i3;
        long l1, $l2;
        long[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $i0 := @parameter0: int;

        l1 = (long) $i0;

        l1 = l1 << 24;

        $l2 = (long) $i0;

        l1 = l1 + $l2;

        $i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = lengthof $r1;

        if $i0 >= $i3 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l2 = $r2[$i0];

        $l2 = $l2 << 1;

        $l2 = $l2 & l1;

        $r1[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void subAnd(org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0, $r1;
        int $i0, $i3;
        long l1, $l2, $l4;
        long[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $i0 := @parameter1: int;

        l1 = (long) $i0;

        l1 = l1 << 24;

        $l2 = (long) $i0;

        l1 = l1 + $l2;

        $i0 = 0;

     label1:
        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $i3 = lengthof $r2;

        if $i0 >= $i3 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $r3 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l2 = $r3[$i0];

        $l2 = 140737496743936L + $l2;

        $r3 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l4 = $r3[$i0];

        $l2 = $l2 - $l4;

        $l2 = $l2 & l1;

        $r2[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()
    {
        org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2 r0;
        int[] r1;
        int i0, $i1, i2, $i4;
        long[] $r2;
        long $l3;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        r1 = newarray (int)[$i1];

        i2 = 0;

        $i1 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        i0 = lengthof $r2;

        if $i1 >= i0 goto label3;

        i0 = i2 + 1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l3 = $r2[$i1];

        $l3 = $l3 & 2047L;

        $i4 = (int) $l3;

        r1[i2] = $i4;

        i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: int numCoeffs>;

        if i0 >= i2 goto label4;

        i2 = i0 + 1;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.LongPolynomial2: long[] coeffs>;

        $l3 = $r2[$i1];

        $l3 = $l3 >> 24;

        $l3 = $l3 & 2047L;

        $i4 = (int) $l3;

        r1[i0] = $i4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r1);

        return $r3;

     label4:
        i2 = i0;

        goto label2;
    }
