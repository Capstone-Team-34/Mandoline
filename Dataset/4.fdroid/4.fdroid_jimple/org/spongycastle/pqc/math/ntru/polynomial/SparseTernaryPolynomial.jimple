org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial extends java.lang.Object implements org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial
private static final int BITS_PER_INDEX
private int N
private int[] negOnes
private int[] ones
    void <init>(int, int[], int[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int $i0;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N> = $i0;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones> = $r1;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes> = $r2;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        specialinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r2);

        return;
    }
    public void <init>(int[])
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int[] $r1, $r2;
        int i0, $i1, i2, i3;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof $r1;

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N> = $i1;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $r2 = newarray (int)[$i1];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones> = $r2;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $r2 = newarray (int)[$i1];

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes> = $r2;

        $i1 = 0;

        i2 = 0;

        i3 = 0;

     label1:
        i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        if i3 >= i0 goto label6;

        i0 = $r1[i3];

        lookupswitch(i0)
        {
            case -1: goto label5;
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal value: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be one of {-1, 0, 1}");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $r2[$i1] = i3;

        $i1 = $i1 + 1;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $r2[i2] = i3;

        i2 = i2 + 1;

        goto label4;

     label6:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r1, $i1);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones> = $r1;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] copyOf(int[],int)>($r1, i2);

        r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes> = $r1;

        return;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream, int, int, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2, i3, i4;
        byte[] $r1;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r4;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(2047);

        i3 = 32 - i3;

        i4 = $i1 * i3;

        i4 = i4 + 7;

        i4 = i4 / 8;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: byte[] readFullLength(java.io.InputStream,int)>($r0, i4);

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeModQ(byte[],int,int)>($r1, $i1, 2048);

        $i1 = $i2 * i3;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        $r1 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: byte[] readFullLength(java.io.InputStream,int)>($r0, $i1);

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: int[] decodeModQ(byte[],int,int)>($r1, $i2, 2048);

        $r4 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        specialinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int,int[],int[])>($i0, $r2, $r3);

        return $r4;
    }
    public static org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int, int, int, java.security.SecureRandom)
    {
        int $i0, $i1, $i2;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r1;
        int[] $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.security.SecureRandom;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: int[] generateRandomTernary(int,int,int,java.security.SecureRandom)>($i0, $i1, $i2, $r0);

        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r2);

        return $r1;
    }
    public void clear()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        i0 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        int $i0, $i1;
        int[] $r5, $r6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial) $r1;

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i1 = r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(int[],int[])>($r5, $r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $r6 = r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean areEqual(int[],int[])>($r5, $r6);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }
    public int[] getNegOnes()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int[] r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        return r1;
    }
    public int[] getOnes()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int[] r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i0 = $i0 + 31;

        $i0 = $i0 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(int[])>($r1);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = staticinvoke <org.spongycastle.util.Arrays: int hashCode(int[])>($r1);

        $i0 = $i0 + $i1;

        return $i0;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r1;
        java.math.BigInteger[] r2, r3;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r4;
        java.math.BigInteger $r5, $r7;
        int[] $r6;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.math.BigInteger[] coeffs>;

        $i0 = lengthof r2;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        if $i0 == $i1 goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r4;

     label01:
        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        r3 = newarray (java.math.BigInteger)[$i0];

        $i0 = 0;

     label02:
        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        if $i0 >= $i1 goto label03;

        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r3[$i0] = $r5;

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $i0 = 0;

     label04:
        $r6 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = lengthof $r6;

        if $i0 == $i1 goto label08;

        $r6 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = $r6[$i0];

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

        $i1 = $i2 - $i1;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

     label05:
        if $i2 < 0 goto label07;

        $r5 = r3[$i2];

        $r7 = r2[$i1];

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        r3[$i2] = $r5;

        $i1 = $i1 + -1;

        if $i1 >= 0 goto label06;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i1 = $i1 + -1;

     label06:
        $i2 = $i2 + -1;

        goto label05;

     label07:
        $i0 = $i0 + 1;

        goto label04;

     label08:
        $i0 = 0;

     label09:
        $r6 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = lengthof $r6;

        if $i0 == $i1 goto label13;

        $r6 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = $r6[$i0];

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

        $i1 = $i2 - $i1;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

     label10:
        if $i2 < 0 goto label12;

        $r5 = r3[$i2];

        $r7 = r2[$i1];

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        r3[$i2] = $r5;

        $i1 = $i1 + -1;

        if $i1 >= 0 goto label11;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i1 = $i1 + -1;

     label11:
        $i2 = $i2 + -1;

        goto label10;

     label12:
        $i0 = $i0 + 1;

        goto label09;

     label13:
        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void <init>(java.math.BigInteger[])>(r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int[] r2, r3, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i0 = lengthof r2;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        if $i0 == $i1 goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of coefficients must be the same");

        throw $r4;

     label01:
        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        r3 = newarray (int)[$i0];

        $i0 = 0;

     label02:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label06;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = $r5[$i0];

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

        $i1 = $i2 - $i1;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

     label03:
        if $i2 < 0 goto label05;

        $i3 = r3[$i2];

        $i4 = r2[$i1];

        $i3 = $i3 + $i4;

        r3[$i2] = $i3;

        $i1 = $i1 + -1;

        if $i1 >= 0 goto label04;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i1 = $i1 + -1;

     label04:
        $i2 = $i2 + -1;

        goto label03;

     label05:
        $i0 = $i0 + 1;

        goto label02;

     label06:
        $i0 = 0;

     label07:
        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label11;

        $r5 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = $r5[$i0];

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

        $i1 = $i2 - $i1;

        $i2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i2 = $i2 + -1;

     label08:
        if $i2 < 0 goto label10;

        $i3 = r3[$i2];

        $i4 = r2[$i1];

        $i3 = $i3 - $i4;

        r3[$i2] = $i3;

        $i1 = $i1 + -1;

        if $i1 >= 0 goto label09;

        $i1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        $i1 = $i1 + -1;

     label09:
        $i2 = $i2 + -1;

        goto label08;

     label10:
        $i0 = $i0 + 1;

        goto label07;

     label11:
        $r1 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod(int)>($i0);

        return $r1;
    }
    public int size()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        return i0;
    }
    public byte[] toBinary()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int $i0, $i1;
        int[] $r1;
        byte[] $r2, $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: byte[] encodeModQ(int[],int)>($r1, 2048);

        $r1 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.util.ArrayEncoder: byte[] encodeModQ(int[],int)>($r1, 2048);

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i0);

        $i1 = lengthof $r2;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, $i1, $i0);

        return $r4;
    }
    public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()
    {
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r0;
        int[] r1, $r2;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $i0 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int N>;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] ones>;

        $i1 = $r2[$i0];

        r1[$i1] = 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: int[] negOnes>;

        $i1 = $r2[$i0];

        r1[$i1] = -1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>(r1);

        return $r3;
    }
