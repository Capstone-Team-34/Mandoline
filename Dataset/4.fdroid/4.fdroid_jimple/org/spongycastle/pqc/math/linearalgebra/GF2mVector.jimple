org.spongycastle.pqc.math.linearalgebra.GF2mVector extends org.spongycastle.pqc.math.linearalgebra.Vector
private org.spongycastle.pqc.math.linearalgebra.GF2mField field
private int[] vector
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1, $r3;
        byte[] $r2;
        int i0, i1, $i2, i3, i4, $i5;
        java.lang.IllegalArgumentException $r4;
        int[] $r5;
        byte $b6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        $r3 = new org.spongycastle.pqc.math.linearalgebra.GF2mField;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField)>($r1);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r3;

        i0 = 8;

        i1 = 1;

     label1:
        $i2 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i2 <= i0 goto label2;

        i1 = i1 + 1;

        i0 = i0 + 8;

        goto label1;

     label2:
        $i2 = lengthof $r2;

        $i2 = $i2 % i1;

        if $i2 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array is not an encoded vector over the given finite field.");

        throw $r4;

     label3:
        $i2 = lengthof $r2;

        i1 = $i2 / i1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length> = i1;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length>;

        $r5 = newarray (int)[i1];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector> = $r5;

        i3 = 0;

        i1 = 0;

     label4:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i2 = lengthof $r5;

        if i1 >= $i2 goto label8;

        $i2 = 0;

        i4 = i3;

     label5:
        if $i2 >= i0 goto label6;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i5 = $r5[i1];

        i3 = i4 + 1;

        $b6 = $r2[i4];

        i4 = $b6 & 255;

        i4 = i4 << $i2;

        $i5 = $i5 | i4;

        $r5[i1] = $i5;

        $i2 = $i2 + 8;

        i4 = i3;

        goto label5;

     label6:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i2 = $r5[i1];

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i2);

        if $z0 != 0 goto label7;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array is not an encoded vector over the given finite field.");

        throw $r4;

     label7:
        i1 = i1 + 1;

        i3 = i4;

        goto label4;

     label8:
        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[] $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: int[];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        $i0 = lengthof $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length> = $i0;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $i1 = $r2[$i0];

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Element array is not specified over the given finite field.");

        throw $r3;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector> = $r2;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mVector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0, $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2, $r4;
        int[] $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        $r4 = new org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2mField: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField)>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r4;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length> = $i0;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r3);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector> = $r3;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        org.spongycastle.pqc.math.linearalgebra.Vector $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented");

        throw $r2;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0, r3;
        java.lang.Object $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2, $r4;
        boolean $z0;
        int[] $r5, $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = (org.spongycastle.pqc.math.linearalgebra.GF2mVector) $r1;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r2 = r3.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $r6 = r3.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: boolean equals(int[],int[])>($r5, $r6);

        return $z0;

     label2:
        return 0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        byte[] r1;
        int $i0, i1, i2, i3, $i4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        int[] $r3;
        byte $b5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        i1 = 8;

        i2 = 1;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i0 <= i1 goto label2;

        i2 = i2 + 1;

        i1 = i1 + 8;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i0 = lengthof $r3;

        i2 = $i0 * i2;

        r1 = newarray (byte)[i2];

        i3 = 0;

        i2 = 0;

     label3:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label6;

        $i0 = 0;

     label4:
        if $i0 >= i1 goto label5;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i4 = $r3[i2];

        $i4 = $i4 >>> $i0;

        $b5 = (byte) $i4;

        r1[i3] = $b5;

        $i0 = $i0 + 8;

        i3 = i3 + 1;

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2mField getField()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        return r1;
    }
    public int[] getIntArrayForm()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int $i0, $i1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int hashCode()>();

        $i0 = $i0 * 31;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public boolean isZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i1 = $r1[$i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0, $r6;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r1;
        int[] r2, $r3, $r5;
        int $i0, $i1;
        java.lang.ArithmeticException $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r7;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("permutation size and vector size mismatch");

        throw $r4;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int length>;

        r2 = newarray (int)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i1 = $r3[$i0];

        $i1 = $r5[$i1];

        r2[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r6 = new org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r7, r2);

        return $r6;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mVector r0;
        int i0, i1, $i2, $i3;
        java.lang.StringBuffer r1;
        int[] $r2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        java.lang.String $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i2 = lengthof $r2;

        if i1 >= $i2 goto label6;

        $i2 = 0;

     label2:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        i0 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i2 >= i0 goto label5;

        i0 = $i2 & 31;

        i0 = 1 << i0;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] vector>;

        $i3 = $r2[i1];

        i0 = $i3 & i0;

        if i0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label6:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
