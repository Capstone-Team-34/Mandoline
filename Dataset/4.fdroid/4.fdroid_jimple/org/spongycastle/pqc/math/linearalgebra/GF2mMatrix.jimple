org.spongycastle.pqc.math.linearalgebra.GF2mMatrix extends org.spongycastle.pqc.math.linearalgebra.Matrix
protected org.spongycastle.pqc.math.linearalgebra.GF2mField field
protected int[][] matrix
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        byte[] $r2;
        int i0, i1, $i2, $i4, i5, i6, $i7;
        java.lang.IllegalArgumentException $r3;
        byte $b3;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        int[][] $r7;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        i1 = 8;

        i0 = 1;

     label01:
        $i2 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i2 <= i1 goto label02;

        i0 = i0 + 1;

        i1 = i1 + 8;

        goto label01;

     label02:
        $i2 = lengthof $r2;

        if $i2 >= 5 goto label03;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: given array is not encoded matrix over GF(2^m)");

        throw $r3;

     label03:
        $b3 = $r2[3];

        $i2 = $b3 & 255;

        $i2 = $i2 << 24;

        $b3 = $r2[2];

        $i4 = $b3 & 255;

        $i4 = $i4 << 16;

        $i2 = $i2 ^ $i4;

        $b3 = $r2[1];

        $i4 = $b3 & 255;

        $i4 = $i4 << 8;

        $i2 = $i2 ^ $i4;

        $b3 = $r2[0];

        $i4 = $b3 & 255;

        $i2 = $i2 ^ $i4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows> = $i2;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        i0 = i0 * $i2;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i2 <= 0 goto label04;

        $i2 = lengthof $r2;

        $i2 = $i2 + -4;

        $i2 = $i2 % i0;

        if $i2 == 0 goto label05;

     label04:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: given array is not encoded matrix over GF(2^m)");

        throw $r3;

     label05:
        $i2 = lengthof $r2;

        $i2 = $i2 + -4;

        i0 = $i2 / i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns> = i0;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        $r4 = newarray (int)[2];

        $r4[0] = i0;

        $r4[1] = $i2;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r7 = (int[][]) $r6;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix> = $r7;

        i5 = 4;

        i0 = 0;

     label06:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if i0 >= $i2 goto label12;

        $i2 = 0;

     label07:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i2 >= $i4 goto label11;

        $i4 = 0;

        i6 = i5;

     label08:
        if $i4 >= i1 goto label09;

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r4 = $r7[i0];

        $i7 = $r4[$i2];

        i5 = i6 + 1;

        $b3 = $r2[i6];

        i6 = $b3 & 255;

        i6 = i6 << $i4;

        $i7 = $i7 ^ i6;

        $r4[$i2] = $i7;

        $i4 = $i4 + 8;

        i6 = i5;

        goto label08;

     label09:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r4 = $r7[i0];

        $i4 = $r4[$i2];

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i4);

        if $z0 != 0 goto label10;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: given array is not encoded matrix over GF(2^m)");

        throw $r3;

     label10:
        $i2 = $i2 + 1;

        i5 = i6;

        goto label07;

     label11:
        i0 = i0 + 1;

        goto label06;

     label12:
        return;
    }
    protected void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, int[][])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[][] $r2;
        int $i0;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: int[][];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix> = $r2;

        $i0 = lengthof $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows> = $i0;

        $r3 = $r2[0];

        $i0 = lengthof $r3;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns> = $i0;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mMatrix)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0, $r1;
        int[] $r2;
        int $i0, $i1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        int[][] $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns> = $i0;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r3;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $r4 = newarray (int[])[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix> = $r4;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r2 = $r5[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        $r4[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void addToRow(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i2 = lengthof $r2;

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = $r1[$i2];

        $i1 = $r2[$i2];

        $i0 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int add(int,int)>($i0, $i1);

        $r2[$i2] = $i0;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        return;
    }
    private int[] multRowWithElement(int[], int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        int[] $r1, r2;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i2 = lengthof $r1;

        r2 = newarray (int)[$i2];

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = $r1[$i2];

        $i1 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i1, $i0);

        r2[$i2] = $i1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        return r2;
    }
    private void multRowWithElementThis(int[], int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        int[] $r1;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = $r1[$i2];

        $i1 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i1, $i0);

        $r1[$i2] = $i1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        return;
    }
    private static void swapColumns(int[][], int, int)
    {
        int[][] $r0;
        int $i0, $i1;
        int[] r1, $r2;

        $r0 := @parameter0: int[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = $r0[$i0];

        $r2 = $r0[$i1];

        $r0[$i0] = $r2;

        $r0[$i1] = r1;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix computeInverse()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0, $r10;
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r1;
        int[] $r2, $r8, $r9;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] r5, $r6;
        boolean z0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r7;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i0 == $i1 goto label01;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Matrix is not invertible.");

        throw $r1;

     label01:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i0 = $i0 + -1;

     label02:
        if $i0 < 0 goto label03;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r2 = $r6[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r5[$i0] = $r2;

        $i0 = $i0 + -1;

        goto label02;

     label03:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r6 = (int[][]) $r4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i0 = $i0 + -1;

     label04:
        if $i0 < 0 goto label05;

        $r2 = $r6[$i0];

        $r2[$i0] = 1;

        $i0 = $i0 + -1;

        goto label04;

     label05:
        $i0 = 0;

     label06:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i0 >= $i1 goto label14;

        $r2 = r5[$i0];

        $i1 = $r2[$i0];

        if $i1 != 0 goto label10;

        z0 = 0;

        $i1 = $i0 + 1;

     label07:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i1 >= $i2 goto label09;

        $r2 = r5[$i1];

        $i2 = $r2[$i0];

        if $i2 == 0 goto label08;

        z0 = 1;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void swapColumns(int[][],int,int)>(r5, $i0, $i1);

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void swapColumns(int[][],int,int)>($r6, $i0, $i1);

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

     label08:
        $i1 = $i1 + 1;

        goto label07;

     label09:
        if z0 != 0 goto label10;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Matrix is not invertible.");

        throw $r1;

     label10:
        $r2 = r5[$i0];

        $i1 = $r2[$i0];

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r7.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i1);

        $r2 = r5[$i0];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void multRowWithElementThis(int[],int)>($r2, $i1);

        $r2 = $r6[$i0];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void multRowWithElementThis(int[],int)>($r2, $i1);

        $i1 = 0;

     label11:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i1 >= $i2 goto label13;

        if $i1 == $i0 goto label12;

        $r2 = r5[$i1];

        $i2 = $r2[$i0];

        if $i2 == 0 goto label12;

        $r2 = r5[$i0];

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[] multRowWithElement(int[],int)>($r2, $i2);

        $r8 = $r6[$i0];

        $r8 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[] multRowWithElement(int[],int)>($r8, $i2);

        $r9 = r5[$i1];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void addToRow(int[],int[])>($r2, $r9);

        $r2 = $r6[$i1];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void addToRow(int[],int[])>($r8, $r2);

     label12:
        $i1 = $i1 + 1;

        goto label11;

     label13:
        $i0 = $i0 + 1;

        goto label06;

     label14:
        $r10 = new org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r10.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[][])>($r7, $r6);

        return $r10;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3, $r4;
        int $i0, $i1, $i2, $i3;
        int[][] $r5;
        int[] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label6;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2mMatrix) $r1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $z0 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i0 != $i1 goto label6;

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i0 != $i1 goto label6;

        $i0 = 0;

     label2:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i0 >= $i1 goto label5;

        $i1 = 0;

     label3:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i1 >= $i2 goto label4;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r6 = $r5[$i0];

        $i2 = $r6[$i1];

        $r5 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r6 = $r5[$i0];

        $i3 = $r6[$i1];

        if $i2 != $i3 goto label6;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        return 1;

     label6:
        return 0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        byte[] r1;
        int $i0, i1, i2, $i3, i5, $i6;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        byte $b4;
        int[][] $r3;
        int[] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        i1 = 8;

        i2 = 1;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i0 <= i1 goto label2;

        i2 = i2 + 1;

        i1 = i1 + 8;

        goto label1;

     label2:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        $i0 = $i0 * $i3;

        i2 = $i0 * i2;

        i2 = i2 + 4;

        r1 = newarray (byte)[i2];

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        i2 = i2 & 255;

        $b4 = (byte) i2;

        r1[0] = $b4;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        i2 = i2 >>> 8;

        i2 = i2 & 255;

        $b4 = (byte) i2;

        r1[1] = $b4;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        i2 = i2 >>> 16;

        i2 = i2 & 255;

        $b4 = (byte) i2;

        r1[2] = $b4;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        i2 = i2 >>> 24;

        i2 = i2 & 255;

        $b4 = (byte) i2;

        r1[3] = $b4;

        i5 = 4;

        i2 = 0;

     label3:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if i2 >= $i0 goto label8;

        $i0 = 0;

     label4:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i0 >= $i3 goto label7;

        $i3 = 0;

     label5:
        if $i3 >= i1 goto label6;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r4 = $r3[i2];

        $i6 = $r4[$i0];

        $i6 = $i6 >>> $i3;

        $b4 = (byte) $i6;

        r1[i5] = $b4;

        $i3 = $i3 + 8;

        i5 = i5 + 1;

        goto label5;

     label6:
        $i0 = $i0 + 1;

        goto label4;

     label7:
        i2 = i2 + 1;

        goto label3;

     label8:
        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        int $i0, $i1, i2, $i3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[][] $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int hashCode()>();

        $i0 = $i0 * 31;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        i2 = $i0 + $i1;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i1 >= $i3 goto label3;

        i2 = i2 * 31;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r3 = $r2[$i0];

        $i3 = $r3[$i1];

        i2 = i2 + $i3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return i2;
    }
    public boolean isZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        int i0, $i1, $i2;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if i0 >= $i1 goto label5;

        $i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i1 >= $i2 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r2 = $r1[i0];

        $i2 = $r2[$i1];

        if $i2 == 0 goto label3;

        return 0;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector leftMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.Vector $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented.");

        throw $r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Matrix;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented.");

        throw $r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented.");

        throw $r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector rightMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        org.spongycastle.pqc.math.linearalgebra.Vector $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented.");

        throw $r2;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mMatrix r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        java.lang.String $r3;
        int[][] $r4;
        int[] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mMatrix;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Matrix over ");

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \n");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numRows>;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int numColumns>;

        if $i1 >= $i2 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mMatrix: int[][] matrix>;

        $r5 = $r4[$i0];

        $i2 = $r5[$i1];

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: java.lang.String elementToStr(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $r3;
    }
