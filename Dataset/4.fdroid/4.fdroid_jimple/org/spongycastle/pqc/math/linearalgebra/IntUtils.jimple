org.spongycastle.pqc.math.linearalgebra.IntUtils extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.IntUtils r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.IntUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int[] clone(int[])
    {
        int[] $r0, r1;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static boolean equals(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2;
        boolean z0, $z1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z0 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label5;

        $i1 = $r0[$i0];

        $i2 = $r1[$i0];

        if $i1 != $i2 goto label4;

        $z1 = 1;

     label3:
        z0 = z0 & $z1;

        $i0 = $i0 + -1;

        goto label2;

     label4:
        $z1 = 0;

        goto label3;

     label5:
        return z0;
    }
    public static void fill(int[], int)
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label2;

        $r0[$i1] = $i0;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return;
    }
    private static int partition(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, i3, $i4, $i5;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i3 = $r0[$i2];

        $i4 = $r0[$i1];

        $r0[$i2] = $i4;

        $r0[$i1] = i3;

        $i2 = $i0;

     label1:
        if $i0 >= $i1 goto label3;

        $i4 = $r0[$i0];

        if $i4 > i3 goto label2;

        $i4 = $r0[$i2];

        $i5 = $r0[$i0];

        $r0[$i2] = $i5;

        $r0[$i0] = $i4;

        $i2 = $i2 + 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = $r0[$i2];

        i3 = $r0[$i1];

        $r0[$i2] = i3;

        $r0[$i1] = $i0;

        return $i2;
    }
    public static void quicksort(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: void quicksort(int[],int,int)>($r0, 0, $i0);

        return;
    }
    public static void quicksort(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 <= $i0 goto label1;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int partition(int[],int,int,int)>($r0, $i0, $i1, $i1);

        $i3 = $i2 + -1;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: void quicksort(int[],int,int)>($r0, $i0, $i3);

        $i0 = $i2 + 1;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: void quicksort(int[],int,int)>($r0, $i0, $i1);

     label1:
        return;
    }
    public static int[] subArray(int[], int, int)
    {
        int[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 - $i0;

        r1 = newarray (int)[$i2];

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static java.lang.String toHexString(int[])
    {
        int[] $r0;
        byte[] $r1;
        java.lang.String $r2;

        $r0 := @parameter0: int[];

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: byte[] toByteArray(int[])>($r0);

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: java.lang.String toHexString(byte[])>($r1);

        return $r2;
    }
    public static java.lang.String toString(int[])
    {
        int[] $r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: int[];

        r1 = "";

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i1 = $r0[i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
