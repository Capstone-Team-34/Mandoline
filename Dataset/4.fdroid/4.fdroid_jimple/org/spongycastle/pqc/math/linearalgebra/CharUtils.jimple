org.spongycastle.pqc.math.linearalgebra.CharUtils extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.CharUtils r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.CharUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static char[] clone(char[])
    {
        char[] $r0, r1;
        int $i0;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        r1 = newarray (char)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static boolean equals(char[], char[])
    {
        char[] $r0, $r1;
        int $i0, $i1;
        boolean z0, $z1;
        char $c2, $c3;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: char[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z0 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label5;

        $c2 = $r0[$i0];

        $c3 = $r1[$i0];

        if $c2 != $c3 goto label4;

        $z1 = 1;

     label3:
        z0 = z0 & $z1;

        $i0 = $i0 + -1;

        goto label2;

     label4:
        $z1 = 0;

        goto label3;

     label5:
        return z0;
    }
    public static byte[] toByteArray(char[])
    {
        char[] $r0;
        byte[] r1;
        int $i0;
        char $c1;
        byte $b2;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $c1 = $r0[$i0];

        $b2 = (byte) $c1;

        r1[$i0] = $b2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return r1;
    }
    public static byte[] toByteArrayForPBE(char[])
    {
        char[] $r0;
        int i0, $i2, $i4;
        byte[] r1, r2;
        byte $b1;
        char $c3;

        $r0 := @parameter0: char[];

        i0 = lengthof $r0;

        r1 = newarray (byte)[i0];

        i0 = 0;

     label1:
        $i2 = lengthof $r0;

        if i0 >= $i2 goto label2;

        $c3 = $r0[i0];

        $b1 = (byte) $c3;

        r1[i0] = $b1;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = lengthof r1;

        i0 = i0 * 2;

        $i2 = i0 + 2;

        r2 = newarray (byte)[$i2];

        $i2 = 0;

     label3:
        $i4 = lengthof r1;

        if $i2 >= $i4 goto label4;

        $i4 = $i2 * 2;

        r2[$i4] = 0;

        $i4 = $i4 + 1;

        $b1 = r1[$i2];

        r2[$i4] = $b1;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        r2[i0] = 0;

        i0 = i0 + 1;

        r2[i0] = 0;

        return r2;
    }
