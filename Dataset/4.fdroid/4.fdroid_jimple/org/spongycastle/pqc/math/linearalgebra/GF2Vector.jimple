org.spongycastle.pqc.math.linearalgebra.GF2Vector extends org.spongycastle.pqc.math.linearalgebra.Vector
private int[] v
    public void <init>(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0;
        java.lang.ArithmeticException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative length.");

        throw $r1;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        $i0 = $i0 + 31;

        $i0 = $i0 >> 5;

        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = $r2;

        return;
    }
    public void <init>(int, int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, $i1, i2, i3, $i4;
        java.security.SecureRandom $r1;
        int[] r2;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        if $i1 <= $i0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The hamming weight is greater than the length of vector.");

        throw $r3;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        i2 = $i0 + 31;

        i2 = i2 >> 5;

        r2 = newarray (int)[i2];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = r2;

        r2 = newarray (int)[$i0];

        i2 = 0;

     label2:
        if i2 >= $i0 goto label3;

        r2[i2] = i2;

        i2 = i2 + 1;

        goto label2;

     label3:
        i2 = $i0;

        i3 = 0;

     label4:
        if i3 >= $i1 goto label5;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, i2);

        $i4 = r2[$i0];

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void setBit(int)>($i4);

        i2 = i2 + -1;

        $i4 = r2[i2];

        r2[$i0] = $i4;

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }
    public void <init>(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, i1, i2, i3;
        java.security.SecureRandom $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        i2 = $i0 + 31;

        i2 = i2 >> 5;

        $r2 = newarray (int)[i2];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = $r2;

        i3 = i2 + -1;

     label1:
        if i3 < 0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        $r2[i3] = i1;

        i3 = i3 + -1;

        goto label1;

     label2:
        i1 = $i0 & 31;

        if i1 == 0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i0 = i2 + -1;

        i2 = $r2[$i0];

        i1 = 1 << i1;

        i1 = i1 + -1;

        i2 = i2 & i1;

        $r2[$i0] = i2;

     label3:
        return;
    }
    public void <init>(int, int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, i1, i2;
        int[] $r1;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("negative length");

        throw $r2;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        i2 = $i0 + 31;

        i2 = i2 >> 5;

        i1 = lengthof $r1;

        if i1 == i2 goto label2;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r2;

     label2:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = $r1;

        i1 = $i0 & 31;

        if i1 == 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i0 = i2 + -1;

        i2 = $r1[$i0];

        i1 = 1 << i1;

        i1 = i1 + -1;

        i2 = i2 & i1;

        $r1[$i0] = i2;

     label3:
        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = $r2;

        return;
    }
    protected void <init>(int[], int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v> = $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length> = $i0;

        return;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int, byte[])
    {
        int $i0, i1, $i2;
        byte[] $r0;
        int[] $r1;
        java.lang.ArithmeticException $r2;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("negative length");

        throw $r2;

     label1:
        i1 = $i0 + 7;

        i1 = i1 >> 3;

        $i2 = lengthof $r0;

        if $i2 <= i1 goto label2;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r2;

     label2:
        $r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int[] toIntArray(byte[])>($r0);

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int,int[])>($i0, $r1);

        return $r3;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r4;
        int[] $r1, $r5;
        org.spongycastle.pqc.math.linearalgebra.Vector $r2;
        boolean $z0;
        java.lang.ArithmeticException $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r2 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $z0 = $r2 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("vector is not defined over GF(2)");

        throw $r3;

     label1:
        r4 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r2;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        $i1 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 == $i1 goto label2;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r3;

     label2:
        r4 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r2;

        $r1 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label3:
        if $i0 < 0 goto label4;

        $i1 = $r1[$i0];

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i2 = $r5[$i0];

        $i1 = $i1 ^ $i2;

        $r1[$i0] = $i1;

        $i0 = $i0 + -1;

        goto label3;

     label4:
        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int,int[])>($i0, $r1);

        return r4;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: boolean equals(int[],int[])>($r3, $r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Vector extractLeftVector(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r2;
        int $i0, i1, i2;
        java.lang.ArithmeticException $r1;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 <= i1 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("invalid length");

        throw $r1;

     label1:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 != i1 goto label2;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Vector)>(r0);

        return r2;

     label2:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>($i0);

        i1 = $i0 >> 5;

        i2 = $i0 & 31;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, i1);

        if i2 == 0 goto label3;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i0 = $r4[i1];

        i2 = 1 << i2;

        i2 = i2 + -1;

        $i0 = $i0 & i2;

        $r3[i1] = $i0;

     label3:
        return r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Vector extractRightVector(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r2;
        int $i0, i1, i2, i3, i4, $i5, $i6;
        java.lang.ArithmeticException $r1;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 <= i2 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("invalid length");

        throw $r1;

     label1:
        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 != i2 goto label2;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Vector)>(r0);

        return r2;

     label2:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>($i0);

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i2 = i2 - $i0;

        i1 = i2 >> 5;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i2 = i2 - $i0;

        i2 = i2 & 31;

        $i0 = $i0 + 31;

        $i0 = $i0 >> 5;

        if i2 == 0 goto label5;

        i3 = 0;

        i4 = i1;

     label3:
        i1 = $i0 + -1;

        if i3 >= i1 goto label4;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = i4 + 1;

        i4 = $r4[i4];

        i4 = i4 >>> i2;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i5 = $r4[i1];

        $i6 = 32 - i2;

        $i5 = $i5 << $i6;

        i4 = i4 | $i5;

        $r3[i3] = i4;

        i3 = i3 + 1;

        i4 = i1;

        goto label3;

     label4:
        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = $i0 + -1;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i3 = i4 + 1;

        i4 = $r4[i4];

        i4 = i4 >>> i2;

        $r3[i1] = i4;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = lengthof $r3;

        if i3 >= i1 goto label6;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i0 = $i0 + -1;

        i1 = $r3[$i0];

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i3 = $r4[i3];

        i2 = 32 - i2;

        i2 = i3 << i2;

        i2 = i1 | i2;

        $r3[$i0] = i2;

        return r2;

     label5:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i1, $r4, 0, $i0);

     label6:
        return r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Vector extractVector(int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r2;
        int[] $r1, $r4;
        int i0, i1, $i2, $i3, $i4;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: int[];

        i1 = lengthof $r1;

        $i2 = i1 + -1;

        $i2 = $r1[$i2];

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i2 <= i0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("invalid index set");

        throw $r3;

     label1:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>(i1);

        $i2 = 0;

     label2:
        if $i2 >= i1 goto label4;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i0 = $r1[$i2];

        i0 = i0 >> 5;

        i0 = $r4[i0];

        $i3 = $r1[$i2];

        $i3 = $i3 & 31;

        $i3 = 1 << $i3;

        i0 = i0 & $i3;

        if i0 == 0 goto label3;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i0 = $i2 >> 5;

        $i3 = $r4[i0];

        $i4 = $i2 & 31;

        $i4 = 1 << $i4;

        $i3 = $i3 | $i4;

        $r4[i0] = $i3;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return r2;
    }
    public int getBit(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 < i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        i1 = $i0 >> 5;

        $i0 = $i0 & 31;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = $r2[i1];

        $i2 = 1 << $i0;

        i1 = i1 & $i2;

        $i0 = i1 >>> $i0;

        return $i0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int i0;
        byte[] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i0 = i0 + 7;

        i0 = i0 >> 3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: byte[] toByteArray(int[],int)>($r2, i0);

        return $r1;
    }
    public int getHammingWeight()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int i0, i1, i2, i3, i4;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        i1 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i0 = lengthof $r1;

        if i2 >= i0 goto label5;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i3 = $r1[i2];

        i4 = 0;

     label2:
        if i4 >= 32 goto label4;

        i0 = i3 & 1;

        if i0 == 0 goto label3;

        i1 = i1 + 1;

     label3:
        i3 = i3 >>> 1;

        i4 = i4 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return i1;
    }
    public int[] getVecArray()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int[] r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        return r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        $i0 = $i0 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public boolean isZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i1 = $r1[$i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0, r2;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r1;
        int i0, $i1, $i2, $i3;
        int[] $r3, $r5;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i0 = lengthof $r3;

        if $i1 == i0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label1:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>($i1);

        $i1 = 0;

     label2:
        i0 = lengthof $r3;

        if $i1 >= i0 goto label4;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i0 = $r3[$i1];

        i0 = i0 >> 5;

        i0 = $r5[i0];

        $i2 = $r3[$i1];

        $i2 = $i2 & 31;

        $i2 = 1 << $i2;

        i0 = i0 & $i2;

        if i0 == 0 goto label3;

        $r5 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i0 = $i1 >> 5;

        $i2 = $r5[i0];

        $i3 = $i1 & 31;

        $i3 = 1 << $i3;

        $i2 = $i2 | $i3;

        $r5[i0] = $i2;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return r2;
    }
    public void setBit(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int $i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if $i0 < $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        $i1 = $i0 >> 5;

        $i2 = $r2[$i1];

        $i0 = $i0 & 31;

        $i0 = 1 << $i0;

        $i0 = $i2 | $i0;

        $r2[$i1] = $i0;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2mVector toExtensionFieldVector(org.spongycastle.pqc.math.linearalgebra.GF2mField)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int i0, i1, i2, $i3, $i4;
        int[] r2, $r4;
        java.lang.ArithmeticException $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mVector $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i2 = i2 % $i3;

        if i2 == 0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("conversion is impossible");

        throw $r3;

     label1:
        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        i2 = i2 / $i3;

        r2 = newarray (int)[i2];

        $i3 = 0;

        i2 = i2 + -1;

     label2:
        if i2 < 0 goto label6;

        $i4 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        $i4 = $i4 + -1;

     label3:
        if $i4 < 0 goto label5;

        i1 = $i3 >>> 5;

        i0 = $i3 & 31;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = $r4[i1];

        i0 = i1 >>> i0;

        i0 = i0 & 1;

        if i0 != 1 goto label4;

        i0 = r2[i2];

        i1 = 1 << $i4;

        i0 = i0 ^ i1;

        r2[i2] = i0;

     label4:
        $i3 = $i3 + 1;

        $i4 = $i4 + -1;

        goto label3;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        $r5 = new org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r1, r2);

        return $r5;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r0;
        int i0, i1, i2;
        java.lang.StringBuffer r1;
        java.lang.String $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label1:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int length>;

        if i2 >= i0 goto label5;

        if i2 == 0 goto label2;

        i0 = i2 & 31;

        if i0 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label2:
        i1 = i2 >> 5;

        i0 = i2 & 31;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] v>;

        i1 = $r3[i1];

        i0 = 1 << i0;

        i0 = i1 & i0;

        if i0 != 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        goto label3;

     label5:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
