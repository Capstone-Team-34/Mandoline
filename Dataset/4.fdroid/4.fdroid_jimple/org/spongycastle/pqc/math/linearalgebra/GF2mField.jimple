org.spongycastle.pqc.math.linearalgebra.GF2mField extends java.lang.Object
private int degree
private int polynomial
    public void <init>(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = 0;

        if $i0 < 32 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: the degree of field is too large ");

        throw $r1;

     label1:
        if $i0 >= 1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: the degree of field is non-positive ");

        throw $r1;

     label2:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = $i0;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int getIrreduciblePolynomial(int)>($i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial> = $i0;

        return;
    }
    public void <init>(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = 0;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i1);

        if $i0 == $i2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: the degree is not correct");

        throw $r1;

     label1:
        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: boolean isIrreducible(int)>($i1);

        if $z0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: given polynomial is reducible");

        throw $r1;

     label2:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial> = $i1;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = 0;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial> = $i0;

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        byte[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = 0;

        $i0 = lengthof $r1;

        if $i0 == 4 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("byte array is not an encoded finite field");

        throw $r2;

     label1:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[])>($r1);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: boolean isIrreducible(int)>($i0);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("byte array is not an encoded finite field");

        throw $r2;

     label2:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree> = $i0;

        return;
    }
    private static java.lang.String polyToString(int)
    {
        int $i0, $i1, $i3;
        java.lang.String r0;
        byte b2;
        java.lang.StringBuilder $r1;

        $i0 := @parameter0: int;

        r0 = "";

        if $i0 != 0 goto label1;

        return "0";

     label1:
        $i1 = $i0 & 1;

        b2 = (byte) $i1;

        if b2 != 1 goto label2;

        r0 = "1";

     label2:
        $i0 = $i0 >>> 1;

        $i1 = 1;

     label3:
        if $i0 == 0 goto label5;

        $i3 = $i0 & 1;

        b2 = (byte) $i3;

        if b2 != 1 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+x^");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $i0 = $i0 >>> 1;

        $i1 = $i1 + 1;

        goto label3;

     label5:
        return r0;
    }
    public int add(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public java.lang.String elementToStr(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, i1, $i2;
        java.lang.String r1;
        byte $b3;
        java.lang.StringBuilder $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        r1 = "";

        i1 = 0;

     label1:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        if i1 >= $i2 goto label4;

        $b3 = (byte) $i0;

        $i2 = $b3 & 1;

        if $i2 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $i0 = $i0 >>> 1;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label4:
        return r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label2;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2mField;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2mField) $r1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        return 0;
    }
    public int exp(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        if $i2 != 0 goto label1;

        return 1;

     label1:
        if $i1 != 0 goto label2;

        return 0;

     label2:
        if $i1 != 1 goto label3;

        return 1;

     label3:
        i3 = 1;

        if $i2 >= 0 goto label4;

        $i1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i1);

        $i2 = neg $i2;

     label4:
        if $i2 == 0 goto label6;

        $i0 = $i2 & 1;

        if $i0 != 1 goto label5;

        i3 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>(i3, $i1);

     label5:
        $i1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i1, $i1);

        $i2 = $i2 >>> 1;

        goto label4;

     label6:
        return i3;
    }
    public int getDegree()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        return i0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: byte[] I2OSP(int)>($i0);

        return $r1;
    }
    public int getPolynomial()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        return i0;
    }
    public int getRandomElement(java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        java.security.SecureRandom $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter0: java.security.SecureRandom;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $i0 = 1 << $i0;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, $i0);

        return $i0;
    }
    public int getRandomNonZeroElement()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getRandomNonZeroElement(java.security.SecureRandom)>($r1);

        return $i0;
    }
    public int getRandomNonZeroElement(java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        java.security.SecureRandom $r1;
        int i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter0: java.security.SecureRandom;

        i0 = 0;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $i1 = 1 << $i1;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, $i1);

     label1:
        if $i1 != 0 goto label2;

        if i0 >= 1048576 goto label2;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $i1 = 1 << $i1;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, $i1);

        i0 = i0 + 1;

        goto label1;

     label2:
        if i0 != 1048576 goto label3;

        return 1;

     label3:
        return $i1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        return i0;
    }
    public int inverse(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        i1 = 1 << i1;

        i1 = i1 + -2;

        $i0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int exp(int,int)>($i0, i1);

        return $i0;
    }
    public boolean isElementOfThisField(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        if $i1 != 31 goto label2;

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        if $i0 < 0 goto label3;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $i1 = 1 << $i1;

        if $i0 < $i1 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public int mult(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int modMultiply(int,int,int)>($i0, $i1, $i2);

        return $i0;
    }
    public int sqRoot(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        int $i0, $i1, i2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i1 := @parameter0: int;

        i2 = 1;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        if i2 >= $i0 goto label2;

        $i1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i1, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $i1;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finite Field GF(2^");

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int degree>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GF(2)[X]/<");

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int polynomial>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2mField: java.lang.String polyToString(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
