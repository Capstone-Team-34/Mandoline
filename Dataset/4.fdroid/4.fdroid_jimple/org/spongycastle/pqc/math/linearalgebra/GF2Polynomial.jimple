org.spongycastle.pqc.math.linearalgebra.GF2Polynomial extends java.lang.Object
private static final int[] bitMask
private static final boolean[] parity
private static java.util.Random rand
private static final int[] reverseRightMask
private static final short[] squaringTable
private int blocks
private int len
private int[] value
    static void <clinit>()
    {
        java.util.Random $r0;
        boolean[] $r1;
        short[] $r2;
        int[] $r3;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: java.util.Random rand> = $r0;

        $r1 = newarray (boolean)[256];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 0;

        $r1[4] = 1;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 1;

        $r1[8] = 1;

        $r1[9] = 0;

        $r1[10] = 0;

        $r1[11] = 1;

        $r1[12] = 0;

        $r1[13] = 1;

        $r1[14] = 1;

        $r1[15] = 0;

        $r1[16] = 1;

        $r1[17] = 0;

        $r1[18] = 0;

        $r1[19] = 1;

        $r1[20] = 0;

        $r1[21] = 1;

        $r1[22] = 1;

        $r1[23] = 0;

        $r1[24] = 0;

        $r1[25] = 1;

        $r1[26] = 1;

        $r1[27] = 0;

        $r1[28] = 1;

        $r1[29] = 0;

        $r1[30] = 0;

        $r1[31] = 1;

        $r1[32] = 1;

        $r1[33] = 0;

        $r1[34] = 0;

        $r1[35] = 1;

        $r1[36] = 0;

        $r1[37] = 1;

        $r1[38] = 1;

        $r1[39] = 0;

        $r1[40] = 0;

        $r1[41] = 1;

        $r1[42] = 1;

        $r1[43] = 0;

        $r1[44] = 1;

        $r1[45] = 0;

        $r1[46] = 0;

        $r1[47] = 1;

        $r1[48] = 0;

        $r1[49] = 1;

        $r1[50] = 1;

        $r1[51] = 0;

        $r1[52] = 1;

        $r1[53] = 0;

        $r1[54] = 0;

        $r1[55] = 1;

        $r1[56] = 1;

        $r1[57] = 0;

        $r1[58] = 0;

        $r1[59] = 1;

        $r1[60] = 0;

        $r1[61] = 1;

        $r1[62] = 1;

        $r1[63] = 0;

        $r1[64] = 1;

        $r1[65] = 0;

        $r1[66] = 0;

        $r1[67] = 1;

        $r1[68] = 0;

        $r1[69] = 1;

        $r1[70] = 1;

        $r1[71] = 0;

        $r1[72] = 0;

        $r1[73] = 1;

        $r1[74] = 1;

        $r1[75] = 0;

        $r1[76] = 1;

        $r1[77] = 0;

        $r1[78] = 0;

        $r1[79] = 1;

        $r1[80] = 0;

        $r1[81] = 1;

        $r1[82] = 1;

        $r1[83] = 0;

        $r1[84] = 1;

        $r1[85] = 0;

        $r1[86] = 0;

        $r1[87] = 1;

        $r1[88] = 1;

        $r1[89] = 0;

        $r1[90] = 0;

        $r1[91] = 1;

        $r1[92] = 0;

        $r1[93] = 1;

        $r1[94] = 1;

        $r1[95] = 0;

        $r1[96] = 0;

        $r1[97] = 1;

        $r1[98] = 1;

        $r1[99] = 0;

        $r1[100] = 1;

        $r1[101] = 0;

        $r1[102] = 0;

        $r1[103] = 1;

        $r1[104] = 1;

        $r1[105] = 0;

        $r1[106] = 0;

        $r1[107] = 1;

        $r1[108] = 0;

        $r1[109] = 1;

        $r1[110] = 1;

        $r1[111] = 0;

        $r1[112] = 1;

        $r1[113] = 0;

        $r1[114] = 0;

        $r1[115] = 1;

        $r1[116] = 0;

        $r1[117] = 1;

        $r1[118] = 1;

        $r1[119] = 0;

        $r1[120] = 0;

        $r1[121] = 1;

        $r1[122] = 1;

        $r1[123] = 0;

        $r1[124] = 1;

        $r1[125] = 0;

        $r1[126] = 0;

        $r1[127] = 1;

        $r1[128] = 1;

        $r1[129] = 0;

        $r1[130] = 0;

        $r1[131] = 1;

        $r1[132] = 0;

        $r1[133] = 1;

        $r1[134] = 1;

        $r1[135] = 0;

        $r1[136] = 0;

        $r1[137] = 1;

        $r1[138] = 1;

        $r1[139] = 0;

        $r1[140] = 1;

        $r1[141] = 0;

        $r1[142] = 0;

        $r1[143] = 1;

        $r1[144] = 0;

        $r1[145] = 1;

        $r1[146] = 1;

        $r1[147] = 0;

        $r1[148] = 1;

        $r1[149] = 0;

        $r1[150] = 0;

        $r1[151] = 1;

        $r1[152] = 1;

        $r1[153] = 0;

        $r1[154] = 0;

        $r1[155] = 1;

        $r1[156] = 0;

        $r1[157] = 1;

        $r1[158] = 1;

        $r1[159] = 0;

        $r1[160] = 0;

        $r1[161] = 1;

        $r1[162] = 1;

        $r1[163] = 0;

        $r1[164] = 1;

        $r1[165] = 0;

        $r1[166] = 0;

        $r1[167] = 1;

        $r1[168] = 1;

        $r1[169] = 0;

        $r1[170] = 0;

        $r1[171] = 1;

        $r1[172] = 0;

        $r1[173] = 1;

        $r1[174] = 1;

        $r1[175] = 0;

        $r1[176] = 1;

        $r1[177] = 0;

        $r1[178] = 0;

        $r1[179] = 1;

        $r1[180] = 0;

        $r1[181] = 1;

        $r1[182] = 1;

        $r1[183] = 0;

        $r1[184] = 0;

        $r1[185] = 1;

        $r1[186] = 1;

        $r1[187] = 0;

        $r1[188] = 1;

        $r1[189] = 0;

        $r1[190] = 0;

        $r1[191] = 1;

        $r1[192] = 0;

        $r1[193] = 1;

        $r1[194] = 1;

        $r1[195] = 0;

        $r1[196] = 1;

        $r1[197] = 0;

        $r1[198] = 0;

        $r1[199] = 1;

        $r1[200] = 1;

        $r1[201] = 0;

        $r1[202] = 0;

        $r1[203] = 1;

        $r1[204] = 0;

        $r1[205] = 1;

        $r1[206] = 1;

        $r1[207] = 0;

        $r1[208] = 1;

        $r1[209] = 0;

        $r1[210] = 0;

        $r1[211] = 1;

        $r1[212] = 0;

        $r1[213] = 1;

        $r1[214] = 1;

        $r1[215] = 0;

        $r1[216] = 0;

        $r1[217] = 1;

        $r1[218] = 1;

        $r1[219] = 0;

        $r1[220] = 1;

        $r1[221] = 0;

        $r1[222] = 0;

        $r1[223] = 1;

        $r1[224] = 1;

        $r1[225] = 0;

        $r1[226] = 0;

        $r1[227] = 1;

        $r1[228] = 0;

        $r1[229] = 1;

        $r1[230] = 1;

        $r1[231] = 0;

        $r1[232] = 0;

        $r1[233] = 1;

        $r1[234] = 1;

        $r1[235] = 0;

        $r1[236] = 1;

        $r1[237] = 0;

        $r1[238] = 0;

        $r1[239] = 1;

        $r1[240] = 0;

        $r1[241] = 1;

        $r1[242] = 1;

        $r1[243] = 0;

        $r1[244] = 1;

        $r1[245] = 0;

        $r1[246] = 0;

        $r1[247] = 1;

        $r1[248] = 1;

        $r1[249] = 0;

        $r1[250] = 0;

        $r1[251] = 1;

        $r1[252] = 0;

        $r1[253] = 1;

        $r1[254] = 1;

        $r1[255] = 0;

        <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean[] parity> = $r1;

        $r2 = newarray (short)[256];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 4;

        $r2[3] = 5;

        $r2[4] = 16;

        $r2[5] = 17;

        $r2[6] = 20;

        $r2[7] = 21;

        $r2[8] = 64;

        $r2[9] = 65;

        $r2[10] = 68;

        $r2[11] = 69;

        $r2[12] = 80;

        $r2[13] = 81;

        $r2[14] = 84;

        $r2[15] = 85;

        $r2[16] = 256;

        $r2[17] = 257;

        $r2[18] = 260;

        $r2[19] = 261;

        $r2[20] = 272;

        $r2[21] = 273;

        $r2[22] = 276;

        $r2[23] = 277;

        $r2[24] = 320;

        $r2[25] = 321;

        $r2[26] = 324;

        $r2[27] = 325;

        $r2[28] = 336;

        $r2[29] = 337;

        $r2[30] = 340;

        $r2[31] = 341;

        $r2[32] = 1024;

        $r2[33] = 1025;

        $r2[34] = 1028;

        $r2[35] = 1029;

        $r2[36] = 1040;

        $r2[37] = 1041;

        $r2[38] = 1044;

        $r2[39] = 1045;

        $r2[40] = 1088;

        $r2[41] = 1089;

        $r2[42] = 1092;

        $r2[43] = 1093;

        $r2[44] = 1104;

        $r2[45] = 1105;

        $r2[46] = 1108;

        $r2[47] = 1109;

        $r2[48] = 1280;

        $r2[49] = 1281;

        $r2[50] = 1284;

        $r2[51] = 1285;

        $r2[52] = 1296;

        $r2[53] = 1297;

        $r2[54] = 1300;

        $r2[55] = 1301;

        $r2[56] = 1344;

        $r2[57] = 1345;

        $r2[58] = 1348;

        $r2[59] = 1349;

        $r2[60] = 1360;

        $r2[61] = 1361;

        $r2[62] = 1364;

        $r2[63] = 1365;

        $r2[64] = 4096;

        $r2[65] = 4097;

        $r2[66] = 4100;

        $r2[67] = 4101;

        $r2[68] = 4112;

        $r2[69] = 4113;

        $r2[70] = 4116;

        $r2[71] = 4117;

        $r2[72] = 4160;

        $r2[73] = 4161;

        $r2[74] = 4164;

        $r2[75] = 4165;

        $r2[76] = 4176;

        $r2[77] = 4177;

        $r2[78] = 4180;

        $r2[79] = 4181;

        $r2[80] = 4352;

        $r2[81] = 4353;

        $r2[82] = 4356;

        $r2[83] = 4357;

        $r2[84] = 4368;

        $r2[85] = 4369;

        $r2[86] = 4372;

        $r2[87] = 4373;

        $r2[88] = 4416;

        $r2[89] = 4417;

        $r2[90] = 4420;

        $r2[91] = 4421;

        $r2[92] = 4432;

        $r2[93] = 4433;

        $r2[94] = 4436;

        $r2[95] = 4437;

        $r2[96] = 5120;

        $r2[97] = 5121;

        $r2[98] = 5124;

        $r2[99] = 5125;

        $r2[100] = 5136;

        $r2[101] = 5137;

        $r2[102] = 5140;

        $r2[103] = 5141;

        $r2[104] = 5184;

        $r2[105] = 5185;

        $r2[106] = 5188;

        $r2[107] = 5189;

        $r2[108] = 5200;

        $r2[109] = 5201;

        $r2[110] = 5204;

        $r2[111] = 5205;

        $r2[112] = 5376;

        $r2[113] = 5377;

        $r2[114] = 5380;

        $r2[115] = 5381;

        $r2[116] = 5392;

        $r2[117] = 5393;

        $r2[118] = 5396;

        $r2[119] = 5397;

        $r2[120] = 5440;

        $r2[121] = 5441;

        $r2[122] = 5444;

        $r2[123] = 5445;

        $r2[124] = 5456;

        $r2[125] = 5457;

        $r2[126] = 5460;

        $r2[127] = 5461;

        $r2[128] = 16384;

        $r2[129] = 16385;

        $r2[130] = 16388;

        $r2[131] = 16389;

        $r2[132] = 16400;

        $r2[133] = 16401;

        $r2[134] = 16404;

        $r2[135] = 16405;

        $r2[136] = 16448;

        $r2[137] = 16449;

        $r2[138] = 16452;

        $r2[139] = 16453;

        $r2[140] = 16464;

        $r2[141] = 16465;

        $r2[142] = 16468;

        $r2[143] = 16469;

        $r2[144] = 16640;

        $r2[145] = 16641;

        $r2[146] = 16644;

        $r2[147] = 16645;

        $r2[148] = 16656;

        $r2[149] = 16657;

        $r2[150] = 16660;

        $r2[151] = 16661;

        $r2[152] = 16704;

        $r2[153] = 16705;

        $r2[154] = 16708;

        $r2[155] = 16709;

        $r2[156] = 16720;

        $r2[157] = 16721;

        $r2[158] = 16724;

        $r2[159] = 16725;

        $r2[160] = 17408;

        $r2[161] = 17409;

        $r2[162] = 17412;

        $r2[163] = 17413;

        $r2[164] = 17424;

        $r2[165] = 17425;

        $r2[166] = 17428;

        $r2[167] = 17429;

        $r2[168] = 17472;

        $r2[169] = 17473;

        $r2[170] = 17476;

        $r2[171] = 17477;

        $r2[172] = 17488;

        $r2[173] = 17489;

        $r2[174] = 17492;

        $r2[175] = 17493;

        $r2[176] = 17664;

        $r2[177] = 17665;

        $r2[178] = 17668;

        $r2[179] = 17669;

        $r2[180] = 17680;

        $r2[181] = 17681;

        $r2[182] = 17684;

        $r2[183] = 17685;

        $r2[184] = 17728;

        $r2[185] = 17729;

        $r2[186] = 17732;

        $r2[187] = 17733;

        $r2[188] = 17744;

        $r2[189] = 17745;

        $r2[190] = 17748;

        $r2[191] = 17749;

        $r2[192] = 20480;

        $r2[193] = 20481;

        $r2[194] = 20484;

        $r2[195] = 20485;

        $r2[196] = 20496;

        $r2[197] = 20497;

        $r2[198] = 20500;

        $r2[199] = 20501;

        $r2[200] = 20544;

        $r2[201] = 20545;

        $r2[202] = 20548;

        $r2[203] = 20549;

        $r2[204] = 20560;

        $r2[205] = 20561;

        $r2[206] = 20564;

        $r2[207] = 20565;

        $r2[208] = 20736;

        $r2[209] = 20737;

        $r2[210] = 20740;

        $r2[211] = 20741;

        $r2[212] = 20752;

        $r2[213] = 20753;

        $r2[214] = 20756;

        $r2[215] = 20757;

        $r2[216] = 20800;

        $r2[217] = 20801;

        $r2[218] = 20804;

        $r2[219] = 20805;

        $r2[220] = 20816;

        $r2[221] = 20817;

        $r2[222] = 20820;

        $r2[223] = 20821;

        $r2[224] = 21504;

        $r2[225] = 21505;

        $r2[226] = 21508;

        $r2[227] = 21509;

        $r2[228] = 21520;

        $r2[229] = 21521;

        $r2[230] = 21524;

        $r2[231] = 21525;

        $r2[232] = 21568;

        $r2[233] = 21569;

        $r2[234] = 21572;

        $r2[235] = 21573;

        $r2[236] = 21584;

        $r2[237] = 21585;

        $r2[238] = 21588;

        $r2[239] = 21589;

        $r2[240] = 21760;

        $r2[241] = 21761;

        $r2[242] = 21764;

        $r2[243] = 21765;

        $r2[244] = 21776;

        $r2[245] = 21777;

        $r2[246] = 21780;

        $r2[247] = 21781;

        $r2[248] = 21824;

        $r2[249] = 21825;

        $r2[250] = 21828;

        $r2[251] = 21829;

        $r2[252] = 21840;

        $r2[253] = 21841;

        $r2[254] = 21844;

        $r2[255] = 21845;

        <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable> = $r2;

        $r3 = newarray (int)[33];

        $r3[0] = 1;

        $r3[1] = 2;

        $r3[2] = 4;

        $r3[3] = 8;

        $r3[4] = 16;

        $r3[5] = 32;

        $r3[6] = 64;

        $r3[7] = 128;

        $r3[8] = 256;

        $r3[9] = 512;

        $r3[10] = 1024;

        $r3[11] = 2048;

        $r3[12] = 4096;

        $r3[13] = 8192;

        $r3[14] = 16384;

        $r3[15] = 32768;

        $r3[16] = 65536;

        $r3[17] = 131072;

        $r3[18] = 262144;

        $r3[19] = 524288;

        $r3[20] = 1048576;

        $r3[21] = 2097152;

        $r3[22] = 4194304;

        $r3[23] = 8388608;

        $r3[24] = 16777216;

        $r3[25] = 33554432;

        $r3[26] = 67108864;

        $r3[27] = 134217728;

        $r3[28] = 268435456;

        $r3[29] = 536870912;

        $r3[30] = 1073741824;

        $r3[31] = -2147483648;

        $r3[32] = 0;

        <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask> = $r3;

        $r3 = newarray (int)[33];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 3;

        $r3[3] = 7;

        $r3[4] = 15;

        $r3[5] = 31;

        $r3[6] = 63;

        $r3[7] = 127;

        $r3[8] = 255;

        $r3[9] = 511;

        $r3[10] = 1023;

        $r3[11] = 2047;

        $r3[12] = 4095;

        $r3[13] = 8191;

        $r3[14] = 16383;

        $r3[15] = 32767;

        $r3[16] = 65535;

        $r3[17] = 131071;

        $r3[18] = 262143;

        $r3[19] = 524287;

        $r3[20] = 1048575;

        $r3[21] = 2097151;

        $r3[22] = 4194303;

        $r3[23] = 8388607;

        $r3[24] = 16777215;

        $r3[25] = 33554431;

        $r3[26] = 67108863;

        $r3[27] = 134217727;

        $r3[28] = 268435455;

        $r3[29] = 536870911;

        $r3[30] = 1073741823;

        $r3[31] = 2147483647;

        $r3[32] = -1;

        <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] reverseRightMask> = $r3;

        return;
    }
    public void <init>(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r1 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        return;
    }
    public void <init>(int, java.lang.String)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1;
        java.lang.String $r1;
        int[] $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ZERO");

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void assignZero()>();

        return;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ONE");

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void assignOne()>();

        return;

     label3:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("RANDOM");

        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void randomize()>();

        return;

     label4:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("X");

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void assignX()>();

        return;

     label5:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ALL");

        if $z0 == 0 goto label6;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void assignAll()>();

        return;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: GF2Polynomial was called using ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as value!");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }
    public void <init>(int, java.math.BigInteger)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1, i3, $i4, $i5, $i6, $i7;
        java.math.BigInteger $r1;
        byte[] r2, $r3;
        int[] $r4, $r5;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.math.BigInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r4 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        $r3 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        r2 = $r3;

        $b2 = $r3[0];

        if $b2 != 0 goto label2;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 1, r2, 0, $i0);

     label2:
        $i0 = lengthof r2;

        $i0 = $i0 & 3;

        i1 = lengthof r2;

        i1 = i1 + -1;

        i1 = i1 >> 2;

        i1 = i1 + 1;

        i3 = 0;

     label3:
        if i3 >= $i0 goto label4;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i4 = i1 + -1;

        $i5 = $r4[$i4];

        $b2 = r2[i3];

        $i6 = $b2 & 255;

        $i7 = $i0 + -1;

        $i7 = $i7 - i3;

        $i7 = $i7 << 3;

        $i6 = $i6 << $i7;

        $i5 = $i5 | $i6;

        $r4[$i4] = $i5;

        i3 = i3 + 1;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        i1 = lengthof r2;

        i1 = i1 + -4;

        i1 = i1 >> 2;

        if $i0 > i1 goto label6;

        i1 = lengthof r2;

        i1 = i1 + -1;

        i3 = $i0 << 2;

        i1 = i1 - i3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $b2 = r2[i1];

        i3 = $b2 & 255;

        $r4[$i0] = i3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i3 = $r4[$i0];

        $i4 = i1 + -1;

        $b2 = r2[$i4];

        $i4 = $b2 << 8;

        $i4 = $i4 & 65280;

        i3 = i3 | $i4;

        $r4[$i0] = i3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i3 = $r4[$i0];

        $i4 = i1 + -2;

        $b2 = r2[$i4];

        $i4 = $b2 << 16;

        $i4 = $i4 & 16711680;

        i3 = i3 | $i4;

        $r4[$i0] = i3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i3 = $r4[$i0];

        i1 = i1 + -3;

        $b2 = r2[i1];

        i1 = $b2 << 24;

        i1 = i1 & -16777216;

        i1 = i3 | i1;

        $r4[$i0] = i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 & 31;

        if $i0 == 0 goto label7;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

        i1 = $r4[$i0];

        $r5 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] reverseRightMask>;

        i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        i3 = i3 & 31;

        i3 = $r5[i3];

        i1 = i1 & i3;

        $r4[$i0] = i1;

     label7:
        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        return;
    }
    public void <init>(int, java.util.Random)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1;
        java.util.Random $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void randomize(java.util.Random)>($r1);

        return;
    }
    public void <init>(int, byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1, $i2, $i3, $i5;
        byte[] $r1;
        int[] $r2;
        byte $b4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $i0 = $i0 >> 2;

        $i0 = $i0 + 1;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, i1);

        i1 = 0;

     label2:
        $i2 = $i0 + -1;

        if i1 >= $i2 goto label3;

        $i2 = lengthof $r1;

        $i3 = i1 << 2;

        $i2 = $i2 - $i3;

        $i2 = $i2 + -1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $b4 = $r1[$i2];

        $i3 = $b4 & 255;

        $r2[i1] = $i3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $r2[i1];

        $i5 = $i2 + -1;

        $b4 = $r1[$i5];

        $i5 = $b4 << 8;

        $i5 = $i5 & 65280;

        $i3 = $i3 | $i5;

        $r2[i1] = $i3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $r2[i1];

        $i5 = $i2 + -2;

        $b4 = $r1[$i5];

        $i5 = $b4 << 16;

        $i5 = $i5 & 16711680;

        $i3 = $i3 | $i5;

        $r2[i1] = $i3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $r2[i1];

        $i2 = $i2 + -3;

        $b4 = $r1[$i2];

        $i2 = $b4 << 24;

        $i2 = $i2 & -16777216;

        $i2 = $i3 | $i2;

        $r2[i1] = $i2;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + -1;

        i1 = lengthof $r1;

        $i2 = $i0 << 2;

        i1 = i1 - $i2;

        i1 = i1 + -1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $b4 = $r1[i1];

        $i2 = $b4 & 255;

        $r2[$i0] = $i2;

        if i1 <= 0 goto label4;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i0];

        $i3 = i1 + -1;

        $b4 = $r1[$i3];

        $i3 = $b4 << 8;

        $i3 = $i3 & 65280;

        $i2 = $i2 | $i3;

        $r2[$i0] = $i2;

     label4:
        if i1 <= 1 goto label5;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i0];

        $i3 = i1 + -2;

        $b4 = $r1[$i3];

        $i3 = $b4 << 16;

        $i3 = $i3 & 16711680;

        $i2 = $i2 | $i3;

        $r2[$i0] = $i2;

     label5:
        if i1 <= 2 goto label6;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i0];

        i1 = i1 + -3;

        $b4 = $r1[i1];

        i1 = $b4 << 24;

        i1 = i1 & -16777216;

        i1 = $i2 | i1;

        $r2[$i0] = i1;

     label6:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        return;
    }
    public void <init>(int, int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = $i0;

        if $i0 >= 1 goto label1;

        i1 = 1;

     label1:
        $i0 = i1 + -1;

        $i0 = $i0 >> 5;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = i1;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i0);

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r2;

        return;
    }
    private void doShiftBlocksLeft(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        int[] r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = lengthof r1;

        if $i2 > $i1 goto label4;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $i2 + -1;

     label1:
        if $i2 < $i0 goto label2;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i2 - $i0;

        $i1 = $r2[$i1];

        r1[$i2] = $i1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= $i0 goto label5;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        r1[$i2] = 0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = newarray (int)[$i2];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $i2 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, $i0, $i2);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

     label5:
        return;
    }
    private org.spongycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r2, $r5, $r6, $r7, $r8;
        int $i0, $i1;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 << 1;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 > 32 goto label1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $r3[0];

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r3[0];

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>($i0, $i1);

        r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r3;

        return r2;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 > 64 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult64(int[],int[])>($r3, $r4);

        r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r3;

        return r2;

     label2:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 > 128 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult128(int[],int[])>($r3, $r4);

        r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r3;

        return r2;

     label3:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 > 256 goto label4;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult256(int[],int[])>($r3, $r4);

        r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r3;

        return r2;

     label4:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 > 512 goto label5;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult512(int[],int[])>($r3, $r4);

        r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = $r3;

        return r2;

     label5:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 + -1;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int floorLog(int)>($i0);

        $r3 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $r3[$i0];

        $i1 = $i0 + -1;

        $i1 = $i1 >> 5;

        $i1 = $i1 + 1;

        $r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial lower(int)>($i1);

        $i1 = $i0 + -1;

        $i1 = $i1 >> 5;

        $i1 = $i1 + 1;

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial upper(int)>($i1);

        $i1 = $i0 + -1;

        $i1 = $i1 >> 5;

        $i1 = $i1 + 1;

        $r6 = specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial lower(int)>($i1);

        $i1 = $i0 + -1;

        $i1 = $i1 >> 5;

        $i1 = $i1 + 1;

        $r7 = specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial upper(int)>($i1);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r7);

        $r8 = specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r6);

        virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        virtualinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r7);

        r0 = specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r6);

        $i1 = $i0 << 1;

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void shiftLeftAddThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,int)>($r1, $i1);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void shiftLeftAddThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,int)>($r1, $i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void shiftLeftAddThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,int)>(r0, $i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void shiftLeftAddThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,int)>($r8, $i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r8);

        return r2;
    }
    private org.spongycastle.pqc.math.linearalgebra.GF2Polynomial lower(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;
        int $i0, $i1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = $i0 << 5;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i1);

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        return r1;
    }
    private static int[] mult128(int[], int[])
    {
        int[] $r0, $r1, r2, r3, r4, r5;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        r5 = newarray (int)[8];

        r2 = newarray (int)[2];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        r3 = newarray (int)[2];

        $i0 = lengthof $r0;

        if $i0 <= 2 goto label1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 2, r3, 0, $i0);

     label1:
        $r0 = newarray (int)[2];

        $i0 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r0, 0, $i0);

        r4 = newarray (int)[2];

        $i0 = lengthof $r1;

        if $i0 <= 2 goto label2;

        $i0 = lengthof $r1;

        $i0 = $i0 + -2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 2, r4, 0, $i0);

     label2:
        $i0 = r3[1];

        if $i0 != 0 goto label6;

        $i0 = r4[1];

        if $i0 != 0 goto label6;

        $i0 = r3[0];

        if $i0 != 0 goto label3;

        $i0 = r4[0];

        if $i0 == 0 goto label4;

     label3:
        $i0 = r3[0];

        $i1 = r4[0];

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>($i0, $i1);

        $i0 = r5[5];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

     label4:
        $i0 = r3[0];

        $i1 = r2[0];

        $i0 = $i0 ^ $i1;

        r3[0] = $i0;

        $i0 = r3[1];

        $i1 = r2[1];

        $i0 = $i0 ^ $i1;

        r3[1] = $i0;

        $i0 = r4[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r4[0] = $i0;

        $i0 = r4[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r4[1] = $i0;

        $i0 = r3[1];

        if $i0 != 0 goto label7;

        $i0 = r4[1];

        if $i0 != 0 goto label7;

        $i0 = r3[0];

        $i1 = r4[0];

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>($i0, $i1);

        $i0 = r5[3];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

     label5:
        $i0 = r2[1];

        if $i0 != 0 goto label8;

        $i0 = $r0[1];

        if $i0 != 0 goto label8;

        $i0 = r2[0];

        $i1 = $r0[0];

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>($i0, $i1);

        $i0 = r5[3];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        $i0 = r5[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r5[1] = $i0;

        $i0 = r5[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r5[0] = $i0;

        return r5;

     label6:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult64(int[],int[])>(r3, r4);

        $i0 = r5[7];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r1[1];

        $i2 = $r1[3];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i2 = $r1[2];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        goto label4;

     label7:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult64(int[],int[])>(r3, r4);

        $i0 = r5[5];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        goto label5;

     label8:
        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult64(int[],int[])>(r2, $r0);

        $i0 = r5[5];

        $i1 = $r0[3];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r0[2];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r0[1];

        $i2 = $r0[3];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r0[0];

        $i2 = $r0[2];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        $i0 = r5[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r5[1] = $i0;

        $i0 = r5[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r5[0] = $i0;

        return r5;
    }
    private static int[] mult256(int[], int[])
    {
        int[] $r0, $r1, r2, r3, r4, r5;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        r5 = newarray (int)[16];

        r2 = newarray (int)[4];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(4, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        r3 = newarray (int)[4];

        $i0 = lengthof $r0;

        if $i0 <= 4 goto label1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -4;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(4, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 4, r3, 0, $i0);

     label1:
        $r0 = newarray (int)[4];

        $i0 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(4, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r0, 0, $i0);

        r4 = newarray (int)[4];

        $i0 = lengthof $r1;

        if $i0 <= 4 goto label2;

        $i0 = lengthof $r1;

        $i0 = $i0 + -4;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(4, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 4, r4, 0, $i0);

     label2:
        $i0 = r3[3];

        if $i0 != 0 goto label6;

        $i0 = r3[2];

        if $i0 != 0 goto label6;

        $i0 = r4[3];

        if $i0 != 0 goto label6;

        $i0 = r4[2];

        if $i0 != 0 goto label6;

        $i0 = r3[1];

        if $i0 != 0 goto label5;

        $i0 = r4[1];

        if $i0 != 0 goto label5;

        $i0 = r3[0];

        if $i0 != 0 goto label3;

        $i0 = r4[0];

        if $i0 == 0 goto label4;

     label3:
        $i0 = r3[0];

        $i1 = r4[0];

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>($i0, $i1);

        $i0 = r5[9];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[5];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

     label4:
        $i0 = r3[0];

        $i1 = r2[0];

        $i0 = $i0 ^ $i1;

        r3[0] = $i0;

        $i0 = r3[1];

        $i1 = r2[1];

        $i0 = $i0 ^ $i1;

        r3[1] = $i0;

        $i0 = r3[2];

        $i1 = r2[2];

        $i0 = $i0 ^ $i1;

        r3[2] = $i0;

        $i0 = r3[3];

        $i1 = r2[3];

        $i0 = $i0 ^ $i1;

        r3[3] = $i0;

        $i0 = r4[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r4[0] = $i0;

        $i0 = r4[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r4[1] = $i0;

        $i0 = r4[2];

        $i1 = $r0[2];

        $i0 = $i0 ^ $i1;

        r4[2] = $i0;

        $i0 = r4[3];

        $i1 = $r0[3];

        $i0 = $i0 ^ $i1;

        r4[3] = $i0;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult128(int[],int[])>(r3, r4);

        $i0 = r5[11];

        $i1 = $r1[7];

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r1[6];

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r1[5];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[4];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[7];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult128(int[],int[])>(r2, $r0);

        $i0 = r5[11];

        $i1 = $r0[7];

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r0[6];

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r0[5];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r0[4];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[7];

        $i1 = $r0[3];

        $i2 = $r0[7];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r0[2];

        $i2 = $r0[6];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r0[1];

        $i2 = $r0[5];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r0[0];

        $i2 = $r0[4];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r0[3];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r0[2];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        $i0 = r5[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r5[1] = $i0;

        $i0 = r5[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r5[0] = $i0;

        return r5;

     label5:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult64(int[],int[])>(r3, r4);

        $i0 = r5[11];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[7];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        goto label4;

     label6:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult128(int[],int[])>(r3, r4);

        $i0 = r5[15];

        $i1 = $r1[7];

        $i0 = $i0 ^ $i1;

        r5[15] = $i0;

        $i0 = r5[14];

        $i1 = $r1[6];

        $i0 = $i0 ^ $i1;

        r5[14] = $i0;

        $i0 = r5[13];

        $i1 = $r1[5];

        $i0 = $i0 ^ $i1;

        r5[13] = $i0;

        $i0 = r5[12];

        $i1 = $r1[4];

        $i0 = $i0 ^ $i1;

        r5[12] = $i0;

        $i0 = r5[11];

        $i1 = $r1[3];

        $i2 = $r1[7];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r1[2];

        $i2 = $r1[6];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r1[1];

        $i2 = $r1[5];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[0];

        $i2 = $r1[4];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[7];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        goto label4;
    }
    private static int[] mult32(int, int)
    {
        int $i0, $i1, $i4;
        int[] r0, $r1;
        long l2, l3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0 = newarray (int)[2];

        if $i0 == 0 goto label5;

        if $i1 != 0 goto label1;

        return r0;

     label1:
        l2 = (long) $i1;

        l3 = l2 & 4294967295L;

        l2 = 0L;

        $i1 = 1;

     label2:
        if $i1 > 32 goto label4;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i4 = $i1 + -1;

        $i4 = $r1[$i4];

        $i4 = $i4 & $i0;

        if $i4 == 0 goto label3;

        l2 = l2 ^ l3;

     label3:
        l3 = l3 << 1;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        l3 = l2 >>> 32;

        $i0 = (int) l3;

        r0[1] = $i0;

        l2 = l2 & 4294967295L;

        $i0 = (int) l2;

        r0[0] = $i0;

     label5:
        return r0;
    }
    private static int[] mult512(int[], int[])
    {
        int[] $r0, $r1, r2, r3, r4, r5;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        r5 = newarray (int)[32];

        r2 = newarray (int)[8];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        r3 = newarray (int)[8];

        $i0 = lengthof $r0;

        if $i0 <= 8 goto label1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -8;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 8, r3, 0, $i0);

     label1:
        $r0 = newarray (int)[8];

        $i0 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r0, 0, $i0);

        r4 = newarray (int)[8];

        $i0 = lengthof $r1;

        if $i0 <= 8 goto label2;

        $i0 = lengthof $r1;

        $i0 = $i0 + -8;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 8, r4, 0, $i0);

     label2:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult256(int[],int[])>(r3, r4);

        $i0 = r5[31];

        $i1 = $r1[15];

        $i0 = $i0 ^ $i1;

        r5[31] = $i0;

        $i0 = r5[30];

        $i1 = $r1[14];

        $i0 = $i0 ^ $i1;

        r5[30] = $i0;

        $i0 = r5[29];

        $i1 = $r1[13];

        $i0 = $i0 ^ $i1;

        r5[29] = $i0;

        $i0 = r5[28];

        $i1 = $r1[12];

        $i0 = $i0 ^ $i1;

        r5[28] = $i0;

        $i0 = r5[27];

        $i1 = $r1[11];

        $i0 = $i0 ^ $i1;

        r5[27] = $i0;

        $i0 = r5[26];

        $i1 = $r1[10];

        $i0 = $i0 ^ $i1;

        r5[26] = $i0;

        $i0 = r5[25];

        $i1 = $r1[9];

        $i0 = $i0 ^ $i1;

        r5[25] = $i0;

        $i0 = r5[24];

        $i1 = $r1[8];

        $i0 = $i0 ^ $i1;

        r5[24] = $i0;

        $i0 = r5[23];

        $i1 = $r1[7];

        $i2 = $r1[15];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[23] = $i0;

        $i0 = r5[22];

        $i1 = $r1[6];

        $i2 = $r1[14];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[22] = $i0;

        $i0 = r5[21];

        $i1 = $r1[5];

        $i2 = $r1[13];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[21] = $i0;

        $i0 = r5[20];

        $i1 = $r1[4];

        $i2 = $r1[12];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[20] = $i0;

        $i0 = r5[19];

        $i1 = $r1[3];

        $i2 = $r1[11];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[19] = $i0;

        $i0 = r5[18];

        $i1 = $r1[2];

        $i2 = $r1[10];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[18] = $i0;

        $i0 = r5[17];

        $i1 = $r1[1];

        $i2 = $r1[9];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[17] = $i0;

        $i0 = r5[16];

        $i1 = $r1[0];

        $i2 = $r1[8];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[16] = $i0;

        $i0 = r5[15];

        $i1 = $r1[7];

        $i0 = $i0 ^ $i1;

        r5[15] = $i0;

        $i0 = r5[14];

        $i1 = $r1[6];

        $i0 = $i0 ^ $i1;

        r5[14] = $i0;

        $i0 = r5[13];

        $i1 = $r1[5];

        $i0 = $i0 ^ $i1;

        r5[13] = $i0;

        $i0 = r5[12];

        $i1 = $r1[4];

        $i0 = $i0 ^ $i1;

        r5[12] = $i0;

        $i0 = r5[11];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r3[0];

        $i1 = r2[0];

        $i0 = $i0 ^ $i1;

        r3[0] = $i0;

        $i0 = r3[1];

        $i1 = r2[1];

        $i0 = $i0 ^ $i1;

        r3[1] = $i0;

        $i0 = r3[2];

        $i1 = r2[2];

        $i0 = $i0 ^ $i1;

        r3[2] = $i0;

        $i0 = r3[3];

        $i1 = r2[3];

        $i0 = $i0 ^ $i1;

        r3[3] = $i0;

        $i0 = r3[4];

        $i1 = r2[4];

        $i0 = $i0 ^ $i1;

        r3[4] = $i0;

        $i0 = r3[5];

        $i1 = r2[5];

        $i0 = $i0 ^ $i1;

        r3[5] = $i0;

        $i0 = r3[6];

        $i1 = r2[6];

        $i0 = $i0 ^ $i1;

        r3[6] = $i0;

        $i0 = r3[7];

        $i1 = r2[7];

        $i0 = $i0 ^ $i1;

        r3[7] = $i0;

        $i0 = r4[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r4[0] = $i0;

        $i0 = r4[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r4[1] = $i0;

        $i0 = r4[2];

        $i1 = $r0[2];

        $i0 = $i0 ^ $i1;

        r4[2] = $i0;

        $i0 = r4[3];

        $i1 = $r0[3];

        $i0 = $i0 ^ $i1;

        r4[3] = $i0;

        $i0 = r4[4];

        $i1 = $r0[4];

        $i0 = $i0 ^ $i1;

        r4[4] = $i0;

        $i0 = r4[5];

        $i1 = $r0[5];

        $i0 = $i0 ^ $i1;

        r4[5] = $i0;

        $i0 = r4[6];

        $i1 = $r0[6];

        $i0 = $i0 ^ $i1;

        r4[6] = $i0;

        $i0 = r4[7];

        $i1 = $r0[7];

        $i0 = $i0 ^ $i1;

        r4[7] = $i0;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult256(int[],int[])>(r3, r4);

        $i0 = r5[23];

        $i1 = $r1[15];

        $i0 = $i0 ^ $i1;

        r5[23] = $i0;

        $i0 = r5[22];

        $i1 = $r1[14];

        $i0 = $i0 ^ $i1;

        r5[22] = $i0;

        $i0 = r5[21];

        $i1 = $r1[13];

        $i0 = $i0 ^ $i1;

        r5[21] = $i0;

        $i0 = r5[20];

        $i1 = $r1[12];

        $i0 = $i0 ^ $i1;

        r5[20] = $i0;

        $i0 = r5[19];

        $i1 = $r1[11];

        $i0 = $i0 ^ $i1;

        r5[19] = $i0;

        $i0 = r5[18];

        $i1 = $r1[10];

        $i0 = $i0 ^ $i1;

        r5[18] = $i0;

        $i0 = r5[17];

        $i1 = $r1[9];

        $i0 = $i0 ^ $i1;

        r5[17] = $i0;

        $i0 = r5[16];

        $i1 = $r1[8];

        $i0 = $i0 ^ $i1;

        r5[16] = $i0;

        $i0 = r5[15];

        $i1 = $r1[7];

        $i0 = $i0 ^ $i1;

        r5[15] = $i0;

        $i0 = r5[14];

        $i1 = $r1[6];

        $i0 = $i0 ^ $i1;

        r5[14] = $i0;

        $i0 = r5[13];

        $i1 = $r1[5];

        $i0 = $i0 ^ $i1;

        r5[13] = $i0;

        $i0 = r5[12];

        $i1 = $r1[4];

        $i0 = $i0 ^ $i1;

        r5[12] = $i0;

        $i0 = r5[11];

        $i1 = $r1[3];

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r1[2];

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r1[1];

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r1[0];

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult256(int[],int[])>(r2, $r0);

        $i0 = r5[23];

        $i1 = $r0[15];

        $i0 = $i0 ^ $i1;

        r5[23] = $i0;

        $i0 = r5[22];

        $i1 = $r0[14];

        $i0 = $i0 ^ $i1;

        r5[22] = $i0;

        $i0 = r5[21];

        $i1 = $r0[13];

        $i0 = $i0 ^ $i1;

        r5[21] = $i0;

        $i0 = r5[20];

        $i1 = $r0[12];

        $i0 = $i0 ^ $i1;

        r5[20] = $i0;

        $i0 = r5[19];

        $i1 = $r0[11];

        $i0 = $i0 ^ $i1;

        r5[19] = $i0;

        $i0 = r5[18];

        $i1 = $r0[10];

        $i0 = $i0 ^ $i1;

        r5[18] = $i0;

        $i0 = r5[17];

        $i1 = $r0[9];

        $i0 = $i0 ^ $i1;

        r5[17] = $i0;

        $i0 = r5[16];

        $i1 = $r0[8];

        $i0 = $i0 ^ $i1;

        r5[16] = $i0;

        $i0 = r5[15];

        $i1 = $r0[7];

        $i2 = $r0[15];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[15] = $i0;

        $i0 = r5[14];

        $i1 = $r0[6];

        $i2 = $r0[14];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[14] = $i0;

        $i0 = r5[13];

        $i1 = $r0[5];

        $i2 = $r0[13];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[13] = $i0;

        $i0 = r5[12];

        $i1 = $r0[4];

        $i2 = $r0[12];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[12] = $i0;

        $i0 = r5[11];

        $i1 = $r0[3];

        $i2 = $r0[11];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[11] = $i0;

        $i0 = r5[10];

        $i1 = $r0[2];

        $i2 = $r0[10];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[10] = $i0;

        $i0 = r5[9];

        $i1 = $r0[1];

        $i2 = $r0[9];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[9] = $i0;

        $i0 = r5[8];

        $i1 = $r0[0];

        $i2 = $r0[8];

        $i1 = $i1 ^ $i2;

        $i0 = $i0 ^ $i1;

        r5[8] = $i0;

        $i0 = r5[7];

        $i1 = $r0[7];

        $i0 = $i0 ^ $i1;

        r5[7] = $i0;

        $i0 = r5[6];

        $i1 = $r0[6];

        $i0 = $i0 ^ $i1;

        r5[6] = $i0;

        $i0 = r5[5];

        $i1 = $r0[5];

        $i0 = $i0 ^ $i1;

        r5[5] = $i0;

        $i0 = r5[4];

        $i1 = $r0[4];

        $i0 = $i0 ^ $i1;

        r5[4] = $i0;

        $i0 = r5[3];

        $i1 = $r0[3];

        $i0 = $i0 ^ $i1;

        r5[3] = $i0;

        $i0 = r5[2];

        $i1 = $r0[2];

        $i0 = $i0 ^ $i1;

        r5[2] = $i0;

        $i0 = r5[1];

        $i1 = $r0[1];

        $i0 = $i0 ^ $i1;

        r5[1] = $i0;

        $i0 = r5[0];

        $i1 = $r0[0];

        $i0 = $i0 ^ $i1;

        r5[0] = $i0;

        return r5;
    }
    private static int[] mult64(int[], int[])
    {
        int[] $r0, $r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        r2 = newarray (int)[4];

        i0 = $r0[0];

        i2 = 0;

        i1 = lengthof $r0;

        if i1 <= 1 goto label1;

        i2 = $r0[1];

     label1:
        i1 = $r1[0];

        i3 = 0;

        $i4 = lengthof $r1;

        if $i4 <= 1 goto label2;

        i3 = $r1[1];

     label2:
        if i2 != 0 goto label3;

        if i3 == 0 goto label4;

     label3:
        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>(i2, i3);

        $i4 = r2[3];

        $i5 = $r0[1];

        $i4 = $i4 ^ $i5;

        r2[3] = $i4;

        $i4 = r2[2];

        $i5 = $r0[0];

        $i6 = $r0[1];

        $i5 = $i5 ^ $i6;

        $i4 = $i4 ^ $i5;

        r2[2] = $i4;

        $i4 = r2[1];

        $i5 = $r0[0];

        $i4 = $i4 ^ $i5;

        r2[1] = $i4;

     label4:
        i2 = i0 ^ i2;

        i3 = i1 ^ i3;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>(i2, i3);

        i2 = r2[2];

        i3 = $r0[1];

        i2 = i2 ^ i3;

        r2[2] = i2;

        i2 = r2[1];

        i3 = $r0[0];

        i2 = i2 ^ i3;

        r2[1] = i2;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] mult32(int,int)>(i0, i1);

        i0 = r2[2];

        i1 = $r0[1];

        i0 = i0 ^ i1;

        r2[2] = i0;

        i0 = r2[1];

        i1 = $r0[0];

        i2 = $r0[1];

        i1 = i1 ^ i2;

        i0 = i0 ^ i1;

        r2[1] = i0;

        i0 = r2[0];

        i1 = $r0[0];

        i0 = i0 ^ i1;

        r2[0] = i0;

        return r2;
    }
    private org.spongycastle.pqc.math.linearalgebra.GF2Polynomial upper(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;
        int $i0, $i1, $i2;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 - $i0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i2 = $i1 << 5;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i2);

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i2 < $i0 goto label1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, $r2, 0, $i1);

     label1:
        return r1;
    }
    private void zeroUnusedBits()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 & 31;

        if $i0 == 0 goto label1;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

        $i1 = $r1[$i0];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] reverseRightMask>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i2 = $i2 & 31;

        $i2 = $r2[$i2];

        $i1 = $i1 & $i2;

        $r1[$i0] = $i1;

     label1:
        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial add(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial xor(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return r0;
    }
    public void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i0);

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorThisBy(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return;
    }
    public void assignAll()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i0] = -1;

        i0 = i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return;
    }
    public void assignOne()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = 1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[0] = 1;

        return;
    }
    public void assignX()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = 1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[0] = 2;

        return;
    }
    public void assignZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.Object clone()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] divide(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r2, r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r4 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[2];

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>()>();

        throw $r5;

     label1:
        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 >= $i1 goto label2;

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>(0);

        r4[0] = r0;

        r4[1] = r2;

        return r4;

     label2:
        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

        $i1 = $i0 + 1;

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i1);

     label3:
        if $i0 < 0 goto label4;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int)>($i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void subtractFromThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorBit(int)>($i0);

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

        goto label3;

     label4:
        r4[0] = r3;

        r4[1] = r2;

        return r4;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label4;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) $r1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 != $i1 goto label4;

        $i0 = 0;

     label2:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r3[$i0];

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        if $i1 != $i2 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public void expandN(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        int[] r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i1 < $i0 goto label1;

        return;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        $i0 = $i0 + -1;

        $i0 = $i0 >>> 5;

        $i0 = $i0 + 1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i1 >= $i0 goto label5;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = lengthof r1;

        if $i1 < $i0 goto label4;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

     label2:
        if $i1 >= $i0 goto label3;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        r1[$i1] = 0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        return;

     label4:
        r1 = newarray (int)[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

     label5:
        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial gcd(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r3;
        boolean $z0;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Both operands of gcd equal zero.");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label2;

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return r0;

     label2:
        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label3;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        return $r1;

     label3:
        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

     label4:
        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 != 0 goto label5;

        $r1 = virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial remainder(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r3 = r0;

        r0 = $r1;

        goto label4;

     label5:
        return r3;
    }
    public int getBit(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 >>> 5;

        $i1 = $r2[$i1];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $i0 & 31;

        $i0 = $r2[$i0];

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public int getLength()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        return i0;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i1 + $i0;

        return $i0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial increase()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        virtualinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void increaseThis()>();

        return r1;
    }
    public void increaseThis()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorBit(int)>(0);

        return;
    }
    public boolean isIrreducible()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1, $r2, $r3;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        virtualinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        i0 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        i0 = i0 + -1;

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>($i1, "X");

        $i1 = 1;

     label2:
        $i2 = i0 >> 1;

        if $i1 > $i2 goto label3;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void squareThisPreCalc()>();

        $r2 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial remainder(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r1);

        r0 = $r2;

        $r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>(32, "X");

        $r2 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial add(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r3);

        $z0 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 != 0 goto label4;

        $r2 = virtualinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial gcd(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r2);

        $z0 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isOne()>();

        if $z0 == 0 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public boolean isOne()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i0 = 1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r1[i0];

        if $i1 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i0 = $r1[0];

        if i0 != 1 goto label4;

        return 1;

     label4:
        return 0;
    }
    public boolean isZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i0 = 0;

     label2:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i0 >= $i1 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r1[$i0];

        if $i1 == 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial multiply(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i0);

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i0);

        r0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return r0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial multiplyClassic(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r3, $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] r2;
        int $i0, $i1, $i2, $i3;
        int[] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = $i0 << 1;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r2 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[32];

        $r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r2[0] = $r4;

        $i0 = 1;

     label1:
        if $i0 > 31 goto label2;

        $i1 = $i0 + -1;

        r0 = r2[$i1];

        r0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft()>();

        r2[$i0] = r0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i0 >= $i1 goto label9;

        $i1 = 0;

     label4:
        if $i1 > 31 goto label6;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r5[$i0];

        $r5 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i3 = $r5[$i1];

        $i2 = $i2 & $i3;

        if $i2 == 0 goto label5;

        r0 = r2[$i1];

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorThisBy(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        $i1 = 0;

     label7:
        if $i1 > 31 goto label8;

        r0 = r2[$i1];

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void shiftBlocksLeft()>();

        $i1 = $i1 + 1;

        goto label7;

     label8:
        $i0 = $i0 + 1;

        goto label3;

     label9:
        return r3;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial quotient(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r2, r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>()>();

        throw $r4;

     label1:
        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 >= $i1 goto label2;

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>(0);

        return r0;

     label2:
        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

        $i1 = $i0 + 1;

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i1);

     label3:
        if $i0 < 0 goto label4;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int)>($i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void subtractFromThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorBit(int)>($i0);

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

        goto label3;

     label4:
        return r3;
    }
    public void randomize()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1;
        int[] $r1;
        java.util.Random $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i1 = 0;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: java.util.Random rand>;

        $i0 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $r1[i1] = $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return;
    }
    public void randomize(java.util.Random)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        java.util.Random $r1;
        int $i0, i1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: java.util.Random;

        i1 = 0;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        $r2[i1] = $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return;
    }
    public void reduceN()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r1[$i0];

        if $i1 != 0 goto label2;

        if $i0 <= 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i2 = $r1[$i0];

        $i1 = 0;

     label3:
        if i2 == 0 goto label4;

        i2 = i2 >>> 1;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        i2 = $i0 << 5;

        $i1 = i2 + $i1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i1;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        return;
    }
    void reducePentanomial(int, int[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i12, $i14;
        int[] $r1, $r2;
        long $l11, $l13, $l15;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        i2 = $i0 >>> 5;

        i5 = $i0 & 31;

        i6 = 32 - i5;

        i5 = $r1[0];

        i5 = $i0 - i5;

        i3 = i5 >>> 5;

        i5 = $r1[0];

        i5 = $i0 - i5;

        i5 = i5 & 31;

        i7 = 32 - i5;

        i5 = $r1[1];

        i5 = $i0 - i5;

        i4 = i5 >>> 5;

        i5 = $r1[1];

        i5 = $i0 - i5;

        i5 = i5 & 31;

        i8 = 32 - i5;

        i5 = $r1[2];

        i5 = $i0 - i5;

        i5 = i5 >>> 5;

        i9 = $r1[2];

        i9 = $i0 - i9;

        i9 = i9 & 31;

        i9 = 32 - i9;

        i1 = $i0 << 1;

        i1 = i1 + -2;

        i1 = i1 >>> 5;

     label1:
        if i1 <= i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = $r1[i1];

        $l11 = (long) $i10;

        $l11 = $l11 & 4294967295L;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i2;

        $i10 = $i10 + -1;

        $i12 = $r1[$i10];

        $l13 = $l11 << i6;

        $i14 = (int) $l13;

        $i12 = $i12 ^ $i14;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i2;

        $i12 = $r1[$i10];

        $l13 = (long) $i12;

        $i12 = 32 - i6;

        $l15 = $l11 >>> $i12;

        $l13 = $l13 ^ $l15;

        $i12 = (int) $l13;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i3;

        $i10 = $i10 + -1;

        $i12 = $r1[$i10];

        $l13 = $l11 << i7;

        $i14 = (int) $l13;

        $i12 = $i12 ^ $i14;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i3;

        $i12 = $r1[$i10];

        $l13 = (long) $i12;

        $i12 = 32 - i7;

        $l15 = $l11 >>> $i12;

        $l13 = $l13 ^ $l15;

        $i12 = (int) $l13;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i4;

        $i10 = $i10 + -1;

        $i12 = $r1[$i10];

        $l13 = $l11 << i8;

        $i14 = (int) $l13;

        $i12 = $i12 ^ $i14;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i4;

        $i12 = $r1[$i10];

        $l13 = (long) $i12;

        $i12 = 32 - i8;

        $l15 = $l11 >>> $i12;

        $l13 = $l13 ^ $l15;

        $i12 = (int) $l13;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i5;

        $i10 = $i10 + -1;

        $i12 = $r1[$i10];

        $l13 = $l11 << i9;

        $i14 = (int) $l13;

        $i12 = $i12 ^ $i14;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i10 = i1 - i5;

        $i12 = $r1[$i10];

        $l13 = (long) $i12;

        $i12 = 32 - i9;

        $l11 = $l11 >>> $i12;

        $l11 = $l13 ^ $l11;

        $i12 = (int) $l11;

        $r1[$i10] = $i12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i1] = 0;

        i1 = i1 + -1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i1 = $r1[i2];

        $l11 = (long) i1;

        $l11 = $l11 & 4294967295L;

        i1 = $i0 & 31;

        $l13 = 4294967295L << i1;

        $l11 = $l11 & $l13;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i1 = $r1[0];

        $l13 = (long) i1;

        i6 = 32 - i6;

        $l15 = $l11 >>> i6;

        $l13 = $l13 ^ $l15;

        i6 = (int) $l13;

        $r1[0] = i6;

        i6 = i2 - i3;

        i6 = i6 + -1;

        if i6 < 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i6 = i2 - i3;

        i6 = i6 + -1;

        i1 = $r1[i6];

        $l13 = $l11 << i7;

        $i10 = (int) $l13;

        i1 = i1 ^ $i10;

        $r1[i6] = i1;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i3 = i2 - i3;

        i6 = $r1[i3];

        $l13 = (long) i6;

        i7 = 32 - i7;

        $l15 = $l11 >>> i7;

        $l13 = $l13 ^ $l15;

        i7 = (int) $l13;

        $r1[i3] = i7;

        i3 = i2 - i4;

        i3 = i3 + -1;

        if i3 < 0 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i3 = i2 - i4;

        i3 = i3 + -1;

        i7 = $r1[i3];

        $l13 = $l11 << i8;

        i6 = (int) $l13;

        i7 = i7 ^ i6;

        $r1[i3] = i7;

     label4:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i4 = i2 - i4;

        i3 = $r1[i4];

        $l13 = (long) i3;

        i8 = 32 - i8;

        $l15 = $l11 >>> i8;

        $l13 = $l13 ^ $l15;

        i8 = (int) $l13;

        $r1[i4] = i8;

        i4 = i2 - i5;

        i4 = i4 + -1;

        if i4 < 0 goto label5;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i4 = i2 - i5;

        i4 = i4 + -1;

        i8 = $r1[i4];

        $l13 = $l11 << i9;

        i3 = (int) $l13;

        i8 = i8 ^ i3;

        $r1[i4] = i8;

     label5:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i5 = i2 - i5;

        i4 = $r1[i5];

        $l13 = (long) i4;

        i9 = 32 - i9;

        $l11 = $l11 >>> i9;

        $l11 = $l13 ^ $l11;

        i9 = (int) $l11;

        $r1[i5] = i9;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i5 = $r1[i2];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] reverseRightMask>;

        i9 = $i0 & 31;

        i9 = $r2[i9];

        i5 = i5 & i9;

        $r1[i2] = i5;

        i2 = $i0 + -1;

        i2 = i2 >>> 5;

        i2 = i2 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = i2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        return;
    }
    void reduceTrinomial(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i8, $i10;
        int[] $r1, $r2;
        long $l7, $l9, $l11;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i3 = $i0 >>> 5;

        i4 = $i0 & 31;

        i5 = 32 - i4;

        i4 = $i0 - $i1;

        i4 = i4 >>> 5;

        $i1 = $i0 - $i1;

        $i1 = $i1 & 31;

        $i1 = 32 - $i1;

        i2 = $i0 << 1;

        i2 = i2 + -2;

        i2 = i2 >>> 5;

     label1:
        if i2 <= i3 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = $r1[i2];

        $l7 = (long) $i6;

        $l7 = $l7 & 4294967295L;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = i2 - i3;

        $i6 = $i6 + -1;

        $i8 = $r1[$i6];

        $l9 = $l7 << i5;

        $i10 = (int) $l9;

        $i8 = $i8 ^ $i10;

        $r1[$i6] = $i8;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = i2 - i3;

        $i8 = $r1[$i6];

        $l9 = (long) $i8;

        $i8 = 32 - i5;

        $l11 = $l7 >>> $i8;

        $l9 = $l9 ^ $l11;

        $i8 = (int) $l9;

        $r1[$i6] = $i8;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = i2 - i4;

        $i6 = $i6 + -1;

        $i8 = $r1[$i6];

        $l9 = $l7 << $i1;

        $i10 = (int) $l9;

        $i8 = $i8 ^ $i10;

        $r1[$i6] = $i8;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = i2 - i4;

        $i8 = $r1[$i6];

        $l9 = (long) $i8;

        $i8 = 32 - $i1;

        $l7 = $l7 >>> $i8;

        $l7 = $l9 ^ $l7;

        $i8 = (int) $l7;

        $r1[$i6] = $i8;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r1[i2] = 0;

        i2 = i2 + -1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i2 = $r1[i3];

        $l7 = (long) i2;

        $l7 = $l7 & 4294967295L;

        i2 = $i0 & 31;

        $l9 = 4294967295L << i2;

        $l7 = $l7 & $l9;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i2 = $r1[0];

        $l9 = (long) i2;

        i5 = 32 - i5;

        $l11 = $l7 >>> i5;

        $l9 = $l9 ^ $l11;

        i5 = (int) $l9;

        $r1[0] = i5;

        i5 = i3 - i4;

        i5 = i5 + -1;

        if i5 < 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i5 = i3 - i4;

        i5 = i5 + -1;

        i2 = $r1[i5];

        $l9 = $l7 << $i1;

        $i6 = (int) $l9;

        i2 = i2 ^ $i6;

        $r1[i5] = i2;

     label3:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i4 = i3 - i4;

        i5 = $r1[i4];

        $l9 = (long) i5;

        $i1 = 32 - $i1;

        $l7 = $l7 >>> $i1;

        $l7 = $l9 ^ $l7;

        $i1 = (int) $l7;

        $r1[i4] = $i1;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r1[i3];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] reverseRightMask>;

        i4 = $i0 & 31;

        i4 = $r2[i4];

        $i1 = $i1 & i4;

        $r1[i3] = $i1;

        $i1 = $i0 + -1;

        $i1 = $i1 >>> 5;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial remainder(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        r0 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 >= $i1 goto label2;

        return r2;

     label2:
        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

     label3:
        if $i0 < 0 goto label4;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int)>($i0);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void subtractFromThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void reduceN()>();

        $i0 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 - $i1;

        goto label3;

     label4:
        return r2;
    }
    public void resetBit(int) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label2;

        return;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 >>> 5;

        $i2 = $r2[$i1];

        $r3 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $i0 & 31;

        $i0 = $r3[$i0];

        $i0 = $i0 ^ -1;

        $i0 = $i2 & $i0;

        $r2[$i1] = $i0;

        return;
    }
    public void setBit(int) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 >>> 5;

        $i2 = $r2[$i1];

        $r3 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $i0 & 31;

        $i0 = $r3[$i0];

        $i0 = $i2 | $i0;

        $r2[$i1] = $i0;

        return;
    }
    void shiftBlocksLeft()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int[] r1, $r2;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + 32;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = lengthof r1;

        if $i1 > $i0 goto label3;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 1 goto label2;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $i1 + -1;

        $i0 = $r2[$i0];

        r1[$i1] = $i0;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        r1[0] = 0;

        return;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = newarray (int)[$i1];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 1, $i1);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;
        int $i0, $i1, $i2;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + 1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,int[])>($i1, $r2);

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 1 goto label2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $i2 = $i2 << 1;

        $r2[$i1] = $i2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $i1 + -1;

        $i0 = $r3[$i0];

        $i0 = $i0 >>> 31;

        $i2 = $i2 | $i0;

        $r2[$i1] = $i2;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r2[0];

        $i1 = $i1 << 1;

        $r2[0] = $i1;

        return r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + $i0;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,int[])>($i1, $r2);

        if $i0 < 32 goto label1;

        $i1 = $i0 >>> 5;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void doShiftBlocksLeft(int)>($i1);

     label1:
        $i0 = $i0 & 31;

        if $i0 == 0 goto label4;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

     label2:
        if $i1 < 1 goto label3;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $i2 = $i2 << $i0;

        $r2[$i1] = $i2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $i1 + -1;

        $i3 = $r3[$i3];

        $i4 = 32 - $i0;

        $i3 = $i3 >>> $i4;

        $i2 = $i2 | $i3;

        $r2[$i1] = $i2;

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r2[0];

        $i0 = $i1 << $i0;

        $r2[0] = $i0;

     label4:
        return r1;
    }
    public void shiftLeftAddThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return;

     label1:
        i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        i1 = i1 + $i0;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>(i1);

        i1 = $i0 >>> 5;

        $i2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $i2 + -1;

     label2:
        if $i2 < 0 goto label4;

        $i3 = $i2 + i1;

        $i3 = $i3 + 1;

        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i3 >= $i4 goto label3;

        $i3 = $i0 & 31;

        if $i3 == 0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $i2 + i1;

        $i3 = $i3 + 1;

        $i4 = $r2[$i3];

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i5 = $r3[$i2];

        $i6 = $i0 & 31;

        $i6 = 32 - $i6;

        $i5 = $i5 >>> $i6;

        $i4 = $i4 ^ $i5;

        $r2[$i3] = $i4;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $i2 + i1;

        $i4 = $r2[$i3];

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i5 = $r3[$i2];

        $i6 = $i0 & 31;

        $i5 = $i5 << $i6;

        $i4 = $i4 ^ $i5;

        $r2[$i3] = $i4;

        $i2 = $i2 + -1;

        goto label2;

     label4:
        return;
    }
    public void shiftLeftThis()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int[] r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 & 31;

        if $i0 != 0 goto label3;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = lengthof r1;

        if $i0 <= $i1 goto label1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = newarray (int)[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 1 goto label6;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $i0 + -1;

        $i2 = $r2[$i2];

        $i2 = $i2 >>> 31;

        $i1 = $i1 | $i2;

        r1[$i0] = $i1;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 + -1;

        $i2 = r1[$i1];

        $i2 = $i2 << 1;

        r1[$i1] = $i2;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label4:
        if $i0 < 1 goto label5;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1[$i0];

        $i1 = $i1 << 1;

        r1[$i0] = $i1;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $i0 + -1;

        $i2 = $r2[$i2];

        $i2 = $i2 >>> 31;

        $i1 = $i1 | $i2;

        r1[$i0] = $i1;

        $i0 = $i0 + -1;

        goto label4;

     label5:
        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r1[0];

        $i0 = $i0 << 1;

        r1[0] = $i0;

     label6:
        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftRight()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, r1;
        int $i0, $i1, $i2;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i1);

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i1);

        $i1 = 0;

     label1:
        $i2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $i2 + -2;

        if $i1 > $i2 goto label2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $i2 = $i2 >>> 1;

        $r2[$i1] = $i2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r2[$i1];

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $i1 + 1;

        $i0 = $r3[$i0];

        $i0 = $i0 << 31;

        $i2 = $i2 | $i0;

        $r2[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

        $i2 = $r2[$i1];

        $i2 = $i2 >>> 1;

        $r2[$i1] = $i2;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i1 >= $i2 goto label3;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

        $i2 = $r2[$i1];

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $r3[$i0];

        $i0 = $i0 << 31;

        $i2 = $i2 | $i0;

        $r2[$i1] = $i2;

     label3:
        return r1;
    }
    public void shiftRightThis()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        int[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        $i1 = $i1 >>> 5;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i1;

        $i1 = 0;

     label1:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $i2 + -2;

        if $i1 > $i2 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r1[$i1];

        $i2 = $i2 >>> 1;

        $r1[$i1] = $i2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r1[$i1];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $i1 + 1;

        $i0 = $r2[$i0];

        $i0 = $i0 << 31;

        $i2 = $i2 | $i0;

        $r1[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

        $i2 = $r1[$i1];

        $i2 = $i2 >>> 1;

        $r1[$i1] = $i2;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 & 31;

        if $i1 != 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 + -1;

        $i2 = $r1[$i1];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $r2[$i0];

        $i0 = $i0 << 31;

        $i2 = $i2 | $i0;

        $r1[$i1] = $i2;

     label3:
        return;
    }
    public void squareThisBitwise()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int[] r1, $r2;
        boolean $z0;
        int $i0, i1, i2, i3, $i4, $i5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 << 1;

        r1 = newarray (int)[$i0];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label7;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i1 = $r2[$i0];

        i2 = 1;

        i3 = 0;

     label3:
        if i3 >= 16 goto label6;

        $i4 = i1 & 1;

        if $i4 == 0 goto label4;

        $i4 = $i0 << 1;

        $i5 = r1[$i4];

        $i5 = $i5 | i2;

        r1[$i4] = $i5;

     label4:
        $i4 = 65536 & i1;

        if $i4 == 0 goto label5;

        $i4 = $i0 << 1;

        $i4 = $i4 + 1;

        $i5 = r1[$i4];

        $i5 = $i5 | i2;

        r1[$i4] = $i5;

     label5:
        i2 = i2 << 2;

        i1 = i1 >>> 1;

        i3 = i3 + 1;

        goto label3;

     label6:
        $i0 = $i0 + -1;

        goto label2;

     label7:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

        $i0 = lengthof r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 << 1;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        return;
    }
    public void squareThisPreCalc()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int[] r1, $r3;
        boolean $z0;
        int $i0, $i1, $i2;
        short[] $r2;
        short $s3, $s4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = lengthof r1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $i1 << 1;

        if $i0 < $i1 goto label4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 << 1;

        $i1 = $i1 + 1;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 16711680;

        $i2 = $i2 >>> 16;

        $s3 = $r2[$i2];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & -16777216;

        $i2 = $i2 >>> 24;

        $s4 = $r2[$i2];

        $i2 = $s4 << 16;

        $i2 = $s3 | $i2;

        r1[$i1] = $i2;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 << 1;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 255;

        $s3 = $r2[$i2];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 65280;

        $i2 = $i2 >>> 8;

        $s4 = $r2[$i2];

        $i2 = $s4 << 16;

        $i2 = $s3 | $i2;

        r1[$i1] = $i2;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 << 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 << 1;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        return;

     label4:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 << 1;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label5:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i0 >= $i1 goto label6;

        $i1 = $i0 << 1;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 255;

        $s3 = $r2[$i2];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 65280;

        $i2 = $i2 >>> 8;

        $s4 = $r2[$i2];

        $i2 = $s4 << 16;

        $i2 = $s3 | $i2;

        r1[$i1] = $i2;

        $i1 = $i0 << 1;

        $i1 = $i1 + 1;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & 16711680;

        $i2 = $i2 >>> 16;

        $s3 = $r2[$i2];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: short[] squaringTable>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i0];

        $i2 = $i2 & -16777216;

        $i2 = $i2 >>> 24;

        $s4 = $r2[$i2];

        $i2 = $s4 << 16;

        $i2 = $s3 | $i2;

        r1[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = null;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value> = r1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 << 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i0 = $i0 << 1;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len> = $i0;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial subtract(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial xor(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return r0;
    }
    public void subtractFromThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void expandN(int)>($i0);

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void xorThisBy(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        return;
    }
    public boolean testBit(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 >>> 5;

        $i1 = $r2[$i1];

        $r2 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $i0 & 31;

        $i0 = $r2[$i0];

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public byte[] toByteArray()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int i0, i1, i2, $i3, $i4, $i6;
        byte[] r1;
        int[] $r2;
        byte $b5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        i1 = i1 + -1;

        i1 = i1 >> 3;

        i0 = i1 + 1;

        i1 = i0 & 3;

        r1 = newarray (byte)[i0];

        i2 = 0;

     label1:
        $i3 = i0 >> 2;

        if i2 >= $i3 goto label2;

        $i3 = i2 << 2;

        $i3 = i0 - $i3;

        $i3 = $i3 + -1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i4 = $r2[i2];

        $i4 = $i4 & 255;

        $b5 = (byte) $i4;

        r1[$i3] = $b5;

        $i4 = $i3 + -1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = $r2[i2];

        $i6 = $i6 & 65280;

        $i6 = $i6 >>> 8;

        $b5 = (byte) $i6;

        r1[$i4] = $b5;

        $i4 = $i3 + -2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i6 = $r2[i2];

        $i6 = $i6 & 16711680;

        $i6 = $i6 >>> 16;

        $b5 = (byte) $i6;

        r1[$i4] = $b5;

        $i3 = $i3 + -3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i4 = $r2[i2];

        $i4 = $i4 & -16777216;

        $i4 = $i4 >>> 24;

        $b5 = (byte) $i4;

        r1[$i3] = $b5;

        i2 = i2 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        if i0 >= i1 goto label4;

        i2 = i1 - i0;

        i2 = i2 + -1;

        i2 = i2 << 3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i3 = $i3 + -1;

        $i3 = $r2[$i3];

        $i4 = 255 << i2;

        $i3 = $i3 & $i4;

        i2 = $i3 >>> i2;

        $b5 = (byte) i2;

        r1[i0] = $b5;

        i0 = i0 + 1;

        goto label3;

     label4:
        return r1;
    }
    public java.math.BigInteger toFlexiBigInt()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0;
        boolean $z0;
        java.math.BigInteger $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isZero()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.math.BigInteger;

        $r2 = newarray (byte)[0];

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(0, $r2);

        return $r1;

     label2:
        $r1 = new java.math.BigInteger;

        $r2 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: byte[] toByteArray()>();

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }
    public int[] toIntegerArray()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int[] r1, $r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        r1 = newarray (int)[$i0];

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return r1;
    }
    public java.lang.String toString(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1;
        java.lang.String[] r1;
        char[] r2;
        java.lang.String r3;
        java.lang.StringBuilder $r4;
        int[] $r5;
        char $c2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        r2 = newarray (char)[16];

        r2[0] = 48;

        r2[1] = 49;

        r2[2] = 50;

        r2[3] = 51;

        r2[4] = 52;

        r2[5] = 53;

        r2[6] = 54;

        r2[7] = 55;

        r2[8] = 56;

        r2[9] = 57;

        r2[10] = 97;

        r2[11] = 98;

        r2[12] = 99;

        r2[13] = 100;

        r2[14] = 101;

        r2[15] = 102;

        r1 = newarray (java.lang.String)[16];

        r1[0] = "0000";

        r1[1] = "0001";

        r1[2] = "0010";

        r1[3] = "0011";

        r1[4] = "0100";

        r1[5] = "0101";

        r1[6] = "0110";

        r1[7] = "0111";

        r1[8] = "1000";

        r1[9] = "1001";

        r1[10] = "1010";

        r1[11] = "1011";

        r1[12] = "1100";

        r1[13] = "1101";

        r1[14] = "1110";

        r1[15] = "1111";

        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>()>();

        if $i0 != 16 goto label2;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 28;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 20;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 16;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 12;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 8;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 4;

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 & 15;

        $c2 = r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = $i0 + -1;

     label3:
        if $i0 < 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 28;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 24;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 20;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 16;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 12;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 8;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 >>> 4;

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $r5[$i0];

        $i1 = $i1 & 15;

        r3 = r1[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + -1;

        goto label3;

     label4:
        return r3;
    }
    public boolean vectorMult(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int i0, $i1, $i2;
        boolean z0, $z1;
        java.lang.RuntimeException $r2;
        int[] $r3;
        boolean[] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        z0 = 0;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i1 == i0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>()>();

        throw $r2;

     label1:
        $i1 = 0;

     label2:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        if $i1 >= i0 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        i0 = $r3[$i1];

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i1];

        i0 = i0 & $i2;

        $r4 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean[] parity>;

        $i2 = i0 & 255;

        $z1 = $r4[$i2];

        z0 = z0 ^ $z1;

        $r4 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean[] parity>;

        $i2 = i0 >>> 8;

        $i2 = $i2 & 255;

        $z1 = $r4[$i2];

        z0 = z0 ^ $z1;

        $r4 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean[] parity>;

        $i2 = i0 >>> 16;

        $i2 = $i2 & 255;

        $z1 = $r4[$i2];

        z0 = z0 ^ $z1;

        $r4 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean[] parity>;

        i0 = i0 >>> 24;

        i0 = i0 & 255;

        $z1 = $r4[i0];

        z0 = z0 ^ $z1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return z0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial xor(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1, r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        if $i1 < $i2 goto label2;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i1];

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $r4[$i1];

        $i2 = $i2 ^ $i3;

        $r3[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r1);

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[$i1];

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i3 = $r4[$i1];

        $i2 = $i2 ^ $i3;

        $r3[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return r2;
    }
    public void xorBit(int) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int len>;

        $i1 = $i1 + -1;

        if $i0 <= $i1 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label2:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i1 = $i0 >>> 5;

        $i2 = $r2[$i1];

        $r3 = <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] bitMask>;

        $i0 = $i0 & 31;

        $i0 = $r3[$i0];

        $i0 = $i2 ^ $i0;

        $r2[$i1] = $i0;

        return;
    }
    public void xorThisBy(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r0, $r1;
        int $i0, i1, $i2;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        i1 = 0;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int blocks>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i0 = $r2[i1];

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int[] value>;

        $i2 = $r3[i1];

        $i0 = $i0 ^ $i2;

        $r2[i1] = $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void zeroUnusedBits()>();

        return;
    }
