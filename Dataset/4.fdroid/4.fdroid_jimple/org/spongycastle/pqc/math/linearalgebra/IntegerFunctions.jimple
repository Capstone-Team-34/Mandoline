org.spongycastle.pqc.math.linearalgebra.IntegerFunctions extends java.lang.Object
private static final java.math.BigInteger FOUR
private static final java.math.BigInteger ONE
private static final int[] SMALL_PRIMES
private static final long SMALL_PRIME_PRODUCT
private static final java.math.BigInteger TWO
private static final java.math.BigInteger ZERO
private static final int[] jacobiTable
private static java.security.SecureRandom sr
    static void <clinit>()
    {
        java.math.BigInteger $r0;
        int[] $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4L);

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger FOUR> = $r0;

        $r1 = newarray (int)[12];

        $r1[0] = 3;

        $r1[1] = 5;

        $r1[2] = 7;

        $r1[3] = 11;

        $r1[4] = 13;

        $r1[5] = 17;

        $r1[6] = 19;

        $r1[7] = 23;

        $r1[8] = 29;

        $r1[9] = 31;

        $r1[10] = 37;

        $r1[11] = 41;

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] SMALL_PRIMES> = $r1;

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr> = null;

        $r1 = newarray (int)[8];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 0;

        $r1[3] = -1;

        $r1[4] = 0;

        $r1[5] = -1;

        $r1[6] = 0;

        $r1[7] = 1;

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] jacobiTable> = $r1;

        return;
    }
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.IntegerFunctions r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.IntegerFunctions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.math.BigInteger binomial(int, int)
    {
        int $i0, $i2, $i3, $i4;
        long $l1;
        java.math.BigInteger r0, $r1;

        $i0 := @parameter0: int;

        $i2 := @parameter1: int;

        r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        if $i0 != 0 goto label2;

        if $i2 != 0 goto label1;

        return r0;

     label1:
        r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        return r0;

     label2:
        $i3 = $i0 >>> 1;

        if $i2 <= $i3 goto label3;

        $i2 = $i0 - $i2;

     label3:
        $i3 = 1;

     label4:
        if $i3 > $i2 goto label5;

        $i4 = $i3 + -1;

        $i4 = $i0 - $i4;

        $l1 = (long) $i4;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        r0 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $l1 = (long) $i3;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        r0 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $i3 = $i3 + 1;

        goto label4;

     label5:
        return r0;
    }
    public static int bitCount(int)
    {
        int $i0, $i1, i2;

        $i1 := @parameter0: int;

        i2 = 0;

     label1:
        if $i1 == 0 goto label2;

        $i0 = $i1 & 1;

        i2 = i2 + $i0;

        $i1 = $i1 >>> 1;

        goto label1;

     label2:
        return i2;
    }
    public static int ceilLog(int)
    {
        int $i0, i1, i2;

        $i0 := @parameter0: int;

        i1 = 0;

        i2 = 1;

     label1:
        if i2 >= $i0 goto label2;

        i2 = i2 << 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
    public static int ceilLog(java.math.BigInteger)
    {
        java.math.BigInteger $r0, r1;
        int i0, $i1;

        $r0 := @parameter0: java.math.BigInteger;

        i0 = 0;

        r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

     label1:
        $i1 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i1 >= 0 goto label2;

        i0 = i0 + 1;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        goto label1;

     label2:
        return i0;
    }
    public static int ceilLog256(int)
    {
        int $i0, i1;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        if $i0 >= 0 goto label4;

        $i0 = neg $i0;

     label2:
        i1 = 0;

     label3:
        if $i0 <= 0 goto label5;

        i1 = i1 + 1;

        $i0 = $i0 >>> 8;

        goto label3;

     label4:
        goto label2;

     label5:
        return i1;
    }
    public static int ceilLog256(long)
    {
        long $l0;
        byte $b1;
        int i2;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label4;

        $l0 = neg $l0;

     label2:
        i2 = 0;

     label3:
        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label5;

        i2 = i2 + 1;

        $l0 = $l0 >>> 8;

        goto label3;

     label4:
        goto label2;

     label5:
        return i2;
    }
    public static java.math.BigInteger divideAndRound(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label1;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger divideAndRound(java.math.BigInteger,java.math.BigInteger)>($r0, $r1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        return $r0;

     label1:
        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label2;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger divideAndRound(java.math.BigInteger,java.math.BigInteger)>($r0, $r1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        return $r0;

     label2:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        return $r0;
    }
    public static java.math.BigInteger[] divideAndRound(java.math.BigInteger[], java.math.BigInteger)
    {
        java.math.BigInteger[] $r0, r2;
        java.math.BigInteger $r1, $r3;
        int $i0, $i1;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = lengthof $r0;

        r2 = newarray (java.math.BigInteger)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r3 = $r0[$i0];

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger divideAndRound(java.math.BigInteger,java.math.BigInteger)>($r3, $r1);

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public static int[] extGCD(int, int)
    {
        int $i0, $i1;
        int[] r0;
        long $l2;
        java.math.BigInteger $r1, $r2;
        java.math.BigInteger[] $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l2 = (long) $i1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger[] extgcd(java.math.BigInteger,java.math.BigInteger)>($r1, $r2);

        r0 = newarray (int)[3];

        $r1 = $r3[0];

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        r0[0] = $i0;

        $r1 = $r3[1];

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        r0[1] = $i0;

        $r1 = $r3[2];

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        r0[2] = $i0;

        return r0;
    }
    public static java.math.BigInteger[] extgcd(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, r2, r3, r4, r5, r6, $r8;
        int $i0;
        java.math.BigInteger[] $r7;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        r4 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        r3 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        r2 = $r0;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label3;

        r5 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        r6 = $r1;

     label1:
        $i0 = virtualinvoke r6.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label2;

        $r7 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>(r6);

        r2 = $r7[0];

        r3 = $r7[1];

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r8 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        r4 = r5;

        r2 = r6;

        r5 = $r8;

        r6 = r3;

        goto label1;

     label2:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $r0 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r0);

        r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

     label3:
        $r7 = newarray (java.math.BigInteger)[3];

        $r7[0] = r2;

        $r7[1] = r4;

        $r7[2] = r3;

        return $r7;
    }
    public static float floatPow(float, int)
    {
        float $f0, f1;
        int $i0;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        f1 = 1.0F;

     label1:
        if $i0 <= 0 goto label2;

        f1 = f1 * $f0;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return f1;
    }
    public static int floorLog(int)
    {
        int $i0, i1;

        $i0 := @parameter0: int;

        i1 = 0;

        if $i0 > 0 goto label1;

        return -1;

     label1:
        $i0 = $i0 >>> 1;

     label2:
        if $i0 <= 0 goto label3;

        i1 = i1 + 1;

        $i0 = $i0 >>> 1;

        goto label2;

     label3:
        return i1;
    }
    public static int floorLog(java.math.BigInteger)
    {
        java.math.BigInteger $r0, r1;
        int i0, $i1;

        $r0 := @parameter0: java.math.BigInteger;

        i0 = -1;

        r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

     label1:
        $i1 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i1 > 0 goto label2;

        i0 = i0 + 1;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        goto label1;

     label2:
        return i0;
    }
    public static int gcd(int, int)
    {
        int $i0, $i1;
        long $l2;
        java.math.BigInteger $r0, $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = (long) $i0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l2 = (long) $i1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r1);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    public static float intRoot(int, int)
    {
        int $i0, $i1, $i2;
        float f0, f1, $f2, $f3, $f4;
        double $d0;
        byte $b3;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 / $i1;

        f0 = (float) $i2;

        f1 = 0.0F;

     label1:
        $f2 = f1 - f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $d0 = (double) $f2;

        $b3 = $d0 cmpl 1.0E-4;

        if $b3 <= 0 goto label4;

        $f2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: float floatPow(float,int)>(f0, $i1);

     label2:
        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f2);

        if $z0 == 0 goto label3;

        f0 = f0 + f1;

        f0 = f0 / 2.0F;

        $f2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: float floatPow(float,int)>(f0, $i1);

        goto label2;

     label3:
        f1 = f0;

        $f3 = (float) $i0;

        $f2 = $f2 - $f3;

        $f3 = (float) $i1;

        $i2 = $i1 + -1;

        $f4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: float floatPow(float,int)>(f0, $i2);

        $f3 = $f3 * $f4;

        $f2 = $f2 / $f3;

        f0 = f0 - $f2;

        goto label1;

     label4:
        return f0;
    }
    public static byte[] integerToOctets(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r2;
        byte[] r1, $r3;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 & 7;

        if $i0 == 0 goto label1;

        return $r3;

     label1:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 >> 3;

        r1 = newarray (byte)[$i0];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 1, r1, 0, $i0);

        return r1;
    }
    public static boolean isIncreasing(int[])
    {
        int[] $r0;
        int i0, $i1, $i2;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: int[];

        i0 = 1;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $i1 = i0 + -1;

        $i1 = $r0[$i1];

        $i2 = $r0[i0];

        if $i1 < $i2 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a[");

        $i1 = i0 + -1;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] = ");

        $i1 = i0 + -1;

        $i1 = $r0[$i1];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $i1 = $r0[i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = a[");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static int isPower(int, int)
    {
        int $i0, $i1, i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 > 0 goto label1;

        return -1;

     label1:
        i2 = 0;

     label2:
        if $i0 <= 1 goto label4;

        $i3 = $i0 % $i1;

        if $i3 == 0 goto label3;

        return -1;

     label3:
        $i0 = $i0 / $i1;

        i2 = i2 + 1;

        goto label2;

     label4:
        return i2;
    }
    public static boolean isPrime(int)
    {
        int $i0, $i1, $i2;
        int[] $r0;
        long $l3;
        java.math.BigInteger $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        if $i0 != 2 goto label2;

        return 1;

     label2:
        $i1 = $i0 & 1;

        if $i1 == 0 goto label6;

        if $i0 >= 42 goto label5;

        $i1 = 0;

     label3:
        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] SMALL_PRIMES>;

        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] SMALL_PRIMES>;

        $i2 = $r0[$i1];

        if $i0 != $i2 goto label4;

        return 1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i1 = $i0 % 3;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 5;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 7;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 11;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 13;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 17;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 19;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 23;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 29;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 31;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 37;

        if $i1 == 0 goto label6;

        $i1 = $i0 % 41;

        if $i1 == 0 goto label6;

        $l3 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean isProbablePrime(int)>(20);

        return $z0;

     label6:
        return 0;
    }
    public static int jacobi(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2, r3, $r4;
        byte $b0;
        long l1, $l3;
        boolean $z0;
        int $i2;
        int[] $r5;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $b0 = 1;

        l1 = 1L;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label03;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label02;

     label01:
        return $b0;

     label02:
        $b0 = 0;

        goto label01;

     label03:
        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label04;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label16;

     label04:
        r3 = $r0;

        $r2 = $r1;

        $i2 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i2 != -1 goto label05;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i2 != -1 goto label05;

        l1 = -1L;

     label05:
        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

     label06:
        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label07;

        $r4 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r4);

        $r4 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        goto label06;

     label07:
        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label08;

        $r5 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] jacobiTable>;

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        $i2 = $i2 & 7;

        $i2 = $r5[$i2];

        $l3 = (long) $i2;

        l1 = l1 * $l3;

     label08:
        $i2 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i2 >= 0 goto label10;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(1);

        if $z0 == 0 goto label09;

        l1 = neg l1;

     label09:
        r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

     label10:
        $i2 = virtualinvoke r3.<java.math.BigInteger: int signum()>();

        if $i2 == 0 goto label15;

        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

     label11:
        $z0 = virtualinvoke r3.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label12;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        goto label11;

     label12:
        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label13;

        $r5 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int[] jacobiTable>;

        $i2 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        $i2 = $i2 & 7;

        $i2 = $r5[$i2];

        $l3 = (long) $i2;

        l1 = l1 * $l3;

     label13:
        $i2 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i2 >= 0 goto label14;

        $r0 = r3;

        r3 = $r2;

        $r2 = $r0;

        $z0 = virtualinvoke r3.<java.math.BigInteger: boolean testBit(int)>(1);

        if $z0 == 0 goto label14;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(1);

        if $z0 == 0 goto label14;

        l1 = neg l1;

     label14:
        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        goto label10;

     label15:
        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label16;

        $i2 = (int) l1;

        return $i2;

     label16:
        return 0;
    }
    public static java.math.BigInteger leastCommonMultiple(java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0;
        int i0, i1;
        java.math.BigInteger r1, $r2, $r3;

        $r0 := @parameter0: java.math.BigInteger[];

        i0 = lengthof $r0;

        r1 = $r0[0];

        i1 = 1;

     label1:
        if i1 >= i0 goto label2;

        $r2 = $r0[i1];

        $r2 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r2);

        $r3 = $r0[i1];

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static int leastDiv(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $i0 = neg $i0;

     label1:
        if $i0 != 0 goto label2;

        return 1;

     label2:
        $i1 = $i0 & 1;

        if $i1 != 0 goto label3;

        return 2;

     label3:
        $i1 = 3;

     label4:
        $i2 = $i0 / $i1;

        if $i1 > $i2 goto label5;

        $i2 = $i0 % $i1;

        if $i2 == 0 goto label6;

        $i1 = $i1 + 2;

        goto label4;

     label5:
        return $i0;

     label6:
        return $i1;
    }
    public static double log(double)
    {
        double $d0, d1, d2;
        byte $b0;
        int i1;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpg 1.0;

        if $b0 >= 0 goto label1;

        $d0 = 1.0 / $d0;

        $d0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: double log(double)>($d0);

        $d0 = neg $d0;

        return $d0;

     label1:
        i1 = 0;

        d1 = 1.0;

        d2 = $d0;

     label2:
        $b0 = d2 cmpl 2.0;

        if $b0 <= 0 goto label3;

        d2 = d2 / 2.0;

        i1 = i1 + 1;

        d1 = d1 * 2.0;

        goto label2;

     label3:
        $d0 = $d0 / d1;

        $d0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: double logBKM(double)>($d0);

        d1 = (double) i1;

        $d0 = d1 + $d0;

        return $d0;
    }
    public static double log(long)
    {
        long $l0, l1;
        double $d0, $d1;
        java.math.BigInteger $r0;
        int $i2, $i3;

        $l0 := @parameter0: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int floorLog(java.math.BigInteger)>($r0);

        $i3 = 1 << $i2;

        l1 = (long) $i3;

        $d1 = (double) $l0;

        $d0 = (double) l1;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: double logBKM(double)>($d0);

        $d1 = (double) $i2;

        $d0 = $d1 + $d0;

        return $d0;
    }
    private static double logBKM(double)
    {
        double $d0, d1, d2, d3, d4;
        double[] r0;
        int i0;
        byte $b1;

        $d0 := @parameter0: double;

        r0 = newarray (double)[100];

        r0[0] = 1.0;

        r0[1] = 0.5849625007211562;

        r0[2] = 0.32192809488736235;

        r0[3] = 0.16992500144231237;

        r0[4] = 0.0874628412503394;

        r0[5] = 0.044394119358453436;

        r0[6] = 0.02236781302845451;

        r0[7] = 0.01122725542325412;

        r0[8] = 0.005624549193878107;

        r0[9] = 0.0028150156070540383;

        r0[10] = 0.0014081943928083889;

        r0[11] = 7.042690112466433E-4;

        r0[12] = 3.5217748030102726E-4;

        r0[13] = 1.7609948644250602E-4;

        r0[14] = 8.80524301221769E-5;

        r0[15] = 4.4026886827316716E-5;

        r0[16] = 2.2013611360340496E-5;

        r0[17] = 1.1006847667481442E-5;

        r0[18] = 5.503434330648604E-6;

        r0[19] = 2.751719789561283E-6;

        r0[20] = 1.375860550841138E-6;

        r0[21] = 6.879304394358497E-7;

        r0[22] = 3.4396526072176454E-7;

        r0[23] = 1.7198264061184464E-7;

        r0[24] = 8.599132286866321E-8;

        r0[25] = 4.299566207501687E-8;

        r0[26] = 2.1497831197679756E-8;

        r0[27] = 1.0748915638882709E-8;

        r0[28] = 5.374457829452062E-9;

        r0[29] = 2.687228917228708E-9;

        r0[30] = 1.3436144592400231E-9;

        r0[31] = 6.718072297764289E-10;

        r0[32] = 3.3590361492731876E-10;

        r0[33] = 1.6795180747343547E-10;

        r0[34] = 8.397590373916176E-11;

        r0[35] = 4.1987951870191886E-11;

        r0[36] = 2.0993975935248694E-11;

        r0[37] = 1.0496987967662534E-11;

        r0[38] = 5.2484939838408146E-12;

        r0[39] = 2.624246991922794E-12;

        r0[40] = 1.3121234959619935E-12;

        r0[41] = 6.56061747981146E-13;

        r0[42] = 3.2803087399061026E-13;

        r0[43] = 1.6401543699531447E-13;

        r0[44] = 8.200771849765956E-14;

        r0[45] = 4.1003859248830365E-14;

        r0[46] = 2.0501929624415328E-14;

        r0[47] = 1.02509648122077E-14;

        r0[48] = 5.1254824061038595E-15;

        r0[49] = 2.5627412030519317E-15;

        r0[50] = 1.2813706015259665E-15;

        r0[51] = 6.406853007629834E-16;

        r0[52] = 3.203426503814917E-16;

        r0[53] = 1.6017132519074588E-16;

        r0[54] = 8.008566259537294E-17;

        r0[55] = 4.004283129768647E-17;

        r0[56] = 2.0021415648843235E-17;

        r0[57] = 1.0010707824421618E-17;

        r0[58] = 5.005353912210809E-18;

        r0[59] = 2.5026769561054044E-18;

        r0[60] = 1.2513384780527022E-18;

        r0[61] = 6.256692390263511E-19;

        r0[62] = 3.1283461951317555E-19;

        r0[63] = 1.5641730975658778E-19;

        r0[64] = 7.820865487829389E-20;

        r0[65] = 3.9104327439146944E-20;

        r0[66] = 1.9552163719573472E-20;

        r0[67] = 9.776081859786736E-21;

        r0[68] = 4.888040929893368E-21;

        r0[69] = 2.444020464946684E-21;

        r0[70] = 1.222010232473342E-21;

        r0[71] = 6.11005116236671E-22;

        r0[72] = 3.055025581183355E-22;

        r0[73] = 1.5275127905916775E-22;

        r0[74] = 7.637563952958387E-23;

        r0[75] = 3.818781976479194E-23;

        r0[76] = 1.909390988239597E-23;

        r0[77] = 9.546954941197984E-24;

        r0[78] = 4.773477470598992E-24;

        r0[79] = 2.386738735299496E-24;

        r0[80] = 1.193369367649748E-24;

        r0[81] = 5.96684683824874E-25;

        r0[82] = 2.98342341912437E-25;

        r0[83] = 1.491711709562185E-25;

        r0[84] = 7.458558547810925E-26;

        r0[85] = 3.7292792739054626E-26;

        r0[86] = 1.8646396369527313E-26;

        r0[87] = 9.323198184763657E-27;

        r0[88] = 4.661599092381828E-27;

        r0[89] = 2.330799546190914E-27;

        r0[90] = 1.165399773095457E-27;

        r0[91] = 5.826998865477285E-28;

        r0[92] = 2.9134994327386427E-28;

        r0[93] = 1.4567497163693213E-28;

        r0[94] = 7.283748581846607E-29;

        r0[95] = 3.6418742909233034E-29;

        r0[96] = 1.8209371454616517E-29;

        r0[97] = 9.104685727308258E-30;

        r0[98] = 4.552342863654129E-30;

        r0[99] = 2.2761714318270646E-30;

        d2 = 1.0;

        d3 = 0.0;

        d4 = 1.0;

        i0 = 0;

     label1:
        if i0 >= 53 goto label3;

        d1 = d2 * d4;

        d1 = d2 + d1;

        $b1 = d1 cmpg $d0;

        if $b1 > 0 goto label2;

        d2 = d1;

        d1 = r0[i0];

        d3 = d3 + d1;

     label2:
        d4 = d4 * 0.5;

        i0 = i0 + 1;

        goto label1;

     label3:
        return d3;
    }
    public static int maxPower(int)
    {
        int $i0, $i1, i2, i3;

        $i0 := @parameter0: int;

        i2 = 0;

        if $i0 == 0 goto label2;

        i3 = 1;

     label1:
        $i1 = $i0 & i3;

        if $i1 != 0 goto label3;

        i2 = i2 + 1;

        i3 = i3 << 1;

        goto label1;

     label2:
        return 0;

     label3:
        return i2;
    }
    public static long mod(long, long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = $l0 % $l1;

        $b2 = $l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $l0 = $l0 + $l1;

     label1:
        return $l0;
    }
    public static int modInverse(int, int)
    {
        int $i0, $i1;
        long $l2;
        java.math.BigInteger $r0, $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = (long) $i0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l2 = (long) $i1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r1);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    public static long modInverse(long, long)
    {
        long $l0, $l1;
        java.math.BigInteger $r0, $r1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r1);

        $l0 = virtualinvoke $r0.<java.math.BigInteger: long longValue()>();

        return $l0;
    }
    public static int modPow(int, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        if $i0 <= 0 goto label1;

        $i3 = $i0 * $i0;

        if $i3 > 2147483647 goto label1;

        if $i2 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = 1;

        $i1 = $i1 % $i0;

        $i1 = $i1 + $i0;

        $i1 = $i1 % $i0;

     label3:
        if $i2 <= 0 goto label5;

        $i4 = $i2 & 1;

        if $i4 != 1 goto label4;

        $i3 = $i3 * $i1;

        $i3 = $i3 % $i0;

     label4:
        $i1 = $i1 * $i1;

        $i1 = $i1 % $i0;

        $i2 = $i2 >>> 1;

        goto label3;

     label5:
        return $i3;
    }
    public static java.math.BigInteger nextPrime(long)
    {
        long $l0, l1, $l3, $l4, $l5;
        boolean z0;
        byte $b2;
        java.math.BigInteger $r0;

        $l0 := @parameter0: long;

        z0 = 0;

        l1 = 0L;

        $b2 = $l0 cmp 1L;

        if $b2 > 0 goto label1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        return $r0;

     label1:
        $b2 = $l0 cmp 2L;

        if $b2 != 0 goto label2;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3L);

        return $r0;

     label2:
        $l3 = 1L + $l0;

        $l4 = 1L & $l0;

        $l3 = $l3 + $l4;

     label3:
        $l4 = $l0 << 1;

        $b2 = $l3 cmp $l4;

        if $b2 > 0 goto label9;

        if z0 != 0 goto label9;

        $l4 = 3L;

     label4:
        $l5 = $l3 >> 1;

        $b2 = $l4 cmp $l5;

        if $b2 > 0 goto label6;

        if z0 != 0 goto label6;

        $l5 = $l3 % $l4;

        $b2 = $l5 cmp 0L;

        if $b2 != 0 goto label5;

        z0 = 1;

     label5:
        $l4 = $l4 + 2L;

        goto label4;

     label6:
        if z0 == 0 goto label8;

        z0 = 0;

     label7:
        $l3 = $l3 + 2L;

        goto label3;

     label8:
        l1 = $l3;

        z0 = 1;

        goto label7;

     label9:
        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l1);

        return $r0;
    }
    public static java.math.BigInteger nextProbablePrime(java.math.BigInteger)
    {
        java.math.BigInteger $r0;

        $r0 := @parameter0: java.math.BigInteger;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger nextProbablePrime(java.math.BigInteger,int)>($r0, 20);

        return $r0;
    }
    public static java.math.BigInteger nextProbablePrime(java.math.BigInteger, int)
    {
        java.math.BigInteger $r0, $r1;
        int $i0, $i1;
        boolean $z0;
        long $l2, $l3;
        byte $b4;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i1 < 0 goto label1;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i1 == 0 goto label1;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        return $r0;

     label2:
        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        $r0 = $r1;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label3;

        $r0 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r0);

     label3:
        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 6 goto label5;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(152125131763605L);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r1);

        $l2 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        $l3 = $l2 % 3L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 5L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 7L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 11L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 13L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 17L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 19L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 23L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 29L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 31L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l3 = $l2 % 37L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l2 = $l2 % 41L;

        $b4 = $l2 cmp 0L;

        if $b4 != 0 goto label5;

     label4:
        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        goto label3;

     label5:
        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i1 < 4 goto label6;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean isProbablePrime(int)>($i0);

        if $z0 != 0 goto label6;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        goto label3;

     label6:
        return $r0;
    }
    public static int nextSmallerPrime(int)
    {
        boolean $z0;
        int $i0, $i1;
        byte $b2, $b3;

        $i0 := @parameter0: int;

        if $i0 > 2 goto label1;

        return 1;

     label1:
        if $i0 != 3 goto label2;

        return 2;

     label2:
        $i1 = $i0 & 1;

        if $i1 != 0 goto label6;

        $i0 = $i0 + -1;

     label3:
        if $i0 <= 3 goto label7;

        $b2 = 1;

     label4:
        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: boolean isPrime(int)>($i0);

        if $z0 != 0 goto label8;

        $b3 = 1;

     label5:
        $i1 = $b2 & $b3;

        if $i1 == 0 goto label9;

        $i0 = $i0 + -2;

        goto label3;

     label6:
        $i0 = $i0 + -2;

        goto label3;

     label7:
        $b2 = 0;

        goto label4;

     label8:
        $b3 = 0;

        goto label5;

     label9:
        return $i0;
    }
    public static java.math.BigInteger octetsToInteger(byte[])
    {
        byte[] $r0;
        int $i0;
        java.math.BigInteger $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger octetsToInteger(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }
    public static java.math.BigInteger octetsToInteger(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2;
        java.math.BigInteger $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 + 1;

        r1 = newarray (byte)[$i2];

        r1[0] = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 1, $i1);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>(r1);

        return $r2;
    }
    public static int order(int, int)
    {
        int $i0, $i1, i2, i3;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0 % $i1;

        i3 = 1;

        if i2 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an element of Z/(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Z)^*; it is not meaningful to compute its order.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label1:
        if i2 == 1 goto label3;

        i2 = i2 * $i0;

        i2 = i2 % $i1;

        if i2 >= 0 goto label2;

        i2 = i2 + $i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }
    public static boolean passesSmallPrimeTest(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r2, $r3;
        int[] r1;
        int i0, $i1;
        long $l2;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        r1 = newarray (int)[239];

        r1[0] = 2;

        r1[1] = 3;

        r1[2] = 5;

        r1[3] = 7;

        r1[4] = 11;

        r1[5] = 13;

        r1[6] = 17;

        r1[7] = 19;

        r1[8] = 23;

        r1[9] = 29;

        r1[10] = 31;

        r1[11] = 37;

        r1[12] = 41;

        r1[13] = 43;

        r1[14] = 47;

        r1[15] = 53;

        r1[16] = 59;

        r1[17] = 61;

        r1[18] = 67;

        r1[19] = 71;

        r1[20] = 73;

        r1[21] = 79;

        r1[22] = 83;

        r1[23] = 89;

        r1[24] = 97;

        r1[25] = 101;

        r1[26] = 103;

        r1[27] = 107;

        r1[28] = 109;

        r1[29] = 113;

        r1[30] = 127;

        r1[31] = 131;

        r1[32] = 137;

        r1[33] = 139;

        r1[34] = 149;

        r1[35] = 151;

        r1[36] = 157;

        r1[37] = 163;

        r1[38] = 167;

        r1[39] = 173;

        r1[40] = 179;

        r1[41] = 181;

        r1[42] = 191;

        r1[43] = 193;

        r1[44] = 197;

        r1[45] = 199;

        r1[46] = 211;

        r1[47] = 223;

        r1[48] = 227;

        r1[49] = 229;

        r1[50] = 233;

        r1[51] = 239;

        r1[52] = 241;

        r1[53] = 251;

        r1[54] = 257;

        r1[55] = 263;

        r1[56] = 269;

        r1[57] = 271;

        r1[58] = 277;

        r1[59] = 281;

        r1[60] = 283;

        r1[61] = 293;

        r1[62] = 307;

        r1[63] = 311;

        r1[64] = 313;

        r1[65] = 317;

        r1[66] = 331;

        r1[67] = 337;

        r1[68] = 347;

        r1[69] = 349;

        r1[70] = 353;

        r1[71] = 359;

        r1[72] = 367;

        r1[73] = 373;

        r1[74] = 379;

        r1[75] = 383;

        r1[76] = 389;

        r1[77] = 397;

        r1[78] = 401;

        r1[79] = 409;

        r1[80] = 419;

        r1[81] = 421;

        r1[82] = 431;

        r1[83] = 433;

        r1[84] = 439;

        r1[85] = 443;

        r1[86] = 449;

        r1[87] = 457;

        r1[88] = 461;

        r1[89] = 463;

        r1[90] = 467;

        r1[91] = 479;

        r1[92] = 487;

        r1[93] = 491;

        r1[94] = 499;

        r1[95] = 503;

        r1[96] = 509;

        r1[97] = 521;

        r1[98] = 523;

        r1[99] = 541;

        r1[100] = 547;

        r1[101] = 557;

        r1[102] = 563;

        r1[103] = 569;

        r1[104] = 571;

        r1[105] = 577;

        r1[106] = 587;

        r1[107] = 593;

        r1[108] = 599;

        r1[109] = 601;

        r1[110] = 607;

        r1[111] = 613;

        r1[112] = 617;

        r1[113] = 619;

        r1[114] = 631;

        r1[115] = 641;

        r1[116] = 643;

        r1[117] = 647;

        r1[118] = 653;

        r1[119] = 659;

        r1[120] = 661;

        r1[121] = 673;

        r1[122] = 677;

        r1[123] = 683;

        r1[124] = 691;

        r1[125] = 701;

        r1[126] = 709;

        r1[127] = 719;

        r1[128] = 727;

        r1[129] = 733;

        r1[130] = 739;

        r1[131] = 743;

        r1[132] = 751;

        r1[133] = 757;

        r1[134] = 761;

        r1[135] = 769;

        r1[136] = 773;

        r1[137] = 787;

        r1[138] = 797;

        r1[139] = 809;

        r1[140] = 811;

        r1[141] = 821;

        r1[142] = 823;

        r1[143] = 827;

        r1[144] = 829;

        r1[145] = 839;

        r1[146] = 853;

        r1[147] = 857;

        r1[148] = 859;

        r1[149] = 863;

        r1[150] = 877;

        r1[151] = 881;

        r1[152] = 883;

        r1[153] = 887;

        r1[154] = 907;

        r1[155] = 911;

        r1[156] = 919;

        r1[157] = 929;

        r1[158] = 937;

        r1[159] = 941;

        r1[160] = 947;

        r1[161] = 953;

        r1[162] = 967;

        r1[163] = 971;

        r1[164] = 977;

        r1[165] = 983;

        r1[166] = 991;

        r1[167] = 997;

        r1[168] = 1009;

        r1[169] = 1013;

        r1[170] = 1019;

        r1[171] = 1021;

        r1[172] = 1031;

        r1[173] = 1033;

        r1[174] = 1039;

        r1[175] = 1049;

        r1[176] = 1051;

        r1[177] = 1061;

        r1[178] = 1063;

        r1[179] = 1069;

        r1[180] = 1087;

        r1[181] = 1091;

        r1[182] = 1093;

        r1[183] = 1097;

        r1[184] = 1103;

        r1[185] = 1109;

        r1[186] = 1117;

        r1[187] = 1123;

        r1[188] = 1129;

        r1[189] = 1151;

        r1[190] = 1153;

        r1[191] = 1163;

        r1[192] = 1171;

        r1[193] = 1181;

        r1[194] = 1187;

        r1[195] = 1193;

        r1[196] = 1201;

        r1[197] = 1213;

        r1[198] = 1217;

        r1[199] = 1223;

        r1[200] = 1229;

        r1[201] = 1231;

        r1[202] = 1237;

        r1[203] = 1249;

        r1[204] = 1259;

        r1[205] = 1277;

        r1[206] = 1279;

        r1[207] = 1283;

        r1[208] = 1289;

        r1[209] = 1291;

        r1[210] = 1297;

        r1[211] = 1301;

        r1[212] = 1303;

        r1[213] = 1307;

        r1[214] = 1319;

        r1[215] = 1321;

        r1[216] = 1327;

        r1[217] = 1361;

        r1[218] = 1367;

        r1[219] = 1373;

        r1[220] = 1381;

        r1[221] = 1399;

        r1[222] = 1409;

        r1[223] = 1423;

        r1[224] = 1427;

        r1[225] = 1429;

        r1[226] = 1433;

        r1[227] = 1439;

        r1[228] = 1447;

        r1[229] = 1451;

        r1[230] = 1453;

        r1[231] = 1459;

        r1[232] = 1471;

        r1[233] = 1481;

        r1[234] = 1483;

        r1[235] = 1487;

        r1[236] = 1489;

        r1[237] = 1493;

        r1[238] = 1499;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $i1 = r1[i0];

        $l2 = (long) $i1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static int pow(int, int)
    {
        int $i0, $i1, $i2, i3;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        i3 = 1;

     label1:
        if $i2 <= 0 goto label3;

        $i0 = $i2 & 1;

        if $i0 != 1 goto label2;

        i3 = i3 * $i1;

     label2:
        $i1 = $i1 * $i1;

        $i2 = $i2 >>> 1;

        goto label1;

     label3:
        return i3;
    }
    public static long pow(long, int)
    {
        int $i0, $i2;
        long $l1, l3;

        $l1 := @parameter0: long;

        $i2 := @parameter1: int;

        l3 = 1L;

     label1:
        if $i2 <= 0 goto label3;

        $i0 = $i2 & 1;

        if $i0 != 1 goto label2;

        l3 = l3 * $l1;

     label2:
        $l1 = $l1 * $l1;

        $i2 = $i2 >>> 1;

        goto label1;

     label3:
        return l3;
    }
    public static java.math.BigInteger randomize(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        java.security.SecureRandom $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr>;

        if $r1 != null goto label1;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr> = $r1;

     label1:
        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr>;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger randomize(java.math.BigInteger,java.security.SecureRandom)>($r0, $r1);

        return $r0;
    }
    public static java.math.BigInteger randomize(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger $r0, $r2;
        java.security.SecureRandom r1;
        int $i0, i1, $i2;

        $r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.security.SecureRandom;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        if r1 != null goto label1;

        r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr>;

        if r1 == null goto label3;

        r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.security.SecureRandom sr>;

     label1:
        i1 = 0;

     label2:
        if i1 >= 20 goto label5;

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, r1);

        $i2 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i2 >= 0 goto label4;

        return $r2;

     label3:
        r1 = new java.security.SecureRandom;

        specialinvoke r1.<java.security.SecureRandom: void <init>()>();

        goto label1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        return $r0;
    }
    public static java.math.BigInteger reduceInto(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        return $r0;
    }
    public static java.math.BigInteger ressol(java.math.BigInteger, java.math.BigInteger) throws java.lang.IllegalArgumentException
    {
        java.math.BigInteger $r0, $r1, $r2, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        long l1, l2, l4, $l5;
        byte $b3;

        $r1 := @parameter0: java.math.BigInteger;

        $r0 := @parameter1: java.math.BigInteger;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label01;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r0);

     label01:
        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        return $r1;

     label02:
        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label03;

        return $r1;

     label03:
        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>(1);

        if $z0 == 0 goto label05;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int jacobi(java.math.BigInteger,java.math.BigInteger)>($r1, $r0);

        if $i0 != 1 goto label04;

        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r0);

        return $r1;

     label04:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No quadratic residue: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label05:
        $r2 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        l1 = 0L;

     label06:
        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 != 0 goto label07;

        l1 = l1 + 1L;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        goto label06;

     label07:
        $r6 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

        $r7 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r6 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r0);

        $r2 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r0);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r8 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r0);

        $r2 = $r8;

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r9 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r0);

        $r6 = $r9;

        $r10 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label16;

        $r8 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

     label08:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int jacobi(java.math.BigInteger,java.math.BigInteger)>($r8, $r0);

        if $i0 != 1 goto label09;

        $r9 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        goto label08;

     label09:
        $r9 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r9 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        $r7 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r0);

     label10:
        $r8 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i0 != 1 goto label17;

        $r8 = $r2;

        l2 = l1;

        l1 = 0L;

     label11:
        $r9 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label12;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        l1 = l1 + 1L;

        goto label11;

     label12:
        l2 = l2 - l1;

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label13;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No quadratic residue: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label13:
        $r8 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        l4 = 0L;

     label14:
        $l5 = l2 - 1L;

        $b3 = l4 cmp $l5;

        if $b3 >= 0 goto label15;

        $r8 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        l4 = l4 + 1L;

        goto label14;

     label15:
        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, $r0);

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r0);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r0);

        $r7 = $r8;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r0);

        goto label10;

     label16:
        return $r9;

     label17:
        return $r6;
    }
    public static java.math.BigInteger squareRoot(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, r5, $r6, $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;
        byte $b3;
        long $l4;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot extract root of negative number");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i1;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        r5 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ZERO>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label2;

        $r6 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $i0 = $i1 + -1;

     label2:
        if $i0 <= 0 goto label7;

        $r6 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger FOUR>;

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $i0 = $i0 + -1;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>($i0);

        if $z0 == 0 goto label5;

        $i1 = 2;

     label3:
        $i0 = $i0 + -1;

        $z0 = virtualinvoke $r0.<java.math.BigInteger: boolean testBit(int)>($i0);

        if $z0 == 0 goto label6;

        $b3 = 1;

     label4:
        $i1 = $i1 + $b3;

        $l4 = (long) $i1;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        r5 = $r6;

        $r7 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger FOUR>;

        $r7 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r8 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

        $r8 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger TWO>;

        $r8 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r1 = $r8;

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i1 == -1 goto label2;

        $r1 = <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        r5 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        goto label2;

     label5:
        $i1 = 0;

        goto label3;

     label6:
        $b3 = 0;

        goto label4;

     label7:
        return $r1;
    }
