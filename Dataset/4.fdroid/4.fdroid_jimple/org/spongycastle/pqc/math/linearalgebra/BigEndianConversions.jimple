org.spongycastle.pqc.math.linearalgebra.BigEndianConversions extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.BigEndianConversions r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.BigEndianConversions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void I2OSP(int, byte[], int)
    {
        int $i0, i1, i2, $i3;
        byte[] $r0;
        byte $b4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $i3 = $i0 >>> 24;

        $b4 = (byte) $i3;

        $r0[i1] = $b4;

        i1 = i2 + 1;

        $i3 = $i0 >>> 16;

        $b4 = (byte) $i3;

        $r0[i2] = $b4;

        i2 = i1 + 1;

        $i3 = $i0 >>> 8;

        $b4 = (byte) $i3;

        $r0[i1] = $b4;

        $b4 = (byte) $i0;

        $r0[i2] = $b4;

        return;
    }
    public static void I2OSP(int, byte[], int, int)
    {
        int $i0, $i1, $i2, $i3, i4, $i5;
        byte[] $r0;
        byte $b6;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i4 = $i2 + -1;

     label1:
        if i4 < 0 goto label2;

        $i3 = $i1 + i4;

        $i5 = $i2 + -1;

        $i5 = $i5 - i4;

        $i5 = $i5 * 8;

        $i5 = $i0 >>> $i5;

        $b6 = (byte) $i5;

        $r0[$i3] = $b6;

        i4 = i4 + -1;

        goto label1;

     label2:
        return;
    }
    public static void I2OSP(long, byte[], int)
    {
        long $l0, $l3;
        byte[] $r0;
        int i1, i2, $i4;
        byte $b5;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $l3 = $l0 >>> 56;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i1] = $b5;

        i1 = i2 + 1;

        $l3 = $l0 >>> 48;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i2] = $b5;

        i2 = i1 + 1;

        $l3 = $l0 >>> 40;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i1] = $b5;

        i1 = i2 + 1;

        $l3 = $l0 >>> 32;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i2] = $b5;

        i2 = i1 + 1;

        $l3 = $l0 >>> 24;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i1] = $b5;

        i1 = i2 + 1;

        $l3 = $l0 >>> 16;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i2] = $b5;

        i2 = i1 + 1;

        $l3 = $l0 >>> 8;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[i1] = $b5;

        i1 = (int) $l0;

        $b5 = (byte) i1;

        $r0[i2] = $b5;

        return;
    }
    public static byte[] I2OSP(int)
    {
        int $i0, $i1;
        byte[] r0;
        byte $b2;

        $i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        r0[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        r0[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        r0[2] = $b2;

        $b2 = (byte) $i0;

        r0[3] = $b2;

        return r0;
    }
    public static byte[] I2OSP(int, int) throws java.lang.ArithmeticException
    {
        int $i0, $i1, $i2, i3, $i4;
        java.lang.ArithmeticException $r0;
        byte[] r1;
        byte $b5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int ceilLog256(int)>($i0);

        if $i2 <= $i1 goto label2;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Cannot encode given integer into specified number of octets.");

        throw $r0;

     label2:
        r1 = newarray (byte)[$i1];

        i3 = $i1 + -1;

     label3:
        $i4 = $i1 - $i2;

        if i3 < $i4 goto label4;

        $i4 = $i1 + -1;

        $i4 = $i4 - i3;

        $i4 = $i4 * 8;

        $i4 = $i0 >>> $i4;

        $b5 = (byte) $i4;

        r1[i3] = $b5;

        i3 = i3 + -1;

        goto label3;

     label4:
        return r1;
    }
    public static byte[] I2OSP(long)
    {
        long $l0, $l1;
        byte[] r0;
        int $i2;
        byte $b3;

        $l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        $l1 = $l0 >>> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[0] = $b3;

        $l1 = $l0 >>> 48;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[1] = $b3;

        $l1 = $l0 >>> 40;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[2] = $b3;

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[3] = $b3;

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[4] = $b3;

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[5] = $b3;

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        r0[6] = $b3;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        r0[7] = $b3;

        return r0;
    }
    public static int OS2IP(byte[])
    {
        byte[] $r0;
        int $i0, i1, $i2, $i4;
        java.lang.ArithmeticException $r1;
        byte $b3;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 <= 4 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("invalid input length");

        throw $r1;

     label1:
        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

        return 0;

     label2:
        $i0 = 0;

        i1 = 0;

     label3:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label4;

        $b3 = $r0[i1];

        $i2 = $b3 & 255;

        $i4 = lengthof $r0;

        $i4 = $i4 + -1;

        $i4 = $i4 - i1;

        $i4 = $i4 * 8;

        $i2 = $i2 << $i4;

        $i0 = $i0 | $i2;

        i1 = i1 + 1;

        goto label3;

     label4:
        return $i0;
    }
    public static int OS2IP(byte[], int)
    {
        byte[] $r0;
        int i0, i1, i3;
        byte $b2;

        $r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        i0 = $b2 & 255;

        i3 = i0 << 24;

        i0 = i1 + 1;

        $b2 = $r0[i1];

        i1 = $b2 & 255;

        i1 = i1 << 16;

        i3 = i3 | i1;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        i0 = $b2 & 255;

        i0 = i0 << 8;

        i0 = i3 | i0;

        $b2 = $r0[i1];

        i1 = $b2 & 255;

        i0 = i0 | i1;

        return i0;
    }
    public static int OS2IP(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = lengthof $r0;

        if $i2 == 0 goto label1;

        $i2 = lengthof $r0;

        $i3 = $i0 + $i1;

        $i3 = $i3 + -1;

        if $i2 >= $i3 goto label2;

     label1:
        return 0;

     label2:
        $i2 = 0;

        $i3 = 0;

     label3:
        if $i3 >= $i1 goto label4;

        $i4 = $i0 + $i3;

        $b5 = $r0[$i4];

        $i4 = $b5 & 255;

        $i6 = $i1 - $i3;

        $i6 = $i6 + -1;

        $i6 = $i6 * 8;

        $i4 = $i4 << $i6;

        $i2 = $i2 | $i4;

        $i3 = $i3 + 1;

        goto label3;

     label4:
        return $i2;
    }
    public static long OS2LIP(byte[], int)
    {
        byte[] $r0;
        int i0, i1;
        byte $b2;
        long $l3, $l4;

        $r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        $l3 = (long) $b2;

        $l3 = $l3 & 255L;

        $l3 = $l3 << 56;

        i0 = i1 + 1;

        $b2 = $r0[i1];

        $l4 = (long) $b2;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 48;

        $l3 = $l3 | $l4;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        $l4 = (long) $b2;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 40;

        $l3 = $l3 | $l4;

        i0 = i1 + 1;

        $b2 = $r0[i1];

        $l4 = (long) $b2;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 32;

        $l3 = $l3 | $l4;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        $l4 = (long) $b2;

        $l4 = $l4 & 255L;

        $l4 = $l4 << 24;

        $l3 = $l3 | $l4;

        i0 = i1 + 1;

        $b2 = $r0[i1];

        i1 = $b2 & 255;

        i1 = i1 << 16;

        $l4 = (long) i1;

        $l3 = $l3 | $l4;

        i1 = i0 + 1;

        $b2 = $r0[i0];

        i0 = $b2 & 255;

        i0 = i0 << 8;

        $l4 = (long) i0;

        $l3 = $l3 | $l4;

        $b2 = $r0[i1];

        i0 = $b2 & 255;

        $l4 = (long) i0;

        $l3 = $l3 | $l4;

        return $l3;
    }
    public static byte[] toByteArray(int[])
    {
        int[] $r0;
        byte[] r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i1 = lengthof $r0;

        $i1 = $i1 << 2;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label2;

        $i2 = $r0[$i1];

        $i0 = $i1 << 2;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: void I2OSP(int,byte[],int)>($i2, r1, $i0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static byte[] toByteArray(int[], int)
    {
        int[] $r0;
        int $i0, i1, i2, i3, $i4;
        byte[] r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        i1 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        i2 = 0;

        i3 = 0;

     label1:
        $i4 = i1 + -2;

        if i3 > $i4 goto label2;

        $i4 = $r0[i3];

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: void I2OSP(int,byte[],int)>($i4, r1, i2);

        i3 = i3 + 1;

        i2 = i2 + 4;

        goto label1;

     label2:
        i1 = i1 + -1;

        i1 = $r0[i1];

        $i0 = $i0 - i2;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: void I2OSP(int,byte[],int,int)>(i1, r1, i2, $i0);

        return r1;
    }
    public static int[] toIntArray(byte[])
    {
        byte[] $r0;
        int i0, i1, $i2, i3, $i4;
        int[] r1;

        $r0 := @parameter0: byte[];

        $i2 = lengthof $r0;

        $i2 = $i2 + 3;

        i0 = $i2 / 4;

        $i2 = lengthof $r0;

        i1 = $i2 & 3;

        r1 = newarray (int)[i0];

        $i2 = 0;

        i3 = 0;

     label1:
        $i4 = i0 + -2;

        if i3 > $i4 goto label2;

        $i4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: int OS2IP(byte[],int)>($r0, $i2);

        r1[i3] = $i4;

        i3 = i3 + 1;

        $i2 = $i2 + 4;

        goto label1;

     label2:
        if i1 == 0 goto label3;

        i0 = i0 + -1;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: int OS2IP(byte[],int,int)>($r0, $i2, i1);

        r1[i0] = $i2;

        return r1;

     label3:
        i0 = i0 + -1;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigEndianConversions: int OS2IP(byte[],int)>($r0, $i2);

        r1[i0] = $i2;

        return r1;
    }
