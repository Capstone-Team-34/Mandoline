org.spongycastle.pqc.math.linearalgebra.BigIntUtils extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.BigIntUtils r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.BigIntUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static boolean equals(java.math.BigInteger[], java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0, $r1;
        int $i0, i1, $i2;
        java.math.BigInteger $r2, $r3;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger[];

        i1 = 0;

        $i2 = lengthof $r0;

        $i0 = lengthof $r1;

        if $i2 == $i0 goto label1;

        return 0;

     label1:
        $i2 = 0;

     label2:
        $i0 = lengthof $r0;

        if $i2 >= $i0 goto label3;

        $r2 = $r0[$i2];

        $r3 = $r1[$i2];

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        i1 = i1 | $i0;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        if i1 != 0 goto label4;

        return 1;

     label4:
        return 0;
    }
    public static void fill(java.math.BigInteger[], java.math.BigInteger)
    {
        java.math.BigInteger[] $r0;
        java.math.BigInteger $r1;
        int $i0;

        $r0 := @parameter0: java.math.BigInteger[];

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $r0[$i0] = $r1;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }
    public static java.math.BigInteger[] subArray(java.math.BigInteger[], int, int)
    {
        java.math.BigInteger[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.math.BigInteger[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 - $i0;

        r1 = newarray (java.math.BigInteger)[$i2];

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static int[] toIntArray(java.math.BigInteger[])
    {
        java.math.BigInteger[] $r0;
        int[] r1;
        int $i0, $i1;
        java.math.BigInteger $r2;

        $r0 := @parameter0: java.math.BigInteger[];

        $i1 = lengthof $r0;

        r1 = newarray (int)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        r1[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static int[] toIntArrayModQ(int, java.math.BigInteger[])
    {
        int $i0, $i2;
        java.math.BigInteger[] $r0;
        int[] r1;
        long $l1;
        java.math.BigInteger $r2, $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.BigInteger[];

        $l1 = (long) $i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label2;

        $r3 = $r0[$i0];

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        $i2 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        r1[$i0] = $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static byte[] toMinimalByteArray(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        int $i0;
        byte[] $r1, r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r1;

        if $i0 == 1 goto label1;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 & 7;

        if $i0 == 0 goto label2;

     label1:
        return $r1;

     label2:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i0 = $i0 >> 3;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r2, 0, $i0);

        return r2;
    }
