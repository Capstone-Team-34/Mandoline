org.spongycastle.pqc.math.linearalgebra.GoppaCode extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.GoppaCode r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GoppaCode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe computeSystematicForm(org.spongycastle.pqc.math.linearalgebra.GF2Matrix, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r0, r4, r6, $r7;
        java.security.SecureRandom $r1;
        java.lang.ArithmeticException r2;
        org.spongycastle.pqc.math.linearalgebra.Permutation r3;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r5;
        boolean z0;
        org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe $r8;

        $r0 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter1: java.security.SecureRandom;

        $i0 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int getNumColumns()>();

        r4 = null;

     label1:
        r3 = new org.spongycastle.pqc.math.linearalgebra.Permutation;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: void <init>(int,java.security.SecureRandom)>($i0, $r1);

        $r5 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>(r3);

        r6 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r5;

        $r7 = virtualinvoke r6.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getLeftSubMatrix()>();

        z0 = 1;

     label2:
        $r5 = virtualinvoke $r7.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix computeInverse()>();

     label3:
        r4 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r5;

     label4:
        if z0 == 0 goto label1;

        $r5 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)>(r6);

        $r0 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r5;

        $r0 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getRightSubMatrix()>();

        $r8 = new org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe;

        specialinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.math.linearalgebra.Permutation)>($r7, $r0, r3);

        return $r8;

     label5:
        r2 := @caughtexception;

        z0 = 0;

        goto label4;

        catch java.lang.ArithmeticException from label2 to label3 with label5;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Matrix createCanonicalCheckMatrix(org.spongycastle.pqc.math.linearalgebra.GF2mField, org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r0;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r2, $r7;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] r5, r6;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r8;

        $r0 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i5 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        i2 = 1 << $i5;

        $i6 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int getDegree()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i6;

        $r2[1] = i2;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $r2 = newarray (int)[2];

        $r2[0] = $i6;

        $r2[1] = i2;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r6 = (int[][]) $r4;

        i3 = 0;

     label01:
        if i3 >= i2 goto label02;

        $r2 = r6[0];

        $i7 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int evaluateAt(int)>(i3);

        $i7 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i7);

        $r2[i3] = $i7;

        i3 = i3 + 1;

        goto label01;

     label02:
        i3 = 1;

     label03:
        if i3 >= $i6 goto label06;

        $i7 = 0;

     label04:
        if $i7 >= i2 goto label05;

        $r2 = r6[i3];

        i1 = i3 + -1;

        $r7 = r6[i1];

        i1 = $r7[$i7];

        i1 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>(i1, $i7);

        $r2[$i7] = i1;

        $i7 = $i7 + 1;

        goto label04;

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        i3 = 0;

     label07:
        if i3 >= $i6 goto label12;

        $i7 = 0;

     label08:
        if $i7 >= i2 goto label11;

        i1 = 0;

     label09:
        if i1 > i3 goto label10;

        $r2 = r5[i3];

        $r7 = r5[i3];

        i4 = $r7[$i7];

        $r7 = r6[i1];

        $i8 = $r7[$i7];

        $i9 = $i6 + i1;

        $i9 = $i9 - i3;

        $i9 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int getCoefficient(int)>($i9);

        $i8 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i8, $i9);

        i4 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int add(int,int)>(i4, $i8);

        $r2[$i7] = i4;

        i1 = i1 + 1;

        goto label09;

     label10:
        $i7 = $i7 + 1;

        goto label08;

     label11:
        i3 = i3 + 1;

        goto label07;

     label12:
        i3 = $i6 * $i5;

        $i7 = i2 + 31;

        $i7 = $i7 >>> 5;

        $r2 = newarray (int)[2];

        $r2[0] = i3;

        $r2[1] = $i7;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r6 = (int[][]) $r4;

        $i7 = 0;

     label13:
        if $i7 >= i2 goto label19;

        i3 = $i7 >>> 5;

        i1 = $i7 & 31;

        i4 = 1 << i1;

        $i8 = 0;

     label14:
        if $i8 >= $i6 goto label18;

        $r2 = r5[$i8];

        i1 = $r2[$i7];

        $i9 = 0;

     label15:
        if $i9 >= $i5 goto label17;

        i0 = i1 >>> $i9;

        i0 = i0 & 1;

        if i0 == 0 goto label16;

        i0 = $i8 + 1;

        i0 = i0 * $i5;

        i0 = i0 - $i9;

        i0 = i0 + -1;

        $r2 = r6[i0];

        i0 = $r2[i3];

        i0 = i0 ^ i4;

        $r2[i3] = i0;

     label16:
        $i9 = $i9 + 1;

        goto label15;

     label17:
        $i8 = $i8 + 1;

        goto label14;

     label18:
        $i7 = $i7 + 1;

        goto label13;

     label19:
        $r8 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>(i2, r6);

        return $r8;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector syndromeDecode(org.spongycastle.pqc.math.linearalgebra.GF2Vector, org.spongycastle.pqc.math.linearalgebra.GF2mField, org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM, org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r0, r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r2, r5, $r7;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r3;
        int i0, $i1, $i2;
        boolean $z0;
        org.spongycastle.pqc.math.linearalgebra.GF2mVector $r6;

        $r0 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter2: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r3 := @parameter3: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[];

        i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        i0 = 1 << i0;

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>(i0);

        $z0 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: boolean isZero()>();

        if $z0 != 0 goto label3;

        r5 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r6 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2mVector toExtensionFieldVector(org.spongycastle.pqc.math.linearalgebra.GF2mField)>($r1);

        specialinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mVector)>($r6);

        r5 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modInverse(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>($r2);

        r5 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM addMonomial(int)>(1);

        r5 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareRootMatrix(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>($r3);

        $r3 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] modPolynomialToFracton(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>($r2);

        $r2 = $r3[0];

        r5 = $r3[0];

        $r2 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multiply(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>(r5);

        r5 = $r3[1];

        $r7 = $r3[1];

        r5 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multiply(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>($r7);

        r5 = virtualinvoke r5.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithMonomial(int)>(1);

        $r2 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM add(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>(r5);

        $i1 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int getHeadCoefficient()>();

        $i1 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i1);

        $r2 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithElement(int)>($i1);

        $i1 = 0;

     label1:
        if $i1 >= i0 goto label3;

        $i2 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int evaluateAt(int)>($i1);

        if $i2 != 0 goto label2;

        virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void setBit(int)>($i1);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return r4;
    }
