org.spongycastle.pqc.math.linearalgebra.Permutation extends java.lang.Object
private int[] perm
    public void <init>(int)
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid length");

        throw $r1;

     label1:
        $r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm> = $r2;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r2[$i0] = $i0;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return;
    }
    public void <init>(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int $i0, $i1, i2, i3, $i4;
        java.security.SecureRandom $r1;
        int[] r2, $r4;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid length");

        throw $r3;

     label1:
        r2 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm> = r2;

        r2 = newarray (int)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r2[$i1] = $i1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i2 = $i0;

        i3 = 0;

     label4:
        if i3 >= $i0 goto label5;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, i2);

        i2 = i2 + -1;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i4 = r2[$i1];

        $r4[i3] = $i4;

        $i4 = r2[i2];

        r2[$i1] = $i4;

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        int[] $r3;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        if $i0 > 4 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid encoding");

        throw $r2;

     label1:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[],int)>($r1, 0);

        $i1 = $i0 + -1;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int ceilLog256(int)>($i1);

        $i2 = lengthof $r1;

        $i3 = $i0 * $i1;

        $i3 = $i3 + 4;

        if $i2 == $i3 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid encoding");

        throw $r2;

     label2:
        $r3 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm> = $r3;

        $i2 = 0;

     label3:
        if $i2 >= $i0 goto label4;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i3 = $i2 * $i1;

        $i3 = $i3 + 4;

        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[],int,int)>($r1, $i3, $i1);

        $r3[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: boolean isPermutation(int[])>($r3);

        if $z0 != 0 goto label5;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid encoding");

        throw $r2;

     label5:
        return;
    }
    public void <init>(int[])
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int[] $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: boolean isPermutation(int[])>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("array is not a permutation vector");

        throw $r2;

     label1:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm> = $r1;

        return;
    }
    private boolean isPermutation(int[])
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int[] $r1;
        int i0, i1, $i2;
        boolean[] r2;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 := @parameter0: int[];

        i0 = lengthof $r1;

        r2 = newarray (boolean)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $i2 = $r1[i1];

        if $i2 < 0 goto label2;

        $i2 = $r1[i1];

        if $i2 >= i0 goto label2;

        $i2 = $r1[i1];

        $z0 = r2[$i2];

        if $z0 == 0 goto label3;

     label2:
        return 0;

     label3:
        $i2 = $r1[i1];

        r2[$i2] = 1;

        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.Permutation computeInverse()
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0, r1;
        int[] $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        r1 = new org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = lengthof $r2;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: void <init>(int)>($i0);

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i1 = $r3[$i0];

        $r2[$i1] = $i0;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0, r3;
        java.lang.Object $r1;
        int[] $r2, $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.Permutation;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = (org.spongycastle.pqc.math.linearalgebra.Permutation) $r1;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r2 = r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: boolean equals(int[],int[])>($r4, $r2);

        return $z0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        i0 = lengthof $r2;

        $i1 = i0 + -1;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int ceilLog256(int)>($i1);

        $i2 = i0 * $i1;

        $i2 = $i2 + 4;

        r1 = newarray (byte)[$i2];

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: void I2OSP(int,byte[],int)>(i0, r1, 0);

        $i2 = 0;

     label1:
        if $i2 >= i0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i3 = $r2[$i2];

        $i4 = $i2 * $i1;

        $i4 = $i4 + 4;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: void I2OSP(int,byte[],int,int)>($i3, r1, $i4, $i1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public int[] getVector()
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
    public org.spongycastle.pqc.math.linearalgebra.Permutation rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0, $r1, r2;
        int[] $r3, $r5, $r6;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = lengthof $r3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label1:
        r2 = new org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = lengthof $r3;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.Permutation: void <init>(int)>($i0);

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $r6 = $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i1 = $r6[$i0];

        $i1 = $r5[$i1];

        $r3[$i0] = $i1;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return r2;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.Permutation r0;
        java.lang.StringBuilder $r1;
        int[] $r2;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i0 = $r2[0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = 1;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] perm>;

        $i1 = $r2[$i0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
