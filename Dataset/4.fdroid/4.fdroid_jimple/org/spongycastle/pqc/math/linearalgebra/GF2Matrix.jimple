org.spongycastle.pqc.math.linearalgebra.GF2Matrix extends org.spongycastle.pqc.math.linearalgebra.Matrix
private int length
private int[][] matrix
    public void <init>(int, char)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0;
        char $c1;
        java.security.SecureRandom $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $c1 := @parameter1: char;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char,java.security.SecureRandom)>($i0, $c1, $r1);

        return;
    }
    public void <init>(int, char, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0;
        char $c1;
        java.security.SecureRandom $r1;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $c1 := @parameter1: char;

        $r1 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        if $i0 > 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Size of matrix is non-positive.");

        throw $r2;

     label1:
        lookupswitch($c1)
        {
            case 73: goto label4;
            case 76: goto label5;
            case 82: goto label7;
            case 85: goto label6;
            case 90: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Unknown matrix type.");

        throw $r2;

     label3:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignZeroMatrix(int,int)>($i0, $i0);

        return;

     label4:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignUnitMatrix(int)>($i0);

        return;

     label5:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomLowerTriangularMatrix(int,java.security.SecureRandom)>($i0, $r1);

        return;

     label6:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomUpperTriangularMatrix(int,java.security.SecureRandom)>($i0, $r1);

        return;

     label7:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignRandomRegularMatrix(int,java.security.SecureRandom)>($i0, $r1);

        return;
    }
    private void <init>(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, $i1;
        java.lang.ArithmeticException $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        if $i1 <= 0 goto label1;

        if $i0 > 0 goto label2;

     label1:
        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("size of matrix is non-positive");

        throw $r1;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void assignZeroMatrix(int,int)>($i0, $i1);

        return;
    }
    public void <init>(int, int[][])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, $i1, $i2, $i3;
        int[][] $r1;
        int[] $r2;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[][];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        $i2 = $i0 + 31;

        $i2 = $i2 >> 5;

        if $i1 == $i2 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Int array does not match given number of columns.");

        throw $r3;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i1 = lengthof $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i1;

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i1;

        $i0 = $i0 & 31;

        if $i0 != 0 goto label4;

        $i0 = -1;

     label2:
        $i1 = 0;

     label3:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i1 >= $i2 goto label5;

        $r2 = $r1[$i1];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i2 = $i2 + -1;

        $i3 = $r2[$i2];

        $i3 = $i3 & $i0;

        $r2[$i2] = $i3;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i0 = 1 << $i0;

        $i0 = $i0 + -1;

        goto label2;

     label5:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r1;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Matrix)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, $r1;
        int $i0, $i1;
        int[][] $r2, $r3;
        int[] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int getNumColumns()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int getNumRows()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i0;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $i0 = lengthof $r2;

        $r2 = newarray (int[])[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r2;

        $i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i0];

        $r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r4);

        $r2[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        byte[] $r1;
        int i0, i1, i2, i3, $i4, $i5, i6;
        java.lang.ArithmeticException $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        int[][] $r6;
        byte $b7;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.Matrix: void <init>()>();

        i0 = lengthof $r1;

        if i0 >= 9 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("given array is not an encoded matrix over GF(2)");

        throw $r2;

     label1:
        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[],int)>($r1, 0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = i0;

        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[],int)>($r1, 4);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = i0;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 + 7;

        i0 = i0 >>> 3;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 * i1;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i1 <= 0 goto label2;

        i1 = lengthof $r1;

        i1 = i1 + -8;

        if i0 == i1 goto label3;

     label2:
        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("given array is not an encoded matrix over GF(2)");

        throw $r2;

     label3:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 + 31;

        i0 = i0 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = i0;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r3 = newarray (int)[2];

        $r3[0] = i0;

        $r3[1] = i1;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r6 = (int[][]) $r5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r6;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 >> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = i1 & 31;

        i2 = 8;

        i3 = 0;

     label4:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i3 >= $i4 goto label9;

        $i4 = 0;

     label5:
        if $i4 >= i0 goto label6;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r6[i3];

        $i5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: int OS2IP(byte[],int)>($r1, i2);

        $r3[$i4] = $i5;

        $i4 = $i4 + 1;

        i2 = i2 + 4;

        goto label5;

     label6:
        $i4 = 0;

        i6 = i2;

     label7:
        if $i4 >= i1 goto label8;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r6[i3];

        $i5 = $r3[i0];

        i2 = i6 + 1;

        $b7 = $r1[i6];

        i6 = $b7 & 255;

        i6 = i6 << $i4;

        $i5 = $i5 ^ i6;

        $r3[i0] = $i5;

        $i4 = $i4 + 8;

        i6 = i2;

        goto label7;

     label8:
        i3 = i3 + 1;

        i2 = i6;

        goto label4;

     label9:
        return;
    }
    private static void addToRow(int[], int[], int)
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label1:
        if $i2 < $i0 goto label2;

        $i3 = $r0[$i2];

        $i1 = $r1[$i2];

        $i1 = $i3 ^ $i1;

        $r1[$i2] = $i1;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        return;
    }
    private void assignRandomLowerTriangularMatrix(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, i1, i2, i3, i4, $i5;
        java.security.SecureRandom $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i0 = $i0 + 31;

        $i0 = $i0 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r5;

        $i0 = 0;

     label1:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= i1 goto label6;

        i1 = $i0 >>> 5;

        i3 = $i0 & 31;

        i2 = 31 - i3;

        i3 = 1 << i3;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i0];

        $i5 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        $r2[i4] = $i5;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i0];

        i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        i2 = i4 >>> i2;

        i2 = i2 | i3;

        $r2[i1] = i2;

        i1 = i1 + 1;

     label4:
        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if i1 >= i2 goto label5;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i0];

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return;
    }
    private void assignRandomRegularMatrix(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r2, r4;
        int $i0, $i1, $i2;
        java.security.SecureRandom $r1;
        org.spongycastle.pqc.math.linearalgebra.Permutation r3;
        int[] $r5, $r10, $r11;
        java.lang.Class $r6;
        java.lang.Object $r7;
        int[][] $r8;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r9;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i1 = $i0 + 31;

        $i1 = $i1 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r5 = newarray (int)[2];

        $r5[0] = $i1;

        $r5[1] = $i2;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        $r8 = (int[][]) $r7;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r8;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char,java.security.SecureRandom)>($i0, 76, $r1);

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char,java.security.SecureRandom)>($i0, 85, $r1);

        $r9 = virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)>(r4);

        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r9;

        r3 = new org.spongycastle.pqc.math.linearalgebra.Permutation;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: void <init>(int,java.security.SecureRandom)>($i0, $r1);

        $r5 = virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r8 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r10 = $r8[$i1];

        $r8 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $i2 = $r5[$i1];

        $r11 = $r8[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r11, 0, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void assignRandomUpperTriangularMatrix(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, i1, $i2, i3, i4, i5;
        java.security.SecureRandom $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i2 = $i0 + 31;

        $i2 = $i2 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i2;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r2 = newarray (int)[2];

        $r2[0] = $i2;

        $r2[1] = i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r5;

        $i0 = $i0 & 31;

        if $i0 != 0 goto label4;

        $i0 = -1;

     label1:
        $i2 = 0;

     label2:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i2 >= i1 goto label8;

        i1 = $i2 >>> 5;

        i3 = $i2 & 31;

        i4 = 1 << i3;

        i5 = 0;

     label3:
        if i5 >= i1 goto label5;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i2];

        $r2[i5] = 0;

        i5 = i5 + 1;

        goto label3;

     label4:
        $i0 = 1 << $i0;

        $i0 = $i0 + -1;

        goto label1;

     label5:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i2];

        i5 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        i3 = i5 << i3;

        i4 = i3 | i4;

        $r2[i1] = i4;

        i1 = i1 + 1;

     label6:
        i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if i1 >= i4 goto label7;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i2];

        i4 = virtualinvoke $r1.<java.security.SecureRandom: int nextInt()>();

        $r2[i1] = i4;

        i1 = i1 + 1;

        goto label6;

     label7:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r5[$i2];

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        i1 = i1 + -1;

        i4 = $r2[i1];

        i4 = i4 & $i0;

        $r2[i1] = i4;

        $i2 = $i2 + 1;

        goto label2;

     label8:
        return;
    }
    private void assignUnitMatrix(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        int[][] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i0;

        $i0 = $i0 + 31;

        $i0 = $i0 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i2;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        $r4 = (int[][]) $r3;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r4;

        $i0 = 0;

     label1:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= $i2 goto label4;

        $i2 = 0;

     label2:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i2 >= i1 goto label3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r1 = $r4[$i0];

        $r1[$i2] = 0;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $i0 = 0;

     label5:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= $i2 goto label6;

        i1 = $i0 & 31;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r1 = $r4[$i0];

        $i2 = $i0 >>> 5;

        i1 = 1 << i1;

        $r1[$i2] = i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        return;
    }
    private void assignZeroMatrix(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        int[][] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns> = $i1;

        $i0 = $i1 + 31;

        $i0 = $i0 >>> 5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        $r4 = (int[][]) $r3;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix> = $r4;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i1 >= $i2 goto label3;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r1 = $r4[$i0];

        $r1[$i1] = 0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Matrix[] createRandomRegularMatrixAndItsInverse(int, java.security.SecureRandom)
    {
        int $i0, i1, i2, $i3, i4, i5, $i6, $i7, $i8;
        java.security.SecureRandom $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r1, r2, r4;
        org.spongycastle.pqc.math.linearalgebra.Permutation r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix[] $r5;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r6;
        int[] $r7, $r8, $r13;
        java.lang.Class $r9;
        java.lang.Object $r10;
        int[][] r11, $r12;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.security.SecureRandom;

        $r5 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Matrix)[2];

        i1 = $i0 + 31;

        i1 = i1 >> 5;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char,java.security.SecureRandom)>($i0, 76, $r0);

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char,java.security.SecureRandom)>($i0, 85, $r0);

        $r6 = virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)>(r4);

        r1 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r6;

        r3 = new org.spongycastle.pqc.math.linearalgebra.Permutation;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: void <init>(int,java.security.SecureRandom)>($i0, $r0);

        $r7 = virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        $r8 = newarray (int)[2];

        $r8[0] = $i0;

        $r8[1] = i1;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, $r8);

        r11 = (int[][]) $r10;

        i2 = 0;

     label01:
        if i2 >= $i0 goto label02;

        $r12 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $i3 = $r7[i2];

        $r8 = $r12[$i3];

        $r13 = r11[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r13, 0, i1);

        i2 = i2 + 1;

        goto label01;

     label02:
        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>($i0, r11);

        $r5[0] = r1;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char)>($i0, 73);

        i2 = 0;

     label03:
        if i2 >= $i0 goto label08;

        i4 = i2 & 31;

        $i3 = i2 >>> 5;

        i4 = 1 << i4;

        i5 = i2 + 1;

     label04:
        if i5 >= $i0 goto label07;

        r11 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = r11[i5];

        $i6 = $r7[$i3];

        $i6 = $i6 & i4;

        if $i6 == 0 goto label06;

        $i6 = 0;

     label05:
        if $i6 > $i3 goto label06;

        r11 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = r11[i5];

        $i7 = $r7[$i6];

        r11 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r8 = r11[i2];

        $i8 = $r8[$i6];

        $i7 = $i7 ^ $i8;

        $r7[$i6] = $i7;

        $i6 = $i6 + 1;

        goto label05;

     label06:
        i5 = i5 + 1;

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,char)>($i0, 73);

        $i0 = $i0 + -1;

     label09:
        if $i0 < 0 goto label14;

        $i3 = $i0 & 31;

        i2 = $i0 >>> 5;

        $i3 = 1 << $i3;

        i4 = $i0 + -1;

     label10:
        if i4 < 0 goto label13;

        r11 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = r11[i4];

        i5 = $r7[i2];

        i5 = i5 & $i3;

        if i5 == 0 goto label12;

        i5 = i2;

     label11:
        if i5 >= i1 goto label12;

        r11 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = r11[i4];

        $i6 = $r7[i5];

        r11 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r8 = r11[$i0];

        $i7 = $r8[i5];

        $i6 = $i6 ^ $i7;

        $r7[i5] = $i6;

        i5 = i5 + 1;

        goto label11;

     label12:
        i4 = i4 + -1;

        goto label10;

     label13:
        $i0 = $i0 + -1;

        goto label09;

     label14:
        $r6 = virtualinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>(r3);

        $r6 = virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)>($r6);

        r4 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r6;

        $r5[1] = r4;

        return $r5;
    }
    private static void swapRows(int[][], int, int)
    {
        int[][] $r0;
        int $i0, $i1;
        int[] r1, $r2;

        $r0 := @parameter0: int[][];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = $r0[$i0];

        $r2 = $r0[$i1];

        $r0[$i0] = $r2;

        $r0[$i1] = r1;

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix computeInverse()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.ArithmeticException $r1;
        int[] $r2, $r7;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] r5, $r6;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if $i1 == $i2 goto label01;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Matrix is not invertible.");

        throw $r1;

     label01:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r2 = newarray (int)[2];

        $r2[0] = $i1;

        $r2[1] = $i2;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = $i1 + -1;

     label02:
        if $i1 < 0 goto label03;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r6[$i1];

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r5[$i1] = $r2;

        $i1 = $i1 + -1;

        goto label02;

     label03:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $r2 = newarray (int)[2];

        $r2[0] = $i1;

        $r2[1] = $i2;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r6 = (int[][]) $r4;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = $i1 + -1;

     label04:
        if $i1 < 0 goto label05;

        $i2 = $i1 >> 5;

        i0 = $i1 & 31;

        $r2 = $r6[$i1];

        i0 = 1 << i0;

        $r2[$i2] = i0;

        $i1 = $i1 + -1;

        goto label04;

     label05:
        $i1 = 0;

     label06:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i1 >= $i2 goto label14;

        $i2 = $i1 >> 5;

        i0 = $i1 & 31;

        i0 = 1 << i0;

        $r2 = r5[$i1];

        $i3 = $r2[$i2];

        $i3 = $i3 & i0;

        if $i3 != 0 goto label10;

        z0 = 0;

        $i3 = $i1 + 1;

     label07:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i3 >= $i4 goto label09;

        $r2 = r5[$i3];

        $i4 = $r2[$i2];

        $i4 = $i4 & i0;

        if $i4 == 0 goto label08;

        z0 = 1;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void swapRows(int[][],int,int)>(r5, $i1, $i3);

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void swapRows(int[][],int,int)>($r6, $i1, $i3);

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

     label08:
        $i3 = $i3 + 1;

        goto label07;

     label09:
        if z0 != 0 goto label10;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Matrix is not invertible.");

        throw $r1;

     label10:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i3 = $i3 + -1;

     label11:
        if $i3 < 0 goto label13;

        if $i3 == $i1 goto label12;

        $r2 = r5[$i3];

        $i4 = $r2[$i2];

        $i4 = $i4 & i0;

        if $i4 == 0 goto label12;

        $r2 = r5[$i1];

        $r7 = r5[$i3];

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void addToRow(int[],int[],int)>($r2, $r7, $i2);

        $r2 = $r6[$i1];

        $r7 = $r6[$i3];

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void addToRow(int[],int[],int)>($r2, $r7, 0);

     label12:
        $i3 = $i3 + -1;

        goto label11;

     label13:
        $i1 = $i1 + 1;

        goto label06;

     label14:
        $r8 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        specialinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>($i1, $r6);

        return $r8;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix computeTranspose()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, $r6;
        int i0, i1, i2, $i3, $i4;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        int[][] r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i4 = $i4 + 31;

        $i4 = $i4 >>> 5;

        $r1 = newarray (int)[2];

        $r1[0] = $i3;

        $r1[1] = $i4;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (int[][]) $r3;

        $i3 = 0;

     label1:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i3 >= $i4 goto label5;

        $i4 = 0;

     label2:
        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if $i4 >= i2 goto label4;

        i1 = $i4 >>> 5;

        i2 = $i4 & 31;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r1 = $r5[$i3];

        i1 = $r1[i1];

        i2 = i1 >>> i2;

        i0 = i2 & 1;

        i2 = $i3 >>> 5;

        i1 = $i3 & 31;

        if i0 != 1 goto label3;

        $r1 = r4[$i4];

        i0 = $r1[i2];

        i1 = 1 << i1;

        i1 = i0 | i1;

        $r1[i2] = i1;

     label3:
        $i4 = $i4 + 1;

        goto label2;

     label4:
        $i3 = $i3 + 1;

        goto label1;

     label5:
        $r6 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>($i3, r4);

        return $r6;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;
        int[][] $r3;
        int[] $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r1;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 != $i1 goto label4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if $i0 != $i1 goto label4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i0 != $i1 goto label4;

        $i0 = 0;

     label2:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i0];

        $r3 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i0];

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: boolean equals(int[],int[])>($r4, $r5);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Matrix extendLeftCompactForm()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r1;
        int i0, $i1, $i2, $i3, $i4;
        int[][] $r2;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 + $i2;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int)>($i2, i0);

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 + -1;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 + $i2;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i2];

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r2[$i2];

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i3);

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i2];

        $i3 = i0 >> 5;

        $i4 = $r3[$i3];

        $i1 = i0 & 31;

        $i1 = 1 << $i1;

        $i4 = $i4 | $i1;

        $r3[$i3] = $i4;

        $i2 = $i2 + -1;

        i0 = i0 + -1;

        goto label1;

     label2:
        return r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Matrix extendRightCompactForm()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        int[][] $r2;
        int[] $r3, $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = i1 + $i3;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int)>(i0, i1);

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 >> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 & 31;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i3 = $i3 + -1;

     label1:
        if $i3 < 0 goto label6;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i4 = $i3 >> 5;

        $i5 = $r3[$i4];

        $i2 = $i3 & 31;

        $i2 = 1 << $i2;

        $i5 = $i5 | $i2;

        $r3[$i4] = $i5;

        if i1 == 0 goto label5;

        $i4 = i0;

        $i5 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i2 = $i2 + -1;

        if $i5 >= $i2 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        i6 = $r3[$i5];

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i2 = $i4 + 1;

        $i7 = $r3[$i4];

        $i8 = i6 << i1;

        $i7 = $i7 | $i8;

        $r3[$i4] = $i7;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i4 = $r3[$i2];

        $i7 = 32 - i1;

        i6 = i6 >>> $i7;

        $i4 = $i4 | i6;

        $r3[$i2] = $i4;

        $i5 = $i5 + 1;

        $i4 = $i2;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i5 = $i5 + -1;

        $i2 = $r3[$i5];

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i5 = $i4 + 1;

        i6 = $r3[$i4];

        $i7 = $i2 << i1;

        i6 = i6 | $i7;

        $r3[$i4] = i6;

        $i4 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i5 >= $i4 goto label4;

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $i4 = $r3[$i5];

        i6 = 32 - i1;

        $i2 = $i2 >>> i6;

        $i4 = $i4 | $i2;

        $r3[$i5] = $i4;

     label4:
        $i3 = $i3 + -1;

        goto label1;

     label5:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[$i3];

        $r2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r2[$i3];

        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, i0, $i4);

        goto label4;

     label6:
        return r1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        int[][] $r2;
        int[] $r3;
        byte $b7;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 + 7;

        i0 = i0 >>> 3;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 * i1;

        i0 = i0 + 8;

        r1 = newarray (byte)[i0];

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: void I2OSP(int,byte[],int)>(i0, r1, 0);

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: void I2OSP(int,byte[],int)>(i0, r1, 4);

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 >>> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = i1 & 31;

        i2 = 8;

        i3 = 0;

     label1:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i3 >= $i4 goto label6;

        $i4 = 0;

     label2:
        if $i4 >= i0 goto label3;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[i3];

        $i5 = $r3[$i4];

        staticinvoke <org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions: void I2OSP(int,byte[],int)>($i5, r1, i2);

        $i4 = $i4 + 1;

        i2 = i2 + 4;

        goto label2;

     label3:
        $i4 = 0;

     label4:
        if $i4 >= i1 goto label5;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r3 = $r2[i3];

        $i6 = $r3[i0];

        $i6 = $i6 >>> $i4;

        $i6 = $i6 & 255;

        $b7 = (byte) $i6;

        r1[i2] = $b7;

        $i4 = $i4 + 8;

        i2 = i2 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return r1;
    }
    public double getHammingWeight()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0, i1, i2, $i3, i4, i5, $i6;
        double d0, d1, $d2;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        d0 = 0.0;

        d1 = 0.0;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 & 31;

        if i0 != 0 goto label05;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

     label01:
        i2 = 0;

     label02:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i2 >= $i3 goto label10;

        $i3 = 0;

     label03:
        if $i3 >= i1 goto label07;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r1[i2];

        i4 = $r2[$i3];

        i5 = 0;

     label04:
        if i5 >= 32 goto label06;

        $i6 = i4 >>> i5;

        $i6 = $i6 & 1;

        $d2 = (double) $i6;

        d0 = d0 + $d2;

        d1 = d1 + 1.0;

        i5 = i5 + 1;

        goto label04;

     label05:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        i1 = i1 + -1;

        goto label01;

     label06:
        $i3 = $i3 + 1;

        goto label03;

     label07:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r1[i2];

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i3 = $i3 + -1;

        $i3 = $r2[$i3];

        i4 = 0;

     label08:
        if i4 >= i0 goto label09;

        i5 = $i3 >>> i4;

        i5 = i5 & 1;

        $d2 = (double) i5;

        d0 = d0 + $d2;

        d1 = d1 + 1.0;

        i4 = i4 + 1;

        goto label08;

     label09:
        i2 = i2 + 1;

        goto label02;

     label10:
        d0 = d0 / d1;

        return d0;
    }
    public int[][] getIntArray()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int[][] r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        return r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Matrix getLeftSubMatrix()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.ArithmeticException $r1;
        int[] $r2, $r7;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] r5, $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i0 > $i1 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("empty submatrix");

        throw $r1;

     label1:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 + 31;

        i0 = i0 >> 5;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $r2 = newarray (int)[2];

        $r2[0] = $i1;

        $r2[1] = i0;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = $i1 & 31;

        $i1 = 1 << $i1;

        $i1 = $i1 + -1;

        if $i1 != 0 goto label2;

        $i1 = -1;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = $i2 + -1;

     label3:
        if $i2 < 0 goto label4;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r6[$i2];

        $r7 = r5[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r7, 0, i0);

        $r2 = r5[$i2];

        $i3 = i0 + -1;

        $i4 = $r2[$i3];

        $i4 = $i4 & $i1;

        $r2[$i3] = $i4;

        $i2 = $i2 + -1;

        goto label3;

     label4:
        $r8 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>(i0, r5);

        return $r8;
    }
    public int getLength()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        return i0;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Matrix getRightSubMatrix()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r1;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7;
        java.lang.ArithmeticException $r2;
        int[][] $r3;
        int[] $r4, $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i0 > i1 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("empty submatrix");

        throw $r2;

     label1:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 >> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 & 31;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = $i2 - $i4;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int)>($i3, $i2);

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i3 = $i3 + -1;

     label2:
        if $i3 < 0 goto label7;

        if i1 == 0 goto label6;

        i5 = i0;

        $i2 = 0;

     label3:
        $i4 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i4 = $i4 + -1;

        if $i2 >= $i4 goto label4;

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i3];

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i3];

        $i4 = i5 + 1;

        i5 = $r5[i5];

        i5 = i5 >>> i1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i3];

        $i6 = $r5[$i4];

        $i7 = 32 - i1;

        $i6 = $i6 << $i7;

        i5 = i5 | $i6;

        $r4[$i2] = i5;

        $i2 = $i2 + 1;

        i5 = $i4;

        goto label3;

     label4:
        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i3];

        $i2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i4 = $i2 + -1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i3];

        $i2 = i5 + 1;

        i5 = $r5[i5];

        i5 = i5 >>> i1;

        $r4[$i4] = i5;

        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i2 >= $i4 goto label5;

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i3];

        $i4 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i4 = $i4 + -1;

        i5 = $r4[$i4];

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i3];

        $i6 = $r5[$i2];

        $i2 = 32 - i1;

        $i2 = $i6 << $i2;

        $i2 = i5 | $i2;

        $r4[$i4] = $i2;

     label5:
        $i3 = $i3 + -1;

        goto label2;

     label6:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r4 = $r3[$i3];

        $r3 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r3[$i3];

        $i2 = r1.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r5, 0, $i2);

        goto label5;

     label7:
        return r1;
    }
    public int[] getRow(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int $i0, $i1, $i2;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = $i1 * 31;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i1 = $i1 + $i0;

        $i1 = $i1 * 31;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i0 = $i1 + $i0;

        $i1 = 0;

     label1:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i1 >= $i2 goto label2;

        $i2 = $i0 * 31;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r1[$i1];

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i2 + $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public boolean isZero()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0, $i1, $i2;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i0 >= $i1 goto label5;

        $i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i1 >= $i2 goto label4;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r2 = $r1[i0];

        $i2 = $r2[$i1];

        if $i2 == 0 goto label3;

        return 0;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return 1;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix leftMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, $r7;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r1;
        int[][] r2, $r5;
        int[] $r3, $r6;
        int $i0, $i1;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        $i0 = lengthof $r3;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        r2 = newarray (int[])[$i0];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $i1 = $r3[$i0];

        $r6 = $r5[$i1];

        $r6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r6);

        r2[$i0] = $r6;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $r7 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke $r7.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int[][])>($i0, r2);

        return $r7;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector leftMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        int[] r1, $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.Vector $r3;
        boolean $z0;
        java.lang.ArithmeticException $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r5;
        int[][] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r3 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $z0 = $r3 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label01;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("vector is not defined over GF(2)");

        throw $r4;

     label01:
        i0 = $r3.<org.spongycastle.pqc.math.linearalgebra.Vector: int length>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i0 == i1 goto label02;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label02:
        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r3;

        $r2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] getVecArray()>();

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        r1 = newarray (int)[i0];

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 >> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 & 31;

        i1 = 1 << i1;

        i2 = 0;

        i3 = 0;

     label03:
        if i3 >= i0 goto label07;

        i4 = 1;

     label04:
        $i5 = $r2[i3];

        $i5 = $i5 & i4;

        if $i5 == 0 goto label06;

        $i5 = 0;

     label05:
        $i6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i5 >= $i6 goto label06;

        $i6 = r1[$i5];

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[i2];

        $i7 = $r7[$i5];

        $i6 = $i6 ^ $i7;

        r1[$i5] = $i6;

        $i5 = $i5 + 1;

        goto label05;

     label06:
        i2 = i2 + 1;

        i4 = i4 << 1;

        if i4 != 0 goto label04;

        i3 = i3 + 1;

        goto label03;

     label07:
        i3 = 1;

     label08:
        if i3 == i1 goto label11;

        i4 = $r2[i0];

        i4 = i4 & i3;

        if i4 == 0 goto label10;

        i4 = 0;

     label09:
        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if i4 >= $i5 goto label10;

        $i5 = r1[i4];

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[i2];

        $i6 = $r7[i4];

        $i5 = $i5 ^ $i6;

        r1[i4] = $i5;

        i4 = i4 + 1;

        goto label09;

     label10:
        i2 = i2 + 1;

        i3 = i3 << 1;

        goto label08;

     label11:
        $r5 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int[],int)>(r1, i0);

        return $r5;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector leftMultiplyLeftCompactForm(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6;
        int[] r1, $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.Vector $r3;
        boolean $z0;
        java.lang.ArithmeticException $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r5;
        int[][] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r3 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $z0 = $r3 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label01;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("vector is not defined over GF(2)");

        throw $r4;

     label01:
        i1 = $r3.<org.spongycastle.pqc.math.linearalgebra.Vector: int length>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i1 == $i2 goto label02;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label02:
        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r3;

        $r2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] getVecArray()>();

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = i1 + $i2;

        i1 = i1 + 31;

        i1 = i1 >>> 5;

        r1 = newarray (int)[i1];

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 >>> 5;

        $i2 = 0;

        i0 = 0;

     label03:
        if i0 >= i1 goto label08;

        i3 = 1;

     label04:
        $i4 = $r2[i0];

        $i4 = $i4 & i3;

        if $i4 == 0 goto label07;

        $i4 = 0;

     label05:
        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i4 >= $i5 goto label06;

        $i5 = r1[$i4];

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i2];

        $i6 = $r7[$i4];

        $i5 = $i5 ^ $i6;

        r1[$i4] = $i5;

        $i4 = $i4 + 1;

        goto label05;

     label06:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i4 = $i4 + $i2;

        $i4 = $i4 >>> 5;

        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i5 = $i5 + $i2;

        $i6 = $i5 & 31;

        $i5 = r1[$i4];

        $i6 = 1 << $i6;

        $i5 = $i5 | $i6;

        r1[$i4] = $i5;

     label07:
        $i2 = $i2 + 1;

        i3 = i3 << 1;

        if i3 != 0 goto label04;

        i0 = i0 + 1;

        goto label03;

     label08:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 & 31;

        i0 = 1 << i0;

        i3 = 1;

     label09:
        if i3 == i0 goto label13;

        $i4 = $r2[i1];

        $i4 = $i4 & i3;

        if $i4 == 0 goto label12;

        $i4 = 0;

     label10:
        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i4 >= $i5 goto label11;

        $i5 = r1[$i4];

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i2];

        $i6 = $r7[$i4];

        $i5 = $i5 ^ $i6;

        r1[$i4] = $i5;

        $i4 = $i4 + 1;

        goto label10;

     label11:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i4 = $i4 + $i2;

        $i4 = $i4 >>> 5;

        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i5 = $i5 + $i2;

        $i6 = $i5 & 31;

        $i5 = r1[$i4];

        $i6 = 1 << $i6;

        $i5 = $i5 | $i6;

        r1[$i4] = $i5;

     label12:
        $i2 = $i2 + 1;

        i3 = i3 << 1;

        goto label09;

     label13:
        $r5 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i1 = i1 + $i2;

        specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int[],int)>(r1, i1);

        return $r5;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r2, r4;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r1;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.ArithmeticException $r3;
        int[][] $r5;
        int[] $r6, $r7;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Matrix;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        if $z0 != 0 goto label01;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("matrix is not defined over GF(2)");

        throw $r3;

     label01:
        i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.Matrix: int numRows>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if i0 == $i1 goto label02;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r3;

     label02:
        r4 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r1;

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.Matrix: int numColumns>;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int)>(i0, $i1);

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 & 31;

        if i0 != 0 goto label08;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

     label03:
        i2 = 0;

     label04:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i2 >= $i3 goto label16;

        $i3 = 0;

        i4 = 0;

     label05:
        if i4 >= $i1 goto label11;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r6 = $r5[i2];

        i5 = $r6[i4];

        i6 = 0;

     label06:
        if i6 >= 32 goto label10;

        $i7 = 1 << i6;

        $i7 = i5 & $i7;

        if $i7 == 0 goto label09;

        $i7 = 0;

     label07:
        $i8 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i7 >= $i8 goto label09;

        $r5 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r6 = $r5[i2];

        $i8 = $r6[$i7];

        $r5 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r5[$i3];

        $i9 = $r7[$i7];

        $i8 = $i8 ^ $i9;

        $r6[$i7] = $i8;

        $i7 = $i7 + 1;

        goto label07;

     label08:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i1 = $i1 + -1;

        goto label03;

     label09:
        $i3 = $i3 + 1;

        i6 = i6 + 1;

        goto label06;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r6 = $r5[i2];

        i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        i4 = i4 + -1;

        i4 = $r6[i4];

        i5 = 0;

     label12:
        if i5 >= i0 goto label15;

        i6 = 1 << i5;

        i6 = i4 & i6;

        if i6 == 0 goto label14;

        i6 = 0;

     label13:
        $i7 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if i6 >= $i7 goto label14;

        $r5 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r6 = $r5[i2];

        $i7 = $r6[i6];

        $r5 = r4.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r5[$i3];

        $i8 = $r7[i6];

        $i7 = $i7 ^ $i8;

        $r6[i6] = $i7;

        i6 = i6 + 1;

        goto label13;

     label14:
        $i3 = $i3 + 1;

        i5 = i5 + 1;

        goto label12;

     label15:
        i2 = i2 + 1;

        goto label04;

     label16:
        return r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0, r2;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        int[] $r3, $r6, $r7;
        java.lang.ArithmeticException $r4;
        int[][] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Permutation;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.Permutation: int[] getVector()>();

        i2 = lengthof $r3;

        i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if i2 == i3 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label1:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: void <init>(int,int)>(i2, i3);

        i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i4 = i2 + -1;

     label2:
        if i4 < 0 goto label5;

        i2 = i4 >>> 5;

        i3 = i4 & 31;

        i0 = $r3[i4];

        i0 = i0 >>> 5;

        i1 = $r3[i4];

        i1 = i1 & 31;

        $i5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i5 = $i5 + -1;

     label3:
        if $i5 < 0 goto label4;

        $r5 = r2.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r6 = $r5[$i5];

        $i6 = $r6[i2];

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r5[$i5];

        $i7 = $r7[i0];

        $i7 = $i7 >>> i1;

        $i7 = $i7 & 1;

        $i7 = $i7 << i3;

        $i6 = $i6 | $i7;

        $r6[i2] = $i6;

        $i5 = $i5 + -1;

        goto label3;

     label4:
        i4 = i4 + -1;

        goto label2;

     label5:
        return r2;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector rightMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int[] r1, $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.Vector $r3;
        boolean $z0;
        java.lang.ArithmeticException $r4;
        int $i0, $i1, i2, $i3, $i4;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r5;
        int[][] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r3 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $z0 = $r3 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("vector is not defined over GF(2)");

        throw $r4;

     label1:
        $i0 = $r3.<org.spongycastle.pqc.math.linearalgebra.Vector: int length>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        if $i0 == $i1 goto label2;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label2:
        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r3;

        $r2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] getVecArray()>();

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        $i0 = $i0 + 31;

        $i0 = $i0 >>> 5;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i0 >= $i1 goto label9;

        $i1 = 0;

        i2 = 0;

     label4:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if i2 >= $i3 goto label5;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i0];

        $i3 = $r7[i2];

        $i4 = $r2[i2];

        $i3 = $i3 & $i4;

        $i1 = $i1 ^ $i3;

        i2 = i2 + 1;

        goto label4;

     label5:
        i2 = 0;

        $i3 = 0;

     label6:
        if $i3 >= 32 goto label7;

        $i4 = $i1 >>> $i3;

        $i4 = $i4 & 1;

        i2 = i2 ^ $i4;

        $i3 = $i3 + 1;

        goto label6;

     label7:
        if i2 != 1 goto label8;

        $i1 = $i0 >>> 5;

        i2 = r1[$i1];

        $i3 = $i0 & 31;

        $i3 = 1 << $i3;

        i2 = i2 | $i3;

        r1[$i1] = i2;

     label8:
        $i0 = $i0 + 1;

        goto label3;

     label9:
        $r5 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int[],int)>(r1, $i0);

        return $r5;
    }
    public org.spongycastle.pqc.math.linearalgebra.Vector rightMultiplyRightCompactForm(org.spongycastle.pqc.math.linearalgebra.Vector)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        int[] r1, $r2, $r7;
        org.spongycastle.pqc.math.linearalgebra.Vector $r3;
        boolean $z0;
        java.lang.ArithmeticException $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r5;
        int[][] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        $r3 := @parameter0: org.spongycastle.pqc.math.linearalgebra.Vector;

        $z0 = $r3 instanceof org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        if $z0 != 0 goto label01;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("vector is not defined over GF(2)");

        throw $r4;

     label01:
        i0 = $r3.<org.spongycastle.pqc.math.linearalgebra.Vector: int length>;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 + $i3;

        if i0 == i1 goto label02;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("length mismatch");

        throw $r4;

     label02:
        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r3;

        $r2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] getVecArray()>();

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 + 31;

        i0 = i0 >>> 5;

        r1 = newarray (int)[i0];

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i0 = i0 >> 5;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        i1 = i1 & 31;

        $i3 = 0;

     label03:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if $i3 >= $i4 goto label13;

        $i4 = $i3 >> 5;

        $i4 = $r2[$i4];

        $i5 = $i3 & 31;

        $i4 = $i4 >>> $i5;

        $i4 = $i4 & 1;

        i6 = i0;

        if i1 == 0 goto label09;

        $i5 = 0;

     label04:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i2 = $i2 + -1;

        if $i5 >= $i2 goto label05;

        $i2 = i6 + 1;

        i6 = $r2[i6];

        i6 = i6 >>> i1;

        $i7 = $r2[$i2];

        $i8 = 32 - i1;

        $i7 = $i7 << $i8;

        i6 = i6 | $i7;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i3];

        $i7 = $r7[$i5];

        i6 = $i7 & i6;

        $i4 = $i4 ^ i6;

        $i5 = $i5 + 1;

        i6 = $i2;

        goto label04;

     label05:
        $i2 = i6 + 1;

        $i5 = $r2[i6];

        $i5 = $i5 >>> i1;

        i6 = lengthof $r2;

        if $i2 >= i6 goto label06;

        $i2 = $r2[$i2];

        i6 = 32 - i1;

        $i2 = $i2 << i6;

        $i5 = $i5 | $i2;

     label06:
        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i3];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i2 = $i2 + -1;

        $i2 = $r7[$i2];

        $i5 = $i2 & $i5;

        $i4 = $i4 ^ $i5;

     label07:
        $i5 = 0;

        $i2 = 0;

     label08:
        if $i2 >= 32 goto label11;

        i6 = $i4 & 1;

        $i5 = $i5 ^ i6;

        $i4 = $i4 >>> 1;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i5 = 0;

     label10:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        if $i5 >= $i2 goto label07;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r7 = $r6[$i3];

        $i7 = $r7[$i5];

        $i2 = i6 + 1;

        i6 = $r2[i6];

        i6 = $i7 & i6;

        $i4 = $i4 ^ i6;

        $i5 = $i5 + 1;

        i6 = $i2;

        goto label10;

     label11:
        if $i5 != 1 goto label12;

        $i4 = $i3 >> 5;

        $i5 = r1[$i4];

        $i2 = $i3 & 31;

        $i2 = 1 << $i2;

        $i5 = $i5 | $i2;

        r1[$i4] = $i5;

     label12:
        $i3 = $i3 + 1;

        goto label03;

     label13:
        $r5 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        specialinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int[],int)>(r1, i0);

        return $r5;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix r0;
        java.lang.StringBuffer r1;
        int i0, i1, i2, $i3, i4, i5, $i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int[][] $r4;
        int[] $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2Matrix;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numColumns>;

        i0 = i0 & 31;

        if i0 != 0 goto label06;

        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

     label01:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label02:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int numRows>;

        if i2 >= $i3 goto label14;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i3 = 0;

     label03:
        if $i3 >= i1 goto label09;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r4[i2];

        i4 = $r5[$i3];

        i5 = 0;

     label04:
        if i5 >= 32 goto label08;

        $i6 = i4 >>> i5;

        $i6 = $i6 & 1;

        if $i6 != 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label05:
        i5 = i5 + 1;

        goto label04;

     label06:
        i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        i1 = i1 + -1;

        goto label01;

     label07:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        goto label05;

     label08:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i3 = $i3 + 1;

        goto label03;

     label09:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int[][] matrix>;

        $r5 = $r4[i2];

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int length>;

        $i3 = $i3 + -1;

        $i3 = $r5[$i3];

        i4 = 0;

     label10:
        if i4 >= i0 goto label13;

        i5 = $i3 >>> i4;

        i5 = i5 & 1;

        if i5 != 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label11:
        i4 = i4 + 1;

        goto label10;

     label12:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(49);

        goto label11;

     label13:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i2 = i2 + 1;

        goto label02;

     label14:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
