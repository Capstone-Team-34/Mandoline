org.spongycastle.pqc.math.linearalgebra.ByteUtils extends java.lang.Object
private static final char[] HEX_CHARS
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.spongycastle.pqc.math.linearalgebra.ByteUtils: char[] HEX_CHARS> = $r0;

        return;
    }
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.ByteUtils r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.ByteUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] clone(byte[])
    {
        byte[] $r0, r1;
        int $i0;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    public static byte[] concatenate(byte[], byte[])
    {
        byte[] $r0, $r1, r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 0, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i0, $i1);

        return r2;
    }
    public static byte[] concatenate(byte[][])
    {
        byte[][] $r0;
        byte[] r1, $r2;
        int i0, $i1, i2, $i3;

        $r0 := @parameter0: byte[][];

        r1 = $r0[0];

        i0 = lengthof r1;

        $i1 = lengthof $r0;

        $i1 = $i1 * i0;

        r1 = newarray (byte)[$i1];

        $i1 = 0;

        i2 = 0;

     label1:
        $i3 = lengthof $r0;

        if i2 >= $i3 goto label2;

        $r2 = $r0[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, $i1, i0);

        $i1 = $i1 + i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static int deepHashCode(byte[])
    {
        byte[] $r0;
        byte $b0;
        int i1, i2, $i3;

        $r0 := @parameter0: byte[];

        i1 = 1;

        i2 = 0;

     label1:
        $i3 = lengthof $r0;

        if i2 >= $i3 goto label2;

        i1 = i1 * 31;

        $b0 = $r0[i2];

        i1 = i1 + $b0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }
    public static int deepHashCode(byte[][])
    {
        byte[][] $r0;
        int $i0, i1, $i2;
        byte[] $r1;

        $r0 := @parameter0: byte[][];

        $i0 = 1;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i2 = $i0 * 31;

        $r1 = $r0[i1];

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: int deepHashCode(byte[])>($r1);

        $i0 = $i2 + $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public static int deepHashCode(byte[][][])
    {
        byte[][][] $r0;
        int $i0, i1, $i2;
        byte[][] $r1;

        $r0 := @parameter0: byte[][][];

        $i0 = 1;

        i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if i1 >= $i2 goto label2;

        $i2 = $i0 * 31;

        $r1 = $r0[i1];

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: int deepHashCode(byte[][])>($r1);

        $i0 = $i2 + $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public static boolean equals(byte[], byte[])
    {
        byte[] $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $z0 = 1;

        if $r0 != null goto label3;

        if $r1 != null goto label2;

     label1:
        return $z0;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        if $r1 == null goto label8;

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label8;

        $z0 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label4:
        if $i0 < 0 goto label7;

        $b2 = $r0[$i0];

        $b3 = $r1[$i0];

        if $b2 != $b3 goto label6;

        $z1 = 1;

     label5:
        $z0 = $z0 & $z1;

        $i0 = $i0 + -1;

        goto label4;

     label6:
        $z1 = 0;

        goto label5;

     label7:
        return $z0;

     label8:
        return 0;
    }
    public static boolean equals(byte[][], byte[][])
    {
        byte[][] $r0, $r1;
        boolean $z0, z1;
        int $i0, $i1;
        byte[] $r2, $r3;

        $r0 := @parameter0: byte[][];

        $r1 := @parameter1: byte[][];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z1 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = $r0[$i0];

        $r3 = $r1[$i0];

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: boolean equals(byte[],byte[])>($r2, $r3);

        z1 = z1 & $z0;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return z1;
    }
    public static boolean equals(byte[][][], byte[][][])
    {
        byte[][][] $r0, $r1;
        boolean $z0, z1;
        int $i0, $i1, $i2;
        byte[][] $r2;
        byte[] $r3, $r4;

        $r0 := @parameter0: byte[][][];

        $r1 := @parameter1: byte[][][];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z1 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label6;

        $r2 = $r0[$i0];

        $i1 = lengthof $r2;

        $r2 = $r1[$i0];

        $i2 = lengthof $r2;

        if $i1 == $i2 goto label3;

        return 0;

     label3:
        $r2 = $r0[$i0];

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

     label4:
        if $i1 < 0 goto label5;

        $r2 = $r0[$i0];

        $r3 = $r2[$i1];

        $r2 = $r1[$i0];

        $r4 = $r2[$i1];

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: boolean equals(byte[],byte[])>($r3, $r4);

        z1 = z1 & $z0;

        $i1 = $i1 + -1;

        goto label4;

     label5:
        $i0 = $i0 + -1;

        goto label2;

     label6:
        return z1;
    }
    public static byte[] fromHexString(java.lang.String)
    {
        java.lang.String $r0;
        byte[] r1;
        char[] $r2;
        int i0, i1, $i2, $i5;
        char $c3;
        byte $b4;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        i0 = 0;

        i1 = 0;

     label01:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label05;

        $c3 = $r2[i1];

        if $c3 < 48 goto label02;

        $c3 = $r2[i1];

        if $c3 <= 57 goto label03;

     label02:
        $c3 = $r2[i1];

        if $c3 < 65 goto label04;

        $c3 = $r2[i1];

        if $c3 > 70 goto label04;

     label03:
        i0 = i0 + 1;

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        i1 = i0 + 1;

        i1 = i1 >> 1;

        r1 = newarray (byte)[i1];

        i0 = i0 & 1;

        i1 = 0;

     label06:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label10;

        $c3 = $r2[i1];

        if $c3 < 48 goto label09;

        $c3 = $r2[i1];

        if $c3 > 57 goto label09;

        $i2 = i0 >> 1;

        $b4 = r1[$i2];

        $i5 = $b4 << 4;

        $b4 = (byte) $i5;

        r1[$i2] = $b4;

        $i2 = i0 >> 1;

        $b4 = r1[$i2];

        $c3 = $r2[i1];

        $i5 = $c3 + -48;

        $i5 = $b4 | $i5;

        $b4 = (byte) $i5;

        r1[$i2] = $b4;

     label07:
        i0 = i0 + 1;

     label08:
        i1 = i1 + 1;

        goto label06;

     label09:
        $c3 = $r2[i1];

        if $c3 < 65 goto label08;

        $c3 = $r2[i1];

        if $c3 > 70 goto label08;

        $i2 = i0 >> 1;

        $b4 = r1[$i2];

        $i5 = $b4 << 4;

        $b4 = (byte) $i5;

        r1[$i2] = $b4;

        $i2 = i0 >> 1;

        $b4 = r1[$i2];

        $c3 = $r2[i1];

        $i5 = $c3 + -65;

        $i5 = $i5 + 10;

        $i5 = $b4 | $i5;

        $b4 = (byte) $i5;

        r1[$i2] = $b4;

        goto label07;

     label10:
        return r1;
    }
    public static byte[][] split(byte[], int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        byte[] $r0, $r3;
        int $i0, $i1;
        byte[][] r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        if $i0 <= $i1 goto label1;

        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label1:
        r1 = newarray (byte[])[2];

        $r3 = newarray (byte)[$i0];

        r1[0] = $r3;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        $r3 = newarray (byte)[$i1];

        r1[1] = $r3;

        $r3 = r1[0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r3, 0, $i0);

        $r3 = r1[1];

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r3, 0, $i1);

        return r1;
    }
    public static byte[] subArray(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] subArray(byte[],int,int)>($r0, $i0, $i1);

        return $r0;
    }
    public static byte[] subArray(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 - $i0;

        r1 = newarray (byte)[$i2];

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, r1, 0, $i1);

        return r1;
    }
    public static java.lang.String toBinaryString(byte[])
    {
        byte[] $r0;
        int i0, i2, $i3;
        byte b1;
        java.lang.String r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: byte[];

        r1 = "";

        i2 = 0;

     label1:
        $i3 = lengthof $r0;

        if i2 >= $i3 goto label5;

        b1 = $r0[i2];

        $i3 = 0;

     label2:
        if $i3 >= 8 goto label3;

        i0 = b1 >>> $i3;

        i0 = i0 & 1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $i3 = lengthof $r0;

        $i3 = $i3 + -1;

        if i2 == $i3 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return r1;
    }
    public static char[] toCharArray(byte[])
    {
        byte[] $r0;
        char[] r1;
        int $i0, $i1;
        byte $b2;
        char $c3;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        r1 = newarray (char)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $b2 = $r0[$i0];

        $c3 = (char) $b2;

        r1[$i0] = $c3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static java.lang.String toHexString(byte[])
    {
        byte[] $r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        char[] $r3;
        byte $b2;
        char $c3;

        $r0 := @parameter0: byte[];

        r1 = "";

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = <org.spongycastle.pqc.math.linearalgebra.ByteUtils: char[] HEX_CHARS>;

        $b2 = $r0[i0];

        $i1 = $b2 >>> 4;

        $i1 = $i1 & 15;

        $c3 = $r3[$i1];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = <org.spongycastle.pqc.math.linearalgebra.ByteUtils: char[] HEX_CHARS>;

        $b2 = $r0[i0];

        $i1 = $b2 & 15;

        $c3 = $r3[$i1];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static java.lang.String toHexString(byte[], java.lang.String, java.lang.String)
    {
        byte[] $r0;
        java.lang.String $r1, $r2, r3;
        int i0, $i1;
        java.lang.StringBuilder $r4;
        char[] $r5;
        byte $b2;
        char $c3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>(java.lang.String)>($r1);

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = <org.spongycastle.pqc.math.linearalgebra.ByteUtils: char[] HEX_CHARS>;

        $b2 = $r0[i0];

        $i1 = $b2 >>> 4;

        $i1 = $i1 & 15;

        $c3 = $r5[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = <org.spongycastle.pqc.math.linearalgebra.ByteUtils: char[] HEX_CHARS>;

        $b2 = $r0[i0];

        $i1 = $b2 & 15;

        $c3 = $r5[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = $r1;

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r3;
    }
    public static byte[] xor(byte[], byte[])
    {
        byte[] $r0, $r1, r2;
        byte $b0, $b2;
        int $i1, $i3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i1 = lengthof $r0;

        r2 = newarray (byte)[$i1];

        $i1 = lengthof $r0;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label2;

        $b2 = $r0[$i1];

        $b0 = $r1[$i1];

        $i3 = $b2 ^ $b0;

        $b0 = (byte) $i3;

        r2[$i1] = $b0;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return r2;
    }
