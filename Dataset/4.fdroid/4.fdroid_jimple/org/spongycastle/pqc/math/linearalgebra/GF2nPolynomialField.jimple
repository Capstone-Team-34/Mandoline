org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField extends org.spongycastle.pqc.math.linearalgebra.GF2nField
private boolean isPentanomial
private boolean isTrinomial
private int[] pc
org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix
private int tc
    public void <init>(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        int $i0;
        int[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Vector $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nField: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial> = 0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial> = 0;

        $r1 = newarray (int)[3];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc> = $r1;

        if $i0 >= 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k must be at least 3");

        throw $r2;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree> = $i0;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeFieldPolynomial()>();

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeSquaringMatrix()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector fields> = $r3;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector matrices> = $r3;

        return;
    }
    public void <init>(int, org.spongycastle.pqc.math.linearalgebra.GF2Polynomial) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        int[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.RuntimeException $r4;
        boolean $z0;
        java.util.Vector $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nField: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial> = 0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial> = 0;

        $r2 = newarray (int)[3];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc> = $r2;

        if $i0 >= 3 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("degree must be at least 3");

        throw $r3;

     label1:
        $i1 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int getLength()>();

        $i2 = $i0 + 1;

        if $i1 == $i2 goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>()>();

        throw $r4;

     label2:
        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isIrreducible()>();

        if $z0 != 0 goto label3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>()>();

        throw $r4;

     label3:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree> = $i0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = $r1;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeSquaringMatrix()>();

        $i0 = 2;

        $i1 = 1;

     label4:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $i2 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: int getLength()>();

        $i2 = $i2 + -1;

        if $i1 >= $i2 goto label7;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean testBit(int)>($i1);

        if $z0 == 0 goto label6;

        $i0 = $i0 + 1;

        if $i0 != 3 goto label5;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int tc> = $i1;

     label5:
        if $i0 > 5 goto label6;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc>;

        $i2 = $i0 + -3;

        $r2[$i2] = $i1;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        if $i0 != 3 goto label8;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial> = 1;

     label8:
        if $i0 != 5 goto label9;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial> = 1;

     label9:
        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector fields> = $r5;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector matrices> = $r5;

        return;
    }
    public void <init>(int, boolean)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        int $i0;
        boolean $z0;
        int[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Vector $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nField: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial> = 0;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial> = 0;

        $r1 = newarray (int)[3];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc> = $r1;

        if $i0 >= 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k must be at least 3");

        throw $r2;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree> = $i0;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeFieldPolynomial()>();

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeSquaringMatrix()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector fields> = $r3;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector matrices> = $r3;

        return;

     label3:
        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: void computeFieldPolynomial2()>();

        goto label2;
    }
    private void computeSquaringMatrix()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r3, $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + -1;

        r1 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[$i0];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $r2 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[$i0];

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix> = $r2;

        $i0 = 0;

     label01:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label02;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix>;

        $r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>($i1, "ZERO");

        $r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        $i0 = 0;

     label03:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label04;

        $r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>(1, "ONE");

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 + $i0;

        $r3 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int)>($i1);

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $r3 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial remainder(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r4);

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label03;

     label04:
        $i0 = 1;

     label05:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 >> 1;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        if $i0 > $i1 goto label09;

        $i1 = 1;

     label06:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i1 > $i2 goto label08;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i3 = $i0 << 1;

        $i2 = $i2 - $i3;

        $r3 = r1[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i1;

        $z0 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean testBit(int)>($i2);

        if $z0 == 0 goto label07;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix>;

        $i2 = $i1 + -1;

        $r3 = $r2[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i0;

        virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i2);

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $i0 = $i0 + 1;

        goto label05;

     label09:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 >> 1;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i0 = $i0 + 1;

     label10:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i0 > $i1 goto label11;

        r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix>;

        $i1 = $i0 << 1;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 - $i2;

        $i1 = $i1 + -1;

        $r3 = r1[$i1];

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 - $i0;

        virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i1);

        $i0 = $i0 + 1;

        goto label10;

     label11:
        return;
    }
    private boolean testPentanomials()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean $z0, z1, $z2;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        z1 = 0;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = $r1;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>(0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i0);

        $i0 = 1;

     label01:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 + -3;

        if $i0 > $i1 goto label15;

        if z1 != 0 goto label15;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i0);

        $i1 = $i0 + 1;

     label02:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 + -2;

        if $i1 > $i2 goto label14;

        if z1 != 0 goto label14;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i1);

        $i2 = $i1 + 1;

     label03:
        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i3 = $i3 + -1;

        if $i2 > $i3 goto label13;

        if z1 != 0 goto label13;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i2);

        $i3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i3 = $i3 & 1;

        if $i3 == 0 goto label08;

        $z0 = 1;

     label04:
        $i3 = $i0 & 1;

        if $i3 == 0 goto label09;

        $z2 = 1;

     label05:
        $z0 = $z0 | $z2;

        $i3 = $i1 & 1;

        if $i3 == 0 goto label10;

        $z2 = 1;

     label06:
        $z0 = $z0 | $z2;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label11;

        $z2 = 1;

     label07:
        $z0 = $z2 | $z0;

        if $z0 == 0 goto label12;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isIrreducible()>();

        z1 = $z0;

        if $z0 == 0 goto label12;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial> = 1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc>;

        $r2[0] = $i0;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc>;

        $r2[1] = $i1;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc>;

        $r2[2] = $i2;

        return $z0;

     label08:
        $z0 = 0;

        goto label04;

     label09:
        $z2 = 0;

        goto label05;

     label10:
        $z2 = 0;

        goto label06;

     label11:
        $z2 = 0;

        goto label07;

     label12:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void resetBit(int)>($i2);

        $i2 = $i2 + 1;

        goto label03;

     label13:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void resetBit(int)>($i1);

        $i1 = $i1 + 1;

        goto label02;

     label14:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void resetBit(int)>($i0);

        $i0 = $i0 + 1;

        goto label01;

     label15:
        return z1;
    }
    private boolean testRandom()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean $z0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = $r1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void randomize()>();

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>(0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isIrreducible()>();

        if $z0 == 0 goto label1;

        return 1;
    }
    private boolean testTrinomials()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean z0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        z0 = 0;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = $r1;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>(0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i0);

        $i0 = 1;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i0 >= $i1 goto label3;

        if z0 != 0 goto label3;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isIrreducible()>();

        if z0 == 0 goto label2;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial> = 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int tc> = $i0;

        return z0;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void resetBit(int)>($i0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: boolean isIrreducible()>();

        $i0 = $i0 + 1;

        goto label1;

     label3:
        return z0;
    }
    protected void computeCOBMatrix(org.spongycastle.pqc.math.linearalgebra.GF2nField)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0, $r11;
        org.spongycastle.pqc.math.linearalgebra.GF2nField $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] r2;
        int $i0, $i1, $i2;
        boolean $z0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r3, $r15;
        org.spongycastle.pqc.math.linearalgebra.GF2nElement $r4, $r10;
        java.lang.Object[] r5;
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2nONBElement $r7;
        java.lang.Object $r8;
        org.spongycastle.pqc.math.linearalgebra.GFElement $r9;
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement $r12;
        java.util.Vector $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2nField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: int mDegree>;

        if $i0 == $i1 goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GF2nPolynomialField.computeCOBMatrix: B1 has a different degree and thus cannot be coverted to!");

        throw $r14;

     label01:
        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        if $z0 == 0 goto label02;

        virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: void computeCOBMatrix(org.spongycastle.pqc.math.linearalgebra.GF2nField)>(r0);

        return;

     label02:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        r2 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[$i0];

        $i0 = 0;

     label03:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i0 >= $i1 goto label04;

        $r15 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        specialinvoke $r15.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i1);

        r2[$i0] = $r15;

        $i0 = $i0 + 1;

        goto label03;

     label04:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $r4 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r3);

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: boolean isZero()>();

        if $z0 != 0 goto label04;

        $z0 = $r4 instanceof org.spongycastle.pqc.math.linearalgebra.GF2nONBElement;

        if $z0 == 0 goto label07;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        r5 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2nONBElement)[$i0];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + -1;

        $r6 = (org.spongycastle.pqc.math.linearalgebra.GF2nONBField) $r1;

        $r7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2nONBElement: org.spongycastle.pqc.math.linearalgebra.GF2nONBElement ONE(org.spongycastle.pqc.math.linearalgebra.GF2nONBField)>($r6);

        r5[$i0] = $r7;

     label05:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + -2;

        r5[$i0] = $r4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + -3;

     label06:
        if $i0 < 0 goto label08;

        $i1 = $i0 + 1;

        $r8 = r5[$i1];

        $r10 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r8;

        $r9 = virtualinvoke $r10.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: org.spongycastle.pqc.math.linearalgebra.GFElement multiply(org.spongycastle.pqc.math.linearalgebra.GFElement)>($r4);

        $r10 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r9;

        r5[$i0] = $r10;

        $i0 = $i0 + -1;

        goto label06;

     label07:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        r5 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement)[$i0];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i0 = $i0 + -1;

        $r11 = (org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField) $r1;

        $r12 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement ONE(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField)>($r11);

        r5[$i0] = $r12;

        goto label05;

     label08:
        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        if $z0 == 0 goto label13;

        $i0 = 0;

     label09:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i0 >= $i1 goto label18;

        $i1 = 0;

     label10:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i1 >= $i2 goto label12;

        $r8 = r5[$i0];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        $r4 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r8;

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: boolean testBit(int)>($i2);

        if $z0 == 0 goto label11;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        $r3 = r2[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i2);

     label11:
        $i1 = $i1 + 1;

        goto label10;

     label12:
        $i0 = $i0 + 1;

        goto label09;

     label13:
        $i0 = 0;

     label14:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i0 >= $i1 goto label18;

        $i1 = 0;

     label15:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        if $i1 >= $i2 goto label17;

        $r8 = r5[$i0];

        $r4 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r8;

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: boolean testBit(int)>($i1);

        if $z0 == 0 goto label16;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        $r3 = r2[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i2);

     label16:
        $i1 = $i1 + 1;

        goto label15;

     label17:
        $i0 = $i0 + 1;

        goto label14;

     label18:
        $r13 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector fields>;

        virtualinvoke $r13.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r13 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: java.util.Vector matrices>;

        virtualinvoke $r13.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        $r13 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: java.util.Vector fields>;

        virtualinvoke $r13.<java.util.Vector: void addElement(java.lang.Object)>(r0);

        $r13 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: java.util.Vector matrices>;

        r2 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] invertMatrix(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[])>(r2);

        virtualinvoke $r13.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }
    protected void computeFieldPolynomial()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testTrinomials()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testPentanomials()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testRandom()>();

     label2:
        return;
    }
    protected void computeFieldPolynomial2()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testTrinomials()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testPentanomials()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean testRandom()>();

     label2:
        return;
    }
    public int[] getPc() throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        int[] r1, $r3;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $z0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>()>();

        throw $r2;

     label1:
        r1 = newarray (int)[3];

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int[] pc>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, 3);

        return r1;
    }
    protected org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement r2, $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial r3, r4, r7;
        int $i0, $i1;
        java.util.Random $r5;
        org.spongycastle.pqc.math.linearalgebra.GF2nElement $r8;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,org.spongycastle.pqc.math.linearalgebra.GF2nField)>($r1, r0);

        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

     label1:
        if $i0 <= 1 goto label7;

     label2:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement;

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField,java.util.Random)>(r0, $r5);

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        $r6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement ZERO(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField)>(r0);

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(int,org.spongycastle.pqc.math.linearalgebra.GF2nElement)>(2, $r6);

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void set(int,org.spongycastle.pqc.math.linearalgebra.GF2nElement)>(1, r2);

        r7 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        $i0 = 1;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int mDegree>;

        $i1 = $i1 + -1;

        if $i0 > $i1 goto label4;

        r7 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial multiplyAndReduce(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial,org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r7, r4);

        r7 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial add(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        r3 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial gcd(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r4);

        $i1 = virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        if $i1 == 0 goto label2;

        if $i1 == $i0 goto label2;

        $i1 = $i1 << 1;

        if $i1 <= $i0 goto label6;

        r4 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial quotient(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

     label5:
        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        goto label1;

     label6:
        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        goto label5;

     label7:
        $r8 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nElement at(int)>(0);

        return $r8;
    }
    public org.spongycastle.pqc.math.linearalgebra.GF2Polynomial getSquaringVector(int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $i0 := @parameter0: int;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix>;

        $r3 = $r2[$i0];

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r3);

        return $r1;
    }
    public int getTc() throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        $z0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: int tc>;

        return i0;
    }
    public boolean isPentanomial()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        z0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isPentanomial>;

        return z0;
    }
    public boolean isTrinomial()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField;

        z0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: boolean isTrinomial>;

        return z0;
    }
