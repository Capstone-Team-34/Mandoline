org.spongycastle.pqc.math.linearalgebra.GF2nONBField extends org.spongycastle.pqc.math.linearalgebra.GF2nField
private static final int MAXLONG
private int mBit
private int mLength
int[][] mMult
private int mType
    public void <init>(int) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        int[][] $r5;
        java.util.Vector $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nField: void <init>()>();

        if $i0 >= 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("k must be at least 3");

        throw $r1;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 / 64;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mLength> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 & 63;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mBit> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mBit>;

        if $i0 != 0 goto label4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mBit> = 64;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: void computeType()>();

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i0 >= 3 goto label6;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = 2;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult> = $r5;

        $i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label5;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        $r2 = $r5[$i0];

        $r2[0] = -1;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        $r2 = $r5[$i0];

        $r2[1] = -1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mLength>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mLength> = $i0;

        goto label2;

     label5:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: void computeMultMatrix()>();

        virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: void computeFieldPolynomial()>();

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: java.util.Vector fields> = $r6;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: java.util.Vector matrices> = $r6;

        return;

     label6:
        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nThe type of this field is ");

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r7;
    }
    private void computeMultMatrix()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int[] r1, $r3;
        int i0, $i1, i2, i3, $i4, i5, $i6;
        int[][] $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        i0 = i0 & 7;

        if i0 == 0 goto label24;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        i0 = i0 * $i1;

        i0 = i0 + 1;

        r1 = newarray (int)[i0];

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i1 != 1 goto label05;

        $i1 = 1;

     label01:
        i2 = 1;

        i3 = 0;

     label02:
        $i4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if i3 >= $i4 goto label09;

        i5 = i2;

        $i4 = 0;

     label03:
        $i6 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i4 >= $i6 goto label07;

        r1[i5] = $i4;

        i5 = i5 << 1;

        i5 = i5 % i0;

        if i5 >= 0 goto label04;

        i5 = i5 + i0;

     label04:
        $i4 = $i4 + 1;

        goto label03;

     label05:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i1 != 2 goto label06;

        $i1 = i0 + -1;

        goto label01;

     label06:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>($i1, i0);

        goto label01;

     label07:
        i2 = $i1 * i2;

        i2 = i2 % i0;

        if i2 >= 0 goto label08;

        i2 = i2 + i0;

     label08:
        i3 = i3 + 1;

        goto label02;

     label09:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i1 != 1 goto label19;

        $i1 = 1;

     label10:
        i3 = i0 + -1;

        if $i1 >= i3 goto label13;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = $r3[0];

        if i3 != -1 goto label12;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = i0 - $i1;

        i3 = r1[i3];

        $r3[0] = i3;

     label11:
        $i1 = $i1 + 1;

        goto label10;

     label12:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = i0 - $i1;

        i3 = r1[i3];

        $r3[1] = i3;

        goto label11;

     label13:
        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        i0 = i0 >> 1;

        $i1 = 1;

     label14:
        if $i1 > i0 goto label25;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + -1;

        r1 = $r2[i3];

        i3 = r1[0];

        if i3 != -1 goto label17;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + -1;

        r1 = $r2[i3];

        i3 = i0 + $i1;

        i3 = i3 + -1;

        r1[0] = i3;

     label15:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = i0 + $i1;

        i3 = i3 + -1;

        r1 = $r2[i3];

        i3 = r1[0];

        if i3 != -1 goto label18;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = i0 + $i1;

        i3 = i3 + -1;

        r1 = $r2[i3];

        i3 = $i1 + -1;

        r1[0] = i3;

     label16:
        $i1 = $i1 + 1;

        goto label14;

     label17:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + -1;

        r1 = $r2[i3];

        i3 = i0 + $i1;

        i3 = i3 + -1;

        r1[1] = i3;

        goto label15;

     label18:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = i0 + $i1;

        i3 = i3 + -1;

        r1 = $r2[i3];

        i3 = $i1 + -1;

        r1[1] = i3;

        goto label16;

     label19:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i1 != 2 goto label23;

        $i1 = 1;

     label20:
        i3 = i0 + -1;

        if $i1 >= i3 goto label25;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = $r3[0];

        if i3 != -1 goto label22;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = i0 - $i1;

        i3 = r1[i3];

        $r3[0] = i3;

     label21:
        $i1 = $i1 + 1;

        goto label20;

     label22:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int[][] mMult>;

        i3 = $i1 + 1;

        i3 = r1[i3];

        $r3 = $r2[i3];

        i3 = i0 - $i1;

        i3 = r1[i3];

        $r3[1] = i3;

        goto label21;

     label23:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("only type 1 or type 2 implemented");

        throw $r4;

     label24:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("bisher nur fuer Gausssche Normalbasen implementiert");

        throw $r4;

     label25:
        return;
    }
    private void computeType() throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 & 7;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("The extension degree is divisible by 8!");

        throw $r1;

     label1:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType> = 1;

        $i0 = 0;

     label2:
        if $i0 == 1 goto label4;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = $i1 * $i2;

        $i1 = $i1 + 1;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: boolean isPrime(int)>($i1);

        if $z0 == 0 goto label3;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int order(int,int)>(2, $i1);

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = $i1 * $i2;

        $i0 = $i1 / $i0;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int gcd(int,int)>($i0, $i1);

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType> = $i1;

        goto label2;

     label4:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType> = $i0;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i0 != 1 goto label5;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 << 1;

        $i0 = $i0 + 1;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: boolean isPrime(int)>($i0);

        if $z0 == 0 goto label5;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int order(int,int)>(2, $i0);

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = $i1 << 1;

        $i0 = $i1 / $i0;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int gcd(int,int)>($i0, $i1);

        if $i0 != 1 goto label5;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType> = $i0;

     label5:
        return;
    }
    private int elementOfOrder(int, int)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int $i0, $i1, i2, $i3, $i4;
        java.util.Random r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        i2 = 0;

     label1:
        if i2 != 0 goto label2;

        i2 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        $i3 = $i1 + -1;

        i2 = i2 % $i3;

        if i2 >= 0 goto label1;

        $i3 = $i1 + -1;

        i2 = i2 + $i3;

        goto label1;

     label2:
        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int order(int,int)>(i2, $i1);

     label3:
        $i4 = $i3 % $i0;

        if $i4 != 0 goto label4;

        if $i3 != 0 goto label6;

     label4:
        if i2 != 0 goto label5;

        i2 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        $i3 = $i1 + -1;

        i2 = i2 % $i3;

        if i2 >= 0 goto label4;

        $i3 = $i1 + -1;

        i2 = i2 + $i3;

        goto label4;

     label5:
        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: int order(int,int)>(i2, $i1);

        goto label3;

     label6:
        $i1 = i2;

        $i0 = $i0 / $i3;

        $i3 = 2;

     label7:
        if $i3 > $i0 goto label8;

        $i1 = $i1 * i2;

        $i3 = $i3 + 1;

        goto label7;

     label8:
        return $i1;
    }
    protected void computeCOBMatrix(org.spongycastle.pqc.math.linearalgebra.GF2nField)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        org.spongycastle.pqc.math.linearalgebra.GF2nField $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] r2;
        java.lang.Object[] r3;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r4, $r9;
        org.spongycastle.pqc.math.linearalgebra.GF2nElement $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Vector $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2nField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: int mDegree>;

        if $i0 == $i1 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("GF2nField.computeCOBMatrix: B1 has a different degree and thus cannot be coverted to!");

        throw $r8;

     label01:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        r2 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)[$i0];

        $i0 = 0;

     label02:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label03;

        $r9 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        specialinvoke $r9.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int)>($i1);

        r2[$i0] = $r9;

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial>;

        $r5 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>($r4);

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: boolean isZero()>();

        if $z0 != 0 goto label03;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        r3 = newarray (org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement)[$i0];

        $r6 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: java.lang.Object clone()>();

        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r6;

        r3[0] = $r5;

        $i0 = 1;

     label04:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label05;

        $i1 = $i0 + -1;

        $r6 = r3[$i1];

        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r6;

        $r5 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement square()>();

        r3[$i0] = $r5;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $i0 = 0;

     label06:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label10;

        $i1 = 0;

     label07:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i1 >= $i2 goto label09;

        $r6 = r3[$i0];

        $r5 = (org.spongycastle.pqc.math.linearalgebra.GF2nElement) $r6;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2nElement: boolean testBit(int)>($i1);

        if $z0 == 0 goto label08;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i2 = $i2 - $i1;

        $i2 = $i2 + -1;

        $r4 = r2[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void setBit(int)>($i2);

     label08:
        $i1 = $i1 + 1;

        goto label07;

     label09:
        $i0 = $i0 + 1;

        goto label06;

     label10:
        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: java.util.Vector fields>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r7 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: java.util.Vector matrices>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        $r7 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: java.util.Vector fields>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r0);

        $r7 = $r1.<org.spongycastle.pqc.math.linearalgebra.GF2nField: java.util.Vector matrices>;

        r2 = virtualinvoke r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[] invertMatrix(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial[])>(r2);

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }
    protected void computeFieldPolynomial()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial r1, $r2, r3, r4;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i0 != 1 goto label1;

        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>($i0, "ALL");

        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = r1;

        return;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mType>;

        if $i0 != 2 goto label4;

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>($i0, "ONE");

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i0 = $i0 + 1;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <init>(int,java.lang.String)>($i0, "X");

        virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r3);

        $i0 = 1;

     label2:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label3;

        r1 = r3;

        r3 = r4;

        $r2 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft()>();

        r4 = $r2;

        virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void addToThis(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>(r1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial> = r4;

     label4:
        return;
    }
    int getONBBit()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mBit>;

        return i0;
    }
    int getONBLength()
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mLength>;

        return i0;
    }
    protected org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Polynomial $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2nONBElement r2, $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial r3, r4, r7;
        int $i0, $i1;
        java.util.Random $r5;
        org.spongycastle.pqc.math.linearalgebra.GF2nElement $r8;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Polynomial;

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial,org.spongycastle.pqc.math.linearalgebra.GF2nField)>($r1, r0);

        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

     label1:
        if $i0 <= 1 goto label7;

     label2:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2nONBElement;

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2nONBElement: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nONBField,java.util.Random)>(r0, $r5);

        r3 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        $r6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2nONBElement: org.spongycastle.pqc.math.linearalgebra.GF2nONBElement ZERO(org.spongycastle.pqc.math.linearalgebra.GF2nONBField)>(r0);

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(int,org.spongycastle.pqc.math.linearalgebra.GF2nElement)>(2, $r6);

        virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void set(int,org.spongycastle.pqc.math.linearalgebra.GF2nElement)>(1, r2);

        r7 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        $i0 = 1;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = $i1 + -1;

        if $i0 > $i1 goto label4;

        r7 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial multiplyAndReduce(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial,org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r7, r4);

        r7 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial add(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        r3 = virtualinvoke r7.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial gcd(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r4);

        $i1 = virtualinvoke r3.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        if $i1 == 0 goto label2;

        if $i1 == $i0 goto label2;

        $i1 = $i1 << 1;

        if $i1 <= $i0 goto label6;

        r4 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial quotient(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

     label5:
        $i0 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: int getDegree()>();

        goto label1;

     label6:
        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial)>(r3);

        goto label5;

     label7:
        $r8 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2nPolynomial: org.spongycastle.pqc.math.linearalgebra.GF2nElement at(int)>(0);

        return $r8;
    }
    int[][] invMatrix(int[][])
    {
        org.spongycastle.pqc.math.linearalgebra.GF2nONBField r0;
        int[][] $r1, r5;
        int $i0, $i1, $i2;
        int[] $r2, $r6;
        java.lang.Class $r3;
        java.lang.Object $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.GF2nONBField;

        $r1 := @parameter0: int[][];

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (int[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label2;

        $r2 = r5[$i0];

        $r2[$i0] = 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i0 >= $i1 goto label6;

        $i1 = $i0;

     label4:
        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        if $i1 >= $i2 goto label5;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int mDegree>;

        $i2 = $i2 + -1;

        $i2 = $i2 - $i0;

        $r2 = $r1[$i2];

        $r6 = $r1[$i0];

        $i2 = $r6[$i0];

        $r2[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return null;
    }
