org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2 extends java.lang.Object
    private void <init>()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2 r0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static int add(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 ^ $i1;

        return $i0;
    }
    public static int degree(int)
    {
        int $i0, i1;

        $i0 := @parameter0: int;

        i1 = -1;

     label1:
        if $i0 == 0 goto label2;

        i1 = i1 + 1;

        $i0 = $i0 >>> 1;

        goto label1;

     label2:
        return i1;
    }
    public static int degree(long)
    {
        long $l0;
        int i1;
        byte $b2;

        $l0 := @parameter0: long;

        i1 = 0;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        i1 = i1 + 1;

        $l0 = $l0 >>> 1;

        goto label1;

     label2:
        i1 = i1 + -1;

        return i1;
    }
    public static int gcd(int, int)
    {
        int $i0, $i1, i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i1;

     label1:
        if i2 == 0 goto label2;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int remainder(int,int)>($i0, i2);

        $i0 = i2;

        i2 = $i1;

        goto label1;

     label2:
        return $i0;
    }
    public static int getIrreduciblePolynomial(int)
    {
        int $i0, i1;
        boolean $z0;
        java.io.PrintStream $r0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("The Degree is negative");

        return 0;

     label1:
        if $i0 <= 31 goto label2;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("The Degree is more then 31");

        return 0;

     label2:
        if $i0 == 0 goto label5;

        i1 = 1 << $i0;

        $i0 = $i0 + 1;

        $i0 = 1 << $i0;

        i1 = i1 + 1;

     label3:
        if i1 >= $i0 goto label4;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: boolean isIrreducible(int)>(i1);

        if $z0 != 0 goto label6;

        i1 = i1 + 2;

        goto label3;

     label4:
        return 0;

     label5:
        return 1;

     label6:
        return i1;
    }
    public static boolean isIrreducible(int)
    {
        int $i0, i1, i2, i3, $i4;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i0);

        i1 = i1 >>> 1;

        i2 = 2;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $i4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int modMultiply(int,int,int)>(i2, i2, $i0);

        i2 = $i4;

        $i4 = $i4 ^ 2;

        $i4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int gcd(int,int)>($i4, $i0);

        if $i4 != 1 goto label4;

        i3 = i3 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    public static int modMultiply(int, int, int)
    {
        int $i0, $i1, $i2, i3, i5, $i6;
        byte b4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i5 = 0;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int remainder(int,int)>($i0, $i2);

        i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int remainder(int,int)>($i1, $i2);

        $i1 = i3;

        if i3 == 0 goto label3;

        i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i2);

        i3 = 1 << i3;

     label1:
        if $i0 == 0 goto label4;

        $i6 = $i0 & 1;

        b4 = (byte) $i6;

        if b4 != 1 goto label2;

        i5 = i5 ^ $i1;

     label2:
        $i0 = $i0 >>> 1;

        $i1 = $i1 << 1;

        if $i1 < i3 goto label1;

        $i1 = $i1 ^ $i2;

        goto label1;

     label3:
        return 0;

     label4:
        return i5;
    }
    public static long multiply(int, int)
    {
        int $i0, $i3;
        byte b1;
        long $l2, l4;

        $i3 := @parameter0: int;

        $i0 := @parameter1: int;

        l4 = 0L;

        if $i0 == 0 goto label3;

        $l2 = (long) $i0;

        $l2 = $l2 & 4294967295L;

     label1:
        if $i3 == 0 goto label4;

        $i0 = $i3 & 1;

        b1 = (byte) $i0;

        if b1 != 1 goto label2;

        l4 = l4 ^ $l2;

     label2:
        $i3 = $i3 >>> 1;

        $l2 = $l2 << 1;

        goto label1;

     label3:
        return 0L;

     label4:
        return l4;
    }
    public static int remainder(int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.io.PrintStream $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Error: to be divided by 0");

        return 0;

     label1:
        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i0);

        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i1);

        if $i2 < $i3 goto label2;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i0);

        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i1);

        $i2 = $i2 - $i3;

        $i2 = $i1 << $i2;

        $i0 = $i0 ^ $i2;

        goto label1;

     label2:
        return $i0;
    }
    public static int rest(long, int)
    {
        long $l0, l2, $l3;
        int $i1, $i5, $i6, $i7;
        java.io.PrintStream $r0;
        byte $b4;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Error: to be divided by 0");

        return 0;

     label1:
        l2 = (long) $i1;

        l2 = l2 & 4294967295L;

     label2:
        $l3 = $l0 >>> 32;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        $i5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(long)>($l0);

        $i6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(long)>(l2);

        $i5 = $i5 - $i6;

        $l3 = l2 << $i5;

        $l0 = $l0 ^ $l3;

        goto label2;

     label3:
        $l0 = -1L & $l0;

        $i5 = (int) $l0;

     label4:
        $i6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i5);

        $i7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i1);

        if $i6 < $i7 goto label5;

        $i6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i5);

        $i7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2: int degree(int)>($i1);

        $i6 = $i6 - $i7;

        $i6 = $i1 << $i6;

        $i5 = $i5 ^ $i6;

        goto label4;

     label5:
        return $i5;
    }
