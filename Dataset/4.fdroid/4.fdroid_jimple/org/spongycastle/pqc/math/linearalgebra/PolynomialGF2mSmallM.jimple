org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM extends java.lang.Object
public static final char RANDOM_IRREDUCIBLE_POLYNOMIAL
private int[] coefficients
private int degree
private org.spongycastle.pqc.math.linearalgebra.GF2mField field
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree> = -1;

        $r2 = newarray (int)[1];

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r2;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int $i0, $i1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree> = $i0;

        $i1 = $i0 + 1;

        $r2 = newarray (int)[$i1];

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2[$i0] = 1;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, int, char, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int $i0;
        char $c1;
        java.security.SecureRandom $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        int[] $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $r2 := @parameter3: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        lookupswitch($c1)
        {
            case 73: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Error: type ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not defined for GF2smallmPolynomial");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] createRandomIrreduciblePolynomial(int,java.security.SecureRandom)>($i0, $r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r6;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void computeDegree()>();

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, byte[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        byte[] $r2;
        int i0, i1, $i2, i3, i4, $i5;
        java.lang.IllegalArgumentException $r3;
        int[] $r4, $r5;
        byte $b6;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        i0 = 8;

        i1 = 1;

     label1:
        $i2 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i2 <= i0 goto label2;

        i1 = i1 + 1;

        i0 = i0 + 8;

        goto label1;

     label2:
        $i2 = lengthof $r2;

        $i2 = $i2 % i1;

        if $i2 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: byte array is not encoded polynomial over given finite field GF2m");

        throw $r3;

     label3:
        $i2 = lengthof $r2;

        i1 = $i2 / i1;

        $r4 = newarray (int)[i1];

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r4;

        i3 = 0;

        i1 = 0;

     label4:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = lengthof $r4;

        if i1 >= $i2 goto label8;

        $i2 = 0;

        i4 = i3;

     label5:
        if $i2 >= i0 goto label6;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i5 = $r4[i1];

        i3 = i4 + 1;

        $b6 = $r2[i4];

        i4 = $b6 & 255;

        i4 = i4 << $i2;

        $i5 = $i5 ^ i4;

        $r4[i1] = $i5;

        $i2 = $i2 + 8;

        i4 = i3;

        goto label5;

     label6:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = $r4[i1];

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i2);

        if $z0 != 0 goto label7;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: byte array is not encoded polynomial over given finite field GF2m");

        throw $r3;

     label7:
        i1 = i1 + 1;

        i3 = i4;

        goto label4;

     label8:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        i0 = lengthof $r4;

        if i0 == 1 goto label9;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        i0 = lengthof $r5;

        i0 = i0 + -1;

        i0 = $r4[i0];

        if i0 != 0 goto label9;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" Error: byte array is not encoded polynomial over given finite field GF2m");

        throw $r3;

     label9:
        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void computeDegree()>();

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField, int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r1;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r2;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void computeDegree()>();

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mVector)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        org.spongycastle.pqc.math.linearalgebra.GF2mVector $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2mVector;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mVector: int[] getIntArrayForm()>();

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r2, $r3);

        return;
    }
    public void <init>(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field> = $r3;

        $i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree> = $i0;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r2;

        return;
    }
    private int[] add(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, r3;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label3;

        $i1 = lengthof $r2;

        r3 = newarray (int)[$i1];

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, $i1);

     label1:
        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

     label2:
        if $i1 < 0 goto label4;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = r3[$i1];

        $i2 = $r1[$i1];

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int add(int,int)>($i0, $i2);

        r3[$i1] = $i0;

        $i1 = $i1 + -1;

        goto label2;

     label3:
        $i1 = lengthof $r1;

        r3 = newarray (int)[$i1];

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, $i1);

        $r1 = $r2;

        goto label1;

     label4:
        return r3;
    }
    private static int computeDegree(int[])
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $i1 = $r0[$i0];

        if $i1 != 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return $i0;
    }
    private void computeDegree()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree> = $i0;

     label1:
        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        if $i0 < 0 goto label2;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i0 = $r1[$i0];

        if $i0 != 0 goto label2;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i0 = $i0 + -1;

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree> = $i0;

        goto label1;

     label2:
        return;
    }
    private int[] createRandomIrreduciblePolynomial(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0, $i1, $i2;
        java.security.SecureRandom $r1;
        int[] r2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        $i1 = $i0 + 1;

        r2 = newarray (int)[$i1];

        r2[$i0] = 1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getRandomNonZeroElement(java.security.SecureRandom)>($r1);

        r2[0] = $i1;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i2 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getRandomElement(java.security.SecureRandom)>($r1);

        r2[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $z0 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: boolean isIrreducible(int[])>(r2);

        if $z0 != 0 goto label4;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.RandUtils: int nextInt(java.security.SecureRandom,int)>($r1, $i0);

        if $i1 != 0 goto label3;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getRandomNonZeroElement(java.security.SecureRandom)>($r1);

        r2[0] = $i1;

        goto label2;

     label3:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i2 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getRandomElement(java.security.SecureRandom)>($r1);

        r2[$i1] = $i2;

        goto label2;

     label4:
        return r2;
    }
    private int[][] div(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, $r5, $r7;
        int i0, i1, $i2;
        int[][] r3;
        java.lang.ArithmeticException $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r2);

        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        i0 = i0 + 1;

        if $i2 != -1 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division by zero.");

        throw $r4;

     label1:
        r3 = newarray (int[])[2];

        $r5 = newarray (int)[1];

        r3[0] = $r5;

        $r5 = newarray (int)[i0];

        r3[1] = $r5;

        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>($r2);

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        i0 = virtualinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>(i0);

        $r5 = r3[0];

        $r5[0] = 0;

        $r5 = r3[1];

        $r7 = r3[1];

        i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, 0, i1);

     label2:
        $r1 = r3[1];

        i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        if $i2 > i1 goto label3;

        $r5 = newarray (int)[1];

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r1 = r3[1];

        i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>($r1);

        i1 = virtualinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>(i1, i0);

        $r5[0] = i1;

        i1 = $r5[0];

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r2, i1);

        $r7 = r3[1];

        i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r7);

        i1 = i1 - $i2;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r1, i1);

        $r5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r5, i1);

        $r7 = r3[0];

        $r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r5, $r7);

        r3[0] = $r5;

        $r5 = r3[1];

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r1, $r5);

        r3[1] = $r1;

        goto label2;

     label3:
        return r3;
    }
    private int[] gcd(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, r3, r4;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        r3 = $r1;

        r4 = $r2;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        if $i0 != -1 goto label1;

        return $r2;

     label1:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>(r4);

        if $i0 == -1 goto label2;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>(r3, r4);

        $i0 = lengthof r4;

        r3 = newarray (int)[$i0];

        $i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r3, 0, $i0);

        $i0 = lengthof $r1;

        r4 = newarray (int)[$i0];

        $i0 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, 0, $i0);

        goto label1;

     label2:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>(r3);

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i0);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>(r3, $i0);

        return $r1;
    }
    private static int headCoefficient(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r0);

        if $i0 != -1 goto label1;

        return 0;

     label1:
        $i0 = $r0[$i0];

        return $i0;
    }
    private static boolean isEqual(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, i3;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r0);

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        if $i2 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        if i3 > $i2 goto label3;

        $i0 = $r0[i3];

        $i1 = $r1[i3];

        if $i0 != $i1 goto label4;

        i3 = i3 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    private boolean isIrreducible(int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, r2, r3, $r5;
        int i0, $i1, i2, i3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        i0 = $r1[0];

        if i0 != 0 goto label1;

        return 0;

     label1:
        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        i0 = i0 >> 1;

        r3 = newarray (int)[2];

        r3[0] = 0;

        r3[1] = 1;

        r2 = newarray (int)[2];

        r2[0] = 0;

        r2[1] = 1;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        i3 = $i1 + -1;

     label3:
        if i3 < 0 goto label4;

        r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>(r3, r3, $r1);

        i3 = i3 + -1;

        goto label3;

     label4:
        $r5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>(r3);

        r3 = $r5;

        $r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r5, r2);

        $r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] gcd(int[],int[])>($r5, $r1);

        i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r5);

        if i3 != 0 goto label6;

        i2 = i2 + 1;

        goto label2;

     label5:
        return 1;

     label6:
        return 0;
    }
    private int[] mod(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, r4;
        int $i0, $i1, $i2, $i3;
        java.lang.ArithmeticException $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r2);

        if $i0 != -1 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division by zero");

        throw $r3;

     label1:
        $i1 = lengthof $r1;

        r4 = newarray (int)[$i1];

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>($r2);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i1);

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r4, 0, $i2);

     label2:
        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>(r4);

        if $i0 > $i2 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>(r4);

        $i2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i2, $i1);

        $i3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>(r4);

        $i3 = $i3 - $i0;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r2, $i3);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r1, $i2);

        r4 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r1, r4);

        goto label2;

     label3:
        return r4;
    }
    private int[] modDiv(int[], int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, $r3, $r4, r5, $r7;
        int $i0;
        int[][] $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r8;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $r3 := @parameter2: int[];

        $r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r3);

        r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>($r2, $r3);

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>($r1, $r3);

     label1:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>(r5);

        if $i0 == -1 goto label2;

        $r6 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[][] div(int[],int[])>($r4, r5);

        $r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>(r5);

        r5 = $r6[1];

        r5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>(r5);

        $r7 = $r6[0];

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>($r7, $r1, $r3);

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, $r7);

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r1);

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r7);

        goto label1;

     label2:
        $i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int headCoefficient(int[])>($r4);

        $r8 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int inverse(int)>($i0);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r2, $i0);

        return $r1;
    }
    private int[] modMultiply(int[], int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $r3 := @parameter2: int[];

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>($r1, $r2);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>($r1, $r3);

        return $r1;
    }
    private int[] multWithElement(int[], int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, r2;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        if $i1 == -1 goto label1;

        if $i0 != 0 goto label2;

     label1:
        $r1 = newarray (int)[1];

        return $r1;

     label2:
        if $i0 != 1 goto label3;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r1);

        return $r1;

     label3:
        $i2 = $i1 + 1;

        r2 = newarray (int)[$i2];

     label4:
        if $i1 < 0 goto label5;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i2 = $r1[$i1];

        $i2 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i2, $i0);

        r2[$i1] = $i2;

        $i1 = $i1 + -1;

        goto label4;

     label5:
        return r2;
    }
    private static int[] multWithMonomial(int[], int)
    {
        int[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r0);

        if $i1 != -1 goto label1;

        $r0 = newarray (int)[1];

        return $r0;

     label1:
        $i2 = $i1 + $i0;

        $i2 = $i2 + 1;

        r1 = newarray (int)[$i2];

        $i1 = $i1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, $i0, $i1);

        return r1;
    }
    private int[] multiply(int[], int[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1, $r2, r3, r4, r5, r6, $r7;
        int i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r1);

        i0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r2);

        if $i1 >= i0 goto label2;

        r5 = $r2;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>(r5);

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r2);

        $i1 = lengthof $r2;

        if $i1 != 1 goto label3;

        $i1 = $r2[0];

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r1, $i1);

        return $r1;

     label2:
        r5 = $r1;

        goto label1;

     label3:
        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $i2 = i0 + $i1;

        $i2 = $i2 + -1;

        r5 = newarray (int)[$i2];

        if $i1 == i0 goto label4;

        r6 = newarray (int)[$i1];

        i0 = i0 - $i1;

        r5 = newarray (int)[i0];

        i0 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r6, 0, i0);

        i0 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r5, 0, i0);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>(r6, $r2);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>(r5, $r2);

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r2, $i1);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r1, $r2);

        return $r1;

     label4:
        $i1 = i0 + 1;

        $i1 = $i1 >>> 1;

        i0 = i0 - $i1;

        r3 = newarray (int)[$i1];

        r4 = newarray (int)[$i1];

        r5 = newarray (int)[i0];

        r6 = newarray (int)[i0];

        i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, i0);

        i0 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r5, 0, i0);

        i0 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r4, 0, i0);

        i0 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, r6, 0, i0);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>(r3, r5);

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>(r4, r6);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>(r3, r4);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>($r2, $r7);

        r5 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>(r5, r6);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, $r1);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, r5);

        r5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>(r5, $i1);

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, r5);

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r2, $i1);

        $r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, $r1);

        return $r1;
    }
    private static int[] normalForm(int[])
    {
        int[] $r0, r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r0);

        if $i1 != -1 goto label1;

        $r0 = newarray (int)[1];

        return $r0;

     label1:
        $i2 = lengthof $r0;

        $i0 = $i1 + 1;

        if $i2 != $i0 goto label2;

        $r0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r0);

        return $r0;

     label2:
        $i0 = $i1 + 1;

        r1 = newarray (int)[$i0];

        $i1 = $i1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i1);

        return r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM add(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r2, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r4, $r2);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM addMonomial(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r4;
        int $i0, $i1;
        int[] r1, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $i1 = $i0 + 1;

        r1 = newarray (int)[$i1];

        r1[$i0] = 1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        r1 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r3, r1);

        $r4 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r2, r1);

        return $r4;
    }
    public void addToThis(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2, $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r3, $r2);

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r2;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void computeDegree()>();

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] div(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[][] $r2;
        int[] $r3, $r4;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r5;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[][] div(int[],int[])>($r3, $r4);

        $r5 = newarray (org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)[2];

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r3 = $r2[0];

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r6, $r3);

        $r5[0] = $r1;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r3 = $r2[1];

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r6, $r3);

        $r5[1] = $r1;

        return $r5;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r3, $r4;
        int $i0, $i1;
        int[] $r5, $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label2;

        $z0 = $r1 instanceof org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) $r1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $z0 = virtualinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i1 = r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        if $i0 != $i1 goto label2;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r6 = r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: boolean isEqual(int[],int[])>($r5, $r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public int evaluateAt(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i1 = $r1[$i2];

        $i2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i1 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i1, $i0);

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = $r1[$i2];

        $i1 = $i1 ^ $i3;

        $i2 = $i2 + -1;

        goto label1;

     label2:
        return $i1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM gcd(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] gcd(int[],int[])>($r2, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r4, $r2);

        return $r1;
    }
    public int getCoefficient(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int getDegree()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i1 = $r1[$i0];

        if $i1 != 0 goto label1;

        return -1;

     label1:
        return $i0;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        byte[] r1;
        int $i0, i1, i2, i3, $i4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        int[] $r3;
        byte $b5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        i1 = 8;

        i2 = 1;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i0 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int getDegree()>();

        if $i0 <= i1 goto label2;

        i2 = i2 + 1;

        i1 = i1 + 8;

        goto label1;

     label2:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = lengthof $r3;

        i2 = $i0 * i2;

        r1 = newarray (byte)[i2];

        i3 = 0;

        i2 = 0;

     label3:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label6;

        $i0 = 0;

     label4:
        if $i0 >= i1 goto label5;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i4 = $r3[i2];

        $i4 = $i4 >>> $i0;

        $b5 = (byte) $i4;

        r1[i3] = $b5;

        $i0 = $i0 + 8;

        i3 = i3 + 1;

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return r1;
    }
    public int getHeadCoefficient()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        if $i0 != -1 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i0 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0, i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        i1 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int hashCode()>();

        $i0 = 0;

     label1:
        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = lengthof $r2;

        if $i0 >= $i2 goto label2;

        i1 = i1 * 31;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = $r2[$i0];

        i1 = i1 + $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return i1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM mod(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>($r2, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r4, $r2);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modDiv(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM, org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1, $r2;
        int[] $r3, $r4, $r5;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 := @parameter1: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modDiv(int[],int[],int[])>($r4, $r5, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r6, $r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modInverse(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] r2, $r3, $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        r2 = newarray (int)[1];

        r2[0] = 1;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modDiv(int[],int[],int[])>(r2, $r3, $r4);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r5, r2);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modMultiply(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM, org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1, $r2;
        int[] $r3, $r4, $r5;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r6;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 := @parameter1: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r2.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>($r4, $r5, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r6 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r6, $r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] modPolynomialToFracton(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int i0, $i1;
        int[] $r2, $r3, $r4, r5, $r7, $r8;
        int[][] $r6;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r9;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r10;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        i0 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int degree>;

        i0 = i0 >> 1;

        $r2 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r2);

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] mod(int[],int[])>($r3, $r4);

        $r4 = newarray (int)[1];

        $r4[0] = 0;

        r5 = newarray (int)[1];

        r5[0] = 1;

     label1:
        $i1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int computeDegree(int[])>($r3);

        if $i1 <= i0 goto label2;

        $r6 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[][] div(int[],int[])>($r2, $r3);

        $r2 = $r3;

        $r3 = $r6[1];

        $r7 = $r6[0];

        $r8 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>($r7, r5, $r8);

        $r7 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] add(int[],int[])>($r4, $r7);

        $r4 = r5;

        r5 = $r7;

        goto label1;

     label2:
        $r9 = newarray (org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)[2];

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r10 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r10, $r3);

        $r9[0] = $r1;

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r10 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r10, r5);

        $r9[1] = $r1;

        return $r9;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareMatrix(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r6;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r1;
        int i0, i1, $i2, $i3, $i4;
        int[] r2, r3, $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[];

        i0 = lengthof $r1;

        r2 = newarray (int)[i0];

        r3 = newarray (int)[i0];

        i1 = 0;

     label1:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = lengthof $r4;

        if i1 >= $i2 goto label2;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i2 = $r4[i1];

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = $r4[i1];

        $i2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i2, $i3);

        r3[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label8;

        $i2 = 0;

     label4:
        if $i2 >= i0 goto label7;

        $r6 = $r1[$i2];

        $r4 = $r6.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = lengthof $r4;

        if i1 < $i3 goto label6;

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r6 = $r1[$i2];

        $r4 = $r6.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = $r4[i1];

        $i4 = r3[$i2];

        $i3 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i3, $i4);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i4 = r2[i1];

        $i3 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int add(int,int)>($i4, $i3);

        r2[i1] = $i3;

        goto label5;

     label7:
        i1 = i1 + 1;

        goto label3;

     label8:
        $r6 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r6.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r5, r2);

        return $r6;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareRoot(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        int[] $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntUtils: int[] clone(int[])>($r3);

        $r3 = $r4;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>($r4, $r4, $r5);

     label1:
        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: boolean isEqual(int[],int[])>($r4, $r5);

        if $z0 != 0 goto label2;

        $r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] normalForm(int[])>($r4);

        $r3 = $r4;

        $r5 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r4 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] modMultiply(int[],int[],int[])>($r4, $r4, $r5);

        goto label1;

     label2:
        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r2, $r3);

        return $r1;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareRootMatrix(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r3;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r1;
        int i0, i1, i2, $i3, $i4;
        int[] r2, $r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[];

        i0 = lengthof $r1;

        r2 = newarray (int)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        $r3 = $r1[i2];

        $r4 = $r3.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = lengthof $r4;

        if i1 < $i3 goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = lengthof $r4;

        if i2 >= $i3 goto label3;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r3 = $r1[i2];

        $r4 = $r3.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i3 = $r4[i1];

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i4 = $r4[i2];

        $i3 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int mult(int,int)>($i3, $i4);

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $i4 = r2[i1];

        $i3 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int add(int,int)>($i4, $i3);

        r2[i1] = $i3;

        goto label3;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        i1 = 0;

     label7:
        if i1 >= i0 goto label8;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        i2 = r2[i1];

        i2 = virtualinvoke $r5.<org.spongycastle.pqc.math.linearalgebra.GF2mField: int sqRoot(int)>(i2);

        r2[i1] = i2;

        i1 = i1 + 1;

        goto label7;

     label8:
        $r3 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r5 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r5, r2);

        return $r3;
    }
    public void multThisWithElement(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        boolean $z0;
        java.lang.ArithmeticException $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Not an element of the finite field this polynomial is defined over.");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r3, $i0);

        r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients> = $r3;

        specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void computeDegree()>();

        return;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithElement(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r4;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        boolean $z0;
        java.lang.ArithmeticException $r2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2mField: boolean isElementOfThisField(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Not an element of the finite field this polynomial is defined over.");

        throw $r2;

     label1:
        $r3 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithElement(int[],int)>($r3, $i0);

        $r4 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r4.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r1, $r3);

        return $r4;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithMonomial(int)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r3;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r1;
        int[] $r2;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i0 := @parameter0: int;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multWithMonomial(int[],int)>($r2, $i0);

        $r3 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r3.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r1, $r2);

        return $r3;
    }
    public org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multiply(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0, $r1;
        int[] $r2, $r3;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r3 = $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $r2 = specialinvoke r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] multiply(int[],int[])>($r2, $r3);

        $r1 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        specialinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int[])>($r4, $r2);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r0;
        java.lang.StringBuilder $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r2;
        java.lang.String $r3;
        int i0, $i1;
        int[] $r4;

        r0 := @this: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Polynomial over ");

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \n");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = 0;

     label1:
        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: org.spongycastle.pqc.math.linearalgebra.GF2mField field>;

        $r4 = r0.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: int[] coefficients>;

        $i1 = $r4[i0];

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: java.lang.String elementToStr(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y^");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
