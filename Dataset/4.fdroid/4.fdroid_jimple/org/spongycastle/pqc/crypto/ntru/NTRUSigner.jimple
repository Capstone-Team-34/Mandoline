org.spongycastle.pqc.crypto.ntru.NTRUSigner extends java.lang.Object
private org.spongycastle.crypto.Digest hashAlg
private org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params
private org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters signingKeyPair
private org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters verificationKey
    public void <init>(org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params> = $r1;

        return;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial sign(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters $r1;
        int i0, i1, i2;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r2, $r3, $r9, $r11;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r4;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters $r5;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis $r6;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial r7, r8;
        java.lang.Object $r10;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r3 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int N>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i2 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i1 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int B>;

        $r5 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters getPublicKey()>();

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i0);

        i0 = i1;

     label1:
        if i0 < 1 goto label4;

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(i0);

        r7 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(i0);

        r8 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $r9 = interfaceinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void div(int)>(i2);

        $r9 = interfaceinvoke r8.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r9);

        $r3 = interfaceinvoke r8.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void div(int)>(i2);

        $r3 = interfaceinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r9);

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(i0);

        $r3 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r10 = virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        $r3 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r10;

        if i0 <= 1 goto label3;

        i1 = i0 + -1;

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(i1);

        $r11 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r11);

     label2:
        $r3 = virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r3, i2);

        i0 = i0 + -1;

        goto label1;

     label3:
        $r11 = $r5.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r11);

        goto label2;

     label4:
        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(0);

        r7 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int)>(0);

        r8 = $r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $r9 = interfaceinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void div(int)>(i2);

        $r9 = interfaceinvoke r8.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r9);

        $r3 = interfaceinvoke r8.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void div(int)>(i2);

        $r3 = interfaceinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r9);

        virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(i2);

        return r2;
    }
    private byte[] signHash(byte[], org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters $r2;
        int i0, $i1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters $r3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r8, $r9, $r10;
        boolean $z0;
        java.nio.ByteBuffer $r11;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters;

        i0 = 0;

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters getPublicKey()>();

     label1:
        i0 = i0 + 1;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i1 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int signFailTolerance>;

        if i0 <= $i1 goto label2;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signing failed: too many retries (max=");

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int signFailTolerance>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $r8 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial createMsgRep(byte[],int)>($r1, i0);

        $r9 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial sign(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters)>($r8, $r2);

        $r10 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: boolean verify(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r8, $r9, $r10);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i1 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r1 = virtualinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i1);

        $i1 = lengthof $r1;

        $i1 = $i1 + 4;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r1);

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $r1 = virtualinvoke $r11.<java.nio.ByteBuffer: byte[] array()>();

        return $r1;
    }
    private boolean verify(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r2, $r3;
        double d0, d1, $d2, $d3;
        long l0;
        int i1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r4;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i1 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        d1 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: double normBoundSq>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        d0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: double betaSq>;

        $r3 = virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r2, i1);

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

        l0 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: long centeredNormSq(int)>(i1);

        $d2 = (double) l0;

        l0 = virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: long centeredNormSq(int)>(i1);

        $d3 = (double) l0;

        d0 = $d3 * d0;

        $d2 = $d2 + d0;

        l0 = (long) $d2;

        $d2 = (double) l0;

        $b2 = $d2 cmpg d1;

        if $b2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    private boolean verifyHash(byte[], byte[], org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] $r1, $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters $r3;
        java.nio.ByteBuffer $r4;
        int $i0, $i1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r5;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = lengthof $r2;

        $i0 = $i0 + -4;

        $r2 = newarray (byte)[$i0];

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r2);

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i0 = $r5.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int N>;

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i1 = $r5.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r6 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(byte[],int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        $r7 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial createMsgRep(byte[],int)>($r1, $i0);

        $r8 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: boolean verify(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r7, $r6, $r8);

        return $z0;
    }
    protected org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial createMsgRep(byte[], int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] $r1;
        int $i0, i1, i2, i3, $i4, $i6;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng r3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r4;
        java.nio.ByteBuffer $r5;
        org.spongycastle.crypto.Digest $r6;
        byte b5;
        int[] $r7;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i2 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int N>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        i3 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        i3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i3);

        i3 = 31 - i3;

        i1 = i3 + 7;

        i1 = i1 / 8;

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i2);

        $i4 = lengthof $r1;

        $i4 = $i4 + 4;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r1);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        r3 = new org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng;

        $r1 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $r6 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: org.spongycastle.crypto.Digest hashAlg>;

        specialinvoke r3.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: void <init>(byte[],org.spongycastle.crypto.Digest)>($r1, $r6);

        $i0 = 0;

     label1:
        if $i0 >= i2 goto label2;

        $r1 = virtualinvoke r3.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: byte[] nextBytes(int)>(i1);

        $i4 = lengthof $r1;

        $i4 = $i4 + -1;

        b5 = $r1[$i4];

        $i4 = i1 * 8;

        $i4 = $i4 - i3;

        $i4 = b5 >> $i4;

        $i6 = i1 * 8;

        $i6 = $i6 - i3;

        $i4 = $i4 << $i6;

        $i6 = lengthof $r1;

        $i6 = $i6 + -1;

        b5 = (byte) $i4;

        $r1[$i6] = b5;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r1);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r7 = r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i4 = virtualinvoke $r5.<java.nio.ByteBuffer: int getInt()>();

        $i4 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i4);

        $r7[$i0] = $i4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r2;
    }
    public byte[] generateSignature()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] r1;
        org.spongycastle.crypto.Digest $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters $r3;
        java.lang.IllegalStateException $r4;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        if $r2 == null goto label1;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters signingKeyPair>;

        if $r3 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call initSign first!");

        throw $r4;

     label2:
        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters signingKeyPair>;

        r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: byte[] signHash(byte[],org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters)>(r1, $r3);

        return r1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r3;
        org.spongycastle.crypto.Digest $r4;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r5;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters signingKeyPair> = r2;

     label1:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $r4 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: org.spongycastle.crypto.Digest hashAlg>;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg> = $r4;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void reset()>();

        return;

     label2:
        r5 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters verificationKey> = r5;

        goto label1;
    }
    public void update(byte)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte $b0;
        org.spongycastle.crypto.Digest $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call initSign or initVerify first!");

        throw $r2;

     label1:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }
    public void update(byte[], int, int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] $r1;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call initSign or initVerify first!");

        throw $r3;

     label1:
        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
    public boolean verifySignature(byte[])
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigner r0;
        byte[] $r1, r2;
        org.spongycastle.crypto.Digest $r3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters $r4;
        java.lang.IllegalStateException $r5;
        int $i0;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigner;

        $r1 := @parameter0: byte[];

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        if $r3 == null goto label1;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters verificationKey>;

        if $r4 != null goto label2;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call initVerify first!");

        throw $r5;

     label2:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters verificationKey>;

        $z0 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigner: boolean verifyHash(byte[],byte[],org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters)>(r2, $r1, $r4);

        return $z0;
    }
