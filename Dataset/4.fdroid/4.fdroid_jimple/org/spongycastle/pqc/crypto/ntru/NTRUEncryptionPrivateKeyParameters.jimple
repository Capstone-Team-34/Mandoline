org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters extends org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyParameters
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h
public org.spongycastle.pqc.math.ntru.polynomial.Polynomial t
    public void <init>(java.io.InputStream, org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        java.io.InputStream $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r2;
        int i0, i1, i2, i3, i4, $i5, $i6;
        boolean $z0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r4;
        java.lang.Object $r5;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r6;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r7;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r8;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyParameters: void <init>(boolean,org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>(1, $r2);

        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int polyType>;

        if i0 != 1 goto label4;

        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        i1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int df1>;

        i2 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int df2>;

        i3 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int df3>;

        $z0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean fastFp>;

        if $z0 == 0 goto label3;

        i4 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int df3>;

     label1:
        $i5 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        $i6 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int)>($r1, $i5, $i6);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r3;

        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream,int,int,int,int,int)>($r1, i0, i1, i2, i3, i4);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t> = $r4;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: void init()>();

        return;

     label3:
        i4 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int df3>;

        i4 = i4 + -1;

        goto label1;

     label4:
        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        i1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int)>($r1, i0, i1);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r3;

        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(java.io.InputStream,int)>($r1, i0);

        $z0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean sparse>;

        if $z0 == 0 goto label6;

        $r6 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r5 = $r6;

        specialinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

     label5:
        $r8 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) $r5;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t> = $r8;

        goto label2;

     label6:
        $r7 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r5 = $r7;

        specialinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r3);

        goto label5;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 := @parameter3: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyParameters: void <init>(boolean,org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>(1, $r4);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t> = $r2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp> = $r3;

        return;
    }
    public void <init>(byte[], org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        byte[] $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r2;
        java.io.ByteArrayInputStream $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: void <init>(java.io.InputStream,org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>($r3, $r2);

        return;
    }
    private void init()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r1;
        boolean $z0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;
        int $i0;
        int[] $r3;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean fastFp>;

        if $z0 == 0 goto label1;

        $r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        specialinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp> = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp>;

        $r3 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r3[0] = 1;

        return;

     label1:
        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $r2 = interfaceinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        $r2 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertF3()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r3, $r4;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r5, $r6;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r7, $r8;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $z0 = $r1 instanceof org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters) $r1;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        if $r3 != null goto label4;

        $r3 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        if $r3 == null goto label5;

        return 0;

     label4:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $r4 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        if $r5 != null goto label6;

        $r5 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        if $r5 == null goto label7;

        return 0;

     label6:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $r6 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r8 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $z0 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label8;

        return 0;

     label8:
        return 1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        byte[] r1, $r4, r7;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r3;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r5;
        boolean $z0;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r6;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i0);

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $z0 = $r5 instanceof org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $r6 = (org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial) $r5;

        r7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: byte[] toBinary()>();

     label1:
        $i0 = lengthof $r4;

        $i1 = lengthof r7;

        $i0 = $i0 + $i1;

        r1 = newarray (byte)[$i0];

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i0);

        $i0 = lengthof $r4;

        $i1 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r1, $i0, $i1);

        return r1;

     label2:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $r2 = interfaceinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        r7 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary3Tight()>();

        goto label1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r1;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r2;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $i0 = 0;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        if $r1 != null goto label4;

        $i1 = 0;

     label1:
        $i1 = $i1 + 31;

        $i1 = $i1 * 31;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        if $r2 != null goto label5;

        $i2 = 0;

     label2:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r3 != null goto label6;

     label3:
        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i1 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int hashCode()>();

        goto label1;

     label5:
        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label6:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label3;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: byte[] getEncoded()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }
