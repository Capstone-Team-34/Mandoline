org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng extends java.lang.Object
private int counter
private org.spongycastle.crypto.Digest hashAlg
private byte[] seed
    void <init>(byte[], org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng r0;
        byte[] $r1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: int counter> = 0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: byte[] seed> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: org.spongycastle.crypto.Digest hashAlg> = $r2;

        return;
    }
    byte[] nextBytes(int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng r0;
        int $i0, $i1;
        byte[] r1, $r4;
        java.nio.ByteBuffer $r2, $r3;
        boolean $z0;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng;

        $i0 := @parameter0: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

     label1:
        $z0 = virtualinvoke $r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: byte[] seed>;

        $i0 = lengthof r1;

        $i0 = $i0 + 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: byte[] seed>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: int counter>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = lengthof $r4;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i0);

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $i1 = lengthof r1;

        if $i0 >= $i1 goto label3;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, $i0);

     label2:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: int counter>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSignerPrng: int counter> = $i0;

        goto label1;

     label3:
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        goto label2;

     label4:
        r1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        return r1;
    }
