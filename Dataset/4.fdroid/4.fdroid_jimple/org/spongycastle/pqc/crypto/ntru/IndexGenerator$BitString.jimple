org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString extends java.lang.Object
byte[] bytes
int lastByteBits
int numBytes
    public void <init>()
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[4];

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes> = $r1;

        return;
    }
    public void appendBits(byte)
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0;
        byte $b0, $b4;
        int i1, $i2, $i3, $i5;
        byte[] $r1, $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $b0 := @parameter0: byte;

        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $i3 = lengthof $r1;

        if i1 != $i3 goto label1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        i1 = lengthof $r2;

        i1 = i1 * 2;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.ntru.IndexGenerator: byte[] access$000(byte[],int)>($r1, i1);

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes> = $r1;

     label1:
        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        if i1 != 0 goto label2;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes> = 1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $r1[0] = $b0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits> = 8;

        return;

     label2:
        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        if i1 != 8 goto label3;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $i3 = i1 + 1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes> = $i3;

        $r1[i1] = $b0;

        return;

     label3:
        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        i1 = 8 - i1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $i3 = $i3 + -1;

        $b4 = $r1[$i3];

        $i5 = $b0 & 255;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        $i2 = $i5 << $i2;

        $i2 = $b4 | $i2;

        $b4 = (byte) $i2;

        $r1[$i3] = $b4;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $i2 = $i3 + 1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes> = $i2;

        $i2 = $b0 & 255;

        i1 = $i2 >> i1;

        $b0 = (byte) i1;

        $r1[$i3] = $b0;

        return;
    }
    void appendBits(byte[])
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0;
        byte[] $r1;
        int i0, $i1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $r1 := @parameter0: byte[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        $b2 = $r1[i0];

        virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void appendBits(byte)>($b2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public byte[] getBytes()
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public int getLeadingAsInt(int)
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0;
        int $i0, i1, i2, $i4;
        byte[] $r1;
        byte $b3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $i0 := @parameter0: int;

        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        i1 = i1 + -1;

        i2 = i1 * 8;

        i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        i1 = i2 + i1;

        $i0 = i1 - $i0;

        i2 = $i0 / 8;

        i1 = $i0 % 8;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $b3 = $r1[i2];

        $i0 = $b3 & 255;

        $i0 = $i0 >>> i1;

        i1 = 8 - i1;

        i2 = i2 + 1;

     label1:
        $i4 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        if i2 >= $i4 goto label2;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $b3 = $r1[i2];

        $i4 = $b3 & 255;

        $i4 = $i4 << i1;

        $i0 = $i0 | $i4;

        i1 = i1 + 8;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $i0;
    }
    public org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString getTrailing(int)
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString r0, r1;
        int $i0, $i1, $i2;
        byte[] $r2, $r3;
        byte $b3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $i0 := @parameter0: int;

        r1 = new org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        specialinvoke r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void <init>()>();

        $i1 = $i0 + 7;

        $i1 = $i1 / 8;

        r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes> = $i1;

        $i1 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $r2 = newarray (byte)[$i1];

        r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes> = $r2;

        $i1 = 0;

     label1:
        $i2 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        if $i1 >= $i2 goto label2;

        $r2 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $b3 = $r3[$i1];

        $r2[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i0 = $i0 % 8;

        r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits> = $i0;

        $i0 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        if $i0 != 0 goto label3;

        r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits> = 8;

        return r1;

     label3:
        $i0 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int lastByteBits>;

        $i0 = 32 - $i0;

        $r2 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $i1 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $i1 = $i1 + -1;

        $r3 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: byte[] bytes>;

        $i2 = r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int numBytes>;

        $i2 = $i2 + -1;

        $b3 = $r3[$i2];

        $i2 = $b3 << $i0;

        $i0 = $i2 >>> $i0;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        return r1;
    }
