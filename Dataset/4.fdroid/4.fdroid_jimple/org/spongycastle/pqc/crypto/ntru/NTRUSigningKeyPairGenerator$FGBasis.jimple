org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis extends org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial F
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial G
final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator this$0
    void <init>(org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator, org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator $r1;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r2, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r4, $r5, $r6;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r7;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r4 := @parameter3: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r5 := @parameter4: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r6 := @parameter5: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r7 := @parameter6: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator this$0> = $r1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: void <init>(org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters)>($r2, $r3, $r4, $r7);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial F> = $r5;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial G> = $r6;

        return;
    }
    boolean isNormOk()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis r0;
        double d0, $d1;
        int i0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;
        long $l1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        d0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBoundSq>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial F>;

        $l1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: long centeredNormSq(int)>(i0);

        $d1 = (double) $l1;

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label1;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial G>;

        $l1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: long centeredNormSq(int)>(i0);

        $d1 = (double) $l1;

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
