org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters extends org.spongycastle.crypto.KeyGenerationParameters implements java.lang.Cloneable
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439_PROD
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743_PROD
public static final int BASIS_TYPE_STANDARD
public static final int BASIS_TYPE_TRANSPOSE
public static final int KEY_GEN_ALG_FLOAT
public static final int KEY_GEN_ALG_RESULTANT
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157
public static final org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157_PROD
public int B
public int N
public int basisType
double beta
public double betaSq
int bitsF
public int d
public int d1
public int d2
public int d3
public org.spongycastle.crypto.Digest hashAlg
public int keyGenAlg
double keyNormBound
public double keyNormBoundSq
double normBound
public double normBoundSq
public int polyType
public boolean primeCheck
public int q
public int signFailTolerance
public boolean sparse
    static void <clinit>()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r0;
        org.spongycastle.crypto.digests.SHA256Digest $r1;
        org.spongycastle.crypto.digests.SHA512Digest $r2;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(439, 2048, 146, 1, 1, 0.165, 490.0, 280.0, 0, 1, 0, $r1);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439> = $r0;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(439, 2048, 9, 8, 5, 1, 1, 0.165, 490.0, 280.0, 0, 1, 0, $r1);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439_PROD> = $r0;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r2 = new org.spongycastle.crypto.digests.SHA512Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SHA512Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(743, 2048, 248, 1, 1, 0.127, 560.0, 360.0, 1, 0, 0, $r2);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743> = $r0;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r2 = new org.spongycastle.crypto.digests.SHA512Digest;

        specialinvoke $r2.<org.spongycastle.crypto.digests.SHA512Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(743, 2048, 11, 11, 15, 1, 1, 0.127, 560.0, 360.0, 1, 0, 0, $r2);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743_PROD> = $r0;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(157, 256, 29, 1, 1, 0.38, 200.0, 80.0, 0, 0, 0, $r1);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157> = $r0;

        $r0 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r1.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        specialinvoke $r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>(157, 256, 5, 5, 8, 1, 1, 0.38, 200.0, 80.0, 0, 0, 0, $r1);

        <org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157_PROD> = $r0;

        return;
    }
    public void <init>(int, int, int, int, int, double, double, double, boolean, boolean, int, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2;
        boolean $z0, $z1;
        org.spongycastle.crypto.Digest $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $d0 := @parameter5: double;

        $d1 := @parameter6: double;

        $d2 := @parameter7: double;

        $z0 := @parameter8: boolean;

        $z1 := @parameter9: boolean;

        $i5 := @parameter10: int;

        $r1 := @parameter11: org.spongycastle.crypto.Digest;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r2, $i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance> = 100;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF> = 6;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N> = $i0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q> = $i1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d> = $i2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B> = $i3;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType> = $i4;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta> = $d0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound> = $d1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound> = $d2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck> = $z0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse> = $z1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg> = $i5;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType> = 0;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void init()>();

        return;
    }
    public void <init>(int, int, int, int, int, int, int, double, double, double, boolean, boolean, int, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1, $d2;
        boolean $z0, $z1;
        org.spongycastle.crypto.Digest $r1;
        java.security.SecureRandom $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $d0 := @parameter7: double;

        $d1 := @parameter8: double;

        $d2 := @parameter9: double;

        $z0 := @parameter10: boolean;

        $z1 := @parameter11: boolean;

        $i7 := @parameter12: int;

        $r1 := @parameter13: org.spongycastle.crypto.Digest;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r2, $i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance> = 100;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF> = 6;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N> = $i0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q> = $i1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1> = $i2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2> = $i3;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3> = $i4;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B> = $i5;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType> = $i6;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta> = $d0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound> = $d1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound> = $d2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck> = $z0;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse> = $z1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg> = $i7;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType> = 1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void init()>();

        return;
    }
    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        java.io.InputStream $r1;
        java.io.DataInputStream r2;
        java.security.SecureRandom $r3;
        int $i0;
        double $d0;
        boolean $z0;
        java.lang.String $r4, $r5;
        org.spongycastle.crypto.digests.SHA512Digest $r6;
        org.spongycastle.crypto.digests.SHA256Digest $r7;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 := @parameter0: java.io.InputStream;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<org.spongycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r3, 0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance> = 100;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF> = 6;

        r2 = new java.io.DataInputStream;

        specialinvoke r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType> = $i0;

        $d0 = virtualinvoke r2.<java.io.DataInputStream: double readDouble()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta> = $d0;

        $d0 = virtualinvoke r2.<java.io.DataInputStream: double readDouble()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound> = $d0;

        $d0 = virtualinvoke r2.<java.io.DataInputStream: double readDouble()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound> = $d0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance> = $i0;

        $z0 = virtualinvoke r2.<java.io.DataInputStream: boolean readBoolean()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck> = $z0;

        $z0 = virtualinvoke r2.<java.io.DataInputStream: boolean readBoolean()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse> = $z0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF> = $i0;

        $i0 = virtualinvoke r2.<java.io.DataInputStream: int read()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg> = $i0;

        $r4 = virtualinvoke r2.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r5 = "SHA-512";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r6 = new org.spongycastle.crypto.digests.SHA512Digest;

        specialinvoke $r6.<org.spongycastle.crypto.digests.SHA512Digest: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg> = $r6;

     label1:
        $i0 = virtualinvoke r2.<java.io.DataInputStream: int read()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType> = $i0;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void init()>();

        return;

     label2:
        $r5 = "SHA-256";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r7 = new org.spongycastle.crypto.digests.SHA256Digest;

        specialinvoke $r7.<org.spongycastle.crypto.digests.SHA256Digest: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg> = $r7;

        goto label1;
    }
    private void init()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        double $d0, $d1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $d0 = $d0 * $d1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double betaSq> = $d0;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $d0 = $d0 * $d1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBoundSq> = $d0;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $d0 = $d0 * $d1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBoundSq> = $d0;

        return;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        r0 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters clone()>();

        return r0;
    }
    public org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters clone()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        double $d0, $d1, $d2;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i0 != 0 goto label1;

        $r1 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $i4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $d2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $z1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        $i5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>($i0, $i1, $i2, $i3, $i4, $d0, $d1, $d2, $z1, $z0, $i5, $r2);

        return $r1;

     label1:
        $r1 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        $i4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        $i5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        $i6 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $d2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        $z1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        $i7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: void <init>(int,int,int,int,int,int,int,double,double,double,boolean,boolean,int,org.spongycastle.crypto.Digest)>($i1, $i2, $i3, $i4, $i5, $i6, $i0, $d0, $d1, $d2, $z0, $z1, $i7, $r2);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0, r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        double $d0;
        long $l2, $l3;
        byte $b4;
        org.spongycastle.crypto.Digest $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        if $r1 != null goto label02;

        return 0;

     label02:
        $z0 = $r1 instanceof org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        if $z0 != 0 goto label03;

        return 0;

     label03:
        r2 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters) $r1;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        if $i0 == $i1 goto label04;

        return 0;

     label04:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        if $i0 == $i1 goto label05;

        return 0;

     label05:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        if $i0 == $i1 goto label06;

        return 0;

     label06:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label07;

        return 0;

     label07:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double betaSq>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double betaSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label08;

        return 0;

     label08:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF>;

        if $i0 == $i1 goto label09;

        return 0;

     label09:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        if $i0 == $i1 goto label10;

        return 0;

     label10:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        if $i0 == $i1 goto label11;

        return 0;

     label11:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        if $i0 == $i1 goto label12;

        return 0;

     label12:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        if $i0 == $i1 goto label13;

        return 0;

     label13:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        if $r3 != null goto label14;

        $r3 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        if $r3 == null goto label15;

        return 0;

     label14:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        $r4 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $r3 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        $r5 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label15;

        return 0;

     label15:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        if $i0 == $i1 goto label16;

        return 0;

     label16:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label17;

        return 0;

     label17:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBoundSq>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBoundSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label18;

        return 0;

     label18:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label19;

        return 0;

     label19:
        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBoundSq>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBoundSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label20;

        return 0;

     label20:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i0 == $i1 goto label21;

        return 0;

     label21:
        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        $z1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        if $z0 == $z1 goto label22;

        return 0;

     label22:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        if $i0 == $i1 goto label23;

        return 0;

     label23:
        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance>;

        $i1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance>;

        if $i0 == $i1 goto label24;

        return 0;

     label24:
        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        $z1 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        if $z0 == $z1 goto label25;

        return 0;

     label25:
        return 1;
    }
    public org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters getSigningParameters()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r1;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1;
        org.spongycastle.crypto.Digest $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $d1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: void <init>(int,int,int,int,double,double,org.spongycastle.crypto.Digest)>($i0, $i1, $i2, $i3, $d0, $d1, $r2);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        short $s0, $s5;
        int $i1, $i2;
        double $d0;
        long $l3, $l4;
        org.spongycastle.crypto.Digest $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $s0 = 1231;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $i1 = $i1 + 31;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double betaSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        if $r1 != null goto label4;

        $i2 = 0;

     label1:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBoundSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBoundSq>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = $i1 * 31;

        $l4 = $l3 >>> 32;

        $l3 = $l4 ^ $l3;

        $i2 = (int) $l3;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        if $z0 == 0 goto label5;

        $s5 = 1231;

     label2:
        $i1 = $i1 + $s5;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        if $z0 == 0 goto label6;

     label3:
        $i1 = $i1 + $s0;

        return $i1;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        $r2 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        $i2 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        goto label1;

     label5:
        $s5 = 1237;

        goto label2;

     label6:
        $s0 = 1237;

        goto label3;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        java.text.DecimalFormat r1;
        java.lang.StringBuilder r2, $r3;
        int $i0;
        java.lang.String $r4;
        double $d0;
        boolean $z0;
        org.spongycastle.crypto.Digest $r5;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        r1 = new java.text.DecimalFormat;

        specialinvoke r1.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.00");

        r2 = new java.lang.StringBuilder;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SignatureParameters(N=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" q=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i0 != 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" polyType=SIMPLE d=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" B=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" basisType=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" beta=");

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        $r4 = virtualinvoke r1.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" normBound=");

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        $r4 = virtualinvoke r1.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyNormBound=");

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        $r4 = virtualinvoke r1.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" prime=");

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sparse=");

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyGenAlg=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hashAlg=");

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" polyType=PRODUCT d1=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" d2=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" d3=");

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label1;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters r0;
        java.io.OutputStream $r1;
        java.io.DataOutputStream r2;
        java.lang.String $r3;
        int $i0;
        double $d0;
        boolean $z0;
        org.spongycastle.crypto.Digest $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $r1 := @parameter0: java.io.OutputStream;

        r2 = new java.io.DataOutputStream;

        specialinvoke r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double beta>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double normBound>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        $d0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: double keyNormBound>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int signFailTolerance>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>($z0);

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>($z0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int bitsF>;

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        virtualinvoke r2.<java.io.DataOutputStream: void write(int)>($i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.crypto.Digest hashAlg>;

        $r3 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: java.lang.String getAlgorithmName()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r3);

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        virtualinvoke r2.<java.io.DataOutputStream: void write(int)>($i0);

        return;
    }
