org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params
    public void <init>()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r1, r2, $r5, $r9, $r12, $r21, $r22;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r3;
        boolean $z0, $z1;
        java.lang.Object r4, r11, $r16;
        org.spongycastle.pqc.math.ntru.polynomial.ModularResultant $r6;
        java.math.BigInteger $r7, $r8;
        org.spongycastle.pqc.math.ntru.polynomial.Resultant $r10, $r13;
        org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean $r14;
        org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial $r15, $r17, $r23, $r24;
        long $l9;
        int[] $r18, $r19, $r20;
        org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial $r25, $r26;
        java.security.SecureRandom $r27;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis $r28;
        java.math.BigDecimal $r29;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r30, $r31;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i5 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i6 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i1 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i2 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i3 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i7 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        i4 = i0 * 2;

        i4 = i4 + 1;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $z0 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean primeCheck>;

     label01:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i8 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i8 != 0 goto label08;

        $i8 = $i6 + 1;

        $r27 = new java.security.SecureRandom;

        specialinvoke $r27.<java.security.SecureRandom: void <init>()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>(i0, $i8, $i6, $r27);

     label02:
        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        $r5 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        if $z0 == 0 goto label03;

        $r6 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant resultant(int)>(i4);

        $r7 = $r6.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger res>;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label01;

     label03:
        $r9 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int)>($i5);

        if $r9 == null goto label01;

        $r10 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.Resultant resultant()>();

     label04:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i8 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i8 != 0 goto label09;

        $i8 = $i6 + 1;

        $r27 = new java.security.SecureRandom;

        specialinvoke $r27.<java.security.SecureRandom: void <init>()>();

        r11 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>(i0, $i8, $i6, $r27);

     label05:
        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r11;

        $r12 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        if $z0 == 0 goto label06;

        $r6 = virtualinvoke $r12.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ModularResultant resultant(int)>(i4);

        $r7 = $r6.<org.spongycastle.pqc.math.ntru.polynomial.ModularResultant: java.math.BigInteger res>;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label04;

     label06:
        r1 = virtualinvoke $r12.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int)>($i5);

        if r1 == null goto label04;

        $r13 = virtualinvoke $r12.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.Resultant resultant()>();

        $r7 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: java.math.BigInteger res>;

        $r8 = $r13.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: java.math.BigInteger res>;

        $r14 = staticinvoke <org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean calculate(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        $r7 = $r14.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger gcd>;

        $r8 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label04;

        $r15 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r16 = virtualinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r15 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r16;

        $r7 = $r14.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger x>;

        $l9 = (long) $i5;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        virtualinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mult(java.math.BigInteger)>($r7);

        $r17 = $r13.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r16 = virtualinvoke $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r17 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r16;

        $r7 = $r14.<org.spongycastle.pqc.math.ntru.euclid.BigIntEuclidean: java.math.BigInteger y>;

        i1 = neg $i5;

        $l9 = (long) i1;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        virtualinvoke $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void mult(java.math.BigInteger)>($r7);

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i1 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int keyGenAlg>;

        if i1 != 0 goto label13;

        $r18 = newarray (int)[i0];

        $r19 = newarray (int)[i0];

        $r20 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = $r20[0];

        $r18[0] = i1;

        $r20 = $r12.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = $r20[0];

        $r19[0] = i1;

        i1 = 1;

     label07:
        if i1 >= i0 goto label10;

        $r20 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = i0 - i1;

        i2 = $r20[i2];

        $r18[i1] = i2;

        $r20 = $r12.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = i0 - i1;

        i2 = $r20[i2];

        $r19[i1] = i2;

        i1 = i1 + 1;

        goto label07;

     label08:
        $i8 = i3 + 1;

        $r27 = new java.security.SecureRandom;

        specialinvoke $r27.<java.security.SecureRandom: void <init>()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int,int,int,int,int,java.security.SecureRandom)>(i0, i1, i2, $i8, i3, $r27);

        goto label02;

     label09:
        $i8 = i3 + 1;

        $r27 = new java.security.SecureRandom;

        specialinvoke $r27.<java.security.SecureRandom: void <init>()>();

        r11 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int,int,int,int,int,java.security.SecureRandom)>(i0, i1, i2, $i8, i3, $r27);

        goto label05;

     label10:
        r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r1 = r2;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r18);

        $r21 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = $r21;

        specialinvoke $r21.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int[])>($r19);

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        $r21 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r1);

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r11;

        $r22 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r2);

        virtualinvoke $r21.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r22);

        $r10 = virtualinvoke $r21.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.Resultant resultant()>();

        $r23 = virtualinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r17);

        $r24 = virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r15);

        virtualinvoke $r23.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r24);

        $r24 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r24 = virtualinvoke $r23.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r24);

        $r23 = $r24;

        $r7 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: java.math.BigInteger res>;

        virtualinvoke $r24.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void div(java.math.BigInteger)>($r7);

     label11:
        $r16 = virtualinvoke $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r17 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r16;

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        $r24 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r23);

        virtualinvoke $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r24);

        $r16 = virtualinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: java.lang.Object clone()>();

        $r15 = (org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial) $r16;

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r11;

        $r23 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r23);

        virtualinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r23);

        r2 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r1 = r2;

        specialinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r17);

        $r21 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = $r21;

        specialinvoke $r21.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r15);

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: void minimizeFG(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r5, $r12, r1, $r21, i0);

        if $i7 != 0 goto label16;

        $r16 = r1;

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r11;

        $r5 = interfaceinvoke $r30.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r9, $i5);

     label12:
        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>($i5);

        $r28 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $r30 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        $r31 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) $r16;

        specialinvoke $r28.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: void <init>(org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters)>(r0, $r30, $r31, $r5, r1, r2, $r3);

        return $r28;

     label13:
        i1 = 0;

        i2 = 1;

     label14:
        if i2 >= i0 goto label15;

        i1 = i1 + 1;

        i2 = i2 * 10;

        goto label14;

     label15:
        $r23 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r29 = new java.math.BigDecimal;

        $r7 = $r10.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: java.math.BigInteger res>;

        specialinvoke $r29.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r7);

        i2 = virtualinvoke $r17.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: int getMaxCoeffLength()>();

        i2 = i2 + 1;

        i2 = i2 + i1;

        $r25 = virtualinvoke $r23.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial div(java.math.BigDecimal,int)>($r29, i2);

        $r23 = $r13.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho>;

        $r29 = new java.math.BigDecimal;

        $r7 = $r13.<org.spongycastle.pqc.math.ntru.polynomial.Resultant: java.math.BigInteger res>;

        specialinvoke $r29.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r7);

        i2 = virtualinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: int getMaxCoeffLength()>();

        i2 = i2 + 1;

        i1 = i2 + i1;

        $r26 = virtualinvoke $r23.<org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial div(java.math.BigDecimal,int)>($r29, i1);

        $r25 = virtualinvoke $r25.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r17);

        $r26 = virtualinvoke $r26.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial)>($r15);

        virtualinvoke $r25.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial)>($r26);

        virtualinvoke $r25.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: void halve()>();

        $r23 = virtualinvoke $r25.<org.spongycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial: org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial round()>();

        goto label11;

     label16:
        $r16 = r11;

        $r5 = virtualinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r9, $i5);

        goto label12;
    }
    private void minimizeFG(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r2, $r3, $r4, r7, r8;
        int $i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        int[] $r5;
        java.lang.Object $r6;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 := @parameter3: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $i0 := @parameter4: int;

        i3 = 0;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $i5 = $i0 * 2;

        $r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i6 = $r5[i4];

        $r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i7 = $r5[i4];

        $i6 = $i6 * $i7;

        $r5 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i7 = $r5[i4];

        $r5 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = $r5[i4];

        $i7 = $i7 * i2;

        $i6 = $i6 + $i7;

        $i5 = $i5 * $i6;

        i3 = i3 + $i5;

        i4 = i4 + 1;

        goto label1;

     label2:
        i3 = i3 + -4;

        $r6 = virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r7 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r6;

        $r6 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r8 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r6;

        i4 = 0;

        $i5 = 0;

     label3:
        if $i5 >= $i0 goto label8;

        if i4 >= $i0 goto label8;

        $i6 = 0;

        $i7 = 0;

     label4:
        if $i7 >= $i0 goto label5;

        $r5 = $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = $r5[$i7];

        $r5 = $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i8 = $r5[$i7];

        i2 = i2 * $i8;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i8 = $r5[$i7];

        $r5 = $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i1 = $r5[$i7];

        i1 = $i8 * i1;

        $i8 = $i0 * 4;

        i2 = i2 + i1;

        i2 = $i8 * i2;

        $i6 = $i6 + i2;

        $i7 = $i7 + 1;

        goto label4;

     label5:
        $i7 = virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int sumCoeffs()>();

        i2 = virtualinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int sumCoeffs()>();

        $i7 = $i7 + i2;

        $i7 = $i7 * 4;

        $i6 = $i6 - $i7;

        if $i6 <= i3 goto label7;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r7);

        virtualinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r8);

        $i5 = $i5 + 1;

        i4 = 0;

     label6:
        i4 = i4 + 1;

        virtualinvoke r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void rotate1()>();

        virtualinvoke r8.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void rotate1()>();

        goto label3;

     label7:
        $i7 = neg i3;

        if $i6 >= $i7 goto label6;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r7);

        virtualinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r8);

        $i5 = $i5 + 1;

        i4 = 0;

        goto label6;

     label8:
        return;
    }
    public org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis generateBoundedBasis()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis $r1;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

     label1:
        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis()>();

        $z0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis: boolean isNormOk()>();

        if $z0 == 0 goto label1;

        return $r1;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        java.util.ArrayList r1, r2;
        java.lang.Exception r3;
        org.spongycastle.crypto.AsymmetricCipherKeyPair r4;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters r5;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r6;
        java.util.concurrent.ExecutorService $r7;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r8;
        int i0, $i1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$BasisGenerationTask $r9;
        java.util.concurrent.Future $r10;
        java.lang.Object $r11;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis $r12;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r13;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r14;
        java.lang.IllegalStateException $r15;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        r6 = null;

        $r7 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

     label1:
        if i0 < 0 goto label2;

        $r9 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$BasisGenerationTask;

        specialinvoke $r9.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$BasisGenerationTask: void <init>(org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator,org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$1)>(r0, null);

        $r10 = interfaceinvoke $r7.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r9);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        i0 = i0 + -1;

        goto label1;

     label2:
        interfaceinvoke $r7.<java.util.concurrent.ExecutorService: void shutdown()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

     label3:
        if i0 < 0 goto label9;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (java.util.concurrent.Future) $r11;

     label4:
        $r11 = interfaceinvoke $r10.<java.util.concurrent.Future: java.lang.Object get()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i1 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

     label5:
        if i0 != $i1 goto label7;

        r6 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

     label6:
        $r11 = interfaceinvoke $r10.<java.util.concurrent.Future: java.lang.Object get()>();

        $r12 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis) $r11;

        $r13 = $r12.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $r14 = virtualinvoke $r8.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters getSigningParameters()>();

        specialinvoke r6.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters)>($r13, $r14);

     label7:
        i0 = i0 + -1;

        goto label3;

     label8:
        r3 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r15;

     label9:
        r5 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters;

        specialinvoke r5.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: void <init>(java.util.List,org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters)>(r2, r6);

        r4 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke r4.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r6, r5);

        return r4;

        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPairSingleThread()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        java.util.ArrayList r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r4;
        int i0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis $r5;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r6;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r7;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r8;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r3 = null;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int B>;

     label1:
        if i0 < 0 goto label3;

        $r5 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis generateBoundedBasis()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        if i0 != 0 goto label2;

        r3 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r6 = $r5.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $r7 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters getSigningParameters()>();

        specialinvoke r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters)>($r6, $r7);

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        r2 = new org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters;

        specialinvoke r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters: void <init>(java.util.List,org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters)>(r1, r3);

        $r8 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r8.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r3, r2);

        return $r8;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters) $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params> = $r2;

        return;
    }
