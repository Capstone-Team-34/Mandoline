org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis extends java.lang.Object
public org.spongycastle.pqc.math.ntru.polynomial.Polynomial f
public org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h
org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params
    void <init>(java.io.InputStream, org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters, boolean) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0;
        java.io.InputStream $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r2;
        boolean $z0, z1;
        int i0, i1, i2, i3, i4, $i5;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r3;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r4;
        int[] $r5;
        java.lang.Object $r6;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial $r7;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r8;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r9;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int N>;

        i4 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        i1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d1>;

        i2 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d2>;

        i3 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int d3>;

        z1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean sparse>;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params> = $r2;

        $i5 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i5 != 1 goto label03;

        $i5 = i3 + 1;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream,int,int,int,int,int)>($r1, i0, i1, i2, $i5, i3);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f> = $r3;

     label01:
        $i5 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        if $i5 != 0 goto label08;

        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int)>($r1, i0, i4);

        i1 = 0;

     label02:
        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = lengthof $r5;

        if i1 >= i2 goto label06;

        $r5 = $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        i2 = $r5[i1];

        i3 = i4 / 2;

        i2 = i2 - i3;

        $r5[i1] = i2;

        i1 = i1 + 1;

        goto label02;

     label03:
        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(java.io.InputStream,int)>($r1, i0);

        if z1 == 0 goto label05;

        $r7 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r6 = $r7;

        specialinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r4);

     label04:
        $r9 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) $r6;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f> = $r9;

        goto label01;

     label05:
        $r8 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        $r6 = $r8;

        specialinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r4);

        goto label04;

     label06:
        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime> = $r4;

     label07:
        if $z0 == 0 goto label10;

        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int)>($r1, i0, i4);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r4;

        return;

     label08:
        $i5 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int polyType>;

        if $i5 != 1 goto label09;

        $i5 = i3 + 1;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream,int,int,int,int,int)>($r1, i0, i1, i2, $i5, i3);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime> = $r3;

        goto label07;

     label09:
        $r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(java.io.InputStream,int)>($r1, i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime> = $r4;

        goto label07;

     label10:
        return;
    }
    protected void <init>(org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r1, $r2;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 := @parameter3: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime> = $r2;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r3;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params> = $r4;

        return;
    }
    private byte[] getEncoded(org.spongycastle.pqc.math.ntru.polynomial.Polynomial)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial r1;
        boolean $z0;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial r2;
        byte[] $r3;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $z0 = r1 instanceof org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: byte[] toBinary()>();

        return $r3;

     label1:
        $r4 = interfaceinvoke r1.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        $r3 = virtualinvoke $r4.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary3Tight()>();

        return $r3;
    }
    void encode(java.io.OutputStream, boolean) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0;
        java.io.OutputStream $r1;
        boolean $z0;
        int i0, $i1, $i2, $i3;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r2;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r3;
        byte[] $r4;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r5;
        int[] $r6;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        $r1 := @parameter0: java.io.OutputStream;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int q>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: byte[] getEncoded(org.spongycastle.pqc.math.ntru.polynomial.Polynomial)>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i2 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int basisType>;

        if $i2 != 0 goto label4;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $r5 = interfaceinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        $i2 = 0;

     label1:
        $r6 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i1 = lengthof $r6;

        if $i2 >= $i1 goto label2;

        $r6 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i3 = $r6[$i2];

        $i1 = i0 / 2;

        $i1 = $i3 + $i1;

        $r6[$i2] = $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>(i0);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

     label3:
        if $z0 == 0 goto label5;

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r4 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>(i0);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        return;

     label4:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: byte[] getEncoded(org.spongycastle.pqc.math.ntru.polynomial.Polynomial)>($r3);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        goto label3;

     label5:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r3, $r4;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r5, $r6;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r7, $r8;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        if $r1 != null goto label02;

        return 0;

     label02:
        $z0 = $r1 instanceof org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        if $z0 != 0 goto label03;

        return 0;

     label03:
        r2 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis) $r1;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        if $r3 != null goto label04;

        $r3 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        if $r3 == null goto label05;

        return 0;

     label04:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $r4 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label05;

        return 0;

     label05:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        if $r3 != null goto label06;

        $r3 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        if $r3 == null goto label07;

        return 0;

     label06:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $r4 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label07;

        return 0;

     label07:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r5 != null goto label08;

        $r5 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r5 == null goto label09;

        return 0;

     label08:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r6 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label09;

        return 0;

     label09:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        if $r7 != null goto label10;

        $r7 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        if $r7 == null goto label11;

        return 0;

     label10:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $r8 = r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $z0 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        return 1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis r0;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis;

        $i0 = 0;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        if $r1 != null goto label5;

        $i1 = 0;

     label1:
        $i1 = $i1 + 31;

        $i1 = $i1 * 31;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        if $r1 != null goto label6;

        $i2 = 0;

     label2:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r2 != null goto label7;

        $i2 = 0;

     label3:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        if $r3 != null goto label8;

     label4:
        $i0 = $i1 + $i0;

        return $i0;

     label5:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial f>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label1;

     label6:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.Polynomial fPrime>;

        $i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label7:
        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label3;

     label8:
        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis: org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params>;

        $i0 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters: int hashCode()>();

        goto label4;
    }
