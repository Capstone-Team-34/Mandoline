org.spongycastle.pqc.crypto.ntru.IndexGenerator extends java.lang.Object
private int N
private org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf
private int c
private int counter
private int hLen
private org.spongycastle.crypto.Digest hashAlg
private boolean initialized
private int minCallsR
private int remLen
private byte[] seed
private int totLen
    void <init>(byte[], org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator r0;
        byte[] $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r2;
        int $i0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: byte[] seed> = $r1;

        $i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int N> = $i0;

        $i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int c>;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c> = $i0;

        $i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int minCallsR>;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int minCallsR> = $i0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int totLen> = 0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen> = 0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter> = 0;

        $r3 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: org.spongycastle.crypto.Digest hashAlg>;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg> = $r3;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen> = $i0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: boolean initialized> = 0;

        return;
    }
    static byte[] access$000(byte[], int)
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r0 = staticinvoke <org.spongycastle.pqc.crypto.ntru.IndexGenerator: byte[] copyOf(byte[],int)>($r0, $i0);

        return $r0;
    }
    private void appendHash(org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString, byte[])
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator r0;
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString $r1;
        byte[] $r2, $r4, $r5;
        org.spongycastle.crypto.Digest $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        $r2 := @parameter1: byte[];

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: byte[] seed>;

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: byte[] seed>;

        $i0 = lengthof $r5;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i0);

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        $i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: void putInt(org.spongycastle.crypto.Digest,int)>($r3, $i0);

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void appendBits(byte[])>($r2);

        return;
    }
    private static byte[] copyOf(byte[], int)
    {
        byte[] $r0, r1;
        int $i0, i1;

        $r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        r1 = newarray (byte)[i1];

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i1);

        return r1;

     label2:
        i1 = lengthof $r0;

        goto label1;
    }
    private void putInt(org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $i1 = $i0 >> 24;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $i1 = $i0 >> 16;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $i1 = $i0 >> 8;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $b2 = (byte) $i0;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        return;
    }
    int nextIndex()
    {
        org.spongycastle.pqc.crypto.ntru.IndexGenerator r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString $r1, $r4;
        org.spongycastle.crypto.Digest $r2;
        byte[] r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: boolean initialized>;

        if $z0 != 0 goto label3;

        $r1 = new org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf> = $r1;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        $i1 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i1];

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int minCallsR>;

        if $i1 >= i0 goto label2;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf>;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: void appendHash(org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString,byte[])>($r1, r3);

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter> = $i1;

        goto label1;

     label2:
        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int minCallsR>;

        $i1 = $i1 * 8;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        $i1 = $i1 * i0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int totLen> = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int totLen>;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen> = $i1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: boolean initialized> = 1;

     label3:
        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int totLen>;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        $i1 = $i1 + i0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int totLen> = $i1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf>;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen>;

        $r1 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString getTrailing(int)>($i1);

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen>;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        if $i1 >= i0 goto label7;

        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen>;

        $i1 = $i1 - i0;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        $i2 = $i2 + $i1;

        $i2 = $i2 + -1;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        $i2 = $i2 / $i3;

        i0 = i0 + $i2;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.crypto.Digest hashAlg>;

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i2];

     label4:
        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        if $i2 >= i0 goto label5;

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: void appendHash(org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString,byte[])>($r1, r3);

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter>;

        $i2 = $i2 + 1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int counter> = $i2;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        $i2 = $i2 * 8;

        if $i1 <= $i2 goto label4;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        $i2 = $i2 * 8;

        $i1 = $i1 - $i2;

        goto label4;

     label5:
        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int hLen>;

        i0 = i0 * 8;

        $i1 = i0 - $i1;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen> = $i1;

        $r4 = new org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString;

        specialinvoke $r4.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf> = $r4;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString buf>;

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: void appendBits(byte[])>(r3);

     label6:
        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        $i1 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator$BitString: int getLeadingAsInt(int)>($i1);

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        i0 = 1 << i0;

        $i2 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        $i2 = 1 << $i2;

        $i3 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int N>;

        $i2 = $i2 % $i3;

        i0 = i0 - $i2;

        if $i1 >= i0 goto label3;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int N>;

        $i1 = $i1 % i0;

        return $i1;

     label7:
        $i1 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen>;

        i0 = r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int c>;

        $i1 = $i1 - i0;

        r0.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int remLen> = $i1;

        goto label6;
    }
