org.spongycastle.pqc.crypto.ntru.NTRUEngine extends java.lang.Object implements org.spongycastle.crypto.AsymmetricBlockCipher
private boolean forEncryption
private org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params
private org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters privKey
private org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey
private java.security.SecureRandom random
    public void <init>()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[], int, int, boolean)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, r5, $r6;
        int $i0, $i1, i2, $i3, $i4, $i5, i7, $i8;
        boolean $z0;
        org.spongycastle.crypto.Digest r2;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r3;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r4;
        byte $b6;
        int[] $r7;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        r2 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: org.spongycastle.crypto.Digest hashAlg>;

        $i3 = interfaceinvoke r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i4 = $i1 * $i3;

        r5 = newarray (byte)[$i4];

        if $z0 == 0 goto label03;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] calcHash(org.spongycastle.crypto.Digest,byte[])>(r2, $r1);

     label01:
        $i4 = 0;

     label02:
        if $i4 >= $i1 goto label04;

        $i5 = lengthof $r1;

        interfaceinvoke r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i5);

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: void putInt(org.spongycastle.crypto.Digest,int)>(r2, $i4);

        $r6 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] calcHash(org.spongycastle.crypto.Digest)>(r2);

        $i5 = $i4 * $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, $i5, $i3);

        $i4 = $i4 + 1;

        goto label02;

     label03:
        goto label01;

     label04:
        r3 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        specialinvoke r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>($i0);

     label05:
        $i1 = 0;

        $i3 = 0;

     label06:
        $i5 = lengthof r5;

        if $i3 == $i5 goto label12;

        $b6 = r5[$i3];

        i7 = $b6 & 255;

        if i7 < 243 goto label08;

     label07:
        $i3 = $i3 + 1;

        goto label06;

     label08:
        $i5 = 0;

     label09:
        if $i5 >= 4 goto label11;

        i2 = i7 % 3;

        $r7 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i8 = i2 + -1;

        $r7[$i1] = $i8;

        $i1 = $i1 + 1;

        if $i1 != $i0 goto label10;

        return r3;

     label10:
        i2 = i7 - i2;

        i7 = i2 / 3;

        $i5 = $i5 + 1;

        goto label09;

     label11:
        $r7 = r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i5 = i7 + -1;

        $r7[$i1] = $i5;

        $i1 = $i1 + 1;

        if $i1 != $i0 goto label07;

        return r3;

     label12:
        if $i1 >= $i0 goto label13;

        $i1 = lengthof $r1;

        interfaceinvoke r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i1);

        specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: void putInt(org.spongycastle.crypto.Digest,int)>(r2, $i4);

        r5 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] calcHash(org.spongycastle.crypto.Digest)>(r2);

        $i4 = $i4 + 1;

        goto label05;

     label13:
        return r3;
    }
    private byte[] buildSData(byte[], byte[], int, byte[], byte[])
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, $r2, $r3, $r4, r5;
        int $i0, $i1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        $i1 = lengthof $r1;

        $i0 = $i1 + $i0;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r4;

        $i0 = $i0 + $i1;

        r5 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r5, 0, $i0);

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r5, $i0, $i1);

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r5, $i0, $i1);

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r3;

        $i0 = $i0 + $i1;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, $i0, $i1);

        return r5;
    }
    private byte[] calcHash(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        return r2;
    }
    private byte[] calcHash(org.spongycastle.crypto.Digest, byte[])
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.crypto.Digest $r1;
        byte[] $r2, r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[];

        $i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $i0 = lengthof $r2;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        return r3;
    }
    private byte[] copyOf(byte[], int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, r2;
        int $i0, i1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        r2 = newarray (byte)[i1];

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, i1);

        return r2;

     label2:
        i1 = lengthof $r1;

        goto label1;
    }
    private byte[] decrypt(byte[], org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, r3, r4, $r14, $r17;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r5;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r6, $r7, $r10, r13;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r8;
        boolean $z0;
        org.spongycastle.crypto.DataLengthException $r9;
        org.spongycastle.crypto.InvalidCipherTextException $r11;
        java.lang.Object $r12;
        byte $b8;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r5 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.Polynomial t>;

        $r6 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp>;

        $r7 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i2 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i1 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int db>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i3 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int maxMsgLenBytes>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i4 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dm0>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i5 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int pkLen>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i6 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int minCallsMask>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean hashSeed>;

        $r8 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        r3 = $r8.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: byte[] oid>;

        if $i3 <= 255 goto label1;

        $r9 = new org.spongycastle.crypto.DataLengthException;

        specialinvoke $r9.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>("maxMsgLenBytes values bigger than 255 are not supported");

        throw $r9;

     label1:
        i1 = i1 / 8;

        $r10 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(byte[],int,int)>($r1, i0, $i2);

        $r6 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r10, $r5, $r6);

        $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(-1);

        if $i7 >= $i4 goto label2;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Less than dm0 coefficients equal -1");

        throw $r11;

     label2:
        $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(0);

        if $i7 >= $i4 goto label3;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Less than dm0 coefficients equal 0");

        throw $r11;

     label3:
        $i7 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(1);

        if $i7 >= $i4 goto label4;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Less than dm0 coefficients equal 1");

        throw $r11;

     label4:
        $r12 = virtualinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        $r10 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r12;

        virtualinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r6);

        virtualinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>($i2);

        $r12 = virtualinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r13 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r12;

        virtualinvoke r13.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(4);

        $r1 = virtualinvoke r13.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>(4);

        r13 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean)>($r1, i0, $i6, $z0);

        virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void sub(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r13);

        virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod3()>();

        $r14 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary3Sves()>();

        r4 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r4, 0, i1);

        $b8 = $r14[i1];

        i0 = $b8 & 255;

        if i0 <= $i3 goto label5;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message too long: ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label5:
        $r1 = newarray (byte)[i0];

        $i3 = i1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i3, $r1, 0, i0);

        $i3 = lengthof $r14;

        $i4 = i1 + 1;

        $i4 = $i4 + i0;

        $i3 = $i3 - $i4;

        $r17 = newarray (byte)[$i3];

        i1 = i1 + 1;

        i1 = i1 + i0;

        $i3 = lengthof $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, i1, $r17, 0, $i3);

        i1 = lengthof $r17;

        $r14 = newarray (byte)[i1];

        $z0 = staticinvoke <org.spongycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r17, $r14);

        if $z0 != 0 goto label6;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("The message is not followed by zeroes");

        throw $r11;

     label6:
        $r17 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i2);

        $i5 = $i5 / 8;

        $r17 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] copyOf(byte[],int)>($r17, $i5);

        r3 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] buildSData(byte[],byte[],int,byte[],byte[])>(r3, $r1, i0, r4, $r17);

        $r5 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[])>(r3, $r1);

        $r7 = interfaceinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r7);

        virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>($i2);

        $z0 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label7;

        $r11 = new org.spongycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.spongycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Invalid message encoding");

        throw $r11;

     label7:
        return $r1;
    }
    private byte[] encrypt(byte[], org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, r3, r4, r5, $r13;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r6, $r14, $r16, r18;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        org.spongycastle.crypto.DataLengthException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        java.security.SecureRandom $r12;
        byte $b10;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r15;
        java.lang.Object $r17;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters;

        $r6 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i1 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i3 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i4 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int maxMsgLenBytes>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i5 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int db>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i2 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int bufferLenBits>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i6 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dm0>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i7 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int pkLen>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i8 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int minCallsMask>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean hashSeed>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        r3 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: byte[] oid>;

        i0 = lengthof $r1;

        if $i4 <= 255 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("llen values bigger than 1 are not supported");

        throw $r8;

     label1:
        if i0 <= $i4 goto label2;

        $r9 = new org.spongycastle.crypto.DataLengthException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message too long: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.spongycastle.crypto.DataLengthException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label2:
        $i9 = $i5 / 8;

        r4 = newarray (byte)[$i9];

        $r12 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: java.security.SecureRandom random>;

        virtualinvoke $r12.<java.security.SecureRandom: void nextBytes(byte[])>(r4);

        $i9 = $i4 + 1;

        $i9 = $i9 - i0;

        $r13 = newarray (byte)[$i9];

        $i9 = i2 / 8;

        r5 = newarray (byte)[$i9];

        $i9 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i9);

        $i9 = lengthof r4;

        $b10 = (byte) i0;

        r5[$i9] = $b10;

        $i9 = lengthof r4;

        $i9 = $i9 + 1;

        $i11 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r5, $i9, $i11);

        $i9 = lengthof r4;

        $i9 = $i9 + 1;

        $i11 = lengthof $r1;

        $i9 = $i9 + $i11;

        $i11 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r5, $i9, $i11);

        $r14 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Sves(byte[],int)>(r5, i1);

        $r13 = virtualinvoke $r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i3);

        $i9 = $i7 / 8;

        $r13 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] copyOf(byte[],int)>($r13, $i9);

        r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] buildSData(byte[],byte[],int,byte[],byte[])>(r3, $r1, i0, r4, $r13);

        $r15 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[])>(r4, r5);

        $r16 = interfaceinvoke $r15.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r6, $i3);

        $r17 = virtualinvoke $r16.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: java.lang.Object clone()>();

        r18 = (org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial) $r17;

        virtualinvoke r18.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void modPositive(int)>(4);

        r5 = virtualinvoke r18.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>(4);

        r18 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean)>(r5, i1, $i8, $z0);

        virtualinvoke $r14.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r18);

        virtualinvoke $r14.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod3()>();

        $i9 = virtualinvoke $r14.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(-1);

        if $i9 < $i6 goto label2;

        $i9 = virtualinvoke $r14.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(0);

        if $i9 < $i6 goto label2;

        $i9 = virtualinvoke $r14.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int count(int)>(1);

        if $i9 < $i6 goto label2;

        virtualinvoke $r16.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r14, $i3);

        virtualinvoke $r16.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void ensurePositive(int)>($i3);

        $r1 = virtualinvoke $r16.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i3);

        return $r1;
    }
    private int[] generateBlindingCoeffs(org.spongycastle.pqc.crypto.ntru.IndexGenerator, int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.pqc.crypto.ntru.IndexGenerator $r1;
        int $i0, i1, i2, i3, $i4;
        int[] r2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $i0 := @parameter1: int;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i1 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        r2 = newarray (int)[i1];

        i2 = -1;

     label1:
        if i2 > 1 goto label4;

        i3 = 0;

     label2:
        if i3 >= $i0 goto label3;

        i1 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: int nextIndex()>();

        $i4 = r2[i1];

        if $i4 != 0 goto label2;

        r2[i1] = i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 2;

        goto label1;

     label4:
        return r2;
    }
    private org.spongycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[], byte[])
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, $r2;
        int i0;
        org.spongycastle.pqc.crypto.ntru.IndexGenerator r3;
        org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial r4, r5, r6;
        boolean z0;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r7;
        int[] $r8;
        org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial $r9;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r10;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        r3 = new org.spongycastle.pqc.crypto.ntru.IndexGenerator;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        specialinvoke r3.<org.spongycastle.pqc.crypto.ntru.IndexGenerator: void <init>(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>($r1, $r7);

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int polyType>;

        if i0 != 1 goto label1;

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dr1>;

        $r8 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: int[] generateBlindingCoeffs(org.spongycastle.pqc.crypto.ntru.IndexGenerator,int)>(r3, i0);

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r8);

        r5 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dr2>;

        $r8 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: int[] generateBlindingCoeffs(org.spongycastle.pqc.crypto.ntru.IndexGenerator,int)>(r3, i0);

        specialinvoke r5.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r8);

        r6 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dr3>;

        $r8 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: int[] generateBlindingCoeffs(org.spongycastle.pqc.crypto.ntru.IndexGenerator,int)>(r3, i0);

        specialinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r8);

        $r9 = new org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial;

        specialinvoke $r9.<org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial,org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial)>(r4, r5, r6);

        return $r9;

     label1:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int dr>;

        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        z0 = $r7.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean sparse>;

        $r8 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: int[] generateBlindingCoeffs(org.spongycastle.pqc.crypto.ntru.IndexGenerator,int)>(r3, i0);

        if z0 == 0 goto label2;

        r4 = new org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial;

        specialinvoke r4.<org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial: void <init>(int[])>($r8);

        return r4;

     label2:
        $r10 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        specialinvoke $r10.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(int[])>($r8);

        return $r10;
    }
    private int log2(int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $i0 := @parameter0: int;

        if $i0 != 2048 goto label1;

        return 11;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("log2 not fully implemented");

        throw $r1;
    }
    private void putInt(org.spongycastle.crypto.Digest, int)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $i1 = $i0 >> 24;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $i1 = $i0 >> 16;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $i1 = $i0 >> 8;

        $b2 = (byte) $i1;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        $b2 = (byte) $i0;

        interfaceinvoke $r1.<org.spongycastle.crypto.Digest: void update(byte)>($b2);

        return;
    }
    protected org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.Polynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r3, $r5, r6;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r4;
        boolean $z0;
        int $i0;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r7;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.Polynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean fastFp>;

        if $z0 == 0 goto label3;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r5 = interfaceinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r1, $i0);

        r6 = $r5;

        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult(int)>(3);

        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>($r1);

     label1:
        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void center0(int)>($i0);

        virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mod3()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $z0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: boolean fastFp>;

        if $z0 == 0 goto label4;

        $r1 = r6;

     label2:
        virtualinvoke $r1.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void center0(int)>(3);

        return $r1;

     label3:
        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        r6 = interfaceinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r1, $i0);

        goto label1;

     label4:
        $r7 = new org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial;

        specialinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)>(r6);

        $r1 = virtualinvoke $r7.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r3, 3);

        goto label2;
    }
    protected org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial encrypt(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial, org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r4;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial;

        $r3 := @parameter2: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $r3 = interfaceinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r3, $i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void add(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>($r1, $i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        virtualinvoke $r3.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void ensurePositive(int)>($i0);

        return $r3;
    }
    public int getInputBlockSize()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r1;
        int i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        i0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int maxMsgLenBytes>;

        return i0;
    }
    public int getOutputBlockSize()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        int $i0, $i1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r1;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i1 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int N>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params>;

        $i0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters: int q>;

        $i0 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: int log2(int)>($i0);

        $i1 = $i1 * $i0;

        $i1 = $i1 + 7;

        $i1 = $i1 / 8;

        return $i1;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters $r4;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r5;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters r6;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: boolean forEncryption> = $z0;

        if $z0 == 0 goto label3;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: java.security.SecureRandom random> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey> = $r4;

     label1:
        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey>;

        $r5 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters getParameters()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params> = $r5;

        return;

     label2:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: java.security.SecureRandom random> = $r3;

        $r4 = (org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey> = $r4;

        goto label1;

     label3:
        r6 = (org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters privKey> = r6;

        r6 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters privKey>;

        $r5 = virtualinvoke r6.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters getParameters()>();

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters params> = $r5;

        return;
    }
    public byte[] processBlock(byte[], int, int) throws org.spongycastle.crypto.InvalidCipherTextException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEngine r0;
        byte[] $r1, r2;
        int $i0, $i1;
        boolean $z0;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters $r3;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters $r4;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, r2, 0, $i1);

        $z0 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey>;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] encrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters)>(r2, $r3);

        return $r1;

     label1:
        $r4 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters privKey>;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUEngine: byte[] decrypt(byte[],org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters)>(r2, $r4);

        return $r1;
    }
