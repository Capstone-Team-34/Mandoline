org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters extends org.spongycastle.crypto.params.AsymmetricKeyParameter
public org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h
private org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params
    public void <init>(java.io.InputStream, org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        java.io.InputStream $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r2;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters;

        specialinvoke r0.<org.spongycastle.crypto.params.AsymmetricKeyParameter: void <init>(boolean)>(0);

        $i1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int N>;

        $i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int)>($r1, $i1, $i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r3;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params> = $r2;

        return;
    }
    public void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial, org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r1 := @parameter0: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters;

        specialinvoke r0.<org.spongycastle.crypto.params.AsymmetricKeyParameter: void <init>(boolean)>(0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params> = $r2;

        return;
    }
    public void <init>(byte[], org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        byte[] $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r2;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r3;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters;

        specialinvoke r0.<org.spongycastle.crypto.params.AsymmetricKeyParameter: void <init>(boolean)>(0);

        $i1 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int N>;

        $i0 = $r2.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(byte[],int,int)>($r1, $i1, $i0);

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h> = $r3;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params> = $r2;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r5, $r6;
        boolean $z0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r7, $r8;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters) $r1;

        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r5 != null goto label4;

        $r5 = r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r5 == null goto label5;

        return 0;

     label4:
        $r5 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r6 = r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $z0 = virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        if $r7 != null goto label6;

        $r7 = r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        if $r7 == null goto label7;

        return 0;

     label6:
        $r7 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $r8 = r4.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $z0 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }
    public byte[] getEncoded()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        byte[] $r1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $r3 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i0 = $r3.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int q>;

        $r1 = virtualinvoke $r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: byte[] toBinary(int)>($i0);

        return $r1;
    }
    public int hashCode()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters $r1;
        int $i0, $i1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $i0 = 0;

        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        if $r2 != null goto label3;

        $i1 = 0;

     label1:
        $i1 = $i1 + 31;

        $i1 = $i1 * 31;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        if $r1 != null goto label4;

     label2:
        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $r2 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial h>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label1;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters params>;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters: int hashCode()>();

        goto label2;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters r0;
        java.io.OutputStream $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters: byte[] getEncoded()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }
