org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params
    public void <init>()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator r0;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        boolean z0, $z1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters $r1;
        org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial r2, $r5, r6;
        java.security.SecureRandom $r3;
        java.lang.Object r4;
        int[] $r7;
        org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial $r8;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters $r9;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters $r10;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters $r11;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r12;
        org.spongycastle.pqc.math.ntru.polynomial.Polynomial $r13;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int N>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $i6 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int q>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i4 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int df>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i1 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int df1>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i2 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int df2>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i3 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int df3>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        i5 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int dg>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        z0 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: boolean fastFp>;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $z1 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: boolean sparse>;

        r2 = null;

     label1:
        if z0 == 0 goto label6;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $i7 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int polyType>;

        if $i7 != 0 goto label5;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial generateRandomTernary(int,int,int,boolean,java.security.SecureRandom)>(i0, i4, i4, $z1, $r3);

     label2:
        $r13 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        $r5 = interfaceinvoke $r13.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        r6 = $r5;

        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult(int)>(3);

        $r7 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $i7 = $r7[0];

        $i7 = $i7 + 1;

        $r7[0] = $i7;

     label3:
        r6 = virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int)>($i6);

        if r6 == null goto label1;

        if z0 == 0 goto label4;

        $r5 = new org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial;

        r2 = $r5;

        specialinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void <init>(int)>(i0);

        $r7 = $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: int[] coeffs>;

        $r7[0] = 1;

     label4:
        i1 = i5 + -1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r8 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom)>(i0, i5, i1, $r3);

        $r5 = virtualinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int)>($i6);

        if $r5 == null goto label4;

        $r5 = virtualinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int)>(r6, $i6);

        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void mult3(int)>($i6);

        virtualinvoke $r5.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void ensurePositive(int)>($i6);

        virtualinvoke $r8.<org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial: void clear()>();

        virtualinvoke r6.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: void clear()>();

        $r10 = new org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r9 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters getEncryptionParameters()>();

        $r13 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        specialinvoke $r10.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.math.ntru.polynomial.Polynomial,org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>($r5, $r13, r2, $r9);

        $r11 = new org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r9 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters getEncryptionParameters()>();

        specialinvoke $r11.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters: void <init>(org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters)>($r5, $r9);

        $r12 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r12.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>($r11, $r10);

        return $r12;

     label5:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int,int,int,int,int,java.security.SecureRandom)>(i0, i1, i2, i3, i3, $r3);

        goto label2;

     label6:
        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $i7 = $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: int polyType>;

        if $i7 != 0 goto label8;

        $i7 = i4 + -1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.util.Util: org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial generateRandomTernary(int,int,int,boolean,java.security.SecureRandom)>(i0, i4, $i7, $z1, $r3);

     label7:
        $r13 = (org.spongycastle.pqc.math.ntru.polynomial.Polynomial) r4;

        r2 = interfaceinvoke $r13.<org.spongycastle.pqc.math.ntru.polynomial.Polynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial()>();

        r6 = r2;

        $r5 = virtualinvoke r2.<org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial: org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertF3()>();

        r2 = $r5;

        if $r5 != null goto label3;

        goto label1;

     label8:
        $i7 = i3 + -1;

        $r1 = r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params>;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial: org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int,int,int,int,int,java.security.SecureRandom)>(i0, i1, i2, i3, $i7, $r3);

        goto label7;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters $r2;

        r0 := @this: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters) $r1;

        r0.<org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator: org.spongycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params> = $r2;

        return;
    }
