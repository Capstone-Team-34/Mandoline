org.spongycastle.pqc.crypto.gmss.GMSSParameters extends java.lang.Object
private int[] K
private int[] heightOfTrees
private int numOfLayers
private int[] winternitzParameter
    public void <init>(int) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int $i0;
        int[] r1, r2, r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 > 10 goto label1;

        r1 = newarray (int)[1];

        r1[0] = 10;

        r2 = newarray (int)[1];

        r2[0] = 3;

        r3 = newarray (int)[1];

        r3[0] = 2;

        $i0 = lengthof r1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void init(int,int[],int[],int[])>($i0, r1, r2, r3);

        return;

     label1:
        if $i0 > 20 goto label2;

        r1 = newarray (int)[2];

        r1[0] = 10;

        r1[1] = 10;

        r2 = newarray (int)[2];

        r2[0] = 5;

        r2[1] = 4;

        r3 = newarray (int)[2];

        r3[0] = 2;

        r3[1] = 2;

        $i0 = lengthof r1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void init(int,int[],int[],int[])>($i0, r1, r2, r3);

        return;

     label2:
        r1 = newarray (int)[4];

        r1[0] = 10;

        r1[1] = 10;

        r1[2] = 10;

        r1[3] = 10;

        r2 = newarray (int)[4];

        r2[0] = 9;

        r2[1] = 9;

        r2[2] = 9;

        r2[3] = 3;

        r3 = newarray (int)[4];

        r3[0] = 2;

        r3[1] = 2;

        r3[2] = 2;

        r3[3] = 2;

        $i0 = lengthof r1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void init(int,int[],int[],int[])>($i0, r1, r2, r3);

        return;
    }
    public void <init>(int, int[], int[], int[]) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int $i0;
        int[] $r1, $r2, $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void init(int,int[],int[],int[])>($i0, $r1, $r2, $r3);

        return;
    }
    private void init(int, int[], int[], int[]) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int $i0, $i1, $i2;
        int[] $r1, $r2, $r3;
        boolean z0;
        java.lang.String r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        z0 = 1;

        r4 = "";

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers>;

        $i1 = lengthof $r2;

        if $i0 != $i1 goto label1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers>;

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label2;

     label1:
        z0 = 0;

        r4 = "Unexpected parameterset format";

     label2:
        $i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers>;

        if $i0 >= $i1 goto label8;

        $i1 = $r3[$i0];

        if $i1 < 2 goto label4;

        $i1 = $r1[$i0];

        $i2 = $r3[$i0];

        $i1 = $i1 - $i2;

        $i1 = $i1 % 2;

        if $i1 == 0 goto label5;

     label4:
        z0 = 0;

        r4 = "Wrong parameter K (K >= 2 and H-K even required)!";

     label5:
        $i1 = $r1[$i0];

        if $i1 < 4 goto label6;

        $i1 = $r2[$i0];

        if $i1 >= 2 goto label7;

     label6:
        z0 = 0;

        r4 = "Wrong parameter H or w (H > 3 and w > 1 required)!";

     label7:
        $i0 = $i0 + 1;

        goto label3;

     label8:
        if z0 == 0 goto label9;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] heightOfTrees> = $r1;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] winternitzParameter> = $r1;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r3);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] K> = $r1;

        return;

     label9:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4);

        throw $r5;
    }
    public int[] getHeightOfTrees()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] heightOfTrees>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public int[] getK()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] K>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public int getNumOfLayers()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int numOfLayers>;

        return i0;
    }
    public int[] getWinternitzParameter()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSParameters r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] winternitzParameter>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
