org.spongycastle.pqc.crypto.gmss.GMSSRootCalc extends java.lang.Object
private byte[][] AuthPath
private int K
private org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider
private int heightOfNextSeed
private java.util.Vector heightOfNodes
private int heightOfTree
private int[] index
private int indexForNextSeed
private boolean isFinished
private boolean isInitialized
private int mdLength
private org.spongycastle.crypto.Digest messDigestTree
private java.util.Vector[] retain
private byte[] root
private java.util.Vector tailStack
private org.spongycastle.pqc.crypto.gmss.Treehash[] treehash
    public void <init>(int, int, org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r1;
        org.spongycastle.crypto.Digest $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        byte[][] $r6;
        byte[] $r7;
        java.util.Vector[] $r8;
        java.util.Vector $r9;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider> = $r1;

        $r2 = interfaceinvoke $r1.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree> = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree>;

        $i2 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength> = $i2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K> = $i1;

        $r3 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index> = $r3;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i2;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r6 = (byte[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath> = $r6;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $r7 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root> = $r7;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i0 = $i0 + -1;

        $r8 = newarray (java.util.Vector)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain> = $r8;

        $i0 = 0;

     label1:
        $i2 = $i1 + -1;

        if $i0 >= $i2 goto label2;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain>;

        $r9 = new java.util.Vector;

        specialinvoke $r9.<java.util.Vector: void <init>()>();

        $r8[$i0] = $r9;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, byte[][], int[], org.spongycastle.pqc.crypto.gmss.Treehash[], java.util.Vector[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        org.spongycastle.crypto.Digest $r1;
        byte[][] $r2, $r13;
        int[] $r3, $r7;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r4;
        java.util.Vector[] $r5;
        int i0, $i1, $i2;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r6;
        java.util.Vector $r8;
        java.lang.Integer $r9;
        byte[] $r10;
        java.lang.Class $r11;
        java.lang.Object $r12;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: int[];

        $r4 := @parameter3: org.spongycastle.pqc.crypto.gmss.Treehash[];

        $r5 := @parameter4: java.util.Vector[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r1 = interfaceinvoke $r6.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree> = $r1;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider> = $r6;

        i0 = $r3[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree> = i0;

        i0 = $r3[1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength> = i0;

        i0 = $r3[2];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K> = i0;

        i0 = $r3[3];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed> = i0;

        i0 = $r3[4];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed> = i0;

        i0 = $r3[5];

        if i0 != 1 goto label04;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished> = 1;

     label01:
        i0 = $r3[6];

        if i0 != 1 goto label05;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized> = 1;

     label02:
        i0 = $r3[7];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $r7 = newarray (int)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index> = $r7;

        $i1 = 0;

     label03:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 >= $i2 goto label06;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i2 = $i1 + 8;

        $i2 = $r3[$i2];

        $r7[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished> = 0;

        goto label01;

     label05:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized> = 0;

        goto label02;

     label06:
        $r8 = new java.util.Vector;

        specialinvoke $r8.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes> = $r8;

        $i1 = 0;

     label07:
        if $i1 >= i0 goto label08;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 8;

        $i2 = $i2 + $i1;

        $i2 = $r3[$i2];

        $r9 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r10 = $r2[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root> = $r10;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $r3 = newarray (int)[2];

        $r3[0] = $i1;

        $r3[1] = $i2;

        $r11 = <java.lang.Byte: java.lang.Class TYPE>;

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r11, $r3);

        $r13 = (byte[][]) $r12;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath> = $r13;

        $i1 = 0;

     label09:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 >= $i2 goto label10;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath>;

        $i2 = $i1 + 1;

        $r10 = $r2[$i2];

        $r13[$i1] = $r10;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r8 = new java.util.Vector;

        specialinvoke $r8.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack> = $r8;

        $i1 = 0;

     label11:
        if $i1 >= i0 goto label12;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 1;

        $i2 = $i2 + $i1;

        $r10 = $r2[$i2];

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r10);

        $i1 = $i1 + 1;

        goto label11;

     label12:
        $r4 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash> = $r4;

        $r5 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: java.util.Vector[] clone(java.util.Vector[])>($r5);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain> = $r5;

        return;
    }
    public byte[][] getAuthPath()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public java.util.Vector[] getRetain()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        java.util.Vector[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: java.util.Vector[] clone(java.util.Vector[])>($r1);

        return $r1;
    }
    public byte[] getRoot()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public java.util.Vector getStack()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        java.util.Vector r1, $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        r1 = new java.util.Vector;

        specialinvoke r1.<java.util.Vector: void <init>()>();

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r1;
    }
    public byte[][] getStatByte()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        java.util.Vector $r1;
        int i0, $i1, $i2;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        byte[][] r5, $r7;
        byte[] $r6;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        if $r1 != null goto label3;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i1 = $i1 + 1;

        $i1 = $i1 + i0;

        $r2 = newarray (int)[2];

        $r2[0] = $i1;

        $r2[1] = 64;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (byte[][]) $r4;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root>;

        r5[0] = $r6;

        $i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 >= $i2 goto label4;

        $i2 = $i1 + 1;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath>;

        $r6 = $r7[$i1];

        r5[$i2] = $r6;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        goto label1;

     label4:
        $i1 = 0;

     label5:
        if $i1 >= i0 goto label6;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 1;

        $i2 = $i2 + $i1;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r6 = (byte[]) $r4;

        r5[$i2] = $r6;

        $i1 = $i1 + 1;

        goto label5;

     label6:
        return r5;
    }
    public int[] getStatInt()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        int[] r1, $r3;
        java.util.Vector $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        if $r2 != null goto label05;

        i0 = 0;

     label01:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i1 = $i1 + 8;

        $i1 = $i1 + i0;

        r1 = newarray (int)[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        r1[0] = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        r1[1] = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        r1[2] = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed>;

        r1[3] = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed>;

        r1[4] = $i1;

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished>;

        if $z0 == 0 goto label06;

        r1[5] = 1;

     label02:
        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized>;

        if $z0 == 0 goto label07;

        r1[6] = 1;

     label03:
        r1[7] = i0;

        $i1 = 0;

     label04:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 >= $i2 goto label08;

        $i2 = $i1 + 8;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i3 = $r3[$i1];

        r1[$i2] = $i3;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        goto label01;

     label06:
        r1[5] = 0;

        goto label02;

     label07:
        r1[6] = 0;

        goto label03;

     label08:
        $i1 = 0;

     label09:
        if $i1 >= i0 goto label10;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 8;

        $i2 = $i2 + $i1;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $r4 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r5 = (java.lang.Integer) $r4;

        $i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[$i2] = $i3;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        return r1;
    }
    public org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])>($r1);

        return $r1;
    }
    public void initialize(java.util.Vector)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        java.util.Vector $r1;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r2;
        org.spongycastle.pqc.crypto.gmss.Treehash $r3;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r4;
        org.spongycastle.crypto.Digest $r5;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        byte[][] $r9;
        byte[] $r10;
        java.util.Vector[] $r11;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 := @parameter0: java.util.Vector;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i0 = $i0 - $i1;

        $r2 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash> = $r2;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i1 = $i1 - $i2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash>;

        $r3 = new org.spongycastle.pqc.crypto.gmss.Treehash;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r5 = interfaceinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        specialinvoke $r3.<org.spongycastle.pqc.crypto.gmss.Treehash: void <init>(java.util.Vector,int,org.spongycastle.crypto.Digest)>($r1, $i0, $r5);

        $r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $r6 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index> = $r6;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r7 = <java.lang.Byte: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        $r9 = (byte[][]) $r8;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath> = $r9;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $r10 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root> = $r10;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack> = $r1;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes> = $r1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized> = 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished> = 0;

        $i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i0 >= $i1 goto label4;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $r6[$i0] = -1;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i0 = $i0 + -1;

        $r11 = newarray (java.util.Vector)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain> = $r11;

        $i0 = 0;

     label5:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label6;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain>;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        $r11[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed> = 3;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed> = 0;

        return;
    }
    public void initializeTreehashSeed(byte[], int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r2;
        org.spongycastle.pqc.crypto.gmss.Treehash $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.Treehash: void initializeSeed(byte[])>($r1);

        return;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        java.lang.String r1;
        java.util.Vector $r2;
        int i0, i1, $i2;
        java.lang.StringBuilder $r3;
        int[] $r4;
        byte[][] $r5;
        byte[] $r6;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r7;
        org.spongycastle.crypto.Digest $r8;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        r1 = "";

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        if $r2 != null goto label3;

        i0 = 0;

     label1:
        i1 = 0;

     label2:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 8;

        $i2 = $i2 + i0;

        if i1 >= $i2 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        $i2 = $r4[i1];

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        goto label1;

     label4:
        i1 = 0;

     label5:
        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = $i2 + 1;

        $i2 = $i2 + i0;

        if i1 >= $i2 goto label6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = new java.lang.String;

        $r5 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getStatByte()>();

        $r6 = $r5[i1];

        $r6 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[])>($r6);

        specialinvoke r1.<java.lang.String: void <init>(byte[])>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label5;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r8 = interfaceinvoke $r7.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        i0 = interfaceinvoke $r8.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;
    }
    public void update(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        byte[] $r1, r2, r11;
        int $i0, $i1, $i2;
        boolean $z0;
        java.io.PrintStream $r3;
        int[] $r4;
        byte[][] $r5;
        java.util.Vector[] $r6;
        java.util.Vector $r7, $r13;
        java.lang.Integer $r8;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r9;
        org.spongycastle.pqc.crypto.gmss.Treehash $r10;
        java.lang.Object $r12;
        org.spongycastle.crypto.Digest $r14;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished>;

        if $z0 == 0 goto label01;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Too much updates for Tree!!");

        return;

     label01:
        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized>;

        if $z0 != 0 goto label02;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("GMSSRootCalc not initialized!");

        return;

     label02:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        $i1 = $i1 + 1;

        $r4[0] = $i1;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        if $i1 != 1 goto label05;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath>;

        r2 = $r5[0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i1);

     label03:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        $i1 = $i1 + -3;

        $i1 = $i1 % 2;

        if $i1 != 0 goto label04;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        if $i1 < 3 goto label04;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        if $i1 != $i0 goto label04;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain>;

        $r7 = $r6[0];

        virtualinvoke $r7.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r1, 0);

     label04:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        if $i1 != 0 goto label06;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $r8 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        return;

     label05:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r4[0];

        if $i1 != 3 goto label03;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        if $i1 <= $i0 goto label03;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash>;

        $r10 = $r9[0];

        virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.Treehash: void setFirstNode(byte[])>($r1);

        goto label03;

     label06:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        r11 = newarray (byte)[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $i1 = $i1 << 1;

        r2 = newarray (byte)[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r11, 0, $i1);

        $i1 = 0;

     label07:
        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $i0 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if $i0 <= 0 goto label11;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $r12 = virtualinvoke $r7.<java.util.Vector: java.lang.Object lastElement()>();

        $r8 = (java.lang.Integer) $r12;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i1 != $i0 goto label11;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $r12 = virtualinvoke $r7.<java.util.Vector: java.lang.Object lastElement()>();

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r2, 0, $i0);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $i0 = virtualinvoke $r13.<java.util.Vector: int size()>();

        $i0 = $i0 + -1;

        virtualinvoke $r7.<java.util.Vector: void removeElementAt(int)>($i0);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $i0 = virtualinvoke $r13.<java.util.Vector: int size()>();

        $i0 = $i0 + -1;

        virtualinvoke $r7.<java.util.Vector: void removeElementAt(int)>($i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r2, $i0, $i2);

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = lengthof r2;

        interfaceinvoke $r14.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i0);

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r14.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r11 = newarray (byte)[$i0];

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.crypto.Digest messDigestTree>;

        interfaceinvoke $r14.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r11, 0);

        $i1 = $i1 + 1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 >= $i0 goto label07;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i0 = $r4[$i1];

        $i0 = $i0 + 1;

        $r4[$i1] = $i0;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i0 = $r4[$i1];

        if $i0 != 1 goto label08;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] AuthPath>;

        $r1 = $r5[$i1];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, $r1, 0, $i0);

     label08:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i0 = $i0 - $i2;

        if $i1 < $i0 goto label10;

        if $i1 != 0 goto label09;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("M\ufffd\ufffd\ufffdP");

     label09:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i0 = $r4[$i1];

        $i0 = $i0 + -3;

        $i0 = $i0 % 2;

        if $i0 != 0 goto label07;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i0 = $r4[$i1];

        if $i0 < 3 goto label07;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] retain>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i0 = $i2 - $i0;

        $i0 = $i1 - $i0;

        $r7 = $r6[$i0];

        virtualinvoke $r7.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r11, 0);

        goto label07;

     label10:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i0 = $r4[$i1];

        if $i0 != 3 goto label07;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] treehash>;

        $r10 = $r9[$i1];

        virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.Treehash: void setFirstNode(byte[])>(r11);

        goto label07;

     label11:
        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r11);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector heightOfNodes>;

        $r8 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        if $i1 != $i0 goto label12;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished> = 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized> = 0;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector tailStack>;

        $r12 = virtualinvoke $r7.<java.util.Vector: java.lang.Object lastElement()>();

        $r1 = (byte[]) $r12;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] root> = $r1;

     label12:
        return;
    }
    public void update(byte[], byte[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        int[] $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfTree>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int K>;

        $i1 = $i1 - $i2;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed>;

        $i0 = $i0 + -2;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] index>;

        $i1 = $r3[0];

        if $i0 != $i1 goto label1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed>;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initializeTreehashSeed(byte[],int)>($r1, $i0);

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int heightOfNextSeed> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed>;

        $i0 = $i0 * 2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int indexForNextSeed> = $i0;

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[])>($r2);

        return;
    }
    public boolean wasFinished()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isFinished>;

        return z0;
    }
    public boolean wasInitialized()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean isInitialized>;

        return z0;
    }
