org.spongycastle.pqc.crypto.gmss.util.GMSSRandom extends java.lang.Object
private org.spongycastle.crypto.Digest messDigestTree
    public void <init>(org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom r0;
        org.spongycastle.crypto.Digest $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: org.spongycastle.crypto.Digest messDigestTree> = $r1;

        return;
    }
    private void addByteArrays(byte[], byte[])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom r0;
        byte[] $r1, $r2;
        int i0, i1, $i2, $i4;
        byte $b3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $b3 = $r1[i1];

        $i2 = $b3 & 255;

        $b3 = $r2[i1];

        $i4 = $b3 & 255;

        $i2 = $i2 + $i4;

        i0 = $i2 + i0;

        $b3 = (byte) i0;

        $r1[i1] = $b3;

        i0 = i0 >> 8;

        i0 = (byte) i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void addOne(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom r0;
        byte[] $r1;
        int i0, i1, $i2;
        byte $b3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 := @parameter0: byte[];

        i0 = 1;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $b3 = $r1[i1];

        $i2 = $b3 & 255;

        i0 = $i2 + i0;

        $b3 = (byte) i0;

        $r1[i1] = $b3;

        i0 = i0 >> 8;

        i0 = (byte) i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public byte[] nextSeed(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom r0;
        byte[] $r1, r2;
        int $i0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = lengthof $r1;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i0);

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: org.spongycastle.crypto.Digest messDigestTree>;

        interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void addByteArrays(byte[],byte[])>($r1, r2);

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void addOne(byte[])>($r1);

        return r2;
    }
