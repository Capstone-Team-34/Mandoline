org.spongycastle.pqc.crypto.gmss.GMSSRootSig extends java.lang.Object
private long big8
private int checksum
private int counter
private org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom
private byte[] hash
private int height
private int ii
private int k
private int keysize
private int mdsize
private org.spongycastle.crypto.Digest messDigestOTS
private int messagesize
private byte[] privateKeyOTS
private int r
private byte[] seed
private byte[] sign
private int steps
private int test
private long test8
private int w
    public void <init>(org.spongycastle.crypto.Digest, int, int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1, $i2;
        double $d0, $d1;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS> = $r1;

        $r2 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        specialinvoke $r2.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r2;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $i2 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize> = $i2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int height> = $i1;

        $i1 = 1 << $i0;

        $i1 = $i1 + -1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k> = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i1 = $i1 << 3;

        $d1 = (double) $i1;

        $d0 = (double) $i0;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize> = $i0;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, byte[][], int[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        org.spongycastle.crypto.Digest $r1;
        byte[][] $r2;
        int[] $r3;
        int i0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r4;
        double $d0, $d1;
        byte[] $r5;
        byte $b1;
        long $l2, $l3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS> = $r1;

        $r4 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        specialinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r4;

        i0 = $r3[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter> = i0;

        i0 = $r3[1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        i0 = $r3[2];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = i0;

        i0 = $r3[3];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r> = i0;

        i0 = $r3[4];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int steps> = i0;

        i0 = $r3[5];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize> = i0;

        i0 = $r3[6];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int height> = i0;

        i0 = $r3[7];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w> = i0;

        i0 = $r3[8];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = i0;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i0 = 1 << i0;

        i0 = i0 + -1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = i0 << 3;

        $d0 = (double) i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $d1 = (double) i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize> = i0;

        $r5 = $r2[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r5;

        $r5 = $r2[1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed> = $r5;

        $r5 = $r2[2];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash> = $r5;

        $r5 = $r2[3];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign> = $r5;

        $r5 = $r2[4];

        $b1 = $r5[0];

        i0 = $b1 & 255;

        $l2 = (long) i0;

        $r5 = $r2[4];

        $b1 = $r5[1];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 8;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[2];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 16;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[3];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 24;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[4];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 32;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[5];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 40;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[6];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 48;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[7];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 56;

        $l2 = $l2 | $l3;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8> = $l2;

        $r5 = $r2[4];

        $b1 = $r5[8];

        i0 = $b1 & 255;

        $l2 = (long) i0;

        $r5 = $r2[4];

        $b1 = $r5[9];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 8;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[10];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 16;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[11];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 24;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[12];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 32;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[13];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 40;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[14];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 48;

        $l2 = $l2 | $l3;

        $r5 = $r2[4];

        $b1 = $r5[15];

        i0 = $b1 & 255;

        $l3 = (long) i0;

        $l3 = $l3 << 56;

        $l2 = $l2 | $l3;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l2;

        return;
    }
    private void oneStep()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        int i0, i1, $i3, $i6, $i7;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r1;
        byte[] $r2, $r3;
        byte $b2;
        org.spongycastle.crypto.Digest $r4;
        long $l4, $l5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i0 = 8 % i0;

        if i0 != 0 goto label04;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 != 0 goto label03;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed>;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i0 >= i1 goto label02;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $b2 = $r2[i0];

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = $b2 & i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $b2 = $r3[i1];

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i1 = $b2 >>> i1;

        $b2 = (byte) i1;

        $r2[i0] = $b2;

     label01:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 != 0 goto label20;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = i0 * i1;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, i0, i1);

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i0 = i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i1 = 8 / i1;

        i0 = i0 % i1;

        if i0 != 0 goto label20;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        i0 = i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = i0;

        return;

     label02:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = i0 & i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i0 = i0 >>> i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = i0;

        goto label01;

     label03:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 <= 0 goto label01;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        i0 = lengthof $r3;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        i0 = i0 + -1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        goto label01;

     label04:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if i0 >= 8 goto label12;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 != 0 goto label11;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i0 = i0 % 8;

        if i0 != 0 goto label08;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i0 >= i1 goto label08;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = 0L;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i1 = i1 / $i3;

        i1 = i1 << 3;

        if i0 >= i1 goto label06;

        i0 = 0;

     label05:
        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if i0 >= i1 goto label08;

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $b2 = $r2[i1];

        i1 = $b2 & 255;

        $i3 = i0 << 3;

        i1 = i1 << $i3;

        $l5 = (long) i1;

        $l4 = $l4 ^ $l5;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        i1 = i1 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = i1;

        i0 = i0 + 1;

        goto label05;

     label06:
        i0 = 0;

     label07:
        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i1 = i1 % $i3;

        if i0 >= i1 goto label08;

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $b2 = $r2[i1];

        i1 = $b2 & 255;

        $i3 = i0 << 3;

        i1 = i1 << $i3;

        $l5 = (long) i1;

        $l4 = $l4 ^ $l5;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        i1 = i1 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = i1;

        i0 = i0 + 1;

        goto label07;

     label08:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        if i0 != i1 goto label09;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        $l4 = (long) i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

     label09:
        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l5 = (long) i0;

        $l4 = $l4 & $l5;

        i0 = (int) $l4;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed>;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

     label10:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 != 0 goto label20;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = i0 * i1;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, i0, i1);

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $l4 = $l4 >>> i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i0 = i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter> = i0;

        return;

     label11:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        if i0 <= 0 goto label10;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        i0 = lengthof $r3;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        i0 = i0 + -1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = i0;

        goto label10;

     label12:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if i0 >= 57 goto label20;

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $b2 = $l4 cmp 0L;

        if $b2 != 0 goto label19;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = 0L;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = 0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        i0 = i0 % 8;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        i1 = i1 >>> 3;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i1 >= $i3 goto label18;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i6 = $i6 << 3;

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i6 = $i6 - $i7;

        if $i3 > $i6 goto label14;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 + $i6;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r> = $i3;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        $i3 = $i3 + 7;

        $i3 = $i3 >>> 3;

     label13:
        if i1 >= $i3 goto label15;

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        $b2 = $r2[i1];

        $i6 = $b2 & 255;

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $i7 = $i7 << 3;

        $i6 = $i6 << $i7;

        $l5 = (long) $i6;

        $l4 = $l4 ^ $l5;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        $i6 = $i6 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = $i6;

        i1 = i1 + 1;

        goto label13;

     label14:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i6 = $i6 + $i7;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r> = $i6;

        goto label13;

     label15:
        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l4 = $l4 >>> i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8> = $l4;

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l5 = (long) i0;

        $l4 = $l4 & $l5;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8> = $l4;

     label16:
        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed>;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

     label17:
        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $b2 = $l4 cmp 0L;

        if $b2 != 0 goto label20;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = i0 * i1;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, i0, i1);

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        i0 = i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter> = i0;

        return;

     label18:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = i0 & i1;

        $l4 = (long) i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8> = $l4;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i0 = i0 >>> i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = i0;

        goto label16;

     label19:
        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $b2 = $l4 cmp 0L;

        if $b2 <= 0 goto label17;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        i0 = lengthof $r3;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        $l4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l4 = $l4 - 1L;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8> = $l4;

        goto label17;

     label20:
        return;
    }
    public int getLog(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        int $i0, i1, i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $i0 := @parameter0: int;

        i1 = 1;

        i2 = 2;

     label1:
        if i2 >= $i0 goto label2;

        i2 = i2 << 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
    public byte[] getSig()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        byte[] r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign>;

        return r1;
    }
    public byte[][] getStatByte()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        int $i0;
        int[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        byte[][] r4;
        byte[] $r5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r1 = newarray (int)[2];

        $r1[0] = 5;

        $r1[1] = $i0;

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        r4 = (byte[][]) $r3;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS>;

        r4[0] = $r5;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed>;

        r4[1] = $r5;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        r4[2] = $r5;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign>;

        r4[3] = $r5;

        $r5 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] getStatLong()>();

        r4[4] = $r5;

        return r4;
    }
    public int[] getStatInt()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        int[] r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        r1 = newarray (int)[9];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        r1[0] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test>;

        r1[1] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii>;

        r1[2] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r>;

        r1[3] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int steps>;

        r1[4] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize>;

        r1[5] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int height>;

        r1[6] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        r1[7] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        r1[8] = $i0;

        return r1;
    }
    public byte[] getStatLong()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        byte[] r1;
        long $l0;
        int $i1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        r1 = newarray (byte)[16];

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[0] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 8;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[1] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 16;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[2] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 24;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[3] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 32;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[4] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 40;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[5] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 48;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[6] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8>;

        $l0 = $l0 >> 56;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[7] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[8] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 8;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[9] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 16;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[10] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 24;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[11] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 32;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[12] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 40;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[13] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 48;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[14] = $b2;

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $l0 = $l0 >> 56;

        $l0 = $l0 & 255L;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        r1[15] = $b2;

        return r1;
    }
    public void initSign(byte[], byte[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        byte[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, i4, $i6, $i8, $i9, $i11;
        org.spongycastle.crypto.Digest $r4;
        byte $b5;
        long l7, $l10, $l12;
        double $d0, $d1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r3 = newarray (byte)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash> = $r3;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $i1 = lengthof $r2;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash> = $r2;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: org.spongycastle.crypto.Digest messDigestOTS>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] hash>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1);

        $i1 = 0;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i2 = $i2 << $i3;

        $i2 = $i2 + 1;

        $i2 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int getLog(int)>($i2);

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = 8 % $i3;

        if $i3 != 0 goto label06;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = 8 / $i3;

        i4 = 0;

     label01:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i4 >= i0 goto label04;

        i0 = 0;

     label02:
        if i0 >= $i3 goto label03;

        $b5 = $r2[i4];

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $i6 = $b5 & $i6;

        $i1 = $i1 + $i6;

        $b5 = $r2[i4];

        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i6 = $b5 >>> $i6;

        $b5 = (byte) $i6;

        $r2[i4] = $b5;

        i0 = i0 + 1;

        goto label02;

     label03:
        i4 = i4 + 1;

        goto label01;

     label04:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 << i4;

        $i3 = $i3 - $i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = $i3;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i4 = 0;

     label05:
        if i4 >= $i2 goto label27;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = i0 & $i3;

        $i1 = $i1 + i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 >>> i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 + i0;

        goto label05;

     label06:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if $i3 >= 8 goto label18;

        $i3 = 0;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 / i0;

        i0 = 0;

     label07:
        if i0 >= i4 goto label12;

        l7 = 0L;

        $i6 = 0;

     label08:
        $i8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if $i6 >= $i8 goto label09;

        $b5 = $r2[$i3];

        $i8 = $b5 & 255;

        $i9 = $i6 << 3;

        $i8 = $i8 << $i9;

        $l10 = (long) $i8;

        l7 = l7 ^ $l10;

        $i3 = $i3 + 1;

        $i6 = $i6 + 1;

        goto label08;

     label09:
        $i6 = 0;

     label10:
        if $i6 >= 8 goto label11;

        $i8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l10 = (long) $i8;

        $l10 = $l10 & l7;

        $i8 = (int) $l10;

        $i1 = $i1 + $i8;

        $i8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        l7 = l7 >>> $i8;

        $i6 = $i6 + 1;

        goto label10;

     label11:
        i0 = i0 + 1;

        goto label07;

     label12:
        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 % i0;

        l7 = 0L;

        i0 = 0;

     label13:
        if i0 >= i4 goto label14;

        $b5 = $r2[$i3];

        $i6 = $b5 & 255;

        $i8 = i0 << 3;

        $i6 = $i6 << $i8;

        $l10 = (long) $i6;

        l7 = l7 ^ $l10;

        $i3 = $i3 + 1;

        i0 = i0 + 1;

        goto label13;

     label14:
        $i3 = i4 << 3;

        i4 = 0;

     label15:
        if i4 >= $i3 goto label16;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l10 = (long) i0;

        $l10 = $l10 & l7;

        i0 = (int) $l10;

        $i1 = $i1 + i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        l7 = l7 >>> i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 + i0;

        goto label15;

     label16:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 << i4;

        $i3 = $i3 - $i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = $i3;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i4 = 0;

     label17:
        if i4 >= $i2 goto label27;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = i0 & $i3;

        $i1 = $i1 + i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 >>> i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 + i0;

        goto label17;

     label18:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        if $i3 >= 57 goto label27;

        $i3 = 0;

     label19:
        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        i4 = i4 << 3;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 - i0;

        if $i3 > i4 goto label22;

        $i8 = $i3 >>> 3;

        i4 = $i3 % 8;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 + i0;

        i0 = $i3 + 7;

        i0 = i0 >>> 3;

        l7 = 0L;

        $i6 = 0;

     label20:
        if $i8 >= i0 goto label21;

        $b5 = $r2[$i8];

        $i9 = $b5 & 255;

        $i11 = $i6 << 3;

        $i9 = $i9 << $i11;

        $l10 = (long) $i9;

        l7 = l7 ^ $l10;

        $i6 = $i6 + 1;

        $i8 = $i8 + 1;

        goto label20;

     label21:
        $l10 = l7 >>> i4;

        l7 = (long) $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l12 = (long) $i1;

        $l10 = $l12 & $l10;

        l7 = l7 + $l10;

        $i1 = (int) l7;

        goto label19;

     label22:
        i0 = $i3 >>> 3;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i0 >= i4 goto label25;

        $i3 = $i3 % 8;

        l7 = 0L;

        i4 = 0;

     label23:
        $i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        if i0 >= $i6 goto label24;

        $b5 = $r2[i0];

        $i6 = $b5 & 255;

        $i8 = i4 << 3;

        $i6 = $i6 << $i8;

        $l10 = (long) $i6;

        l7 = l7 ^ $l10;

        i4 = i4 + 1;

        i0 = i0 + 1;

        goto label23;

     label24:
        $l10 = l7 >>> $i3;

        l7 = (long) $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        $l12 = (long) $i1;

        $l10 = $l12 & $l10;

        l7 = l7 + $l10;

        $i1 = (int) l7;

     label25:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 << i4;

        $i3 = $i3 - $i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum> = $i3;

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int checksum>;

        i4 = 0;

     label26:
        if i4 >= $i2 goto label27;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int k>;

        i0 = i0 & $i3;

        $i1 = $i1 + i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $i3 = $i3 >>> i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        i4 = i4 + i0;

        goto label26;

     label27:
        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int messagesize>;

        $d0 = (double) $i2;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int w>;

        $d1 = (double) $i2;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d0;

        $i2 = $i3 + $i2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize> = $i2;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize>;

        $i1 = $i2 + $i1;

        $d0 = (double) $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int height>;

        $i1 = 1 << $i1;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int steps> = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $i1 = $i1 * $i2;

        $r2 = newarray (byte)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] sign> = $r2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int test> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int ii> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long test8> = 0L;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int r> = 0;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r2 = newarray (byte)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] privateKeyOTS> = $r2;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r2 = newarray (byte)[$i1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed> = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] seed>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        return;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        java.lang.StringBuilder $r1;
        long $l0;
        java.lang.String $r2;
        int[] r3, $r4;
        int $i1, $i2;
        java.lang.Class $r5;
        java.lang.Object $r6;
        byte[][] r7;
        byte[] $r8;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: long big8>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = newarray (int)[9];

        r3 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int mdsize>;

        $r4 = newarray (int)[2];

        $r4[0] = 5;

        $r4[1] = $i1;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (byte[][]) $r6;

        r7 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $i1 = 0;

     label1:
        if $i1 >= 9 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i2 = r3[$i1];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= 5 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = new java.lang.String;

        $r8 = r7[$i1];

        $r8 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[])>($r8);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r8);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r2;
    }
    public boolean updateSign()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig r0;
        int i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int steps>;

        if i0 >= $i1 goto label4;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize>;

        if $i1 >= $i2 goto label2;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: void oneStep()>();

     label2:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int counter>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int keysize>;

        if $i1 != $i2 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return 0;
    }
