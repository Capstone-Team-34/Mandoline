org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters extends org.spongycastle.pqc.crypto.gmss.GMSSKeyParameters
private int[] K
private byte[][][] currentAuthPaths
private java.util.Vector[][] currentRetain
private byte[][] currentRootSig
private byte[][] currentSeeds
private java.util.Vector[] currentStack
private org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash
private org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider
private org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS
private org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom
private int[] heightOfTrees
private int[] index
private byte[][][] keep
private int mdLength
private org.spongycastle.crypto.Digest messDigestTrees
private int[] minTreehash
private byte[][][] nextAuthPaths
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf
private org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot
private byte[][] nextNextSeeds
private java.util.Vector[][] nextRetain
private byte[][] nextRoot
private org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig
private java.util.Vector[] nextStack
private org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash
private int numLayer
private int[] numLeafs
private int[] otsIndex
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf
private org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf
private boolean used
    private void <init>(org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0, $r1;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r2;
        int[] $r3;
        byte[][] $r4;
        byte[][][] $r5;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r6;
        java.util.Vector[] $r7;
        java.util.Vector[][] $r8;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r9;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r10;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r11;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r12;
        int $i0;
        org.spongycastle.crypto.Digest $r13;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r14;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters getParameters()>();

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyParameters: void <init>(boolean,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>(1, $r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: boolean used> = 0;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $r3 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r3);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index> = $r3;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[][] clone(byte[][])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds> = $r4;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[][] clone(byte[][])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds> = $r4;

        $r5 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[][][] clone(byte[][][])>($r5);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths> = $r5;

        $r5 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] nextAuthPaths>;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[][][] clone(byte[][][])>($r5);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] nextAuthPaths> = $r5;

        $r6 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash> = $r6;

        $r6 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash> = $r6;

        $r7 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack> = $r7;

        $r7 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack> = $r7;

        $r8 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain> = $r8;

        $r8 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] nextRetain>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] nextRetain> = $r8;

        $r5 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep>;

        $r5 = staticinvoke <org.spongycastle.util.Arrays: byte[][][] clone(byte[][][])>($r5);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep> = $r5;

        $r9 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf> = $r9;

        $r9 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf> = $r9;

        $r9 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf> = $r9;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash> = $r3;

        $r2 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS> = $r2;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextRoot>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[][] clone(byte[][])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextRoot> = $r4;

        $r10 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot> = $r10;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentRootSig>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentRootSig> = $r4;

        $r11 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig> = $r11;

        $r12 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider> = $r12;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees> = $r3;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex> = $r3;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K> = $r3;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer> = $i0;

        $r13 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees> = $r13;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength> = $i0;

        $r14 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r14;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs> = $r3;

        return;
    }
    public void <init>(int[], byte[][], byte[][], byte[][][], byte[][][], byte[][][], org.spongycastle.pqc.crypto.gmss.Treehash[][], org.spongycastle.pqc.crypto.gmss.Treehash[][], java.util.Vector[], java.util.Vector[], java.util.Vector[][], java.util.Vector[][], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], int[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootSig[], org.spongycastle.pqc.crypto.gmss.GMSSParameters, org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int[] $r1, $r16, $r25;
        byte[][] $r2, $r3, $r17, $r19;
        byte[][][] $r4, $r5, $r6;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r7, $r8;
        java.util.Vector[] $r9, $r10;
        java.util.Vector[][] $r11, $r12;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r13, $r14, $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r18;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r20;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r21;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r22, $r30;
        byte[] r23, r33, $r35;
        org.spongycastle.crypto.Digest $r24;
        int $i0, $i1, $i2;
        double $d0;
        java.lang.Class $r26;
        java.lang.Object $r27;
        java.util.Vector $r28;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc $r29;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r31;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r32;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig $r34;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: byte[][];

        $r4 := @parameter3: byte[][][];

        $r5 := @parameter4: byte[][][];

        $r6 := @parameter5: byte[][][];

        $r7 := @parameter6: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r8 := @parameter7: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r9 := @parameter8: java.util.Vector[];

        $r10 := @parameter9: java.util.Vector[];

        $r11 := @parameter10: java.util.Vector[][];

        $r12 := @parameter11: java.util.Vector[][];

        $r13 := @parameter12: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r14 := @parameter13: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r15 := @parameter14: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r16 := @parameter15: int[];

        $r17 := @parameter16: byte[][];

        $r18 := @parameter17: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        $r19 := @parameter18: byte[][];

        $r20 := @parameter19: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        $r21 := @parameter20: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r22 := @parameter21: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyParameters: void <init>(boolean,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>(1, $r21);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: boolean used> = 0;

        $r24 = interfaceinvoke $r22.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees> = $r24;

        $r24 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        $i0 = interfaceinvoke $r24.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS> = $r21;

        $r25 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getWinternitzParameter()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex> = $r25;

        $r25 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getK()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K> = $r25;

        $r25 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getHeightOfTrees()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees> = $r25;

        $r21 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $i0 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int getNumOfLayers()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer> = $i0;

        if $r1 != null goto label02;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $r1 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index> = $r1;

        $i0 = 0;

     label01:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i0 >= $i1 goto label03;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $r1[$i0] = 0;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index> = $r1;

     label03:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds> = $r2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds> = $r3;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths> = $r4;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] nextAuthPaths> = $r5;

        if $r6 != null goto label05;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $r4 = newarray (byte[][])[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep> = $r4;

        $i0 = 0;

     label04:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i0 >= $i1 goto label06;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep>;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i1 = $r1[$i0];

        $i1 = $i1 / 2;

        $d0 = (double) $i1;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i1 = (int) $d0;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        $r1 = newarray (int)[2];

        $r1[0] = $i1;

        $r1[1] = $i2;

        $r26 = <java.lang.Byte: java.lang.Class TYPE>;

        $r27 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r26, $r1);

        $r3 = (byte[][]) $r27;

        $r4[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep> = $r6;

     label06:
        if $r9 != null goto label08;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $r9 = newarray (java.util.Vector)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack> = $r9;

        $i0 = 0;

     label07:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i0 >= $i1 goto label09;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack>;

        $r28 = new java.util.Vector;

        specialinvoke $r28.<java.util.Vector: void <init>()>();

        $r9[$i0] = $r28;

        $i0 = $i0 + 1;

        goto label07;

     label08:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack> = $r9;

     label09:
        if $r10 != null goto label11;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r9 = newarray (java.util.Vector)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack> = $r9;

        $i0 = 0;

     label10:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label12;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack>;

        $r28 = new java.util.Vector;

        specialinvoke $r28.<java.util.Vector: void <init>()>();

        $r9[$i0] = $r28;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack> = $r10;

     label12:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash> = $r7;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash> = $r8;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain> = $r11;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] nextRetain> = $r12;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextRoot> = $r17;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider> = $r22;

        if $r18 != null goto label14;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r18 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootCalc)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot> = $r18;

        $i0 = 0;

     label13:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label15;

        $r18 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $r29 = new org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i1 = $i0 + 1;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        $i2 = $i0 + 1;

        $i2 = $r1[$i2];

        $r30 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        specialinvoke $r29.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void <init>(int,int,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>($i1, $i2, $r30);

        $r18[$i0] = $r29;

        $i0 = $i0 + 1;

        goto label13;

     label14:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot> = $r18;

     label15:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentRootSig> = $r19;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $r1 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs> = $r1;

        $i0 = 0;

     label16:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i0 >= $i1 goto label17;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $r25 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i1 = $r25[$i0];

        $i1 = 1 << $i1;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label16;

     label17:
        $r31 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r24 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        specialinvoke $r31.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r24);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r31;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i0 <= 1 goto label22;

        if $r13 != null goto label19;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -2;

        $r13 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf> = $r13;

        $i0 = 0;

     label18:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -2;

        if $i0 >= $i1 goto label20;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $r32 = new org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r24 = interfaceinvoke $r22.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i1 = $i0 + 1;

        $i1 = $r1[$i1];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i2 = $i0 + 2;

        $i2 = $r1[$i2];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        r23 = $r3[$i0];

        specialinvoke $r32.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void <init>(org.spongycastle.crypto.Digest,int,int,byte[])>($r24, $i1, $i2, r23);

        $r13[$i0] = $r32;

        $i0 = $i0 + 1;

        goto label18;

     label19:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf> = $r13;

     label20:
        if $r14 != null goto label23;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r13 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf> = $r13;

        $i0 = 0;

     label21:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label24;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $r32 = new org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r24 = interfaceinvoke $r22.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i1 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i2 = $i0 + 1;

        $i2 = $r1[$i2];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        r23 = $r3[$i0];

        specialinvoke $r32.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void <init>(org.spongycastle.crypto.Digest,int,int,byte[])>($r24, $i1, $i2, r23);

        $r13[$i0] = $r32;

        $i0 = $i0 + 1;

        goto label21;

     label22:
        $r13 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf> = $r13;

        goto label20;

     label23:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf> = $r14;

     label24:
        if $r15 != null goto label26;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r13 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf> = $r13;

        $i0 = 0;

     label25:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label27;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $r32 = new org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r24 = interfaceinvoke $r22.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i1 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i2 = $i0 + 1;

        $i2 = $r1[$i2];

        specialinvoke $r32.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void <init>(org.spongycastle.crypto.Digest,int,int)>($r24, $i1, $i2);

        $r13[$i0] = $r32;

        $i0 = $i0 + 1;

        goto label25;

     label26:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf> = $r15;

     label27:
        if $r16 != null goto label29;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r1 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash> = $r1;

        $i0 = 0;

     label28:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label30;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $r1[$i0] = -1;

        $i0 = $i0 + 1;

        goto label28;

     label29:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash> = $r16;

     label30:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r23 = newarray (byte)[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r33 = newarray (byte)[$i0];

        if $r20 != null goto label32;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i0 = $i0 + -1;

        $r20 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootSig)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig> = $r20;

        $i0 = 0;

     label31:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label33;

        r33 = $r2[$i0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r33, 0, r23, 0, $i1);

        $r31 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r31.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r23);

        $r31 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r33 = virtualinvoke $r31.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r23);

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $r34 = new org.spongycastle.pqc.crypto.gmss.GMSSRootSig;

        $r24 = interfaceinvoke $r22.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i1 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i2 = $i0 + 1;

        $i2 = $r1[$i2];

        specialinvoke $r34.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: void <init>(org.spongycastle.crypto.Digest,int,int)>($r24, $i1, $i2);

        $r20[$i0] = $r34;

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $r34 = $r20[$i0];

        $r35 = $r17[$i0];

        virtualinvoke $r34.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: void initSign(byte[],byte[])>(r33, $r35);

        $i0 = $i0 + 1;

        goto label31;

     label32:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig> = $r20;

     label33:
        return;
    }
    public void <init>(byte[][], byte[][], byte[][][], byte[][][], org.spongycastle.pqc.crypto.gmss.Treehash[][], org.spongycastle.pqc.crypto.gmss.Treehash[][], java.util.Vector[], java.util.Vector[], java.util.Vector[][], java.util.Vector[][], byte[][], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSParameters, org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        byte[][] $r1, $r2, $r11, $r12;
        byte[][][] $r3, $r4;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r5, $r6;
        java.util.Vector[] $r7, $r8;
        java.util.Vector[][] $r9, $r10;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r13;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r14;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r1 := @parameter0: byte[][];

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: byte[][][];

        $r4 := @parameter3: byte[][][];

        $r5 := @parameter4: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r6 := @parameter5: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r7 := @parameter6: java.util.Vector[];

        $r8 := @parameter7: java.util.Vector[];

        $r9 := @parameter8: java.util.Vector[][];

        $r10 := @parameter9: java.util.Vector[][];

        $r11 := @parameter10: byte[][];

        $r12 := @parameter11: byte[][];

        $r13 := @parameter12: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r14 := @parameter13: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void <init>(int[],byte[][],byte[][],byte[][][],byte[][][],byte[][][],org.spongycastle.pqc.crypto.gmss.Treehash[][],org.spongycastle.pqc.crypto.gmss.Treehash[][],java.util.Vector[],java.util.Vector[],java.util.Vector[][],java.util.Vector[][],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],int[],byte[][],org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[],byte[][],org.spongycastle.pqc.crypto.gmss.GMSSRootSig[],org.spongycastle.pqc.crypto.gmss.GMSSParameters,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>(null, $r1, $r2, $r3, $r4, null, $r5, $r6, $r7, $r8, $r9, $r10, null, null, null, null, $r11, null, $r12, null, $r13, $r14);

        return;
    }
    private void computeAuthPaths(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, i1, i2, i3, i4, i5, i6, $i7, $i8;
        byte[] r1, r8, $r11;
        java.lang.Exception r2;
        int[] $r3;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r4;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r5;
        org.spongycastle.pqc.crypto.gmss.Treehash $r6;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r7;
        byte[][] $r9;
        byte[][][] $r10;
        org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature r12;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r13;
        org.spongycastle.crypto.Digest $r14;
        double $d0;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r16;
        boolean $z0;
        java.util.Vector[][] $r17;
        java.util.Vector[] $r18;
        java.util.Vector $r19, $r21;
        java.lang.Object $r20;
        java.io.PrintStream $r22;
        java.lang.StringBuilder $r23;
        java.lang.String $r24;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        i4 = $r3[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        i1 = $r3[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        i2 = $r3[$i0];

        i6 = 0;

     label01:
        i3 = i1 - i2;

        if i6 >= i3 goto label02;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[i6];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: void updateNextSeed(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom)>($r7);

        i6 = i6 + 1;

        goto label01;

     label02:
        i6 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int heightOfPhi(int)>(i4);

        i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r8 = newarray (byte)[i3];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        r8 = $r9[$i0];

        r1 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r8);

        i3 = i6 + 1;

        i3 = i4 >>> i3;

        i3 = i3 & 1;

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r8 = newarray (byte)[$i7];

        $i7 = i1 + -1;

        if i6 >= $i7 goto label03;

        if i3 != 0 goto label03;

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        $r11 = $r9[i6];

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r8, 0, $i7);

     label03:
        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        $r11 = newarray (byte)[$i7];

        if i6 != 0 goto label13;

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        i4 = i4 + -1;

        if $i0 != i4 goto label12;

        r12 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r14 = interfaceinvoke $r13.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        i4 = $r3[$i0];

        specialinvoke r12.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r1, $r14, i4);

        $r11 = virtualinvoke r12.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

     label04:
        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        r1 = $r9[0];

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r1, 0, i4);

     label05:
        i4 = i1 + -1;

        if i6 >= i4 goto label06;

        if i3 != 0 goto label06;

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep>;

        $r9 = $r10[$i0];

        i6 = i6 / 2;

        $d0 = (double) i6;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i6 = (int) $d0;

        r1 = $r9[i6];

        i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r1, 0, i6);

     label06:
        i6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        i6 = i6 + -1;

        if $i0 != i6 goto label20;

        i6 = 1;

     label07:
        i3 = i1 - i2;

        i3 = i3 / 2;

        if i6 > i3 goto label21;

        i3 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int getMinTreehashIndex(int)>($i0);

        if i3 < 0 goto label11;

     label08:
        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r8 = newarray (byte)[i4];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[i3];

        r1 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] getSeedActive()>();

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r8, 0, i4);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r8 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r8);

     label09:
        r12 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

     label10:
        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r14 = interfaceinvoke $r13.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        i4 = $r3[$i0];

        specialinvoke r12.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r8, $r14, i4);

        r8 = virtualinvoke r12.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[i3];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: void update(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom,byte[])>($r7, r8);

     label11:
        i6 = i6 + 1;

        goto label07;

     label12:
        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r1 = newarray (byte)[i4];

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        $r11 = $r9[$i0];

        i4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r1, 0, i4);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r1);

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $r16 = $r15[$i0];

        $r11 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] getLeaf()>();

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $r16 = $r15[$i0];

        virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void initLeafCalc(byte[])>(r1);

        goto label04;

     label13:
        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        $i7 = $i7 << 1;

        r1 = newarray (byte)[$i7];

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        $i7 = i6 + -1;

        $r11 = $r9[$i7];

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r1, 0, $i7);

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] keep>;

        $r9 = $r10[$i0];

        $i7 = i6 + -1;

        $i7 = $i7 / 2;

        $d0 = (double) $i7;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i7 = (int) $d0;

        $r11 = $r9[$i7];

        $i7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        i5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r1, $i7, i5);

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        $i7 = lengthof r1;

        interfaceinvoke $r14.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i7);

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        $i7 = interfaceinvoke $r14.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i7];

        $r9[i6] = r1;

        $r14 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.crypto.Digest messDigestTrees>;

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        r1 = $r9[i6];

        interfaceinvoke $r14.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $i7 = 0;

     label14:
        if $i7 >= i6 goto label05;

        i5 = i1 - i2;

        if $i7 >= i5 goto label15;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i7];

        $z0 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean wasFinished()>();

        if $z0 == 0 goto label18;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i7];

        r1 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] getFirstNode()>();

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        $r11 = $r9[$i7];

        i5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r11, 0, i5);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i7];

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: void destroy()>();

     label15:
        i5 = i1 + -1;

        if $i7 >= i5 goto label16;

        i5 = i1 - i2;

        if $i7 < i5 goto label16;

        $r17 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        $r18 = $r17[$i0];

        i5 = i1 - i2;

        i5 = $i7 - i5;

        $r19 = $r18[i5];

        i5 = virtualinvoke $r19.<java.util.Vector: int size()>();

        if i5 <= 0 goto label16;

        $r17 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        $r18 = $r17[$i0];

        i5 = i1 - i2;

        i5 = $i7 - i5;

        $r19 = $r18[i5];

        $r20 = virtualinvoke $r19.<java.util.Vector: java.lang.Object lastElement()>();

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r9 = $r10[$i0];

        r1 = $r9[$i7];

        i5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, 0, r1, 0, i5);

        $r17 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        $r18 = $r17[$i0];

        i5 = i1 - i2;

        i5 = $i7 - i5;

        $r19 = $r18[i5];

        $r17 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        $r18 = $r17[$i0];

        i5 = i1 - i2;

        i5 = $i7 - i5;

        $r21 = $r18[i5];

        i5 = virtualinvoke $r21.<java.util.Vector: int size()>();

        i5 = i5 + -1;

        virtualinvoke $r19.<java.util.Vector: void removeElementAt(int)>(i5);

     label16:
        i5 = i1 - i2;

        if $i7 >= i5 goto label17;

        i5 = 1 << $i7;

        i5 = i5 * 3;

        i5 = i4 + i5;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i8 = $r3[$i0];

        if i5 >= $i8 goto label17;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r5 = $r4[$i0];

        $r6 = $r5[$i7];

        virtualinvoke $r6.<org.spongycastle.pqc.crypto.gmss.Treehash: void initialize()>();

     label17:
        $i7 = $i7 + 1;

        goto label14;

     label18:
        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Treehash (");

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not finished when needed in AuthPathComputation");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r24);

        goto label15;

     label19:
        r2 := @caughtexception;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.Object)>(r2);

        goto label11;

     label20:
        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        i1 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int getMinTreehashIndex(int)>($i0);

        $r3[$i0] = i1;

     label21:
        return;

        catch java.lang.Exception from label08 to label09 with label19;
        catch java.lang.Exception from label10 to label11 with label19;
    }
    private int getMinTreehashIndex(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, i1, i2, $i3, $i4;
        int[] $r1;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r2;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r3;
        org.spongycastle.pqc.crypto.gmss.Treehash $r4;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        i1 = -1;

        i2 = 0;

     label1:
        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i3 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        $i4 = $r1[$i0];

        $i3 = $i3 - $i4;

        if i2 >= $i3 goto label4;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r3 = $r2[$i0];

        $r4 = $r3[i2];

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean wasInitialized()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r3 = $r2[$i0];

        $r4 = $r3[i2];

        $z0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean wasFinished()>();

        if $z0 != 0 goto label2;

        if i1 != -1 goto label3;

        i1 = i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r3 = $r2[$i0];

        $r4 = $r3[i2];

        $i3 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.Treehash: int getLowestNodeHeight()>();

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r3 = $r2[$i0];

        $r4 = $r3[i1];

        $i4 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.Treehash: int getLowestNodeHeight()>();

        if $i3 >= $i4 goto label2;

        i1 = i2;

        goto label2;

     label4:
        return i1;
    }
    private int heightOfPhi(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, i1, i2, $i3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return -1;

     label1:
        i1 = 0;

        i2 = 1;

     label2:
        $i3 = $i0 % i2;

        if $i3 != 0 goto label3;

        i2 = i2 * 2;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i0 = i1 + -1;

        return $i0;
    }
    private void nextKey(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i1 = $r1[$i0];

        $i1 = $i1 + 1;

        $r1[$i0] = $i1;

     label1:
        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i1 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i2 = $r1[$i0];

        if $i1 != $i2 goto label2;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        if $i1 == 1 goto label3;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void nextTree(int)>($i0);

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $r1[$i0] = 0;

        return;

     label2:
        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void updateKey(int)>($i0);

     label3:
        return;
    }
    private void nextTree(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, $i1, $i2, $i3;
        byte[] r1, $r19;
        java.lang.Exception r2;
        int[] $r3;
        boolean z0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r4;
        byte[][] $r5;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r6;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig $r7;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r8, $r9;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r10;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r11;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r12, $r14;
        org.spongycastle.pqc.crypto.gmss.Treehash $r13;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc $r16;
        java.io.PrintStream $r17;
        byte[][][] $r18;
        java.util.Vector[][] $r20;
        java.util.Vector[] $r21, $r22;
        java.util.Vector $r23;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label23;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i1 = $i0 + -1;

        $i2 = $r3[$i1];

        $i2 = $i2 + 1;

        $r3[$i1] = $i2;

        z0 = 1;

        $i1 = $i0;

     label01:
        $i1 = $i1 + -1;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i2 = $r3[$i1];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i3 = $r3[$i1];

        if $i2 >= $i3 goto label02;

        z0 = 0;

     label02:
        if z0 == 0 goto label03;

        if $i1 > 0 goto label01;

     label03:
        if z0 != 0 goto label23;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        r1 = $r5[$i0];

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r1);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $i1 = $i0 + -1;

        $r7 = $r6[$i1];

        virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: boolean updateSign()>();

        if $i0 <= 1 goto label04;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $i1 = $i0 + -1;

        $i1 = $i1 + -1;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $i2 = $i0 + -1;

        $i2 = $i2 + -1;

        $r10 = $r9[$i2];

        $r10 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r8[$i1] = $r10;

     label04:
        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $i1 = $i0 + -1;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $i2 = $i0 + -1;

        $r10 = $r9[$i2];

        $r10 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r8[$i1] = $r10;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $i1 = $i0 + -1;

        $i1 = $r3[$i1];

        if $i1 < 0 goto label15;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i1 = $i0 + -1;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i2 = $i0 + -1;

        $r10 = $r9[$i2];

        $r10 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r8[$i1] = $r10;

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i1 = $i0 + -1;

        $r10 = $r8[$i1];

        r1 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] getLeaf()>();

     label05:
        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

     label06:
        $i1 = $i0 + -1;

     label07:
        $r12 = $r11[$i1];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

     label08:
        $i1 = $i0 + -1;

     label09:
        $i1 = $r3[$i1];

        $r13 = $r12[$i1];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r13.<org.spongycastle.pqc.crypto.gmss.Treehash: void update(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom,byte[])>($r4, r1);

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

     label10:
        $i1 = $i0 + -1;

     label11:
        $r12 = $r11[$i1];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

     label12:
        $i1 = $i0 + -1;

     label13:
        $i1 = $r3[$i1];

        $r13 = $r12[$i1];

        z0 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean wasFinished()>();

     label14:
        if z0 == 0 goto label15;

     label15:
        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void updateNextNextAuthRoot(int)>($i0);

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentRootSig>;

        $i1 = $i0 + -1;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $i2 = $i0 + -1;

        $r7 = $r6[$i2];

        r1 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[] getSig()>();

        $r5[$i1] = r1;

        $i1 = 0;

     label16:
        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i2 = $r3[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        $i3 = $r3[$i0];

        $i2 = $i2 - $i3;

        if $i1 >= $i2 goto label18;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $r12 = $r11[$i0];

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash>;

        $i2 = $i0 + -1;

        $r14 = $r11[$i2];

        $r13 = $r14[$i1];

        $r12[$i1] = $r13;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] nextTreehash>;

        $i2 = $i0 + -1;

        $r12 = $r11[$i2];

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i2 = $i0 + -1;

        $r16 = $r15[$i2];

        $r14 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r13 = $r14[$i1];

        $r12[$i1] = $r13;

        $i1 = $i1 + 1;

        goto label16;

     label17:
        r2 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.Object)>(r2);

        goto label15;

     label18:
        $i1 = 0;

     label19:
        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        $i2 = $r3[$i0];

        if $i1 >= $i2 goto label20;

        $r18 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] nextAuthPaths>;

        $i2 = $i0 + -1;

        $r5 = $r18[$i2];

        r1 = $r5[$i1];

        $r18 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r5 = $r18[$i0];

        $r19 = $r5[$i1];

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r19, 0, $i2);

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i2 = $i0 + -1;

        $r16 = $r15[$i2];

        $r5 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getAuthPath()>();

        r1 = $r5[$i1];

        $r18 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] nextAuthPaths>;

        $i2 = $i0 + -1;

        $r5 = $r18[$i2];

        $r19 = $r5[$i1];

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r19, 0, $i2);

        $i1 = $i1 + 1;

        goto label19;

     label20:
        $i1 = 0;

     label21:
        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        $i2 = $r3[$i0];

        $i2 = $i2 + -1;

        if $i1 >= $i2 goto label22;

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] currentRetain>;

        $r21 = $r20[$i0];

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] nextRetain>;

        $i2 = $i0 + -1;

        $r22 = $r20[$i2];

        $r23 = $r22[$i1];

        $r21[$i1] = $r23;

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[][] nextRetain>;

        $i2 = $i0 + -1;

        $r21 = $r20[$i2];

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i2 = $i0 + -1;

        $r16 = $r15[$i2];

        $r22 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        $r23 = $r22[$i1];

        $r21[$i1] = $r23;

        $i1 = $i1 + 1;

        goto label21;

     label22:
        $r21 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] currentStack>;

        $r22 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack>;

        $i1 = $i0 + -1;

        $r23 = $r22[$i1];

        $r21[$i0] = $r23;

        $r21 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: java.util.Vector[] nextStack>;

        $i1 = $i0 + -1;

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i2 = $i0 + -1;

        $r16 = $r15[$i2];

        $r23 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector getStack()>();

        $r21[$i1] = $r23;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextRoot>;

        $i1 = $i0 + -1;

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i2 = $i0 + -1;

        $r16 = $r15[$i2];

        r1 = virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] getRoot()>();

        $r5[$i1] = r1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r1 = newarray (byte)[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r1 = newarray (byte)[$i1];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        $i1 = $i0 + -1;

        $r19 = $r5[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r1, 0, $i1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r1 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r1);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        $i1 = $i0 + -1;

        $r7 = $r6[$i1];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextRoot>;

        $i1 = $i0 + -1;

        $r19 = $r5[$i1];

        virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: void initSign(byte[],byte[])>(r1, $r19);

        $i0 = $i0 + -1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void nextKey(int)>($i0);

     label23:
        return;

        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
    }
    private void updateKey(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, i1, $i2, $i3;
        java.lang.Exception r1;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r2, $r3;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r4;
        double $d0, $d1;
        int[] $r5;
        byte[] $r6;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r7;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r8;
        org.spongycastle.pqc.crypto.gmss.Treehash $r9;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r10;
        boolean $z0;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r11;
        org.spongycastle.crypto.Digest $r12;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r13;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig $r14;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc $r16;
        java.util.Vector $r17;
        java.io.PrintStream $r18;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void computeAuthPaths(int)>($i0);

        if $i0 <= 0 goto label17;

        if $i0 <= 1 goto label01;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        i1 = $i0 + -1;

        i1 = i1 + -1;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $i3 = $i0 + -1;

        $i3 = $i3 + -1;

        $r4 = $r3[$i3];

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r2[i1] = $r4;

     label01:
        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        i1 = $i0 + -1;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf>;

        $i3 = $i0 + -1;

        $r4 = $r3[$i3];

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r2[i1] = $r4;

        i1 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int getNumLeafs(int)>($i0);

        i1 = i1 * 2;

        $d0 = (double) i1;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] heightOfTrees>;

        i1 = $i0 + -1;

        i1 = $r5[i1];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] K>;

        $i3 = $i0 + -1;

        $i3 = $r5[$i3];

        i1 = i1 - $i3;

        $d1 = (double) i1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i1 = (int) $d0;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i3 = $r5[$i0];

        $i3 = $i3 % i1;

        if $i3 != 1 goto label16;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i3 = $r5[$i0];

        if $i3 <= 1 goto label12;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $i3 = $i0 + -1;

        $i3 = $r5[$i3];

        if $i3 < 0 goto label12;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i3 = $i0 + -1;

        $r4 = $r2[$i3];

        $r6 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] getLeaf()>();

     label02:
        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

     label03:
        $i3 = $i0 + -1;

     label04:
        $r8 = $r7[$i3];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

     label05:
        $i3 = $i0 + -1;

     label06:
        $i3 = $r5[$i3];

        $r9 = $r8[$i3];

        $r10 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        virtualinvoke $r9.<org.spongycastle.pqc.crypto.gmss.Treehash: void update(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom,byte[])>($r10, $r6);

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

     label07:
        $i3 = $i0 + -1;

     label08:
        $r8 = $r7[$i3];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

     label09:
        $i3 = $i0 + -1;

     label10:
        $i3 = $r5[$i3];

        $r9 = $r8[$i3];

        $z0 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean wasFinished()>();

     label11:
        if $z0 == 0 goto label12;

     label12:
        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $i3 = $i0 + -1;

        $i2 = $i0 + -1;

        $i2 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int getMinTreehashIndex(int)>($i2);

        $r5[$i3] = $i2;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $i3 = $i0 + -1;

        $i3 = $r5[$i3];

        if $i3 < 0 goto label13;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.Treehash[][] currentTreehash>;

        $i3 = $i0 + -1;

        $r8 = $r7[$i3];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        $i3 = $i0 + -1;

        $i3 = $r5[$i3];

        $r9 = $r8[$i3];

        $r6 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] getSeedActive()>();

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i3 = $i0 + -1;

        $r4 = new org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r12 = interfaceinvoke $r11.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i2 = $i0 + -1;

        $i2 = $r5[$i2];

        specialinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void <init>(org.spongycastle.crypto.Digest,int,int,byte[])>($r12, $i2, i1, $r6);

        $r2[$i3] = $r4;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        i1 = $i0 + -1;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i3 = $i0 + -1;

        $r4 = $r3[$i3];

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r2[i1] = $r4;

     label13:
        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig>;

        i1 = $i0 + -1;

        $r14 = $r13[i1];

        virtualinvoke $r14.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: boolean updateSign()>();

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        i1 = $r5[$i0];

        if i1 != 1 goto label14;

        $r15 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        i1 = $i0 + -1;

        $r16 = $r15[i1];

        $r17 = new java.util.Vector;

        specialinvoke $r17.<java.util.Vector: void <init>()>();

        virtualinvoke $r16.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initialize(java.util.Vector)>($r17);

     label14:
        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void updateNextNextAuthRoot(int)>($i0);

        return;

     label15:
        r1 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.Object)>(r1);

        goto label12;

     label16:
        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] minTreehash>;

        i1 = $i0 + -1;

        i1 = $r5[i1];

        if i1 < 0 goto label13;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        i1 = $i0 + -1;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf>;

        $i3 = $i0 + -1;

        $r4 = $r3[$i3];

        $r4 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()>();

        $r2[i1] = $r4;

        goto label13;

     label17:
        return;

        catch java.lang.Exception from label02 to label03 with label15;
        catch java.lang.Exception from label04 to label05 with label15;
        catch java.lang.Exception from label06 to label07 with label15;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Exception from label10 to label11 with label15;
    }
    private void updateNextNextAuthRoot(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0, $i1;
        org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature r1;
        byte[] r2, $r10;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r3;
        byte[][] $r4;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r5;
        org.spongycastle.crypto.Digest $r6;
        int[] $r7;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r8;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc $r9;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r11;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r12;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int mdLength>;

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        $i1 = $i0 + -1;

        r2 = $r4[$i1];

        r2 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r2);

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label1;

        r1 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r6 = interfaceinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] otsIndex>;

        $i1 = $r7[$i0];

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r2, $r6, $i1);

        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i1 = $i0 + -1;

        $r9 = $r8[$i1];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        $i0 = $i0 + -1;

        r2 = $r4[$i0];

        $r10 = virtualinvoke r1.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

        virtualinvoke $r9.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[],byte[])>(r2, $r10);

        return;

     label1:
        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot>;

        $i1 = $i0 + -1;

        $r9 = $r8[$i1];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        $i1 = $i0 + -1;

        r2 = $r4[$i1];

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $i1 = $i0 + -1;

        $r12 = $r11[$i1];

        $r10 = virtualinvoke $r12.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] getLeaf()>();

        virtualinvoke $r9.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[],byte[])>(r2, $r10);

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf>;

        $i1 = $i0 + -1;

        $r12 = $r11[$i1];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] nextNextSeeds>;

        $i0 = $i0 + -1;

        r2 = $r4[$i0];

        virtualinvoke $r12.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void initLeafCalc(byte[])>(r2);

        return;
    }
    public byte[][][] getCurrentAuthPaths()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        byte[][][] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][][] currentAuthPaths>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[][][] clone(byte[][][])>($r1);

        return $r1;
    }
    public byte[][] getCurrentSeeds()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        byte[][] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentSeeds>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[][] clone(byte[][])>($r1);

        return $r1;
    }
    public int getIndex(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public int[] getIndex()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int[] r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] index>;

        return r1;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider getName()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        return r1;
    }
    public int getNumLeafs(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: int[] numLeafs>;

        $i0 = $r1[$i0];

        return $i0;
    }
    public byte[] getSubtreeRootSig(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        int $i0;
        byte[][] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        $i0 := @parameter0: int;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: byte[][] currentRootSig>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public boolean isUsed()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: boolean used>;

        return z0;
    }
    public void markUsed()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: boolean used> = 1;

        return;
    }
    public org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters nextKey()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r0, r1;
        int $i0;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        r1 = new org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void <init>(org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters)>(r0);

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $i0 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int getNumOfLayers()>();

        $i0 = $i0 + -1;

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void nextKey(int)>($i0);

        return r1;
    }
