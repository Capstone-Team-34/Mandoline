org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
public static final java.lang.String OID
private int[] K
private byte[][] currentRootSigs
private byte[][] currentSeeds
private org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider
private org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS
private org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams
private org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom
private int[] heightOfTrees
private boolean initialized
private int mdLength
private org.spongycastle.crypto.Digest messDigestTree
private byte[][] nextNextSeeds
private int numLayer
private int[] otsIndex
    public void <init>(org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: boolean initialized> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider> = $r1;

        $r2 = interfaceinvoke $r1.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.crypto.Digest messDigestTree> = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength> = $i0;

        $r3 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.crypto.Digest messDigestTree>;

        specialinvoke $r3.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r3;

        return;
    }
    private org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters r1;
        byte[][][] r2, r3;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] r4, r5;
        java.util.Vector[] r6, r7, $r26;
        java.util.Vector[][] r8, r9;
        java.lang.Exception r10;
        org.spongycastle.pqc.crypto.gmss.GMSSPublicKeyParameters r11;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        int[] $r12;
        java.lang.Class $r13;
        java.lang.Object $r14;
        byte[][] $r15, r18, r19, $r20;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r16;
        java.util.Vector $r17;
        byte[] $r21, $r22;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r23, $r25;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r24;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r27;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r28;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: boolean initialized>;

        if $z0 != 0 goto label01;

        specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: void initializeDefault()>();

     label01:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        r2 = newarray (byte[][])[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        r3 = newarray (byte[][])[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        r4 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash[])[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        r5 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash[])[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        r6 = newarray (java.util.Vector)[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        r7 = newarray (java.util.Vector)[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        r8 = newarray (java.util.Vector[])[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        r9 = newarray (java.util.Vector[])[$i0];

        $i0 = 0;

     label02:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        if $i0 >= $i1 goto label05;

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i1 = $r12[$i0];

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i1;

        $r12[1] = $i2;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        $r15 = (byte[][]) $r14;

        r2[$i0] = $r15;

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i1 = $r12[$i0];

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i2 = $r12[$i0];

        $i1 = $i1 - $i2;

        $r16 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash)[$i1];

        r4[$i0] = $r16;

        if $i0 <= 0 goto label03;

        $i1 = $i0 + -1;

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i2 = $r12[$i0];

        $i3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i2;

        $r12[1] = $i3;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        $r15 = (byte[][]) $r14;

        r3[$i1] = $r15;

        $i1 = $i0 + -1;

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i2 = $r12[$i0];

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i3 = $r12[$i0];

        $i2 = $i2 - $i3;

        $r16 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash)[$i2];

        r5[$i1] = $r16;

     label03:
        $r17 = new java.util.Vector;

        specialinvoke $r17.<java.util.Vector: void <init>()>();

        r6[$i0] = $r17;

        if $i0 <= 0 goto label04;

        $i1 = $i0 + -1;

        $r17 = new java.util.Vector;

        specialinvoke $r17.<java.util.Vector: void <init>()>();

        r7[$i1] = $r17;

     label04:
        $i0 = $i0 + 1;

        goto label02;

     label05:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i0;

        $r12[1] = $i1;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        r18 = (byte[][]) $r14;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i0;

        $r12[1] = $i1;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        $r15 = (byte[][]) $r14;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i0;

        $r12[1] = $i1;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        r19 = (byte[][]) $r14;

        $i0 = 0;

     label06:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        if $i0 >= $i1 goto label07;

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentSeeds>;

        $r21 = $r20[$i0];

        $r22 = r19[$i0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i1);

        $i0 = $i0 + 1;

        goto label06;

     label07:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r12 = newarray (int)[2];

        $r12[0] = $i0;

        $r12[1] = $i1;

        $r13 = <java.lang.Byte: java.lang.Class TYPE>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r13, $r12);

        $r20 = (byte[][]) $r14;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentRootSigs> = $r20;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

     label08:
        if $i0 < 0 goto label20;

        r23 = new org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i1 = $r12[$i0];

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i2 = $r12[$i0];

        $r24 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        specialinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void <init>(int,int,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>($i1, $i2, $r24);

     label09:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

     label10:
        $i1 = $i1 + -1;

        if $i0 != $i1 goto label15;

     label11:
        $r17 = r6[$i0];

        $r21 = r19[$i0];

        $r25 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc generateCurrentAuthpathAndRoot(byte[],java.util.Vector,byte[],int)>(null, $r17, $r21, $i0);

     label12:
        r23 = $r25;

     label13:
        $i1 = 0;

     label14:
        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i2 = $r12[$i0];

        if $i1 >= $i2 goto label19;

        $r20 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getAuthPath()>();

        $r21 = $r20[$i1];

        $r20 = r2[$i0];

        $r22 = $r20[$i1];

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i2);

        $i1 = $i1 + 1;

        goto label14;

     label15:
        $i1 = $i0 + 1;

     label16:
        $r21 = r18[$i1];

        $r17 = r6[$i0];

        $r22 = r19[$i0];

        $r25 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc generateCurrentAuthpathAndRoot(byte[],java.util.Vector,byte[],int)>($r21, $r17, $r22, $i0);

     label17:
        r23 = $r25;

        goto label13;

     label18:
        r10 := @caughtexception;

        virtualinvoke r10.<java.lang.Exception: void printStackTrace()>();

        goto label13;

     label19:
        $r26 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        r8[$i0] = $r26;

        $r16 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        r4[$i0] = $r16;

        $r21 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] getRoot()>();

        $r22 = r18[$i0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i1);

        $i0 = $i0 + -1;

        goto label08;

     label20:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -2;

     label21:
        if $i0 < 0 goto label24;

        $r17 = r7[$i0];

        $i1 = $i0 + 1;

        $r21 = r19[$i1];

        $i1 = $i0 + 1;

        r23 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc generateNextAuthpathAndRoot(java.util.Vector,byte[],int)>($r17, $r21, $i1);

        $i1 = 0;

     label22:
        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i2 = $i0 + 1;

        $i2 = $r12[$i2];

        if $i1 >= $i2 goto label23;

        $r20 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getAuthPath()>();

        $r21 = $r20[$i1];

        $r20 = r3[$i0];

        $r22 = $r20[$i1];

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i2);

        $i1 = $i1 + 1;

        goto label22;

     label23:
        $r26 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        r9[$i0] = $r26;

        $r16 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        r5[$i0] = $r16;

        $r21 = virtualinvoke r23.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[] getRoot()>();

        $r22 = $r15[$i0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i1);

        $i1 = $i0 + 1;

        $r21 = r19[$i1];

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] nextNextSeeds>;

        $r22 = $r20[$i0];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i1);

        $i0 = $i0 + -1;

        goto label21;

     label24:
        r11 = new org.spongycastle.pqc.crypto.gmss.GMSSPublicKeyParameters;

        $r21 = r18[0];

        $r27 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        specialinvoke r11.<org.spongycastle.pqc.crypto.gmss.GMSSPublicKeyParameters: void <init>(byte[],org.spongycastle.pqc.crypto.gmss.GMSSParameters)>($r21, $r27);

        r1 = new org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters;

        r18 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentSeeds>;

        r19 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] nextNextSeeds>;

        $r20 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentRootSigs>;

        $r27 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $r24 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters: void <init>(byte[][],byte[][],byte[][][],byte[][][],org.spongycastle.pqc.crypto.gmss.Treehash[][],org.spongycastle.pqc.crypto.gmss.Treehash[][],java.util.Vector[],java.util.Vector[],java.util.Vector[][],java.util.Vector[][],byte[][],byte[][],org.spongycastle.pqc.crypto.gmss.GMSSParameters,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>(r18, r19, r2, r3, r4, r5, r6, r7, r8, r9, $r15, $r20, $r27, $r24);

        $r28 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r28.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r11, r1);

        return $r28;

        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label11 to label12 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }
    private org.spongycastle.pqc.crypto.gmss.GMSSRootCalc generateCurrentAuthpathAndRoot(byte[], java.util.Vector, byte[], int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        byte[] $r1, $r3, r6;
        java.util.Vector $r2;
        int $i0, $i1, $i2, i3, $i4, $i5;
        org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify r4;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r5;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r7;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r8;
        int[] $r9;
        org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature r10;
        org.spongycastle.crypto.Digest $r11;
        byte[][] $r12;
        boolean $z0;
        java.io.PrintStream $r13;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.util.Vector;

        $r3 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        r6 = newarray (byte)[$i1];

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        r6 = newarray (byte)[$i1];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r6 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r3);

        r8 = new org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i1 = $r9[$i0];

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i2 = $r9[$i0];

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        specialinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void <init>(int,int,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>($i1, $i2, $r5);

        virtualinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initialize(java.util.Vector)>($r2);

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label4;

        r10 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r11 = interfaceinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex>;

        $i1 = $r9[$i0];

        specialinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r6, $r11, $i1);

        $r1 = virtualinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

     label1:
        virtualinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[])>($r1);

        $i1 = 3;

        $i2 = 0;

        i3 = 1;

     label2:
        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i4 = $r9[$i0];

        $i4 = 1 << $i4;

        if i3 >= $i4 goto label5;

        if i3 != $i1 goto label3;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i4 = $r9[$i0];

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i5 = $r9[$i0];

        $i4 = $i4 - $i5;

        if $i2 >= $i4 goto label3;

        virtualinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initializeTreehashSeed(byte[],int)>($r3, $i2);

        $i1 = $i1 * 2;

        $i2 = $i2 + 1;

     label3:
        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r1 = virtualinvoke $r7.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r3);

        r10 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r11 = interfaceinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex>;

        $i4 = $r9[$i0];

        specialinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>($r1, $r11, $i4);

        $r1 = virtualinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

        virtualinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[])>($r1);

        i3 = i3 + 1;

        goto label2;

     label4:
        r10 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r11 = interfaceinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex>;

        $i1 = $r9[$i0];

        specialinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r6, $r11, $i1);

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentRootSigs>;

        r6 = virtualinvoke r10.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getSignature(byte[])>($r1);

        $r12[$i0] = r6;

        r4 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r11 = interfaceinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex>;

        $i1 = $r9[$i0];

        specialinvoke r4.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify: void <init>(org.spongycastle.crypto.Digest,int)>($r11, $i1);

        $r12 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentRootSigs>;

        r6 = $r12[$i0];

        $r1 = virtualinvoke r4.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify: byte[] Verify(byte[],byte[])>($r1, r6);

        goto label1;

     label5:
        $z0 = virtualinvoke r8.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean wasFinished()>();

        if $z0 == 0 goto label6;

        return r8;

     label6:
        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("Baum noch nicht fertig konstruiert!!!");

        return null;
    }
    private org.spongycastle.pqc.crypto.gmss.GMSSRootCalc generateNextAuthpathAndRoot(java.util.Vector, byte[], int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        java.util.Vector $r1;
        byte[] $r2, r5;
        int $i0, $i1, $i2, i3, $i4, $i5;
        org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature r3;
        org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider $r4;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc r6;
        int[] $r7;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r8;
        org.spongycastle.crypto.Digest $r9;
        boolean $z0;
        java.io.PrintStream $r10;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r1 := @parameter0: java.util.Vector;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        r5 = newarray (byte)[$i1];

        r6 = new org.spongycastle.pqc.crypto.gmss.GMSSRootCalc;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i1 = $r7[$i0];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i2 = $r7[$i0];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        specialinvoke r6.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void <init>(int,int,org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider)>($i1, $i2, $r4);

        virtualinvoke r6.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initialize(java.util.Vector)>($r1);

        $i1 = 3;

        $i2 = 0;

        i3 = 0;

     label1:
        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i4 = $r7[$i0];

        $i4 = 1 << $i4;

        if i3 >= $i4 goto label3;

        if i3 != $i1 goto label2;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees>;

        $i4 = $r7[$i0];

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K>;

        $i5 = $r7[$i0];

        $i4 = $i4 - $i5;

        if $i2 >= $i4 goto label2;

        virtualinvoke r6.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void initializeTreehashSeed(byte[],int)>($r2, $i2);

        $i1 = $i1 * 2;

        $i2 = $i2 + 1;

     label2:
        $r8 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r5 = virtualinvoke $r8.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r2);

        r3 = new org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider>;

        $r9 = interfaceinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider: org.spongycastle.crypto.Digest get()>();

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex>;

        $i4 = $r7[$i0];

        specialinvoke r3.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: void <init>(byte[],org.spongycastle.crypto.Digest,int)>(r5, $r9, $i4);

        r5 = virtualinvoke r3.<org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSignature: byte[] getPublicKey()>();

        virtualinvoke r6.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: void update(byte[])>(r5);

        i3 = i3 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r6.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: boolean wasFinished()>();

        if $z0 == 0 goto label4;

        return r6;

     label4:
        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("N\ufffdchster Baum noch nicht fertig konstruiert!!!");

        return null;
    }
    private void initializeDefault()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        int[] r1, r2, r3;
        org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters r4;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r5;
        int $i0;
        java.security.SecureRandom $r6;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        r1 = newarray (int)[4];

        r1[0] = 10;

        r1[1] = 10;

        r1[2] = 10;

        r1[3] = 10;

        r3 = newarray (int)[4];

        r3[0] = 3;

        r3[1] = 3;

        r3[2] = 3;

        r3[3] = 3;

        r2 = newarray (int)[4];

        r2[0] = 2;

        r2[1] = 2;

        r2[2] = 2;

        r2[3] = 2;

        r4 = new org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters;

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        $r5 = new org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 = lengthof r1;

        specialinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void <init>(int,int[],int[],int[])>($i0, r1, r3, r2);

        specialinvoke r4.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>($r6, $r5);

        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>(r4);

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair()>();

        return $r1;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>($r1);

        return;
    }
    public void initialize(int, java.security.SecureRandom)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        int $i0;
        java.security.SecureRandom $r1;
        int[] r2, r3, r4;
        org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters r5;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r6;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        if $i0 > 10 goto label2;

        r2 = newarray (int)[1];

        r2[0] = 10;

        r3 = newarray (int)[1];

        r3[0] = 3;

        r4 = newarray (int)[1];

        r4[0] = 2;

        r5 = new org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters;

        $r6 = new org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 = lengthof r2;

        specialinvoke $r6.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void <init>(int,int[],int[],int[])>($i0, r2, r3, r4);

        specialinvoke r5.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>($r1, $r6);

     label1:
        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>(r5);

        return;

     label2:
        if $i0 > 20 goto label3;

        r2 = newarray (int)[2];

        r2[0] = 10;

        r2[1] = 10;

        r3 = newarray (int)[2];

        r3[0] = 5;

        r3[1] = 4;

        r4 = newarray (int)[2];

        r4[0] = 2;

        r4[1] = 2;

        r5 = new org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters;

        $r6 = new org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 = lengthof r2;

        specialinvoke $r6.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void <init>(int,int[],int[],int[])>($i0, r2, r3, r4);

        specialinvoke r5.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>($r1, $r6);

        goto label1;

     label3:
        r2 = newarray (int)[4];

        r2[0] = 10;

        r2[1] = 10;

        r2[2] = 10;

        r2[3] = 10;

        r3 = newarray (int)[4];

        r3[0] = 9;

        r3[1] = 9;

        r3[2] = 9;

        r3[3] = 3;

        r4 = newarray (int)[4];

        r4[0] = 2;

        r4[1] = 2;

        r4[2] = 2;

        r4[3] = 2;

        r5 = new org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters;

        $r6 = new org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $i0 = lengthof r2;

        specialinvoke $r6.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void <init>(int,int[],int[],int[])>($i0, r2, r3, r4);

        specialinvoke r5.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.gmss.GMSSParameters)>($r1, $r6);

        goto label1;
    }
    public void initialize(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator r0;
        java.security.SecureRandom r1;
        org.spongycastle.crypto.KeyGenerationParameters $r2;
        org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters $r3;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r4, $r5;
        int $i0, $i1;
        int[] $r6, $r7, $r8;
        java.lang.Class $r9;
        java.lang.Object $r10;
        byte[][] $r11;
        byte[] $r12;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r13;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator;

        $r2 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r3 = (org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters) $r2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams> = $r3;

        $r4 = new org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams>;

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters getParameters()>();

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int getNumOfLayers()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams>;

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getHeightOfTrees()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams>;

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters getParameters()>();

        $r7 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getWinternitzParameter()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams>;

        $r5 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters: org.spongycastle.pqc.crypto.gmss.GMSSParameters getParameters()>();

        $r8 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getK()>();

        specialinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: void <init>(int,int[],int[],int[])>($i0, $r6, $r7, $r8);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS> = $r4;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int getNumOfLayers()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer> = $i0;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $r6 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getHeightOfTrees()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] heightOfTrees> = $r6;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $r6 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getWinternitzParameter()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] otsIndex> = $r6;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssPS>;

        $r6 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getK()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int[] K> = $r6;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, $r6);

        $r11 = (byte[][]) $r10;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentSeeds> = $r11;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        $i0 = $i0 + -1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int mdLength>;

        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, $r6);

        $r11 = (byte[][]) $r10;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] nextNextSeeds> = $r11;

        r1 = new java.security.SecureRandom;

        specialinvoke r1.<java.security.SecureRandom: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: int numLayer>;

        if $i0 >= $i1 goto label2;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentSeeds>;

        $r12 = $r11[$i0];

        virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>($r12);

        $r13 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r11 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: byte[][] currentSeeds>;

        $r12 = $r11[$i0];

        virtualinvoke $r13.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r12);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0.<org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator: boolean initialized> = 1;

        return;
    }
