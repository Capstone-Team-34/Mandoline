org.spongycastle.pqc.crypto.gmss.util.GMSSUtil extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public int bytesToIntLittleEndian(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        byte[] $r1;
        byte $b0;
        int $i1, $i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $r1 := @parameter0: byte[];

        $b0 = $r1[0];

        $i1 = $b0 & 255;

        $b0 = $r1[1];

        $i2 = $b0 & 255;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        $b0 = $r1[2];

        $i2 = $b0 & 255;

        $i2 = $i2 << 16;

        $i1 = $i1 | $i2;

        $b0 = $r1[3];

        $i2 = $b0 & 255;

        $i2 = $i2 << 24;

        $i1 = $i1 | $i2;

        return $i1;
    }
    public int bytesToIntLittleEndian(byte[], int)
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        byte[] $r1;
        int i0, i1, $i3;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 = i0 + 1;

        $b2 = $r1[i0];

        $i3 = $b2 & 255;

        i0 = i1 + 1;

        $b2 = $r1[i1];

        i1 = $b2 & 255;

        i1 = i1 << 8;

        i1 = $i3 | i1;

        $i3 = i0 + 1;

        $b2 = $r1[i0];

        i0 = $b2 & 255;

        i0 = i0 << 16;

        i0 = i1 | i0;

        $b2 = $r1[$i3];

        $i3 = $b2 & 255;

        $i3 = $i3 << 24;

        i0 = i0 | $i3;

        return i0;
    }
    public byte[] concatenateArray(byte[][])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        byte[][] $r1;
        byte[] r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $r1 := @parameter0: byte[][];

        $i0 = lengthof $r1;

        r2 = $r1[0];

        $i1 = lengthof r2;

        $i0 = $i0 * $i1;

        r2 = newarray (byte)[$i0];

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label2;

        $r3 = $r1[$i1];

        $r4 = $r1[$i1];

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, $i0, $i2);

        $r3 = $r1[$i1];

        $i2 = lengthof $r3;

        $i0 = $i0 + $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r2;
    }
    public int getLog(int)
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        int $i0, i1, i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $i0 := @parameter0: int;

        i1 = 1;

        i2 = 2;

     label1:
        if i2 >= $i0 goto label2;

        i2 = i2 << 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
    public byte[] intToBytesLittleEndian(int)
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        int $i0, $i1;
        byte[] r1;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $i0 := @parameter0: int;

        r1 = newarray (byte)[4];

        $i1 = $i0 & 255;

        $b2 = (byte) $i1;

        r1[0] = $b2;

        $i1 = $i0 >> 8;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        r1[1] = $b2;

        $i1 = $i0 >> 16;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        r1[2] = $b2;

        $i0 = $i0 >> 24;

        $i0 = $i0 & 255;

        $b2 = (byte) $i0;

        r1[3] = $b2;

        return r1;
    }
    public void printArray(java.lang.String, byte[])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        java.lang.String $r1;
        byte[] $r2;
        java.io.PrintStream $r3;
        int i0, i1, $i2;
        java.lang.StringBuilder $r4;
        byte $b3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label2;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $b3 = $r2[i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b3);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        i0 = i0 + 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void printArray(java.lang.String, byte[][])
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        java.lang.String $r1;
        byte[][] $r2;
        java.io.PrintStream $r3;
        int i0, i1, $i2, $i3;
        byte[] $r4;
        java.lang.StringBuilder $r5;
        byte $b4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[][];

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label4;

        $i2 = 0;

     label2:
        $r4 = $r2[0];

        $i3 = lengthof $r4;

        if $i2 >= $i3 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r4 = $r2[i1];

        $b4 = $r4[$i2];

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b4);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        i0 = i0 + 1;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
    public boolean testPowerOfTwo(int)
    {
        org.spongycastle.pqc.crypto.gmss.util.GMSSUtil r0;
        int $i0, i1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.util.GMSSUtil;

        $i0 := @parameter0: int;

        i1 = 1;

     label1:
        if i1 >= $i0 goto label2;

        i1 = i1 << 1;

        goto label1;

     label2:
        if $i0 != i1 goto label3;

        return 1;

     label3:
        return 0;
    }
