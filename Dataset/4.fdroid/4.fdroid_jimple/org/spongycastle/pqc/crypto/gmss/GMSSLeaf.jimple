org.spongycastle.pqc.crypto.gmss.GMSSLeaf extends java.lang.Object
private byte[] concHashs
private org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom
private int i
private int j
private int keysize
private byte[] leaf
private int mdsize
private org.spongycastle.crypto.Digest messDigestOTS
byte[] privateKeyOTS
private byte[] seed
private int steps
private int two_power_w
private int w
    void <init>(org.spongycastle.crypto.Digest, int, int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1, i2, $i3;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r2;
        double $d0, $d1;
        byte[] $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS> = $r1;

        $r2 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        specialinvoke $r2.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r2;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        i2 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize> = i2;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        i2 = i2 << 3;

        $d0 = (double) i2;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i2 = (int) $d0;

        $i3 = i2 << $i0;

        $i3 = $i3 + 1;

        $i3 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int getLog(int)>($i3);

        $d0 = (double) $i3;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d0;

        i2 = $i3 + i2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize> = i2;

        i2 = 1 << $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w> = i2;

        $i0 = 1 << $i0;

        $i0 = $i0 + -1;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 * i2;

        $i0 = $i0 + 1;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 + i2;

        $d0 = (double) $i0;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed> = $r3;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf> = $r3;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = $r3;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 * $i1;

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs> = $r3;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, int, int, byte[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        org.spongycastle.crypto.Digest $r1;
        int $i0, $i1, i2, $i3;
        byte[] $r2, $r4;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r3;
        double $d0, $d1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS> = $r1;

        $r3 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        specialinvoke $r3.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r3;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        i2 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize> = i2;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        i2 = i2 << 3;

        $d0 = (double) i2;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i2 = (int) $d0;

        $i3 = i2 << $i0;

        $i3 = $i3 + 1;

        $i3 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int getLog(int)>($i3);

        $d0 = (double) $i3;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d0;

        i2 = $i3 + i2;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize> = i2;

        i2 = 1 << $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w> = i2;

        $i0 = 1 << $i0;

        $i0 = $i0 + -1;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 * i2;

        $i0 = $i0 + 1;

        i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 + i2;

        $d0 = (double) $i0;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed> = $r4;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf> = $r4;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = $r4;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i0 * $i1;

        $r4 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs> = $r4;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void initLeafCalc(byte[])>($r2);

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, byte[][], int[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        org.spongycastle.crypto.Digest $r1;
        byte[][] $r2;
        int[] $r3;
        int i0, $i1;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r4;
        double $d0, $d1;
        byte[] $r5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = $r3[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i> = i0;

        i0 = $r3[1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j> = i0;

        i0 = $r3[2];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps> = i0;

        i0 = $r3[3];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w> = i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS> = $r1;

        $r4 = new org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        specialinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: void <init>(org.spongycastle.crypto.Digest)>($r1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r4;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        i0 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        i0 = i0 << 3;

        $d0 = (double) i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        $d1 = (double) i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d0;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        $i1 = i0 << $i1;

        $i1 = $i1 + 1;

        $i1 = specialinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int getLog(int)>($i1);

        $d0 = (double) $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        $d1 = (double) $i1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        i0 = $i1 + i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize> = i0;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        i0 = 1 << i0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w> = i0;

        $r5 = $r2[0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = $r5;

        $r5 = $r2[1];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed> = $r5;

        $r5 = $r2[2];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs> = $r5;

        $r5 = $r2[3];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf> = $r5;

        return;
    }
    private void <init>(org.spongycastle.pqc.crypto.gmss.GMSSLeaf)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0, $r1;
        org.spongycastle.crypto.Digest $r2;
        int $i0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r3;
        byte[] $r4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS> = $r2;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize> = $i0;

        $r3 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom> = $r3;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf> = $r4;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs> = $r4;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w> = $i0;

        $i0 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps>;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps> = $i0;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed> = $r4;

        $r4 = $r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        $r4 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r4);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = $r4;

        return;
    }
    private int getLog(int)
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        int $i0, i1, i2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $i0 := @parameter0: int;

        i1 = 1;

        i2 = 2;

     label1:
        if i2 >= $i0 goto label2;

        i2 = i2 << 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
    private void updateLeafCalc()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        byte[] r1, $r3, $r5;
        org.spongycastle.crypto.Digest $r2;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r4;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps>;

        $i1 = $i1 + 10000;

        if $i0 >= $i1 goto label6;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        if $i1 != $i2 goto label2;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w>;

        $i2 = $i2 + -1;

        if $i1 != $i2 goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs>;

        $i0 = lengthof $r3;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i0);

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf> = r1;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        return;

     label2:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        if $i1 == 0 goto label3;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w>;

        $i2 = $i2 + -1;

        if $i1 != $i2 goto label5;

     label3:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i> = $i1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j> = 0;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed>;

        $r3 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r3);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = $r3;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        $i1 = lengthof $r5;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r3, 0, $i1);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS> = r1;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.crypto.Digest messDigestOTS>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r3, 0);

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        $i1 = $i1 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j> = $i1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w>;

        $i2 = $i2 + -1;

        if $i1 != $i2 goto label4;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        $i2 = $i2 + -1;

        $i1 = $i1 * $i2;

        $i2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, $i1, $i2);

        goto label4;

     label6:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to updateLeaf in steps: ");

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }
    public byte[] getLeaf()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public byte[][] getStatByte()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        byte[][] r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        r1 = newarray (byte[])[4];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r2 = newarray (byte)[$i0];

        r1[0] = $r2;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r2 = newarray (byte)[$i0];

        r1[1] = $r2;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $i0 = $i1 * $i0;

        $r2 = newarray (byte)[$i0];

        r1[2] = $r2;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r2 = newarray (byte)[$i0];

        r1[3] = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] privateKeyOTS>;

        r1[0] = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed>;

        r1[1] = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] concHashs>;

        r1[2] = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] leaf>;

        r1[3] = $r2;

        return r1;
    }
    public int[] getStatInt()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        int[] r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        r1 = newarray (int)[4];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i>;

        r1[0] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j>;

        r1[1] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int steps>;

        r1[2] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int w>;

        r1[3] = $i0;

        return r1;
    }
    void initLeafCalc(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        byte[] $r1, r2, $r3;
        int $i0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        $r1 := @parameter0: byte[];

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int i> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int j> = 0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom>;

        $r1 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r2);

        r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[] seed> = $r1;

        return;
    }
    org.spongycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0, r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        r1 = new org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void <init>(org.spongycastle.pqc.crypto.gmss.GMSSLeaf)>(r0);

        specialinvoke r1.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: void updateLeafCalc()>();

        return r1;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        int[] $r3;
        byte[][] $r4;
        byte[] $r5;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSLeaf;

        r1 = "";

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int[] getStatInt()>();

        $i1 = $r3[i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int mdsize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int keysize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int two_power_w>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[][] getStatByte()>();

        i0 = 0;

     label3:
        if i0 >= 4 goto label6;

        $r5 = $r4[i0];

        if $r5 == null goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = new java.lang.String;

        $r5 = $r4[i0];

        $r5 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[])>($r5);

        specialinvoke r1.<java.lang.String: void <init>(byte[])>($r5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label6:
        return r1;
    }
