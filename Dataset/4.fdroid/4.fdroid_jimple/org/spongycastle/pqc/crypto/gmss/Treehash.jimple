org.spongycastle.pqc.crypto.gmss.Treehash extends java.lang.Object
private byte[] firstNode
private int firstNodeHeight
private java.util.Vector heightOfNodes
private boolean isFinished
private boolean isInitialized
private int maxHeight
private org.spongycastle.crypto.Digest messDigestTree
private byte[] seedActive
private boolean seedInitialized
private byte[] seedNext
private int tailLength
private java.util.Vector tailStack
    public void <init>(java.util.Vector, int, org.spongycastle.crypto.Digest)
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        java.util.Vector $r1;
        int $i0;
        org.spongycastle.crypto.Digest $r2;
        byte[] $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: java.util.Vector;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.spongycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack> = $r1;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = null;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree> = $r2;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext> = $r3;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r2.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive> = $r3;

        return;
    }
    public void <init>(org.spongycastle.crypto.Digest, byte[][], int[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        org.spongycastle.crypto.Digest $r1;
        byte[][] $r2;
        int[] $r3;
        java.lang.Integer $r4;
        int $i0, $i1;
        java.util.Vector $r5;
        byte[] $r6;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: org.spongycastle.crypto.Digest;

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree> = $r1;

        $i0 = $r3[0];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight> = $i0;

        $i0 = $r3[1];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = $i0;

        $i0 = $r3[2];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = $i0;

        $i0 = $r3[3];

        if $i0 != 1 goto label05;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 1;

     label01:
        $i0 = $r3[4];

        if $i0 != 1 goto label06;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized> = 1;

     label02:
        $i0 = $r3[5];

        if $i0 != 1 goto label07;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized> = 1;

     label03:
        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes> = $r5;

        $i0 = 0;

     label04:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i0 >= $i1 goto label08;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $i1 = $i0 + 6;

        $i1 = $r3[$i1];

        $r4 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label04;

     label05:
        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 0;

        goto label01;

     label06:
        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized> = 0;

        goto label02;

     label07:
        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized> = 0;

        goto label03;

     label08:
        $r6 = $r2[0];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = $r6;

        $r6 = $r2[1];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive> = $r6;

        $r6 = $r2[2];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext> = $r6;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack> = $r5;

        $i0 = 0;

     label09:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i0 >= $i1 goto label10;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $i1 = $i0 + 3;

        $r6 = $r2[$i1];

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        $i0 = $i0 + 1;

        goto label09;

     label10:
        return;
    }
    public void destroy()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = null;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = -1;

        return;
    }
    public byte[] getFirstNode()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        byte[] r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        return r1;
    }
    public int getFirstNodeHeight()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        byte[] $r1;
        int i0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        if $r1 != null goto label1;

        i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        return i0;

     label1:
        i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        return i0;
    }
    public int getLowestNodeHeight()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        int $i0, $i1;
        byte[] $r1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        if $r1 != null goto label1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        return $i0;

     label1:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i0 != 0 goto label2;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        return $i0;

     label2:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object lastElement()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i0;
    }
    public byte[] getSeedActive()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        byte[] r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive>;

        return r1;
    }
    public byte[][] getStatByte()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        int $i0, $i1;
        org.spongycastle.crypto.Digest $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        byte[][] r5;
        byte[] $r6;
        java.util.Vector $r7;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i0 = $i0 + 3;

        $r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r1.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (byte[][]) $r4;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        r5[0] = $r6;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive>;

        r5[1] = $r6;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext>;

        r5[2] = $r6;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i0 >= $i1 goto label2;

        $i1 = $i0 + 3;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $r4 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r6 = (byte[]) $r4;

        r5[$i1] = $r6;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r5;
    }
    public int[] getStatInt()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        int[] r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.util.Vector $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i0 = $i0 + 6;

        r1 = newarray (int)[$i0];

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        r1[0] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        r1[1] = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        r1[2] = $i0;

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished>;

        if $z0 == 0 goto label5;

        r1[3] = 1;

     label1:
        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized>;

        if $z0 == 0 goto label6;

        r1[4] = 1;

     label2:
        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized>;

        if $z0 == 0 goto label7;

        r1[5] = 1;

     label3:
        $i0 = 0;

     label4:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i0 >= $i1 goto label8;

        $i1 = $i0 + 6;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r1[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        r1[3] = 0;

        goto label1;

     label6:
        r1[4] = 0;

        goto label2;

     label7:
        r1[5] = 0;

        goto label3;

     label8:
        return r1;
    }
    public java.util.Vector getTailStack()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        java.util.Vector r1;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        r1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        return r1;
    }
    public void initialize()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r3;
        java.util.Vector $r4;
        byte[] $r5, $r6;
        org.spongycastle.crypto.Digest $r7;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized>;

        if $z0 != 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Seed ");

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialized");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;

     label1:
        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes> = $r4;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = 0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = null;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = -1;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized> = 1;

        $r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext>;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive>;

        $r7 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 0, $i0);

        return;
    }
    public void initializeSeed(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        byte[] $r1, $r2;
        int $i0;
        org.spongycastle.crypto.Digest $r3;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext>;

        $r3 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r3.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean seedInitialized> = 1;

        return;
    }
    public void setFirstNode(byte[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        byte[] $r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.Treehash: void initialize()>();

     label1:
        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = $r1;

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 1;

        return;
    }
    public java.lang.String toString()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        int[] $r3;
        byte[][] $r4;
        byte[] $r5;
        org.spongycastle.crypto.Digest $r6;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        r1 = "Treehash    : ";

        i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i1 = $i1 + 6;

        if i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i1 = $r3[i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i1 = $i1 + 3;

        if i0 >= $i1 goto label6;

        $r4 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r5 = $r4[i0];

        if $r5 == null goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = new java.lang.String;

        $r4 = virtualinvoke r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r5 = $r4[i0];

        $r5 = staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[])>($r5);

        specialinvoke r1.<java.lang.String: void <init>(byte[])>($r5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        i0 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;
    }
    public void update(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom, byte[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r1;
        byte[] $r2, r5;
        boolean $z0;
        java.io.PrintStream $r3;
        org.spongycastle.crypto.Digest $r4;
        int $i0, $i1, $i2;
        java.util.Vector $r6, $r9;
        java.lang.Object $r7;
        java.lang.Integer $r8;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r2 := @parameter1: byte[];

        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("No more update possible for treehash instance!");

        return;

     label1:
        $z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized>;

        if $z0 != 0 goto label2;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Treehash instance not initialized before update");

        return;

     label2:
        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r5 = newarray (byte)[$i0];

        r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedActive>;

        virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>(r5);

        r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        if r5 != null goto label4;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = $r2;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = 0;

     label3:
        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int maxHeight>;

        if $i0 != $i1 goto label7;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished> = 1;

        return;

     label4:
        $i0 = 0;

     label5:
        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        if $i1 <= 0 goto label6;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object lastElement()>();

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i0 != $i1 goto label6;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i1 = $i1 << 1;

        r5 = newarray (byte)[$i1];

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object lastElement()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r5, 0, $i1);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $i1 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i1 = $i1 + -1;

        virtualinvoke $r6.<java.util.Vector: void removeElementAt(int)>($i1);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $i1 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i1 = $i1 + -1;

        virtualinvoke $r6.<java.util.Vector: void removeElementAt(int)>($i1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i2 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r5, $i1, $i2);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = lengthof r5;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r5, 0, $i1);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i1];

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        $i0 = $i0 + 1;

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i1 = $i1 + -1;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = $i1;

        goto label5;

     label6:
        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r8 = staticinvoke <org.spongycastle.util.Integers: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = $i0;

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object lastElement()>();

        $r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i1 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        if $i0 != $i1 goto label3;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $i0 = $i0 << 1;

        $r2 = newarray (byte)[$i0];

        r5 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r2, 0, $i0);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object lastElement()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i1 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r2, $i0, $i1);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector tailStack>;

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i0 = $i0 + -1;

        virtualinvoke $r6.<java.util.Vector: void removeElementAt(int)>($i0);

        $r6 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $r9 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: java.util.Vector heightOfNodes>;

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i0 = $i0 + -1;

        virtualinvoke $r6.<java.util.Vector: void removeElementAt(int)>($i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = lengthof $r2;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i0);

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $i0 = interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode> = $r2;

        $r4 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: org.spongycastle.crypto.Digest messDigestTree>;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] firstNode>;

        interfaceinvoke $r4.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r2, 0);

        $i0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight>;

        $i0 = $i0 + 1;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int firstNodeHeight> = $i0;

        r0.<org.spongycastle.pqc.crypto.gmss.Treehash: int tailLength> = 0;

        goto label3;

     label7:
        return;
    }
    public void updateNextSeed(org.spongycastle.pqc.crypto.gmss.util.GMSSRandom)
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        org.spongycastle.pqc.crypto.gmss.util.GMSSRandom $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.gmss.util.GMSSRandom;

        $r2 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[] seedNext>;

        virtualinvoke $r1.<org.spongycastle.pqc.crypto.gmss.util.GMSSRandom: byte[] nextSeed(byte[])>($r2);

        return;
    }
    public boolean wasFinished()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isFinished>;

        return z0;
    }
    public boolean wasInitialized()
    {
        org.spongycastle.pqc.crypto.gmss.Treehash r0;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.Treehash;

        z0 = r0.<org.spongycastle.pqc.crypto.gmss.Treehash: boolean isInitialized>;

        return z0;
    }
