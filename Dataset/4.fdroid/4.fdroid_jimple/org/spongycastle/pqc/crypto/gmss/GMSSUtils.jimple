org.spongycastle.pqc.crypto.gmss.GMSSUtils extends java.lang.Object
    void <init>()
    {
        org.spongycastle.pqc.crypto.gmss.GMSSUtils r0;

        r0 := @this: org.spongycastle.pqc.crypto.gmss.GMSSUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.util.Vector[] clone(java.util.Vector[])
    {
        java.util.Vector[] $r0, r1;
        int $i0, $i1;
        java.util.Vector $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;

        $r0 := @parameter0: java.util.Vector[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (java.util.Vector)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label5;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r1[$i0] = $r2;

        $r2 = $r0[$i0];

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r2 = r1[$i0];

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        goto label3;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        return r1;
    }
    static org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.spongycastle.pqc.crypto.gmss.GMSSLeaf[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSLeaf)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    static org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootCalc)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    static org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] clone(org.spongycastle.pqc.crypto.gmss.GMSSRootSig[])
    {
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.GMSSRootSig)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    static org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r0, r1;
        int $i0;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.Treehash[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }
    static byte[][] clone(byte[][])
    {
        byte[][] $r0, r1;
        byte[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    static java.util.Vector[][] clone(java.util.Vector[][])
    {
        java.util.Vector[][] $r0, r1;
        java.util.Vector[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Vector[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (java.util.Vector[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: java.util.Vector[] clone(java.util.Vector[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    static org.spongycastle.pqc.crypto.gmss.Treehash[][] clone(org.spongycastle.pqc.crypto.gmss.Treehash[][])
    {
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r0, r1;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r2;
        int $i0, $i1;

        $r0 := @parameter0: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash[])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: org.spongycastle.pqc.crypto.gmss.Treehash[] clone(org.spongycastle.pqc.crypto.gmss.Treehash[])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    static byte[][][] clone(byte[][][])
    {
        byte[][][] $r0, r1;
        byte[][] $r2;
        int $i0, $i1;

        $r0 := @parameter0: byte[][][];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        r1 = newarray (byte[][])[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label3;

        $r2 = $r0[$i0];

        $r2 = staticinvoke <org.spongycastle.pqc.crypto.gmss.GMSSUtils: byte[][] clone(byte[][])>($r2);

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
