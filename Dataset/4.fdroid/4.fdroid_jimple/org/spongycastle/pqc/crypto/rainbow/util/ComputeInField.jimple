org.spongycastle.pqc.crypto.rainbow.util.ComputeInField extends java.lang.Object
private short[][] A
short[] x
    public void <init>()
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void computeZerosAbove() throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short s0, $s3, $s6, $s7;
        short[][] $r1;
        int $i1, i2, i4, $i5;
        short[] $r2, $r4;
        java.lang.RuntimeException $r3;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

     label1:
        if $i1 <= 0 goto label7;

        i2 = $i1 + -1;

     label2:
        if i2 < 0 goto label6;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[i2];

        s0 = $r2[$i1];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[$i1];

        $s3 = $r2[$i1];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short invElem(short)>($s3);

        if $s3 != 0 goto label3;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("The matrix is not invertible");

        throw $r3;

     label3:
        i4 = $i1;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i5 = lengthof $r1;

        $i5 = $i5 * 2;

        if i4 >= $i5 goto label5;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[$i1];

        $s6 = $r2[i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s6, $s3);

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>(s0, $s6);

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[i2];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r4 = $r1[i2];

        $s7 = $r4[i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s7, $s6);

        $r2[i4] = $s6;

        i4 = i4 + 1;

        goto label4;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        return;
    }
    private void computeZerosUnder(boolean) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        boolean $z0;
        short s0, $s5, $s6, $s7;
        short[][] $r1;
        int $i1, i2, $i3, $i4;
        short[] $r2, $r4;
        java.lang.RuntimeException $r3;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label4;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r1;

        $i1 = $i1 * 2;

     label1:
        i2 = 0;

     label2:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i3 = lengthof $r1;

        $i3 = $i3 + -1;

        if i2 >= $i3 goto label9;

        $i3 = i2 + 1;

     label3:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i4 = lengthof $r1;

        if $i3 >= $i4 goto label8;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[$i3];

        s0 = $r2[i2];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[i2];

        $s5 = $r2[i2];

        $s5 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short invElem(short)>($s5);

        if $s5 != 0 goto label5;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Matrix not invertible! We have to choose another one!");

        throw $r3;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r1;

        $i1 = $i1 + 1;

        goto label1;

     label5:
        $i4 = i2;

     label6:
        if $i4 >= $i1 goto label7;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[i2];

        $s6 = $r2[$i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s6, $s5);

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>(s0, $s6);

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = $r1[$i3];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r4 = $r1[$i3];

        $s7 = $r4[$i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s7, $s6);

        $r2[$i4] = $s6;

        $i4 = $i4 + 1;

        goto label6;

     label7:
        $i3 = $i3 + 1;

        goto label3;

     label8:
        i2 = i2 + 1;

        goto label2;

     label9:
        return;
    }
    private void substitute() throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1, $r2;
        int $i0, $i2;
        short[] $r3, $r5;
        short $s1, $s3, $s4;
        java.lang.RuntimeException $r4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $r3 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $s1 = $r3[$i0];

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short invElem(short)>($s1);

        if $s1 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("The equation system is not solvable");

        throw $r4;

     label1:
        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] x>;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r2;

        $i2 = $i2 + -1;

        $r5 = $r1[$i2];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r1;

        $s3 = $r5[$i2];

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s3, $s1);

        $r3[$i0] = $s1;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -2;

     label2:
        if $i0 < 0 goto label6;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r3 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r1;

        $s1 = $r3[$i2];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r1;

        $i2 = $i2 + -1;

     label3:
        if $i2 <= $i0 goto label4;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r3 = $r1[$i0];

        $s3 = $r3[$i2];

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] x>;

        $s4 = $r3[$i2];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s3, $s4);

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s1, $s3);

        $i2 = $i2 + -1;

        goto label3;

     label4:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r3 = $r1[$i0];

        $s3 = $r3[$i0];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short invElem(short)>($s3);

        if $s3 != 0 goto label5;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not solvable equation system");

        throw $r4;

     label5:
        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] x>;

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s1, $s3);

        $r3[$i0] = $s1;

        $i0 = $i0 + -1;

        goto label2;

     label6:
        return;
    }
    public short[][] addSquareMatrix(short[][], short[][])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1, $r2, r8;
        int $i0, $i1, $i2;
        short[] $r3, $r9;
        java.lang.RuntimeException $r4;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        short $s3, $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[][];

        $r2 := @parameter1: short[][];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 != $i1 goto label1;

        $r3 = $r1[0];

        $i0 = lengthof $r3;

        $r3 = $r2[0];

        $i1 = lengthof $r3;

        if $i0 == $i1 goto label2;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Addition is not possible!");

        throw $r4;

     label2:
        $i0 = lengthof $r1;

        $i1 = lengthof $r1;

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r8 = (short[][]) $r7;

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label4:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label5;

        $r3 = r8[$i0];

        $r9 = $r1[$i0];

        $s3 = $r9[$i1];

        $r9 = $r2[$i0];

        $s4 = $r9[$i1];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s3, $s4);

        $r3[$i1] = $s3;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return r8;
    }
    public short[] addVect(short[], short[])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[] $r1, $r2, r3;
        short $s0, $s3;
        int $i1, $i2;
        java.lang.RuntimeException $r4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: short[];

        $i1 = lengthof $r1;

        $i2 = lengthof $r2;

        if $i1 == $i2 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Multiplication is not possible!");

        throw $r4;

     label1:
        $i1 = lengthof $r1;

        r3 = newarray (short)[$i1];

        $i1 = 0;

     label2:
        $i2 = lengthof r3;

        if $i1 >= $i2 goto label3;

        $s0 = $r1[$i1];

        $s3 = $r2[$i1];

        $s0 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s0, $s3);

        r3[$i1] = $s0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return r3;
    }
    public short[][] inverse(short[][])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1, $r6;
        java.lang.RuntimeException r2;
        int $i0, $i1, $i2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[] $r7, $r8;
        short $s3, $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[][];

     label01:
        $i0 = lengthof $r1;

        $i1 = lengthof $r1;

     label02:
        $i1 = $i1 * 2;

     label03:
        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

     label04:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

     label05:
        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r6 = (short[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A> = $r6;

        $i0 = lengthof $r1;

        $r7 = $r1[0];

        $i1 = lengthof $r7;

     label06:
        if $i0 == $i1 goto label09;

        r2 = new java.lang.RuntimeException;

     label07:
        specialinvoke r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The matrix is not invertible. Please choose another one!");

        throw r2;

     label08:
        r2 := @caughtexception;

        return null;

     label09:
        $i0 = 0;

     label10:
        $i1 = lengthof $r1;

     label11:
        if $i0 >= $i1 goto label25;

        $i1 = 0;

     label12:
        $i2 = lengthof $r1;

     label13:
        if $i1 >= $i2 goto label16;

     label14:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r7 = $r6[$i0];

        $r8 = $r1[$i0];

        $s3 = $r8[$i1];

        $r7[$i1] = $s3;

     label15:
        $i1 = $i1 + 1;

        goto label12;

     label16:
        $i1 = lengthof $r1;

     label17:
        $i2 = lengthof $r1;

     label18:
        $i2 = $i2 * 2;

        if $i1 >= $i2 goto label21;

     label19:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r7 = $r6[$i0];

        $r7[$i1] = 0;

     label20:
        $i1 = $i1 + 1;

        goto label17;

     label21:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r7 = $r6[$i0];

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r6;

     label22:
        $i1 = $i1 + $i0;

     label23:
        $r7[$i1] = 1;

     label24:
        $i0 = $i0 + 1;

        goto label10;

     label25:
        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void computeZerosUnder(boolean)>(1);

     label26:
        $i0 = 0;

     label27:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r1;

     label28:
        if $i0 >= $i1 goto label36;

     label29:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r7 = $r1[$i0];

        $s3 = $r7[$i0];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short invElem(short)>($s3);

     label30:
        $i1 = $i0;

     label31:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r1;

     label32:
        $i2 = $i2 * 2;

        if $i1 >= $i2 goto label35;

     label33:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r7 = $r1[$i0];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r8 = $r1[$i0];

        $s4 = $r8[$i1];

        $s4 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s4, $s3);

        $r7[$i1] = $s4;

     label34:
        $i1 = $i1 + 1;

        goto label31;

     label35:
        $i0 = $i0 + 1;

        goto label27;

     label36:
        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void computeZerosAbove()>();

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i0 = lengthof $r1;

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r1;

        $r3 = newarray (int)[2];

        $r3[0] = $i0;

        $r3[1] = $i1;

     label37:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

     label38:
        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r1 = (short[][]) $r5;

     label39:
        $i0 = 0;

     label40:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r6;

     label41:
        if $i0 >= $i1 goto label50;

     label42:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i1 = lengthof $r6;

     label43:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r6;

     label44:
        $i2 = $i2 * 2;

        if $i1 >= $i2 goto label49;

     label45:
        $r7 = $r1[$i0];

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $i2 = lengthof $r6;

     label46:
        $i2 = $i1 - $i2;

     label47:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r8 = $r6[$i0];

        $s3 = $r8[$i1];

        $r7[$i2] = $s3;

     label48:
        $i1 = $i1 + 1;

        goto label43;

     label49:
        $i0 = $i0 + 1;

        goto label40;

     label50:
        return $r1;

        catch java.lang.RuntimeException from label01 to label02 with label08;
        catch java.lang.RuntimeException from label03 to label04 with label08;
        catch java.lang.RuntimeException from label05 to label06 with label08;
        catch java.lang.RuntimeException from label07 to label08 with label08;
        catch java.lang.RuntimeException from label10 to label11 with label08;
        catch java.lang.RuntimeException from label12 to label13 with label08;
        catch java.lang.RuntimeException from label14 to label15 with label08;
        catch java.lang.RuntimeException from label16 to label18 with label08;
        catch java.lang.RuntimeException from label19 to label20 with label08;
        catch java.lang.RuntimeException from label21 to label22 with label08;
        catch java.lang.RuntimeException from label23 to label24 with label08;
        catch java.lang.RuntimeException from label25 to label26 with label08;
        catch java.lang.RuntimeException from label27 to label28 with label08;
        catch java.lang.RuntimeException from label29 to label30 with label08;
        catch java.lang.RuntimeException from label31 to label32 with label08;
        catch java.lang.RuntimeException from label33 to label34 with label08;
        catch java.lang.RuntimeException from label36 to label37 with label08;
        catch java.lang.RuntimeException from label38 to label39 with label08;
        catch java.lang.RuntimeException from label40 to label41 with label08;
        catch java.lang.RuntimeException from label42 to label44 with label08;
        catch java.lang.RuntimeException from label45 to label46 with label08;
        catch java.lang.RuntimeException from label47 to label48 with label08;
    }
    public short[][] multMatrix(short, short[][])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short $s0, $s4;
        short[][] $r1, r6;
        int $i1, $i2, $i3;
        short[] $r2, $r7;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $s0 := @parameter0: short;

        $r1 := @parameter1: short[][];

        $i1 = lengthof $r1;

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        $r3 = newarray (int)[2];

        $r3[0] = $i1;

        $r3[1] = $i2;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (short[][]) $r5;

        $i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label4;

        $i2 = 0;

     label2:
        $r2 = $r1[0];

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label3;

        $r2 = r6[$i1];

        $r7 = $r1[$i1];

        $s4 = $r7[$i2];

        $s4 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s0, $s4);

        $r2[$i2] = $s4;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return r6;
    }
    public short[] multVect(short, short[])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short $s0, $s1;
        short[] $r1, r2;
        int $i2, $i3;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $s0 := @parameter0: short;

        $r1 := @parameter1: short[];

        $i2 = lengthof $r1;

        r2 = newarray (short)[$i2];

        $i2 = 0;

     label1:
        $i3 = lengthof r2;

        if $i2 >= $i3 goto label2;

        $s1 = $r1[$i2];

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s0, $s1);

        r2[$i2] = $s1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return r2;
    }
    public short[][] multVects(short[], short[])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[] $r1, $r2, $r8;
        short $s0, $s4;
        int $i1, $i2, $i3;
        java.lang.RuntimeException $r3;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        short[][] r7;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: short[];

        $i1 = lengthof $r1;

        $i2 = lengthof $r2;

        if $i1 == $i2 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Multiplication is not possible!");

        throw $r3;

     label1:
        $i1 = lengthof $r1;

        $i2 = lengthof $r2;

        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i2;

        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        r7 = (short[][]) $r6;

        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        $i2 = 0;

     label3:
        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label4;

        $r8 = r7[$i1];

        $s4 = $r1[$i1];

        $s0 = $r2[$i2];

        $s0 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s4, $s0);

        $r8[$i2] = $s0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return r7;
    }
    public short[] multiplyMatrix(short[][], short[]) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1;
        short[] $r2, r3, $r5;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r4;
        short $s3, $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[][];

        $r2 := @parameter1: short[];

        r3 = $r1[0];

        $i0 = lengthof r3;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Multiplication is not possible!");

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        r3 = newarray (short)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $i1 = 0;

     label3:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label4;

        $r5 = $r1[$i0];

        $s3 = $r5[$i1];

        $s4 = $r2[$i1];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s3, $s4);

        $s4 = r3[$i0];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s4, $s3);

        r3[$i0] = $s3;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        return r3;
    }
    public short[][] multiplyMatrix(short[][], short[][]) throws java.lang.RuntimeException
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1, $r2, $r8;
        short[] $r3, $r9;
        int $i0, $i1, $i2, $i3;
        java.lang.RuntimeException $r4;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        short $s4, $s5;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[][];

        $r2 := @parameter1: short[][];

        $r3 = $r1[0];

        $i0 = lengthof $r3;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Multiplication is not possible!");

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        $r3 = $r2[0];

        $i1 = lengthof $r3;

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        $r8 = (short[][]) $r7;

        r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A> = $r8;

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label7;

        $i1 = 0;

     label3:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label6;

        $i2 = 0;

     label4:
        $r3 = $r2[0];

        $i3 = lengthof $r3;

        if $i2 >= $i3 goto label5;

        $r3 = $r1[$i0];

        $s4 = $r3[$i1];

        $r3 = $r2[$i1];

        $s5 = $r3[$i2];

        $s4 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s4, $s5);

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r3 = $r8[$i0];

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r9 = $r8[$i0];

        $s5 = $r9[$i2];

        $s4 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s5, $s4);

        $r3[$i2] = $s4;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $i0 = $i0 + 1;

        goto label2;

     label7:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        return $r1;
    }
    public short[] solveEquation(short[][], short[])
    {
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r0;
        short[][] $r1, $r7;
        short[] $r2, $r8, $r9;
        java.lang.RuntimeException r3;
        int $i0, $i1, $i2;
        int[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        short $s3, $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        $r1 := @parameter0: short[][];

        $r2 := @parameter1: short[];

     label01:
        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

     label02:
        if $i1 == $i0 goto label05;

        r3 = new java.lang.RuntimeException;

     label03:
        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("The equation system is not solvable");

        throw r3;

     label04:
        r3 := @caughtexception;

        return null;

     label05:
        $i1 = lengthof $r1;

        $i0 = lengthof $r1;

     label06:
        $i0 = $i0 + 1;

     label07:
        $r4 = newarray (int)[2];

        $r4[0] = $i1;

        $r4[1] = $i0;

     label08:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

     label09:
        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r7 = (short[][]) $r6;

        r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A> = $r7;

        $i1 = lengthof $r1;

        $r8 = newarray (short)[$i1];

        r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] x> = $r8;

     label10:
        $i1 = 0;

     label11:
        $i0 = lengthof $r1;

     label12:
        if $i1 >= $i0 goto label18;

        $i0 = 0;

     label13:
        $r8 = $r1[0];

        $i2 = lengthof $r8;

     label14:
        if $i0 >= $i2 goto label17;

     label15:
        $r7 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r8 = $r7[$i1];

        $r9 = $r1[$i1];

        $s3 = $r9[$i0];

        $r8[$i0] = $s3;

     label16:
        $i0 = $i0 + 1;

        goto label13;

     label17:
        $i1 = $i1 + 1;

        goto label11;

     label18:
        $i1 = 0;

     label19:
        $i0 = lengthof $r2;

     label20:
        if $i1 >= $i0 goto label23;

     label21:
        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r8 = $r1[$i1];

        $i2 = lengthof $r2;

        $s3 = $r2[$i1];

        $r1 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] A>;

        $r9 = $r1[$i1];

        $i0 = lengthof $r2;

        $s4 = $r9[$i0];

        $s3 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s3, $s4);

        $r8[$i2] = $s3;

     label22:
        $i1 = $i1 + 1;

        goto label19;

     label23:
        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void computeZerosUnder(boolean)>(0);

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void substitute()>();

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] x>;

     label24:
        return $r2;

        catch java.lang.RuntimeException from label01 to label02 with label04;
        catch java.lang.RuntimeException from label03 to label04 with label04;
        catch java.lang.RuntimeException from label05 to label06 with label04;
        catch java.lang.RuntimeException from label07 to label08 with label04;
        catch java.lang.RuntimeException from label09 to label10 with label04;
        catch java.lang.RuntimeException from label11 to label12 with label04;
        catch java.lang.RuntimeException from label13 to label14 with label04;
        catch java.lang.RuntimeException from label15 to label16 with label04;
        catch java.lang.RuntimeException from label19 to label20 with label04;
        catch java.lang.RuntimeException from label21 to label22 with label04;
        catch java.lang.RuntimeException from label23 to label24 with label04;
    }
