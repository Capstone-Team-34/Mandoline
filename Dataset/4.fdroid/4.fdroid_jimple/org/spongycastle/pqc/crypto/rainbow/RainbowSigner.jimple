org.spongycastle.pqc.crypto.rainbow.RainbowSigner extends java.lang.Object implements org.spongycastle.pqc.crypto.MessageSigner
private org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf
org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key
private java.security.SecureRandom random
int signableDocumentLength
private short[] x
    public void <init>()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField $r1;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf> = $r1;

        return;
    }
    private short[] initSign(org.spongycastle.pqc.crypto.rainbow.Layer[], short[])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r1;
        short[] $r2, r3, $r10;
        int $i0, $i1;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField $r4;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters $r5;
        org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters $r6;
        short[][] $r7;
        org.spongycastle.pqc.crypto.rainbow.Layer $r8;
        java.security.SecureRandom $r9;
        short $s2;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.rainbow.Layer[];

        $r2 := @parameter1: short[];

        $i0 = lengthof $r2;

        r3 = newarray (short)[$i0];

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf>;

        $r5 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r6 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r5;

        r3 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: short[] getB1()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>(r3, $r2);

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf>;

        $r5 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r6 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: short[][] getInvA1()>();

        $r2 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multiplyMatrix(short[][],short[])>($r7, $r2);

        $i0 = 0;

     label1:
        $r8 = $r1[0];

        $i1 = virtualinvoke $r8.<org.spongycastle.pqc.crypto.rainbow.Layer: int getVi()>();

        if $i0 >= $i1 goto label2;

        r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: java.security.SecureRandom random>;

        $i1 = virtualinvoke $r9.<java.security.SecureRandom: int nextInt()>();

        $s2 = (short) $i1;

        r3[$i0] = $s2;

        r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $r10 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $s2 = $r10[$i0];

        $i1 = $s2 & 255;

        $s2 = (short) $i1;

        r3[$i0] = $s2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r2;
    }
    private short[] makeMessageRepresentative(byte[])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        byte[] $r1;
        short[] r2;
        int $i0, i1, $i2;
        byte $b3;
        short $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $r1 := @parameter0: byte[];

        $i0 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: int signableDocumentLength>;

        r2 = newarray (short)[$i0];

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if i1 < $i2 goto label2;

        return r2;

     label2:
        $b3 = $r1[$i0];

        $s4 = (short) $b3;

        r2[i1] = $s4;

        $s4 = r2[i1];

        $i2 = $s4 & 255;

        $s4 = (short) $i2;

        r2[i1] = $s4;

        $i0 = $i0 + 1;

        i1 = i1 + 1;

        $i2 = lengthof r2;

        if i1 < $i2 goto label1;

        return r2;
    }
    private short[] verifySignatureIntern(short[])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        short[] $r1, r2, $r7, $r8;
        int i0, i2, $i3, i4, i5;
        short $s1, $s6, $s7;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters $r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters $r4;
        short[][] $r5, $r6;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $r1 := @parameter0: short[];

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters) $r3;

        $r5 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters: short[][] getCoeffQuadratic()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters) $r3;

        $r6 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters: short[][] getCoeffSingular()>();

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters) $r3;

        $r7 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters: short[] getCoeffScalar()>();

        i0 = lengthof $r5;

        r2 = newarray (short)[i0];

        $r8 = $r6[0];

        i0 = lengthof $r8;

        i2 = 0;

     label1:
        $i3 = lengthof $r5;

        if i2 >= $i3 goto label6;

        $i3 = 0;

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        i5 = i4;

     label3:
        if i5 >= i0 goto label4;

        $r8 = $r5[i2];

        $s6 = $r8[$i3];

        $s7 = $r1[i4];

        $s1 = $r1[i5];

        $s1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s7, $s1);

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s6, $s1);

        $s1 = r2[i2];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s1, $s6);

        r2[i2] = $s6;

        $i3 = $i3 + 1;

        i5 = i5 + 1;

        goto label3;

     label4:
        $r8 = $r6[i2];

        $s6 = $r8[i4];

        $s1 = $r1[i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s6, $s1);

        $s1 = r2[i2];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s1, $s6);

        r2[i2] = $s6;

        i4 = i4 + 1;

        goto label2;

     label5:
        $s6 = r2[i2];

        $s1 = $r7[i2];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s6, $s1);

        r2[i2] = $s6;

        i2 = i2 + 1;

        goto label1;

     label6:
        return r2;
    }
    public byte[] generateSignature(byte[])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        byte[] $r1, r2;
        int i0, $i1, i2, $i3, $i4;
        java.lang.Exception r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters $r4;
        org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters $r5;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r6;
        short[][] $r7;
        short[] $r8, $r10, $r11, r12;
        org.spongycastle.pqc.crypto.rainbow.Layer $r9;
        boolean z0;
        short $s5;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField $r13;
        byte $b6;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $r1 := @parameter0: byte[];

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r5 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r4;

        $r6 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers()>();

        i0 = lengthof $r6;

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r5 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r4;

        $r7 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: short[][] getInvA2()>();

        $i1 = lengthof $r7;

        $r8 = newarray (short)[$i1];

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x> = $r8;

        $i1 = i0 + -1;

        $r9 = $r6[$i1];

        $i1 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: int getViNext()>();

        r2 = newarray (byte)[$i1];

        $r8 = specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] makeMessageRepresentative(byte[])>($r1);

     label01:
        z0 = 1;

        $i1 = 0;

     label02:
        $r10 = specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] initSign(org.spongycastle.pqc.crypto.rainbow.Layer[],short[])>($r6, $r8);

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label24;

     label05:
        $r9 = $r6[i2];

        $i3 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: int getOi()>();

        $r11 = newarray (short)[$i3];

        $r9 = $r6[i2];

        $i3 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: int getOi()>();

        r12 = newarray (short)[$i3];

     label06:
        $i3 = 0;

     label07:
        $r9 = $r6[i2];

        $i4 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: int getOi()>();

     label08:
        if $i3 >= $i4 goto label11;

     label09:
        $s5 = $r10[$i1];

        $r11[$i3] = $s5;

     label10:
        $i1 = $i1 + 1;

        $i3 = $i3 + 1;

        goto label07;

     label11:
        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf>;

        $r9 = $r6[i2];

        r12 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $r7 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][] plugInVinegars(short[])>(r12);

        $r11 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] solveEquation(short[][],short[])>($r7, $r11);

     label12:
        if $r11 != null goto label16;

        r3 = new java.lang.Exception;

     label13:
        specialinvoke r3.<java.lang.Exception: void <init>(java.lang.String)>("LES is not solveable!");

        throw r3;

     label14:
        r3 := @caughtexception;

        z0 = 0;

     label15:
        if z0 == 0 goto label01;

        return r2;

     label16:
        $i3 = 0;

     label17:
        $i4 = lengthof $r11;

     label18:
        if $i3 >= $i4 goto label23;

     label19:
        r12 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $r9 = $r6[i2];

        $i4 = virtualinvoke $r9.<org.spongycastle.pqc.crypto.rainbow.Layer: int getVi()>();

     label20:
        $i4 = $i4 + $i3;

     label21:
        $s5 = $r11[$i3];

        r12[$i4] = $s5;

     label22:
        $i3 = $i3 + 1;

        goto label17;

     label23:
        i2 = i2 + 1;

        goto label04;

     label24:
        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf>;

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r5 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r4;

        $r10 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: short[] getB2()>();

        $r11 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] x>;

        $r10 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r10, $r11);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf>;

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $r5 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) $r4;

        $r7 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: short[][] getInvA2()>();

        $r10 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multiplyMatrix(short[][],short[])>($r7, $r10);

     label25:
        $i1 = 0;

     label26:
        i2 = lengthof r2;

     label27:
        if $i1 >= i2 goto label15;

     label28:
        $s5 = $r10[$i1];

     label29:
        $b6 = (byte) $s5;

     label30:
        r2[$i1] = $b6;

     label31:
        $i1 = $i1 + 1;

        goto label26;

        catch java.lang.Exception from label02 to label03 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Exception from label13 to label14 with label14;
        catch java.lang.Exception from label17 to label18 with label14;
        catch java.lang.Exception from label19 to label20 with label14;
        catch java.lang.Exception from label21 to label22 with label14;
        catch java.lang.Exception from label24 to label25 with label14;
        catch java.lang.Exception from label26 to label27 with label14;
        catch java.lang.Exception from label28 to label29 with label14;
        catch java.lang.Exception from label30 to label31 with label14;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters $r4;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters $r5;
        int $i0;
        org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters r6;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label3;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label2;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: java.security.SecureRandom random> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key> = $r4;

     label1:
        $r5 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key>;

        $i0 = virtualinvoke $r5.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters: int getDocLength()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: int signableDocumentLength> = $i0;

        return;

     label2:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key> = $r4;

        goto label1;

     label3:
        r6 = (org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key> = r6;

        goto label1;
    }
    public boolean verifySignature(byte[], byte[])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowSigner r0;
        byte[] $r1, $r2;
        short[] r3, $r4;
        int $i0, $i1;
        byte $b2;
        short s3, $s4;
        boolean z0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r2;

        r3 = newarray (short)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $b2 = $r2[$i0];

        s3 = (short) $b2;

        $i1 = s3 & 255;

        s3 = (short) $i1;

        r3[$i0] = s3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] makeMessageRepresentative(byte[])>($r1);

        r3 = specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowSigner: short[] verifySignatureIntern(short[])>(r3);

        z0 = 1;

        $i0 = lengthof $r4;

        $i1 = lengthof r3;

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label7;

        if z0 == 0 goto label6;

        s3 = $r4[$i0];

        $s4 = r3[$i0];

        if s3 != $s4 goto label6;

        z0 = 1;

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        z0 = 0;

        goto label5;

     label7:
        return z0;
    }
