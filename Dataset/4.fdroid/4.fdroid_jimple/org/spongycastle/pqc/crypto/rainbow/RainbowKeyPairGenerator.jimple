org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
private short[][] A1
private short[][] A1inv
private short[][] A2
private short[][] A2inv
private short[] b1
private short[] b2
private boolean initialized
private org.spongycastle.pqc.crypto.rainbow.Layer[] layers
private int numOfLayers
private short[][] pub_quadratic
private short[] pub_scalar
private short[][] pub_singular
private org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams
private java.security.SecureRandom sr
private int[] vi
    public void <init>()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: boolean initialized> = 0;

        return;
    }
    private void compactPublicKey(short[][][])
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        short[][][] $r1;
        int i0, i1, i2, i3, i4, i5;
        short[][] $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[] $r6, $r7;
        short $s6, $s7;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r1 := @parameter0: short[][][];

        i2 = lengthof $r1;

        $r2 = $r1[0];

        i1 = lengthof $r2;

        i0 = i1 + 1;

        i0 = i0 * i1;

        i0 = i0 / 2;

        $r3 = newarray (int)[2];

        $r3[0] = i2;

        $r3[1] = i0;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        $r2 = (short[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_quadratic> = $r2;

        i0 = 0;

     label1:
        if i0 >= i2 goto label8;

        i3 = 0;

        i4 = 0;

     label2:
        if i4 >= i1 goto label7;

        i5 = i4;

     label3:
        if i5 >= i1 goto label6;

        if i5 != i4 goto label5;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_quadratic>;

        $r6 = $r2[i0];

        $r2 = $r1[i0];

        $r7 = $r2[i4];

        $s6 = $r7[i5];

        $r6[i3] = $s6;

     label4:
        i3 = i3 + 1;

        i5 = i5 + 1;

        goto label3;

     label5:
        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_quadratic>;

        $r6 = $r2[i0];

        $r2 = $r1[i0];

        $r7 = $r2[i4];

        $s6 = $r7[i5];

        $r2 = $r1[i0];

        $r7 = $r2[i5];

        $s7 = $r7[i4];

        $s6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s6, $s7);

        $r6[i3] = $s6;

        goto label4;

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        return;
    }
    private void computePublicKey()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8, $i10, $i11;
        int[] $r2, $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[][][] r6, $r11, $r12;
        short[][] $r7, $r13, $r15;
        short[] $r8, $r14, $r16;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r9;
        org.spongycastle.pqc.crypto.rainbow.Layer $r10;
        short $s9, $s12, $s13;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        r1 = new org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        specialinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void <init>()>();

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        i0 = lengthof $r3;

        i0 = i0 + -1;

        i0 = $r2[i0];

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        i1 = $r2[0];

        i0 = i0 - i1;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        i1 = lengthof $r3;

        i1 = i1 + -1;

        i1 = $r2[i1];

        $r2 = newarray (int)[3];

        $r2[0] = i0;

        $r2[1] = i1;

        $r2[2] = i1;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        r6 = (short[][][]) $r5;

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i1;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        $r7 = (short[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular> = $r7;

        $r8 = newarray (short)[i0];

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar> = $r8;

        i2 = 0;

        $r8 = newarray (short)[i1];

        i3 = 0;

     label01:
        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $i4 = lengthof $r9;

        if i3 >= $i4 goto label14;

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r10 = $r9[i3];

        $r11 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][][] getCoeffAlpha()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r10 = $r9[i3];

        $r12 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][][] getCoeffBeta()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r10 = $r9[i3];

        $r7 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][] getCoeffGamma()>();

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r10 = $r9[i3];

        $r8 = virtualinvoke $r10.<org.spongycastle.pqc.crypto.rainbow.Layer: short[] getCoeffEta()>();

        $r13 = $r11[0];

        $i4 = lengthof $r13;

        $r13 = $r12[0];

        $i5 = lengthof $r13;

        i6 = 0;

     label02:
        if i6 >= $i4 goto label13;

        i7 = 0;

     label03:
        if i7 >= $i4 goto label06;

        i8 = 0;

     label04:
        if i8 >= $i5 goto label05;

        $r13 = $r11[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $i10 = i7 + $i5;

        $r14 = $r13[$i10];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $i10 = i2 + i6;

        $i11 = i2 + i6;

        $r13 = r6[$i11];

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r16 = $r15[i8];

        $r15 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] multVects(short[],short[])>($r14, $r16);

        $r13 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] addSquareMatrix(short[][],short[][])>($r13, $r15);

        r6[$i10] = $r13;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s9 = $r16[i8];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i10 = i2 + i6;

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i11 = i2 + i6;

        $r16 = $r15[$i11];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r13[$i10] = $r14;

        $r13 = $r11[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r14 = $r13[i8];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $i10 = i7 + $i5;

        $s9 = $r16[$i10];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i10 = i2 + i6;

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i11 = i2 + i6;

        $r16 = $r15[$i11];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r13[$i10] = $r14;

        $r13 = $r11[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $i10 = i7 + $i5;

        $s12 = $r14[$i10];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s9, $s12);

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $i10 = i2 + i6;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $i11 = i2 + i6;

        $s9 = $r16[$i11];

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s13 = $r16[i8];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s12, $s13);

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r14[$i10] = $s9;

        i8 = i8 + 1;

        goto label04;

     label05:
        i7 = i7 + 1;

        goto label03;

     label06:
        i7 = 0;

     label07:
        if i7 >= $i5 goto label10;

        i8 = 0;

     label08:
        if i8 >= $i5 goto label09;

        $r13 = $r12[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r14 = $r13[i7];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $i10 = i2 + i6;

        $i11 = i2 + i6;

        $r13 = r6[$i11];

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r16 = $r15[i8];

        $r15 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] multVects(short[],short[])>($r14, $r16);

        $r13 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] addSquareMatrix(short[][],short[][])>($r13, $r15);

        r6[$i10] = $r13;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s9 = $r16[i8];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i10 = i2 + i6;

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i11 = i2 + i6;

        $r16 = $r15[$i11];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r13[$i10] = $r14;

        $r13 = $r12[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r14 = $r13[i8];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s9 = $r16[i7];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i10 = i2 + i6;

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i11 = i2 + i6;

        $r16 = $r15[$i11];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r13[$i10] = $r14;

        $r13 = $r12[i6];

        $r14 = $r13[i7];

        $s9 = $r14[i8];

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s12 = $r14[i7];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s9, $s12);

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $i10 = i2 + i6;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $i11 = i2 + i6;

        $s9 = $r16[$i11];

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s13 = $r16[i8];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s12, $s13);

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r14[$i10] = $s9;

        i8 = i8 + 1;

        goto label08;

     label09:
        i7 = i7 + 1;

        goto label07;

     label10:
        i7 = 0;

     label11:
        i8 = $i5 + $i4;

        if i7 >= i8 goto label12;

        $r14 = $r7[i6];

        $s9 = $r14[i7];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r14 = $r13[i7];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r14);

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        i8 = i2 + i6;

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $i10 = i2 + i6;

        $r16 = $r15[$i10];

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r13[i8] = $r14;

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        i8 = i2 + i6;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $i10 = i2 + i6;

        $s9 = $r16[$i10];

        $r16 = $r7[i6];

        $s12 = $r16[i7];

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $s13 = $r16[i7];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s12, $s13);

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r14[i8] = $s9;

        i7 = i7 + 1;

        goto label11;

     label12:
        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        i7 = i2 + i6;

        $r16 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        i8 = i2 + i6;

        $s9 = $r16[i8];

        $s12 = $r8[i6];

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r14[i7] = $s9;

        i6 = i6 + 1;

        goto label02;

     label13:
        i2 = i2 + $i4;

        i3 = i3 + 1;

        goto label01;

     label14:
        $r2 = newarray (int)[3];

        $r2[0] = i0;

        $r2[1] = i1;

        $r2[2] = i1;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        $r11 = (short[][][]) $r5;

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i1;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        $r7 = (short[][]) $r5;

        $r8 = newarray (short)[i0];

        i1 = 0;

     label15:
        if i1 >= i0 goto label18;

        i2 = 0;

     label16:
        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        i3 = lengthof $r13;

        if i2 >= i3 goto label17;

        $r13 = $r11[i1];

        $r15 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        $r14 = $r15[i1];

        $s9 = $r14[i2];

        $r15 = r6[i2];

        $r15 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] multMatrix(short,short[][])>($s9, $r15);

        $r13 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] addSquareMatrix(short[][],short[][])>($r13, $r15);

        $r11[i1] = $r13;

        $r14 = $r7[i1];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        $r16 = $r13[i1];

        $s9 = $r16[i2];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $r16 = $r13[i2];

        $r16 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] multVect(short,short[])>($s9, $r16);

        $r14 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[] addVect(short[],short[])>($r14, $r16);

        $r7[i1] = $r14;

        $s9 = $r8[i1];

        $r13 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        $r14 = $r13[i1];

        $s12 = $r14[i2];

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        $s13 = $r14[i2];

        $s12 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short multElem(short,short)>($s12, $s13);

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r8[i1] = $s9;

        i2 = i2 + 1;

        goto label16;

     label17:
        $s9 = $r8[i1];

        $r14 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b1>;

        $s12 = $r14[i1];

        $s9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.GF2Field: short addElem(short,short)>($s9, $s12);

        $r8[i1] = $s9;

        i1 = i1 + 1;

        goto label15;

     label18:
        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular> = $r7;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar> = $r8;

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void compactPublicKey(short[][][])>($r11);

        return;
    }
    private void generateF()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.Layer $r1;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r2;
        int[] $r3;
        java.security.SecureRandom $r4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $i0 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int numOfLayers>;

        $r2 = newarray (org.spongycastle.pqc.crypto.rainbow.Layer)[$i0];

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers> = $r2;

        $i0 = 0;

     label1:
        $i1 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int numOfLayers>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r1 = new org.spongycastle.pqc.crypto.rainbow.Layer;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $i1 = $r3[$i0];

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $i2 = $i0 + 1;

        $i2 = $r3[$i2];

        $r4 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr>;

        specialinvoke $r1.<org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(int,int,java.security.SecureRandom)>($i1, $i2, $r4);

        $r2[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    private void generateL1()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r1;
        int i0, $i1, i2, $i3;
        int[] $r2, $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[][] $r6;
        short[] $r7;
        java.security.SecureRandom $r8;
        short $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        i0 = lengthof $r3;

        i0 = i0 + -1;

        i0 = $r2[i0];

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $i1 = $r2[0];

        i0 = i0 - $i1;

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i0;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        $r6 = (short[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1> = $r6;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1inv> = null;

        r1 = new org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        specialinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void <init>()>();

     label1:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1inv>;

        if $r6 != null goto label6;

        $i1 = 0;

     label2:
        if $i1 >= i0 goto label5;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        $r7 = $r6[$i1];

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr>;

        $i3 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>();

        $i3 = $i3 & 255;

        $s4 = (short) $i3;

        $r7[i2] = $s4;

        i2 = i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1>;

        $r6 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] inverse(short[][])>($r6);

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1inv> = $r6;

        goto label1;

     label6:
        $r7 = newarray (short)[i0];

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b1> = $r7;

        $i1 = 0;

     label7:
        if $i1 >= i0 goto label8;

        $r7 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b1>;

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr>;

        i2 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>();

        i2 = i2 & 255;

        $s4 = (short) i2;

        $r7[$i1] = $s4;

        $i1 = $i1 + 1;

        goto label7;

     label8:
        return;
    }
    private void generateL2()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.util.ComputeInField r1;
        int i0, i1, i2, $i3;
        int[] $r2, $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[][] $r6;
        short[] $r7;
        java.security.SecureRandom $r8;
        short $s4;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        i0 = lengthof $r3;

        i0 = i0 + -1;

        i0 = $r2[i0];

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i0;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r2);

        $r6 = (short[][]) $r5;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2> = $r6;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2inv> = null;

        r1 = new org.spongycastle.pqc.crypto.rainbow.util.ComputeInField;

        specialinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: void <init>()>();

     label1:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2inv>;

        if $r6 != null goto label6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r7 = $r6[i1];

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr>;

        $i3 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>();

        $i3 = $i3 & 255;

        $s4 = (short) $i3;

        $r7[i2] = $s4;

        i2 = i2 + 1;

        goto label3;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2>;

        $r6 = virtualinvoke r1.<org.spongycastle.pqc.crypto.rainbow.util.ComputeInField: short[][] inverse(short[][])>($r6);

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2inv> = $r6;

        goto label1;

     label6:
        $r7 = newarray (short)[i0];

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2> = $r7;

        i1 = 0;

     label7:
        if i1 >= i0 goto label8;

        $r7 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr>;

        i2 = virtualinvoke $r8.<java.security.SecureRandom: int nextInt()>();

        i2 = i2 & 255;

        $s4 = (short) i2;

        $r7[i1] = $s4;

        i1 = i1 + 1;

        goto label7;

     label8:
        return;
    }
    private void initializeDefault()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters r1;
        java.security.SecureRandom $r2;
        org.spongycastle.pqc.crypto.rainbow.RainbowParameters $r3;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        r1 = new org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        $r3 = new org.spongycastle.pqc.crypto.rainbow.RainbowParameters;

        specialinvoke $r3.<org.spongycastle.pqc.crypto.rainbow.RainbowParameters: void <init>()>();

        specialinvoke r1.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.rainbow.RainbowParameters)>($r2, $r3);

        virtualinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>(r1);

        return;
    }
    private void keygen()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL1()>();

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateL2()>();

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void generateF()>();

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void computePublicKey()>();

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters r1;
        int[] $r2, $r9;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters r4;
        boolean $z0;
        short[][] $r5, $r7;
        short[] $r6, $r8;
        int $i0, $i1;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r10;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $z0 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: boolean initialized>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initializeDefault()>();

     label1:
        specialinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void keygen()>();

        r1 = new org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters;

        $r5 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A1inv>;

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b1>;

        $r7 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] A2inv>;

        $r8 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] b2>;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r3 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        specialinvoke r1.<org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters: void <init>(short[][],short[],short[][],short[],int[],org.spongycastle.pqc.crypto.rainbow.Layer[])>($r5, $r6, $r7, $r8, $r2, $r3);

        r4 = new org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $r9 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $i0 = lengthof $r9;

        $i0 = $i0 + -1;

        $i0 = $r2[$i0];

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi>;

        $i1 = $r2[0];

        $i0 = $i0 - $i1;

        $r5 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_quadratic>;

        $r7 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[][] pub_singular>;

        $r6 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: short[] pub_scalar>;

        specialinvoke r4.<org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters: void <init>(int,short[][],short[][],short[])>($i0, $r5, $r7, $r6);

        $r10 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r10.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r4, r1);

        return $r10;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r1;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r1 = virtualinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair()>();

        return $r1;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: void initialize(org.spongycastle.crypto.KeyGenerationParameters)>($r1);

        return;
    }
    public void initialize(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters $r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.rainbow.RainbowParameters $r4;
        int[] $r5;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters) $r1;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams> = $r2;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: java.security.SecureRandom sr> = $r3;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters: org.spongycastle.pqc.crypto.rainbow.RainbowParameters getParameters()>();

        $r5 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowParameters: int[] getVi()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int[] vi> = $r5;

        $r2 = r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters: org.spongycastle.pqc.crypto.rainbow.RainbowParameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.rainbow.RainbowParameters: int getNumOfLayers()>();

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: int numOfLayers> = $i0;

        r0.<org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator: boolean initialized> = 1;

        return;
    }
