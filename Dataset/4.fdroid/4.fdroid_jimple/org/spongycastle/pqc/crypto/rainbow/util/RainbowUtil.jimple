org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil extends java.lang.Object
    public void <init>()
    {
        org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil r0;

        r0 := @this: org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] convertArray(short[])
    {
        short[] $r0;
        byte[] r1;
        int $i0, $i1;
        short $s2;
        byte $b3;

        $r0 := @parameter0: short[];

        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $s2 = $r0[$i0];

        $b3 = (byte) $s2;

        r1[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static short[] convertArray(byte[])
    {
        byte[] $r0;
        short[] r1;
        int $i0, $i1;
        byte $b2;
        short $s3;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        r1 = newarray (short)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $b2 = $r0[$i0];

        $i1 = $b2 & 255;

        $s3 = (short) $i1;

        r1[$i0] = $s3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static byte[][] convertArray(short[][])
    {
        short[][] $r0;
        int $i0, $i1, $i2;
        short[] $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        byte[][] r5;
        byte[] $r6;
        short $s3;
        byte $b4;

        $r0 := @parameter0: short[][];

        $i0 = lengthof $r0;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (byte[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $r1 = $r0[0];

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r6 = r5[$i0];

        $r1 = $r0[$i0];

        $s3 = $r1[$i1];

        $b4 = (byte) $s3;

        $r6[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r5;
    }
    public static short[][] convertArray(byte[][])
    {
        byte[][] $r0;
        int $i0, $i1, $i2;
        byte[] $r1;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        short[][] r5;
        short[] $r6;
        byte $b3;
        short $s4;

        $r0 := @parameter0: byte[][];

        $i0 = lengthof $r0;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        $r2 = newarray (int)[2];

        $r2[0] = $i0;

        $r2[1] = $i1;

        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        r5 = (short[][]) $r4;

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $r1 = $r0[0];

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r6 = r5[$i0];

        $r1 = $r0[$i0];

        $b3 = $r1[$i1];

        $i2 = $b3 & 255;

        $s4 = (short) $i2;

        $r6[$i1] = $s4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r5;
    }
    public static byte[][][] convertArray(short[][][])
    {
        short[][][] $r0;
        int $i0, $i1, $i2, $i3;
        short[][] $r1;
        short[] $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        byte[][][] r6;
        byte[][] $r7;
        byte[] $r8;
        short $s4;
        byte $b5;

        $r0 := @parameter0: short[][][];

        $i0 = lengthof $r0;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        $r1 = $r0[0];

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        $r3 = newarray (int)[3];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r3[2] = $i2;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (byte[][][]) $r5;

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label2:
        $r1 = $r0[0];

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        $i2 = 0;

     label3:
        $r1 = $r0[0];

        $r2 = $r1[0];

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label4;

        $r7 = r6[$i0];

        $r8 = $r7[$i1];

        $r1 = $r0[$i0];

        $r2 = $r1[$i1];

        $s4 = $r2[$i2];

        $b5 = (byte) $s4;

        $r8[$i2] = $b5;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return r6;
    }
    public static short[][][] convertArray(byte[][][])
    {
        byte[][][] $r0;
        int $i0, $i1, $i2, $i3;
        byte[][] $r1;
        byte[] $r2;
        int[] $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        short[][][] r6;
        short[][] $r7;
        short[] $r8;
        byte $b4;
        short $s5;

        $r0 := @parameter0: byte[][][];

        $i0 = lengthof $r0;

        $r1 = $r0[0];

        $i1 = lengthof $r1;

        $r1 = $r0[0];

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        $r3 = newarray (int)[3];

        $r3[0] = $i0;

        $r3[1] = $i1;

        $r3[2] = $i2;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r4, $r3);

        r6 = (short[][][]) $r5;

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label2:
        $r1 = $r0[0];

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        $i2 = 0;

     label3:
        $r1 = $r0[0];

        $r2 = $r1[0];

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label4;

        $r7 = r6[$i0];

        $r8 = $r7[$i1];

        $r1 = $r0[$i0];

        $r2 = $r1[$i1];

        $b4 = $r2[$i2];

        $i3 = $b4 & 255;

        $s5 = (short) $i3;

        $r8[$i2] = $s5;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return r6;
    }
    public static int[] convertArraytoInt(byte[])
    {
        byte[] $r0;
        int[] r1;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        r1 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $b2 = $r0[$i0];

        $i1 = $b2 & 255;

        r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static byte[] convertIntArray(int[])
    {
        int[] $r0;
        byte[] r1;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $i1 = $r0[$i0];

        $b2 = (byte) $i1;

        r1[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static boolean equals(short[], short[])
    {
        short[] $r0, $r1;
        int $i0, $i1;
        boolean z0, $z1;
        short $s2, $s3;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: short[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z0 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label5;

        $s2 = $r0[$i0];

        $s3 = $r1[$i0];

        if $s2 != $s3 goto label4;

        $z1 = 1;

     label3:
        z0 = z0 & $z1;

        $i0 = $i0 + -1;

        goto label2;

     label4:
        $z1 = 0;

        goto label3;

     label5:
        return z0;
    }
    public static boolean equals(short[][], short[][])
    {
        short[][] $r0, $r1;
        boolean $z0, z1;
        int $i0, $i1;
        short[] $r2, $r3;

        $r0 := @parameter0: short[][];

        $r1 := @parameter1: short[][];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z1 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = $r0[$i0];

        $r3 = $r1[$i0];

        $z0 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: boolean equals(short[],short[])>($r2, $r3);

        z1 = z1 & $z0;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return z1;
    }
    public static boolean equals(short[][][], short[][][])
    {
        short[][][] $r0, $r1;
        boolean $z0, z1;
        int $i0, $i1;
        short[][] $r2, $r3;

        $r0 := @parameter0: short[][][];

        $r1 := @parameter1: short[][][];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        z1 = 1;

        $i0 = lengthof $r0;

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = $r0[$i0];

        $r3 = $r1[$i0];

        $z0 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: boolean equals(short[][],short[][])>($r2, $r3);

        z1 = z1 & $z0;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return z1;
    }
