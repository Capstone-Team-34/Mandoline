org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher extends java.lang.Object implements org.spongycastle.pqc.crypto.MessageEncryptor
public static final java.lang.String OID
public int cipherTextSize
private int k
org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key
public int maxPlainTextSize
private int n
private java.security.SecureRandom sr
private int t
    public void <init>()
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private byte[] computeMessage(org.spongycastle.pqc.math.linearalgebra.GF2Vector) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r1;
        byte[] r2, $r3;
        int $i0;
        byte $b1;
        java.lang.Exception $r4;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label2;

        $b1 = $r3[$i0];

        if $b1 != 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        if $i0 < 0 goto label3;

        $b1 = $r3[$i0];

        if $b1 == 1 goto label4;

     label3:
        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("Bad Padding: invalid ciphertext");

        throw $r4;

     label4:
        r2 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i0);

        return r2;
    }
    private org.spongycastle.pqc.math.linearalgebra.GF2Vector computeMessageRepresentative(byte[])
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        byte[] $r1, r2;
        int $i0, $i1;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r3;
        byte $b2;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: byte[];

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int maxPlainTextSize>;

        $i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k>;

        $i1 = $i1 & 7;

        if $i1 == 0 goto label2;

        $b2 = 1;

     label1:
        $i0 = $b2 + $i0;

        r2 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0);

        $i0 = lengthof $r1;

        r2[$i0] = 1;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k>;

        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[])>($i0, r2);

        return $r3;

     label2:
        $b2 = 0;

        goto label1;
    }
    public int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters r1;
        boolean $z0;
        org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters r2;
        int $i0;
        org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters;

        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) r1;

        $i0 = virtualinvoke r2.<org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters: int getN()>();

        return $i0;

     label1:
        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters;

        if $z0 == 0 goto label2;

        r3 = (org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters) r1;

        $i0 = virtualinvoke r3.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: int getN()>();

        return $i0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported type");

        throw $r4;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters $r4;
        org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters $r5;
        org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters r6;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) $r5;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters)>($r4);

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr> = $r3;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) $r5;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters)>($r4);

        return;

     label2:
        r6 = (org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key> = r6;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key>;

        r6 = (org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters) $r5;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters)>(r6);

        return;
    }
    public void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters $r1;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: int getK()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k>;

        $i0 = $i0 >> 3;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int maxPlainTextSize> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n>;

        $i0 = $i0 >> 3;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int cipherTextSize> = $i0;

        return;
    }
    public void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters $r1;
        java.security.SecureRandom $r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr>;

        if $r2 == null goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr>;

     label1:
        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr> = $r2;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters: int getK()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int t> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n>;

        $i0 = $i0 >> 3;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int cipherTextSize> = $i0;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k>;

        $i0 = $i0 >> 3;

        r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int maxPlainTextSize> = $i0;

        return;

     label2:
        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        goto label1;
    }
    public byte[] messageDecrypt(byte[]) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        byte[] $r1;
        int $i0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r2, r14;
        org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters r3;
        org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters r4;
        org.spongycastle.pqc.math.linearalgebra.GF2mField $r5;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r7, $r10;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r8, $r9, $r12;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r11;
        org.spongycastle.pqc.math.linearalgebra.Vector $r13;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: byte[];

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n>;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[])>($i0, $r1);

        r3 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key>;

        r4 = (org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters) r3;

        $r5 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2mField getField()>();

        $r6 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly()>();

        $r7 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getSInv()>();

        $r8 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.Permutation getP1()>();

        $r9 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.Permutation getP2()>();

        $r10 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH()>();

        $r11 = virtualinvoke r4.<org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv()>();

        $r9 = virtualinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.Permutation: org.spongycastle.pqc.math.linearalgebra.Permutation rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r9);

        $r12 = virtualinvoke $r9.<org.spongycastle.pqc.math.linearalgebra.Permutation: org.spongycastle.pqc.math.linearalgebra.Permutation computeInverse()>();

        $r13 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r12);

        r14 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $r13 = virtualinvoke $r10.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector rightMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)>(r14);

        $r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GoppaCode: org.spongycastle.pqc.math.linearalgebra.GF2Vector syndromeDecode(org.spongycastle.pqc.math.linearalgebra.GF2Vector,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])>($r2, $r5, $r6, $r11);

        $r13 = virtualinvoke r14.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>($r2);

        r14 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $r13 = virtualinvoke r14.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r8);

        r14 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $r13 = virtualinvoke $r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.Vector multiply(org.spongycastle.pqc.math.linearalgebra.Permutation)>($r9);

        $r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int k>;

        $r2 = virtualinvoke r14.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector extractRightVector(int)>($i0);

        $r13 = virtualinvoke $r7.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector leftMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)>($r2);

        $r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r13;

        $r1 = specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: byte[] computeMessage(org.spongycastle.pqc.math.linearalgebra.GF2Vector)>($r2);

        return $r1;
    }
    public byte[] messageEncrypt(byte[])
    {
        org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher r0;
        byte[] $r1;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r2, $r4;
        int $i0, $i1;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters $r5;
        org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r7;
        org.spongycastle.pqc.math.linearalgebra.Vector $r8;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher;

        $r1 := @parameter0: byte[];

        $r4 = specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.math.linearalgebra.GF2Vector computeMessageRepresentative(byte[])>($r1);

        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int n>;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: int t>;

        $r3 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: java.security.SecureRandom sr>;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int,int,java.security.SecureRandom)>($i1, $i0, $r3);

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McEliecePKCSCipher: org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters key>;

        $r6 = (org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getG()>();

        $r8 = virtualinvoke $r7.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Vector leftMultiply(org.spongycastle.pqc.math.linearalgebra.Vector)>($r4);

        $r8 = virtualinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.Vector: org.spongycastle.pqc.math.linearalgebra.Vector add(org.spongycastle.pqc.math.linearalgebra.Vector)>(r2);

        r2 = (org.spongycastle.pqc.math.linearalgebra.GF2Vector) $r8;

        $r1 = virtualinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        return $r1;
    }
