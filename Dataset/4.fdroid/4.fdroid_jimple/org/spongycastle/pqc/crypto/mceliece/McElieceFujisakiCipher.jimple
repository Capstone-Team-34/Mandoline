org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher extends java.lang.Object implements org.spongycastle.pqc.crypto.MessageEncryptor
private static final java.lang.String DEFAULT_PRNG_NAME
public static final java.lang.String OID
private int k
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key
private org.spongycastle.crypto.Digest messDigest
private int n
private java.security.SecureRandom sr
private int t
    public void <init>()
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r1;
        java.security.SecureRandom $r2;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r3;
        org.spongycastle.crypto.Digest $r4;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr>;

        if $r2 == null goto label2;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr>;

     label1:
        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr> = $r2;

        $r3 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: org.spongycastle.crypto.Digest getDigest()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest> = $r4;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getK()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int k> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int t> = $i0;

        return;

     label2:
        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        goto label1;
    }
    public int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) throws java.lang.IllegalArgumentException
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters r1;
        boolean $z0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters r2;
        int $i0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters;

        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        $i0 = virtualinvoke r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getN()>();

        return $i0;

     label1:
        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        if $z0 == 0 goto label2;

        r3 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) r1;

        $i0 = virtualinvoke r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getN()>();

        return $i0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported type");

        throw $r4;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r4;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r5;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r6;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r5;

        specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)>($r4);

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr> = $r3;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r5;

        specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)>($r4);

        return;

     label2:
        r6 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = r6;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        r6 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) $r5;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)>(r6);

        return;
    }
    public void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: org.spongycastle.crypto.Digest getDigest()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest> = $r3;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int t> = $i0;

        return;
    }
    public byte[] messageDecrypt(byte[]) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        byte[] $r1, r2, $r9;
        int i0, i1, $i4;
        org.spongycastle.crypto.prng.DigestRandomGenerator r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r4, $r12;
        byte[][] $r5;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r6;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters $r7;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector[] $r8;
        org.spongycastle.crypto.digests.SHA1Digest $r10;
        byte $b2, $b3;
        org.spongycastle.crypto.Digest $r11;
        boolean $z0;
        java.lang.Exception $r13;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        $r1 := @parameter0: byte[];

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n>;

        i1 = i1 + 7;

        i0 = i1 >> 3;

        i1 = lengthof $r1;

        i1 = i1 - i0;

        $r5 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[][] split(byte[],int)>($r1, i0);

        $r1 = $r5[0];

        r2 = $r5[1];

        i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n>;

        r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[])>(i0, $r1);

        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r7 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) $r6;

        $r8 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Primitives: org.spongycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters,org.spongycastle.pqc.math.linearalgebra.GF2Vector)>($r7, r4);

        r4 = $r8[0];

        $r9 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        r4 = $r8[1];

        r3 = new org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r10 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r10.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void <init>(org.spongycastle.crypto.Digest)>($r10);

        virtualinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void addSeedMaterial(byte[])>($r9);

        $r1 = newarray (byte)[i1];

        virtualinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[])>($r1);

        i0 = 0;

     label1:
        if i0 >= i1 goto label2;

        $b2 = $r1[i0];

        $b3 = r2[i0];

        $i4 = $b2 ^ $b3;

        $b2 = (byte) $i4;

        $r1[i0] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r9 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>($r9, $r1);

        $r11 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        i1 = interfaceinvoke $r11.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[i1];

        $r11 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        i1 = lengthof $r9;

        interfaceinvoke $r11.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r9, 0, i1);

        $r11 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        interfaceinvoke $r11.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n>;

        i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int t>;

        $r12 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.Conversions: org.spongycastle.pqc.math.linearalgebra.GF2Vector encode(int,int,byte[])>(i1, i0, r2);

        $z0 = virtualinvoke $r12.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label3;

        $r13 = new java.lang.Exception;

        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("Bad Padding: invalid ciphertext");

        throw $r13;

     label3:
        return $r1;
    }
    public byte[] messageEncrypt(byte[]) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher r0;
        byte[] $r1, r2, r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r4, $r8;
        org.spongycastle.crypto.prng.DigestRandomGenerator r5;
        int $i0, $i1;
        java.security.SecureRandom $r6;
        org.spongycastle.crypto.Digest $r7;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r9;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r10;
        org.spongycastle.crypto.digests.SHA1Digest $r11;
        byte $b2, $b3;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher;

        $r1 := @parameter0: byte[];

        r4 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int k>;

        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: java.security.SecureRandom sr>;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int,java.security.SecureRandom)>($i0, $r6);

        r2 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>(r2, $r1);

        $r7 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i0 = lengthof r3;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>(r3, 0, $i0);

        $r7 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i0 = interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i0];

        $r7 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.crypto.Digest messDigest>;

        interfaceinvoke $r7.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int n>;

        $i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: int t>;

        $r8 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.Conversions: org.spongycastle.pqc.math.linearalgebra.GF2Vector encode(int,int,byte[])>($i0, $i1, r3);

        $r9 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceFujisakiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r10 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r9;

        r4 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Primitives: org.spongycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters,org.spongycastle.pqc.math.linearalgebra.GF2Vector,org.spongycastle.pqc.math.linearalgebra.GF2Vector)>($r10, r4, $r8);

        r3 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        r5 = new org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r11 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r11.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r5.<org.spongycastle.crypto.prng.DigestRandomGenerator: void <init>(org.spongycastle.crypto.Digest)>($r11);

        virtualinvoke r5.<org.spongycastle.crypto.prng.DigestRandomGenerator: void addSeedMaterial(byte[])>(r2);

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        virtualinvoke r5.<org.spongycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[])>(r2);

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $b2 = r2[$i0];

        $b3 = $r1[$i0];

        $i1 = $b2 ^ $b3;

        $b2 = (byte) $i1;

        r2[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>(r3, r2);

        return $r1;
    }
