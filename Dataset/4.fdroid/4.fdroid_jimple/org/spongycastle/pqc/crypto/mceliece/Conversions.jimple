org.spongycastle.pqc.crypto.mceliece.Conversions extends java.lang.Object
private static final java.math.BigInteger ONE
private static final java.math.BigInteger ZERO
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ZERO> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ONE> = $r0;

        return;
    }
    private void <init>()
    {
        org.spongycastle.pqc.crypto.mceliece.Conversions r0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.Conversions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static byte[] decode(int, int, org.spongycastle.pqc.math.linearalgebra.GF2Vector)
    {
        int $i0, $i1, i2, $i3, i4, $i6;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r0;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;
        java.math.BigInteger $r3, r4, $r5;
        long $l5;
        byte[] $r6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        $i3 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int getLength()>();

        if $i3 != $i0 goto label1;

        $i3 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int getHammingWeight()>();

        if $i3 == $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("vector has wrong length or hamming weight");

        throw $r1;

     label2:
        $r2 = virtualinvoke $r0.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: int[] getVecArray()>();

        r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger binomial(int,int)>($i0, $i1);

        $r3 = <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ZERO>;

        $i3 = $i0;

        i4 = 0;

     label3:
        if i4 >= $i0 goto label6;

        i2 = $i3 - $i1;

        $l5 = (long) i2;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r5 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $l5 = (long) $i3;

        r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r4);

        r4 = $r5;

        $i3 = $i3 + -1;

        i2 = i4 >> 5;

        i2 = $r2[i2];

        $i6 = i4 & 31;

        $i6 = 1 << $i6;

        i2 = i2 & $i6;

        if i2 == 0 goto label4;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $i1 = $i1 + -1;

        if $i3 != $i1 goto label5;

        r4 = <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ONE>;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        i2 = $i1 + 1;

        $l5 = (long) i2;

        r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        i2 = $i3 - $i1;

        $l5 = (long) i2;

        r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        r4 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r4);

        goto label4;

     label6:
        $r6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.BigIntUtils: byte[] toMinimalByteArray(java.math.BigInteger)>($r3);

        return $r6;
    }
    public static org.spongycastle.pqc.math.linearalgebra.GF2Vector encode(int, int, byte[])
    {
        int $i0, $i1, $i2, i3, $i4;
        byte[] $r0;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r1;
        java.lang.IllegalArgumentException $r2;
        java.math.BigInteger $r3, r4, r5;
        long $l5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: byte[];

        if $i0 >= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n < t");

        throw $r2;

     label1:
        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger binomial(int,int)>($i0, $i1);

        r4 = $r3;

        r5 = new java.math.BigInteger;

        specialinvoke r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        $i2 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i2 < 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Encoded number too large.");

        throw $r2;

     label2:
        r1 = new org.spongycastle.pqc.math.linearalgebra.GF2Vector;

        specialinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void <init>(int)>($i0);

        $i2 = $i0;

        i3 = 0;

     label3:
        if i3 >= $i0 goto label6;

        $i4 = $i2 - $i1;

        $l5 = (long) $i4;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $l5 = (long) $i2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r3 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        r4 = $r3;

        $i2 = $i2 + -1;

        $i4 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r5);

        if $i4 > 0 goto label4;

        virtualinvoke r1.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: void setBit(int)>(i3);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $i1 = $i1 + -1;

        if $i2 != $i1 goto label5;

        r4 = <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ONE>;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i4 = $i1 + 1;

        $l5 = (long) $i4;

        r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $i4 = $i2 - $i1;

        $l5 = (long) $i4;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        goto label4;

     label6:
        return r1;
    }
    public static byte[] signConversion(int, int, byte[])
    {
        int $i0, $i1, i3, i4, i5, $i6, i7, $i8;
        byte[] $r0, r1;
        byte b2;
        java.lang.IllegalArgumentException $r2;
        java.math.BigInteger $r3, r4, $r5;
        java.lang.String $r6;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: byte[];

        if $i0 >= $i1 goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n < t");

        throw $r2;

     label01:
        $r3 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger binomial(int,int)>($i0, $i1);

        r4 = $r3;

        $i6 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        i5 = $i6 + -1;

        $i6 = i5 >> 3;

        i5 = i5 & 7;

        if i5 != 0 goto label02;

        $i6 = $i6 + -1;

        i5 = 8;

     label02:
        i7 = $i0 >> 3;

        i3 = $i0 & 7;

        if i3 != 0 goto label03;

        i7 = i7 + -1;

        i3 = 8;

     label03:
        i4 = i7 + 1;

        r1 = newarray (byte)[i4];

        i4 = lengthof $r0;

        $i8 = lengthof r1;

        if i4 >= $i8 goto label05;

        i7 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i7);

        i7 = lengthof $r0;

     label04:
        i3 = lengthof r1;

        if i7 >= i3 goto label06;

        r1[i7] = 0;

        i7 = i7 + 1;

        goto label04;

     label05:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, i7);

        i3 = 1 << i3;

        i3 = i3 + -1;

        b2 = $r0[i7];

        i3 = b2 & i3;

        b2 = (byte) i3;

        r1[i7] = b2;

     label06:
        $r3 = <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ZERO>;

        i7 = $i0;

        i3 = 0;

     label07:
        if i3 >= $i0 goto label10;

        $r5 = new java.math.BigInteger;

        i4 = i7 - $i1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r5 = new java.math.BigInteger;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i7);

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        $r5 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r5);

        r4 = $r5;

        i7 = i7 + -1;

        i4 = i3 >>> 3;

        $i8 = i3 & 7;

        $i8 = 1 << $i8;

        b2 = r1[i4];

        i4 = b2 & $i8;

        b2 = (byte) i4;

        if b2 == 0 goto label08;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $i1 = $i1 + -1;

        if i7 != $i1 goto label09;

        r4 = <org.spongycastle.pqc.crypto.mceliece.Conversions: java.math.BigInteger ONE>;

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        r4 = new java.math.BigInteger;

        i4 = $i1 + 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        specialinvoke r4.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        r4 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $r5 = new java.math.BigInteger;

        i4 = i7 - $i1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r5);

        goto label08;

     label10:
        $i0 = $i6 + 1;

        $r0 = newarray (byte)[$i0];

        r1 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof r1;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label12;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, $i0);

        $i0 = lengthof r1;

     label11:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label13;

        $r0[$i0] = 0;

        $i0 = $i0 + 1;

        goto label11;

     label12:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, $i6);

        $i0 = 1 << i5;

        $i0 = $i0 + -1;

        b2 = r1[$i6];

        $i0 = $i0 & b2;

        b2 = (byte) $i0;

        $r0[$i6] = b2;

     label13:
        return $r0;
    }
