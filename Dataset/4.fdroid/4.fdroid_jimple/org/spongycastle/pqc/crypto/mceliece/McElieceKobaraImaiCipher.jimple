org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher extends java.lang.Object implements org.spongycastle.pqc.crypto.MessageEncryptor
private static final java.lang.String DEFAULT_PRNG_NAME
public static final java.lang.String OID
public static final byte[] PUBLIC_CONSTANT
private int k
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key
private org.spongycastle.crypto.Digest messDigest
private int n
private java.security.SecureRandom sr
private int t
    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String $r1;

        $r1 = "a predetermined public constant";

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT> = $r0;

        return;
    }
    public void <init>()
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: org.spongycastle.crypto.Digest getDigest()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest> = $r3;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getK()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int k> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int t> = $i0;

        return;
    }
    public int getKeySize(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters r1;
        boolean $z0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters r2;
        int $i0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters;

        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        $i0 = virtualinvoke r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: int getN()>();

        return $i0;

     label1:
        $z0 = r1 instanceof org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        if $z0 == 0 goto label2;

        r3 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) r1;

        $i0 = virtualinvoke r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getN()>();

        return $i0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported type");

        throw $r4;
    }
    public void init(boolean, org.spongycastle.crypto.CipherParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        boolean $z0;
        org.spongycastle.crypto.CipherParameters r1;
        org.spongycastle.crypto.params.ParametersWithRandom r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r4;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r5;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r6;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: org.spongycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        $z0 = r1 instanceof org.spongycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.crypto.params.ParametersWithRandom) r1;

        $r3 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: java.security.SecureRandom sr> = $r3;

        r1 = virtualinvoke r2.<org.spongycastle.crypto.params.ParametersWithRandom: org.spongycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r5;

        specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)>($r4);

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: java.security.SecureRandom sr> = $r3;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = $r4;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r4 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r5;

        specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: void initCipherEncrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)>($r4);

        return;

     label2:
        r6 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key> = r6;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        r6 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) $r5;

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)>(r6);

        return;
    }
    public void initCipherDecrypt(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r2;
        org.spongycastle.crypto.Digest $r3;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        $r1 := @parameter0: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        $r2 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: org.spongycastle.crypto.Digest getDigest()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest> = $r3;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getK()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int k> = $i0;

        $i0 = virtualinvoke $r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int t> = $i0;

        return;
    }
    public byte[] messageDecrypt(byte[]) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        byte[] $r1, r2, $r11;
        int i0, i1, $i2, $i3;
        org.spongycastle.crypto.prng.DigestRandomGenerator r3;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector r4;
        java.lang.Exception $r5;
        org.spongycastle.crypto.Digest $r6;
        byte[][] $r7;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r8;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters $r9;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector[] $r10;
        byte $b4, $b5;
        org.spongycastle.crypto.digests.SHA1Digest $r12;
        boolean $z0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        $r1 := @parameter0: byte[];

        $i2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n>;

        i1 = $i2 >> 3;

        $i2 = lengthof $r1;

        if $i2 >= i1 goto label01;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("Bad Padding: Ciphertext too short.");

        throw $r5;

     label01:
        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i2 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int k>;

        i0 = i0 >> 3;

        $i3 = lengthof $r1;

        i1 = $i3 - i1;

        if i1 <= 0 goto label05;

        $r7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[][] split(byte[],int)>($r1, i1);

        r2 = $r7[0];

        $r1 = $r7[1];

     label02:
        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n>;

        r4 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[])>(i1, $r1);

        $r8 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r9 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) $r8;

        $r10 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Primitives: org.spongycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters,org.spongycastle.pqc.math.linearalgebra.GF2Vector)>($r9, r4);

        r4 = $r10[0];

        $r11 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        $r1 = $r11;

        r4 = $r10[1];

        i1 = lengthof $r11;

        if i1 <= i0 goto label03;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] subArray(byte[],int,int)>($r11, 0, i0);

     label03:
        i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n>;

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int t>;

        $r11 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.Conversions: byte[] decode(int,int,org.spongycastle.pqc.math.linearalgebra.GF2Vector)>(i0, i1, r4);

        r2 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>(r2, $r11);

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>(r2, $r1);

        i0 = lengthof $r1;

        i0 = i0 - $i2;

        $r7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[][] split(byte[],int)>($r1, $i2);

        r2 = $r7[0];

        $r1 = $r7[1];

        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        i1 = interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        $r11 = newarray (byte)[i1];

        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        i1 = lengthof $r1;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, i1);

        $r6 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        interfaceinvoke $r6.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>($r11, 0);

        $i2 = $i2 + -1;

     label04:
        if $i2 < 0 goto label06;

        $b4 = $r11[$i2];

        $b5 = r2[$i2];

        i1 = $b4 ^ $b5;

        $b4 = (byte) i1;

        $r11[$i2] = $b4;

        $i2 = $i2 + -1;

        goto label04;

     label05:
        r2 = newarray (byte)[0];

        goto label02;

     label06:
        r3 = new org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r12 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r12.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void <init>(org.spongycastle.crypto.Digest)>($r12);

        virtualinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void addSeedMaterial(byte[])>($r11);

        r2 = newarray (byte)[i0];

        virtualinvoke r3.<org.spongycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[])>(r2);

        $i2 = i0 + -1;

     label07:
        if $i2 < 0 goto label08;

        $b4 = r2[$i2];

        $b5 = $r1[$i2];

        i1 = $b4 ^ $b5;

        $b4 = (byte) i1;

        r2[$i2] = $b4;

        $i2 = $i2 + -1;

        goto label07;

     label08:
        $i2 = lengthof r2;

        if $i2 >= i0 goto label09;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("Bad Padding: invalid ciphertext");

        throw $r5;

     label09:
        $r1 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        $i2 = lengthof $r1;

        $i2 = i0 - $i2;

        $r7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[][] split(byte[],int)>(r2, $i2);

        r2 = $r7[0];

        $r1 = $r7[1];

        $r11 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        $z0 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: boolean equals(byte[],byte[])>($r1, $r11);

        if $z0 != 0 goto label10;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("Bad Padding: invalid ciphertext");

        throw $r5;

     label10:
        return r2;
    }
    public byte[] messageEncrypt(byte[]) throws java.lang.Exception
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher r0;
        byte[] $r1, r2, r3, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.spongycastle.crypto.prng.DigestRandomGenerator r4;
        org.spongycastle.crypto.Digest $r5;
        java.math.BigInteger $r6;
        java.security.SecureRandom $r7;
        org.spongycastle.crypto.digests.SHA1Digest $r8;
        byte $b7, $b8;
        org.spongycastle.pqc.math.linearalgebra.GF2Vector $r10, $r11;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters $r12;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters $r13;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher;

        $r1 := @parameter0: byte[];

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i4 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int k>;

        i1 = i1 >> 3;

        i2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n>;

        i3 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int t>;

        $r6 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.IntegerFunctions: java.math.BigInteger binomial(int,int)>(i2, i3);

        i2 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        i2 = i2 + -1;

        i2 = i2 >> 3;

        i3 = i1 + i2;

        i3 = i3 - $i4;

        r2 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        $i5 = lengthof r2;

        $i5 = i3 - $i5;

        i3 = lengthof $r1;

        if i3 <= $i5 goto label1;

        $i5 = lengthof $r1;

     label1:
        r2 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        i3 = lengthof r2;

        i0 = $i5 + i3;

        i3 = i0 + $i4;

        i3 = i3 - i1;

        i3 = i3 - i2;

        r2 = newarray (byte)[i0];

        $i6 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i6);

        $r1 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        r3 = <org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: byte[] PUBLIC_CONSTANT>;

        $i6 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i5, $i6);

        r3 = newarray (byte)[$i4];

        $r7 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: java.security.SecureRandom sr>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        r4 = new org.spongycastle.crypto.prng.DigestRandomGenerator;

        $r8 = new org.spongycastle.crypto.digests.SHA1Digest;

        specialinvoke $r8.<org.spongycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r4.<org.spongycastle.crypto.prng.DigestRandomGenerator: void <init>(org.spongycastle.crypto.Digest)>($r8);

        virtualinvoke r4.<org.spongycastle.crypto.prng.DigestRandomGenerator: void addSeedMaterial(byte[])>(r3);

        $r1 = newarray (byte)[i0];

        virtualinvoke r4.<org.spongycastle.crypto.prng.DigestRandomGenerator: void nextBytes(byte[])>($r1);

        $i5 = i0 + -1;

     label2:
        if $i5 < 0 goto label3;

        $b7 = $r1[$i5];

        $b8 = r2[$i5];

        i0 = $b7 ^ $b8;

        $b7 = (byte) i0;

        $r1[$i5] = $b7;

        $i5 = $i5 + -1;

        goto label2;

     label3:
        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i5 = interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i5];

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        $i5 = lengthof $r1;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: void update(byte[],int,int)>($r1, 0, $i5);

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.crypto.Digest messDigest>;

        interfaceinvoke $r5.<org.spongycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i4 = $i4 + -1;

     label4:
        if $i4 < 0 goto label5;

        $b7 = r2[$i4];

        $b8 = r3[$i4];

        $i5 = $b7 ^ $b8;

        $b7 = (byte) $i5;

        r2[$i4] = $b7;

        $i4 = $i4 + -1;

        goto label4;

     label5:
        $r9 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>(r2, $r1);

        $r1 = newarray (byte)[0];

        if i3 <= 0 goto label6;

        $r1 = newarray (byte)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r1, 0, i3);

     label6:
        r3 = newarray (byte)[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i3, r3, 0, i2);

        r2 = newarray (byte)[i1];

        $i4 = i3 + i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i4, r2, 0, i1);

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int k>;

        $r10 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GF2Vector: org.spongycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[])>(i1, r2);

        i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int n>;

        $i4 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: int t>;

        $r11 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.Conversions: org.spongycastle.pqc.math.linearalgebra.GF2Vector encode(int,int,byte[])>(i1, $i4, r3);

        $r12 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key>;

        $r13 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) $r12;

        $r10 = staticinvoke <org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Primitives: org.spongycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters,org.spongycastle.pqc.math.linearalgebra.GF2Vector,org.spongycastle.pqc.math.linearalgebra.GF2Vector)>($r13, $r10, $r11);

        r2 = virtualinvoke $r10.<org.spongycastle.pqc.math.linearalgebra.GF2Vector: byte[] getEncoded()>();

        if i3 <= 0 goto label7;

        $r1 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.ByteUtils: byte[] concatenate(byte[],byte[])>($r1, r2);

        return $r1;

     label7:
        return r2;
    }
