org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator extends java.lang.Object implements org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator
public static final java.lang.String OID
private int fieldPoly
private boolean initialized
private int m
private org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params
private int n
private java.security.SecureRandom random
private int t
    public void <init>()
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator r0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: boolean initialized> = 0;

        return;
    }
    private void initializeDefault()
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters r1;
        java.security.SecureRandom $r2;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r3;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator;

        r1 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        $r3 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters;

        specialinvoke $r3.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: void <init>()>();

        specialinvoke r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: void <init>(java.security.SecureRandom,org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)>($r2, $r3);

        virtualinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void init(org.spongycastle.crypto.KeyGenerationParameters)>(r1);

        return;
    }
    public org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator r0;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters r1;
        int $i0, $i1, $i2;
        org.spongycastle.pqc.math.linearalgebra.GF2mField r2;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM r3;
        org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2m r4;
        boolean $z0;
        java.security.SecureRandom $r5;
        org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] $r6;
        org.spongycastle.pqc.math.linearalgebra.GF2Matrix $r7, $r9;
        org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe $r8;
        org.spongycastle.pqc.math.linearalgebra.Permutation $r10;
        org.spongycastle.pqc.math.linearalgebra.Matrix $r11;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters $r12;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r13;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters r14;
        org.spongycastle.crypto.AsymmetricCipherKeyPair $r15;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator;

        $z0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: boolean initialized>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: void initializeDefault()>();

     label1:
        r2 = new org.spongycastle.pqc.math.linearalgebra.GF2mField;

        $i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int m>;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int fieldPoly>;

        specialinvoke r2.<org.spongycastle.pqc.math.linearalgebra.GF2mField: void <init>(int,int)>($i1, $i0);

        r3 = new org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM;

        $i1 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int t>;

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: java.security.SecureRandom random>;

        specialinvoke r3.<org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,int,char,java.security.SecureRandom)>(r2, $i1, 73, $r5);

        r4 = new org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2m;

        specialinvoke r4.<org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2m: void <init>(org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>(r2, r3);

        $r6 = virtualinvoke r4.<org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2m: org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getSquareRootMatrix()>();

        $r7 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GoppaCode: org.spongycastle.pqc.math.linearalgebra.GF2Matrix createCanonicalCheckMatrix(org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM)>(r2, r3);

        $r5 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: java.security.SecureRandom random>;

        $r8 = staticinvoke <org.spongycastle.pqc.math.linearalgebra.GoppaCode: org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe computeSystematicForm(org.spongycastle.pqc.math.linearalgebra.GF2Matrix,java.security.SecureRandom)>($r7, $r5);

        $r9 = virtualinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe: org.spongycastle.pqc.math.linearalgebra.GF2Matrix getSecondMatrix()>();

        $r10 = virtualinvoke $r8.<org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe: org.spongycastle.pqc.math.linearalgebra.Permutation getPermutation()>();

        $r11 = virtualinvoke $r9.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: org.spongycastle.pqc.math.linearalgebra.Matrix computeTranspose()>();

        $r9 = (org.spongycastle.pqc.math.linearalgebra.GF2Matrix) $r11;

        $i1 = virtualinvoke $r9.<org.spongycastle.pqc.math.linearalgebra.GF2Matrix: int getNumRows()>();

        r1 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int n>;

        $i2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int t>;

        $r12 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r13 = virtualinvoke $r12.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        specialinvoke r1.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i2, $r9, $r13);

        r14 = new org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters;

        $i0 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int n>;

        $r12 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r13 = virtualinvoke $r12.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        specialinvoke r14.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters: void <init>(java.lang.String,int,int,org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.spongycastle.pqc.math.linearalgebra.Permutation,org.spongycastle.pqc.math.linearalgebra.GF2Matrix,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[],org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)>("1.3.6.1.4.1.8301.3.1.3.4.2", $i0, $i1, r2, r3, $r10, $r7, $r6, $r13);

        $r15 = new org.spongycastle.crypto.AsymmetricCipherKeyPair;

        specialinvoke $r15.<org.spongycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.spongycastle.crypto.params.AsymmetricKeyParameter,org.spongycastle.crypto.params.AsymmetricKeyParameter)>(r1, r14);

        return $r15;
    }
    public void init(org.spongycastle.crypto.KeyGenerationParameters)
    {
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator r0;
        org.spongycastle.crypto.KeyGenerationParameters $r1;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters $r2;
        java.security.SecureRandom $r3;
        org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters $r4;
        int $i0;

        r0 := @this: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator;

        $r1 := @parameter0: org.spongycastle.crypto.KeyGenerationParameters;

        $r2 = (org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters) $r1;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params> = $r2;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: java.security.SecureRandom random> = $r3;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: int getM()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int m> = $i0;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: int getN()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int n> = $i0;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: int getT()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int t> = $i0;

        $r2 = r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params>;

        $r4 = virtualinvoke $r2.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters: org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters()>();

        $i0 = virtualinvoke $r4.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters: int getFieldPoly()>();

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: int fieldPoly> = $i0;

        r0.<org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator: boolean initialized> = 1;

        return;
    }
