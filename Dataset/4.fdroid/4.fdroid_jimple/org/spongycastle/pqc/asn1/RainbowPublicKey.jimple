org.spongycastle.pqc.asn1.RainbowPublicKey extends org.spongycastle.asn1.ASN1Object
private byte[][] coeffQuadratic
private byte[] coeffScalar
private byte[][] coeffSingular
private org.spongycastle.asn1.ASN1Integer docLength
private org.spongycastle.asn1.ASN1ObjectIdentifier oid
private org.spongycastle.asn1.ASN1Integer version
    public void <init>(int, short[][], short[][], short[])
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        int $i0;
        short[][] $r1, $r2;
        short[] $r3;
        org.spongycastle.asn1.ASN1Integer $r4;
        long $l1;
        byte[][] $r5;
        byte[] $r6;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $i0 := @parameter0: int;

        $r1 := @parameter1: short[][];

        $r2 := @parameter2: short[][];

        $r3 := @parameter3: short[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r4 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r4.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>(0L);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer version> = $r4;

        $r4 = new org.spongycastle.asn1.ASN1Integer;

        $l1 = (long) $i0;

        specialinvoke $r4.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l1);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer docLength> = $r4;

        $r5 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][] convertArray(short[][])>($r1);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic> = $r5;

        $r5 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][] convertArray(short[][])>($r2);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular> = $r5;

        $r6 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[] convertArray(short[])>($r3);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[] coeffScalar> = $r6;

        return;
    }
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1, $r4;
        org.spongycastle.asn1.ASN1Encodable $r2;
        boolean $z0;
        org.spongycastle.asn1.ASN1Integer $r3;
        int $i0, $i1;
        byte[][] $r5;
        org.spongycastle.asn1.ASN1OctetString $r6;
        byte[] $r7;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r8;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $z0 = $r2 instanceof org.spongycastle.asn1.ASN1Integer;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r2);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer version> = $r3;

     label1:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r3 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r2);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer docLength> = $r3;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        $r4 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r5 = newarray (byte[])[$i0];

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic> = $r5;

        $i0 = 0;

     label2:
        $i1 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 >= $i1 goto label4;

        $r5 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic>;

        $r2 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r5[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r8 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r2);

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier oid> = $r8;

        goto label1;

     label4:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        $r4 = (org.spongycastle.asn1.ASN1Sequence) $r2;

        $i0 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r5 = newarray (byte[])[$i0];

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular> = $r5;

        $i0 = 0;

     label5:
        $i1 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 >= $i1 goto label6;

        $r5 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular>;

        $r2 = virtualinvoke $r4.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r5[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(4);

        $r1 = (org.spongycastle.asn1.ASN1Sequence) $r2;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[] coeffScalar> = $r7;

        return;
    }
    public static org.spongycastle.pqc.asn1.RainbowPublicKey getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.pqc.asn1.RainbowPublicKey r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.pqc.asn1.RainbowPublicKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.asn1.RainbowPublicKey) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.pqc.asn1.RainbowPublicKey: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public short[][] getCoeffQuadratic()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        short[][] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][] convertArray(byte[][])>($r2);

        return $r1;
    }
    public short[] getCoeffScalar()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        short[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[] coeffScalar>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[] convertArray(byte[])>($r2);

        return $r1;
    }
    public short[][] getCoeffSingular()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        short[][] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][] convertArray(byte[][])>($r2);

        return $r1;
    }
    public int getDocLength()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        org.spongycastle.asn1.ASN1Integer $r1;
        java.math.BigInteger $r2;
        int $i0;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        $r1 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer docLength>;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    public org.spongycastle.asn1.ASN1Integer getVersion()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        org.spongycastle.asn1.ASN1Integer r1;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        r1 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer version>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.pqc.asn1.RainbowPublicKey r0;
        org.spongycastle.asn1.ASN1EncodableVector r1, r2;
        org.spongycastle.asn1.ASN1Integer $r3;
        int i0, $i1;
        byte[][] $r4;
        org.spongycastle.asn1.DEROctetString $r5;
        byte[] $r6;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r7;
        org.spongycastle.asn1.DERSequence $r8;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPublicKey;

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r3 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer version>;

        if $r3 == null goto label3;

        $r3 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer version>;

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

     label1:
        $r3 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1Integer docLength>;

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label2:
        $r4 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        $r5 = new org.spongycastle.asn1.DEROctetString;

        $r4 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffQuadratic>;

        $r6 = $r4[i0];

        specialinvoke $r5.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r6);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r7 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: org.spongycastle.asn1.ASN1ObjectIdentifier oid>;

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        goto label1;

     label4:
        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label5:
        $r4 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label6;

        $r5 = new org.spongycastle.asn1.DEROctetString;

        $r4 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[][] coeffSingular>;

        $r6 = $r4[i0];

        specialinvoke $r5.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r6);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        i0 = i0 + 1;

        goto label5;

     label6:
        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r5 = new org.spongycastle.asn1.DEROctetString;

        $r6 = r0.<org.spongycastle.pqc.asn1.RainbowPublicKey: byte[] coeffScalar>;

        specialinvoke $r5.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r6);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r5);

        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r8 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r8.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        return $r8;
    }
