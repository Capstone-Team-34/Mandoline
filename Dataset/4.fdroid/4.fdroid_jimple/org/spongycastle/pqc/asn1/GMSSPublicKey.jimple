org.spongycastle.pqc.asn1.GMSSPublicKey extends org.spongycastle.asn1.ASN1Object
private byte[] publicKey
private org.spongycastle.asn1.ASN1Integer version
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.pqc.asn1.GMSSPublicKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        org.spongycastle.asn1.ASN1OctetString $r7;
        byte[] $r8;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPublicKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size of seq = ");

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r6 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r5);

        r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: org.spongycastle.asn1.ASN1Integer version> = $r6;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        $r7 = staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: byte[] publicKey> = $r8;

        return;
    }
    public void <init>(byte[])
    {
        org.spongycastle.pqc.asn1.GMSSPublicKey r0;
        byte[] $r1;
        org.spongycastle.asn1.ASN1Integer $r2;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPublicKey;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r2 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r2.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>(0L);

        r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: org.spongycastle.asn1.ASN1Integer version> = $r2;

        r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: byte[] publicKey> = $r1;

        return;
    }
    public static org.spongycastle.pqc.asn1.GMSSPublicKey getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.pqc.asn1.GMSSPublicKey r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.pqc.asn1.GMSSPublicKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.asn1.GMSSPublicKey) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.pqc.asn1.GMSSPublicKey;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.pqc.asn1.GMSSPublicKey: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public byte[] getPublicKey()
    {
        org.spongycastle.pqc.asn1.GMSSPublicKey r0;
        byte[] $r1;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPublicKey;

        $r1 = r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: byte[] publicKey>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1);

        return $r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.pqc.asn1.GMSSPublicKey r0;
        org.spongycastle.asn1.ASN1EncodableVector r1;
        byte[] $r2;
        org.spongycastle.asn1.ASN1Integer $r3;
        org.spongycastle.asn1.DEROctetString $r4;
        org.spongycastle.asn1.DERSequence $r5;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPublicKey;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r3 = r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: org.spongycastle.asn1.ASN1Integer version>;

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r3);

        $r4 = new org.spongycastle.asn1.DEROctetString;

        $r2 = r0.<org.spongycastle.pqc.asn1.GMSSPublicKey: byte[] publicKey>;

        specialinvoke $r4.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r2);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r4);

        $r5 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r5.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        return $r5;
    }
