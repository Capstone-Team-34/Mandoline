org.spongycastle.pqc.asn1.RainbowPrivateKey extends org.spongycastle.asn1.ASN1Object
private byte[] b1
private byte[] b2
private byte[][] invA1
private byte[][] invA2
private org.spongycastle.pqc.crypto.rainbow.Layer[] layers
private org.spongycastle.asn1.ASN1ObjectIdentifier oid
private org.spongycastle.asn1.ASN1Integer version
private byte[] vi
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1, r5, r12, r14;
        byte[][][][] r2, $r10;
        int i0, $i1, $i2, $i3;
        org.spongycastle.asn1.ASN1Encodable $r3;
        boolean $z0;
        org.spongycastle.asn1.ASN1Integer $r4;
        byte[][] $r6, $r15;
        org.spongycastle.asn1.ASN1OctetString $r7;
        byte[] $r8;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r9;
        byte[][][] $r11, $r13;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r16;
        org.spongycastle.pqc.crypto.rainbow.Layer r17;
        byte $b4, $b5;
        short[][][] $r18, $r19;
        short[][] $r20;
        short[] $r21;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $z0 = $r3 instanceof org.spongycastle.asn1.ASN1Integer;

        if $z0 == 0 goto label03;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r4 = staticinvoke <org.spongycastle.asn1.ASN1Integer: org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1Integer version> = $r4;

     label01:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        i0 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r6 = newarray (byte[])[i0];

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1> = $r6;

        i0 = 0;

     label02:
        $i1 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i0 >= $i1 goto label04;

        $r6 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1>;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r6[i0] = $r8;

        i0 = i0 + 1;

        goto label02;

     label03:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r9 = staticinvoke <org.spongycastle.asn1.ASN1ObjectIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>($r3);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1ObjectIdentifier oid> = $r9;

        goto label01;

     label04:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b1> = $r8;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        i0 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r6 = newarray (byte[])[i0];

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2> = $r6;

        i0 = 0;

     label05:
        $i1 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i0 >= $i1 goto label06;

        $r6 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2>;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r6[i0] = $r8;

        i0 = i0 + 1;

        goto label05;

     label06:
        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(4);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b2> = $r8;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(5);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi> = $r8;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(6);

        $r1 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r2 = newarray (byte[][][])[i0];

        i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r10 = newarray (byte[][][])[i0];

        i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r11 = newarray (byte[][])[i0];

        i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r6 = newarray (byte[])[i0];

        i0 = 0;

     label07:
        $i1 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if i0 >= $i1 goto label18;

        $r3 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(i0);

        r5 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        r12 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $i1 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r13 = newarray (byte[][])[$i1];

        r2[i0] = $r13;

        $i1 = 0;

     label08:
        $i2 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i1 >= $i2 goto label11;

        $r3 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        r14 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r13 = r2[i0];

        $i2 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r15 = newarray (byte[])[$i2];

        $r13[$i1] = $r15;

        $i2 = 0;

     label09:
        $i3 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i2 >= $i3 goto label10;

        $r13 = r2[i0];

        $r15 = $r13[$i1];

        $r3 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i2);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r15[$i2] = $r8;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        $i1 = $i1 + 1;

        goto label08;

     label11:
        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        r12 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $i1 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r13 = newarray (byte[][])[$i1];

        $r10[i0] = $r13;

        $i1 = 0;

     label12:
        $i2 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i1 >= $i2 goto label15;

        $r3 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        r14 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $r13 = $r10[i0];

        $i2 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r15 = newarray (byte[])[$i2];

        $r13[$i1] = $r15;

        $i2 = 0;

     label13:
        $i3 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i2 >= $i3 goto label14;

        $r13 = $r10[i0];

        $r15 = $r13[$i1];

        $r3 = virtualinvoke r14.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i2);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r15[$i2] = $r8;

        $i2 = $i2 + 1;

        goto label13;

     label14:
        $i1 = $i1 + 1;

        goto label12;

     label15:
        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        r12 = (org.spongycastle.asn1.ASN1Sequence) $r3;

        $i1 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r15 = newarray (byte[])[$i1];

        $r11[i0] = $r15;

        $i1 = 0;

     label16:
        $i2 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i1 >= $i2 goto label17;

        $r15 = $r11[i0];

        $r3 = virtualinvoke r12.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r15[$i1] = $r8;

        $i1 = $i1 + 1;

        goto label16;

     label17:
        $r3 = virtualinvoke r5.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        $r7 = (org.spongycastle.asn1.ASN1OctetString) $r3;

        $r8 = virtualinvoke $r7.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>();

        $r6[i0] = $r8;

        i0 = i0 + 1;

        goto label07;

     label18:
        $r8 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi>;

        i0 = lengthof $r8;

        i0 = i0 + -1;

        $r16 = newarray (org.spongycastle.pqc.crypto.rainbow.Layer)[i0];

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers> = $r16;

        $i1 = 0;

     label19:
        if $i1 >= i0 goto label20;

        r17 = new org.spongycastle.pqc.crypto.rainbow.Layer;

        $r8 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi>;

        $b4 = $r8[$i1];

        $r8 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi>;

        $i2 = $i1 + 1;

        $b5 = $r8[$i2];

        $r13 = r2[$i1];

        $r18 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][][] convertArray(byte[][][])>($r13);

        $r13 = $r10[$i1];

        $r19 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][][] convertArray(byte[][][])>($r13);

        $r15 = $r11[$i1];

        $r20 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][] convertArray(byte[][])>($r15);

        $r8 = $r6[$i1];

        $r21 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[] convertArray(byte[])>($r8);

        specialinvoke r17.<org.spongycastle.pqc.crypto.rainbow.Layer: void <init>(byte,byte,short[][][],short[][][],short[][],short[])>($b4, $b5, $r18, $r19, $r20, $r21);

        $r16 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r16[$i1] = r17;

        $i1 = $i1 + 1;

        goto label19;

     label20:
        return;
    }
    public void <init>(short[][], short[], short[][], short[], int[], org.spongycastle.pqc.crypto.rainbow.Layer[])
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        short[][] $r1, $r3;
        short[] $r2, $r4;
        int[] $r5;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r6;
        org.spongycastle.asn1.ASN1Integer $r7;
        byte[][] $r8;
        byte[] $r9;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r1 := @parameter0: short[][];

        $r2 := @parameter1: short[];

        $r3 := @parameter2: short[][];

        $r4 := @parameter3: short[];

        $r5 := @parameter4: int[];

        $r6 := @parameter5: org.spongycastle.pqc.crypto.rainbow.Layer[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r7 = new org.spongycastle.asn1.ASN1Integer;

        specialinvoke $r7.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>(1L);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1Integer version> = $r7;

        $r8 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][] convertArray(short[][])>($r1);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1> = $r8;

        $r9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[] convertArray(short[])>($r2);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b1> = $r9;

        $r8 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][] convertArray(short[][])>($r3);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2> = $r8;

        $r9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[] convertArray(short[])>($r4);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b2> = $r9;

        $r9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[] convertIntArray(int[])>($r5);

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi> = $r9;

        r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers> = $r6;

        return;
    }
    public static org.spongycastle.pqc.asn1.RainbowPrivateKey getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.pqc.asn1.RainbowPrivateKey r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.pqc.asn1.RainbowPrivateKey;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.asn1.RainbowPrivateKey) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.pqc.asn1.RainbowPrivateKey: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public short[] getB1()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        short[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b1>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[] convertArray(byte[])>($r2);

        return $r1;
    }
    public short[] getB2()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        short[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b2>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[] convertArray(byte[])>($r2);

        return $r1;
    }
    public short[][] getInvA1()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        short[][] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][] convertArray(byte[][])>($r2);

        return $r1;
    }
    public short[][] getInvA2()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        short[][] $r1;
        byte[][] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: short[][] convertArray(byte[][])>($r2);

        return $r1;
    }
    public org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        org.spongycastle.pqc.crypto.rainbow.Layer[] r1;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        r1 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        return r1;
    }
    public org.spongycastle.asn1.ASN1Integer getVersion()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        org.spongycastle.asn1.ASN1Integer r1;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        r1 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1Integer version>;

        return r1;
    }
    public int[] getVi()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        int[] $r1;
        byte[] $r2;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        $r2 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi>;

        $r1 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: int[] convertArraytoInt(byte[])>($r2);

        return $r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.pqc.asn1.RainbowPrivateKey r0;
        org.spongycastle.asn1.ASN1EncodableVector r1, r2, r3, r4, r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        int i0, $i1, $i2, $i3;
        byte[][] $r7;
        org.spongycastle.asn1.DEROctetString $r8;
        byte[] $r9;
        org.spongycastle.asn1.ASN1ObjectIdentifier $r10;
        org.spongycastle.asn1.DERSequence $r11;
        org.spongycastle.pqc.crypto.rainbow.Layer[] $r12;
        org.spongycastle.pqc.crypto.rainbow.Layer $r13;
        short[][][] $r14;
        byte[][][] $r15;
        short[][] $r16;
        short[] $r17;

        r0 := @this: org.spongycastle.pqc.asn1.RainbowPrivateKey;

        r5 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r6 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1Integer version>;

        if $r6 == null goto label03;

        $r6 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1Integer version>;

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

     label01:
        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label02:
        $r7 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1>;

        $i1 = lengthof $r7;

        if i0 >= $i1 goto label04;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r7 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA1>;

        $r9 = $r7[i0];

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        i0 = i0 + 1;

        goto label02;

     label03:
        $r10 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.asn1.ASN1ObjectIdentifier oid>;

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r10);

        goto label01;

     label04:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r9 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b1>;

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label05:
        $r7 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2>;

        $i1 = lengthof $r7;

        if i0 >= $i1 goto label06;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r7 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[][] invA2>;

        $r9 = $r7[i0];

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        i0 = i0 + 1;

        goto label05;

     label06:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r9 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] b2>;

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r9 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: byte[] vi>;

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        r4 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label07:
        $r12 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $i1 = lengthof $r12;

        if i0 >= $i1 goto label18;

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r12 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r13 = $r12[i0];

        $r14 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][][] getCoeffAlpha()>();

        $r15 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][][] convertArray(short[][][])>($r14);

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $i1 = 0;

     label08:
        $i2 = lengthof $r15;

        if $i1 >= $i2 goto label11;

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $i2 = 0;

     label09:
        $r7 = $r15[$i1];

        $i3 = lengthof $r7;

        if $i2 >= $i3 goto label10;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r7 = $r15[$i1];

        $r9 = $r7[$i2];

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $i2 = $i2 + 1;

        goto label09;

     label10:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $i1 = $i1 + 1;

        goto label08;

     label11:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $r12 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r13 = $r12[i0];

        $r14 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][][] getCoeffBeta()>();

        $r15 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][][] convertArray(short[][][])>($r14);

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $i1 = 0;

     label12:
        $i2 = lengthof $r15;

        if $i1 >= $i2 goto label15;

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $i2 = 0;

     label13:
        $r7 = $r15[$i1];

        $i3 = lengthof $r7;

        if $i2 >= $i3 goto label14;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r7 = $r15[$i1];

        $r9 = $r7[$i2];

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $i2 = $i2 + 1;

        goto label13;

     label14:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $i1 = $i1 + 1;

        goto label12;

     label15:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $r12 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r13 = $r12[i0];

        $r16 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.Layer: short[][] getCoeffGamma()>();

        $r7 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[][] convertArray(short[][])>($r16);

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $i1 = 0;

     label16:
        $i2 = lengthof $r7;

        if $i1 >= $i2 goto label17;

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r9 = $r7[$i1];

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $i1 = $i1 + 1;

        goto label16;

     label17:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $r8 = new org.spongycastle.asn1.DEROctetString;

        $r12 = r0.<org.spongycastle.pqc.asn1.RainbowPrivateKey: org.spongycastle.pqc.crypto.rainbow.Layer[] layers>;

        $r13 = $r12[i0];

        $r17 = virtualinvoke $r13.<org.spongycastle.pqc.crypto.rainbow.Layer: short[] getCoeffEta()>();

        $r9 = staticinvoke <org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil: byte[] convertArray(short[])>($r17);

        specialinvoke $r8.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r9);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r8);

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        i0 = i0 + 1;

        goto label07;

     label18:
        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r4);

        virtualinvoke r5.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r11);

        $r11 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r11.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r5);

        return $r11;
    }
