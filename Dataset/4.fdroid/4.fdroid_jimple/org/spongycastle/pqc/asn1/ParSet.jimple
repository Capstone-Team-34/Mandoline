org.spongycastle.pqc.asn1.ParSet extends org.spongycastle.asn1.ASN1Object
private static final java.math.BigInteger ZERO
private int[] h
private int[] k
private int t
private int[] w
    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.spongycastle.pqc.asn1.ParSet: java.math.BigInteger ZERO> = $r0;

        return;
    }
    public void <init>(int, int[], int[], int[])
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        int $i0;
        int[] $r1, $r2, $r3;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        r0.<org.spongycastle.pqc.asn1.ParSet: int t> = $i0;

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] h> = $r1;

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] w> = $r2;

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] k> = $r3;

        return;
    }
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        org.spongycastle.asn1.ASN1Sequence $r1, r8, r9;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.spongycastle.asn1.ASN1Encodable $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        java.math.BigInteger $r7;
        int[] $r10;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 == 4 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sie of seqOfParams = ");

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i0 = staticinvoke <org.spongycastle.pqc.asn1.ParSet: int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger)>($r7);

        r0.<org.spongycastle.pqc.asn1.ParSet: int t> = $i0;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        r8 = (org.spongycastle.asn1.ASN1Sequence) $r5;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        r9 = (org.spongycastle.asn1.ASN1Sequence) $r5;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        $r1 = (org.spongycastle.asn1.ASN1Sequence) $r5;

        $i0 = virtualinvoke r8.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $i1 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        if $i0 != $i1 goto label2;

        $i0 = virtualinvoke r9.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $i1 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        if $i0 != $i1 goto label2;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $i1 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        if $i0 == $i1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid size of sequences");

        throw $r2;

     label3:
        $i0 = virtualinvoke r8.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r10 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] h> = $r10;

        $i0 = virtualinvoke r9.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r10 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] w> = $r10;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        $r10 = newarray (int)[$i0];

        r0.<org.spongycastle.pqc.asn1.ParSet: int[] k> = $r10;

        $i0 = 0;

     label4:
        $i1 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        if $i0 >= $i1 goto label5;

        $r10 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] h>;

        $r5 = virtualinvoke r8.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = staticinvoke <org.spongycastle.pqc.asn1.ParSet: int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger)>($r7);

        $r10[$i0] = $i1;

        $r10 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] w>;

        $r5 = virtualinvoke r9.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = staticinvoke <org.spongycastle.pqc.asn1.ParSet: int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger)>($r7);

        $r10[$i0] = $i1;

        $r10 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] k>;

        $r5 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r6 = (org.spongycastle.asn1.ASN1Integer) $r5;

        $r7 = virtualinvoke $r6.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $i1 = staticinvoke <org.spongycastle.pqc.asn1.ParSet: int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger)>($r7);

        $r10[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        return;
    }
    private static int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label1;

        $r1 = <org.spongycastle.pqc.asn1.ParSet: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BigInteger not in Range: ");

        $r4 = virtualinvoke $r0.<java.math.BigInteger: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $i0 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    public static org.spongycastle.pqc.asn1.ParSet getInstance(java.lang.Object)
    {
        org.spongycastle.asn1.ASN1Sequence $r0;
        java.lang.Object r1;
        boolean $z0;
        org.spongycastle.pqc.asn1.ParSet r2;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.spongycastle.pqc.asn1.ParSet;

        if $z0 == 0 goto label1;

        r2 = (org.spongycastle.pqc.asn1.ParSet) r1;

        return r2;

     label1:
        if r1 == null goto label2;

        r2 = new org.spongycastle.pqc.asn1.ParSet;

        $r0 = staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>(r1);

        specialinvoke r2.<org.spongycastle.pqc.asn1.ParSet: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0);

        return r2;

     label2:
        return null;
    }
    public int[] getH()
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        $r1 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] h>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public int[] getK()
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        $r1 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] k>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public int getT()
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        int i0;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        i0 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        return i0;
    }
    public int[] getW()
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        int[] $r1;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        $r1 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] w>;

        $r1 = staticinvoke <org.spongycastle.util.Arrays: int[] clone(int[])>($r1);

        return $r1;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.pqc.asn1.ParSet r0;
        org.spongycastle.asn1.ASN1EncodableVector r1, r2, r3, r4;
        int i0, $i1;
        int[] $r5;
        org.spongycastle.asn1.ASN1Integer $r6;
        long $l2;
        org.spongycastle.asn1.DERSequence $r7;

        r0 := @this: org.spongycastle.pqc.asn1.ParSet;

        r2 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r3 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r1 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = 0;

     label1:
        $r5 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] h>;

        $i1 = lengthof $r5;

        if i0 >= $i1 goto label2;

        $r6 = new org.spongycastle.asn1.ASN1Integer;

        $r5 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] h>;

        $i1 = $r5[i0];

        $l2 = (long) $i1;

        specialinvoke $r6.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r2.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r6 = new org.spongycastle.asn1.ASN1Integer;

        $r5 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] w>;

        $i1 = $r5[i0];

        $l2 = (long) $i1;

        specialinvoke $r6.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r3.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r6 = new org.spongycastle.asn1.ASN1Integer;

        $r5 = r0.<org.spongycastle.pqc.asn1.ParSet: int[] k>;

        $i1 = $r5[i0];

        $l2 = (long) $i1;

        specialinvoke $r6.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r1.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        i0 = i0 + 1;

        goto label1;

     label2:
        r4 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r6 = new org.spongycastle.asn1.ASN1Integer;

        i0 = r0.<org.spongycastle.pqc.asn1.ParSet: int t>;

        $l2 = (long) i0;

        specialinvoke $r6.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r6);

        $r7 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r7.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r2);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r7 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r7.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r3);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r7 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r7.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r1);

        virtualinvoke r4.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r7);

        $r7 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r7.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r4);

        return $r7;
    }
