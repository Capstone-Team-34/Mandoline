org.spongycastle.pqc.asn1.GMSSPrivateKey extends org.spongycastle.asn1.ASN1Object
private org.spongycastle.asn1.ASN1Primitive primitive
    private void <init>(org.spongycastle.asn1.ASN1Sequence)
    {
        org.spongycastle.pqc.asn1.GMSSPrivateKey r0;
        org.spongycastle.asn1.ASN1Sequence $r1, r7, r10;
        byte[][][] r2;
        byte[][] r3;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] r4;
        int[] r5;
        org.spongycastle.asn1.ASN1Encodable $r6;
        int $i0, $i1, $i2;
        org.spongycastle.asn1.DEROctetString $r8;
        byte[] $r9;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPrivateKey;

        $r1 := @parameter0: org.spongycastle.asn1.ASN1Sequence;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(0);

        r7 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r5 = newarray (int)[$i0];

        $i0 = 0;

     label01:
        $i1 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        if $i0 >= $i1 goto label02;

        $r6 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $i1 = staticinvoke <org.spongycastle.pqc.asn1.GMSSPrivateKey: int checkBigIntegerInIntRange(org.spongycastle.asn1.ASN1Encodable)>($r6);

        r5[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(1);

        r7 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r3 = newarray (byte[])[$i0];

        $i0 = 0;

     label03:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label04;

        $r6 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r8 = (org.spongycastle.asn1.DEROctetString) $r6;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DEROctetString: byte[] getOctets()>();

        r3[$i0] = $r9;

        $i0 = $i0 + 1;

        goto label03;

     label04:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(2);

        r7 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r3 = newarray (byte[])[$i0];

        $i0 = 0;

     label05:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label06;

        $r6 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        $r8 = (org.spongycastle.asn1.DEROctetString) $r6;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DEROctetString: byte[] getOctets()>();

        r3[$i0] = $r9;

        $i0 = $i0 + 1;

        goto label05;

     label06:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(3);

        r7 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r2 = newarray (byte[][])[$i0];

        $i0 = 0;

     label07:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label10;

        $r6 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        r10 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i1 = virtualinvoke r10.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r3 = newarray (byte[])[$i1];

        r2[$i0] = r3;

        $i1 = 0;

     label08:
        r3 = r2[$i0];

        $i2 = lengthof r3;

        if $i1 >= $i2 goto label09;

        r3 = r2[$i0];

        $r6 = virtualinvoke r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        $r8 = (org.spongycastle.asn1.DEROctetString) $r6;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DEROctetString: byte[] getOctets()>();

        r3[$i1] = $r9;

        $i1 = $i1 + 1;

        goto label08;

     label09:
        $i0 = $i0 + 1;

        goto label07;

     label10:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(4);

        r7 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r2 = newarray (byte[][])[$i0];

        $i0 = 0;

     label11:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label14;

        $r6 = virtualinvoke r7.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i0);

        r10 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i1 = virtualinvoke r10.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r3 = newarray (byte[])[$i1];

        r2[$i0] = r3;

        $i1 = 0;

     label12:
        r3 = r2[$i0];

        $i2 = lengthof r3;

        if $i1 >= $i2 goto label13;

        r3 = r2[$i0];

        $r6 = virtualinvoke r10.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>($i1);

        $r8 = (org.spongycastle.asn1.DEROctetString) $r6;

        $r9 = virtualinvoke $r8.<org.spongycastle.asn1.DEROctetString: byte[] getOctets()>();

        r3[$i1] = $r9;

        $i1 = $i1 + 1;

        goto label12;

     label13:
        $i0 = $i0 + 1;

        goto label11;

     label14:
        $r6 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Encodable getObjectAt(int)>(5);

        $r1 = (org.spongycastle.asn1.ASN1Sequence) $r6;

        $i0 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Sequence: int size()>();

        r4 = newarray (org.spongycastle.pqc.crypto.gmss.Treehash[])[$i0];

        return;
    }
    public void <init>(int[], byte[][], byte[][], byte[][][], byte[][][], org.spongycastle.pqc.crypto.gmss.Treehash[][], org.spongycastle.pqc.crypto.gmss.Treehash[][], java.util.Vector[], java.util.Vector[], java.util.Vector[][], java.util.Vector[][], byte[][][], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], int[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootSig[], org.spongycastle.pqc.crypto.gmss.GMSSParameters, org.spongycastle.asn1.x509.AlgorithmIdentifier)
    {
        org.spongycastle.pqc.asn1.GMSSPrivateKey r0;
        int[] $r1, $r16;
        byte[][] $r2, $r3, $r17, $r19;
        byte[][][] $r4, $r5, $r12;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r6, $r7;
        java.util.Vector[] $r8, $r9;
        java.util.Vector[][] $r10, $r11;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r13, $r14, $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r18;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r20;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r21;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r22;
        org.spongycastle.asn1.ASN1Primitive $r23;
        org.spongycastle.asn1.x509.AlgorithmIdentifier[] $r24;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPrivateKey;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: byte[][];

        $r4 := @parameter3: byte[][][];

        $r5 := @parameter4: byte[][][];

        $r6 := @parameter5: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r7 := @parameter6: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r8 := @parameter7: java.util.Vector[];

        $r9 := @parameter8: java.util.Vector[];

        $r10 := @parameter9: java.util.Vector[][];

        $r11 := @parameter10: java.util.Vector[][];

        $r12 := @parameter11: byte[][][];

        $r13 := @parameter12: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r14 := @parameter13: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r15 := @parameter14: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r16 := @parameter15: int[];

        $r17 := @parameter16: byte[][];

        $r18 := @parameter17: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        $r19 := @parameter18: byte[][];

        $r20 := @parameter19: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        $r21 := @parameter20: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r22 := @parameter21: org.spongycastle.asn1.x509.AlgorithmIdentifier;

        specialinvoke r0.<org.spongycastle.asn1.ASN1Object: void <init>()>();

        $r24 = newarray (org.spongycastle.asn1.x509.AlgorithmIdentifier)[1];

        $r24[0] = $r22;

        $r23 = specialinvoke r0.<org.spongycastle.pqc.asn1.GMSSPrivateKey: org.spongycastle.asn1.ASN1Primitive encode(int[],byte[][],byte[][],byte[][][],byte[][][],byte[][][],org.spongycastle.pqc.crypto.gmss.Treehash[][],org.spongycastle.pqc.crypto.gmss.Treehash[][],java.util.Vector[],java.util.Vector[],java.util.Vector[][],java.util.Vector[][],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],org.spongycastle.pqc.crypto.gmss.GMSSLeaf[],int[],byte[][],org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[],byte[][],org.spongycastle.pqc.crypto.gmss.GMSSRootSig[],org.spongycastle.pqc.crypto.gmss.GMSSParameters,org.spongycastle.asn1.x509.AlgorithmIdentifier[])>($r1, $r2, $r3, $r4, $r5, $r12, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24);

        r0.<org.spongycastle.pqc.asn1.GMSSPrivateKey: org.spongycastle.asn1.ASN1Primitive primitive> = $r23;

        return;
    }
    private static int checkBigIntegerInIntRange(org.spongycastle.asn1.ASN1Encodable)
    {
        org.spongycastle.asn1.ASN1Encodable $r0;
        org.spongycastle.asn1.ASN1Integer $r1;
        java.math.BigInteger $r2, $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: org.spongycastle.asn1.ASN1Encodable;

        $r1 = (org.spongycastle.asn1.ASN1Integer) $r0;

        $r2 = virtualinvoke $r1.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>();

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 > 0 goto label1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 >= 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BigInteger not in Range: ");

        $r6 = virtualinvoke $r2.<java.math.BigInteger: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        $i0 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        return $i0;
    }
    private org.spongycastle.asn1.ASN1Primitive encode(int[], byte[][], byte[][], byte[][][], byte[][][], byte[][][], org.spongycastle.pqc.crypto.gmss.Treehash[][], org.spongycastle.pqc.crypto.gmss.Treehash[][], java.util.Vector[], java.util.Vector[], java.util.Vector[][], java.util.Vector[][], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], org.spongycastle.pqc.crypto.gmss.GMSSLeaf[], int[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[], byte[][], org.spongycastle.pqc.crypto.gmss.GMSSRootSig[], org.spongycastle.pqc.crypto.gmss.GMSSParameters, org.spongycastle.asn1.x509.AlgorithmIdentifier[])
    {
        org.spongycastle.pqc.asn1.GMSSPrivateKey r0;
        int[] $r1, $r16;
        byte[][] $r2, $r3, $r17, $r19;
        byte[][][] $r4, $r5, $r6;
        org.spongycastle.pqc.crypto.gmss.Treehash[][] $r7, $r8;
        java.util.Vector[] $r9, $r10;
        java.util.Vector[][] $r11, $r12;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf[] $r13, $r14, $r15;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[] $r18;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig[] $r20;
        org.spongycastle.pqc.crypto.gmss.GMSSParameters $r21;
        org.spongycastle.asn1.x509.AlgorithmIdentifier[] $r22;
        org.spongycastle.asn1.ASN1EncodableVector r23, r24, r25, r26, r27, r32, r40, r41, r43, r44;
        int i0, i1, $i3, i4, $i5;
        org.spongycastle.asn1.ASN1Integer $r28;
        long $l2;
        org.spongycastle.asn1.DERSequence $r29, $r36;
        org.spongycastle.asn1.DEROctetString $r30;
        byte[] $r31;
        org.spongycastle.pqc.crypto.gmss.Treehash[] $r33;
        org.spongycastle.asn1.x509.AlgorithmIdentifier $r34;
        org.spongycastle.pqc.crypto.gmss.Treehash $r35;
        java.util.Vector $r37;
        java.lang.Object $r38;
        org.spongycastle.pqc.crypto.gmss.GMSSLeaf $r39;
        org.spongycastle.pqc.crypto.gmss.GMSSRootCalc $r42;
        org.spongycastle.pqc.crypto.gmss.GMSSRootSig $r45;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPrivateKey;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: byte[][];

        $r3 := @parameter2: byte[][];

        $r4 := @parameter3: byte[][][];

        $r5 := @parameter4: byte[][][];

        $r6 := @parameter5: byte[][][];

        $r7 := @parameter6: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r8 := @parameter7: org.spongycastle.pqc.crypto.gmss.Treehash[][];

        $r9 := @parameter8: java.util.Vector[];

        $r10 := @parameter9: java.util.Vector[];

        $r11 := @parameter10: java.util.Vector[][];

        $r12 := @parameter11: java.util.Vector[][];

        $r13 := @parameter12: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r14 := @parameter13: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r15 := @parameter14: org.spongycastle.pqc.crypto.gmss.GMSSLeaf[];

        $r16 := @parameter15: int[];

        $r17 := @parameter16: byte[][];

        $r18 := @parameter17: org.spongycastle.pqc.crypto.gmss.GMSSRootCalc[];

        $r19 := @parameter18: byte[][];

        $r20 := @parameter19: org.spongycastle.pqc.crypto.gmss.GMSSRootSig[];

        $r21 := @parameter20: org.spongycastle.pqc.crypto.gmss.GMSSParameters;

        $r22 := @parameter21: org.spongycastle.asn1.x509.AlgorithmIdentifier[];

        r27 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label01:
        i0 = lengthof $r1;

        if i1 >= i0 goto label02;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[i1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i1 = i1 + 1;

        goto label01;

     label02:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label03:
        i0 = lengthof $r2;

        if i1 >= i0 goto label04;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[i1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i1 = i1 + 1;

        goto label03;

     label04:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label05:
        i0 = lengthof $r3;

        if i1 >= i0 goto label06;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r3[i1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i1 = i1 + 1;

        goto label05;

     label06:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label07:
        i0 = lengthof $r4;

        if i1 >= i0 goto label10;

        i0 = 0;

     label08:
        $r2 = $r4[i1];

        $i3 = lengthof $r2;

        if i0 >= $i3 goto label09;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r2 = $r4[i1];

        $r31 = $r2[i0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i0 = i0 + 1;

        goto label08;

     label09:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label07;

     label10:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label11:
        i0 = lengthof $r5;

        if i1 >= i0 goto label14;

        i0 = 0;

     label12:
        $r2 = $r5[i1];

        $i3 = lengthof $r2;

        if i0 >= $i3 goto label13;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r2 = $r5[i1];

        $r31 = $r2[i0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i0 = i0 + 1;

        goto label12;

     label13:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label11;

     label14:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label15:
        i0 = lengthof $r7;

        if i1 >= i0 goto label22;

        i0 = 0;

     label16:
        $r33 = $r7[i1];

        $i3 = lengthof $r33;

        if i0 >= $i3 goto label21;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i3 = $r1[1];

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = 0;

     label17:
        if i4 >= $i3 goto label18;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $i5 = i4 + 3;

        $r31 = $r2[$i5];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = i4 + 1;

        goto label17;

     label18:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[0];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $l2 = (long) $i3;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[2];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[3];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[4];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[5];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = 0;

     label19:
        if i4 >= $i3 goto label20;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r7[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i5 = i4 + 6;

        $i5 = $r1[$i5];

        $l2 = (long) $i5;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = i4 + 1;

        goto label19;

     label20:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r32);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label16;

     label21:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label15;

     label22:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label23:
        i0 = lengthof $r8;

        if i1 >= i0 goto label30;

        i0 = 0;

     label24:
        $r33 = $r8[i1];

        $i3 = lengthof $r33;

        if i0 >= $i3 goto label29;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i3 = $r1[1];

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = 0;

     label25:
        if i4 >= $i3 goto label26;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $i5 = i4 + 3;

        $r31 = $r2[$i5];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = i4 + 1;

        goto label25;

     label26:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[0];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $l2 = (long) $i3;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[2];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[3];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[4];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[5];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = 0;

     label27:
        if i4 >= $i3 goto label28;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r33 = $r8[i1];

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i5 = i4 + 6;

        $i5 = $r1[$i5];

        $l2 = (long) $i5;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = i4 + 1;

        goto label27;

     label28:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r32);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label24;

     label29:
        $r29 = new org.spongycastle.asn1.DERSequence;

        $r36 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r36.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r36);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label23;

     label30:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label31:
        i0 = lengthof $r6;

        if i1 >= i0 goto label34;

        i0 = 0;

     label32:
        $r2 = $r6[i1];

        $i3 = lengthof $r2;

        if i0 >= $i3 goto label33;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r2 = $r6[i1];

        $r31 = $r2[i0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i0 = i0 + 1;

        goto label32;

     label33:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label31;

     label34:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label35:
        i0 = lengthof $r9;

        if i1 >= i0 goto label38;

        i0 = 0;

     label36:
        $r37 = $r9[i1];

        $i3 = virtualinvoke $r37.<java.util.Vector: int size()>();

        if i0 >= $i3 goto label37;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r37 = $r9[i1];

        $r38 = virtualinvoke $r37.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r31 = (byte[]) $r38;

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i0 = i0 + 1;

        goto label36;

     label37:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label35;

     label38:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label39:
        i0 = lengthof $r10;

        if i1 >= i0 goto label42;

        i0 = 0;

     label40:
        $r37 = $r10[i1];

        $i3 = virtualinvoke $r37.<java.util.Vector: int size()>();

        if i0 >= $i3 goto label41;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r37 = $r10[i1];

        $r38 = virtualinvoke $r37.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r31 = (byte[]) $r38;

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i0 = i0 + 1;

        goto label40;

     label41:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label39;

     label42:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label43:
        i0 = lengthof $r11;

        if i1 >= i0 goto label48;

        i0 = 0;

     label44:
        $r9 = $r11[i1];

        $i3 = lengthof $r9;

        if i0 >= $i3 goto label47;

        $i3 = 0;

     label45:
        $r9 = $r11[i1];

        $r37 = $r9[i0];

        i4 = virtualinvoke $r37.<java.util.Vector: int size()>();

        if $i3 >= i4 goto label46;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r9 = $r11[i1];

        $r37 = $r9[i0];

        $r38 = virtualinvoke $r37.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        $r31 = (byte[]) $r38;

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $i3 = $i3 + 1;

        goto label45;

     label46:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label44;

     label47:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label43;

     label48:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label49:
        i0 = lengthof $r12;

        if i1 >= i0 goto label54;

        i0 = 0;

     label50:
        $r9 = $r12[i1];

        $i3 = lengthof $r9;

        if i0 >= $i3 goto label53;

        $i3 = 0;

     label51:
        $r9 = $r12[i1];

        $r37 = $r9[i0];

        i4 = virtualinvoke $r37.<java.util.Vector: int size()>();

        if $i3 >= i4 goto label52;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r9 = $r12[i1];

        $r37 = $r9[i0];

        $r38 = virtualinvoke $r37.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        $r31 = (byte[]) $r38;

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $i3 = $i3 + 1;

        goto label51;

     label52:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label50;

     label53:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label49;

     label54:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label55:
        i0 = lengthof $r13;

        if i1 >= i0 goto label56;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r39 = $r13[i1];

        $r2 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[][] getStatByte()>();

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[3];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r39 = $r13[i1];

        $r1 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int[] getStatInt()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[0];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[2];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[3];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label55;

     label56:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label57:
        i0 = lengthof $r14;

        if i1 >= i0 goto label58;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r39 = $r14[i1];

        $r2 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[][] getStatByte()>();

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[3];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r39 = $r14[i1];

        $r1 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int[] getStatInt()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[0];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[2];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[3];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label57;

     label58:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label59:
        i0 = lengthof $r15;

        if i1 >= i0 goto label60;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r39 = $r15[i1];

        $r2 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: byte[][] getStatByte()>();

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r2[3];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r39 = $r15[i1];

        $r1 = virtualinvoke $r39.<org.spongycastle.pqc.crypto.gmss.GMSSLeaf: int[] getStatInt()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[0];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[2];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r1[3];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label59;

     label60:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label61:
        i0 = lengthof $r16;

        if i1 >= i0 goto label62;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i0 = $r16[i1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i1 = i1 + 1;

        goto label61;

     label62:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label63:
        i0 = lengthof $r17;

        if i1 >= i0 goto label64;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r17[i1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i1 = i1 + 1;

        goto label63;

     label64:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r40 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r40.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label65:
        i0 = lengthof $r18;

        if i1 >= i0 goto label84;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r41 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i0 = $r1[0];

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        $i3 = $r1[7];

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r2 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getStatByte()>();

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = 0;

     label66:
        if i4 >= i0 goto label67;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r2 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getStatByte()>();

        $i5 = i4 + 1;

        $r31 = $r2[$i5];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = i4 + 1;

        goto label66;

     label67:
        i4 = 0;

     label68:
        if i4 >= $i3 goto label69;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r2 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: byte[][] getStatByte()>();

        $i5 = i0 + 1;

        $i5 = $i5 + i4;

        $r31 = $r2[$i5];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = i4 + 1;

        goto label68;

     label69:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[1];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[2];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[3];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[4];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[5];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        i4 = $r1[6];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $l2 = (long) $i3;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = 0;

     label70:
        if i4 >= i0 goto label71;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        $i5 = i4 + 8;

        $i5 = $r1[$i5];

        $l2 = (long) $i5;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = i4 + 1;

        goto label70;

     label71:
        i4 = 0;

     label72:
        if i4 >= $i3 goto label73;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r1 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: int[] getStatInt()>();

        $i5 = i0 + 8;

        $i5 = $i5 + i4;

        $i5 = $r1[$i5];

        $l2 = (long) $i5;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = i4 + 1;

        goto label72;

     label73:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r41 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r43 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r44 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        if $r33 == null goto label79;

        i0 = 0;

     label74:
        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $i3 = lengthof $r33;

        if i0 >= $i3 goto label79;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i3 = $r1[1];

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = 0;

     label75:
        if i4 >= $i3 goto label76;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r2 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: byte[][] getStatByte()>();

        $i5 = i4 + 3;

        $r31 = $r2[$i5];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i4 = i4 + 1;

        goto label75;

     label76:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r43);

        virtualinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r43 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r43.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[0];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $l2 = (long) $i3;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[2];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[3];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[4];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        i4 = $r1[5];

        $l2 = (long) i4;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = 0;

     label77:
        if i4 >= $i3 goto label78;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r42 = $r18[i1];

        $r33 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: org.spongycastle.pqc.crypto.gmss.Treehash[] getTreehash()>();

        $r35 = $r33[i0];

        $r1 = virtualinvoke $r35.<org.spongycastle.pqc.crypto.gmss.Treehash: int[] getStatInt()>();

        $i5 = i4 + 6;

        $i5 = $r1[$i5];

        $l2 = (long) $i5;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i4 = i4 + 1;

        goto label77;

     label78:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r44);

        virtualinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r44 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r44.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r41);

        virtualinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r41 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label74;

     label79:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r32);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r41 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r42 = $r18[i1];

        $r9 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        if $r9 == null goto label83;

        i0 = 0;

     label80:
        $r42 = $r18[i1];

        $r9 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        $i3 = lengthof $r9;

        if i0 >= $i3 goto label83;

        $i3 = 0;

     label81:
        $r42 = $r18[i1];

        $r9 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        $r37 = $r9[i0];

        i4 = virtualinvoke $r37.<java.util.Vector: int size()>();

        if $i3 >= i4 goto label82;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r42 = $r18[i1];

        $r9 = virtualinvoke $r42.<org.spongycastle.pqc.crypto.gmss.GMSSRootCalc: java.util.Vector[] getRetain()>();

        $r37 = $r9[i0];

        $r38 = virtualinvoke $r37.<java.util.Vector: java.lang.Object elementAt(int)>($i3);

        $r31 = (byte[]) $r38;

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $i3 = $i3 + 1;

        goto label81;

     label82:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r41);

        virtualinvoke r40.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r41 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r41.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i0 = i0 + 1;

        goto label80;

     label83:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r40);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r40 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r40.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label65;

     label84:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label85:
        i0 = lengthof $r19;

        if i1 >= i0 goto label86;

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r31 = $r19[i1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        i1 = i1 + 1;

        goto label85;

     label86:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label87:
        i0 = lengthof $r20;

        if i1 >= i0 goto label88;

        $r29 = new org.spongycastle.asn1.DERSequence;

        $r34 = $r22[0];

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1Encodable)>($r34);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r32 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r32.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r45 = $r20[i1];

        $r2 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $r31 = $r2[0];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r45 = $r20[i1];

        $r2 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $r31 = $r2[1];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r45 = $r20[i1];

        $r2 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $r31 = $r2[2];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r45 = $r20[i1];

        $r2 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $r31 = $r2[3];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r30 = new org.spongycastle.asn1.DEROctetString;

        $r45 = $r20[i1];

        $r2 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: byte[][] getStatByte()>();

        $r31 = $r2[4];

        specialinvoke $r30.<org.spongycastle.asn1.DEROctetString: void <init>(byte[])>($r31);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r30);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[0];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[2];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[3];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[4];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[5];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[6];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[7];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r45 = $r20[i1];

        $r1 = virtualinvoke $r45.<org.spongycastle.pqc.crypto.gmss.GMSSRootSig: int[] getStatInt()>();

        i0 = $r1[8];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = i1 + 1;

        goto label87;

     label88:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r24 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r25 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        r26 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label89:
        $r1 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getHeightOfTrees()>();

        i0 = lengthof $r1;

        if i1 >= i0 goto label90;

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r1 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getHeightOfTrees()>();

        i0 = $r1[i1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r24.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r1 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getWinternitzParameter()>();

        i0 = $r1[i1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r25.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r28 = new org.spongycastle.asn1.ASN1Integer;

        $r1 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int[] getK()>();

        i0 = $r1[i1];

        $l2 = (long) i0;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r26.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        i1 = i1 + 1;

        goto label89;

     label90:
        $r28 = new org.spongycastle.asn1.ASN1Integer;

        i1 = virtualinvoke $r21.<org.spongycastle.pqc.crypto.gmss.GMSSParameters: int getNumOfLayers()>();

        $l2 = (long) i1;

        specialinvoke $r28.<org.spongycastle.asn1.ASN1Integer: void <init>(long)>($l2);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r28);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r24);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r25);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r26);

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        r23 = new org.spongycastle.asn1.ASN1EncodableVector;

        specialinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void <init>()>();

        i1 = 0;

     label91:
        i0 = lengthof $r22;

        if i1 >= i0 goto label92;

        $r34 = $r22[i1];

        virtualinvoke r23.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r34);

        i1 = i1 + 1;

        goto label91;

     label92:
        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r23);

        virtualinvoke r27.<org.spongycastle.asn1.ASN1EncodableVector: void add(org.spongycastle.asn1.ASN1Encodable)>($r29);

        $r29 = new org.spongycastle.asn1.DERSequence;

        specialinvoke $r29.<org.spongycastle.asn1.DERSequence: void <init>(org.spongycastle.asn1.ASN1EncodableVector)>(r27);

        return $r29;
    }
    public org.spongycastle.asn1.ASN1Primitive toASN1Primitive()
    {
        org.spongycastle.pqc.asn1.GMSSPrivateKey r0;
        org.spongycastle.asn1.ASN1Primitive r1;

        r0 := @this: org.spongycastle.pqc.asn1.GMSSPrivateKey;

        r1 = r0.<org.spongycastle.pqc.asn1.GMSSPrivateKey: org.spongycastle.asn1.ASN1Primitive primitive>;

        return r1;
    }
