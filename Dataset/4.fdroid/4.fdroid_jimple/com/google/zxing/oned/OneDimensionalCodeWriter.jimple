com.google.zxing.oned.OneDimensionalCodeWriter extends java.lang.Object implements com.google.zxing.Writer
    public void <init>()
    {
        com.google.zxing.oned.OneDimensionalCodeWriter r0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    protected static int appendPattern(boolean[], int, int[], boolean)
    {
        boolean[] $r0;
        int[] $r1;
        boolean $z0;
        int i0, $i1, i2, i3, $i4, i5;

        $r0 := @parameter0: boolean[];

        i2 := @parameter1: int;

        $r1 := @parameter2: int[];

        $z0 := @parameter3: boolean;

        i3 = 0;

        $i1 = lengthof $r1;

        $i4 = 0;

     label1:
        if $i4 >= $i1 goto label6;

        i0 = $r1[$i4];

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r0[i2] = $z0;

        i5 = i5 + 1;

        i2 = i2 + 1;

        goto label2;

     label3:
        i3 = i3 + i0;

        if $z0 != 0 goto label5;

        $z0 = 1;

     label4:
        $i4 = $i4 + 1;

        goto label1;

     label5:
        $z0 = 0;

        goto label4;

     label6:
        return i3;
    }
    private static com.google.zxing.common.BitMatrix renderResult(boolean[], int, int, int)
    {
        boolean[] $r0;
        int $i0, $i1, $i2, i3, i4;
        com.google.zxing.common.BitMatrix r1;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i4 = lengthof $r0;

        i3 = i4 + $i2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, i3);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i1);

        $i1 = $i2 / i3;

        i3 = i4 * $i1;

        i3 = $i2 - i3;

        r1 = new com.google.zxing.common.BitMatrix;

        specialinvoke r1.<com.google.zxing.common.BitMatrix: void <init>(int,int)>($i2, $i0);

        $i2 = 0;

        i3 = i3 / 2;

     label1:
        if $i2 >= i4 goto label3;

        $z0 = $r0[$i2];

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.google.zxing.common.BitMatrix: void setRegion(int,int,int,int)>(i3, 0, $i1, $i0);

     label2:
        $i2 = $i2 + 1;

        i3 = i3 + $i1;

        goto label1;

     label3:
        return r1;
    }
    public com.google.zxing.common.BitMatrix encode(java.lang.String, com.google.zxing.BarcodeFormat, int, int, java.util.Map) throws com.google.zxing.WriterException
    {
        com.google.zxing.oned.OneDimensionalCodeWriter r0;
        java.lang.String $r1;
        com.google.zxing.BarcodeFormat $r2;
        int $i0, $i1, $i2;
        java.util.Map r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        com.google.zxing.EncodeHintType $r6;
        java.lang.Object $r7;
        java.lang.Integer r8;
        boolean[] $r9;
        com.google.zxing.common.BitMatrix $r10;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.google.zxing.BarcodeFormat;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        r3 := @parameter4: java.util.Map;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Found empty contents");

        throw $r4;

     label1:
        if $i0 < 0 goto label2;

        if $i1 >= 0 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative size is not allowed. Input: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(120);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        $i2 = virtualinvoke r0.<com.google.zxing.oned.OneDimensionalCodeWriter: int getDefaultMargin()>();

        if r3 == null goto label4;

        $r6 = <com.google.zxing.EncodeHintType: com.google.zxing.EncodeHintType MARGIN>;

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.lang.Integer) $r7;

        if r8 == null goto label4;

        $i2 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

     label4:
        $r9 = virtualinvoke r0.<com.google.zxing.oned.OneDimensionalCodeWriter: boolean[] encode(java.lang.String)>($r1);

        $r10 = staticinvoke <com.google.zxing.oned.OneDimensionalCodeWriter: com.google.zxing.common.BitMatrix renderResult(boolean[],int,int,int)>($r9, $i0, $i1, $i2);

        return $r10;
    }
public abstract boolean[] encode(java.lang.String) { 
// no body
} 
    public int getDefaultMargin()
    {
        com.google.zxing.oned.OneDimensionalCodeWriter r0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        return 10;
    }
