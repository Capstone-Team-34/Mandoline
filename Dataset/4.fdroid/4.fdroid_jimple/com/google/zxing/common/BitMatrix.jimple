com.google.zxing.common.BitMatrix extends java.lang.Object implements java.lang.Cloneable
private final int[] bits
private final int height
private final int rowSize
private final int width
    public void <init>(int)
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.zxing.common.BitMatrix: void <init>(int,int)>($i0, $i0);

        return;
    }
    public void <init>(int, int)
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 < 1 goto label1;

        if $i1 >= 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both dimensions must be greater than 0");

        throw $r1;

     label2:
        r0.<com.google.zxing.common.BitMatrix: int width> = $i0;

        r0.<com.google.zxing.common.BitMatrix: int height> = $i1;

        $i0 = $i0 + 31;

        $i0 = $i0 / 32;

        r0.<com.google.zxing.common.BitMatrix: int rowSize> = $i0;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i0 = $i0 * $i1;

        $r2 = newarray (int)[$i0];

        r0.<com.google.zxing.common.BitMatrix: int[] bits> = $r2;

        return;
    }
    private void <init>(int, int, int, int[])
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.zxing.common.BitMatrix: int width> = $i0;

        r0.<com.google.zxing.common.BitMatrix: int height> = $i1;

        r0.<com.google.zxing.common.BitMatrix: int rowSize> = $i2;

        r0.<com.google.zxing.common.BitMatrix: int[] bits> = $r1;

        return;
    }
    public void clear()
    {
        com.google.zxing.common.BitMatrix r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $r1[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public com.google.zxing.common.BitMatrix clone()
    {
        com.google.zxing.common.BitMatrix r0, $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        int[] $r3;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 = new com.google.zxing.common.BitMatrix;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $r3 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        specialinvoke $r1.<com.google.zxing.common.BitMatrix: void <init>(int,int,int,int[])>($i0, $i1, $i2, $r3);

        return $r1;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        r0 = virtualinvoke r0.<com.google.zxing.common.BitMatrix: com.google.zxing.common.BitMatrix clone()>();

        return r0;
    }
    public boolean equals(java.lang.Object)
    {
        com.google.zxing.common.BitMatrix r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;
        int[] $r3, $r4;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.zxing.common.BitMatrix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (com.google.zxing.common.BitMatrix) $r1;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i1 = r2.<com.google.zxing.common.BitMatrix: int width>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i1 = r2.<com.google.zxing.common.BitMatrix: int height>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = r2.<com.google.zxing.common.BitMatrix: int rowSize>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $r4 = r2.<com.google.zxing.common.BitMatrix: int[] bits>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r3, $r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    public boolean get(int, int)
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i2 * $i1;

        $i2 = $i0 / 32;

        $i1 = $i1 + $i2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = $r1[$i1];

        $i0 = $i0 & 31;

        $i0 = $i1 >>> $i0;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int getHeight()
    {
        com.google.zxing.common.BitMatrix r0;
        int i0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        return i0;
    }
    public int getWidth()
    {
        com.google.zxing.common.BitMatrix r0;
        int i0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        return i0;
    }
    public int hashCode()
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1;
        int[] $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i0 = $i0 + $i1;

        $i1 = $i0 * 31;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r1);

        $i0 = $i1 + $i0;

        return $i0;
    }
    public void set(int, int)
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1, $i2;
        int[] $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i2 * $i1;

        $i2 = $i0 / 32;

        $i1 = $i1 + $i2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = $r1[$i1];

        $i0 = $i0 & 31;

        $i0 = 1 << $i0;

        $i0 = $i2 | $i0;

        $r1[$i1] = $i0;

        return;
    }
    public void setRegion(int, int, int, int)
    {
        com.google.zxing.common.BitMatrix r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        if $i1 < 0 goto label1;

        if $i0 >= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Left and top must be nonnegative");

        throw $r1;

     label2:
        if $i3 < 1 goto label3;

        if $i2 >= 1 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height and width must be at least 1");

        throw $r1;

     label4:
        $i2 = $i0 + $i2;

        $i3 = $i1 + $i3;

        i4 = r0.<com.google.zxing.common.BitMatrix: int height>;

        if $i3 > i4 goto label5;

        i4 = r0.<com.google.zxing.common.BitMatrix: int width>;

        if $i2 <= i4 goto label6;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The region must fit inside the matrix");

        throw $r1;

     label6:
        if $i1 >= $i3 goto label9;

        i4 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        i4 = $i1 * i4;

        i5 = $i0;

     label7:
        if i5 >= $i2 goto label8;

        $r2 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i6 = i5 / 32;

        $i6 = $i6 + i4;

        $i7 = $r2[$i6];

        $i8 = i5 & 31;

        $i8 = 1 << $i8;

        $i7 = $i7 | $i8;

        $r2[$i6] = $i7;

        i5 = i5 + 1;

        goto label7;

     label8:
        $i1 = $i1 + 1;

        goto label6;

     label9:
        return;
    }
    public java.lang.String toString()
    {
        com.google.zxing.common.BitMatrix r0;
        java.lang.String $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 = virtualinvoke r0.<com.google.zxing.common.BitMatrix: java.lang.String toString(java.lang.String,java.lang.String)>("X ", "  ");

        return $r1;
    }
    public java.lang.String toString(java.lang.String, java.lang.String)
    {
        com.google.zxing.common.BitMatrix r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.google.zxing.common.BitMatrix: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, "\n");

        return $r1;
    }
    public java.lang.String toString(java.lang.String, java.lang.String, java.lang.String)
    {
        com.google.zxing.common.BitMatrix r0;
        java.lang.String $r1, $r2, $r3, $r5;
        java.lang.StringBuilder r4;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r4 = new java.lang.StringBuilder;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i1 = $i1 + 1;

        $i0 = $i0 * $i1;

        specialinvoke r4.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = r0.<com.google.zxing.common.BitMatrix: int height>;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label2:
        $i2 = r0.<com.google.zxing.common.BitMatrix: int width>;

        if $i1 >= $i2 goto label5;

        $z0 = virtualinvoke r0.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i0);

        if $z0 == 0 goto label4;

        $r5 = $r1;

     label3:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r5 = $r2;

        goto label3;

     label5:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label6:
        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
