com.google.zxing.datamatrix.encoder.HighLevelEncoder extends java.lang.Object
    public static int determineConsecutiveDigitCount(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, i1, $i2, i3;
        char $c4;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        i1 = 0;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        i3 = $i0;

        if $i0 >= $i2 goto label2;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

     label1:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isDigit(char)>($c4);

        if $z0 == 0 goto label3;

        if i3 >= $i2 goto label3;

        i1 = i1 + 1;

        i3 = i3 + 1;

        if i3 >= $i2 goto label1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(i3);

        goto label1;

     label2:
        return 0;

     label3:
        return i1;
    }
    public static java.lang.String encodeHighLevel(java.lang.String, com.google.zxing.datamatrix.encoder.SymbolShapeHint, com.google.zxing.Dimension, com.google.zxing.Dimension)
    {
        java.lang.String $r0;
        com.google.zxing.datamatrix.encoder.SymbolShapeHint $r1;
        com.google.zxing.Dimension $r2, $r3;
        java.lang.Object[] r5;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r6;
        com.google.zxing.datamatrix.encoder.SymbolInfo $r7;
        java.lang.StringBuilder $r8;
        char $c3;
        com.google.zxing.datamatrix.encoder.ASCIIEncoder $r9;
        com.google.zxing.datamatrix.encoder.C40Encoder $r10;
        com.google.zxing.datamatrix.encoder.TextEncoder $r11;
        com.google.zxing.datamatrix.encoder.X12Encoder $r12;
        com.google.zxing.datamatrix.encoder.EdifactEncoder $r13;
        com.google.zxing.datamatrix.encoder.Base256Encoder $r14;
        com.google.zxing.datamatrix.encoder.EncoderContext $r15;
        com.google.zxing.datamatrix.encoder.Encoder $r16;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.google.zxing.datamatrix.encoder.SymbolShapeHint;

        $r2 := @parameter2: com.google.zxing.Dimension;

        $r3 := @parameter3: com.google.zxing.Dimension;

        r5 = newarray (com.google.zxing.datamatrix.encoder.Encoder)[6];

        $r9 = new com.google.zxing.datamatrix.encoder.ASCIIEncoder;

        specialinvoke $r9.<com.google.zxing.datamatrix.encoder.ASCIIEncoder: void <init>()>();

        r5[0] = $r9;

        $r10 = new com.google.zxing.datamatrix.encoder.C40Encoder;

        specialinvoke $r10.<com.google.zxing.datamatrix.encoder.C40Encoder: void <init>()>();

        r5[1] = $r10;

        $r11 = new com.google.zxing.datamatrix.encoder.TextEncoder;

        specialinvoke $r11.<com.google.zxing.datamatrix.encoder.TextEncoder: void <init>()>();

        r5[2] = $r11;

        $r12 = new com.google.zxing.datamatrix.encoder.X12Encoder;

        specialinvoke $r12.<com.google.zxing.datamatrix.encoder.X12Encoder: void <init>()>();

        r5[3] = $r12;

        $r13 = new com.google.zxing.datamatrix.encoder.EdifactEncoder;

        specialinvoke $r13.<com.google.zxing.datamatrix.encoder.EdifactEncoder: void <init>()>();

        r5[4] = $r13;

        $r14 = new com.google.zxing.datamatrix.encoder.Base256Encoder;

        specialinvoke $r14.<com.google.zxing.datamatrix.encoder.Base256Encoder: void <init>()>();

        r5[5] = $r14;

        $r15 = new com.google.zxing.datamatrix.encoder.EncoderContext;

        specialinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void <init>(java.lang.String)>($r0);

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSymbolShape(com.google.zxing.datamatrix.encoder.SymbolShapeHint)>($r1);

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSizeConstraints(com.google.zxing.Dimension,com.google.zxing.Dimension)>($r2, $r3);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[)>\u001e05\u001d");

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\u001e\u0004");

        if $z0 == 0 goto label3;

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(236);

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSkipAtEnd(int)>(2);

        $i0 = $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos>;

        $r0 = "[)>\u001e05\u001d";

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos> = $i0;

     label1:
        $i1 = 0;

     label2:
        $z0 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: boolean hasMoreCharacters()>();

        if $z0 == 0 goto label4;

        $r6 = r5[$i1];

        $r16 = (com.google.zxing.datamatrix.encoder.Encoder) $r6;

        interfaceinvoke $r16.<com.google.zxing.datamatrix.encoder.Encoder: void encode(com.google.zxing.datamatrix.encoder.EncoderContext)>($r15);

        $i0 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int getNewEncoding()>();

        if $i0 < 0 goto label2;

        $i1 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int getNewEncoding()>();

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void resetEncoderSignal()>();

        goto label2;

     label3:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[)>\u001e06\u001d");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\u001e\u0004");

        if $z0 == 0 goto label1;

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(237);

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSkipAtEnd(int)>(2);

        $i0 = $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos>;

        $r0 = "[)>\u001e06\u001d";

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos> = $i0;

        goto label1;

     label4:
        $i2 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: int getCodewordCount()>();

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void updateSymbolInfo()>();

        $r7 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: com.google.zxing.datamatrix.encoder.SymbolInfo getSymbolInfo()>();

        $i0 = virtualinvoke $r7.<com.google.zxing.datamatrix.encoder.SymbolInfo: int getDataCapacity()>();

        if $i2 >= $i0 goto label5;

        if $i1 == 0 goto label5;

        if $i1 == 5 goto label5;

        virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(254);

     label5:
        $r8 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: java.lang.StringBuilder getCodewords()>();

        $i1 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i1 >= $i0 goto label6;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(129);

     label6:
        $i1 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i1 >= $i0 goto label7;

        $i1 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        $i1 = $i1 + 1;

        $c3 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char randomize253State(char,int)>(129, $i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label6;

     label7:
        $r8 = virtualinvoke $r15.<com.google.zxing.datamatrix.encoder.EncoderContext: java.lang.StringBuilder getCodewords()>();

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    private static int findMinimums(float[], int[], int, byte[])
    {
        float[] $r0;
        int[] $r1;
        byte[] $r2;
        int i0, $i1, i2;
        double $d0;
        float $f0;
        byte $b3;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: int[];

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r2, 0);

        i2 = 0;

     label1:
        if i2 >= 6 goto label4;

        $f0 = $r0[i2];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d0;

        $r1[i2] = i0;

        i0 = $r1[i2];

        if $i1 <= i0 goto label2;

        $i1 = i0;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r2, 0);

     label2:
        if $i1 != i0 goto label3;

        $b3 = $r2[i2];

        i0 = $b3 + 1;

        $b3 = (byte) i0;

        $r2[i2] = $b3;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $i1;
    }
    private static int getMinimumCount(byte[])
    {
        byte[] $r0;
        int i0, i1;
        byte $b2;

        $r0 := @parameter0: byte[];

        i0 = 0;

        i1 = 0;

     label1:
        if i1 >= 6 goto label2;

        $b2 = $r0[i1];

        i0 = i0 + $b2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i0;
    }
    static void illegalCharacter(char)
    {
        char $c0;
        java.lang.String $r0, $r2;
        java.lang.StringBuilder $r1;
        int $i1;
        java.lang.IllegalArgumentException $r3;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = "0000";

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 4 - $i1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (0x");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r3;
    }
    static boolean isDigit(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        return 1;

     label1:
        return 0;
    }
    static boolean isExtendedASCII(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 128 goto label1;

        if $c0 > 255 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isNativeC40(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 32 goto label2;

        if $c0 < 48 goto label1;

        if $c0 <= 57 goto label2;

     label1:
        if $c0 < 65 goto label3;

        if $c0 > 90 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    private static boolean isNativeEDIFACT(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 < 32 goto label1;

        if $c0 > 94 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isNativeText(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 32 goto label2;

        if $c0 < 48 goto label1;

        if $c0 <= 57 goto label2;

     label1:
        if $c0 < 97 goto label3;

        if $c0 > 122 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    private static boolean isNativeX12(char)
    {
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isX12TermSep(char)>($c0);

        if $z0 != 0 goto label2;

        if $c0 == 32 goto label2;

        if $c0 < 48 goto label1;

        if $c0 <= 57 goto label2;

     label1:
        if $c0 < 65 goto label3;

        if $c0 > 90 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    private static boolean isSpecialB256(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        return 0;
    }
    private static boolean isX12TermSep(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 13 goto label1;

        if $c0 == 42 goto label1;

        if $c0 != 62 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    static int lookAheadTest(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0;
        int $i0, i1, $i2, $i3, $i6;
        float[] r1;
        byte[] r2;
        int[] r3;
        byte $b4, $b7;
        char $c5;
        boolean $z0;
        float $f0;
        double $d0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 < $i2 goto label01;

        return i1;

     label01:
        if i1 != 0 goto label04;

        r1 = newarray (float)[6];

        r1[0] = 0.0F;

        r1[1] = 1.0F;

        r1[2] = 1.0F;

        r1[3] = 1.0F;

        r1[4] = 1.0F;

        r1[5] = 1.25F;

     label02:
        i1 = 0;

     label03:
        $i2 = $i0 + i1;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i2 != $i3 goto label10;

        r2 = newarray (byte)[6];

        r3 = newarray (int)[6];

        $i0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int findMinimums(float[],int[],int,byte[])>(r1, r3, 2147483647, r2);

        i1 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int getMinimumCount(byte[])>(r2);

        $i2 = r3[0];

        if $i2 != $i0 goto label05;

        return 0;

     label04:
        r1 = newarray (float)[6];

        r1[0] = 1.0F;

        r1[1] = 2.0F;

        r1[2] = 2.0F;

        r1[3] = 2.0F;

        r1[4] = 2.0F;

        r1[5] = 2.25F;

        r1[i1] = 0.0F;

        goto label02;

     label05:
        if i1 != 1 goto label06;

        $b4 = r2[5];

        if $b4 <= 0 goto label06;

        return 5;

     label06:
        if i1 != 1 goto label07;

        $b4 = r2[4];

        if $b4 <= 0 goto label07;

        return 4;

     label07:
        if i1 != 1 goto label08;

        $b4 = r2[2];

        if $b4 <= 0 goto label08;

        return 2;

     label08:
        if i1 != 1 goto label09;

        $b4 = r2[3];

        if $b4 <= 0 goto label09;

        return 3;

     label09:
        return 1;

     label10:
        $i2 = $i0 + i1;

        $c5 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i2);

        i1 = i1 + 1;

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isDigit(char)>($c5);

        if $z0 == 0 goto label17;

        $f0 = r1[0];

        $d0 = (double) $f0;

        $d0 = $d0 + 0.5;

        $f0 = (float) $d0;

        r1[0] = $f0;

     label11:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeC40(char)>($c5);

        if $z0 == 0 goto label19;

        $f0 = r1[1];

        $f0 = $f0 + 0.6666667F;

        r1[1] = $f0;

     label12:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeText(char)>($c5);

        if $z0 == 0 goto label21;

        $f0 = r1[2];

        $f0 = $f0 + 0.6666667F;

        r1[2] = $f0;

     label13:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeX12(char)>($c5);

        if $z0 == 0 goto label23;

        $f0 = r1[3];

        $f0 = $f0 + 0.6666667F;

        r1[3] = $f0;

     label14:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeEDIFACT(char)>($c5);

        if $z0 == 0 goto label25;

        $f0 = r1[4];

        $f0 = $f0 + 0.75F;

        r1[4] = $f0;

     label15:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isSpecialB256(char)>($c5);

        if $z0 == 0 goto label27;

        $f0 = r1[5];

        $f0 = $f0 + 4.0F;

        r1[5] = $f0;

     label16:
        if i1 < 4 goto label03;

        r3 = newarray (int)[6];

        r2 = newarray (byte)[6];

        staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int findMinimums(float[],int[],int,byte[])>(r1, r3, 2147483647, r2);

        $i2 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int getMinimumCount(byte[])>(r2);

        $i3 = r3[0];

        $i6 = r3[5];

        if $i3 >= $i6 goto label28;

        $i3 = r3[0];

        $i6 = r3[1];

        if $i3 >= $i6 goto label28;

        $i3 = r3[0];

        $i6 = r3[2];

        if $i3 >= $i6 goto label28;

        $i3 = r3[0];

        $i6 = r3[3];

        if $i3 >= $i6 goto label28;

        $i3 = r3[0];

        $i6 = r3[4];

        if $i3 >= $i6 goto label28;

        return 0;

     label17:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label18;

        $f0 = r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d0;

        $f0 = (float) $i2;

        r1[0] = $f0;

        $f0 = r1[0];

        $f0 = $f0 + 2.0F;

        r1[0] = $f0;

        goto label11;

     label18:
        $f0 = r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d0;

        $f0 = (float) $i2;

        r1[0] = $f0;

        $f0 = r1[0];

        $f0 = $f0 + 1.0F;

        r1[0] = $f0;

        goto label11;

     label19:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label20;

        $f0 = r1[1];

        $f0 = $f0 + 2.6666667F;

        r1[1] = $f0;

        goto label12;

     label20:
        $f0 = r1[1];

        $f0 = $f0 + 1.3333334F;

        r1[1] = $f0;

        goto label12;

     label21:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label22;

        $f0 = r1[2];

        $f0 = $f0 + 2.6666667F;

        r1[2] = $f0;

        goto label13;

     label22:
        $f0 = r1[2];

        $f0 = $f0 + 1.3333334F;

        r1[2] = $f0;

        goto label13;

     label23:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label24;

        $f0 = r1[3];

        $f0 = $f0 + 4.3333335F;

        r1[3] = $f0;

        goto label14;

     label24:
        $f0 = r1[3];

        $f0 = $f0 + 3.3333333F;

        r1[3] = $f0;

        goto label14;

     label25:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label26;

        $f0 = r1[4];

        $f0 = $f0 + 4.25F;

        r1[4] = $f0;

        goto label15;

     label26:
        $f0 = r1[4];

        $f0 = $f0 + 3.25F;

        r1[4] = $f0;

        goto label15;

     label27:
        $f0 = r1[5];

        $f0 = $f0 + 1.0F;

        r1[5] = $f0;

        goto label16;

     label28:
        $i3 = r3[5];

        $i6 = r3[0];

        if $i3 < $i6 goto label29;

        $b4 = r2[1];

        $b7 = r2[2];

        $i3 = $b4 + $b7;

        $b4 = r2[3];

        $i3 = $i3 + $b4;

        $b4 = r2[4];

        $i3 = $i3 + $b4;

        if $i3 != 0 goto label30;

     label29:
        return 5;

     label30:
        if $i2 != 1 goto label31;

        $b4 = r2[4];

        if $b4 <= 0 goto label31;

        return 4;

     label31:
        if $i2 != 1 goto label32;

        $b4 = r2[2];

        if $b4 <= 0 goto label32;

        return 2;

     label32:
        if $i2 != 1 goto label33;

        $b4 = r2[3];

        if $b4 <= 0 goto label33;

        return 3;

     label33:
        $i2 = r3[1];

        $i2 = $i2 + 1;

        $i3 = r3[0];

        if $i2 >= $i3 goto label03;

        $i2 = r3[1];

        $i2 = $i2 + 1;

        $i3 = r3[5];

        if $i2 >= $i3 goto label03;

        $i2 = r3[1];

        $i2 = $i2 + 1;

        $i3 = r3[4];

        if $i2 >= $i3 goto label03;

        $i2 = r3[1];

        $i2 = $i2 + 1;

        $i3 = r3[2];

        if $i2 >= $i3 goto label03;

        $i2 = r3[1];

        $i3 = r3[3];

        if $i2 >= $i3 goto label34;

        return 1;

     label34:
        $i2 = r3[1];

        $i3 = r3[3];

        if $i2 != $i3 goto label03;

        $i0 = $i0 + i1;

        $i0 = $i0 + 1;

     label35:
        i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 >= i1 goto label37;

        $c5 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isX12TermSep(char)>($c5);

        if $z0 == 0 goto label36;

        return 3;

     label36:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeX12(char)>($c5);

        if $z0 != 0 goto label38;

     label37:
        return 1;

     label38:
        $i0 = $i0 + 1;

        goto label35;
    }
    private static char randomize253State(char, int)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i1 = $i1 * 149;

        $i1 = $i1 % 253;

        $i1 = $i1 + 1;

        $i1 = $c0 + $i1;

        if $i1 > 254 goto label1;

        $c0 = (char) $i1;

        return $c0;

     label1:
        $i1 = $i1 + -254;

        $c0 = (char) $i1;

        return $c0;
    }
