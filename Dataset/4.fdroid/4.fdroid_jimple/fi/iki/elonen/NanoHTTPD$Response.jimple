fi.iki.elonen.NanoHTTPD$Response extends java.lang.Object
private boolean chunkedTransfer
private java.io.InputStream data
private java.util.Map header
private java.lang.String mimeType
private fi.iki.elonen.NanoHTTPD$Method requestMethod
private fi.iki.elonen.NanoHTTPD$Response$IStatus status
    public void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus, java.lang.String, java.io.InputStream)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        fi.iki.elonen.NanoHTTPD$Response$IStatus $r1;
        java.lang.String $r2;
        java.io.InputStream $r3;
        java.util.HashMap $r4;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$Response$IStatus;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header> = $r4;

        r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status> = $r1;

        r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType> = $r2;

        r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data> = $r3;

        return;
    }
    public void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus, java.lang.String, java.lang.String)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        fi.iki.elonen.NanoHTTPD$Response$IStatus $r1;
        java.lang.String $r2, $r3;
        java.io.UnsupportedEncodingException r4;
        byte[] $r5;
        java.util.HashMap $r6;
        java.io.ByteArrayInputStream $r7;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$Response$IStatus;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header> = $r6;

        r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status> = $r1;

        r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType> = $r2;

        if $r3 == null goto label3;

        $r7 = new java.io.ByteArrayInputStream;

     label1:
        $r5 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

     label2:
        r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data> = $r7;

        return;

     label3:
        $r7 = null;

        goto label2;

     label4:
        r4 := @caughtexception;

        virtualinvoke r4.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }
    public void <init>(java.lang.String)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.lang.String $r1;
        fi.iki.elonen.NanoHTTPD$Response$Status $r2;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.lang.String;

        $r2 = <fi.iki.elonen.NanoHTTPD$Response$Status: fi.iki.elonen.NanoHTTPD$Response$Status OK>;

        specialinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String)>($r2, "text/html", $r1);

        return;
    }
    private void sendAsChunked(java.io.OutputStream, java.io.PrintWriter) throws java.io.IOException
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.io.OutputStream $r1;
        java.io.PrintWriter $r2;
        byte[] r3, $r5, $r9;
        java.lang.String $r4;
        java.io.InputStream $r6;
        int $i0;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: java.io.PrintWriter;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>("Transfer-Encoding: chunked\r\n");

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>("\r\n");

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        $r4 = "\r\n";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        r3 = newarray (byte)[16384];

     label1:
        $r6 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        $i0 = virtualinvoke $r6.<java.io.InputStream: int read(byte[])>(r3);

        if $i0 <= 0 goto label2;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[0] = $r8;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%x\r\n", $r7);

        $r9 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r9);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r5);

        goto label1;

     label2:
        $r7 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0\r\n\r\n", $r7);

        r3 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>(r3);

        return;
    }
    private void sendAsFixedLength(java.io.OutputStream, java.io.PrintWriter) throws java.io.IOException
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.io.OutputStream $r1;
        java.io.PrintWriter $r2;
        byte[] r3;
        java.io.InputStream $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        fi.iki.elonen.NanoHTTPD$Method $r7, $r8;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: java.io.PrintWriter;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        if $r4 == null goto label4;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        $i0 = virtualinvoke $r4.<java.io.InputStream: int available()>();

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Content-Length: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>("\r\n");

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        $r7 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Method requestMethod>;

        $r8 = <fi.iki.elonen.NanoHTTPD$Method: fi.iki.elonen.NanoHTTPD$Method HEAD>;

        if $r7 == $r8 goto label7;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        if $r4 == null goto label7;

        r3 = newarray (byte)[16384];

     label2:
        if $i0 <= 0 goto label7;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        if $i0 <= 16384 goto label5;

        $i1 = 16384;

     label3:
        $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, $i1);

        if $i1 > 0 goto label6;

        return;

     label4:
        $i0 = 0;

        goto label1;

     label5:
        $i1 = $i0;

        goto label3;

     label6:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i1);

        $i0 = $i0 - $i1;

        goto label2;

     label7:
        return;
    }
    public void addHeader(java.lang.String, java.lang.String)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.lang.String $r1, $r2;
        java.util.Map $r3;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
    protected void send(java.io.OutputStream)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.io.OutputStream $r1;
        java.text.SimpleDateFormat r2;
        java.lang.String r3, $r11;
        java.io.PrintWriter r4;
        java.util.Locale $r5;
        java.util.TimeZone $r6;
        fi.iki.elonen.NanoHTTPD$Response$IStatus $r7;
        java.lang.Error $r8;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10;
        java.util.Map $r12;
        java.lang.Object $r13;
        java.util.Date $r14;
        java.util.Set $r15;
        java.util.Iterator $r16;
        boolean $z0;
        fi.iki.elonen.NanoHTTPD$Method $r17, $r18;
        java.io.InputStream $r19;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.io.OutputStream;

        r3 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType>;

        r2 = new java.text.SimpleDateFormat;

        $r5 = <java.util.Locale: java.util.Locale US>;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("E, d MMM yyyy HH:mm:ss \'GMT\'", $r5);

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r6);

        $r7 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status>;

        if $r7 != null goto label04;

        $r8 = new java.lang.Error;

     label01:
        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("sendResponse(): Status can\'t be null.");

     label02:
        throw $r8;

     label03:
        $r9 := @caughtexception;

        return;

     label04:
        r4 = new java.io.PrintWriter;

     label05:
        specialinvoke r4.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r1);

     label06:
        $r10 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP/1.1 ");

     label08:
        $r7 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status>;

     label09:
        $r11 = interfaceinvoke $r7.<fi.iki.elonen.NanoHTTPD$Response$IStatus: java.lang.String getDescription()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \r\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r11);

     label10:
        if r3 == null goto label12;

        $r10 = new java.lang.StringBuilder;

     label11:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Content-Type: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(r3);

     label12:
        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

        if $r12 == null goto label15;

        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

     label13:
        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>("Date");

     label14:
        if $r13 != null goto label19;

     label15:
        $r10 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Date: ");

     label17:
        $r14 = new java.util.Date;

     label18:
        specialinvoke $r14.<java.util.Date: void <init>()>();

        r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r14);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(r3);

     label19:
        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

        if $r12 == null goto label29;

        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

     label20:
        $r15 = interfaceinvoke $r12.<java.util.Map: java.util.Set keySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

     label22:
        if $z0 == 0 goto label29;

     label23:
        $r13 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

     label24:
        r3 = (java.lang.String) $r13;

        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

     label25:
        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

     label26:
        $r11 = (java.lang.String) $r13;

        $r10 = new java.lang.StringBuilder;

     label27:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(r3);

     label28:
        goto label21;

     label29:
        $r12 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

     label30:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void sendConnectionHeaderIfNotAlreadyPresent(java.io.PrintWriter,java.util.Map)>(r4, $r12);

     label31:
        $r17 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Method requestMethod>;

        $r18 = <fi.iki.elonen.NanoHTTPD$Method: fi.iki.elonen.NanoHTTPD$Method HEAD>;

        if $r17 == $r18 goto label37;

        $z0 = r0.<fi.iki.elonen.NanoHTTPD$Response: boolean chunkedTransfer>;

        if $z0 == 0 goto label37;

     label32:
        specialinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void sendAsChunked(java.io.OutputStream,java.io.PrintWriter)>($r1, r4);

     label33:
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

     label34:
        $r19 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

     label35:
        staticinvoke <fi.iki.elonen.NanoHTTPD: void access$300(java.io.Closeable)>($r19);

     label36:
        return;

     label37:
        specialinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void sendAsFixedLength(java.io.OutputStream,java.io.PrintWriter)>($r1, r4);

     label38:
        goto label33;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label03;
        catch java.io.IOException from label07 to label08 with label03;
        catch java.io.IOException from label09 to label10 with label03;
        catch java.io.IOException from label11 to label12 with label03;
        catch java.io.IOException from label13 to label14 with label03;
        catch java.io.IOException from label16 to label17 with label03;
        catch java.io.IOException from label18 to label19 with label03;
        catch java.io.IOException from label20 to label22 with label03;
        catch java.io.IOException from label23 to label24 with label03;
        catch java.io.IOException from label25 to label26 with label03;
        catch java.io.IOException from label27 to label28 with label03;
        catch java.io.IOException from label30 to label31 with label03;
        catch java.io.IOException from label32 to label34 with label03;
        catch java.io.IOException from label35 to label36 with label03;
        catch java.io.IOException from label37 to label38 with label03;
    }
    protected void sendConnectionHeaderIfNotAlreadyPresent(java.io.PrintWriter, java.util.Map)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.io.PrintWriter $r1;
        java.util.Map r2;
        boolean z0, $z1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.String r6;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.util.Map;

        z0 = 0;

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("connection");

        z0 = z0 | $z1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        virtualinvoke $r1.<java.io.PrintWriter: void print(java.lang.String)>("Connection: keep-alive\r\n");

     label3:
        return;
    }
    public void setRequestMethod(fi.iki.elonen.NanoHTTPD$Method)
    {
        fi.iki.elonen.NanoHTTPD$Response r0;
        fi.iki.elonen.NanoHTTPD$Method $r1;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$Method;

        r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Method requestMethod> = $r1;

        return;
    }
