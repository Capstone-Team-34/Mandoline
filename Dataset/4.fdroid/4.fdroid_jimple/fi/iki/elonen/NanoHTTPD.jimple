fi.iki.elonen.NanoHTTPD extends java.lang.Object
public static final java.lang.String MIME_HTML
public static final java.lang.String MIME_PLAINTEXT
private static final java.lang.String QUERY_STRING_PARAMETER
public static final int SOCKET_READ_TIMEOUT
private fi.iki.elonen.NanoHTTPD$AsyncRunner asyncRunner
private final java.lang.String hostname
private final int myPort
private java.net.ServerSocket myServerSocket
private java.lang.Thread myThread
private java.util.Set openConnections
private javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory
private fi.iki.elonen.NanoHTTPD$TempFileManagerFactory tempFileManagerFactory
    public void <init>(int)
    {
        fi.iki.elonen.NanoHTTPD r0;
        int $i0;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $i0 := @parameter0: int;

        specialinvoke r0.<fi.iki.elonen.NanoHTTPD: void <init>(java.lang.String,int)>(null, $i0);

        return;
    }
    public void <init>(java.lang.String, int)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.lang.String $r1;
        int $i0;
        java.util.HashSet $r2;
        fi.iki.elonen.NanoHTTPD$DefaultTempFileManagerFactory $r3;
        fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner $r4;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<fi.iki.elonen.NanoHTTPD: java.util.Set openConnections> = $r2;

        r0.<fi.iki.elonen.NanoHTTPD: java.lang.String hostname> = $r1;

        r0.<fi.iki.elonen.NanoHTTPD: int myPort> = $i0;

        $r3 = new fi.iki.elonen.NanoHTTPD$DefaultTempFileManagerFactory;

        specialinvoke $r3.<fi.iki.elonen.NanoHTTPD$DefaultTempFileManagerFactory: void <init>(fi.iki.elonen.NanoHTTPD,fi.iki.elonen.NanoHTTPD$1)>(r0, null);

        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: void setTempFileManagerFactory(fi.iki.elonen.NanoHTTPD$TempFileManagerFactory)>($r3);

        $r4 = new fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner;

        specialinvoke $r4.<fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner: void <init>()>();

        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: void setAsyncRunner(fi.iki.elonen.NanoHTTPD$AsyncRunner)>($r4);

        return;
    }
    static java.net.ServerSocket access$100(fi.iki.elonen.NanoHTTPD)
    {
        fi.iki.elonen.NanoHTTPD $r0;
        java.net.ServerSocket r1;

        $r0 := @parameter0: fi.iki.elonen.NanoHTTPD;

        r1 = $r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        return r1;
    }
    static fi.iki.elonen.NanoHTTPD$TempFileManagerFactory access$200(fi.iki.elonen.NanoHTTPD)
    {
        fi.iki.elonen.NanoHTTPD $r0;
        fi.iki.elonen.NanoHTTPD$TempFileManagerFactory r1;

        $r0 := @parameter0: fi.iki.elonen.NanoHTTPD;

        r1 = $r0.<fi.iki.elonen.NanoHTTPD: fi.iki.elonen.NanoHTTPD$TempFileManagerFactory tempFileManagerFactory>;

        return r1;
    }
    static void access$300(java.io.Closeable)
    {
        java.io.Closeable $r0;

        $r0 := @parameter0: java.io.Closeable;

        staticinvoke <fi.iki.elonen.NanoHTTPD: void safeClose(java.io.Closeable)>($r0);

        return;
    }
    static void access$400(java.net.Socket)
    {
        java.net.Socket $r0;

        $r0 := @parameter0: java.net.Socket;

        staticinvoke <fi.iki.elonen.NanoHTTPD: void safeClose(java.net.Socket)>($r0);

        return;
    }
    static fi.iki.elonen.NanoHTTPD$AsyncRunner access$500(fi.iki.elonen.NanoHTTPD)
    {
        fi.iki.elonen.NanoHTTPD $r0;
        fi.iki.elonen.NanoHTTPD$AsyncRunner r1;

        $r0 := @parameter0: fi.iki.elonen.NanoHTTPD;

        r1 = $r0.<fi.iki.elonen.NanoHTTPD: fi.iki.elonen.NanoHTTPD$AsyncRunner asyncRunner>;

        return r1;
    }
    public static javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.lang.String, char[]) throws java.io.IOException
    {
        java.lang.String $r0, $r3;
        char[] $r1;
        java.lang.Exception r2;
        java.security.KeyStore $r4;
        java.lang.Class $r5;
        java.io.InputStream $r6;
        javax.net.ssl.TrustManagerFactory $r7;
        javax.net.ssl.KeyManagerFactory $r8;
        javax.net.ssl.SSLContext $r9;
        javax.net.ssl.KeyManager[] $r10;
        javax.net.ssl.TrustManager[] $r11;
        javax.net.ssl.SSLServerSocketFactory $r12;
        java.io.IOException $r13;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

     label1:
        $r3 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3);

     label2:
        $r5 = class "Lfi/iki/elonen/NanoHTTPD;";

     label3:
        $r6 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        virtualinvoke $r4.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r6, $r1);

        $r0 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r7 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0);

        virtualinvoke $r7.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r4);

        $r0 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r0);

        virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r4, $r1);

        $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        $r10 = virtualinvoke $r8.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r11 = virtualinvoke $r7.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r10, $r11, null);

        $r12 = virtualinvoke $r9.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

     label4:
        return $r12;

     label5:
        r2 := @caughtexception;

        $r13 = new java.io.IOException;

        $r0 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r0);

        throw $r13;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    public static javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore, javax.net.ssl.KeyManagerFactory) throws java.io.IOException
    {
        java.security.KeyStore $r0;
        javax.net.ssl.KeyManagerFactory $r1;
        java.lang.Exception r2;
        java.lang.String $r3;
        javax.net.ssl.TrustManagerFactory $r4;
        javax.net.ssl.SSLContext $r5;
        javax.net.ssl.KeyManager[] $r6;
        javax.net.ssl.TrustManager[] $r7;
        javax.net.ssl.SSLServerSocketFactory $r8;
        java.io.IOException $r9;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: javax.net.ssl.KeyManagerFactory;

     label1:
        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3);

        virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r0);

        $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        $r6 = virtualinvoke $r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r7 = virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, null);

        $r8 = virtualinvoke $r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

     label2:
        return $r8;

     label3:
        r2 := @caughtexception;

        $r9 = new java.io.IOException;

        $r3 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public static javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore, javax.net.ssl.KeyManager[]) throws java.io.IOException
    {
        java.security.KeyStore $r0;
        javax.net.ssl.KeyManager[] $r1;
        java.lang.Exception r2;
        java.lang.String $r3;
        javax.net.ssl.TrustManagerFactory $r4;
        javax.net.ssl.SSLContext $r5;
        javax.net.ssl.TrustManager[] $r6;
        javax.net.ssl.SSLServerSocketFactory $r7;
        java.io.IOException $r8;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: javax.net.ssl.KeyManager[];

     label1:
        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3);

        virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r0);

        $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        $r6 = virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r1, $r6, null);

        $r7 = virtualinvoke $r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

     label2:
        return $r7;

     label3:
        r2 := @caughtexception;

        $r8 = new java.io.IOException;

        $r3 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    private static final void safeClose(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    private static final void safeClose(java.net.ServerSocket)
    {
        java.net.ServerSocket $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.net.ServerSocket;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.net.ServerSocket: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    private static final void safeClose(java.net.Socket)
    {
        java.net.Socket $r0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.net.Socket;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.net.Socket: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void closeAllConnections()
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.util.Set $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.net.Socket r4;
        java.lang.Throwable $r5;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        entermonitor r0;

     label1:
        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.util.Set openConnections>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.net.Socket) $r3;

        staticinvoke <fi.iki.elonen.NanoHTTPD: void safeClose(java.net.Socket)>(r4);

     label3:
        goto label2;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    protected java.util.Map decodeParameters(java.lang.String)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.lang.String $r1, $r4;
        java.util.HashMap r2;
        java.util.StringTokenizer r3;
        boolean $z0;
        int $i0;
        java.util.ArrayList $r5;
        java.lang.Object $r6;
        java.util.List $r7;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        if $r1 == null goto label7;

        r3 = new java.util.StringTokenizer;

        specialinvoke r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, "&");

     label1:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label7;

        $r1 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(61);

        if $i0 < 0 goto label5;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: java.lang.String decodePercent(java.lang.String)>($r4);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label3:
        if $i0 < 0 goto label6;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r1 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: java.lang.String decodePercent(java.lang.String)>($r1);

     label4:
        if $r1 == null goto label1;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (java.util.List) $r6;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label1;

     label5:
        $r4 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: java.lang.String decodePercent(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        goto label2;

     label6:
        $r1 = null;

        goto label4;

     label7:
        return r2;
    }
    protected java.util.Map decodeParameters(java.util.Map)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.util.Map r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("NanoHttpd.QUERY_STRING");

        $r3 = (java.lang.String) $r2;

        r1 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: java.util.Map decodeParameters(java.lang.String)>($r3);

        return r1;
    }
    protected java.lang.String decodePercent(java.lang.String)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException $r2;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r1, "UTF8");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public final int getListeningPort()
    {
        fi.iki.elonen.NanoHTTPD r0;
        int $i0;
        java.net.ServerSocket $r1;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        $i0 = virtualinvoke $r1.<java.net.ServerSocket: int getLocalPort()>();

        return $i0;
    }
    public final boolean isAlive()
    {
        fi.iki.elonen.NanoHTTPD r0;
        boolean $z0;
        java.net.ServerSocket $r1;
        java.lang.Thread $r2;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $z0 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: boolean wasStarted()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        $z0 = virtualinvoke $r1.<java.net.ServerSocket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        $z0 = virtualinvoke $r2.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void makeSecure(javax.net.ssl.SSLServerSocketFactory)
    {
        fi.iki.elonen.NanoHTTPD r0;
        javax.net.ssl.SSLServerSocketFactory $r1;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: javax.net.ssl.SSLServerSocketFactory;

        r0.<fi.iki.elonen.NanoHTTPD: javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory> = $r1;

        return;
    }
    public void registerConnection(java.net.Socket)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.net.Socket $r1;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.net.Socket;

        entermonitor r0;

     label1:
        $r2 = r0.<fi.iki.elonen.NanoHTTPD: java.util.Set openConnections>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public fi.iki.elonen.NanoHTTPD$Response serve(fi.iki.elonen.NanoHTTPD$IHTTPSession)
    {
        fi.iki.elonen.NanoHTTPD r0;
        fi.iki.elonen.NanoHTTPD$IHTTPSession $r1;
        java.util.HashMap r2;
        java.io.IOException r3;
        fi.iki.elonen.NanoHTTPD$ResponseException r4;
        fi.iki.elonen.NanoHTTPD$Method $r5, $r6;
        boolean $z0;
        java.util.Map $r7, $r9;
        java.lang.String $r8;
        fi.iki.elonen.NanoHTTPD$Response $r10;
        fi.iki.elonen.NanoHTTPD$Response$Status $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$IHTTPSession;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: fi.iki.elonen.NanoHTTPD$Method getMethod()>();

        $r6 = <fi.iki.elonen.NanoHTTPD$Method: fi.iki.elonen.NanoHTTPD$Method PUT>;

        $z0 = virtualinvoke $r6.<fi.iki.elonen.NanoHTTPD$Method: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = <fi.iki.elonen.NanoHTTPD$Method: fi.iki.elonen.NanoHTTPD$Method POST>;

        $z0 = virtualinvoke $r6.<fi.iki.elonen.NanoHTTPD$Method: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

     label1:
        interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: void parseBody(java.util.Map)>(r2);

     label2:
        $r7 = interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: java.util.Map getParms()>();

        $r8 = interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: java.lang.String getQueryParameterString()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NanoHttpd.QUERY_STRING", $r8);

        $r8 = interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: java.lang.String getUri()>();

        $r9 = interfaceinvoke $r1.<fi.iki.elonen.NanoHTTPD$IHTTPSession: java.util.Map getHeaders()>();

        $r10 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: fi.iki.elonen.NanoHTTPD$Response serve(java.lang.String,fi.iki.elonen.NanoHTTPD$Method,java.util.Map,java.util.Map,java.util.Map)>($r8, $r5, $r9, $r7, r2);

        return $r10;

     label3:
        r3 := @caughtexception;

        $r10 = new fi.iki.elonen.NanoHTTPD$Response;

        $r11 = <fi.iki.elonen.NanoHTTPD$Response$Status: fi.iki.elonen.NanoHTTPD$Response$Status INTERNAL_ERROR>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SERVER INTERNAL ERROR: IOException: ");

        $r8 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<fi.iki.elonen.NanoHTTPD$Response: void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String)>($r11, "text/plain", $r8);

        return $r10;

     label4:
        r4 := @caughtexception;

        $r10 = new fi.iki.elonen.NanoHTTPD$Response;

        $r11 = virtualinvoke r4.<fi.iki.elonen.NanoHTTPD$ResponseException: fi.iki.elonen.NanoHTTPD$Response$Status getStatus()>();

        $r8 = virtualinvoke r4.<fi.iki.elonen.NanoHTTPD$ResponseException: java.lang.String getMessage()>();

        specialinvoke $r10.<fi.iki.elonen.NanoHTTPD$Response: void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String)>($r11, "text/plain", $r8);

        return $r10;

        catch java.io.IOException from label1 to label2 with label3;
        catch fi.iki.elonen.NanoHTTPD$ResponseException from label1 to label2 with label4;
    }
    public fi.iki.elonen.NanoHTTPD$Response serve(java.lang.String, fi.iki.elonen.NanoHTTPD$Method, java.util.Map, java.util.Map, java.util.Map)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.lang.String $r1;
        fi.iki.elonen.NanoHTTPD$Method $r2;
        java.util.Map r3, r4, r5;
        fi.iki.elonen.NanoHTTPD$Response $r6;
        fi.iki.elonen.NanoHTTPD$Response$Status $r7;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: fi.iki.elonen.NanoHTTPD$Method;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: java.util.Map;

        $r6 = new fi.iki.elonen.NanoHTTPD$Response;

        $r7 = <fi.iki.elonen.NanoHTTPD$Response$Status: fi.iki.elonen.NanoHTTPD$Response$Status NOT_FOUND>;

        specialinvoke $r6.<fi.iki.elonen.NanoHTTPD$Response: void <init>(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String)>($r7, "text/plain", "Not Found");

        return $r6;
    }
    public void setAsyncRunner(fi.iki.elonen.NanoHTTPD$AsyncRunner)
    {
        fi.iki.elonen.NanoHTTPD r0;
        fi.iki.elonen.NanoHTTPD$AsyncRunner $r1;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$AsyncRunner;

        r0.<fi.iki.elonen.NanoHTTPD: fi.iki.elonen.NanoHTTPD$AsyncRunner asyncRunner> = $r1;

        return;
    }
    public void setTempFileManagerFactory(fi.iki.elonen.NanoHTTPD$TempFileManagerFactory)
    {
        fi.iki.elonen.NanoHTTPD r0;
        fi.iki.elonen.NanoHTTPD$TempFileManagerFactory $r1;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: fi.iki.elonen.NanoHTTPD$TempFileManagerFactory;

        r0.<fi.iki.elonen.NanoHTTPD: fi.iki.elonen.NanoHTTPD$TempFileManagerFactory tempFileManagerFactory> = $r1;

        return;
    }
    public void start() throws java.io.IOException
    {
        fi.iki.elonen.NanoHTTPD r0;
        int $i0;
        java.net.ServerSocket $r1;
        javax.net.ssl.SSLServerSocketFactory $r2;
        javax.net.ssl.SSLServerSocket r3;
        java.lang.String $r4;
        java.net.InetSocketAddress $r5;
        java.lang.Thread $r6;
        fi.iki.elonen.NanoHTTPD$1 $r7;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r2 = r0.<fi.iki.elonen.NanoHTTPD: javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory>;

        if $r2 == null goto label3;

        $r2 = r0.<fi.iki.elonen.NanoHTTPD: javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory>;

        $r1 = virtualinvoke $r2.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket()>();

        r3 = (javax.net.ssl.SSLServerSocket) $r1;

        virtualinvoke r3.<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)>(0);

        r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket> = r3;

     label1:
        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.String hostname>;

        if $r4 == null goto label4;

        $r5 = new java.net.InetSocketAddress;

        $r4 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.String hostname>;

        $i0 = r0.<fi.iki.elonen.NanoHTTPD: int myPort>;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r4, $i0);

     label2:
        virtualinvoke $r1.<java.net.ServerSocket: void bind(java.net.SocketAddress)>($r5);

        $r6 = new java.lang.Thread;

        $r7 = new fi.iki.elonen.NanoHTTPD$1;

        specialinvoke $r7.<fi.iki.elonen.NanoHTTPD$1: void <init>(fi.iki.elonen.NanoHTTPD)>(r0);

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>($r7);

        r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread> = $r6;

        $r6 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        virtualinvoke $r6.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r6 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        virtualinvoke $r6.<java.lang.Thread: void setName(java.lang.String)>("NanoHttpd Main Listener");

        $r6 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        virtualinvoke $r6.<java.lang.Thread: void start()>();

        return;

     label3:
        $r1 = new java.net.ServerSocket;

        specialinvoke $r1.<java.net.ServerSocket: void <init>()>();

        r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket> = $r1;

        goto label1;

     label4:
        $r5 = new java.net.InetSocketAddress;

        $i0 = r0.<fi.iki.elonen.NanoHTTPD: int myPort>;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(int)>($i0);

        goto label2;
    }
    public void stop()
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.lang.Exception r1;
        java.net.ServerSocket $r2;
        java.lang.Thread $r3;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

     label1:
        $r2 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        staticinvoke <fi.iki.elonen.NanoHTTPD: void safeClose(java.net.ServerSocket)>($r2);

        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD: void closeAllConnections()>();

        $r3 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        virtualinvoke $r3.<java.lang.Thread: void join()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void unRegisterConnection(java.net.Socket)
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.net.Socket $r1;
        java.util.Set $r2;
        java.lang.Throwable $r3;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 := @parameter0: java.net.Socket;

        entermonitor r0;

     label1:
        $r2 = r0.<fi.iki.elonen.NanoHTTPD: java.util.Set openConnections>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public final boolean wasStarted()
    {
        fi.iki.elonen.NanoHTTPD r0;
        java.net.ServerSocket $r1;
        java.lang.Thread $r2;

        r0 := @this: fi.iki.elonen.NanoHTTPD;

        $r1 = r0.<fi.iki.elonen.NanoHTTPD: java.net.ServerSocket myServerSocket>;

        if $r1 == null goto label1;

        $r2 = r0.<fi.iki.elonen.NanoHTTPD: java.lang.Thread myThread>;

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }
