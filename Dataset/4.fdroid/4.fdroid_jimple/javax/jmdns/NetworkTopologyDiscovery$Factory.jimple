javax.jmdns.NetworkTopologyDiscovery$Factory extends java.lang.Object
private static final java.util.concurrent.atomic.AtomicReference _databaseClassDelegate
private static volatile javax.jmdns.NetworkTopologyDiscovery _instance
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <javax.jmdns.NetworkTopologyDiscovery$Factory: java.util.concurrent.atomic.AtomicReference _databaseClassDelegate> = $r0;

        return;
    }
    private void <init>()
    {
        javax.jmdns.NetworkTopologyDiscovery$Factory r0;

        r0 := @this: javax.jmdns.NetworkTopologyDiscovery$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static javax.jmdns.NetworkTopologyDiscovery getInstance()
    {
        javax.jmdns.NetworkTopologyDiscovery $r0;
        java.lang.Throwable $r1;

        $r0 = <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery _instance>;

        if $r0 != null goto label3;

        entermonitor class "Ljavax/jmdns/NetworkTopologyDiscovery$Factory;";

     label1:
        $r0 = <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery _instance>;

        if $r0 != null goto label2;

        $r0 = staticinvoke <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery()>();

        <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery _instance> = $r0;

     label2:
        exitmonitor class "Ljavax/jmdns/NetworkTopologyDiscovery$Factory;";

     label3:
        $r0 = <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery _instance>;

        return $r0;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor class "Ljavax/jmdns/NetworkTopologyDiscovery$Factory;";

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    protected static javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        javax.jmdns.NetworkTopologyDiscovery r1;
        java.lang.Object $r2;
        javax.jmdns.NetworkTopologyDiscovery$Factory$ClassDelegate r3;
        javax.jmdns.impl.NetworkTopologyDiscoveryImpl r4;

        r1 = null;

        $r0 = <javax.jmdns.NetworkTopologyDiscovery$Factory: java.util.concurrent.atomic.AtomicReference _databaseClassDelegate>;

        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (javax.jmdns.NetworkTopologyDiscovery$Factory$ClassDelegate) $r2;

        if r3 == null goto label1;

        r1 = interfaceinvoke r3.<javax.jmdns.NetworkTopologyDiscovery$Factory$ClassDelegate: javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery()>();

     label1:
        if r1 == null goto label2;

        return r1;

     label2:
        r4 = new javax.jmdns.impl.NetworkTopologyDiscoveryImpl;

        specialinvoke r4.<javax.jmdns.impl.NetworkTopologyDiscoveryImpl: void <init>()>();

        return r4;
    }
