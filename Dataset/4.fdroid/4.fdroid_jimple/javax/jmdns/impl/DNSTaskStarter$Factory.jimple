javax.jmdns.impl.DNSTaskStarter$Factory extends java.lang.Object
private static final java.util.concurrent.atomic.AtomicReference _databaseClassDelegate
private static volatile javax.jmdns.impl.DNSTaskStarter$Factory _instance
private final java.util.concurrent.ConcurrentMap _instances
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.atomic.AtomicReference _databaseClassDelegate> = $r0;

        return;
    }
    private void <init>()
    {
        javax.jmdns.impl.DNSTaskStarter$Factory r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(20);

        r0.<javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.ConcurrentMap _instances> = $r1;

        return;
    }
    public static javax.jmdns.impl.DNSTaskStarter$Factory getInstance()
    {
        javax.jmdns.impl.DNSTaskStarter$Factory $r0;
        java.lang.Throwable $r1;

        $r0 = <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory _instance>;

        if $r0 != null goto label3;

        entermonitor class "Ljavax/jmdns/impl/DNSTaskStarter$Factory;";

     label1:
        $r0 = <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory _instance>;

        if $r0 != null goto label2;

        $r0 = new javax.jmdns.impl.DNSTaskStarter$Factory;

        specialinvoke $r0.<javax.jmdns.impl.DNSTaskStarter$Factory: void <init>()>();

        <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory _instance> = $r0;

     label2:
        exitmonitor class "Ljavax/jmdns/impl/DNSTaskStarter$Factory;";

     label3:
        $r0 = <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter$Factory _instance>;

        return $r0;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor class "Ljavax/jmdns/impl/DNSTaskStarter$Factory;";

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    protected static javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.JmDNSImpl $r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        javax.jmdns.impl.DNSTaskStarter r2;
        java.lang.Object $r3;
        javax.jmdns.impl.DNSTaskStarter$Factory$ClassDelegate r4;
        javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl r5;

        $r0 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        r2 = null;

        $r1 = <javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.atomic.AtomicReference _databaseClassDelegate>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (javax.jmdns.impl.DNSTaskStarter$Factory$ClassDelegate) $r3;

        if r4 == null goto label1;

        r2 = interfaceinvoke r4.<javax.jmdns.impl.DNSTaskStarter$Factory$ClassDelegate: javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter(javax.jmdns.impl.JmDNSImpl)>($r0);

     label1:
        if r2 == null goto label2;

        return r2;

     label2:
        r5 = new javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl;

        specialinvoke r5.<javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl: void <init>(javax.jmdns.impl.JmDNSImpl)>($r0);

        return r5;
    }
    public void disposeStarter(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSTaskStarter$Factory r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$Factory;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = r0.<javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.ConcurrentMap _instances>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
    public javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSTaskStarter$Factory r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Object $r3;
        javax.jmdns.impl.DNSTaskStarter r4;

        r0 := @this: javax.jmdns.impl.DNSTaskStarter$Factory;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = r0.<javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.ConcurrentMap _instances>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (javax.jmdns.impl.DNSTaskStarter) $r3;

        if r4 != null goto label1;

        $r2 = r0.<javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.ConcurrentMap _instances>;

        r4 = staticinvoke <javax.jmdns.impl.DNSTaskStarter$Factory: javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter(javax.jmdns.impl.JmDNSImpl)>($r1);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, r4);

        $r2 = r0.<javax.jmdns.impl.DNSTaskStarter$Factory: java.util.concurrent.ConcurrentMap _instances>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (javax.jmdns.impl.DNSTaskStarter) $r3;

     label1:
        return r4;
    }
