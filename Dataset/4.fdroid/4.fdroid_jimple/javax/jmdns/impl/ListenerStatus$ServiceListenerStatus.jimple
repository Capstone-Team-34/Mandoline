javax.jmdns.impl.ListenerStatus$ServiceListenerStatus extends javax.jmdns.impl.ListenerStatus
private static java.util.logging.Logger logger
private final java.util.concurrent.ConcurrentMap _addedServices
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/ListenerStatus$ServiceListenerStatus;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>(javax.jmdns.ServiceListener, boolean)
    {
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r0;
        javax.jmdns.ServiceListener $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        $r1 := @parameter0: javax.jmdns.ServiceListener;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<javax.jmdns.impl.ListenerStatus: void <init>(java.util.EventListener,boolean)>($r1, $z0);

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices> = $r2;

        return;
    }
    private static final boolean _sameInfo(javax.jmdns.ServiceInfo, javax.jmdns.ServiceInfo)
    {
        javax.jmdns.ServiceInfo $r0, $r1;
        boolean $z0;
        byte[] $r2, $r3;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @parameter0: javax.jmdns.ServiceInfo;

        $r1 := @parameter1: javax.jmdns.ServiceInfo;

        if $r0 != null goto label1;

        return 0;

     label1:
        if $r1 == null goto label4;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r0.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceInfo: byte[] getTextBytes()>();

        $i0 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label4;

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $b2 = $r2[$i0];

        $b3 = $r3[$i0];

        if $b2 != $b3 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    void serviceAdded(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r0;
        javax.jmdns.ServiceEvent $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.util.concurrent.ConcurrentMap $r4;
        javax.jmdns.ServiceInfo $r5;
        java.lang.Object $r6;
        java.util.EventListener $r7;
        javax.jmdns.ServiceListener $r8;
        boolean $z0;
        java.util.logging.Logger $r9;

        r0 := @this: javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r5 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        $r5 = virtualinvoke $r5.<javax.jmdns.ServiceInfo: javax.jmdns.ServiceInfo clone()>();

        $r6 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $r6 != null goto label1;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r8 = (javax.jmdns.ServiceListener) $r7;

        interfaceinvoke $r8.<javax.jmdns.ServiceListener: void serviceAdded(javax.jmdns.ServiceEvent)>($r1);

        $r5 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        if $r5 == null goto label2;

        $z0 = virtualinvoke $r5.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r8 = (javax.jmdns.ServiceListener) $r7;

        interfaceinvoke $r8.<javax.jmdns.ServiceListener: void serviceResolved(javax.jmdns.ServiceEvent)>($r1);

        return;

     label1:
        $r9 = <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.logging.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Added called for a service already added: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void finer(java.lang.String)>($r3);

     label2:
        return;
    }
    void serviceRemoved(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r0;
        javax.jmdns.ServiceEvent $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.util.concurrent.ConcurrentMap $r4, $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.util.EventListener $r7;
        javax.jmdns.ServiceListener $r8;
        java.util.logging.Logger $r9;

        r0 := @this: javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r3, $r6);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r8 = (javax.jmdns.ServiceListener) $r7;

        interfaceinvoke $r8.<javax.jmdns.ServiceListener: void serviceRemoved(javax.jmdns.ServiceEvent)>($r1);

        return;

     label1:
        $r9 = <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.logging.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Removed called for a service already removed: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void finer(java.lang.String)>($r3);

        return;
    }
    void serviceResolved(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r0;
        javax.jmdns.ServiceEvent $r1;
        javax.jmdns.ServiceInfo $r2, r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r6;
        java.util.EventListener $r8;
        javax.jmdns.ServiceListener $r9;
        java.lang.Throwable $r10;
        java.util.logging.Logger $r11;

        r0 := @this: javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        if $r2 == null goto label7;

        $z0 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r7 = (javax.jmdns.ServiceInfo) $r6;

        $z0 = staticinvoke <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: boolean _sameInfo(javax.jmdns.ServiceInfo,javax.jmdns.ServiceInfo)>($r2, r7);

        if $z0 != 0 goto label6;

        if r7 != null goto label3;

        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        r7 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: javax.jmdns.ServiceInfo clone()>();

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r4, r7);

        if $r6 != null goto label2;

        $r8 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r9 = (javax.jmdns.ServiceListener) $r8;

        interfaceinvoke $r9.<javax.jmdns.ServiceListener: void serviceResolved(javax.jmdns.ServiceEvent)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r2 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: javax.jmdns.ServiceInfo clone()>();

        $z0 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r7, $r2);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r9 = (javax.jmdns.ServiceListener) $r8;

        interfaceinvoke $r9.<javax.jmdns.ServiceListener: void serviceResolved(javax.jmdns.ServiceEvent)>($r1);

     label4:
        goto label2;

     label5:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

     label6:
        $r11 = <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.logging.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Resolved called for a service already resolved: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void finer(java.lang.String)>($r4);

        goto label2;

     label7:
        $r11 = <javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.logging.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Resolved called for an unresolved event: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r4);

     label8:
        goto label2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label8 with label5;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.ListenerStatus$ServiceListenerStatus r0;
        java.lang.StringBuilder r1, $r9;
        java.util.EventListener $r2;
        javax.jmdns.ServiceListener $r3;
        java.lang.String $r4;
        java.util.concurrent.ConcurrentMap $r5;
        boolean $z0;
        java.util.Set $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;

        r0 := @this: javax.jmdns.impl.ListenerStatus$ServiceListenerStatus;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(2048);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Status for ");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.EventListener getListener()>();

        $r3 = (javax.jmdns.ServiceListener) $r2;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $z0 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no type event ");

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = r0.<javax.jmdns.impl.ListenerStatus$ServiceListenerStatus: java.util.concurrent.ConcurrentMap _addedServices>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        goto label1;
    }
