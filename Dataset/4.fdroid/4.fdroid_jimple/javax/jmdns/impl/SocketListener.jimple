javax.jmdns.impl.SocketListener extends java.lang.Thread
static java.util.logging.Logger logger
private final javax.jmdns.impl.JmDNSImpl _jmDNSImpl
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/SocketListener;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger> = $r2;

        return;
    }
    void <init>(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.SocketListener r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.SocketListener;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SocketListener(");

        if $r1 == null goto label2;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>($r3);

        virtualinvoke r0.<javax.jmdns.impl.SocketListener: void setDaemon(boolean)>(1);

        r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl> = $r1;

        return;

     label2:
        $r3 = "";

        goto label1;
    }
    public void run()
    {
        javax.jmdns.impl.SocketListener r0;
        byte[] r1;
        javax.jmdns.impl.DNSIncoming r2;
        java.net.DatagramPacket r3;
        int $i0, $i1;
        javax.jmdns.impl.JmDNSImpl $r4, $r12;
        boolean $z0;
        java.net.MulticastSocket $r5;
        java.util.logging.Logger $r6;
        java.util.logging.Level $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        javax.jmdns.impl.HostInfo $r10;
        java.net.InetAddress $r11;
        java.io.IOException r13, r14;

        r0 := @this: javax.jmdns.impl.SocketListener;

        r1 = newarray (byte)[8972];

        r3 = new java.net.DatagramPacket;

        $i0 = lengthof r1;

     label01:
        specialinvoke r3.<java.net.DatagramPacket: void <init>(byte[],int)>(r1, $i0);

     label02:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label03:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

     label04:
        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label05:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

     label06:
        if $z0 != 0 goto label19;

        $i0 = lengthof r1;

     label07:
        virtualinvoke r3.<java.net.DatagramPacket: void setLength(int)>($i0);

     label08:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label09:
        $r5 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: java.net.MulticastSocket getSocket()>();

        virtualinvoke $r5.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>(r3);

     label10:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label11:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

     label12:
        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label13:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

     label14:
        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label15:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isClosing()>();

     label16:
        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label17:
        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isClosed()>();

     label18:
        if $z0 == 0 goto label20;

     label19:
        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

        if $z0 == 0 goto label50;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.SocketListener: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() exiting.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void finest(java.lang.String)>($r9);

        return;

     label20:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label21:
        $r10 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $z0 = virtualinvoke $r10.<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>(r3);

     label22:
        if $z0 != 0 goto label02;

        r2 = new javax.jmdns.impl.DNSIncoming;

     label23:
        specialinvoke r2.<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>(r3);

        $z0 = virtualinvoke r2.<javax.jmdns.impl.DNSIncoming: boolean isValidResponseCode()>();

     label24:
        if $z0 == 0 goto label45;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINEST>;

     label25:
        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

     label26:
        if $z0 == 0 goto label28;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r8 = new java.lang.StringBuilder;

     label27:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.SocketListener: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS in:");

        $r9 = virtualinvoke r2.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void finest(java.lang.String)>($r9);

     label28:
        $z0 = virtualinvoke r2.<javax.jmdns.impl.DNSIncoming: boolean isQuery()>();

     label29:
        if $z0 == 0 goto label42;

     label30:
        $i0 = virtualinvoke r3.<java.net.DatagramPacket: int getPort()>();

     label31:
        $i1 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

        if $i0 == $i1 goto label33;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label32:
        $r11 = virtualinvoke r3.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r3.<java.net.DatagramPacket: int getPort()>();

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void handleQuery(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int)>(r2, $r11, $i0);

     label33:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        $r12 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label34:
        $r11 = virtualinvoke $r12.<javax.jmdns.impl.JmDNSImpl: java.net.InetAddress getGroup()>();

     label35:
        $i0 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

     label36:
        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void handleQuery(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int)>(r2, $r11, $i0);

     label37:
        goto label02;

     label38:
        r13 := @caughtexception;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r8 = new java.lang.StringBuilder;

     label39:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.SocketListener: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() exception ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, $r9, r13);

     label40:
        goto label02;

     label41:
        r14 := @caughtexception;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isClosing()>();

        if $z0 != 0 goto label19;

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isClosed()>();

        if $z0 != 0 goto label19;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.SocketListener: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() exception ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, $r9, r14);

        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void recover()>();

        goto label19;

     label42:
        $r4 = r0.<javax.jmdns.impl.SocketListener: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

     label43:
        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void handleResponse(javax.jmdns.impl.DNSIncoming)>(r2);

     label44:
        goto label02;

     label45:
        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

     label46:
        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

     label47:
        if $z0 == 0 goto label02;

        $r6 = <javax.jmdns.impl.SocketListener: java.util.logging.Logger logger>;

        $r8 = new java.lang.StringBuilder;

     label48:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.SocketListener: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS in message with error code:");

        $r9 = virtualinvoke r2.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>($r9);

     label49:
        goto label02;

     label50:
        return;

        catch java.io.IOException from label01 to label02 with label41;
        catch java.io.IOException from label03 to label04 with label41;
        catch java.io.IOException from label05 to label06 with label41;
        catch java.io.IOException from label07 to label08 with label41;
        catch java.io.IOException from label09 to label10 with label41;
        catch java.io.IOException from label11 to label12 with label41;
        catch java.io.IOException from label13 to label14 with label41;
        catch java.io.IOException from label15 to label16 with label41;
        catch java.io.IOException from label17 to label18 with label41;
        catch java.io.IOException from label21 to label22 with label38;
        catch java.io.IOException from label23 to label24 with label38;
        catch java.io.IOException from label25 to label26 with label38;
        catch java.io.IOException from label27 to label29 with label38;
        catch java.io.IOException from label30 to label31 with label38;
        catch java.io.IOException from label32 to label33 with label38;
        catch java.io.IOException from label34 to label35 with label38;
        catch java.io.IOException from label36 to label37 with label38;
        catch java.io.IOException from label39 to label40 with label41;
        catch java.io.IOException from label43 to label44 with label38;
        catch java.io.IOException from label46 to label47 with label38;
        catch java.io.IOException from label48 to label49 with label38;
    }
