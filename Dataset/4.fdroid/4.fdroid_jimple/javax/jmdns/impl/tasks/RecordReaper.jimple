javax.jmdns.impl.tasks.RecordReaper extends javax.jmdns.impl.tasks.DNSTask
static java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/tasks/RecordReaper;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.tasks.RecordReaper: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.tasks.RecordReaper r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.tasks.RecordReaper;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        return;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.tasks.RecordReaper r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.RecordReaper;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordReaper(");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "";

        goto label1;
    }
    public void run()
    {
        javax.jmdns.impl.tasks.RecordReaper r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        boolean $z0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: javax.jmdns.impl.tasks.RecordReaper;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label3;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <javax.jmdns.impl.tasks.RecordReaper: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z0 == 0 goto label2;

        $r2 = <javax.jmdns.impl.tasks.RecordReaper: java.util.logging.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS reaping cache");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void finest(java.lang.String)>($r5);

     label2:
        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: void cleanCache()>();

     label3:
        return;
    }
    public void start(java.util.Timer)
    {
        javax.jmdns.impl.tasks.RecordReaper r0;
        java.util.Timer $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.RecordReaper;

        $r1 := @parameter0: java.util.Timer;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.RecordReaper: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>(r0, 10000L, 10000L);

     label1:
        return;
    }
