javax.jmdns.impl.tasks.Responder extends javax.jmdns.impl.tasks.DNSTask
static java.util.logging.Logger logger
private final java.net.InetAddress _addr
private final javax.jmdns.impl.DNSIncoming _in
private final int _port
private final boolean _unicast
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/tasks/Responder;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>(javax.jmdns.impl.JmDNSImpl, javax.jmdns.impl.DNSIncoming, java.net.InetAddress, int)
    {
        javax.jmdns.impl.tasks.Responder r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.DNSIncoming $r2;
        java.net.InetAddress $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.Responder;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter1: javax.jmdns.impl.DNSIncoming;

        $r3 := @parameter2: java.net.InetAddress;

        $i0 := @parameter3: int;

        specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in> = $r2;

        r0.<javax.jmdns.impl.tasks.Responder: java.net.InetAddress _addr> = $r3;

        r0.<javax.jmdns.impl.tasks.Responder: int _port> = $i0;

        $i1 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

        if $i0 == $i1 goto label2;

        $z0 = 1;

     label1:
        r0.<javax.jmdns.impl.tasks.Responder: boolean _unicast> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.tasks.Responder r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.Responder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Responder(");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "";

        goto label1;
    }
    public void run()
    {
        javax.jmdns.impl.tasks.Responder r0;
        java.util.HashSet r1, r3;
        java.lang.Throwable r2;
        javax.jmdns.impl.JmDNSImpl $r4;
        javax.jmdns.impl.DNSIncoming $r5;
        boolean $z0;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        javax.jmdns.impl.DNSQuestion r9;
        java.util.logging.Logger $r10;
        java.util.logging.Level $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;
        long $l0;
        javax.jmdns.impl.DNSRecord r14;
        javax.jmdns.impl.DNSOutgoing r15;
        int $i1;
        java.net.InetSocketAddress $r16;
        java.net.InetAddress $r17;

        r0 := @this: javax.jmdns.impl.tasks.Responder;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void respondToQuery(javax.jmdns.impl.DNSIncoming)>($r5);

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: boolean isAnnounced()>();

        if $z0 == 0 goto label50;

     label01:
        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $r6 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming: java.util.Collection getQuestions()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label13;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSQuestion) $r8;

        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r10.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r11);

     label05:
        if $z0 == 0 goto label07;

     label06:
        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run() JmDNS responding to: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void finer(java.lang.String)>($r13);

     label07:
        $z0 = r0.<javax.jmdns.impl.tasks.Responder: boolean _unicast>;

     label08:
        if $z0 == 0 goto label10;

     label09:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r9);

     label10:
        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke r9.<javax.jmdns.impl.DNSQuestion: void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set)>($r4, r1);

     label11:
        goto label02;

     label12:
        r2 := @caughtexception;

        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run() exception ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, $r13, r2);

        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void close()>();

        return;

     label13:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $r6 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAnswers()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label15:
        if $z0 == 0 goto label22;

     label16:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.jmdns.impl.DNSRecord) $r8;

        $z0 = virtualinvoke r14.<javax.jmdns.impl.DNSRecord: boolean isStale(long)>($l0);

     label17:
        if $z0 == 0 goto label14;

     label18:
        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r14);

        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r10.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r11);

     label19:
        if $z0 == 0 goto label14;

     label20:
        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JmDNS Responder Known Answer Removed");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void finer(java.lang.String)>($r13);

     label21:
        goto label14;

     label22:
        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

     label23:
        if $z0 != 0 goto label50;

     label24:
        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r10.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r11);

     label25:
        if $z0 == 0 goto label27;

     label26:
        $r10 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("run() JmDNS responding");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void finer(java.lang.String)>($r13);

     label27:
        r15 = new javax.jmdns.impl.DNSOutgoing;

        $z0 = r0.<javax.jmdns.impl.tasks.Responder: boolean _unicast>;

     label28:
        if $z0 != 0 goto label39;

        $z0 = 1;

     label29:
        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $i1 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming: int getSenderUDPPayload()>();

        specialinvoke r15.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>(33792, $z0, $i1);

        $z0 = r0.<javax.jmdns.impl.tasks.Responder: boolean _unicast>;

     label30:
        if $z0 == 0 goto label32;

     label31:
        $r16 = new java.net.InetSocketAddress;

        $r17 = r0.<javax.jmdns.impl.tasks.Responder: java.net.InetAddress _addr>;

        $i1 = r0.<javax.jmdns.impl.tasks.Responder: int _port>;

        specialinvoke $r16.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1);

        virtualinvoke r15.<javax.jmdns.impl.DNSOutgoing: void setDestination(java.net.InetSocketAddress)>($r16);

     label32:
        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $i1 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming: int getId()>();

        virtualinvoke r15.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i1);

        $r7 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label33:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label34:
        if $z0 == 0 goto label40;

     label35:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSQuestion) $r8;

     label36:
        if r9 == null goto label33;

     label37:
        r15 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>(r15, r9);

     label38:
        goto label33;

     label39:
        $z0 = 0;

        goto label29;

     label40:
        $r7 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label41:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label42:
        if $z0 == 0 goto label47;

     label43:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.jmdns.impl.DNSRecord) $r8;

     label44:
        if r14 == null goto label41;

     label45:
        $r5 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        r15 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>(r15, $r5, r14);

     label46:
        goto label41;

     label47:
        $z0 = virtualinvoke r15.<javax.jmdns.impl.DNSOutgoing: boolean isEmpty()>();

     label48:
        if $z0 != 0 goto label50;

     label49:
        $r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>(r15);

     label50:
        return;

        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label13 to label15 with label12;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label18 to label19 with label12;
        catch java.lang.Throwable from label20 to label21 with label12;
        catch java.lang.Throwable from label22 to label23 with label12;
        catch java.lang.Throwable from label24 to label25 with label12;
        catch java.lang.Throwable from label26 to label28 with label12;
        catch java.lang.Throwable from label29 to label30 with label12;
        catch java.lang.Throwable from label31 to label34 with label12;
        catch java.lang.Throwable from label35 to label36 with label12;
        catch java.lang.Throwable from label37 to label38 with label12;
        catch java.lang.Throwable from label40 to label42 with label12;
        catch java.lang.Throwable from label43 to label44 with label12;
        catch java.lang.Throwable from label45 to label46 with label12;
        catch java.lang.Throwable from label47 to label48 with label12;
        catch java.lang.Throwable from label49 to label50 with label12;
    }
    public void start(java.util.Timer)
    {
        javax.jmdns.impl.tasks.Responder r0;
        java.util.Timer $r1;
        boolean z0, $z1;
        javax.jmdns.impl.DNSIncoming $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.jmdns.impl.DNSQuestion r6;
        java.util.logging.Logger $r7;
        java.util.logging.Level $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        javax.jmdns.impl.JmDNSImpl $r11;
        int i0, $i2;
        long $l1;
        java.util.Random $r12;

        r0 := @this: javax.jmdns.impl.tasks.Responder;

        $r1 := @parameter0: java.util.Timer;

        z0 = 1;

        $r2 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming: java.util.Collection getQuestions()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.impl.DNSQuestion) $r5;

        $r7 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if z0 == 0 goto label2;

        $r7 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start() question=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void finest(java.lang.String)>($r10);

     label2:
        $r11 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z1 = virtualinvoke r6.<javax.jmdns.impl.DNSQuestion: boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl)>($r11);

        z0 = $z1;

        if $z1 != 0 goto label1;

     label3:
        if z0 == 0 goto label7;

        $r2 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        z0 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming: boolean isTruncated()>();

        if z0 != 0 goto label7;

        i0 = 0;

     label4:
        if i0 >= 0 goto label5;

        i0 = 0;

     label5:
        $r7 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if z0 == 0 goto label6;

        $r7 = <javax.jmdns.impl.tasks.Responder: java.util.logging.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start() Responder chosen delay=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void finest(java.lang.String)>($r10);

     label6:
        $r11 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        z0 = virtualinvoke $r11.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if z0 != 0 goto label8;

        $r11 = virtualinvoke r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.JmDNSImpl getDns()>();

        z0 = virtualinvoke $r11.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if z0 != 0 goto label8;

        $l1 = (long) i0;

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long)>(r0, $l1);

        return;

     label7:
        $r12 = staticinvoke <javax.jmdns.impl.JmDNSImpl: java.util.Random getRandom()>();

        i0 = virtualinvoke $r12.<java.util.Random: int nextInt(int)>(96);

        i0 = i0 + 20;

        $r2 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $i2 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming: int elapseSinceArrival()>();

        i0 = i0 - $i2;

        goto label4;

     label8:
        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.tasks.Responder r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        javax.jmdns.impl.DNSIncoming $r3;

        r0 := @this: javax.jmdns.impl.tasks.Responder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" incomming: ");

        $r3 = r0.<javax.jmdns.impl.tasks.Responder: javax.jmdns.impl.DNSIncoming _in>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
