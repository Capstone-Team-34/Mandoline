javax.jmdns.impl.tasks.resolver.ServiceResolver extends javax.jmdns.impl.tasks.resolver.DNSResolverTask
private final java.lang.String _type
    public void <init>(javax.jmdns.impl.JmDNSImpl, java.lang.String)
    {
        javax.jmdns.impl.tasks.resolver.ServiceResolver r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.lang.String $r2;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceResolver;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: java.lang.String _type> = $r2;

        return;
    }
    protected javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.resolver.ServiceResolver r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        long $l0;
        javax.jmdns.impl.JmDNSImpl $r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        javax.jmdns.ServiceInfo r8;
        javax.jmdns.impl.DNSRecord$Pointer $r9;
        java.lang.String $r10, $r11;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceResolver;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.ServiceInfo) $r7;

        $r9 = new javax.jmdns.impl.DNSRecord$Pointer;

        $r10 = virtualinvoke r8.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r2 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r11 = virtualinvoke r8.<javax.jmdns.ServiceInfo: java.lang.String getQualifiedName()>();

        specialinvoke $r9.<javax.jmdns.impl.DNSRecord$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String)>($r10, $r2, 0, 3600, $r11);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long)>($r1, $r9, $l0);

        goto label1;

     label2:
        return $r1;
    }
    protected javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.resolver.ServiceResolver r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        java.lang.String $r4;
        javax.jmdns.impl.DNSQuestion $r5;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceResolver;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r4 = r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: java.lang.String _type>;

        $r2 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_PTR>;

        $r3 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r5 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r4, $r2, $r3, 0);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>($r1, $r5);

        return $r1;
    }
    protected java.lang.String description()
    {
        javax.jmdns.impl.tasks.resolver.ServiceResolver r0;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceResolver;

        return "querying service";
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.tasks.resolver.ServiceResolver r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceResolver;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServiceResolver(");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "";

        goto label1;
    }
