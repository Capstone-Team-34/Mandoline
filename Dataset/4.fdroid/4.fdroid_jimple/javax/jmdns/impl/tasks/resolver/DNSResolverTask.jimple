javax.jmdns.impl.tasks.resolver.DNSResolverTask extends javax.jmdns.impl.tasks.DNSTask
private static java.util.logging.Logger logger
protected int _count
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/tasks/resolver/DNSResolverTask;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.tasks.resolver.DNSResolverTask r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.tasks.resolver.DNSResolverTask;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: int _count> = 0;

        return;
    }
protected abstract javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException { 
// no body
} 
protected abstract javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException { 
// no body
} 
protected abstract java.lang.String description() { 
// no body
} 
    public void run()
    {
        javax.jmdns.impl.tasks.resolver.DNSResolverTask r0;
        java.lang.Throwable r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        boolean $z0;
        int $i0, $i1;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        javax.jmdns.impl.DNSOutgoing r7, r8;

        r0 := @this: javax.jmdns.impl.tasks.resolver.DNSResolverTask;

     label01:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

     label04:
        if $z0 == 0 goto label07;

     label05:
        virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: boolean cancel()>();

     label06:
        return;

     label07:
        $i0 = r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: int _count>;

     label08:
        $i1 = $i0 + 1;

     label09:
        r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: int _count> = $i1;

     label10:
        if $i0 >= 3 goto label25;

     label11:
        $r3 = <javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

     label12:
        if $z0 == 0 goto label14;

     label13:
        $r3 = <javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.util.logging.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS ");

        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.lang.String description()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void finer(java.lang.String)>($r6);

     label14:
        r7 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke r7.<javax.jmdns.impl.DNSOutgoing: void <init>(int)>(0);

        r7 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing)>(r7);

     label15:
        r8 = r7;

     label16:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isAnnounced()>();

     label17:
        if $z0 == 0 goto label20;

     label18:
        r7 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing)>(r7);

     label19:
        r8 = r7;

     label20:
        $z0 = virtualinvoke r8.<javax.jmdns.impl.DNSOutgoing: boolean isEmpty()>();

     label21:
        if $z0 != 0 goto label26;

     label22:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>(r8);

     label23:
        return;

     label24:
        r1 := @caughtexception;

        $r3 = <javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() exception ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r6, r1);

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void recover()>();

        return;

     label25:
        virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: boolean cancel()>();

     label26:
        return;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label15 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }
    public void start(java.util.Timer)
    {
        javax.jmdns.impl.tasks.resolver.DNSResolverTask r0;
        java.util.Timer $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.tasks.resolver.DNSResolverTask;

        $r1 := @parameter0: java.util.Timer;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceling()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: boolean isCanceled()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>(r0, 225L, 225L);

     label1:
        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.tasks.resolver.DNSResolverTask r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javax.jmdns.impl.tasks.resolver.DNSResolverTask;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count: ");

        $i0 = r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: int _count>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
