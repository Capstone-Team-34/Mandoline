javax.jmdns.impl.tasks.resolver.ServiceInfoResolver extends javax.jmdns.impl.tasks.resolver.DNSResolverTask
private final javax.jmdns.impl.ServiceInfoImpl _info
    public void <init>(javax.jmdns.impl.JmDNSImpl, javax.jmdns.impl.ServiceInfoImpl)
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.ServiceInfoImpl $r2;
        javax.jmdns.impl.constants.DNSRecordType $r3;
        javax.jmdns.impl.constants.DNSRecordClass $r4;
        java.lang.String $r5;
        javax.jmdns.impl.DNSQuestion $r6;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter1: javax.jmdns.impl.ServiceInfoImpl;

        specialinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info> = $r2;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>($r1);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r3 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_ANY>;

        $r4 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r5, $r3, $r4, 0);

        virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: void addListener(javax.jmdns.impl.DNSListener,javax.jmdns.impl.DNSQuestion)>($r2, $r6);

        return;
    }
    protected javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        javax.jmdns.impl.DNSOutgoing $r1, r10;
        javax.jmdns.impl.ServiceInfoImpl $r2;
        boolean $z0;
        long $l0;
        javax.jmdns.impl.JmDNSImpl $r3;
        javax.jmdns.impl.DNSCache $r4;
        java.lang.String $r5;
        javax.jmdns.impl.constants.DNSRecordType $r6;
        javax.jmdns.impl.constants.DNSRecordClass $r7;
        javax.jmdns.impl.DNSEntry $r8;
        javax.jmdns.impl.DNSRecord $r9;
        int $i1;
        java.util.Collection $r11;
        java.util.Iterator $r12;
        java.lang.Object $r13;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: boolean hasData()>();

        if $z0 != 0 goto label4;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r8 = virtualinvoke $r4.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r5, $r6, $r7);

        $r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long)>($r1, $r9, $l0);

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_TXT>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r8 = virtualinvoke $r4.<javax.jmdns.impl.DNSCache: javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r5, $r6, $r7);

        $r9 = (javax.jmdns.impl.DNSRecord) $r8;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long)>($r1, $r9, $l0);

        r10 = $r1;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 <= 0 goto label4;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_A>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r11 = virtualinvoke $r4.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r5, $r6, $r7);

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (javax.jmdns.impl.DNSEntry) $r13;

        $r9 = (javax.jmdns.impl.DNSRecord) $r8;

        r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long)>(r10, $r9, $l0);

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r5 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA>;

        $r7 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r11 = virtualinvoke $r4.<javax.jmdns.impl.DNSCache: java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass)>($r5, $r6, $r7);

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (javax.jmdns.impl.DNSEntry) $r13;

        $r9 = (javax.jmdns.impl.DNSRecord) $r8;

        r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long)>(r10, $r9, $l0);

        goto label3;

     label4:
        return $r1;

     label5:
        return r10;
    }
    protected javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.ServiceInfoImpl $r2;
        boolean $z0;
        java.lang.String $r3;
        javax.jmdns.impl.constants.DNSRecordType $r4;
        javax.jmdns.impl.constants.DNSRecordClass $r5;
        javax.jmdns.impl.DNSQuestion $r6;
        int $i0;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: boolean hasData()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_SRV>;

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r3, $r4, $r5, 0);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>($r1, $r6);

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_TXT>;

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r3, $r4, $r5, 0);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>($r1, $r6);

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_A>;

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r3, $r4, $r5, 0);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>($r1, $r6);

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getServer()>();

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA>;

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r3, $r4, $r5, 0);

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion)>($r1, $r6);

     label1:
        return $r1;
    }
    public boolean cancel()
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        javax.jmdns.impl.ServiceInfoImpl $r1;
        boolean $z0, $z1;
        javax.jmdns.impl.JmDNSImpl $r2;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $z0 = specialinvoke r0.<javax.jmdns.impl.tasks.resolver.DNSResolverTask: boolean cancel()>();

        $r1 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $z1 = virtualinvoke $r1.<javax.jmdns.impl.ServiceInfoImpl: boolean isPersistent()>();

        if $z1 != 0 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r1 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void removeListener(javax.jmdns.impl.DNSListener)>($r1);

     label1:
        return $z0;
    }
    protected java.lang.String description()
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.ServiceInfoImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("querying service info: ");

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        if $r2 == null goto label2;

        $r2 = r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.ServiceInfoImpl _info>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "null";

        goto label1;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.tasks.resolver.ServiceInfoResolver r0;
        java.lang.StringBuilder $r1;
        javax.jmdns.impl.JmDNSImpl $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.tasks.resolver.ServiceInfoResolver;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServiceInfoResolver(");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.resolver.ServiceInfoResolver: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = "";

        goto label1;
    }
