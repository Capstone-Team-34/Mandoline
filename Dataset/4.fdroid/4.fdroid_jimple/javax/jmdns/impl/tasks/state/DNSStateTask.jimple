javax.jmdns.impl.tasks.state.DNSStateTask extends javax.jmdns.impl.tasks.DNSTask
private static int _defaultTTL
static java.util.logging.Logger logger1
private javax.jmdns.impl.constants.DNSState _taskState
private final int _ttl
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/tasks/state/DNSStateTask;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.tasks.state.DNSStateTask: java.util.logging.Logger logger1> = $r2;

        <javax.jmdns.impl.tasks.state.DNSStateTask: int _defaultTTL> = 3600;

        return;
    }
    public void <init>(javax.jmdns.impl.JmDNSImpl, int)
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $i0 := @parameter1: int;

        specialinvoke r0.<javax.jmdns.impl.tasks.DNSTask: void <init>(javax.jmdns.impl.JmDNSImpl)>($r1);

        r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState _taskState> = null;

        r0.<javax.jmdns.impl.tasks.state.DNSStateTask: int _ttl> = $i0;

        return;
    }
    public static int defaultTTL()
    {
        int i0;

        i0 = <javax.jmdns.impl.tasks.state.DNSStateTask: int _defaultTTL>;

        return i0;
    }
    protected void advanceObjectsState(java.util.List)
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        java.util.List r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        javax.jmdns.impl.DNSStatefulObject r4;
        java.lang.Throwable $r5;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        r1 := @parameter0: java.util.List;

        if r1 == null goto label6;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.jmdns.impl.DNSStatefulObject) $r3;

        entermonitor r4;

     label2:
        interfaceinvoke r4.<javax.jmdns.impl.DNSStatefulObject: boolean advanceState(javax.jmdns.impl.tasks.DNSTask)>(r0);

        exitmonitor r4;

     label3:
        goto label1;

     label4:
        $r5 := @caughtexception;

        exitmonitor r4;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
protected abstract void advanceTask() { 
// no body
} 
    protected void associate(javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        javax.jmdns.impl.constants.DNSState $r1;
        javax.jmdns.impl.JmDNSImpl $r2, $r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        javax.jmdns.ServiceInfo r8;
        javax.jmdns.impl.ServiceInfoImpl r9;
        java.lang.Throwable $r10;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSState;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r3.<javax.jmdns.impl.JmDNSImpl: void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>(r0, $r1);

        exitmonitor $r2;

     label2:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r4 = virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.ServiceInfo) $r7;

        r9 = (javax.jmdns.impl.ServiceInfoImpl) r8;

        virtualinvoke r9.<javax.jmdns.impl.ServiceInfoImpl: void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>(r0, $r1);

        goto label3;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor $r2;

     label6:
        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
protected abstract javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) throws java.io.IOException { 
// no body
} 
protected abstract javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl, javax.jmdns.impl.DNSOutgoing) throws java.io.IOException { 
// no body
} 
protected abstract boolean checkRunCondition() { 
// no body
} 
protected abstract javax.jmdns.impl.DNSOutgoing createOugoing() { 
// no body
} 
    public int getTTL()
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        int i0;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        i0 = r0.<javax.jmdns.impl.tasks.state.DNSStateTask: int _ttl>;

        return i0;
    }
public abstract java.lang.String getTaskDescription() { 
// no body
} 
    protected javax.jmdns.impl.constants.DNSState getTaskState()
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        javax.jmdns.impl.constants.DNSState r1;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        r1 = r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState _taskState>;

        return r1;
    }
protected abstract void recoverTask(java.lang.Throwable) { 
// no body
} 
    protected void removeAssociation()
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        javax.jmdns.impl.JmDNSImpl $r1, $r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        javax.jmdns.ServiceInfo r7;
        javax.jmdns.impl.ServiceInfoImpl r8;
        java.lang.Throwable $r9;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r2.<javax.jmdns.impl.JmDNSImpl: void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)>(r0);

        exitmonitor $r1;

     label2:
        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.ServiceInfo) $r6;

        r8 = (javax.jmdns.impl.ServiceInfoImpl) r7;

        virtualinvoke r8.<javax.jmdns.impl.ServiceInfoImpl: void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)>(r0);

        goto label3;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public void run()
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        java.lang.Throwable r1, $r17, $r19;
        java.util.ArrayList r2;
        javax.jmdns.impl.DNSOutgoing $r3, r4;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r5, $r6;
        javax.jmdns.impl.constants.DNSState $r7;
        java.util.logging.Logger $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.util.Map $r11;
        java.util.Collection $r12;
        java.util.Iterator $r13;
        java.lang.Object $r14;
        javax.jmdns.ServiceInfo r15;
        javax.jmdns.impl.ServiceInfoImpl $r16;
        java.util.logging.Level $r18;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.DNSOutgoing createOugoing()>();

        r4 = $r3;

     label01:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: boolean checkRunCondition()>();

     label02:
        if $z0 != 0 goto label05;

     label03:
        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: boolean cancel()>();

     label04:
        return;

     label05:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        entermonitor $r5;

     label06:
        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r7 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $z0 = virtualinvoke $r6.<javax.jmdns.impl.JmDNSImpl: boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>(r0, $r7);

        if $z0 == 0 goto label07;

        $r8 = <javax.jmdns.impl.tasks.state.DNSStateTask: java.util.logging.Logger logger1>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS ");

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getTaskDescription()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r10 = virtualinvoke $r6.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void finer(java.lang.String)>($r10);

        $r6 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing)>($r3);

     label07:
        exitmonitor $r5;

     label08:
        $r5 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        $r11 = virtualinvoke $r5.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 == 0 goto label22;

     label11:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (javax.jmdns.ServiceInfo) $r14;

        $r16 = (javax.jmdns.impl.ServiceInfoImpl) r15;

        entermonitor $r16;

     label12:
        $r7 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $z0 = virtualinvoke $r16.<javax.jmdns.impl.ServiceInfoImpl: boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>(r0, $r7);

        if $z0 == 0 goto label13;

        $r8 = <javax.jmdns.impl.tasks.state.DNSStateTask: java.util.logging.Logger logger1>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS ");

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getTaskDescription()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r16.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void fine(java.lang.String)>($r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        r4 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing)>($r16, r4);

     label13:
        exitmonitor $r16;

     label14:
        goto label09;

     label15:
        $r17 := @caughtexception;

        exitmonitor $r16;

     label16:
        throw $r17;

     label17:
        r1 := @caughtexception;

        $r8 = <javax.jmdns.impl.tasks.state.DNSStateTask: java.util.logging.Logger logger1>;

        $r18 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() exception ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r18, $r10, r1);

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: void recoverTask(java.lang.Throwable)>(r1);

     label18:
        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: void advanceTask()>();

        return;

     label19:
        $r19 := @caughtexception;

     label20:
        exitmonitor $r5;

     label21:
        throw $r19;

     label22:
        $z0 = virtualinvoke r4.<javax.jmdns.impl.DNSOutgoing: boolean isEmpty()>();

     label23:
        if $z0 != 0 goto label26;

     label24:
        $r8 = <javax.jmdns.impl.tasks.state.DNSStateTask: java.util.logging.Logger logger1>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".run() JmDNS ");

        $r10 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: java.lang.String getTaskDescription()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #");

        $r7 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState getTaskState()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void finer(java.lang.String)>($r10);

        $r5 = virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.JmDNSImpl getDns()>();

        virtualinvoke $r5.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>(r4);

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: void advanceObjectsState(java.util.List)>(r2);

     label25:
        goto label18;

     label26:
        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: void advanceObjectsState(java.util.List)>(r2);

        virtualinvoke r0.<javax.jmdns.impl.tasks.state.DNSStateTask: boolean cancel()>();

     label27:
        return;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label08 with label19;
        catch java.lang.Throwable from label08 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label23 with label17;
        catch java.lang.Throwable from label24 to label25 with label17;
        catch java.lang.Throwable from label26 to label27 with label17;
    }
    protected void setTaskState(javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.tasks.state.DNSStateTask r0;
        javax.jmdns.impl.constants.DNSState $r1;

        r0 := @this: javax.jmdns.impl.tasks.state.DNSStateTask;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSState;

        r0.<javax.jmdns.impl.tasks.state.DNSStateTask: javax.jmdns.impl.constants.DNSState _taskState> = $r1;

        return;
    }
