javax.jmdns.impl.tasks.DNSTask extends java.util.TimerTask
private final javax.jmdns.impl.JmDNSImpl _jmDNSImpl
    protected void <init>(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        specialinvoke r0.<java.util.TimerTask: void <init>()>();

        r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl> = $r1;

        return;
    }
    public javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing, javax.jmdns.impl.DNSIncoming, javax.jmdns.impl.DNSRecord) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.DNSIncoming $r2;
        javax.jmdns.impl.DNSRecord $r3;
        java.io.IOException r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r5;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 := @parameter1: javax.jmdns.impl.DNSIncoming;

        $r3 := @parameter2: javax.jmdns.impl.DNSRecord;

     label1:
        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r2, $r3);

     label2:
        return $r1;

     label3:
        r4 := @caughtexception;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: boolean isMulticast()>();

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getMaxUDPPayload()>();

        $i2 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        $i3 = $i0 | 512;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setFlags(int)>($i3);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i2);

        $r5 = r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        virtualinvoke $r5.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>($r1);

        $r1 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>($i0, $z0, $i1);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord)>($r2, $r3);

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing, javax.jmdns.impl.DNSRecord, long) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.DNSRecord $r2;
        long $l0;
        java.io.IOException r3;
        int $i1, $i2, $i3, $i4;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r4;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 := @parameter1: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter2: long;

     label1:
        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSRecord,long)>($r2, $l0);

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: boolean isMulticast()>();

        $i2 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getMaxUDPPayload()>();

        $i3 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        $i4 = $i1 | 512;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setFlags(int)>($i4);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i3);

        $r4 = r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>($r1);

        $r1 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>($i1, $z0, $i2);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSRecord,long)>($r2, $l0);

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public javax.jmdns.impl.DNSOutgoing addAuthoritativeAnswer(javax.jmdns.impl.DNSOutgoing, javax.jmdns.impl.DNSRecord) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.DNSRecord $r2;
        java.io.IOException r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r4;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 := @parameter1: javax.jmdns.impl.DNSRecord;

     label1:
        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord)>($r2);

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: boolean isMulticast()>();

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getMaxUDPPayload()>();

        $i2 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        $i3 = $i0 | 512;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setFlags(int)>($i3);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i2);

        $r4 = r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>($r1);

        $r1 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>($i0, $z0, $i1);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord)>($r2);

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing, javax.jmdns.impl.DNSQuestion) throws java.io.IOException
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.DNSOutgoing $r1;
        javax.jmdns.impl.DNSQuestion $r2;
        java.io.IOException r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        javax.jmdns.impl.JmDNSImpl $r4;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing;

        $r2 := @parameter1: javax.jmdns.impl.DNSQuestion;

     label1:
        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addQuestion(javax.jmdns.impl.DNSQuestion)>($r2);

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: boolean isMulticast()>();

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getMaxUDPPayload()>();

        $i2 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        $i3 = $i0 | 512;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setFlags(int)>($i3);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void setId(int)>($i2);

        $r4 = r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        virtualinvoke $r4.<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>($r1);

        $r1 = new javax.jmdns.impl.DNSOutgoing;

        specialinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>($i0, $z0, $i1);

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing: void addQuestion(javax.jmdns.impl.DNSQuestion)>($r2);

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public javax.jmdns.impl.JmDNSImpl getDns()
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        javax.jmdns.impl.JmDNSImpl r1;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        r1 = r0.<javax.jmdns.impl.tasks.DNSTask: javax.jmdns.impl.JmDNSImpl _jmDNSImpl>;

        return r1;
    }
public abstract java.lang.String getName() { 
// no body
} 
    public java.lang.String toString()
    {
        javax.jmdns.impl.tasks.DNSTask r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.tasks.DNSTask;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.tasks.DNSTask: java.lang.String getName()>();

        return $r1;
    }
