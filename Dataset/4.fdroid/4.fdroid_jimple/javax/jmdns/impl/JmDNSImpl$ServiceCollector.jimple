javax.jmdns.impl.JmDNSImpl$ServiceCollector extends java.lang.Object implements javax.jmdns.ServiceListener
private final java.util.concurrent.ConcurrentMap _events
private final java.util.concurrent.ConcurrentMap _infos
private volatile boolean _needToWaitForInfos
private final java.lang.String _type
    public void <init>(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos> = $r2;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events> = $r2;

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.lang.String _type> = $r1;

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: boolean _needToWaitForInfos> = 1;

        return;
    }
    public javax.jmdns.ServiceInfo[] list(long)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        long $l0, $l3;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;
        byte $b1;
        int i2;
        java.util.Collection $r2;
        javax.jmdns.ServiceInfo[] $r3;
        java.lang.Object[] $r4;
        java.lang.InterruptedException $r5;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        $l0 := @parameter0: long;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z0 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: boolean _needToWaitForInfos>;

        if $z0 == 0 goto label6;

     label1:
        $l0 = $l0 / 200L;

        $b1 = $l0 cmp 1L;

        if $b1 >= 0 goto label2;

        $l0 = 1L;

     label2:
        i2 = 0;

     label3:
        $l3 = (long) i2;

        $b1 = $l3 cmp $l0;

        if $b1 >= 0 goto label6;

     label4:
        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

     label5:
        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $z0 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: boolean _needToWaitForInfos>;

        if $z0 != 0 goto label7;

     label6:
        r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: boolean _needToWaitForInfos> = 0;

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        i2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();

        $r3 = newarray (javax.jmdns.ServiceInfo)[i2];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (javax.jmdns.ServiceInfo[]) $r4;

        return $r3;

     label7:
        i2 = i2 + 1;

        goto label3;

     label8:
        $r5 := @caughtexception;

        goto label5;

        catch java.lang.InterruptedException from label4 to label5 with label8;
    }
    public void serviceAdded(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        javax.jmdns.ServiceEvent $r1;
        javax.jmdns.ServiceInfo $r2;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.String $r4, $r7, $r8;
        javax.jmdns.JmDNS $r5;
        javax.jmdns.impl.JmDNSImpl $r6;
        javax.jmdns.impl.ServiceInfoImpl $r9;
        java.lang.Throwable $r10;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        entermonitor r0;

     label01:
        $r2 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        if $r2 == null goto label04;

        $z0 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: boolean hasData()>();

        if $z0 == 0 goto label04;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

     label02:
        exitmonitor r0;

     label03:
        return;

     label04:
        if $r2 == null goto label08;

        $r4 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getSubtype()>();

     label05:
        $r5 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.JmDNS getDNS()>();

        $r6 = (javax.jmdns.impl.JmDNSImpl) $r5;

        $r7 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getType()>();

        $r8 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String,java.lang.String,java.lang.String,boolean)>($r7, $r8, $r4, 1);

        if $r9 == null goto label09;

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

        goto label02;

     label06:
        $r10 := @caughtexception;

        exitmonitor r0;

     label07:
        throw $r10;

     label08:
        $r4 = "";

        goto label05;

     label09:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

     label10:
        goto label02;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label07 with label06;
        catch java.lang.Throwable from label08 to label10 with label06;
    }
    public void serviceRemoved(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        javax.jmdns.ServiceEvent $r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        entermonitor r0;

     label1:
        $r2 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void serviceResolved(javax.jmdns.ServiceEvent)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        javax.jmdns.ServiceEvent $r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.String $r3;
        javax.jmdns.ServiceInfo $r4;
        java.lang.Throwable $r5;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        $r1 := @parameter0: javax.jmdns.ServiceEvent;

        entermonitor r0;

     label1:
        $r2 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: javax.jmdns.ServiceInfo getInfo()>();

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $r3 = virtualinvoke $r1.<javax.jmdns.ServiceEvent: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.JmDNSImpl$ServiceCollector r0;
        java.lang.StringBuffer r1;
        java.lang.String $r2;
        java.util.concurrent.ConcurrentMap $r3;
        boolean $z0;
        java.util.Set $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceCollector;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tType: ");

        $r2 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.lang.String _type>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tNo services collected.");

     label1:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tNo event queued.");

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tServices");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\tService: ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _infos>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        goto label4;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tEvents");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\tEvent: ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceCollector: java.util.concurrent.ConcurrentMap _events>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        goto label6;
    }
