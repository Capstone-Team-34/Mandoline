javax.jmdns.impl.DNSIncoming extends javax.jmdns.impl.DNSMessage
public static boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET
private static final char[] _nibbleToHex
private static java.util.logging.Logger logger
private final javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream
private final java.net.DatagramPacket _packet
private final long _receivedTime
private int _senderUDPPayload
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        char[] $r3;

        $r0 = class "Ljavax/jmdns/impl/DNSIncoming;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger> = $r2;

        <javax.jmdns.impl.DNSIncoming: boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET> = 1;

        $r3 = newarray (char)[16];

        $r3[0] = 48;

        $r3[1] = 49;

        $r3[2] = 50;

        $r3[3] = 51;

        $r3[4] = 52;

        $r3[5] = 53;

        $r3[6] = 54;

        $r3[7] = 55;

        $r3[8] = 56;

        $r3[9] = 57;

        $r3[10] = 65;

        $r3[11] = 66;

        $r3[12] = 67;

        $r3[13] = 68;

        $r3[14] = 69;

        $r3[15] = 70;

        <javax.jmdns.impl.DNSIncoming: char[] _nibbleToHex> = $r3;

        return;
    }
    private void <init>(int, int, boolean, java.net.DatagramPacket, long)
    {
        javax.jmdns.impl.DNSIncoming r0;
        int $i0, $i1;
        boolean $z0;
        java.net.DatagramPacket $r1;
        long $l2;
        javax.jmdns.impl.DNSIncoming$MessageInputStream $r2;
        byte[] $r3;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: java.net.DatagramPacket;

        $l2 := @parameter4: long;

        specialinvoke r0.<javax.jmdns.impl.DNSMessage: void <init>(int,int,boolean)>($i0, $i1, $z0);

        r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet> = $r1;

        $r2 = new javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>();

        $i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>();

        specialinvoke $r2.<javax.jmdns.impl.DNSIncoming$MessageInputStream: void <init>(byte[],int)>($r3, $i0);

        r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream> = $r2;

        r0.<javax.jmdns.impl.DNSIncoming: long _receivedTime> = $l2;

        return;
    }
    public void <init>(java.net.DatagramPacket) throws java.io.IOException
    {
        javax.jmdns.impl.DNSIncoming r0;
        java.net.DatagramPacket $r1;
        java.lang.Exception r2;
        java.io.IOException r3;
        int $i0, $i1, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.net.InetAddress $r4;
        javax.jmdns.impl.DNSIncoming$MessageInputStream $r5;
        byte[] $r6;
        long $l2;
        java.util.logging.Logger $r7;
        java.util.logging.Level $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.util.List $r11;
        javax.jmdns.impl.DNSQuestion $r12;
        javax.jmdns.impl.DNSRecord $r13;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $r1 := @parameter0: java.net.DatagramPacket;

        $i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>();

        $i1 = <javax.jmdns.impl.constants.DNSConstants: int MDNS_PORT>;

        if $i0 != $i1 goto label06;

        $z0 = 1;

     label01:
        specialinvoke r0.<javax.jmdns.impl.DNSMessage: void <init>(int,int,boolean)>(0, 0, $z0);

        r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet> = $r1;

        $r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r5 = new javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>();

        $i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>();

        specialinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: void <init>(byte[],int)>($r6, $i0);

        r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream> = $r5;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<javax.jmdns.impl.DNSIncoming: long _receivedTime> = $l2;

        r0.<javax.jmdns.impl.DNSIncoming: int _senderUDPPayload> = 1460;

     label02:
        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: void setId(int)>($i0);

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: void setFlags(int)>($i0);

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getOperationCode()>();

     label03:
        if $i0 <= 0 goto label07;

        r3 = new java.io.IOException;

     label04:
        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("Received a message with a non standard operation code. Currently unsupported in the specification.");

        throw r3;

     label05:
        r2 := @caughtexception;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DNSIncoming() dump ");

        $r10 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n exception ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, $r10, r2);

        r3 = new java.io.IOException;

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("DNSIncoming corrupted message");

        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);

        throw r3;

     label06:
        $z0 = 0;

        goto label01;

     label07:
        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i3 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i4 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i1 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

     label08:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINER>;

     label09:
        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

     label10:
        if $z0 == 0 goto label12;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r9 = new java.lang.StringBuilder;

     label11:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DNSIncoming() questions:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" answers:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authorities:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" additionals:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void finer(java.lang.String)>($r10);

     label12:
        $i5 = $i3 * 5;

        $i6 = $i4 + $i1;

        $i6 = $i6 + $i0;

        $i6 = $i6 * 11;

        $i5 = $i5 + $i6;

     label13:
        $i6 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>();

     label14:
        if $i5 <= $i6 goto label16;

        r3 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

     label15:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("questions:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" answers:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authorities:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" additionals:");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw r3;

     label16:
        if $i3 <= 0 goto label20;

        $i5 = 0;

     label17:
        if $i5 >= $i3 goto label20;

     label18:
        $r11 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _questions>;

        $r12 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSQuestion readQuestion()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

     label19:
        $i5 = $i5 + 1;

        goto label17;

     label20:
        if $i4 <= 0 goto label26;

        $i3 = 0;

     label21:
        if $i3 >= $i4 goto label26;

     label22:
        $r13 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress)>($r4);

     label23:
        if $r13 == null goto label25;

     label24:
        $r11 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _answers>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

     label25:
        $i3 = $i3 + 1;

        goto label21;

     label26:
        if $i1 <= 0 goto label32;

        $i4 = 0;

     label27:
        if $i4 >= $i1 goto label32;

     label28:
        $r13 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress)>($r4);

     label29:
        if $r13 == null goto label31;

     label30:
        $r11 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _authoritativeAnswers>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

     label31:
        $i4 = $i4 + 1;

        goto label27;

     label32:
        if $i0 <= 0 goto label38;

        $i1 = 0;

     label33:
        if $i1 >= $i0 goto label38;

     label34:
        $r13 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress)>($r4);

     label35:
        if $r13 == null goto label37;

     label36:
        $r11 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _additionals>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

     label37:
        $i1 = $i1 + 1;

        goto label33;

     label38:
        $r5 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r5.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int available()>();

     label39:
        if $i0 <= 0 goto label41;

        r3 = new java.io.IOException;

     label40:
        specialinvoke r3.<java.io.IOException: void <init>(java.lang.String)>("Received a message with the wrong length.");

        throw r3;

     label41:
        return;

        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Exception from label04 to label05 with label05;
        catch java.lang.Exception from label07 to label08 with label05;
        catch java.lang.Exception from label09 to label10 with label05;
        catch java.lang.Exception from label11 to label12 with label05;
        catch java.lang.Exception from label13 to label14 with label05;
        catch java.lang.Exception from label15 to label16 with label05;
        catch java.lang.Exception from label18 to label19 with label05;
        catch java.lang.Exception from label22 to label23 with label05;
        catch java.lang.Exception from label24 to label25 with label05;
        catch java.lang.Exception from label28 to label29 with label05;
        catch java.lang.Exception from label30 to label31 with label05;
        catch java.lang.Exception from label34 to label35 with label05;
        catch java.lang.Exception from label36 to label37 with label05;
        catch java.lang.Exception from label38 to label39 with label05;
        catch java.lang.Exception from label40 to label41 with label05;
    }
    private java.lang.String _hexString(byte[])
    {
        javax.jmdns.impl.DNSIncoming r0;
        byte[] $r1;
        int i0, $i1, $i3;
        java.lang.StringBuilder r2;
        java.lang.String $r3;
        byte $b2;
        char[] $r4;
        char $c4;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $r1 := @parameter0: byte[];

        r2 = new java.lang.StringBuilder;

        $i1 = lengthof $r1;

        $i1 = $i1 * 2;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = 0;

     label1:
        i0 = lengthof $r1;

        if $i1 >= i0 goto label2;

        $b2 = $r1[$i1];

        i0 = $b2 & 255;

        $r4 = <javax.jmdns.impl.DNSIncoming: char[] _nibbleToHex>;

        $i3 = i0 / 16;

        $c4 = $r4[$i3];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r4 = <javax.jmdns.impl.DNSIncoming: char[] _nibbleToHex>;

        i0 = i0 % 16;

        $c4 = $r4[i0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    private javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress)
    {
        javax.jmdns.impl.DNSIncoming r0;
        java.net.InetAddress $r1;
        java.lang.StringBuilder r2, $r23, $r33;
        int i0, $i1, $i2, $i3;
        javax.jmdns.impl.DNSIncoming$MessageInputStream $r3;
        java.lang.String $r4, $r9, $r15;
        javax.jmdns.impl.constants.DNSRecordType $r5, $r6;
        java.util.logging.Logger $r7;
        java.util.logging.Level $r8;
        javax.jmdns.impl.constants.DNSRecordClass r10, $r11;
        boolean $z0, $z1;
        java.lang.Object r12;
        int[] $r13;
        long $l4;
        byte[] $r14, r18, r19, r20, $r21, $r22;
        javax.jmdns.impl.constants.DNSResultCode $r16;
        javax.jmdns.impl.constants.DNSOptionCode $r17;
        byte $b5;
        java.lang.Exception r24, r25, r26;
        javax.jmdns.impl.DNSRecord$IPv4Address $r27;
        javax.jmdns.impl.DNSRecord$IPv6Address $r28;
        javax.jmdns.impl.DNSRecord$Pointer $r29;
        javax.jmdns.impl.DNSRecord$Text $r30;
        javax.jmdns.impl.DNSRecord$Service $r31;
        javax.jmdns.impl.DNSRecord$HostInformation $r32;
        javax.jmdns.impl.DNSRecord $r34;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $r1 := @parameter0: java.net.InetAddress;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readName()>();

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        i0 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r5 = staticinvoke <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType typeForIndex(int)>(i0);

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE>;

        if $r5 != $r6 goto label01;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find record type. domain: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r9);

     label01:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i1 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_OPT>;

        if $r5 != $r6 goto label07;

        r10 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

     label02:
        $r11 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        if r10 != $r11 goto label03;

        $r6 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_OPT>;

        if $r5 == $r6 goto label03;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find record class. domain: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r9);

     label03:
        $z0 = virtualinvoke r10.<javax.jmdns.impl.constants.DNSRecordClass: boolean isUnique(int)>($i1);

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        i0 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readInt()>();

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i2 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        r12 = null;

        $r13 = <javax.jmdns.impl.DNSIncoming$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType>;

        $i3 = virtualinvoke $r5.<javax.jmdns.impl.constants.DNSRecordType: int ordinal()>();

        $i3 = $r13[$i3];

        lookupswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label12;
            case 6: goto label13;
            case 7: goto label16;
            case 8: goto label21;
            default: goto label04;
        };

     label04:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z0 == 0 goto label05;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DNSIncoming() unknown type:");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void finer(java.lang.String)>($r4);

     label05:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $l4 = (long) $i2;

        virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: long skip(long)>($l4);

     label06:
        if r12 == null goto label60;

        $r34 = (javax.jmdns.impl.DNSRecord) r12;

        virtualinvoke $r34.<javax.jmdns.impl.DNSRecord: void setRecordSource(java.net.InetAddress)>($r1);

        $r34 = (javax.jmdns.impl.DNSRecord) r12;

        return $r34;

     label07:
        r10 = staticinvoke <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass classForIndex(int)>($i1);

        goto label02;

     label08:
        $r27 = new javax.jmdns.impl.DNSRecord$IPv4Address;

        r12 = $r27;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r14 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: byte[] readBytes(int)>($i2);

        specialinvoke $r27.<javax.jmdns.impl.DNSRecord$IPv4Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,byte[])>($r4, r10, $z0, i0, $r14);

        goto label06;

     label09:
        $r28 = new javax.jmdns.impl.DNSRecord$IPv6Address;

        r12 = $r28;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r14 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: byte[] readBytes(int)>($i2);

        specialinvoke $r28.<javax.jmdns.impl.DNSRecord$IPv6Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,byte[])>($r4, r10, $z0, i0, $r14);

        goto label06;

     label10:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r9 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readName()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 <= 0 goto label11;

        $r29 = new javax.jmdns.impl.DNSRecord$Pointer;

        r12 = $r29;

        specialinvoke $r29.<javax.jmdns.impl.DNSRecord$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String)>($r4, r10, $z0, i0, $r9);

        goto label06;

     label11:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PTR record of class: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", there was a problem reading the service name of the answer for domain:");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r4);

        goto label06;

     label12:
        $r30 = new javax.jmdns.impl.DNSRecord$Text;

        r12 = $r30;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r14 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: byte[] readBytes(int)>($i2);

        specialinvoke $r30.<javax.jmdns.impl.DNSRecord$Text: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,byte[])>($r4, r10, $z0, i0, $r14);

        goto label06;

     label13:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i1 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i2 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i3 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $z1 = <javax.jmdns.impl.DNSIncoming: boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET>;

        if $z1 == 0 goto label15;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r9 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readName()>();

     label14:
        $r31 = new javax.jmdns.impl.DNSRecord$Service;

        r12 = $r31;

        specialinvoke $r31.<javax.jmdns.impl.DNSRecord$Service: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,int,int,int,java.lang.String)>($r4, r10, $z0, i0, $i1, $i2, $i3, $r9);

        goto label06;

     label15:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r9 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readNonNameString()>();

        goto label14;

     label16:
        $r23 = new java.lang.StringBuilder;

        r2 = $r23;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r9 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readUTF(int)>($i2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $i1 = virtualinvoke $r23.<java.lang.StringBuilder: int indexOf(java.lang.String)>(" ");

        if $i1 <= 0 goto label19;

        $r9 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, $i1);

     label17:
        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        if $i1 <= 0 goto label20;

        $i1 = $i1 + 1;

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String substring(int)>($i1);

     label18:
        $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        $r32 = new javax.jmdns.impl.DNSRecord$HostInformation;

        r12 = $r32;

        specialinvoke $r32.<javax.jmdns.impl.DNSRecord$HostInformation: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String,java.lang.String)>($r4, r10, $z0, i0, $r9, $r15);

        goto label06;

     label19:
        $r9 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label17;

     label20:
        $r15 = "";

        goto label18;

     label21:
        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $r16 = staticinvoke <javax.jmdns.impl.constants.DNSResultCode: javax.jmdns.impl.constants.DNSResultCode resultCodeForFlags(int,int)>($i2, i0);

        i0 = 16711680 & i0;

        i0 = i0 >> 16;

        if i0 != 0 goto label55;

        r0.<javax.jmdns.impl.DNSIncoming: int _senderUDPPayload> = $i1;

     label22:
        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        i0 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int available()>();

        if i0 <= 0 goto label06;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        i0 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int available()>();

        if i0 < 2 goto label46;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        i0 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r17 = staticinvoke <javax.jmdns.impl.constants.DNSOptionCode: javax.jmdns.impl.constants.DNSOptionCode resultCodeForFlags(int)>(i0);

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i1 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int available()>();

        if $i1 < 2 goto label47;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i1 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r14 = newarray (byte)[0];

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i2 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int available()>();

        if $i2 < $i1 goto label23;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r14 = virtualinvoke $r3.<javax.jmdns.impl.DNSIncoming$MessageInputStream: byte[] readBytes(int)>($i1);

     label23:
        $r13 = <javax.jmdns.impl.DNSIncoming$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSOptionCode>;

        $i1 = virtualinvoke $r17.<javax.jmdns.impl.constants.DNSOptionCode: int ordinal()>();

        $i1 = $r13[$i1];

        lookupswitch($i1)
        {
            case 1: goto label25;
            case 2: goto label52;
            case 3: goto label52;
            case 4: goto label52;
            case 5: goto label53;
            default: goto label24;
        };

     label24:
        goto label22;

     label25:
        i0 = 0;

        $i1 = 0;

        r18 = null;

        r19 = null;

        r20 = null;

     label26:
        i0 = $r14[0];

        $i1 = $r14[1];

        $r21 = newarray (byte)[6];

        $b5 = $r14[2];

        $r21[0] = $b5;

        $b5 = $r14[3];

        $r21[1] = $b5;

        $b5 = $r14[4];

        $r21[2] = $b5;

        $b5 = $r14[5];

        $r21[3] = $b5;

        $b5 = $r14[6];

        $r21[4] = $b5;

        $b5 = $r14[7];

        $r21[5] = $b5;

     label27:
        r19 = $r21;

     label28:
        $i2 = lengthof $r14;

     label29:
        if $i2 <= 8 goto label32;

     label30:
        r18 = newarray (byte)[6];

        $b5 = $r14[8];

        r18[0] = $b5;

        $b5 = $r14[9];

        r18[1] = $b5;

        $b5 = $r14[10];

        r18[2] = $b5;

        $b5 = $r14[11];

        r18[3] = $b5;

        $b5 = $r14[12];

        r18[4] = $b5;

        $b5 = $r14[13];

        r18[5] = $b5;

     label31:
        r19 = r18;

     label32:
        $i2 = lengthof $r14;

     label33:
        if $i2 != 18 goto label59;

     label34:
        $r22 = newarray (byte)[4];

     label35:
        r18 = $r22;

     label36:
        $b5 = $r14[14];

        $r22[0] = $b5;

        $b5 = $r14[15];

        $r22[1] = $b5;

        $b5 = $r14[16];

        $r22[2] = $b5;

        $b5 = $r14[17];

        $r22[3] = $b5;

     label37:
        $i2 = lengthof $r14;

     label38:
        if $i2 != 22 goto label58;

     label39:
        $r22 = newarray (byte)[8];

     label40:
        r20 = $r22;

     label41:
        $b5 = $r14[14];

        $r22[0] = $b5;

        $b5 = $r14[15];

        $r22[1] = $b5;

        $b5 = $r14[16];

        $r22[2] = $b5;

        $b5 = $r14[17];

        $r22[3] = $b5;

        $b5 = $r14[18];

        $r22[4] = $b5;

        $b5 = $r14[19];

        $r22[5] = $b5;

        $b5 = $r14[20];

        $r22[6] = $b5;

        $b5 = $r14[21];

        $r22[7] = $b5;

     label42:
        r18 = $r21;

     label43:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z0 == 0 goto label22;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled Owner OPT version: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sequence: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MAC address: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>(r18);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        if r19 == r18 goto label50;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wakeup MAC address: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>(r19);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label44:
        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        if r20 == null goto label51;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" password: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>(r20);

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label45:
        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r4);

        goto label22;

     label46:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, "There was a problem reading the OPT record. Ignoring.");

        goto label06;

     label47:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, "There was a problem reading the OPT record. Ignoring.");

        goto label06;

     label48:
        r24 := @caughtexception;

     label49:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed OPT answer. Option code: Owner data: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>($r14);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void warning(java.lang.String)>($r4);

        goto label43;

     label50:
        $r4 = "";

        goto label44;

     label51:
        $r4 = "";

        goto label45;

     label52:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z0 == 0 goto label22;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was an OPT answer. Option code: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>($r14);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r4);

        goto label22;

     label53:
        if i0 < 65001 goto label54;

        if i0 > 65534 goto label54;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z0 == 0 goto label22;

        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was an OPT answer using an experimental/local option code: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>($r14);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r4);

        goto label22;

     label54:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was an OPT answer. Not currently handled. Option code: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data: ");

        $r4 = specialinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String _hexString(byte[])>($r14);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r4);

        goto label22;

     label55:
        $r7 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was an OPT answer. Wrong version number: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result code: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r4);

        goto label06;

     label56:
        r25 := @caughtexception;

        r18 = $r21;

        goto label49;

     label57:
        r26 := @caughtexception;

        r20 = r18;

        r18 = $r21;

        goto label49;

     label58:
        r20 = r18;

        goto label42;

     label59:
        r18 = null;

        goto label37;

     label60:
        $r34 = (javax.jmdns.impl.DNSRecord) r12;

        return $r34;

        catch java.lang.Exception from label26 to label27 with label48;
        catch java.lang.Exception from label28 to label29 with label56;
        catch java.lang.Exception from label30 to label31 with label56;
        catch java.lang.Exception from label32 to label33 with label56;
        catch java.lang.Exception from label34 to label35 with label56;
        catch java.lang.Exception from label36 to label37 with label56;
        catch java.lang.Exception from label37 to label38 with label57;
        catch java.lang.Exception from label39 to label40 with label57;
        catch java.lang.Exception from label41 to label42 with label57;
    }
    private javax.jmdns.impl.DNSQuestion readQuestion()
    {
        javax.jmdns.impl.DNSIncoming r0;
        java.util.logging.Level $r1;
        javax.jmdns.impl.DNSIncoming$MessageInputStream $r2;
        java.lang.String $r3, $r8;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordType $r4, $r5;
        java.util.logging.Logger $r6;
        java.lang.StringBuilder $r7;
        javax.jmdns.impl.constants.DNSRecordClass $r9;
        boolean $z0;
        javax.jmdns.impl.DNSQuestion $r10;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $r3 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readName()>();

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r4 = staticinvoke <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType typeForIndex(int)>($i0);

        $r5 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE>;

        if $r4 != $r5 goto label1;

        $r6 = <javax.jmdns.impl.DNSIncoming: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find record type: ");

        $r8 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print(boolean)>(1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r1, $r8);

     label1:
        $r2 = r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream>;

        $i0 = virtualinvoke $r2.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $r9 = staticinvoke <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass classForIndex(int)>($i0);

        $z0 = virtualinvoke $r9.<javax.jmdns.impl.constants.DNSRecordClass: boolean isUnique(int)>($i0);

        $r10 = staticinvoke <javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r3, $r4, $r9, $z0);

        return $r10;
    }
    void append(javax.jmdns.impl.DNSIncoming)
    {
        javax.jmdns.impl.DNSIncoming r0, $r1;
        boolean $z0;
        java.util.List $r2;
        java.util.Collection $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: boolean isQuery()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: boolean isTruncated()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: boolean isQuery()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _questions>;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getQuestions()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _answers>;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAnswers()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _authoritativeAnswers>;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAuthorities()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _additionals>;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAdditionals()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.jmdns.impl.DNSIncoming r0;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        r0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: javax.jmdns.impl.DNSIncoming clone()>();

        return r0;
    }
    public javax.jmdns.impl.DNSIncoming clone()
    {
        javax.jmdns.impl.DNSIncoming r0, r1;
        java.net.DatagramPacket $r2;
        long $l0;
        int $i1, $i2;
        boolean $z0;
        java.util.List $r3, $r4;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        r1 = new javax.jmdns.impl.DNSIncoming;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getId()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: boolean isMulticast()>();

        $r2 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $l0 = r0.<javax.jmdns.impl.DNSIncoming: long _receivedTime>;

        specialinvoke r1.<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>($i1, $i2, $z0, $r2, $l0);

        $i1 = r0.<javax.jmdns.impl.DNSIncoming: int _senderUDPPayload>;

        r1.<javax.jmdns.impl.DNSIncoming: int _senderUDPPayload> = $i1;

        $r3 = r1.<javax.jmdns.impl.DNSIncoming: java.util.List _questions>;

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _questions>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r3 = r1.<javax.jmdns.impl.DNSIncoming: java.util.List _answers>;

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _answers>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r3 = r1.<javax.jmdns.impl.DNSIncoming: java.util.List _authoritativeAnswers>;

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _authoritativeAnswers>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r3 = r1.<javax.jmdns.impl.DNSIncoming: java.util.List _additionals>;

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _additionals>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return r1;
    }
    public int elapseSinceArrival()
    {
        javax.jmdns.impl.DNSIncoming r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = r0.<javax.jmdns.impl.DNSIncoming: long _receivedTime>;

        $l0 = $l1 - $l0;

        $i2 = (int) $l0;

        return $i2;
    }
    public int getSenderUDPPayload()
    {
        javax.jmdns.impl.DNSIncoming r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        i0 = r0.<javax.jmdns.impl.DNSIncoming: int _senderUDPPayload>;

        return i0;
    }
    java.lang.String print(boolean)
    {
        javax.jmdns.impl.DNSIncoming r0;
        boolean $z0;
        java.lang.StringBuilder r1;
        byte[] r2, $r5;
        int $i0;
        java.lang.String $r3;
        java.net.DatagramPacket $r4;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        $z0 := @parameter0: boolean;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getLength()>();

        r2 = newarray (byte)[$i0];

        $r4 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $r5 = virtualinvoke $r4.<java.net.DatagramPacket: byte[] getData()>();

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i0);

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: java.lang.String print(byte[])>(r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label1:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.DNSIncoming r0;
        java.lang.StringBuilder r1;
        boolean $z0;
        java.lang.String $r2;
        java.net.DatagramPacket $r3;
        java.net.InetAddress $r4;
        int $i0;
        java.util.List $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        javax.jmdns.impl.DNSQuestion r8;
        javax.jmdns.impl.DNSRecord r9;

        r0 := @this: javax.jmdns.impl.DNSIncoming;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: boolean isQuery()>();

        if $z0 == 0 goto label11;

        $r2 = "dns[query,";

     label01:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $r4 = virtualinvoke $r3.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r4 == null goto label02;

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $r4 = virtualinvoke $r3.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r2 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label02:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $i0 = virtualinvoke $r3.<java.net.DatagramPacket: int getPort()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r3 = r0.<javax.jmdns.impl.DNSIncoming: java.net.DatagramPacket _packet>;

        $i0 = virtualinvoke $r3.<java.net.DatagramPacket: int getLength()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id=0x");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getId()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        if $i0 == 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", flags=0x");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $i0 = $i0 & 32768;

        if $i0 == 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":r");

     label03:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $i0 = $i0 & 1024;

        if $i0 == 0 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":aa");

     label04:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getFlags()>();

        $i0 = $i0 & 512;

        if $i0 == 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":tc");

     label05:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfQuestions()>();

        if $i0 <= 0 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", questions=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfQuestions()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label06:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAnswers()>();

        if $i0 <= 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", answers=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAnswers()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label07:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAuthorities()>();

        if $i0 <= 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authorities=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAuthorities()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label08:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAdditionals()>();

        if $i0 <= 0 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", additionals=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAdditionals()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label09:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfQuestions()>();

        if $i0 <= 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nquestions:");

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _questions>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.jmdns.impl.DNSQuestion) $r7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        goto label10;

     label11:
        $r2 = "dns[response,";

        goto label01;

     label12:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAnswers()>();

        if $i0 <= 0 goto label14;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nanswers:");

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _answers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        goto label13;

     label14:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAuthorities()>();

        if $i0 <= 0 goto label16;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nauthorities:");

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _authoritativeAnswers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        goto label15;

     label16:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming: int getNumberOfAdditionals()>();

        if $i0 <= 0 goto label18;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nadditionals:");

        $r5 = r0.<javax.jmdns.impl.DNSIncoming: java.util.List _additionals>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.impl.DNSRecord) $r7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        goto label17;

     label18:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
