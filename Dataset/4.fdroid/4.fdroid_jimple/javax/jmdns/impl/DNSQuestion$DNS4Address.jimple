javax.jmdns.impl.DNSQuestion$DNS4Address extends javax.jmdns.impl.DNSQuestion
    void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean)
    {
        javax.jmdns.impl.DNSQuestion$DNS4Address r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSQuestion$DNS4Address;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<javax.jmdns.impl.DNSQuestion: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r1, $r2, $r3, $z0);

        return;
    }
    public void addAnswers(javax.jmdns.impl.JmDNSImpl, java.util.Set)
    {
        javax.jmdns.impl.DNSQuestion$DNS4Address r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.Set r2;
        javax.jmdns.impl.HostInfo $r3;
        javax.jmdns.impl.constants.DNSRecordType $r4;
        javax.jmdns.impl.DNSRecord$Address $r5;

        r0 := @this: javax.jmdns.impl.DNSQuestion$DNS4Address;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        r2 := @parameter1: java.util.Set;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$DNS4Address: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r5 = virtualinvoke $r3.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.constants.DNSRecordType,boolean,int)>($r4, 1, 3600);

        if $r5 == null goto label1;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label1:
        return;
    }
    public boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSQuestion$DNS4Address r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.lang.String $r2, $r4;
        javax.jmdns.impl.HostInfo $r3;
        boolean $z0;
        java.util.Map $r5;
        java.util.Set $r6;

        r0 := @this: javax.jmdns.impl.DNSQuestion$DNS4Address;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$DNS4Address: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
