javax.jmdns.impl.DNSQuestion$Service extends javax.jmdns.impl.DNSQuestion
    void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean)
    {
        javax.jmdns.impl.DNSQuestion$Service r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSQuestion$Service;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<javax.jmdns.impl.DNSQuestion: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r1, $r2, $r3, $z0);

        return;
    }
    public void addAnswers(javax.jmdns.impl.JmDNSImpl, java.util.Set)
    {
        javax.jmdns.impl.DNSQuestion$Service r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.Set r2;
        javax.jmdns.impl.DNSQuestion$Pointer r3;
        java.lang.String $r4, $r6;
        javax.jmdns.impl.HostInfo $r5;
        boolean $z0;
        javax.jmdns.impl.constants.DNSRecordClass $r7;
        java.util.Collection $r8;
        java.util.Map $r9;
        javax.jmdns.impl.constants.DNSRecordType $r10;
        java.lang.Object $r11;
        javax.jmdns.impl.ServiceInfoImpl $r12;

        r0 := @this: javax.jmdns.impl.DNSQuestion$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        r2 := @parameter1: java.util.Set;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r6 = virtualinvoke $r5.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r7 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: boolean isUnique()>();

        $r8 = virtualinvoke $r5.<javax.jmdns.impl.HostInfo: java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r7, $z0, 3600);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        return;

     label1:
        $r9 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServiceTypes()>();

        $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        r3 = new javax.jmdns.impl.DNSQuestion$Pointer;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: java.lang.String getName()>();

        $r10 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_PTR>;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: boolean isUnique()>();

        specialinvoke r3.<javax.jmdns.impl.DNSQuestion$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r4, $r10, $r7, $z0);

        virtualinvoke r3.<javax.jmdns.impl.DNSQuestion: void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set)>($r1, r2);

        return;

     label2:
        $r9 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r12 = (javax.jmdns.impl.ServiceInfoImpl) $r11;

        virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: void addAnswersForServiceInfo(javax.jmdns.impl.JmDNSImpl,java.util.Set,javax.jmdns.impl.ServiceInfoImpl)>($r1, r2, $r12);

        return;
    }
    public boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSQuestion$Service r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.lang.String $r2, $r4;
        javax.jmdns.impl.HostInfo $r3;
        boolean $z0;
        java.util.Map $r5;
        java.util.Set $r6;

        r0 := @this: javax.jmdns.impl.DNSQuestion$Service;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion$Service: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r4 = virtualinvoke $r3.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
