javax.jmdns.impl.DNSRecord$Pointer extends javax.jmdns.impl.DNSRecord
private final java.lang.String _alias
    public void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordClass, boolean, int, java.lang.String)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        java.lang.String $r1, $r3;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        boolean $z0;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordType $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.String;

        $r4 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_PTR>;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r1, $r4, $r2, $z0, $i0);

        r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias> = $r3;

        return;
    }
    java.lang.String getAlias()
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        r1 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        return r1;
    }
    public javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.ServiceInfo $r2;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        java.lang.String $r4, $r5;
        javax.jmdns.impl.ServiceEventImpl $r6;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: javax.jmdns.ServiceInfo getServiceInfo(boolean)>(0);

        $r3 = (javax.jmdns.impl.ServiceInfoImpl) $r2;

        virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>($r1);

        $r4 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String getAlias()>();

        $r5 = staticinvoke <javax.jmdns.impl.JmDNSImpl: java.lang.String toUnqualifiedName(java.lang.String,java.lang.String)>($r4, $r5);

        $r6 = new javax.jmdns.impl.ServiceEventImpl;

        specialinvoke $r6.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>($r1, $r4, $r5, $r2);

        return $r6;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(boolean)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.util.Map $r2, $r5;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        javax.jmdns.ServiceInfo$Fields $r4, $r6;
        java.lang.Object $r7;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: boolean isServicesDiscoveryMetaQuery()>();

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String getAlias()>();

        $r2 = staticinvoke <javax.jmdns.impl.ServiceInfoImpl: java.util.Map decodeQualifiedNameMapForType(java.lang.String)>($r1);

        $r3 = new javax.jmdns.impl.ServiceInfoImpl;

        specialinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r2, 0, 0, 0, $z0, null);

        return $r3;

     label1:
        $z1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: boolean isReverseLookup()>();

        if $z1 == 0 goto label2;

        $r3 = new javax.jmdns.impl.ServiceInfoImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.util.Map getQualifiedNameMap()>();

        specialinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r2, 0, 0, 0, $z0, null);

        return $r3;

     label2:
        $z1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: boolean isDomainDiscoveryQuery()>();

        if $z1 == 0 goto label3;

        $r3 = new javax.jmdns.impl.ServiceInfoImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.util.Map getQualifiedNameMap()>();

        specialinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r2, 0, 0, 0, $z0, null);

        return $r3;

     label3:
        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String getAlias()>();

        $r2 = staticinvoke <javax.jmdns.impl.ServiceInfoImpl: java.util.Map decodeQualifiedNameMapForType(java.lang.String)>($r1);

        $r4 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Subtype>;

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.util.Map getQualifiedNameMap()>();

        $r6 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Subtype>;

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        $r3 = new javax.jmdns.impl.ServiceInfoImpl;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String getAlias()>();

        specialinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,java.lang.String)>($r2, 0, 0, 0, $z0, $r1);

        return $r3;
    }
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl, long)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        long $l0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter1: long;

        return 0;
    }
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        return 0;
    }
    public boolean isSameEntry(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0, $r2;
        javax.jmdns.impl.DNSEntry $r1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $z0 = specialinvoke r0.<javax.jmdns.impl.DNSRecord: boolean isSameEntry(javax.jmdns.impl.DNSEntry)>($r1);

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord$Pointer;

        if $z0 == 0 goto label1;

        $r2 = (javax.jmdns.impl.DNSRecord$Pointer) $r1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Pointer: boolean sameValue(javax.jmdns.impl.DNSRecord)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isSingleValued()
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        return 0;
    }
    boolean sameValue(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0, r2;
        javax.jmdns.impl.DNSRecord $r1;
        boolean $z0;
        java.lang.String $r3, $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord$Pointer;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.jmdns.impl.DNSRecord$Pointer) $r1;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        if $r3 != null goto label2;

        $r3 = r2.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        if $r3 != null goto label3;

     label2:
        $r3 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        $r4 = r2.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label3:
        return 0;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toString(java.lang.StringBuilder)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" alias: \'");

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        if $r3 == null goto label2;

        $r3 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toString()>();

     label1:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;

     label2:
        $r3 = "null";

        goto label1;
    }
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)
    {
        javax.jmdns.impl.DNSRecord$Pointer r0;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream $r1;
        java.lang.String $r2;

        r0 := @this: javax.jmdns.impl.DNSRecord$Pointer;

        $r1 := @parameter0: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r2 = r0.<javax.jmdns.impl.DNSRecord$Pointer: java.lang.String _alias>;

        virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeName(java.lang.String)>($r2);

        return;
    }
