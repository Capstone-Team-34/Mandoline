javax.jmdns.impl.DNSOutgoing$MessageOutputStream extends java.io.ByteArrayOutputStream
private final int _offset
private final javax.jmdns.impl.DNSOutgoing _out
    void <init>(int, javax.jmdns.impl.DNSOutgoing)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        int $i0;
        javax.jmdns.impl.DNSOutgoing $r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: javax.jmdns.impl.DNSOutgoing;

        specialinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing,int)>($i0, $r1, 0);

        return;
    }
    void <init>(int, javax.jmdns.impl.DNSOutgoing, int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        int $i0, $i1;
        javax.jmdns.impl.DNSOutgoing $r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: javax.jmdns.impl.DNSOutgoing;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: javax.jmdns.impl.DNSOutgoing _out> = $r1;

        r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int _offset> = $i1;

        return;
    }
    void writeByte(int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 := @parameter0: int;

        $i0 = $i0 & 255;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void write(int)>($i0);

        return;
    }
    void writeBytes(byte[], int, int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        byte[] $r1;
        int $i0, $i1, i2, $i3;
        byte $b4;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $i3 = $i0 + i2;

        $b4 = $r1[$i3];

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>($b4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    void writeInt(int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 := @parameter0: int;

        $i1 = $i0 >> 16;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        return;
    }
    void writeName(java.lang.String)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeName(java.lang.String,boolean)>($r1, 1);

        return;
    }
    void writeName(java.lang.String, boolean)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        int $i0, i1, $i2;
        javax.jmdns.impl.DNSOutgoing $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.Integer r6;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        i1 = $i0;

        if $i0 >= 0 goto label2;

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        if i1 > 0 goto label3;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(0);

        return;

     label3:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        if $z0 == 0 goto label6;

        $z1 = <javax.jmdns.impl.DNSOutgoing: boolean USE_DOMAIN_NAME_COMPRESSION>;

        if $z1 == 0 goto label6;

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: javax.jmdns.impl.DNSOutgoing _out>;

        $r4 = $r3.<javax.jmdns.impl.DNSOutgoing: java.util.Map _names>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (java.lang.Integer) $r5;

        if r6 == null goto label4;

        i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i0 = i1 >> 8;

        $i0 = $i0 | 192;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>($i0);

        i1 = i1 & 255;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i1);

        return;

     label4:
        $r3 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: javax.jmdns.impl.DNSOutgoing _out>;

        $r4 = $r3.<javax.jmdns.impl.DNSOutgoing: java.util.Map _names>;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i0 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int _offset>;

        $i0 = $i2 + $i0;

        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r6);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeUTF(java.lang.String,int,int)>($r2, 0, $i0);

     label5:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r1 = $r2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        goto label1;

     label6:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeUTF(java.lang.String,int,int)>($r2, 0, $i0);

        goto label5;
    }
    void writeQuestion(javax.jmdns.impl.DNSQuestion)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        javax.jmdns.impl.DNSQuestion $r1;
        java.lang.String $r2;
        javax.jmdns.impl.constants.DNSRecordType $r3;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordClass $r4;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: javax.jmdns.impl.DNSQuestion;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeName(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $i0 = virtualinvoke $r3.<javax.jmdns.impl.constants.DNSRecordType: int indexValue()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $i0 = virtualinvoke $r4.<javax.jmdns.impl.constants.DNSRecordClass: int indexValue()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i0);

        return;
    }
    void writeRecord(javax.jmdns.impl.DNSRecord, long)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0, r2;
        javax.jmdns.impl.DNSRecord $r1;
        long $l0;
        java.lang.String $r3;
        javax.jmdns.impl.constants.DNSRecordType $r4;
        int $i1, $i2;
        javax.jmdns.impl.constants.DNSRecordClass $r5;
        boolean $z0;
        javax.jmdns.impl.DNSOutgoing $r6;
        byte $b3;
        byte[] $r7;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter1: long;

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: java.lang.String getName()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeName(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $i1 = virtualinvoke $r4.<javax.jmdns.impl.constants.DNSRecordType: int indexValue()>();

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $i1 = virtualinvoke $r5.<javax.jmdns.impl.constants.DNSRecordClass: int indexValue()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isUnique()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: javax.jmdns.impl.DNSOutgoing _out>;

        $z0 = virtualinvoke $r6.<javax.jmdns.impl.DNSOutgoing: boolean isMulticast()>();

        if $z0 == 0 goto label3;

        $i2 = 32768;

     label1:
        $i1 = $i2 | $i1;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $b3 = $l0 cmp 0L;

        if $b3 != 0 goto label4;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: int getTTL()>();

     label2:
        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeInt(int)>($i1);

        r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r6 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: javax.jmdns.impl.DNSOutgoing _out>;

        $i1 = r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int _offset>;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i1 = $i1 + $i2;

        $i1 = $i1 + 2;

        specialinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing,int)>(512, $r6, $i1);

        virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>(r2);

        $r7 = virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r7;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = lengthof $r7;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void write(byte[],int,int)>($r7, 0, $i1);

        return;

     label3:
        $i2 = 0;

        goto label1;

     label4:
        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: int getRemainingTTL(long)>($l0);

        goto label2;
    }
    void writeShort(int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i0 := @parameter0: int;

        $i1 = $i0 >> 8;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>($i1);

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>($i0);

        return;
    }
    void writeUTF(java.lang.String, int, int)
    {
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r0;
        java.lang.String $r1;
        int $i0, $i1, i2, i3, $i4;
        char $c5;

        r0 := @this: javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = 0;

        i3 = 0;

     label01:
        if i3 >= $i1 goto label05;

        $i4 = $i0 + i3;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        if $c5 < 1 goto label03;

        if $c5 > 127 goto label03;

        i2 = i2 + 1;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        if $c5 <= 2047 goto label04;

        i2 = i2 + 3;

        goto label02;

     label04:
        i2 = i2 + 2;

        goto label02;

     label05:
        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i2);

        i2 = 0;

     label06:
        if i2 >= $i1 goto label10;

        i3 = $i0 + i2;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        if $c5 < 1 goto label08;

        if $c5 > 127 goto label08;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>($c5);

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        if $c5 <= 2047 goto label09;

        i3 = $c5 >> 12;

        i3 = i3 & 15;

        i3 = i3 | 224;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i3);

        i3 = $c5 >> 6;

        i3 = i3 & 63;

        i3 = i3 | 128;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i3);

        i3 = $c5 >> 0;

        i3 = i3 & 63;

        i3 = i3 | 128;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i3);

        goto label07;

     label09:
        i3 = $c5 >> 6;

        i3 = i3 & 31;

        i3 = i3 | 192;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i3);

        i3 = $c5 >> 0;

        i3 = i3 & 63;

        i3 = i3 | 128;

        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeByte(int)>(i3);

        goto label07;

     label10:
        return;
    }
