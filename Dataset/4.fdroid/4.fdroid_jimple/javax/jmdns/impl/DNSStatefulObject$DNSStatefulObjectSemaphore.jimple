javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore extends java.lang.Object
private static java.util.logging.Logger logger
private final java.lang.String _name
private final java.util.concurrent.ConcurrentMap _semaphores
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/DNSStatefulObject$DNSStatefulObjectSemaphore;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.logging.Logger logger> = $r2;

        return;
    }
    public void <init>(java.lang.String)
    {
        javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.lang.String _name> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(50);

        r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores> = $r2;

        return;
    }
    public void signalEvent()
    {
        javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore r0;
        java.util.concurrent.ConcurrentMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.concurrent.Semaphore r5;

        r0 := @this: javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore;

        $r1 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.Semaphore) $r4;

        virtualinvoke r5.<java.util.concurrent.Semaphore: void release()>();

        interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.util.concurrent.ConcurrentMap $r3;
        int $i0;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Thread r7;

        r0 := @this: javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(1000);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Semaphore: ");

        $r2 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.lang.String _name>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $i0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: int size()>();

        if $i0 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no semaphores.");

     label1:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" semaphores:\n");

        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Thread) $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tThread: ");

        $r2 = virtualinvoke r7.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label3;
    }
    public void waitForEvent(long)
    {
        javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore r0;
        long $l0;
        java.lang.InterruptedException r1;
        java.lang.Thread $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        java.util.concurrent.Semaphore r5;
        java.util.concurrent.TimeUnit $r6;
        java.util.logging.Logger $r7;
        java.util.logging.Level $r8;

        r0 := @this: javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore;

        $l0 := @parameter0: long;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.util.concurrent.Semaphore) $r4;

        if r5 != null goto label1;

        r5 = new java.util.concurrent.Semaphore;

        specialinvoke r5.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(1, 1);

        virtualinvoke r5.<java.util.concurrent.Semaphore: int drainPermits()>();

        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r2, r5);

     label1:
        $r3 = r0.<javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.concurrent.ConcurrentMap _semaphores>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.util.concurrent.Semaphore) $r4;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label2:
        virtualinvoke r5.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>($l0, $r6);

     label3:
        return;

     label4:
        r1 := @caughtexception;

        $r7 = <javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, "Exception ", r1);

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
