javax.jmdns.impl.DNSRecord extends javax.jmdns.impl.DNSEntry
public static final byte[] EMPTY_TXT
private static java.util.logging.Logger logger
private long _created
private java.net.InetAddress _source
private int _ttl
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        byte[] $r3;

        $r0 = class "Ljavax/jmdns/impl/DNSRecord;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSRecord: java.util.logging.Logger logger> = $r2;

        $r3 = newarray (byte)[1];

        $r3[0] = 0;

        <javax.jmdns.impl.DNSRecord: byte[] EMPTY_TXT> = $r3;

        return;
    }
    void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean, int)
    {
        javax.jmdns.impl.DNSRecord r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;
        int $i0;
        long $l1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        specialinvoke r0.<javax.jmdns.impl.DNSEntry: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r1, $r2, $r3, $z0);

        r0.<javax.jmdns.impl.DNSRecord: int _ttl> = $i0;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<javax.jmdns.impl.DNSRecord: long _created> = $l1;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        javax.jmdns.impl.DNSRecord r0, $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord;

        if $z0 == 0 goto label1;

        $z0 = specialinvoke r0.<javax.jmdns.impl.DNSEntry: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = (javax.jmdns.impl.DNSRecord) $r1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: boolean sameValue(javax.jmdns.impl.DNSRecord)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    long getExpirationTime(int)
    {
        javax.jmdns.impl.DNSRecord r0;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $i0 := @parameter0: int;

        $l1 = r0.<javax.jmdns.impl.DNSRecord: long _created>;

        $i2 = r0.<javax.jmdns.impl.DNSRecord: int _ttl>;

        $i0 = $i2 * $i0;

        $l3 = (long) $i0;

        $l3 = $l3 * 10L;

        $l1 = $l1 + $l3;

        return $l1;
    }
    public java.net.InetAddress getRecordSource()
    {
        javax.jmdns.impl.DNSRecord r0;
        java.net.InetAddress r1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        r1 = r0.<javax.jmdns.impl.DNSRecord: java.net.InetAddress _source>;

        return r1;
    }
    int getRemainingTTL(long)
    {
        javax.jmdns.impl.DNSRecord r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: long getExpirationTime(int)>(100);

        $l0 = $l1 - $l0;

        $l0 = $l0 / 1000L;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l0);

        $i2 = (int) $l0;

        return $i2;
    }
public abstract javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) { 
// no body
} 
    public javax.jmdns.ServiceInfo getServiceInfo()
    {
        javax.jmdns.impl.DNSRecord r0;
        javax.jmdns.ServiceInfo $r1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: javax.jmdns.ServiceInfo getServiceInfo(boolean)>(0);

        return $r1;
    }
public abstract javax.jmdns.ServiceInfo getServiceInfo(boolean) { 
// no body
} 
    public int getTTL()
    {
        javax.jmdns.impl.DNSRecord r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        i0 = r0.<javax.jmdns.impl.DNSRecord: int _ttl>;

        return i0;
    }
abstract boolean handleQuery(javax.jmdns.impl.JmDNSImpl, long) { 
// no body
} 
abstract boolean handleResponse(javax.jmdns.impl.JmDNSImpl) { 
// no body
} 
    public boolean isExpired(long)
    {
        javax.jmdns.impl.DNSRecord r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: long getExpirationTime(int)>(100);

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
public abstract boolean isSingleValued() { 
// no body
} 
    public boolean isStale(long)
    {
        javax.jmdns.impl.DNSRecord r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: long getExpirationTime(int)>(50);

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    void resetTTL(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord r0, $r1;
        long $l0;
        int $i1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $l0 = $r1.<javax.jmdns.impl.DNSRecord: long _created>;

        r0.<javax.jmdns.impl.DNSRecord: long _created> = $l0;

        $i1 = $r1.<javax.jmdns.impl.DNSRecord: int _ttl>;

        r0.<javax.jmdns.impl.DNSRecord: int _ttl> = $i1;

        return;
    }
    boolean sameType(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord r0, $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2, $r3;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }
abstract boolean sameValue(javax.jmdns.impl.DNSRecord) { 
// no body
} 
    public void setRecordSource(java.net.InetAddress)
    {
        javax.jmdns.impl.DNSRecord r0;
        java.net.InetAddress $r1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: java.net.InetAddress;

        r0.<javax.jmdns.impl.DNSRecord: java.net.InetAddress _source> = $r1;

        return;
    }
    void setWillExpireSoon(long)
    {
        javax.jmdns.impl.DNSRecord r0;
        long $l0;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter0: long;

        r0.<javax.jmdns.impl.DNSRecord: long _created> = $l0;

        r0.<javax.jmdns.impl.DNSRecord: int _ttl> = 1;

        return;
    }
    boolean suppressedBy(javax.jmdns.impl.DNSIncoming)
    {
        javax.jmdns.impl.DNSRecord r0, r7;
        javax.jmdns.impl.DNSIncoming $r1;
        java.lang.ArrayIndexOutOfBoundsException r2;
        java.util.logging.Level $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.logging.Logger $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

     label1:
        $r4 = virtualinvoke $r1.<javax.jmdns.impl.DNSIncoming: java.util.Collection getAllAnswers()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label9;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label5:
        r7 = (javax.jmdns.impl.DNSRecord) $r6;

     label6:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: boolean suppressedBy(javax.jmdns.impl.DNSRecord)>(r7);

     label7:
        if $z0 == 0 goto label2;

        return 1;

     label8:
        r2 := @caughtexception;

        $r8 = <javax.jmdns.impl.DNSRecord: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("suppressedBy() message ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exception ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r10, r2);

     label9:
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label3 with label8;
        catch java.lang.ArrayIndexOutOfBoundsException from label4 to label5 with label8;
        catch java.lang.ArrayIndexOutOfBoundsException from label6 to label7 with label8;
    }
    boolean suppressedBy(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord r0, $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $i0 = $r1.<javax.jmdns.impl.DNSRecord: int _ttl>;

        $i1 = r0.<javax.jmdns.impl.DNSRecord: int _ttl>;

        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSRecord r0;
        java.lang.StringBuilder $r1, $r2;
        long $l0;
        int $i1;
        java.lang.String $r3;

        r0 := @this: javax.jmdns.impl.DNSRecord;

        $r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<javax.jmdns.impl.DNSEntry: void toString(java.lang.StringBuilder)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ttl: \'");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord: int getRemainingTTL(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i1 = r0.<javax.jmdns.impl.DNSRecord: int _ttl>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }
abstract void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) { 
// no body
} 
