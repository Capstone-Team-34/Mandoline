javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry extends java.util.AbstractMap implements java.lang.Cloneable
private final java.util.Set _entrySet
private final java.lang.String _type
    public void <init>(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.lang.String $r1;
        java.util.HashSet $r2;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.lang.String _type> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.util.Set _entrySet> = $r2;

        return;
    }
    public boolean add(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.lang.String $r1;
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry $r2;
        boolean $z0;
        java.util.Set $r3;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean contains(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.util.Set _entrySet>;

        $r2 = new javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry;

        specialinvoke $r2.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry: void <init>(java.lang.String)>($r1);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return 1;
    }
    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        r0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry clone()>();

        return r0;
    }
    public javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry clone()
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0, r1;
        java.lang.String $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        r1 = new javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.lang.String getType()>();

        specialinvoke r1.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (java.lang.String) $r5;

        virtualinvoke r1.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean add(java.lang.String)>($r2);

        goto label1;

     label2:
        return r1;
    }
    public boolean contains(java.lang.String)
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.util.Set entrySet()
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.util.Set r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.util.Set _entrySet>;

        return r1;
    }
    public java.lang.String getType()
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        r1 = r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.lang.String _type>;

        return r1;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry r0;
        java.lang.StringBuilder r1;
        boolean $z0;
        java.lang.String $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        int $i0;

        r0 := @this: javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(200);

        $z0 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty");

     label1:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        $r3 = virtualinvoke r0.<javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label3;

     label4:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -2;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i0);

        goto label1;
    }
