javax.jmdns.impl.DNSMessage extends java.lang.Object
protected final java.util.List _additionals
protected final java.util.List _answers
protected final java.util.List _authoritativeAnswers
private int _flags
private int _id
boolean _multicast
protected final java.util.List _questions
    protected void <init>(int, int, boolean)
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0, $i1;
        boolean $z0;
        java.util.LinkedList $r1;
        java.util.List $r2;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.jmdns.impl.DNSMessage: int _flags> = $i0;

        r0.<javax.jmdns.impl.DNSMessage: int _id> = $i1;

        r0.<javax.jmdns.impl.DNSMessage: boolean _multicast> = $z0;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<javax.jmdns.impl.DNSMessage: java.util.List _questions> = $r2;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<javax.jmdns.impl.DNSMessage: java.util.List _answers> = $r2;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<javax.jmdns.impl.DNSMessage: java.util.List _authoritativeAnswers> = $r2;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<javax.jmdns.impl.DNSMessage: java.util.List _additionals> = $r2;

        return;
    }
    public java.util.Collection getAdditionals()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.List r1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _additionals>;

        return r1;
    }
    public java.util.Collection getAllAnswers()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.ArrayList r1;
        java.util.List $r2;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = new java.util.ArrayList;

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _answers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _authoritativeAnswers>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + $i1;

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _additionals>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _answers>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _authoritativeAnswers>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r2 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _additionals>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return r1;
    }
    public java.util.Collection getAnswers()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.List r1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _answers>;

        return r1;
    }
    public java.util.Collection getAuthorities()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.List r1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _authoritativeAnswers>;

        return r1;
    }
    public int getFlags()
    {
        javax.jmdns.impl.DNSMessage r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        return i0;
    }
    public int getId()
    {
        javax.jmdns.impl.DNSMessage r0;
        boolean $z0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $z0 = r0.<javax.jmdns.impl.DNSMessage: boolean _multicast>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = r0.<javax.jmdns.impl.DNSMessage: int _id>;

        return i0;
    }
    public int getNumberOfAdditionals()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: java.util.Collection getAdditionals()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }
    public int getNumberOfAnswers()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: java.util.Collection getAnswers()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }
    public int getNumberOfAuthorities()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: java.util.Collection getAuthorities()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }
    public int getNumberOfQuestions()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: java.util.Collection getQuestions()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }
    public int getOperationCode()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 30720;

        $i0 = $i0 >> 11;

        return $i0;
    }
    public java.util.Collection getQuestions()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.util.List r1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _questions>;

        return r1;
    }
    public boolean isAuthoritativeAnswer()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 1024;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEmpty()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: int getNumberOfQuestions()>();

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: int getNumberOfAnswers()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: int getNumberOfAuthorities()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSMessage: int getNumberOfAdditionals()>();

        $i0 = $i0 + $i1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isMulticast()
    {
        javax.jmdns.impl.DNSMessage r0;
        boolean z0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        z0 = r0.<javax.jmdns.impl.DNSMessage: boolean _multicast>;

        return z0;
    }
    public boolean isQuery()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 32768;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isResponse()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 32768;

        if $i0 != 32768 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isTruncated()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 512;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isValidResponseCode()
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 = r0.<javax.jmdns.impl.DNSMessage: int _flags>;

        $i0 = $i0 & 15;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    java.lang.String print()
    {
        javax.jmdns.impl.DNSMessage r0;
        java.lang.StringBuffer r1;
        java.lang.String $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        javax.jmdns.impl.DNSQuestion r6;
        javax.jmdns.impl.DNSRecord r7;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(int)>(200);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r3 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _questions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.impl.DNSQuestion) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tquestion:      ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r3 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _answers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tanswer:        ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label3;

     label4:
        $r3 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _authoritativeAnswers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tauthoritative: ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label5;

     label6:
        $r3 = r0.<javax.jmdns.impl.DNSMessage: java.util.List _additionals>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tadditional:    ");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label7;

     label8:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
    protected java.lang.String print(byte[])
    {
        javax.jmdns.impl.DNSMessage r0;
        byte[] $r1;
        java.lang.StringBuilder r2;
        short s0;
        int i1, i2, $i3, i4, $i5;
        java.lang.String $r3;
        byte $b6;
        char $c7;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $r1 := @parameter0: byte[];

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>(4000);

        i2 = 0;

        i1 = lengthof $r1;

     label01:
        if i2 >= i1 goto label16;

        $i3 = i1 - i2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(32, $i3);

        if i2 >= 16 goto label02;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label02:
        if i2 >= 256 goto label03;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label03:
        if i2 >= 4096 goto label04;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label04:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        i4 = 0;

     label05:
        if i4 >= $i3 goto label07;

        $i5 = i4 % 8;

        if $i5 != 0 goto label06;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label06:
        $i5 = i2 + i4;

        $b6 = $r1[$i5];

        s0 = $b6 & 240;

        s0 = s0 >> 4;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(s0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i5 = i2 + i4;

        $b6 = $r1[$i5];

        $b6 = $b6 & 15;

        $b6 = $b6 >> 0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($b6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i4 = i4 + 1;

        goto label05;

     label07:
        if i4 >= 32 goto label10;

     label08:
        if i4 >= 32 goto label10;

        $i5 = i4 % 8;

        if $i5 != 0 goto label09;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i4 = i4 + 1;

        goto label08;

     label10:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        i4 = 0;

     label11:
        if i4 >= $i3 goto label15;

        $i5 = i4 % 8;

        if $i5 != 0 goto label12;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label12:
        $i5 = i2 + i4;

        $b6 = $r1[$i5];

        s0 = $b6 & 255;

        if s0 <= 32 goto label14;

        if s0 >= 127 goto label14;

        $c7 = (char) s0;

     label13:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        i4 = i4 + 1;

        goto label11;

     label14:
        $c7 = 46;

        goto label13;

     label15:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $i3 = i2 + 32;

        if $i3 < 2048 goto label17;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("....\n");

     label16:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label17:
        i2 = i2 + 32;

        goto label01;
    }
    public void setFlags(int)
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 := @parameter0: int;

        r0.<javax.jmdns.impl.DNSMessage: int _flags> = $i0;

        return;
    }
    public void setId(int)
    {
        javax.jmdns.impl.DNSMessage r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSMessage;

        $i0 := @parameter0: int;

        r0.<javax.jmdns.impl.DNSMessage: int _id> = $i0;

        return;
    }
