javax.jmdns.impl.DNSOutgoing extends javax.jmdns.impl.DNSMessage
public static boolean USE_DOMAIN_NAME_COMPRESSION
private final javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes
private final javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes
private final javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes
private java.net.InetSocketAddress _destination
private int _maxUDPPayload
java.util.Map _names
private final javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes
    static void <clinit>()
    {
        <javax.jmdns.impl.DNSOutgoing: boolean USE_DOMAIN_NAME_COMPRESSION> = 1;

        return;
    }
    public void <init>(int)
    {
        javax.jmdns.impl.DNSOutgoing r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $i0 := @parameter0: int;

        specialinvoke r0.<javax.jmdns.impl.DNSOutgoing: void <init>(int,boolean,int)>($i0, 1, 1460);

        return;
    }
    public void <init>(int, boolean, int)
    {
        javax.jmdns.impl.DNSOutgoing r0;
        int $i0, $i1;
        boolean $z0;
        java.util.HashMap $r1;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream $r2;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        specialinvoke r0.<javax.jmdns.impl.DNSMessage: void <init>(int,int,boolean)>($i0, 0, $z0);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<javax.jmdns.impl.DNSOutgoing: java.util.Map _names> = $r1;

        if $i1 <= 0 goto label2;

        $i0 = $i1;

     label1:
        r0.<javax.jmdns.impl.DNSOutgoing: int _maxUDPPayload> = $i0;

        $r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke $r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>($i1, r0);

        r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes> = $r2;

        $r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke $r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>($i1, r0);

        r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes> = $r2;

        $r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke $r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>($i1, r0);

        r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes> = $r2;

        $r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke $r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>($i1, r0);

        r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes> = $r2;

        return;

     label2:
        $i0 = 1460;

        goto label1;
    }
    public void addAnswer(javax.jmdns.impl.DNSIncoming, javax.jmdns.impl.DNSRecord) throws java.io.IOException
    {
        javax.jmdns.impl.DNSOutgoing r0;
        javax.jmdns.impl.DNSIncoming $r1;
        javax.jmdns.impl.DNSRecord $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $r1 := @parameter0: javax.jmdns.impl.DNSIncoming;

        $r2 := @parameter1: javax.jmdns.impl.DNSRecord;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.DNSRecord: boolean suppressedBy(javax.jmdns.impl.DNSIncoming)>($r1);

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: void addAnswer(javax.jmdns.impl.DNSRecord,long)>($r2, 0L);

     label2:
        return;
    }
    public void addAnswer(javax.jmdns.impl.DNSRecord, long) throws java.io.IOException
    {
        javax.jmdns.impl.DNSOutgoing r0;
        javax.jmdns.impl.DNSRecord $r1;
        long $l0;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r2;
        int $i1, $i3;
        byte $b2;
        boolean $z0;
        byte[] $r3;
        java.util.List $r4;
        java.io.IOException $r5;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $l0 := @parameter1: long;

        if $r1 == null goto label3;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label1;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: boolean isExpired(long)>($l0);

        if $z0 != 0 goto label3;

     label1:
        r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>(512, r0);

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeRecord(javax.jmdns.impl.DNSRecord,long)>($r1, $l0);

        $r3 = virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: byte[] toByteArray()>();

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void close()>();

        $i1 = lengthof $r3;

        $i3 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int availableSpace()>();

        if $i1 >= $i3 goto label2;

        $r4 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _answers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        r2 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes>;

        $i1 = lengthof $r3;

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void write(byte[],int,int)>($r3, 0, $i1);

        return;

     label2:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("message full");

        throw $r5;

     label3:
        return;
    }
    public void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord) throws java.io.IOException
    {
        javax.jmdns.impl.DNSOutgoing r0;
        javax.jmdns.impl.DNSRecord $r1;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r2;
        int $i0, $i1;
        byte[] $r3;
        java.util.List $r4;
        java.io.IOException $r5;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>(512, r0);

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeRecord(javax.jmdns.impl.DNSRecord,long)>($r1, 0L);

        $r3 = virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: byte[] toByteArray()>();

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void close()>();

        $i0 = lengthof $r3;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int availableSpace()>();

        if $i0 >= $i1 goto label1;

        $r4 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _authoritativeAnswers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        r2 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes>;

        $i0 = lengthof $r3;

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        return;

     label1:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("message full");

        throw $r5;
    }
    public void addQuestion(javax.jmdns.impl.DNSQuestion) throws java.io.IOException
    {
        javax.jmdns.impl.DNSOutgoing r0;
        javax.jmdns.impl.DNSQuestion $r1;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r2;
        int $i0, $i1;
        byte[] $r3;
        java.util.List $r4;
        java.io.IOException $r5;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $r1 := @parameter0: javax.jmdns.impl.DNSQuestion;

        r2 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        specialinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>(512, r0);

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeQuestion(javax.jmdns.impl.DNSQuestion)>($r1);

        $r3 = virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: byte[] toByteArray()>();

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void close()>();

        $i0 = lengthof $r3;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int availableSpace()>();

        if $i0 >= $i1 goto label1;

        $r4 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _questions>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        r2 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes>;

        $i0 = lengthof $r3;

        virtualinvoke r2.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        return;

     label1:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("message full");

        throw $r5;
    }
    public int availableSpace()
    {
        javax.jmdns.impl.DNSOutgoing r0;
        int $i0, $i1;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream $r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $i0 = r0.<javax.jmdns.impl.DNSOutgoing: int _maxUDPPayload>;

        $i0 = $i0 + -12;

        $r1 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i0 = $i0 - $i1;

        $r1 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i0 = $i0 - $i1;

        $r1 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i0 = $i0 - $i1;

        $r1 = r0.<javax.jmdns.impl.DNSOutgoing: javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: int size()>();

        $i0 = $i0 - $i1;

        return $i0;
    }
    public byte[] data()
    {
        javax.jmdns.impl.DNSOutgoing r0;
        javax.jmdns.impl.DNSOutgoing$MessageOutputStream r1;
        long $l0;
        java.util.Map $r2;
        int $i1;
        boolean $z0;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.jmdns.impl.DNSQuestion r6;
        javax.jmdns.impl.DNSRecord r7;
        byte[] $r8;
        java.io.IOException $r9;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.Map _names>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        r1 = new javax.jmdns.impl.DNSOutgoing$MessageOutputStream;

        $i1 = r0.<javax.jmdns.impl.DNSOutgoing: int _maxUDPPayload>;

        specialinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void <init>(int,javax.jmdns.impl.DNSOutgoing)>($i1, r0);

        $z0 = r0.<javax.jmdns.impl.DNSOutgoing: boolean _multicast>;

        if $z0 == 0 goto label03;

        $i1 = 0;

     label01:
        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfQuestions()>();

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAnswers()>();

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAuthorities()>();

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAdditionals()>();

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeShort(int)>($i1);

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _questions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.impl.DNSQuestion) $r5;

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeQuestion(javax.jmdns.impl.DNSQuestion)>(r6);

        goto label02;

     label03:
        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        goto label01;

     label04:
        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _answers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeRecord(javax.jmdns.impl.DNSRecord,long)>(r7, $l0);

        goto label05;

     label06:
        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _authoritativeAnswers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeRecord(javax.jmdns.impl.DNSRecord,long)>(r7, $l0);

        goto label07;

     label08:
        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _additionals>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void writeRecord(javax.jmdns.impl.DNSRecord,long)>(r7, $l0);

        goto label09;

     label10:
        $r8 = virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: byte[] toByteArray()>();

     label11:
        virtualinvoke r1.<javax.jmdns.impl.DNSOutgoing$MessageOutputStream: void close()>();

     label12:
        return $r8;

     label13:
        $r9 := @caughtexception;

        return $r8;

        catch java.io.IOException from label11 to label12 with label13;
    }
    public java.net.InetSocketAddress getDestination()
    {
        javax.jmdns.impl.DNSOutgoing r0;
        java.net.InetSocketAddress r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        r1 = r0.<javax.jmdns.impl.DNSOutgoing: java.net.InetSocketAddress _destination>;

        return r1;
    }
    public int getMaxUDPPayload()
    {
        javax.jmdns.impl.DNSOutgoing r0;
        int i0;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        i0 = r0.<javax.jmdns.impl.DNSOutgoing: int _maxUDPPayload>;

        return i0;
    }
    public void setDestination(java.net.InetSocketAddress)
    {
        javax.jmdns.impl.DNSOutgoing r0;
        java.net.InetSocketAddress $r1;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        $r1 := @parameter0: java.net.InetSocketAddress;

        r0.<javax.jmdns.impl.DNSOutgoing: java.net.InetSocketAddress _destination> = $r1;

        return;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.DNSOutgoing r0;
        java.lang.StringBuffer r1;
        boolean $z0;
        java.lang.String $r2;
        int $i0;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.jmdns.impl.DNSQuestion r6;
        javax.jmdns.impl.DNSRecord r7;
        java.util.Map $r8;

        r0 := @this: javax.jmdns.impl.DNSOutgoing;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: boolean isQuery()>();

        if $z0 == 0 goto label10;

        $r2 = "dns[query:";

     label01:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" id=0x");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getId()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        if $i0 == 0 goto label04;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", flags=0x");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getFlags()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: boolean isResponse()>();

        if $z0 == 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":r");

     label02:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: boolean isAuthoritativeAnswer()>();

        if $z0 == 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":aa");

     label03:
        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: boolean isTruncated()>();

        if $z0 == 0 goto label04;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":tc");

     label04:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfQuestions()>();

        if $i0 <= 0 goto label05;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", questions=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfQuestions()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label05:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAnswers()>();

        if $i0 <= 0 goto label06;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", answers=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAnswers()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label06:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAuthorities()>();

        if $i0 <= 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", authorities=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAuthorities()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label07:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAdditionals()>();

        if $i0 <= 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", additionals=");

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAdditionals()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label08:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfQuestions()>();

        if $i0 <= 0 goto label11;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nquestions:");

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _questions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.jmdns.impl.DNSQuestion) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        goto label09;

     label10:
        $r2 = "dns[response:";

        goto label01;

     label11:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAnswers()>();

        if $i0 <= 0 goto label13;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nanswers:");

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _answers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        goto label12;

     label13:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAuthorities()>();

        if $i0 <= 0 goto label15;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nauthorities:");

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _authoritativeAnswers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        goto label14;

     label15:
        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSOutgoing: int getNumberOfAdditionals()>();

        if $i0 <= 0 goto label17;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nadditionals:");

        $r3 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.List _additionals>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.jmdns.impl.DNSRecord) $r5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        goto label16;

     label17:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nnames=");

        $r8 = r0.<javax.jmdns.impl.DNSOutgoing: java.util.Map _names>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
