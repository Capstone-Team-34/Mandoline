javax.jmdns.impl.DNSQuestion extends javax.jmdns.impl.DNSEntry
private static java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/DNSQuestion;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSQuestion: java.util.logging.Logger logger> = $r2;

        return;
    }
    void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean)
    {
        javax.jmdns.impl.DNSQuestion r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<javax.jmdns.impl.DNSEntry: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r1, $r2, $r3, $z0);

        return;
    }
    public static javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean)
    {
        java.lang.String $r0;
        javax.jmdns.impl.constants.DNSRecordType $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2;
        boolean $z0;
        int $i0;
        int[] $r3;
        javax.jmdns.impl.DNSQuestion $r4;
        javax.jmdns.impl.DNSQuestion$DNS4Address $r5;
        javax.jmdns.impl.DNSQuestion$DNS6Address $r6;
        javax.jmdns.impl.DNSQuestion$AllRecords $r7;
        javax.jmdns.impl.DNSQuestion$HostInformation $r8;
        javax.jmdns.impl.DNSQuestion$Pointer $r9;
        javax.jmdns.impl.DNSQuestion$Service $r10;
        javax.jmdns.impl.DNSQuestion$Text $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r2 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        $r3 = <javax.jmdns.impl.DNSQuestion$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType>;

        $i0 = virtualinvoke $r1.<javax.jmdns.impl.constants.DNSRecordType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            case 8: goto label9;
            default: goto label1;
        };

     label1:
        $r4 = new javax.jmdns.impl.DNSQuestion;

        specialinvoke $r4.<javax.jmdns.impl.DNSQuestion: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r4;

     label2:
        $r5 = new javax.jmdns.impl.DNSQuestion$DNS4Address;

        specialinvoke $r5.<javax.jmdns.impl.DNSQuestion$DNS4Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r5;

     label3:
        $r6 = new javax.jmdns.impl.DNSQuestion$DNS6Address;

        specialinvoke $r6.<javax.jmdns.impl.DNSQuestion$DNS6Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r6;

     label4:
        $r6 = new javax.jmdns.impl.DNSQuestion$DNS6Address;

        specialinvoke $r6.<javax.jmdns.impl.DNSQuestion$DNS6Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r6;

     label5:
        $r7 = new javax.jmdns.impl.DNSQuestion$AllRecords;

        specialinvoke $r7.<javax.jmdns.impl.DNSQuestion$AllRecords: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r7;

     label6:
        $r8 = new javax.jmdns.impl.DNSQuestion$HostInformation;

        specialinvoke $r8.<javax.jmdns.impl.DNSQuestion$HostInformation: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r8;

     label7:
        $r9 = new javax.jmdns.impl.DNSQuestion$Pointer;

        specialinvoke $r9.<javax.jmdns.impl.DNSQuestion$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r9;

     label8:
        $r10 = new javax.jmdns.impl.DNSQuestion$Service;

        specialinvoke $r10.<javax.jmdns.impl.DNSQuestion$Service: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r10;

     label9:
        $r11 = new javax.jmdns.impl.DNSQuestion$Text;

        specialinvoke $r11.<javax.jmdns.impl.DNSQuestion$Text: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean)>($r0, $r1, $r2, $z0);

        return $r11;
    }
    public void addAnswers(javax.jmdns.impl.JmDNSImpl, java.util.Set)
    {
        javax.jmdns.impl.DNSQuestion r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.Set r2;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        r2 := @parameter1: java.util.Set;

        return;
    }
    protected void addAnswersForServiceInfo(javax.jmdns.impl.JmDNSImpl, java.util.Set, javax.jmdns.impl.ServiceInfoImpl)
    {
        javax.jmdns.impl.DNSQuestion r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.util.Set r2;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        boolean $z0;
        java.lang.String $r4, $r5;
        javax.jmdns.impl.HostInfo $r6;
        javax.jmdns.impl.constants.DNSRecordClass $r7;
        java.util.Collection $r8;
        java.util.logging.Logger $r9;
        java.util.logging.Level $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: javax.jmdns.impl.ServiceInfoImpl;

        if $r3 == null goto label3;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: boolean isAnnounced()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getType()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: java.lang.String getTypeWithSubtype()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $r6 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r7 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r8 = virtualinvoke $r6.<javax.jmdns.impl.HostInfo: java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r7, 1, 3600);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r7 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r8 = virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int,javax.jmdns.impl.HostInfo)>($r7, 1, 3600, $r6);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

     label2:
        $r9 = <javax.jmdns.impl.DNSQuestion: java.util.logging.Logger logger>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r9.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r10);

        if $z0 == 0 goto label3;

        $r9 = <javax.jmdns.impl.DNSQuestion: java.util.logging.Logger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DNSQuestion(");

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").addAnswersForServiceInfo(): info: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void finer(java.lang.String)>($r4);

     label3:
        return;
    }
    boolean answeredBy(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSQuestion r0;
        javax.jmdns.impl.DNSEntry $r1;
        boolean $z0;
        java.lang.String $r2, $r3;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: boolean isSameRecordClass(javax.jmdns.impl.DNSEntry)>($r1);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: boolean isSameType(javax.jmdns.impl.DNSEntry)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSQuestion: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSQuestion r0;
        javax.jmdns.impl.JmDNSImpl $r1;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        return 0;
    }
    public boolean isExpired(long)
    {
        javax.jmdns.impl.DNSQuestion r0;
        long $l0;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $l0 := @parameter0: long;

        return 0;
    }
    public void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSQuestion r0;
        java.lang.StringBuilder $r1;

        r0 := @this: javax.jmdns.impl.DNSQuestion;

        $r1 := @parameter0: java.lang.StringBuilder;

        return;
    }
