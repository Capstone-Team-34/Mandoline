javax.jmdns.impl.DNSEntry extends java.lang.Object
private final javax.jmdns.impl.constants.DNSRecordClass _dnsClass
private final java.lang.String _key
private final java.lang.String _name
final java.util.Map _qualifiedNameMap
private final javax.jmdns.impl.constants.DNSRecordType _recordType
private final java.lang.String _type
private final boolean _unique
    void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean)
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.String $r1, r7, r8, $r9;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;
        java.util.Map $r4;
        javax.jmdns.ServiceInfo$Fields $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r10, $r11;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.jmdns.impl.DNSEntry: java.lang.String _name> = $r1;

        r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType _recordType> = $r2;

        r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass _dnsClass> = $r3;

        r0.<javax.jmdns.impl.DNSEntry: boolean _unique> = $z0;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getName()>();

        $r4 = staticinvoke <javax.jmdns.impl.ServiceInfoImpl: java.util.Map decodeQualifiedNameMapForType(java.lang.String)>($r1);

        r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap> = $r4;

        $r4 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r5 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Domain>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r1 = (java.lang.String) $r6;

        $r4 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r5 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Protocol>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.String) $r6;

        $r4 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r5 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Application>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.lang.String) $r6;

        $r4 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r5 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Instance>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r9 = (java.lang.String) $r6;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<javax.jmdns.impl.DNSEntry: java.lang.String _type> = $r1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _type>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<javax.jmdns.impl.DNSEntry: java.lang.String _key> = $r1;

        return;

     label4:
        r8 = "";

        goto label1;

     label5:
        r7 = "";

        goto label2;

     label6:
        $r1 = "";

        goto label3;
    }
    public int compareTo(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSEntry r0, $r1;
        byte[] $r2, $r3;
        int i0, $i1, $i2;
        byte $b3, $b4;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: byte[] toByteArray()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: byte[] toByteArray()>();

        i0 = 0;

        $i1 = lengthof $r2;

        $i2 = lengthof $r3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

     label1:
        if i0 >= $i1 goto label4;

        $b3 = $r2[i0];

        $b4 = $r3[i0];

        if $b3 <= $b4 goto label2;

        return 1;

     label2:
        $b3 = $r2[i0];

        $b4 = $r3[i0];

        if $b3 >= $b4 goto label3;

        return -1;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        i0 = lengthof $r2;

        $i1 = lengthof $r3;

        i0 = i0 - $i1;

        return i0;
    }
    public boolean equals(java.lang.Object)
    {
        javax.jmdns.impl.DNSEntry r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r3, $r4;
        javax.jmdns.impl.constants.DNSRecordType $r5, $r6;
        javax.jmdns.impl.constants.DNSRecordClass $r7, $r8;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSEntry;

        if $z0 == 0 goto label2;

        r2 = (javax.jmdns.impl.DNSEntry) $r1;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r4 = virtualinvoke r2.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r6 = virtualinvoke r2.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke $r5.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r8 = virtualinvoke r2.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        if $r7 != $r8 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;
    }
    public java.lang.String getKey()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _key>;

        if $r1 == null goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _key>;

        return $r1;

     label1:
        return "";
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _name>;

        if $r1 == null goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _name>;

        return $r1;

     label1:
        return "";
    }
    public java.util.Map getQualifiedNameMap()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.util.Map $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r1;
    }
    public javax.jmdns.impl.constants.DNSRecordClass getRecordClass()
    {
        javax.jmdns.impl.DNSEntry r0;
        javax.jmdns.impl.constants.DNSRecordClass $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass _dnsClass>;

        if $r1 == null goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass _dnsClass>;

        return $r1;

     label1:
        $r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN>;

        return $r1;
    }
    public javax.jmdns.impl.constants.DNSRecordType getRecordType()
    {
        javax.jmdns.impl.DNSEntry r0;
        javax.jmdns.impl.constants.DNSRecordType $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType _recordType>;

        if $r1 == null goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType _recordType>;

        return $r1;

     label1:
        $r1 = <javax.jmdns.impl.constants.DNSRecordType: javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE>;

        return $r1;
    }
    public java.lang.String getSubtype()
    {
        javax.jmdns.impl.DNSEntry r0;
        javax.jmdns.ServiceInfo$Fields $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r4;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.util.Map getQualifiedNameMap()>();

        $r1 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Subtype>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        return "";
    }
    public java.lang.String getType()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _type>;

        if $r1 == null goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _type>;

        return $r1;

     label1:
        return "";
    }
    public int hashCode()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.String $r1;
        int $i0, $i1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $i1 = virtualinvoke $r2.<javax.jmdns.impl.constants.DNSRecordType: int indexValue()>();

        $i0 = $i0 + $i1;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $i1 = virtualinvoke $r3.<javax.jmdns.impl.constants.DNSRecordClass: int indexValue()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    public boolean isDomainDiscoveryQuery()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.util.Map $r1;
        javax.jmdns.ServiceInfo$Fields $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Application>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("dns-sd");

        if $z0 == 0 goto label2;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Instance>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $r5 = "b";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = "db";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = "r";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = "dr";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = "lb";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
public abstract boolean isExpired(long) { 
// no body
} 
    public boolean isReverseLookup()
    {
        javax.jmdns.impl.DNSEntry r0;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: boolean isV4ReverseLookup()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: boolean isV6ReverseLookup()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean isSameEntry(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSEntry r0, $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        javax.jmdns.impl.constants.DNSRecordType $r4;
        javax.jmdns.impl.constants.DNSRecordClass $r5;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getKey()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: boolean matchRecordType(javax.jmdns.impl.constants.DNSRecordType)>($r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isSameRecordClass(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSEntry r0, $r1;
        javax.jmdns.impl.constants.DNSRecordClass $r2, $r3;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isSameType(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSEntry r0, $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2, $r3;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isServicesDiscoveryMetaQuery()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.util.Map $r1;
        javax.jmdns.ServiceInfo$Fields $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Application>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("dns-sd");

        if $z0 == 0 goto label1;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Instance>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("_services");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isUnique()
    {
        javax.jmdns.impl.DNSEntry r0;
        boolean z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        z0 = r0.<javax.jmdns.impl.DNSEntry: boolean _unique>;

        return z0;
    }
    public boolean isV4ReverseLookup()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.util.Map $r1;
        javax.jmdns.ServiceInfo$Fields $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Domain>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("in-addr.arpa");

        return $z0;
    }
    public boolean isV6ReverseLookup()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.util.Map $r1;
        javax.jmdns.ServiceInfo$Fields $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 = r0.<javax.jmdns.impl.DNSEntry: java.util.Map _qualifiedNameMap>;

        $r2 = <javax.jmdns.ServiceInfo$Fields: javax.jmdns.ServiceInfo$Fields Domain>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("ip6.arpa");

        return $z0;
    }
    public boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)
    {
        javax.jmdns.impl.DNSEntry r0;
        javax.jmdns.impl.constants.DNSRecordClass $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSRecordClass;

        $r2 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        if $r2 == $r1 goto label1;

        $r2 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY>;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        if $r2 == $r3 goto label1;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.constants.DNSRecordClass: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean matchRecordType(javax.jmdns.impl.constants.DNSRecordType)
    {
        javax.jmdns.impl.DNSEntry r0;
        javax.jmdns.impl.constants.DNSRecordType $r1, $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSRecordType;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.constants.DNSRecordType: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean sameSubtype(javax.jmdns.impl.DNSEntry)
    {
        javax.jmdns.impl.DNSEntry r0, $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: javax.jmdns.impl.DNSEntry;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getSubtype()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSEntry: java.lang.String getSubtype()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }
    protected void toByteArray(java.io.DataOutputStream) throws java.io.IOException
    {
        javax.jmdns.impl.DNSEntry r0;
        java.io.DataOutputStream $r1;
        java.lang.String $r2;
        byte[] $r3;
        javax.jmdns.impl.constants.DNSRecordType $r4;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordClass $r5;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: java.io.DataOutputStream;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        virtualinvoke $r1.<java.io.DataOutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $i0 = virtualinvoke $r4.<javax.jmdns.impl.constants.DNSRecordType: int indexValue()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $i0 = virtualinvoke $r5.<javax.jmdns.impl.constants.DNSRecordClass: int indexValue()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        return;
    }
    protected byte[] toByteArray()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.io.ByteArrayOutputStream r1;
        java.io.DataOutputStream r2;
        java.io.IOException r3;
        byte[] $r4;
        java.lang.InternalError $r5;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        r1 = new java.io.ByteArrayOutputStream;

     label1:
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        r2 = new java.io.DataOutputStream;

     label3:
        specialinvoke r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke r0.<javax.jmdns.impl.DNSEntry: void toByteArray(java.io.DataOutputStream)>(r2);

        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label4:
        return $r4;

     label5:
        r3 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>()>();

        throw $r5;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordType $r5;
        javax.jmdns.impl.constants.DNSRecordClass $r6;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(200);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type: ");

        $r5 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", class: ");

        $r6 = virtualinvoke r0.<javax.jmdns.impl.DNSEntry: javax.jmdns.impl.constants.DNSRecordClass getRecordClass()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $z0 = r0.<javax.jmdns.impl.DNSEntry: boolean _unique>;

        if $z0 == 0 goto label2;

        $r4 = "-unique,";

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name: ");

        $r4 = r0.<javax.jmdns.impl.DNSEntry: java.lang.String _name>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r0.<javax.jmdns.impl.DNSEntry: void toString(java.lang.StringBuilder)>(r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        $r4 = ",";

        goto label1;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSEntry r0;
        java.lang.StringBuilder $r1;

        r0 := @this: javax.jmdns.impl.DNSEntry;

        $r1 := @parameter0: java.lang.StringBuilder;

        return;
    }
