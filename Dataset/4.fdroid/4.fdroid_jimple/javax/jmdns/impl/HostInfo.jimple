javax.jmdns.impl.HostInfo extends java.lang.Object implements javax.jmdns.impl.DNSStatefulObject
private static java.util.logging.Logger logger
protected java.net.InetAddress _address
protected java.net.NetworkInterface _interfaze
protected java.lang.String _name
private final javax.jmdns.impl.HostInfo$HostInfoState _state
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/HostInfo;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.HostInfo: java.util.logging.Logger logger> = $r2;

        return;
    }
    private void <init>(java.net.InetAddress, java.lang.String, javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.InetAddress $r1;
        java.lang.String $r2;
        javax.jmdns.impl.JmDNSImpl $r3;
        java.lang.Exception r4;
        java.util.logging.Level $r5;
        java.net.NetworkInterface $r6;
        javax.jmdns.impl.HostInfo$HostInfoState $r7;
        java.util.logging.Logger $r8;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: java.net.InetAddress;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: javax.jmdns.impl.JmDNSImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new javax.jmdns.impl.HostInfo$HostInfoState;

        specialinvoke $r7.<javax.jmdns.impl.HostInfo$HostInfoState: void <init>(javax.jmdns.impl.JmDNSImpl)>($r3);

        r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state> = $r7;

        r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress _address> = $r1;

        r0.<javax.jmdns.impl.HostInfo: java.lang.String _name> = $r2;

        if $r1 == null goto label4;

     label1:
        $r6 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>($r1);

        r0.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface _interfaze> = $r6;

     label2:
        return;

     label3:
        r4 := @caughtexception;

        $r8 = <javax.jmdns.impl.HostInfo: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r5, "LocalHostInfo() exception ", r4);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    private javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0, $z1;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordClass $r1;
        java.net.InetAddress $r2;
        javax.jmdns.impl.DNSRecord$IPv4Address $r3;
        java.lang.String $r4;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = $r2 instanceof java.net.Inet4Address;

        if $z1 == 0 goto label1;

        $r3 = new javax.jmdns.impl.DNSRecord$IPv4Address;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        specialinvoke $r3.<javax.jmdns.impl.DNSRecord$IPv4Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.net.InetAddress)>($r4, $r1, $z0, $i0, $r2);

        return $r3;

     label1:
        return null;
    }
    private javax.jmdns.impl.DNSRecord$Pointer getDNS4ReverseAddressRecord(boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0, $z1;
        int $i0;
        java.net.InetAddress $r1;
        javax.jmdns.impl.DNSRecord$Pointer $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r6;
        javax.jmdns.impl.constants.DNSRecordClass $r5;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = $r1 instanceof java.net.Inet4Address;

        if $z1 == 0 goto label1;

        $r2 = new javax.jmdns.impl.DNSRecord$Pointer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r4 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".in-addr.arpa.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        specialinvoke $r2.<javax.jmdns.impl.DNSRecord$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String)>($r4, $r5, $z0, $i0, $r6);

        return $r2;

     label1:
        return null;
    }
    private javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0, $z1;
        int $i0;
        javax.jmdns.impl.constants.DNSRecordClass $r1;
        java.net.InetAddress $r2;
        javax.jmdns.impl.DNSRecord$IPv6Address $r3;
        java.lang.String $r4;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = $r2 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label1;

        $r3 = new javax.jmdns.impl.DNSRecord$IPv6Address;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        $r1 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        specialinvoke $r3.<javax.jmdns.impl.DNSRecord$IPv6Address: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.net.InetAddress)>($r4, $r1, $z0, $i0, $r2);

        return $r3;

     label1:
        return null;
    }
    private javax.jmdns.impl.DNSRecord$Pointer getDNS6ReverseAddressRecord(boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0, $z1;
        int $i0;
        java.net.InetAddress $r1;
        javax.jmdns.impl.DNSRecord$Pointer $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r6;
        javax.jmdns.impl.constants.DNSRecordClass $r5;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = $r1 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label1;

        $r2 = new javax.jmdns.impl.DNSRecord$Pointer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r4 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ip6.arpa.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = <javax.jmdns.impl.constants.DNSRecordClass: javax.jmdns.impl.constants.DNSRecordClass CLASS_IN>;

        $r6 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        specialinvoke $r2.<javax.jmdns.impl.DNSRecord$Pointer: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordClass,boolean,int,java.lang.String)>($r4, $r5, $z0, $i0, $r6);

        return $r2;

     label1:
        return null;
    }
    private static java.net.InetAddress loopbackAddress()
    {
        java.net.UnknownHostException r0;
        java.net.InetAddress $r1;

     label1:
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(null);

     label2:
        return $r1;

     label3:
        r0 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }
    public static javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress, javax.jmdns.impl.JmDNSImpl, java.lang.String)
    {
        java.net.InetAddress $r0, r5, $r10;
        javax.jmdns.impl.JmDNSImpl $r1;
        java.lang.String $r2, r4, $r6;
        java.io.IOException r3;
        boolean $z0;
        java.util.logging.Logger $r7;
        int $i0;
        java.lang.StringBuilder $r8;
        javax.jmdns.impl.HostInfo r9;
        javax.jmdns.NetworkTopologyDiscovery $r11;
        java.net.InetAddress[] $r12;
        java.util.logging.Level $r13;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 := @parameter1: javax.jmdns.impl.JmDNSImpl;

        $r2 := @parameter2: java.lang.String;

        if $r2 == null goto label20;

        r4 = $r2;

     label01:
        r5 = $r0;

        if $r0 != null goto label08;

     label02:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("net.mdns.interface");

     label03:
        if $r6 == null goto label21;

     label04:
        r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6);

     label05:
        $z0 = virtualinvoke r5.<java.net.InetAddress: boolean isLoopbackAddress()>();

     label06:
        if $z0 == 0 goto label08;

        $r7 = <javax.jmdns.impl.HostInfo: java.util.logging.Logger logger>;

     label07:
        virtualinvoke $r7.<java.util.logging.Logger: void warning(java.lang.String)>("Could not find any address beside the loopback.");

     label08:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

     label09:
        if $i0 != 0 goto label11;

     label10:
        r4 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostName()>();

     label11:
        $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("in-addr.arpa");

     label12:
        if $z0 != 0 goto label15;

     label13:
        $r6 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

     label14:
        if $z0 == 0 goto label18;

     label15:
        if $r2 == null goto label27;

     label16:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

     label17:
        if $i0 <= 0 goto label27;

        r4 = $r2;

     label18:
        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>(".local");

        if $i0 <= 0 goto label19;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label19:
        $r2 = virtualinvoke r4.<java.lang.String: java.lang.String replace(char,char)>(46, 45);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".local.");

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = new javax.jmdns.impl.HostInfo;

        specialinvoke r9.<javax.jmdns.impl.HostInfo: void <init>(java.net.InetAddress,java.lang.String,javax.jmdns.impl.JmDNSImpl)>(r5, $r2, $r1);

        return r9;

     label20:
        r4 = "";

        goto label01;

     label21:
        $r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

     label22:
        r5 = $r10;

     label23:
        $z0 = virtualinvoke $r10.<java.net.InetAddress: boolean isLoopbackAddress()>();

     label24:
        if $z0 == 0 goto label05;

     label25:
        $r11 = staticinvoke <javax.jmdns.NetworkTopologyDiscovery$Factory: javax.jmdns.NetworkTopologyDiscovery getInstance()>();

        $r12 = interfaceinvoke $r11.<javax.jmdns.NetworkTopologyDiscovery: java.net.InetAddress[] getInetAddresses()>();

     label26:
        $i0 = lengthof $r12;

        if $i0 <= 0 goto label05;

        r5 = $r12[0];

        goto label05;

     label27:
        r4 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label28:
        goto label18;

     label29:
        r3 := @caughtexception;

        $r7 = <javax.jmdns.impl.HostInfo: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not intialize the host network interface on ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("because of an error: ");

        r4 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, r4, r3);

        r5 = staticinvoke <javax.jmdns.impl.HostInfo: java.net.InetAddress loopbackAddress()>();

        if $r2 == null goto label30;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label30;

        r4 = $r2;

        goto label18;

     label30:
        r4 = "computer";

        goto label18;

        catch java.io.IOException from label02 to label03 with label29;
        catch java.io.IOException from label04 to label05 with label29;
        catch java.io.IOException from label05 to label06 with label29;
        catch java.io.IOException from label07 to label09 with label29;
        catch java.io.IOException from label10 to label11 with label29;
        catch java.io.IOException from label11 to label12 with label29;
        catch java.io.IOException from label13 to label14 with label29;
        catch java.io.IOException from label16 to label17 with label29;
        catch java.io.IOException from label21 to label22 with label29;
        catch java.io.IOException from label23 to label24 with label29;
        catch java.io.IOException from label25 to label26 with label29;
        catch java.io.IOException from label27 to label28 with label29;
    }
    public boolean advanceState(javax.jmdns.impl.tasks.DNSTask)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r2;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo$HostInfoState: boolean advanceState(javax.jmdns.impl.tasks.DNSTask)>($r1);

        return $z0;
    }
    public java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass, boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.constants.DNSRecordClass $r1;
        boolean $z0, $z1;
        int $i0;
        java.util.ArrayList r2;
        javax.jmdns.impl.DNSRecord$Address $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean,int)>($z0, $i0);

        if $r3 == null goto label1;

        $z1 = virtualinvoke $r3.<javax.jmdns.impl.DNSRecord: boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)>($r1);

        if $z1 == 0 goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean,int)>($z0, $i0);

        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.DNSRecord: boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass)>($r1);

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        return r2;
    }
    public void associateWithTask(javax.jmdns.impl.tasks.DNSTask, javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.constants.DNSState $r2;
        javax.jmdns.impl.HostInfo$HostInfoState $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSState;

        $r3 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        virtualinvoke $r3.<javax.jmdns.impl.HostInfo$HostInfoState: void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>($r1, $r2);

        return;
    }
    public boolean cancelState()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean cancelState()>();

        return $z0;
    }
    public boolean closeState()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean closeState()>();

        return $z0;
    }
    public boolean conflictWithRecord(javax.jmdns.impl.DNSRecord$Address)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.DNSRecord$Address $r1, $r3;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord$Address;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord$Address: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord$Address: boolean isUnique()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.constants.DNSRecordType,boolean,int)>($r2, $z0, 3600);

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.DNSRecord$Address: boolean sameType(javax.jmdns.impl.DNSRecord)>($r1);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.DNSRecord$Address: boolean sameName(javax.jmdns.impl.DNSRecord)>($r1);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.DNSRecord$Address: boolean sameValue(javax.jmdns.impl.DNSRecord)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.constants.DNSRecordType, boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.constants.DNSRecordType $r1;
        boolean $z0;
        int $i0, $i1;
        int[] $r2;
        javax.jmdns.impl.DNSRecord$Address $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSRecordType;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r2 = <javax.jmdns.impl.HostInfo$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.constants.DNSRecordType: int ordinal()>();

        $i1 = $r2[$i1];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean,int)>($z0, $i0);

        return $r3;

     label3:
        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean,int)>($z0, $i0);

        return $r3;
    }
    javax.jmdns.impl.DNSRecord$Pointer getDNSReverseAddressRecord(javax.jmdns.impl.constants.DNSRecordType, boolean, int)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.constants.DNSRecordType $r1;
        boolean $z0;
        int $i0, $i1;
        int[] $r2;
        javax.jmdns.impl.DNSRecord$Pointer $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.constants.DNSRecordType;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r2 = <javax.jmdns.impl.HostInfo$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType>;

        $i1 = virtualinvoke $r1.<javax.jmdns.impl.constants.DNSRecordType: int ordinal()>();

        $i1 = $r2[$i1];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Pointer getDNS4ReverseAddressRecord(boolean,int)>($z0, $i0);

        return $r3;

     label3:
        $r3 = specialinvoke r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Pointer getDNS6ReverseAddressRecord(boolean,int)>($z0, $i0);

        return $r3;
    }
    java.net.Inet4Address getInet4Address()
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.InetAddress $r1;
        boolean $z0;
        java.net.Inet4Address $r2;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z0 = $r1 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $r1 = r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress _address>;

        $r2 = (java.net.Inet4Address) $r1;

        return $r2;

     label1:
        return null;
    }
    java.net.Inet6Address getInet6Address()
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.InetAddress $r1;
        boolean $z0;
        java.net.Inet6Address $r2;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z0 = $r1 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label1;

        $r1 = r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress _address>;

        $r2 = (java.net.Inet6Address) $r1;

        return $r2;

     label1:
        return null;
    }
    public java.net.InetAddress getInetAddress()
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.InetAddress r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        r1 = r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress _address>;

        return r1;
    }
    public java.net.NetworkInterface getInterface()
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.NetworkInterface r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        r1 = r0.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface _interfaze>;

        return r1;
    }
    public java.lang.String getName()
    {
        javax.jmdns.impl.HostInfo r0;
        java.lang.String r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        r1 = r0.<javax.jmdns.impl.HostInfo: java.lang.String _name>;

        return r1;
    }
    java.lang.String incrementHostName()
    {
        javax.jmdns.impl.HostInfo r0;
        java.lang.String $r1;
        javax.jmdns.impl.NameRegister$NameType $r2;
        javax.jmdns.impl.NameRegister $r3;
        java.net.InetAddress $r4;
        java.lang.Throwable $r5;

        r0 := @this: javax.jmdns.impl.HostInfo;

        entermonitor r0;

     label1:
        $r3 = staticinvoke <javax.jmdns.impl.NameRegister$Factory: javax.jmdns.impl.NameRegister getRegistry()>();

        $r4 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r1 = r0.<javax.jmdns.impl.HostInfo: java.lang.String _name>;

        $r2 = <javax.jmdns.impl.NameRegister$NameType: javax.jmdns.impl.NameRegister$NameType HOST>;

        $r1 = interfaceinvoke $r3.<javax.jmdns.impl.NameRegister: java.lang.String incrementName(java.net.InetAddress,java.lang.String,javax.jmdns.impl.NameRegister$NameType)>($r4, $r1, $r2);

        r0.<javax.jmdns.impl.HostInfo: java.lang.String _name> = $r1;

        $r1 = r0.<javax.jmdns.impl.HostInfo: java.lang.String _name>;

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean isAnnounced()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isAnnounced()>();

        return $z0;
    }
    public boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask, javax.jmdns.impl.constants.DNSState)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.constants.DNSState $r2;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSState;

        $r3 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r3.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState)>($r1, $r2);

        return $z0;
    }
    public boolean isCanceled()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isCanceled()>();

        return $z0;
    }
    public boolean isCanceling()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isCanceling()>();

        return $z0;
    }
    public boolean isClosed()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isClosed()>();

        return $z0;
    }
    public boolean isClosing()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isClosing()>();

        return $z0;
    }
    public boolean isProbing()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean isProbing()>();

        return $z0;
    }
    public boolean recoverState()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean recoverState()>();

        return $z0;
    }
    public void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)
    {
        javax.jmdns.impl.HostInfo r0;
        javax.jmdns.impl.tasks.DNSTask $r1;
        javax.jmdns.impl.HostInfo$HostInfoState $r2;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: javax.jmdns.impl.tasks.DNSTask;

        $r2 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        virtualinvoke $r2.<javax.jmdns.impl.HostInfo$HostInfoState: void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask)>($r1);

        return;
    }
    public boolean revertState()
    {
        javax.jmdns.impl.HostInfo r0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean revertState()>();

        return $z0;
    }
    boolean shouldIgnorePacket(java.net.DatagramPacket)
    {
        javax.jmdns.impl.HostInfo r0;
        java.net.DatagramPacket $r1;
        boolean z0, $z1;
        java.net.InetAddress $r2, $r3;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $r1 := @parameter0: java.net.DatagramPacket;

        z0 = 0;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r2 == null goto label3;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>();

        if $z1 == 0 goto label2;

     label1:
        $z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label2:
        $z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z1 == 0 goto label4;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z1 != 0 goto label4;

        return 1;

     label3:
        return 0;

     label4:
        return z0;
    }
    public java.lang.String toString()
    {
        javax.jmdns.impl.HostInfo r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.net.NetworkInterface $r3;
        java.net.InetAddress $r4;
        javax.jmdns.impl.HostInfo$HostInfoState $r5;

        r0 := @this: javax.jmdns.impl.HostInfo;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(1024);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("local host info[");

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

        if $r2 == null goto label4;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.lang.String getName()>();

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface getInterface()>();

        if $r3 == null goto label5;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.NetworkInterface getInterface()>();

        $r2 = virtualinvoke $r3.<java.net.NetworkInterface: java.lang.String getDisplayName()>();

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r4 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        if $r4 == null goto label6;

        $r4 = virtualinvoke r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress getInetAddress()>();

        $r2 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label4:
        $r2 = "no name";

        goto label1;

     label5:
        $r2 = "???";

        goto label2;

     label6:
        $r2 = "no address";

        goto label3;
    }
    public boolean waitForAnnounced(long)
    {
        javax.jmdns.impl.HostInfo r0;
        long $l0;
        boolean $z0;
        javax.jmdns.impl.HostInfo$HostInfoState $r1;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $l0 := @parameter0: long;

        $r1 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.HostInfo$HostInfoState: boolean waitForAnnounced(long)>($l0);

        return $z0;
    }
    public boolean waitForCanceled(long)
    {
        javax.jmdns.impl.HostInfo r0;
        long $l0;
        boolean $z0;
        java.net.InetAddress $r1;
        javax.jmdns.impl.HostInfo$HostInfoState $r2;

        r0 := @this: javax.jmdns.impl.HostInfo;

        $l0 := @parameter0: long;

        $r1 = r0.<javax.jmdns.impl.HostInfo: java.net.InetAddress _address>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = r0.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo$HostInfoState _state>;

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo$HostInfoState: boolean waitForCanceled(long)>($l0);

        return $z0;
    }
