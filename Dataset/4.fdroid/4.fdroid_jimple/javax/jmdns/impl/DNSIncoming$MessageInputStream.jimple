javax.jmdns.impl.DNSIncoming$MessageInputStream extends java.io.ByteArrayInputStream
private static java.util.logging.Logger logger1
final java.util.Map _names
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/DNSIncoming$MessageInputStream;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.logging.Logger logger1> = $r2;

        return;
    }
    public void <init>(byte[], int)
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        specialinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: void <init>(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void <init>(byte[], int, int)
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        java.util.HashMap $r2;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r1, $i0, $i1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.Map _names> = $r2;

        return;
    }
    public byte[] readBytes(int)
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0;
        byte[] r1;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 := @parameter0: int;

        r1 = newarray (byte)[$i0];

        virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return r1;
    }
    public int readInt()
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $i0 = $i0 << 16;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedShort()>();

        $i0 = $i0 | $i1;

        return $i0;
    }
    public java.lang.String readName()
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        java.lang.StringBuilder r1, $r8;
        java.util.HashMap r2;
        int i0, $i1;
        boolean z0, $z1;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.Integer r6;
        java.util.Map $r7;
        java.lang.String $r9;
        int[] $r10;
        javax.jmdns.impl.constants.DNSLabel $r11;
        java.util.logging.Logger $r12;
        java.util.Collection $r13;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label01:
        if z0 != 0 goto label02;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        if $i1 != 0 goto label04;

     label02:
        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label14;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Integer) $r5;

        $r7 = r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.Map _names>;

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r8 = (java.lang.StringBuilder) $r5;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r9);

        goto label03;

     label04:
        $r10 = <javax.jmdns.impl.DNSIncoming$1: int[] $SwitchMap$javax$jmdns$impl$constants$DNSLabel>;

        $r11 = staticinvoke <javax.jmdns.impl.constants.DNSLabel: javax.jmdns.impl.constants.DNSLabel labelForByte(int)>($i1);

        i0 = virtualinvoke $r11.<javax.jmdns.impl.constants.DNSLabel: int ordinal()>();

        i0 = $r10[i0];

        lookupswitch(i0)
        {
            case 1: goto label06;
            case 2: goto label09;
            case 3: goto label13;
            default: goto label05;
        };

     label05:
        $r12 = <javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.logging.Logger logger1>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported dns label type: \'");

        $i1 = $i1 & 192;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void severe(java.lang.String)>($r9);

        goto label01;

     label06:
        i0 = r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int pos>;

        i0 = i0 + -1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readUTF(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.StringBuilder) $r5;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label07;

     label08:
        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r8);

        goto label01;

     label09:
        $i1 = staticinvoke <javax.jmdns.impl.constants.DNSLabel: int labelValue(int)>($i1);

        $i1 = $i1 << 8;

        i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i1 = $i1 | i0;

        $r7 = r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.Map _names>;

        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r9 = (java.lang.String) $r5;

        if $r9 != null goto label10;

        $r12 = <javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.logging.Logger logger1>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad domain name: possible circular name detected. Bad offset: 0x");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at 0x");

        $i1 = r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int pos>;

        $i1 = $i1 + -2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void severe(java.lang.String)>($r9);

        $r9 = "";

     label10:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label12;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.StringBuilder) $r5;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label11;

     label12:
        z0 = 1;

        goto label01;

     label13:
        $r12 = <javax.jmdns.impl.DNSIncoming$MessageInputStream: java.util.logging.Logger logger1>;

        virtualinvoke $r12.<java.util.logging.Logger: void severe(java.lang.String)>("Extended label are not currently supported.");

        goto label01;

     label14:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
    public java.lang.String readNonNameString()
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $r1 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: java.lang.String readUTF(int)>($i0);

        return $r1;
    }
    public java.lang.String readUTF(int)
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0, i1, $i2, i3, $i4;
        java.lang.StringBuilder r1;
        char $c5;
        java.lang.String $r2;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 := @parameter0: int;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label6;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        i3 = $i2;

        $i4 = $i2 >> 4;

        lookupswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label5;
            default: goto label2;
        };

     label2:
        i3 = $i2 & 63;

        i3 = i3 << 4;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i2 = $i2 & 15;

        i3 = i3 | $i2;

        i1 = i1 + 1;

     label3:
        $c5 = (char) i3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i1 = i1 + 1;

        goto label1;

     label4:
        i3 = $i2 & 31;

        i3 = i3 << 6;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i2 = $i2 & 63;

        i3 = i3 | $i2;

        i1 = i1 + 1;

        goto label3;

     label5:
        i3 = $i2 & 15;

        i3 = i3 << 12;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i2 = $i2 & 63;

        $i2 = $i2 << 6;

        i3 = i3 | $i2;

        $i2 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i2 = $i2 & 63;

        i3 = i3 | $i2;

        i1 = i1 + 1;

        i1 = i1 + 1;

        goto label3;

     label6:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public int readUnsignedByte()
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int read()>();

        $i0 = $i0 & 255;

        return $i0;
    }
    public int readUnsignedShort()
    {
        javax.jmdns.impl.DNSIncoming$MessageInputStream r0;
        int $i0, $i1;

        r0 := @this: javax.jmdns.impl.DNSIncoming$MessageInputStream;

        $i0 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i0 = $i0 << 8;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSIncoming$MessageInputStream: int readUnsignedByte()>();

        $i0 = $i0 | $i1;

        return $i0;
    }
