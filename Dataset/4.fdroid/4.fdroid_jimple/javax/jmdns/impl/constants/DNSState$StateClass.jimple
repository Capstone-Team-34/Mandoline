javax.jmdns.impl.constants.DNSState$StateClass extends java.lang.Enum
private static final javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES
public static final enum javax.jmdns.impl.constants.DNSState$StateClass announced
public static final enum javax.jmdns.impl.constants.DNSState$StateClass announcing
public static final enum javax.jmdns.impl.constants.DNSState$StateClass canceled
public static final enum javax.jmdns.impl.constants.DNSState$StateClass canceling
public static final enum javax.jmdns.impl.constants.DNSState$StateClass closed
public static final enum javax.jmdns.impl.constants.DNSState$StateClass closing
public static final enum javax.jmdns.impl.constants.DNSState$StateClass probing
    static void <clinit>()
    {
        javax.jmdns.impl.constants.DNSState$StateClass $r0;
        javax.jmdns.impl.constants.DNSState$StateClass[] $r1;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("probing", 0);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass probing> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("announcing", 1);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass announcing> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("announced", 2);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass announced> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("canceling", 3);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass canceling> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("canceled", 4);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass canceled> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("closing", 5);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass closing> = $r0;

        $r0 = new javax.jmdns.impl.constants.DNSState$StateClass;

        specialinvoke $r0.<javax.jmdns.impl.constants.DNSState$StateClass: void <init>(java.lang.String,int)>("closed", 6);

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass closed> = $r0;

        $r1 = newarray (javax.jmdns.impl.constants.DNSState$StateClass)[7];

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass probing>;

        $r1[0] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass announcing>;

        $r1[1] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass announced>;

        $r1[2] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass canceling>;

        $r1[3] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass canceled>;

        $r1[4] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass closing>;

        $r1[5] = $r0;

        $r0 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass closed>;

        $r1[6] = $r0;

        <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int)
    {
        javax.jmdns.impl.constants.DNSState$StateClass r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: javax.jmdns.impl.constants.DNSState$StateClass;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }
    public static javax.jmdns.impl.constants.DNSState$StateClass valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        javax.jmdns.impl.constants.DNSState$StateClass $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ljavax/jmdns/impl/constants/DNSState$StateClass;", $r0);

        $r2 = (javax.jmdns.impl.constants.DNSState$StateClass) $r1;

        return $r2;
    }
    public static javax.jmdns.impl.constants.DNSState$StateClass[] values()
    {
        java.lang.Object $r0;
        javax.jmdns.impl.constants.DNSState$StateClass[] $r1;

        $r1 = <javax.jmdns.impl.constants.DNSState$StateClass: javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (javax.jmdns.impl.constants.DNSState$StateClass[]) $r0;

        return $r1;
    }
