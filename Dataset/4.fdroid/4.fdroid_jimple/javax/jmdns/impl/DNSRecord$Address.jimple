javax.jmdns.impl.DNSRecord$Address extends javax.jmdns.impl.DNSRecord
private static java.util.logging.Logger logger1
java.net.InetAddress _addr
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Ljavax/jmdns/impl/DNSRecord$Address;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <javax.jmdns.impl.DNSRecord$Address: java.util.logging.Logger logger1> = $r2;

        return;
    }
    protected void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean, int, java.net.InetAddress)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;
        int $i0;
        java.net.InetAddress $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.net.InetAddress;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r1, $r2, $r3, $z0, $i0);

        r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress _addr> = $r4;

        return;
    }
    protected void <init>(java.lang.String, javax.jmdns.impl.constants.DNSRecordType, javax.jmdns.impl.constants.DNSRecordClass, boolean, int, byte[])
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        java.lang.String $r1;
        javax.jmdns.impl.constants.DNSRecordType $r2;
        javax.jmdns.impl.constants.DNSRecordClass $r3;
        boolean $z0;
        int $i0;
        byte[] $r4;
        java.net.UnknownHostException r5;
        java.util.logging.Level $r6;
        java.net.InetAddress $r7;
        java.util.logging.Logger $r8;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: javax.jmdns.impl.constants.DNSRecordType;

        $r3 := @parameter2: javax.jmdns.impl.constants.DNSRecordClass;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r4 := @parameter5: byte[];

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void <init>(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean,int)>($r1, $r2, $r3, $z0, $i0);

     label1:
        $r7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r4);

     label2:
        r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress _addr> = $r7;

        return;

     label3:
        r5 := @caughtexception;

        $r8 = <javax.jmdns.impl.DNSRecord$Address: java.util.logging.Logger logger1>;

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, "Address() exception ", r5);

        return;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }
    java.net.InetAddress getAddress()
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        java.net.InetAddress r1;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        r1 = r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress _addr>;

        return r1;
    }
    public javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.ServiceInfo $r2;
        javax.jmdns.impl.ServiceInfoImpl $r3;
        javax.jmdns.impl.ServiceEventImpl $r4;
        java.lang.String $r5, $r6;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: javax.jmdns.ServiceInfo getServiceInfo(boolean)>(0);

        $r3 = (javax.jmdns.impl.ServiceInfoImpl) $r2;

        virtualinvoke $r3.<javax.jmdns.impl.ServiceInfoImpl: void setDns(javax.jmdns.impl.JmDNSImpl)>($r1);

        $r4 = new javax.jmdns.impl.ServiceEventImpl;

        $r5 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getType()>();

        $r6 = virtualinvoke $r2.<javax.jmdns.ServiceInfo: java.lang.String getName()>();

        specialinvoke $r4.<javax.jmdns.impl.ServiceEventImpl: void <init>(javax.jmdns.impl.JmDNSImpl,java.lang.String,java.lang.String,javax.jmdns.ServiceInfo)>($r1, $r5, $r6, $r2);

        return $r4;
    }
    public javax.jmdns.ServiceInfo getServiceInfo(boolean)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        boolean $z0;
        javax.jmdns.impl.ServiceInfoImpl r1;
        java.util.Map $r2;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $z0 := @parameter0: boolean;

        r1 = new javax.jmdns.impl.ServiceInfoImpl;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.util.Map getQualifiedNameMap()>();

        specialinvoke r1.<javax.jmdns.impl.ServiceInfoImpl: void <init>(java.util.Map,int,int,int,boolean,byte[])>($r2, 0, 0, 0, $z0, null);

        return r1;
    }
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl, long)
    {
        javax.jmdns.impl.DNSRecord$Address r0, $r4;
        javax.jmdns.impl.JmDNSImpl $r1;
        long $l0;
        javax.jmdns.impl.HostInfo $r2;
        boolean $z0;
        javax.jmdns.impl.constants.DNSRecordType $r3;
        int $i1;
        java.util.logging.Logger $r5;
        javax.jmdns.impl.DNSCache $r6;
        java.util.Map $r7;
        java.util.Collection $r8;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        javax.jmdns.ServiceInfo r11;
        javax.jmdns.impl.ServiceInfoImpl r12;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $l0 := @parameter1: long;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: boolean conflictWithRecord(javax.jmdns.impl.DNSRecord$Address)>(r0);

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: javax.jmdns.impl.constants.DNSRecordType getRecordType()>();

        $z0 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: boolean isUnique()>();

        $r4 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.constants.DNSRecordType,boolean,int)>($r3, $z0, 3600);

        if $r4 == null goto label4;

        $i1 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: int compareTo(javax.jmdns.impl.DNSEntry)>($r4);

        if $i1 != 0 goto label1;

        $r5 = <javax.jmdns.impl.DNSRecord$Address: java.util.logging.Logger logger1>;

        virtualinvoke $r5.<java.util.logging.Logger: void finer(java.lang.String)>("handleQuery() Ignoring an identical address query");

        return 0;

     label1:
        $r5 = <javax.jmdns.impl.DNSRecord$Address: java.util.logging.Logger logger1>;

        virtualinvoke $r5.<java.util.logging.Logger: void finer(java.lang.String)>("handleQuery() Conflicting query detected.");

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isProbing()>();

        if $z0 == 0 goto label3;

        if $i1 <= 0 goto label3;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        virtualinvoke $r2.<javax.jmdns.impl.HostInfo: java.lang.String incrementHostName()>();

        $r6 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r6.<javax.jmdns.impl.DNSCache: void clear()>();

        $r7 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (javax.jmdns.ServiceInfo) $r10;

        r12 = (javax.jmdns.impl.ServiceInfoImpl) r11;

        virtualinvoke r12.<javax.jmdns.impl.ServiceInfoImpl: boolean revertState()>();

        goto label2;

     label3:
        virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean revertState()>();

        return 1;

     label4:
        return 0;
    }
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        javax.jmdns.impl.JmDNSImpl $r1;
        javax.jmdns.impl.HostInfo $r2;
        boolean $z0;
        java.util.logging.Logger $r3;
        javax.jmdns.impl.DNSCache $r4;
        java.util.Map $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        javax.jmdns.ServiceInfo r9;
        javax.jmdns.impl.ServiceInfoImpl r10;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: javax.jmdns.impl.JmDNSImpl;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        $z0 = virtualinvoke $r2.<javax.jmdns.impl.HostInfo: boolean conflictWithRecord(javax.jmdns.impl.DNSRecord$Address)>(r0);

        if $z0 == 0 goto label3;

        $r3 = <javax.jmdns.impl.DNSRecord$Address: java.util.logging.Logger logger1>;

        virtualinvoke $r3.<java.util.logging.Logger: void finer(java.lang.String)>("handleResponse() Denial detected");

        $z0 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean isProbing()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.HostInfo getLocalHost()>();

        virtualinvoke $r2.<javax.jmdns.impl.HostInfo: java.lang.String incrementHostName()>();

        $r4 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: javax.jmdns.impl.DNSCache getCache()>();

        virtualinvoke $r4.<javax.jmdns.impl.DNSCache: void clear()>();

        $r5 = virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: java.util.Map getServices()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.jmdns.ServiceInfo) $r8;

        r10 = (javax.jmdns.impl.ServiceInfoImpl) r9;

        virtualinvoke r10.<javax.jmdns.impl.ServiceInfoImpl: boolean revertState()>();

        goto label1;

     label2:
        virtualinvoke $r1.<javax.jmdns.impl.JmDNSImpl: boolean revertState()>();

        return 1;

     label3:
        return 0;
    }
    public boolean isSingleValued()
    {
        javax.jmdns.impl.DNSRecord$Address r0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        return 0;
    }
    boolean sameName(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        javax.jmdns.impl.DNSRecord $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<javax.jmdns.impl.DNSRecord: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        return $z0;
    }
    boolean sameValue(javax.jmdns.impl.DNSRecord)
    {
        javax.jmdns.impl.DNSRecord$Address r0, r2;
        javax.jmdns.impl.DNSRecord $r1;
        boolean $z0;
        java.net.InetAddress $r3, $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: javax.jmdns.impl.DNSRecord;

        $z0 = $r1 instanceof javax.jmdns.impl.DNSRecord$Address;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.jmdns.impl.DNSRecord$Address) $r1;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        if $r3 != null goto label2;

        $r3 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        if $r3 != null goto label3;

     label2:
        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        $r4 = virtualinvoke r2.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        $z0 = virtualinvoke $r3.<java.net.InetAddress: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label3:
        return 0;
    }
    protected void toByteArray(java.io.DataOutputStream) throws java.io.IOException
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        java.io.DataOutputStream $r1;
        java.net.InetAddress $r2;
        byte[] $r3;
        int i0, $i1;
        byte $b2;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: java.io.DataOutputStream;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toByteArray(java.io.DataOutputStream)>($r1);

        $r2 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        $r3 = virtualinvoke $r2.<java.net.InetAddress: byte[] getAddress()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if i0 >= $i1 goto label2;

        $b2 = $r3[i0];

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>($b2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    protected void toString(java.lang.StringBuilder)
    {
        javax.jmdns.impl.DNSRecord$Address r0;
        java.lang.StringBuilder $r1, $r2;
        java.net.InetAddress $r3;
        java.lang.String $r4;

        r0 := @this: javax.jmdns.impl.DNSRecord$Address;

        $r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<javax.jmdns.impl.DNSRecord: void toString(java.lang.StringBuilder)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" address: \'");

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke r0.<javax.jmdns.impl.DNSRecord$Address: java.net.InetAddress getAddress()>();

        $r4 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label1:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;

     label2:
        $r4 = "null";

        goto label1;
    }
