eu.chainfire.libsuperuser.StreamGobbler extends java.lang.Thread
private eu.chainfire.libsuperuser.StreamGobbler$OnLineListener listener
private java.io.BufferedReader reader
private java.lang.String shell
private java.util.List writer
    public void <init>(java.lang.String, java.io.InputStream, java.util.List)
    {
        eu.chainfire.libsuperuser.StreamGobbler r0;
        java.lang.String $r1;
        java.io.InputStream $r2;
        java.util.List r3;
        java.io.InputStreamReader $r4;
        java.io.BufferedReader $r5;

        r0 := @this: eu.chainfire.libsuperuser.StreamGobbler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.lang.String shell> = null;

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.io.BufferedReader reader> = null;

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.util.List writer> = null;

        r0.<eu.chainfire.libsuperuser.StreamGobbler: eu.chainfire.libsuperuser.StreamGobbler$OnLineListener listener> = null;

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.lang.String shell> = $r1;

        $r5 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2);

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.io.BufferedReader reader> = $r5;

        r0.<eu.chainfire.libsuperuser.StreamGobbler: java.util.List writer> = r3;

        return;
    }
    public void run()
    {
        eu.chainfire.libsuperuser.StreamGobbler r0;
        java.lang.String $r1, $r3;
        java.io.BufferedReader $r2;
        java.lang.Object[] $r4;
        java.util.List $r5;
        eu.chainfire.libsuperuser.StreamGobbler$OnLineListener $r6;
        java.io.IOException $r7, $r8;

        r0 := @this: eu.chainfire.libsuperuser.StreamGobbler;

     label01:
        $r2 = r0.<eu.chainfire.libsuperuser.StreamGobbler: java.io.BufferedReader reader>;

     label02:
        $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if $r3 == null goto label11;

        $r4 = newarray (java.lang.Object)[2];

        $r1 = r0.<eu.chainfire.libsuperuser.StreamGobbler: java.lang.String shell>;

        $r4[0] = $r1;

        $r4[1] = $r3;

     label04:
        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[%s] %s", $r4);

        staticinvoke <eu.chainfire.libsuperuser.Debug: void logOutput(java.lang.String)>($r1);

     label05:
        $r5 = r0.<eu.chainfire.libsuperuser.StreamGobbler: java.util.List writer>;

        if $r5 == null goto label07;

        $r5 = r0.<eu.chainfire.libsuperuser.StreamGobbler: java.util.List writer>;

     label06:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

     label07:
        $r6 = r0.<eu.chainfire.libsuperuser.StreamGobbler: eu.chainfire.libsuperuser.StreamGobbler$OnLineListener listener>;

        if $r6 == null goto label01;

        $r6 = r0.<eu.chainfire.libsuperuser.StreamGobbler: eu.chainfire.libsuperuser.StreamGobbler$OnLineListener listener>;

     label08:
        interfaceinvoke $r6.<eu.chainfire.libsuperuser.StreamGobbler$OnLineListener: void onLine(java.lang.String)>($r3);

     label09:
        goto label01;

     label10:
        $r7 := @caughtexception;

     label11:
        $r2 = r0.<eu.chainfire.libsuperuser.StreamGobbler: java.io.BufferedReader reader>;

     label12:
        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

     label13:
        return;

     label14:
        $r8 := @caughtexception;

        return;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label12 to label13 with label14;
    }
