com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider extends java.lang.Object implements com.timehop.stickyheadersrecyclerview.util.OrientationProvider
    public void <init>()
    {
        com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider r0;

        r0 := @this: com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void throwIfNotLinearLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager)
    {
        com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider r0;
        android.support.v7.widget.RecyclerView$LayoutManager $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider;

        $r1 := @parameter0: android.support.v7.widget.RecyclerView$LayoutManager;

        $z0 = $r1 instanceof android.support.v7.widget.LinearLayoutManager;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("StickyListHeadersDecoration can only be used with a LinearLayoutManager.");

        throw $r2;

     label1:
        return;
    }
    public int getOrientation(android.support.v7.widget.RecyclerView)
    {
        com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider r0;
        android.support.v7.widget.RecyclerView $r1;
        android.support.v7.widget.RecyclerView$LayoutManager $r2;
        android.support.v7.widget.LinearLayoutManager r3;
        int $i0;

        r0 := @this: com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider;

        $r1 := @parameter0: android.support.v7.widget.RecyclerView;

        $r2 = virtualinvoke $r1.<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$LayoutManager getLayoutManager()>();

        specialinvoke r0.<com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider: void throwIfNotLinearLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager)>($r2);

        r3 = (android.support.v7.widget.LinearLayoutManager) $r2;

        $i0 = virtualinvoke r3.<android.support.v7.widget.LinearLayoutManager: int getOrientation()>();

        return $i0;
    }
    public boolean isReverseLayout(android.support.v7.widget.RecyclerView)
    {
        com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider r0;
        android.support.v7.widget.RecyclerView $r1;
        android.support.v7.widget.RecyclerView$LayoutManager $r2;
        android.support.v7.widget.LinearLayoutManager r3;
        boolean $z0;

        r0 := @this: com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider;

        $r1 := @parameter0: android.support.v7.widget.RecyclerView;

        $r2 = virtualinvoke $r1.<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$LayoutManager getLayoutManager()>();

        specialinvoke r0.<com.timehop.stickyheadersrecyclerview.util.LinearLayoutOrientationProvider: void throwIfNotLinearLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager)>($r2);

        r3 = (android.support.v7.widget.LinearLayoutManager) $r2;

        $z0 = virtualinvoke r3.<android.support.v7.widget.LinearLayoutManager: boolean getReverseLayout()>();

        return $z0;
    }
