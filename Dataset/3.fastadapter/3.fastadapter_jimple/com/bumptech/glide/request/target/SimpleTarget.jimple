com.bumptech.glide.request.target.SimpleTarget extends com.bumptech.glide.request.target.BaseTarget
private final int height
private final int width
    public void <init>()
    {
        com.bumptech.glide.request.target.SimpleTarget r0;

        r0 := @this: com.bumptech.glide.request.target.SimpleTarget;

        specialinvoke r0.<com.bumptech.glide.request.target.SimpleTarget: void <init>(int,int)>(-2147483648, -2147483648);

        return;
    }
    public void <init>(int, int)
    {
        com.bumptech.glide.request.target.SimpleTarget r0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.request.target.SimpleTarget;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<com.bumptech.glide.request.target.BaseTarget: void <init>()>();

        r0.<com.bumptech.glide.request.target.SimpleTarget: int width> = $i0;

        r0.<com.bumptech.glide.request.target.SimpleTarget: int height> = $i1;

        return;
    }
    public final void getSize(com.bumptech.glide.request.target.SizeReadyCallback)
    {
        com.bumptech.glide.request.target.SimpleTarget r0;
        com.bumptech.glide.request.target.SizeReadyCallback $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: com.bumptech.glide.request.target.SimpleTarget;

        $r1 := @parameter0: com.bumptech.glide.request.target.SizeReadyCallback;

        $i0 = r0.<com.bumptech.glide.request.target.SimpleTarget: int width>;

        $i1 = r0.<com.bumptech.glide.request.target.SimpleTarget: int height>;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isValidDimensions(int,int)>($i0, $i1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Width and height must both be > 0 or Target#SIZE_ORIGINAL, but given width: ");

        $i0 = r0.<com.bumptech.glide.request.target.SimpleTarget: int width>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and height: ");

        $i0 = r0.<com.bumptech.glide.request.target.SimpleTarget: int height>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", either provide dimensions in the constructor");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or call override()");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i0 = r0.<com.bumptech.glide.request.target.SimpleTarget: int width>;

        $i1 = r0.<com.bumptech.glide.request.target.SimpleTarget: int height>;

        interfaceinvoke $r1.<com.bumptech.glide.request.target.SizeReadyCallback: void onSizeReady(int,int)>($i0, $i1);

        return;
    }
