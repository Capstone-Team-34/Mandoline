com.bumptech.glide.DrawableTypeRequest extends com.bumptech.glide.DrawableRequestBuilder implements com.bumptech.glide.DownloadOptions
private final com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader
private final com.bumptech.glide.RequestManager$OptionsApplier optionsApplier
private final com.bumptech.glide.load.model.ModelLoader streamModelLoader
    void <init>(java.lang.Class, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, android.content.Context, com.bumptech.glide.Glide, com.bumptech.glide.manager.RequestTracker, com.bumptech.glide.manager.Lifecycle, com.bumptech.glide.RequestManager$OptionsApplier)
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        java.lang.Class r1;
        com.bumptech.glide.load.model.ModelLoader r2, r3;
        android.content.Context $r4;
        com.bumptech.glide.Glide $r5;
        com.bumptech.glide.manager.RequestTracker $r6;
        com.bumptech.glide.manager.Lifecycle $r7;
        com.bumptech.glide.RequestManager$OptionsApplier $r8;
        com.bumptech.glide.provider.FixedLoadProvider $r9;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.bumptech.glide.load.model.ModelLoader;

        r3 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        $r4 := @parameter3: android.content.Context;

        $r5 := @parameter4: com.bumptech.glide.Glide;

        $r6 := @parameter5: com.bumptech.glide.manager.RequestTracker;

        $r7 := @parameter6: com.bumptech.glide.manager.Lifecycle;

        $r8 := @parameter7: com.bumptech.glide.RequestManager$OptionsApplier;

        $r9 = staticinvoke <com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r5, r2, r3, class "Lcom/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapper;", class "Lcom/bumptech/glide/load/resource/drawable/GlideDrawable;", null);

        specialinvoke r0.<com.bumptech.glide.DrawableRequestBuilder: void <init>(android.content.Context,java.lang.Class,com.bumptech.glide.provider.LoadProvider,com.bumptech.glide.Glide,com.bumptech.glide.manager.RequestTracker,com.bumptech.glide.manager.Lifecycle)>($r4, r1, $r9, $r5, $r6, $r7);

        r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader> = r2;

        r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader> = r3;

        r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier> = $r8;

        return;
    }
    private static com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, java.lang.Class, java.lang.Class, com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.Glide $r0;
        com.bumptech.glide.load.model.ModelLoader r1, r2;
        java.lang.Class r3, r4;
        com.bumptech.glide.load.model.ImageVideoModelLoader r5;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r6;
        com.bumptech.glide.provider.DataLoadProvider $r7;
        com.bumptech.glide.provider.FixedLoadProvider $r8;

        $r0 := @parameter0: com.bumptech.glide.Glide;

        r1 := @parameter1: com.bumptech.glide.load.model.ModelLoader;

        r2 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: java.lang.Class;

        r6 := @parameter5: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return null;

     label1:
        if r6 != null goto label2;

        r6 = virtualinvoke $r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.ResourceTranscoder buildTranscoder(java.lang.Class,java.lang.Class)>(r3, r4);

     label2:
        $r7 = virtualinvoke $r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProvider buildDataProvider(java.lang.Class,java.lang.Class)>(class "Lcom/bumptech/glide/load/model/ImageVideoWrapper;", r3);

        r5 = new com.bumptech.glide.load.model.ImageVideoModelLoader;

        specialinvoke r5.<com.bumptech.glide.load.model.ImageVideoModelLoader: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader)>(r1, r2);

        $r8 = new com.bumptech.glide.provider.FixedLoadProvider;

        specialinvoke $r8.<com.bumptech.glide.provider.FixedLoadProvider: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.provider.DataLoadProvider)>(r5, r6, $r7);

        return $r8;
    }
    private com.bumptech.glide.GenericTranscodeRequest getDownloadOnlyRequest()
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        com.bumptech.glide.load.model.ModelLoader $r1;
        com.bumptech.glide.RequestManager$OptionsApplier $r2, $r3;
        com.bumptech.glide.GenericRequestBuilder $r4;
        com.bumptech.glide.GenericTranscodeRequest $r5;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        $r3 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r5 = new com.bumptech.glide.GenericTranscodeRequest;

        $r1 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader>;

        $r2 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        specialinvoke $r5.<com.bumptech.glide.GenericTranscodeRequest: void <init>(java.lang.Class,com.bumptech.glide.GenericRequestBuilder,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,java.lang.Class,com.bumptech.glide.RequestManager$OptionsApplier)>(class "Ljava/io/File;", r0, $r1, class "Ljava/io/InputStream;", class "Ljava/io/File;", $r2);

        $r4 = virtualinvoke $r3.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r5);

        $r5 = (com.bumptech.glide.GenericTranscodeRequest) $r4;

        return $r5;
    }
    public com.bumptech.glide.BitmapTypeRequest asBitmap()
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        com.bumptech.glide.BitmapTypeRequest $r1;
        com.bumptech.glide.load.model.ModelLoader $r2, $r3;
        com.bumptech.glide.RequestManager$OptionsApplier $r4, $r6;
        com.bumptech.glide.GenericRequestBuilder $r5;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        $r6 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r1 = new com.bumptech.glide.BitmapTypeRequest;

        $r2 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader>;

        $r3 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader>;

        $r4 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        specialinvoke $r1.<com.bumptech.glide.BitmapTypeRequest: void <init>(com.bumptech.glide.GenericRequestBuilder,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.RequestManager$OptionsApplier)>(r0, $r2, $r3, $r4);

        $r5 = virtualinvoke $r6.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r1);

        $r1 = (com.bumptech.glide.BitmapTypeRequest) $r5;

        return $r1;
    }
    public com.bumptech.glide.GifTypeRequest asGif()
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        com.bumptech.glide.GifTypeRequest $r1;
        com.bumptech.glide.load.model.ModelLoader $r2;
        com.bumptech.glide.RequestManager$OptionsApplier $r3, $r5;
        com.bumptech.glide.GenericRequestBuilder $r4;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        $r5 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r1 = new com.bumptech.glide.GifTypeRequest;

        $r2 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader>;

        $r3 = r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        specialinvoke $r1.<com.bumptech.glide.GifTypeRequest: void <init>(com.bumptech.glide.GenericRequestBuilder,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.RequestManager$OptionsApplier)>(r0, $r2, $r3);

        $r4 = virtualinvoke $r5.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r1);

        $r1 = (com.bumptech.glide.GifTypeRequest) $r4;

        return $r1;
    }
    public com.bumptech.glide.request.FutureTarget downloadOnly(int, int)
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        int $i0, $i1;
        com.bumptech.glide.GenericTranscodeRequest $r1;
        com.bumptech.glide.request.FutureTarget $r2;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.GenericTranscodeRequest getDownloadOnlyRequest()>();

        $r2 = virtualinvoke $r1.<com.bumptech.glide.GenericTranscodeRequest: com.bumptech.glide.request.FutureTarget downloadOnly(int,int)>($i0, $i1);

        return $r2;
    }
    public com.bumptech.glide.request.target.Target downloadOnly(com.bumptech.glide.request.target.Target)
    {
        com.bumptech.glide.DrawableTypeRequest r0;
        com.bumptech.glide.request.target.Target r1;
        com.bumptech.glide.GenericTranscodeRequest $r2;

        r0 := @this: com.bumptech.glide.DrawableTypeRequest;

        r1 := @parameter0: com.bumptech.glide.request.target.Target;

        $r2 = specialinvoke r0.<com.bumptech.glide.DrawableTypeRequest: com.bumptech.glide.GenericTranscodeRequest getDownloadOnlyRequest()>();

        r1 = virtualinvoke $r2.<com.bumptech.glide.GenericTranscodeRequest: com.bumptech.glide.request.target.Target downloadOnly(com.bumptech.glide.request.target.Target)>(r1);

        return r1;
    }
