com.bumptech.glide.gifencoder.NeuQuant extends java.lang.Object
protected static final int alphabiasshift
protected static final int alpharadbias
protected static final int alpharadbshift
protected static final int beta
protected static final int betagamma
protected static final int betashift
protected static final int gamma
protected static final int gammashift
protected static final int initalpha
protected static final int initrad
protected static final int initradius
protected static final int intbias
protected static final int intbiasshift
protected static final int maxnetpos
protected static final int minpicturebytes
protected static final int ncycles
protected static final int netbiasshift
protected static final int netsize
protected static final int prime1
protected static final int prime2
protected static final int prime3
protected static final int prime4
protected static final int radbias
protected static final int radbiasshift
protected static final int radiusbias
protected static final int radiusbiasshift
protected static final int radiusdec
protected int alphadec
protected int[] bias
protected int[] freq
protected int lengthcount
protected int[] netindex
protected int[][] network
protected int[] radpower
protected int samplefac
protected byte[] thepicture
    public void <init>(byte[], int, int)
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        byte[] $r1;
        int $i0, $i1;
        int[] r2;
        int[][] $r3;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = newarray (int)[256];

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex> = r2;

        r2 = newarray (int)[256];

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] bias> = r2;

        r2 = newarray (int)[256];

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] freq> = r2;

        r2 = newarray (int)[32];

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] radpower> = r2;

        r0.<com.bumptech.glide.gifencoder.NeuQuant: byte[] thepicture> = $r1;

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount> = $i0;

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int samplefac> = $i1;

        $r3 = newarray (int[])[256];

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network> = $r3;

        $i0 = 0;

     label1:
        if $i0 >= 256 goto label2;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r2 = newarray (int)[4];

        $r3[$i0] = r2;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r2 = $r3[$i0];

        $i1 = $i0 << 12;

        $i1 = $i1 / 256;

        r2[2] = $i1;

        r2[1] = $i1;

        r2[0] = $i1;

        r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] freq>;

        r2[$i0] = 256;

        r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] bias>;

        r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
    protected void alterneigh(int, int, int, int, int)
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, $i10;
        int[] $r1;
        int[][] $r2;
        java.lang.Exception $r3, $r4;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        i6 = $i1 - $i0;

        if i6 >= -1 goto label01;

        i6 = -1;

     label01:
        $i0 = $i1 + $i0;

        if $i0 <= 256 goto label02;

        $i0 = 256;

     label02:
        i5 = 1;

        i8 = $i1 + -1;

        i9 = $i1 + 1;

     label03:
        if i9 < $i0 goto label04;

        if i8 <= i6 goto label22;

     label04:
        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] radpower>;

        $i1 = i5 + 1;

        i5 = $r1[i5];

        if i9 >= $i0 goto label25;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        i7 = i9 + 1;

        $r1 = $r2[i9];

     label05:
        i9 = $r1[0];

        $i10 = $r1[0];

     label06:
        $i10 = $i10 - $i2;

        $i10 = $i10 * i5;

        $i10 = $i10 / 262144;

        i9 = i9 - $i10;

     label07:
        $r1[0] = i9;

        i9 = $r1[1];

        $i10 = $r1[1];

     label08:
        $i10 = $i10 - $i3;

        $i10 = $i10 * i5;

        $i10 = $i10 / 262144;

        i9 = i9 - $i10;

     label09:
        $r1[1] = i9;

        i9 = $r1[2];

        $i10 = $r1[2];

     label10:
        $i10 = $i10 - $i4;

        $i10 = $i10 * i5;

        $i10 = $i10 / 262144;

        i9 = i9 - $i10;

     label11:
        $r1[2] = i9;

     label12:
        if i8 <= i6 goto label24;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        i9 = i8 + -1;

        $r1 = $r2[i8];

     label13:
        i8 = $r1[0];

        $i10 = $r1[0];

     label14:
        $i10 = $i10 - $i2;

        $i10 = $i10 * i5;

        $i10 = $i10 / 262144;

        i8 = i8 - $i10;

     label15:
        $r1[0] = i8;

        i8 = $r1[1];

        $i10 = $r1[1];

     label16:
        $i10 = $i10 - $i3;

        $i10 = $i10 * i5;

        $i10 = $i10 / 262144;

        i8 = i8 - $i10;

     label17:
        $r1[1] = i8;

        i8 = $r1[2];

        $i10 = $r1[2];

     label18:
        $i10 = $i10 - $i4;

        i5 = $i10 * i5;

        i5 = i5 / 262144;

        i5 = i8 - i5;

     label19:
        $r1[2] = i5;

     label20:
        i5 = $i1;

        i8 = i9;

        i9 = i7;

        goto label03;

     label21:
        $r3 := @caughtexception;

        i5 = $i1;

        i8 = i9;

        i9 = i7;

        goto label03;

     label22:
        return;

     label23:
        $r4 := @caughtexception;

        goto label12;

     label24:
        i5 = $i1;

        i9 = i7;

        goto label03;

     label25:
        i7 = i9;

        goto label12;

        catch java.lang.Exception from label05 to label06 with label23;
        catch java.lang.Exception from label07 to label08 with label23;
        catch java.lang.Exception from label09 to label10 with label23;
        catch java.lang.Exception from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label21;
        catch java.lang.Exception from label15 to label16 with label21;
        catch java.lang.Exception from label17 to label18 with label21;
        catch java.lang.Exception from label19 to label20 with label21;
    }
    protected void altersingle(int, int, int, int, int)
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] r1;
        int[][] $r2;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r1 = $r2[$i1];

        $i1 = r1[0];

        $i5 = r1[0];

        $i2 = $i5 - $i2;

        $i2 = $i2 * $i0;

        $i2 = $i2 / 1024;

        $i1 = $i1 - $i2;

        r1[0] = $i1;

        $i1 = r1[1];

        $i2 = r1[1];

        $i2 = $i2 - $i3;

        $i2 = $i2 * $i0;

        $i2 = $i2 / 1024;

        $i1 = $i1 - $i2;

        r1[1] = $i1;

        $i1 = r1[2];

        $i2 = r1[2];

        $i2 = $i2 - $i4;

        $i0 = $i2 * $i0;

        $i0 = $i0 / 1024;

        $i0 = $i1 - $i0;

        r1[2] = $i0;

        return;
    }
    public byte[] colorMap()
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int[] r1, $r4;
        int i0, i1, i2, i3, $i4;
        byte[] r2;
        int[][] $r3;
        byte $b5;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        r2 = newarray (byte)[768];

        r1 = newarray (int)[256];

        i1 = 0;

     label1:
        if i1 >= 256 goto label2;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r4 = $r3[i1];

        i0 = $r4[3];

        r1[i0] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        i1 = 0;

        i2 = 0;

     label3:
        if i1 >= 256 goto label4;

        i0 = r1[i1];

        i3 = i2 + 1;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r4 = $r3[i0];

        $i4 = $r4[0];

        $b5 = (byte) $i4;

        r2[i2] = $b5;

        i2 = i3 + 1;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r4 = $r3[i0];

        $i4 = $r4[1];

        $b5 = (byte) $i4;

        r2[i3] = $b5;

        $r3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r4 = $r3[i0];

        i0 = $r4[2];

        $b5 = (byte) i0;

        r2[i2] = $b5;

        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }
    protected int contest(int, int, int)
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8, $i9;
        int[] r1;
        int[][] $r2;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i4 = 2147483647;

        i5 = 2147483647;

        i6 = -1;

        i7 = -1;

        i8 = 0;

     label1:
        if i8 >= 256 goto label7;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r1 = $r2[i8];

        i3 = r1[0];

        i3 = i3 - $i0;

        if i3 >= 0 goto label2;

        i3 = neg i3;

     label2:
        $i9 = r1[1];

        $i9 = $i9 - $i1;

        if $i9 >= 0 goto label3;

        $i9 = neg $i9;

     label3:
        i3 = i3 + $i9;

        $i9 = r1[2];

        $i9 = $i9 - $i2;

        if $i9 >= 0 goto label4;

        $i9 = neg $i9;

     label4:
        i3 = i3 + $i9;

        if i3 >= i4 goto label5;

        i4 = i3;

        i6 = i8;

     label5:
        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] bias>;

        $i9 = r1[i8];

        $i9 = $i9 >> 12;

        i3 = i3 - $i9;

        if i3 >= i5 goto label6;

        i5 = i3;

        i7 = i8;

     label6:
        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] freq>;

        i3 = r1[i8];

        i3 = i3 >> 10;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] freq>;

        $i9 = r1[i8];

        $i9 = $i9 - i3;

        r1[i8] = $i9;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] bias>;

        $i9 = r1[i8];

        i3 = i3 << 10;

        i3 = $i9 + i3;

        r1[i8] = i3;

        i8 = i8 + 1;

        goto label1;

     label7:
        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] freq>;

        $i0 = r1[i6];

        $i0 = $i0 + 64;

        r1[i6] = $i0;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] bias>;

        $i0 = r1[i6];

        $i0 = $i0 - 65536;

        r1[i6] = $i0;

        return i7;
    }
    public void inxbuild()
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int[] r1, r3;
        int i0, i1, i2, i3, i4, i5, $i6;
        int[][] $r2;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        i0 = 0;

        i1 = 0;

        i2 = 0;

     label01:
        if i2 >= 256 goto label09;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r1 = $r2[i2];

        i3 = i2;

        i4 = r1[1];

        i5 = i2 + 1;

     label02:
        if i5 >= 256 goto label04;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r3 = $r2[i5];

        $i6 = r3[1];

        if $i6 >= i4 goto label03;

        i3 = i5;

        i4 = r3[1];

     label03:
        i5 = i5 + 1;

        goto label02;

     label04:
        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        r3 = $r2[i3];

        if i2 == i3 goto label05;

        i3 = r3[0];

        i5 = r1[0];

        r3[0] = i5;

        r1[0] = i3;

        i3 = r3[1];

        i5 = r1[1];

        r3[1] = i5;

        r1[1] = i3;

        i3 = r3[2];

        i5 = r1[2];

        r3[2] = i5;

        r1[2] = i3;

        i3 = r3[3];

        i5 = r1[3];

        r3[3] = i5;

        r1[3] = i3;

     label05:
        if i4 == i0 goto label08;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex>;

        i1 = i1 + i2;

        i1 = i1 >> 1;

        r1[i0] = i1;

        i0 = i0 + 1;

     label06:
        if i0 >= i4 goto label07;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex>;

        r1[i0] = i2;

        i0 = i0 + 1;

        goto label06;

     label07:
        i0 = i4;

        i1 = i2;

     label08:
        i2 = i2 + 1;

        goto label01;

     label09:
        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex>;

        i2 = i1 + 255;

        i2 = i2 >> 1;

        r1[i0] = i2;

        i0 = i0 + 1;

     label10:
        if i0 >= 256 goto label11;

        r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex>;

        r1[i0] = 255;

        i0 = i0 + 1;

        goto label10;

     label11:
        return;
    }
    public void learn()
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int i0, i1, i2, i3, i4, $i5, i6, $i7, i8, i9, i10, i11;
        byte[] $r1;
        int[] $r2;
        short s12;
        byte $b13;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        i3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        if i3 >= 1509 goto label01;

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int samplefac> = 1;

     label01:
        i3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int samplefac>;

        i3 = i3 + -1;

        i3 = i3 / 3;

        i3 = i3 + 30;

        r0.<com.bumptech.glide.gifencoder.NeuQuant: int alphadec> = i3;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: byte[] thepicture>;

        i6 = 0;

        i3 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        i4 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        $i7 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int samplefac>;

        $i7 = $i7 * 3;

        i4 = i4 / $i7;

        $i7 = i4 / 100;

        i8 = 1024;

        i9 = 2048;

        i10 = 2048 >> 6;

        if i10 > 1 goto label02;

        i10 = 0;

     label02:
        i11 = 0;

     label03:
        if i11 >= i10 goto label04;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] radpower>;

        i0 = i10 * i10;

        i1 = i11 * i11;

        i0 = i0 - i1;

        i0 = i0 * 256;

        i1 = i10 * i10;

        i0 = i0 / i1;

        i0 = i0 * 1024;

        $r2[i11] = i0;

        i11 = i11 + 1;

        goto label03;

     label04:
        i11 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        if i11 >= 1509 goto label12;

        s12 = 3;

     label05:
        i11 = 0;

     label06:
        if i11 >= i4 goto label16;

        $b13 = $r1[i6];

        i0 = $b13 & 255;

        i0 = i0 << 4;

        i1 = i6 + 1;

        $b13 = $r1[i1];

        i1 = $b13 & 255;

        i1 = i1 << 4;

        i2 = i6 + 2;

        $b13 = $r1[i2];

        i2 = $b13 & 255;

        i2 = i2 << 4;

        $i5 = virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: int contest(int,int,int)>(i0, i1, i2);

        virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: void altersingle(int,int,int,int,int)>(i8, $i5, i0, i1, i2);

        if i10 == 0 goto label07;

        virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: void alterneigh(int,int,int,int,int)>(i10, $i5, i0, i1, i2);

     label07:
        i6 = i6 + s12;

        if i6 < i3 goto label08;

        i0 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        i6 = i6 - i0;

     label08:
        i11 = i11 + 1;

        if $i7 != 0 goto label09;

        $i7 = 1;

     label09:
        i0 = i11 % $i7;

        if i0 != 0 goto label06;

        i10 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int alphadec>;

        i10 = i8 / i10;

        i8 = i8 - i10;

        i10 = i9 / 30;

        i9 = i9 - i10;

        i10 = i9 >> 6;

        if i10 > 1 goto label10;

        i10 = 0;

     label10:
        i0 = 0;

     label11:
        if i0 >= i10 goto label06;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] radpower>;

        i1 = i10 * i10;

        i2 = i0 * i0;

        i1 = i1 - i2;

        i1 = i1 * 256;

        i2 = i10 * i10;

        i1 = i1 / i2;

        i1 = i1 * i8;

        $r2[i0] = i1;

        i0 = i0 + 1;

        goto label11;

     label12:
        i11 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        i11 = i11 % 499;

        if i11 == 0 goto label13;

        s12 = 1497;

        goto label05;

     label13:
        i11 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        i11 = i11 % 491;

        if i11 == 0 goto label14;

        s12 = 1473;

        goto label05;

     label14:
        i11 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int lengthcount>;

        i11 = i11 % 487;

        if i11 == 0 goto label15;

        s12 = 1461;

        goto label05;

     label15:
        s12 = 1509;

        goto label05;

     label16:
        return;
    }
    public int map(int, int, int)
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i7, $i8;
        int[] $r1;
        int[][] $r2;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i3 = 1000;

        i4 = -1;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[] netindex>;

        i5 = $r1[$i1];

        i6 = i5 + -1;

     label01:
        if i5 < 256 goto label02;

        if i6 < 0 goto label12;

     label02:
        if i5 >= 256 goto label03;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r1 = $r2[i5];

        $i7 = $r1[1];

        $i7 = $i7 - $i1;

        if $i7 < i3 goto label04;

        i5 = 256;

     label03:
        if i6 < 0 goto label01;

        $r2 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r1 = $r2[i6];

        $i7 = $r1[1];

        $i7 = $i1 - $i7;

        if $i7 < i3 goto label08;

        i6 = -1;

        goto label01;

     label04:
        i5 = i5 + 1;

        if $i7 >= 0 goto label05;

        $i7 = neg $i7;

     label05:
        $i8 = $r1[0];

        $i8 = $i8 - $i0;

        if $i8 >= 0 goto label06;

        $i8 = neg $i8;

     label06:
        $i7 = $i7 + $i8;

        if $i7 >= i3 goto label03;

        $i8 = $r1[2];

        $i8 = $i8 - $i2;

        if $i8 >= 0 goto label07;

        $i8 = neg $i8;

     label07:
        $i7 = $i7 + $i8;

        if $i7 >= i3 goto label03;

        i3 = $i7;

        i4 = $r1[3];

        goto label03;

     label08:
        i6 = i6 + -1;

        if $i7 >= 0 goto label09;

        $i7 = neg $i7;

     label09:
        $i8 = $r1[0];

        $i8 = $i8 - $i0;

        if $i8 >= 0 goto label10;

        $i8 = neg $i8;

     label10:
        $i7 = $i7 + $i8;

        if $i7 >= i3 goto label01;

        $i8 = $r1[2];

        $i8 = $i8 - $i2;

        if $i8 >= 0 goto label11;

        $i8 = neg $i8;

     label11:
        $i7 = $i7 + $i8;

        if $i7 >= i3 goto label01;

        i3 = $i7;

        i4 = $r1[3];

        goto label01;

     label12:
        return i4;
    }
    public byte[] process()
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        byte[] $r1;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: void learn()>();

        virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: void unbiasnet()>();

        virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: void inxbuild()>();

        $r1 = virtualinvoke r0.<com.bumptech.glide.gifencoder.NeuQuant: byte[] colorMap()>();

        return $r1;
    }
    public void unbiasnet()
    {
        com.bumptech.glide.gifencoder.NeuQuant r0;
        int i0, $i1;
        int[][] $r1;
        int[] $r2;

        r0 := @this: com.bumptech.glide.gifencoder.NeuQuant;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r2 = $r1[i0];

        $i1 = $r2[0];

        $i1 = $i1 >> 4;

        $r2[0] = $i1;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r2 = $r1[i0];

        $i1 = $r2[1];

        $i1 = $i1 >> 4;

        $r2[1] = $i1;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r2 = $r1[i0];

        $i1 = $r2[2];

        $i1 = $i1 >> 4;

        $r2[2] = $i1;

        $r1 = r0.<com.bumptech.glide.gifencoder.NeuQuant: int[][] network>;

        $r2 = $r1[i0];

        $r2[3] = i0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
