com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.Poolable
private final com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool
private int size
    void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool> = $r1;

        return;
    }
    static int access$000(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key $r0;
        int i0;

        $r0 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        i0 = $r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        return i0;
    }
    public boolean equals(java.lang.Object)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0, r2;
        java.lang.Object $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        if $z0 == 0 goto label1;

        r2 = (com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key) $r1;

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        $i0 = r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        return i0;
    }
    public void init(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $i0 := @parameter0: int;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size> = $i0;

        return;
    }
    public void offer()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool>;

        virtualinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void offer(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>(r0);

        return;
    }
    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String access$100(int)>($i0);

        return $r1;
    }
