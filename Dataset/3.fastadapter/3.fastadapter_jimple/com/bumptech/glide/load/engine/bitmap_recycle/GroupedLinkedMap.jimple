com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap extends java.lang.Object
private final com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head
private final java.util.Map keyToEntry
    void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry $r1;
        java.util.HashMap $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry> = $r2;

        return;
    }
    private void makeHead(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r1, $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void removeEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev> = $r2;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $r2 = $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next> = $r2;

        staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void updateEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r1);

        return;
    }
    private void makeTail(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r1, $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void removeEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $r2 = $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

        r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev> = $r2;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next> = $r2;

        staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void updateEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r1);

        return;
    }
    private static void removeEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r0, $r1, $r2;

        r0 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next> = $r2;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        r0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

        $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev> = r0;

        return;
    }
    private static void updateEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r0, $r1;

        r0 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev> = r0;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

        $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next> = r0;

        return;
    }
    public java.lang.Object get(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.Poolable r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r4;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.Poolable;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry) $r3;

        if r4 != null goto label2;

        r4 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        specialinvoke r4.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: void <init>(java.lang.Object)>(r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label1:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void makeHead(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r4);

        $r3 = virtualinvoke r4.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object removeLast()>();

        return $r3;

     label2:
        interfaceinvoke r1.<com.bumptech.glide.load.engine.bitmap_recycle.Poolable: void offer()>();

        goto label1;
    }
    public void put(com.bumptech.glide.load.engine.bitmap_recycle.Poolable, java.lang.Object)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.Poolable r1;
        java.lang.Object r2, $r3;
        java.util.Map $r4;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry r5;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.Poolable;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry>;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry) $r3;

        if r5 != null goto label2;

        r5 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry;

        specialinvoke r5.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void makeTail(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>(r5);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label1:
        virtualinvoke r5.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: void add(java.lang.Object)>(r2);

        return;

     label2:
        interfaceinvoke r1.<com.bumptech.glide.load.engine.bitmap_recycle.Poolable: void offer()>();

        goto label1;
    }
    public java.lang.Object removeLast()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map $r4;
        com.bumptech.glide.load.engine.bitmap_recycle.Poolable $r5;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $r1 = $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        $r3 = virtualinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object removeLast()>();

        if $r3 == null goto label2;

        return $r3;

     label2:
        staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void removeEntry(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>($r1);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.util.Map keyToEntry>;

        $r3 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object access$000(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>($r1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r3 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object access$000(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>($r1);

        $r5 = (com.bumptech.glide.load.engine.bitmap_recycle.Poolable) $r3;

        interfaceinvoke $r5.<com.bumptech.glide.load.engine.bitmap_recycle.Poolable: void offer()>();

        $r1 = $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry prev>;

        goto label1;

     label3:
        return null;
    }
    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap r0;
        java.lang.StringBuilder r1, $r4;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry $r2, $r3;
        boolean z0, $z1;
        java.lang.Object $r5;
        int $i0, $i1;
        java.lang.String $r6;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("GroupedLinkedMap( ");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $r2 = $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        z0 = 0;

     label1:
        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry head>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        z0 = 1;

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r5 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object access$000(com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i0 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, ");

        $r2 = $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry next>;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -2;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i0, $i1);

     label3:
        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
