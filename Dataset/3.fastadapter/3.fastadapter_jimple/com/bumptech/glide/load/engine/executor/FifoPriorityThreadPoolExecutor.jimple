com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor
private static final java.lang.String TAG
private final java.util.concurrent.atomic.AtomicInteger ordering
private final com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy uncaughtThrowableStrategy
    public void <init>(int)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        int $i0;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy $r1;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        $i0 := @parameter0: int;

        $r1 = <com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy LOG>;

        specialinvoke r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: void <init>(int,com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy)>($i0, $r1);

        return;
    }
    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.ThreadFactory, com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        int $i0, $i1;
        long $l2;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ThreadFactory $r2;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.util.concurrent.PriorityBlockingQueue $r5;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 := @parameter4: java.util.concurrent.ThreadFactory;

        $r3 := @parameter5: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;

        $r5 = new java.util.concurrent.PriorityBlockingQueue;

        specialinvoke $r5.<java.util.concurrent.PriorityBlockingQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, $l2, $r1, $r5, $r2);

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ordering> = $r4;

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy uncaughtThrowableStrategy> = $r3;

        return;
    }
    public void <init>(int, com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        int $i0;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy $r1;
        java.util.concurrent.TimeUnit $r2;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory $r3;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r3 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory;

        specialinvoke $r3.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory: void <init>()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory,com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy)>($i0, $i0, 0L, $r2, $r3, $r1);

        return;
    }
    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        java.lang.Runnable $r1;
        java.lang.Throwable $r2;
        boolean $z0;
        java.util.concurrent.Future r3;
        java.lang.InterruptedException r4;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy $r5;
        java.util.concurrent.ExecutionException r6;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>($r1, $r2);

        if $r2 != null goto label5;

        $z0 = $r1 instanceof java.util.concurrent.Future;

        if $z0 == 0 goto label5;

        r3 = (java.util.concurrent.Future) $r1;

        $z0 = interfaceinvoke r3.<java.util.concurrent.Future: boolean isDone()>();

        if $z0 == 0 goto label5;

        $z0 = interfaceinvoke r3.<java.util.concurrent.Future: boolean isCancelled()>();

        if $z0 != 0 goto label5;

     label1:
        interfaceinvoke r3.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return;

     label3:
        r4 := @caughtexception;

        $r5 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy uncaughtThrowableStrategy>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy: void handle(java.lang.Throwable)>(r4);

        return;

     label4:
        r6 := @caughtexception;

        $r5 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy uncaughtThrowableStrategy>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy: void handle(java.lang.Throwable)>(r6);

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }
    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        java.lang.Runnable $r1;
        java.lang.Object r2;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask $r3;
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $r4 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ordering>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        specialinvoke $r3.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: void <init>(java.lang.Runnable,java.lang.Object,int)>($r1, r2, $i0);

        return $r3;
    }
