com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper extends java.lang.Object implements com.bumptech.glide.load.engine.cache.DiskCache
private static final int APP_VERSION
private static final java.lang.String TAG
private static final int VALUE_COUNT
private static com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper wrapper
private final java.io.File directory
private com.bumptech.glide.disklrucache.DiskLruCache diskLruCache
private final int maxSize
private final com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator
private final com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker
    static void <clinit>()
    {
        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper wrapper> = null;

        return;
    }
    protected void <init>(java.io.File, int)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        java.io.File $r1;
        int $i0;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker $r2;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r3;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker;

        specialinvoke $r2.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker> = $r2;

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File directory> = $r1;

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int maxSize> = $i0;

        $r3 = new com.bumptech.glide.load.engine.cache.SafeKeyGenerator;

        specialinvoke $r3.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator> = $r3;

        return;
    }
    public static com.bumptech.glide.load.engine.cache.DiskCache get(java.io.File, int)
    {
        java.io.File $r0;
        int $i0;
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        entermonitor class "Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;";

     label1:
        $r1 = <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper wrapper>;

        if $r1 != null goto label2;

        $r1 = new com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        specialinvoke $r1.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void <init>(java.io.File,int)>($r0, $i0);

        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper wrapper> = $r1;

     label2:
        $r1 = <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper wrapper>;

     label3:
        exitmonitor class "Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;";

        return $r1;

     label4:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;";

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    private com.bumptech.glide.disklrucache.DiskLruCache getDiskCache() throws java.io.IOException
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        int $i0;
        long $l1;
        com.bumptech.glide.disklrucache.DiskLruCache $r1;
        java.io.File $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        entermonitor r0;

     label1:
        $r1 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache diskLruCache>;

        if $r1 != null goto label2;

        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File directory>;

        $i0 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int maxSize>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: com.bumptech.glide.disklrucache.DiskLruCache open(java.io.File,int,int,long)>($r2, 1, 1, $l1);

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache diskLruCache> = $r1;

     label2:
        $r1 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache diskLruCache>;

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    private void resetDiskCache()
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        java.lang.Throwable $r1;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        entermonitor r0;

     label1:
        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache diskLruCache> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void clear()
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        java.io.IOException r1;
        com.bumptech.glide.disklrucache.DiskLruCache $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        entermonitor r0;

     label1:
        $r2 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache getDiskCache()>();

        virtualinvoke $r2.<com.bumptech.glide.disklrucache.DiskLruCache: void delete()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void resetDiskCache()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        r1 := @caughtexception;

     label4:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to clear disk cache", r1);

     label5:
        goto label2;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }
    public void delete(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key $r1;
        java.io.IOException r2;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r3;
        java.lang.String $r4;
        com.bumptech.glide.disklrucache.DiskLruCache $r5;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>($r1);

     label1:
        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache getDiskCache()>();

        virtualinvoke $r5.<com.bumptech.glide.disklrucache.DiskLruCache: boolean remove(java.lang.String)>($r4);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z0 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to delete from disk cache", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public java.io.File get(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key $r1;
        java.io.IOException r2;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r3;
        java.lang.String $r4;
        com.bumptech.glide.disklrucache.DiskLruCache $r5;
        com.bumptech.glide.disklrucache.DiskLruCache$Value $r6;
        java.io.File $r7;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>($r1);

     label1:
        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache getDiskCache()>();

        $r6 = virtualinvoke $r5.<com.bumptech.glide.disklrucache.DiskLruCache: com.bumptech.glide.disklrucache.DiskLruCache$Value get(java.lang.String)>($r4);

     label2:
        if $r6 == null goto label6;

     label3:
        $r7 = virtualinvoke $r6.<com.bumptech.glide.disklrucache.DiskLruCache$Value: java.io.File getFile(int)>(0);

     label4:
        return $r7;

     label5:
        r2 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z0 == 0 goto label6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to get from disk cache", r2);

     label6:
        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }
    public void put(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.cache.DiskCache$Writer)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key $r1;
        com.bumptech.glide.load.engine.cache.DiskCache$Writer $r2;
        java.io.IOException r3;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r4;
        java.lang.String $r5;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker $r6;
        com.bumptech.glide.disklrucache.DiskLruCache $r7;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r8;
        java.io.File $r9;
        boolean $z0;
        java.lang.Throwable $r10, $r11;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 := @parameter1: com.bumptech.glide.load.engine.cache.DiskCache$Writer;

        $r4 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        $r5 = virtualinvoke $r4.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>($r1);

        $r6 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker>;

        virtualinvoke $r6.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: void acquire(com.bumptech.glide.load.Key)>($r1);

     label01:
        $r7 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.disklrucache.DiskLruCache getDiskCache()>();

        $r8 = virtualinvoke $r7.<com.bumptech.glide.disklrucache.DiskLruCache: com.bumptech.glide.disklrucache.DiskLruCache$Editor edit(java.lang.String)>($r5);

     label02:
        if $r8 == null goto label07;

     label03:
        $r9 = virtualinvoke $r8.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: java.io.File getFile(int)>(0);

        $z0 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.DiskCache$Writer: boolean write(java.io.File)>($r9);

     label04:
        if $z0 == 0 goto label06;

     label05:
        virtualinvoke $r8.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void commit()>();

     label06:
        virtualinvoke $r8.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void abortUnlessCommitted()>();

     label07:
        $r6 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker>;

        virtualinvoke $r6.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: void release(com.bumptech.glide.load.Key)>($r1);

        return;

     label08:
        $r10 := @caughtexception;

     label09:
        virtualinvoke $r8.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void abortUnlessCommitted()>();

        throw $r10;

     label10:
        r3 := @caughtexception;

     label11:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

     label12:
        if $z0 == 0 goto label14;

     label13:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to put to disk cache", r3);

     label14:
        $r6 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker>;

        virtualinvoke $r6.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: void release(com.bumptech.glide.load.Key)>($r1);

        return;

     label15:
        $r11 := @caughtexception;

        $r6 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker writeLocker>;

        virtualinvoke $r6.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: void release(com.bumptech.glide.load.Key)>($r1);

        throw $r11;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }
