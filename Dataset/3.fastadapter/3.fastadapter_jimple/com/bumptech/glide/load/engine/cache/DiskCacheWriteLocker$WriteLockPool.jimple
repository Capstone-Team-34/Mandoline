com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool extends java.lang.Object
private static final int MAX_POOL_SIZE
private final java.util.Queue pool
    private void <init>()
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool r0;
        java.util.ArrayDeque $r1;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool> = $r1;

        return;
    }
    void <init>(com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$1)
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool r0;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$1 $r1;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$1;

        specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: void <init>()>();

        return;
    }
    com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock obtain()
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool r0;
        java.util.Queue $r1, $r3;
        java.lang.Object $r2;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock r4;
        java.lang.Throwable $r5;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool;

        $r1 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool>;

        $r2 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        r4 = (com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock) $r2;

        exitmonitor $r1;

     label2:
        if r4 != null goto label6;

        r4 = new com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock;

        specialinvoke r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: void <init>(com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$1)>(null);

        return r4;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        return r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    void offer(com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock)
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool r0;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock $r1;
        java.util.Queue $r2, $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock;

        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool>;

        $i0 = interfaceinvoke $r3.<java.util.Queue: int size()>();

        if $i0 >= 10 goto label2;

        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: java.util.Queue pool>;

        interfaceinvoke $r3.<java.util.Queue: boolean offer(java.lang.Object)>($r1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
