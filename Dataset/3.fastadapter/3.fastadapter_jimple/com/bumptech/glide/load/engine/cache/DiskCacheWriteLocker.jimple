com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker extends java.lang.Object
private final java.util.Map locks
private final com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool writeLockPool
    void <init>()
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker r0;
        java.util.HashMap $r1;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool $r2;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: java.util.Map locks> = $r1;

        $r2 = new com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool;

        specialinvoke $r2.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: void <init>(com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$1)>(null);

        r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool writeLockPool> = $r2;

        return;
    }
    void acquire(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker r0;
        com.bumptech.glide.load.Key $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock r4, $r6;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool $r5;
        int $i0;
        java.util.concurrent.locks.Lock $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        entermonitor r0;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: java.util.Map locks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock) $r3;

        if r4 != null goto label2;

        $r5 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool writeLockPool>;

        $r6 = virtualinvoke $r5.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock obtain()>();

        r4 = $r6;

        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: java.util.Map locks>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

     label2:
        $i0 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads>;

        $i0 = $i0 + 1;

        r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads> = $i0;

        exitmonitor r0;

     label3:
        $r7 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void lock()>();

        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    void release(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker r0;
        com.bumptech.glide.load.Key $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock r4, r9;
        int $i0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        boolean $z0;
        java.lang.IllegalStateException $r10;
        com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool $r11;
        java.util.concurrent.locks.Lock $r12;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        entermonitor r0;

     label01:
        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: java.util.Map locks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock) $r3;

        if r4 == null goto label02;

        $i0 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads>;

        if $i0 > 0 goto label07;

     label02:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot release a lock that is not held, key: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", interestedThreads: ");

        if r4 != null goto label06;

        $i0 = 0;

     label03:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label04:
        $r8 := @caughtexception;

        exitmonitor r0;

     label05:
        throw $r8;

     label06:
        $i0 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads>;

        goto label03;

     label07:
        $i0 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads>;

        $i0 = $i0 + -1;

        r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: int interestedThreads> = $i0;

        if $i0 != 0 goto label09;

        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: java.util.Map locks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        r9 = (com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock) $r3;

        $z0 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label08;

        $r10 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed the wrong lock, expected to remove: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but actually removed: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label08:
        $r11 = r0.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker: com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool writeLockPool>;

        virtualinvoke $r11.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLockPool: void offer(com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock)>(r9);

     label09:
        exitmonitor r0;

     label10:
        $r12 = r4.<com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker$WriteLock: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

        catch java.lang.Throwable from label01 to label05 with label04;
        catch java.lang.Throwable from label06 to label10 with label04;
    }
