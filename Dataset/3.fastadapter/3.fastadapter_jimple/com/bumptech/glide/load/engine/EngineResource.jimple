com.bumptech.glide.load.engine.EngineResource extends java.lang.Object implements com.bumptech.glide.load.engine.Resource
private int acquired
private final boolean isCacheable
private boolean isRecycled
private com.bumptech.glide.load.Key key
private com.bumptech.glide.load.engine.EngineResource$ResourceListener listener
private final com.bumptech.glide.load.engine.Resource resource
    void <init>(com.bumptech.glide.load.engine.Resource, boolean)
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        com.bumptech.glide.load.engine.Resource r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Wrapped resource must not be null");

        throw $r2;

     label1:
        r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.Resource resource> = r1;

        r0.<com.bumptech.glide.load.engine.EngineResource: boolean isCacheable> = $z0;

        return;
    }
    void acquire()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        android.os.Looper $r2, $r3;
        java.lang.IllegalThreadStateException $r4;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineResource: boolean isRecycled>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot acquire a recycled resource");

        throw $r1;

     label1:
        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalThreadStateException;

        specialinvoke $r4.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Must call acquire on the main thread");

        throw $r4;

     label2:
        $i0 = r0.<com.bumptech.glide.load.engine.EngineResource: int acquired>;

        $i0 = $i0 + 1;

        r0.<com.bumptech.glide.load.engine.EngineResource: int acquired> = $i0;

        return;
    }
    public java.lang.Object get()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        java.lang.Object $r1;
        com.bumptech.glide.load.engine.Resource $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.Resource resource>;

        $r1 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.Resource: java.lang.Object get()>();

        return $r1;
    }
    public int getSize()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        int $i0;
        com.bumptech.glide.load.engine.Resource $r1;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $r1 = r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.Resource resource>;

        $i0 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.Resource: int getSize()>();

        return $i0;
    }
    boolean isCacheable()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        boolean z0;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        z0 = r0.<com.bumptech.glide.load.engine.EngineResource: boolean isCacheable>;

        return z0;
    }
    public void recycle()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        boolean $z0;
        com.bumptech.glide.load.engine.Resource $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $i0 = r0.<com.bumptech.glide.load.engine.EngineResource: int acquired>;

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot recycle a resource while it is still acquired");

        throw $r1;

     label1:
        $z0 = r0.<com.bumptech.glide.load.engine.EngineResource: boolean isRecycled>;

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot recycle a resource that has already been recycled");

        throw $r1;

     label2:
        r0.<com.bumptech.glide.load.engine.EngineResource: boolean isRecycled> = 1;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.Resource resource>;

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.Resource: void recycle()>();

        return;
    }
    void release()
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        android.os.Looper $r2, $r3;
        boolean $z0;
        java.lang.IllegalThreadStateException $r4;
        com.bumptech.glide.load.engine.EngineResource$ResourceListener $r5;
        com.bumptech.glide.load.Key $r6;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $i0 = r0.<com.bumptech.glide.load.engine.EngineResource: int acquired>;

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot release a recycled or not yet acquired resource");

        throw $r1;

     label1:
        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalThreadStateException;

        specialinvoke $r4.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Must call release on the main thread");

        throw $r4;

     label2:
        $i0 = r0.<com.bumptech.glide.load.engine.EngineResource: int acquired>;

        $i0 = $i0 + -1;

        r0.<com.bumptech.glide.load.engine.EngineResource: int acquired> = $i0;

        if $i0 != 0 goto label3;

        $r5 = r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.EngineResource$ResourceListener listener>;

        $r6 = r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.Key key>;

        interfaceinvoke $r5.<com.bumptech.glide.load.engine.EngineResource$ResourceListener: void onResourceReleased(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource)>($r6, r0);

     label3:
        return;
    }
    void setResourceListener(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.EngineResource$ResourceListener)
    {
        com.bumptech.glide.load.engine.EngineResource r0;
        com.bumptech.glide.load.Key $r1;
        com.bumptech.glide.load.engine.EngineResource$ResourceListener $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineResource;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 := @parameter1: com.bumptech.glide.load.engine.EngineResource$ResourceListener;

        r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.Key key> = $r1;

        r0.<com.bumptech.glide.load.engine.EngineResource: com.bumptech.glide.load.engine.EngineResource$ResourceListener listener> = $r2;

        return;
    }
