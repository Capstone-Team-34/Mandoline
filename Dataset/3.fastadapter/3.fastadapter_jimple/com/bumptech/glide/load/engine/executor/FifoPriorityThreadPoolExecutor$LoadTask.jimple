com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask extends java.util.concurrent.FutureTask implements java.lang.Comparable
private final int order
private final int priority
    public void <init>(java.lang.Runnable, java.lang.Object, int)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Runnable $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        com.bumptech.glide.load.engine.executor.Prioritized $r4;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $r2 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>($r2, r1);

        $z0 = $r2 instanceof com.bumptech.glide.load.engine.executor.Prioritized;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FifoPriorityThreadPoolExecutor must be given Runnables that implement Prioritized");

        throw $r3;

     label1:
        $r4 = (com.bumptech.glide.load.engine.executor.Prioritized) $r2;

        $i1 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.executor.Prioritized: int getPriority()>();

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority> = $i1;

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order> = $i0;

        return;
    }
    public int compareTo(com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask r0, r1;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        r1 := @parameter0: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $i0 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority>;

        $i1 = r1.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority>;

        $i0 = $i0 - $i1;

        if $i0 != 0 goto label1;

        $i0 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order>;

        $i1 = r1.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order>;

        $i0 = $i0 - $i1;

     label1:
        return $i0;
    }
    public volatile int compareTo(java.lang.Object)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask) $r1;

        $i0 = virtualinvoke r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int compareTo(com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask)>($r2);

        return $i0;
    }
    public boolean equals(java.lang.Object)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        if $z0 == 0 goto label1;

        r2 = (com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask) $r1;

        $i0 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order>;

        $i1 = r2.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order>;

        if $i0 != $i1 goto label1;

        $i0 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority>;

        $i1 = r2.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority>;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask r0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask;

        $i0 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int priority>;

        $i0 = $i0 * 31;

        $i1 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask: int order>;

        $i0 = $i0 + $i1;

        return $i0;
    }
