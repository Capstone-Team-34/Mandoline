com.bumptech.glide.load.resource.bitmap.ImageHeaderParser extends java.lang.Object
private static final int[] BYTES_PER_FORMAT
private static final int EXIF_MAGIC_NUMBER
private static final int EXIF_SEGMENT_TYPE
private static final int GIF_HEADER
private static final int INTEL_TIFF_MAGIC_NUMBER
private static final java.lang.String JPEG_EXIF_SEGMENT_PREAMBLE
private static final byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES
private static final int MARKER_EOI
private static final int MOTOROLA_TIFF_MAGIC_NUMBER
private static final int ORIENTATION_TAG_TYPE
private static final int PNG_HEADER
private static final int SEGMENT_SOS
private static final int SEGMENT_START_ID
private static final java.lang.String TAG
private final com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader
    static void <clinit>()
    {
        byte[] $r0, r2;
        int[] $r1;
        java.lang.String $r3;
        java.io.UnsupportedEncodingException $r4;

        $r1 = newarray (int)[13];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 2;

        $r1[4] = 4;

        $r1[5] = 8;

        $r1[6] = 1;

        $r1[7] = 1;

        $r1[8] = 2;

        $r1[9] = 4;

        $r1[10] = 8;

        $r1[11] = 4;

        $r1[12] = 8;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int[] BYTES_PER_FORMAT> = $r1;

        r2 = newarray (byte)[0];

        $r3 = "Exif\u0000\u0000";

     label1:
        $r0 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        r2 = $r0;

     label3:
        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES> = r2;

        return;

     label4:
        $r4 := @caughtexception;

        goto label3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }
    public void <init>(java.io.InputStream)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        java.io.InputStream $r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r2;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        specialinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: void <init>(java.io.InputStream)>($r1);

        r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader> = $r2;

        return;
    }
    private static int calcTagOffset(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 + 2;

        $i1 = $i1 * 12;

        $i0 = $i0 + $i1;

        return $i0;
    }
    private byte[] getExifSegment() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        int i0, $i5;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r1;
        short $s1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        long $l2, $l3;
        byte $b4;
        byte[] r4;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

     label01:
        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $s1 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        if $s1 == 255 goto label03;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label02;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown segmentId=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r3);

     label02:
        return null;

     label03:
        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $s1 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        if $s1 != 218 goto label04;

        return null;

     label04:
        if $s1 != 217 goto label06;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label05;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", "Found MARKER_EOI in exif segment");

     label05:
        return null;

     label06:
        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        i0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        i0 = i0 + -2;

        if $s1 == 225 goto label08;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $l2 = (long) i0;

        $l2 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: long skip(long)>($l2);

        $l3 = (long) i0;

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label01;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label07;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to skip enough data, type: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", wanted to skip: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but actually skipped: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r3);

     label07:
        return null;

     label08:
        r4 = newarray (byte)[i0];

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i5 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int read(byte[])>(r4);

        if $i5 == i0 goto label10;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label09;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read segment data, type: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actually read: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r3);

     label09:
        return null;

     label10:
        return r4;
    }
    private static boolean handles(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = $i0 & 65496;

        if $i1 == 65496 goto label1;

        if $i0 == 19789 goto label1;

        if $i0 != 18761 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader $r0;
        int i0, i1, i2, $i4, $i7;
        java.lang.String $r1;
        short $s3, $s5, $s6;
        java.nio.ByteOrder r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        int[] $r4;

        $r0 := @parameter0: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader;

        $r1 = "Exif\u0000\u0000";

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $s3 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i1);

        if $s3 != 19789 goto label04;

        r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

     label01:
        virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: void order(java.nio.ByteOrder)>(r2);

        $i4 = i1 + 4;

        $i4 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int getInt32(int)>($i4);

        i1 = $i4 + i1;

        $s3 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i1);

        $i4 = 0;

     label02:
        if $i4 >= $s3 goto label17;

        i2 = staticinvoke <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int calcTagOffset(int,int)>(i1, $i4);

        $s5 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i2);

        if $s5 == 274 goto label07;

     label03:
        $i4 = $i4 + 1;

        goto label02;

     label04:
        if $s3 != 18761 goto label05;

        r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        goto label01;

     label05:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label06;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown endianness = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s3);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

     label06:
        r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        goto label01;

     label07:
        i0 = i2 + 2;

        $s6 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i0);

        if $s6 < 1 goto label08;

        if $s6 <= 12 goto label09;

     label08:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got invalid format code=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s6);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

        goto label03;

     label09:
        i0 = i2 + 4;

        i0 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int getInt32(int)>(i0);

        if i0 >= 0 goto label10;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", "Negative tiff component count");

        goto label03;

     label10:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label11;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got tagIndex=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tagType=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" formatCode=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" componentCount=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

     label11:
        $r4 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int[] BYTES_PER_FORMAT>;

        $i7 = $r4[$s6];

        i0 = i0 + $i7;

        if i0 <= 4 goto label12;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got byte count > 4, not orientation, continuing, formatCode=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s6);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

        goto label03;

     label12:
        i2 = i2 + 8;

        if i2 < 0 goto label13;

        $i7 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int length()>();

        if i2 <= $i7 goto label14;

     label13:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal tagValueOffset=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tagType=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s5);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

        goto label03;

     label14:
        if i0 < 0 goto label15;

        i0 = i2 + i0;

        $i7 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int length()>();

        if i0 <= $i7 goto label16;

     label15:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal number of bytes for TI tag data tagType=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s5);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r1);

        goto label03;

     label16:
        $s3 = virtualinvoke $r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i2);

        return $s3;

     label17:
        return -1;
    }
    public int getOrientation() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r1;
        int $i0, $i1;
        boolean $z0;
        byte[] $r2, $r3;
        byte $b2, $b3;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader $r4;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        $z0 = staticinvoke <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: boolean handles(int)>($i0);

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r2 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] getExifSegment()>();

        if $r2 == null goto label5;

        $i0 = lengthof $r2;

        $r3 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES>;

        $i1 = lengthof $r3;

        if $i0 <= $i1 goto label5;

        $z0 = 1;

     label2:
        if $z0 == 0 goto label4;

        $i0 = 0;

     label3:
        $r3 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $b2 = $r2[$i0];

        $r3 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES>;

        $b3 = $r3[$i0];

        if $b2 == $b3 goto label6;

        $z0 = 0;

     label4:
        if $z0 == 0 goto label7;

        $r4 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader;

        specialinvoke $r4.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: void <init>(byte[])>($r2);

        $i0 = staticinvoke <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)>($r4);

        return $i0;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        $i0 = $i0 + 1;

        goto label3;

     label7:
        return -1;
    }
    public com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        int i0, $i1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType r2;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        i0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        if i0 != 65496 goto label1;

        r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType JPEG>;

        return r2;

     label1:
        i0 = i0 << 16;

        i0 = i0 & -65536;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i1 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        $i1 = $i1 & 65535;

        i0 = i0 | $i1;

        if i0 != -1991225785 goto label3;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: long skip(long)>(21L);

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        i0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getByte()>();

        if i0 < 3 goto label2;

        r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG_A>;

        return r2;

     label2:
        r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG>;

        return r2;

     label3:
        i0 = i0 >> 8;

        if i0 != 4671814 goto label4;

        r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType GIF>;

        return r2;

     label4:
        r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType UNKNOWN>;

        return r2;
    }
    public boolean hasAlpha() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r1;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType()>();

        $z0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: boolean hasAlpha()>();

        return $z0;
    }
