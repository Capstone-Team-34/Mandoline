com.bumptech.glide.load.model.LazyHeaders extends java.lang.Object implements com.bumptech.glide.load.model.Headers
private volatile java.util.Map combinedHeaders
private final java.util.Map headers
    void <init>(java.util.Map)
    {
        com.bumptech.glide.load.model.LazyHeaders r0;
        java.util.Map r1;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r1);

        r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers> = r1;

        return;
    }
    private java.util.Map generateHeaders()
    {
        com.bumptech.glide.load.model.LazyHeaders r0;
        java.util.HashMap r1;
        java.lang.StringBuilder r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.util.List r8;
        int i0, $i1;
        com.bumptech.glide.load.model.LazyHeaderFactory r9;
        java.lang.String $r10;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r3 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.util.List) $r6;

        i0 = 0;

     label2:
        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        if i0 >= $i1 goto label4;

        $r6 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (com.bumptech.glide.load.model.LazyHeaderFactory) $r6;

        $r10 = interfaceinvoke r9.<com.bumptech.glide.load.model.LazyHeaderFactory: java.lang.String buildHeader()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        if i0 == $i1 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        goto label1;

     label5:
        return r1;
    }
    public boolean equals(java.lang.Object)
    {
        com.bumptech.glide.load.model.LazyHeaders r0, r3;
        java.lang.Object $r1;
        java.util.Map $r2, $r4;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.bumptech.glide.load.model.LazyHeaders;

        if $z0 == 0 goto label1;

        r3 = (com.bumptech.glide.load.model.LazyHeaders) $r1;

        $r4 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers>;

        $r2 = r3.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;

     label1:
        return 0;
    }
    public java.util.Map getHeaders()
    {
        com.bumptech.glide.load.model.LazyHeaders r0;
        java.util.Map $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        $r1 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map combinedHeaders>;

        if $r1 != null goto label3;

        entermonitor r0;

     label1:
        $r1 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map combinedHeaders>;

        if $r1 != null goto label2;

        $r1 = specialinvoke r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map generateHeaders()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map combinedHeaders> = $r1;

     label2:
        exitmonitor r0;

     label3:
        $r1 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map combinedHeaders>;

        return $r1;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public int hashCode()
    {
        com.bumptech.glide.load.model.LazyHeaders r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        $r1 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
    public java.lang.String toString()
    {
        com.bumptech.glide.load.model.LazyHeaders r0;
        java.lang.StringBuilder $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: com.bumptech.glide.load.model.LazyHeaders;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyHeaders{headers=");

        $r2 = r0.<com.bumptech.glide.load.model.LazyHeaders: java.util.Map headers>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
