com.bumptech.glide.BitmapTypeRequest extends com.bumptech.glide.BitmapRequestBuilder
private final com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader
private final com.bumptech.glide.Glide glide
private final com.bumptech.glide.RequestManager$OptionsApplier optionsApplier
private final com.bumptech.glide.load.model.ModelLoader streamModelLoader
    void <init>(com.bumptech.glide.GenericRequestBuilder, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.RequestManager$OptionsApplier)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        com.bumptech.glide.GenericRequestBuilder r1;
        com.bumptech.glide.load.model.ModelLoader r2, r3;
        com.bumptech.glide.RequestManager$OptionsApplier $r4;
        com.bumptech.glide.provider.FixedLoadProvider $r5;
        com.bumptech.glide.Glide $r6;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        r1 := @parameter0: com.bumptech.glide.GenericRequestBuilder;

        r2 := @parameter1: com.bumptech.glide.load.model.ModelLoader;

        r3 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        $r4 := @parameter3: com.bumptech.glide.RequestManager$OptionsApplier;

        $r6 = r1.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.Glide glide>;

        $r5 = staticinvoke <com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r6, r2, r3, class "Landroid/graphics/Bitmap;", null);

        specialinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: void <init>(com.bumptech.glide.provider.LoadProvider,java.lang.Class,com.bumptech.glide.GenericRequestBuilder)>($r5, class "Landroid/graphics/Bitmap;", r1);

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader> = r2;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader> = r3;

        $r6 = r1.<com.bumptech.glide.GenericRequestBuilder: com.bumptech.glide.Glide glide>;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.Glide glide> = $r6;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier> = $r4;

        return;
    }
    private static com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, java.lang.Class, com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.Glide $r0;
        com.bumptech.glide.load.model.ModelLoader r1, r2;
        java.lang.Class r3;
        com.bumptech.glide.load.model.ImageVideoModelLoader r4;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r5;
        com.bumptech.glide.provider.DataLoadProvider $r6;
        com.bumptech.glide.provider.FixedLoadProvider $r7;

        $r0 := @parameter0: com.bumptech.glide.Glide;

        r1 := @parameter1: com.bumptech.glide.load.model.ModelLoader;

        r2 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        r3 := @parameter3: java.lang.Class;

        r5 := @parameter4: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return null;

     label1:
        if r5 != null goto label2;

        r5 = virtualinvoke $r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.ResourceTranscoder buildTranscoder(java.lang.Class,java.lang.Class)>(class "Landroid/graphics/Bitmap;", r3);

     label2:
        $r6 = virtualinvoke $r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProvider buildDataProvider(java.lang.Class,java.lang.Class)>(class "Lcom/bumptech/glide/load/model/ImageVideoWrapper;", class "Landroid/graphics/Bitmap;");

        r4 = new com.bumptech.glide.load.model.ImageVideoModelLoader;

        specialinvoke r4.<com.bumptech.glide.load.model.ImageVideoModelLoader: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader)>(r1, r2);

        $r7 = new com.bumptech.glide.provider.FixedLoadProvider;

        specialinvoke $r7.<com.bumptech.glide.provider.FixedLoadProvider: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.provider.DataLoadProvider)>(r4, r5, $r6);

        return $r7;
    }
    public com.bumptech.glide.BitmapRequestBuilder toBytes()
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        com.bumptech.glide.BitmapRequestBuilder $r1;
        com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder $r2;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        $r2 = new com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;

        specialinvoke $r2.<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: void <init>()>();

        $r1 = virtualinvoke r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder,java.lang.Class)>($r2, class "[B");

        return $r1;
    }
    public com.bumptech.glide.BitmapRequestBuilder toBytes(android.graphics.Bitmap$CompressFormat, int)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        android.graphics.Bitmap$CompressFormat $r1;
        int $i0;
        com.bumptech.glide.BitmapRequestBuilder $r2;
        com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder $r3;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        $r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        $i0 := @parameter1: int;

        $r3 = new com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;

        specialinvoke $r3.<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: void <init>(android.graphics.Bitmap$CompressFormat,int)>($r1, $i0);

        $r2 = virtualinvoke r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder,java.lang.Class)>($r3, class "[B");

        return $r2;
    }
    public com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder, java.lang.Class)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r1;
        java.lang.Class r2;
        com.bumptech.glide.BitmapRequestBuilder $r3;
        com.bumptech.glide.load.model.ModelLoader $r4, $r5;
        com.bumptech.glide.RequestManager$OptionsApplier $r6;
        com.bumptech.glide.Glide $r7;
        com.bumptech.glide.provider.FixedLoadProvider $r8;
        com.bumptech.glide.GenericRequestBuilder $r9;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        r1 := @parameter0: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        r2 := @parameter1: java.lang.Class;

        $r6 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r3 = new com.bumptech.glide.BitmapRequestBuilder;

        $r7 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.Glide glide>;

        $r4 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader>;

        $r5 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader>;

        $r8 = staticinvoke <com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r7, $r4, $r5, r2, r1);

        specialinvoke $r3.<com.bumptech.glide.BitmapRequestBuilder: void <init>(com.bumptech.glide.provider.LoadProvider,java.lang.Class,com.bumptech.glide.GenericRequestBuilder)>($r8, r2, r0);

        $r9 = virtualinvoke $r6.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(com.bumptech.glide.GenericRequestBuilder)>($r3);

        $r3 = (com.bumptech.glide.BitmapRequestBuilder) $r9;

        return $r3;
    }
