com.bumptech.glide.util.ExceptionCatchingInputStream extends java.io.InputStream
private static final java.util.Queue QUEUE
private java.io.IOException exception
private java.io.InputStream wrapped
    static void <clinit>()
    {
        java.util.Queue $r0;

        $r0 = staticinvoke <com.bumptech.glide.util.Util: java.util.Queue createQueue(int)>(0);

        <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE> = $r0;

        return;
    }
    void <init>()
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        return;
    }
    static void clearQueue()
    {
        boolean $z0;
        java.util.Queue $r0;

     label1:
        $r0 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        $z0 = interfaceinvoke $r0.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r0 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        interfaceinvoke $r0.<java.util.Queue: java.lang.Object remove()>();

        goto label1;

     label2:
        return;
    }
    public static com.bumptech.glide.util.ExceptionCatchingInputStream obtain(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.util.Queue $r1, $r3;
        java.lang.Object $r2;
        com.bumptech.glide.util.ExceptionCatchingInputStream r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        entermonitor $r1;

     label1:
        $r3 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        $r2 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        r4 = (com.bumptech.glide.util.ExceptionCatchingInputStream) $r2;

        exitmonitor $r1;

     label2:
        if r4 != null goto label3;

        r4 = new com.bumptech.glide.util.ExceptionCatchingInputStream;

        specialinvoke r4.<com.bumptech.glide.util.ExceptionCatchingInputStream: void <init>()>();

     label3:
        virtualinvoke r4.<com.bumptech.glide.util.ExceptionCatchingInputStream: void setInputStream(java.io.InputStream)>($r0);

        return r4;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public int available() throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        int $i0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
    public java.io.IOException getException()
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.io.IOException r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception>;

        return r1;
    }
    public void mark(int)
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        int $i0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>($i0);

        return;
    }
    public boolean markSupported()
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }
    public int read() throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.io.IOException r1;
        java.io.InputStream $r2;
        int $i0;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r2 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

     label1:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

     label2:
        return $i0;

     label3:
        r1 := @caughtexception;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception> = r1;

        return -1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public int read(byte[]) throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        byte[] $r1;
        java.io.IOException r2;
        java.io.InputStream $r3;
        int $i0;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 := @parameter0: byte[];

        $r3 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

     label1:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r1);

     label2:
        return $i0;

     label3:
        r2 := @caughtexception;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception> = r2;

        return -1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.IOException r2;
        java.io.InputStream $r3;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

     label1:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

     label2:
        return $i0;

     label3:
        r2 := @caughtexception;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception> = r2;

        return -1;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void release()
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.util.Queue $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception> = null;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped> = null;

        $r1 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        entermonitor $r1;

     label1:
        $r2 = <com.bumptech.glide.util.ExceptionCatchingInputStream: java.util.Queue QUEUE>;

        interfaceinvoke $r2.<java.util.Queue: boolean offer(java.lang.Object)>(r0);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void reset() throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        entermonitor r0;

     label1:
        $r1 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    void setInputStream(java.io.InputStream)
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $r1 := @parameter0: java.io.InputStream;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped> = $r1;

        return;
    }
    public long skip(long) throws java.io.IOException
    {
        com.bumptech.glide.util.ExceptionCatchingInputStream r0;
        long $l0;
        java.io.IOException r1;
        java.io.InputStream $r2;

        r0 := @this: com.bumptech.glide.util.ExceptionCatchingInputStream;

        $l0 := @parameter0: long;

        $r2 = r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.InputStream wrapped>;

     label1:
        $l0 = virtualinvoke $r2.<java.io.InputStream: long skip(long)>($l0);

     label2:
        return $l0;

     label3:
        r1 := @caughtexception;

        r0.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException exception> = r1;

        return 0L;

        catch java.io.IOException from label1 to label2 with label3;
    }
