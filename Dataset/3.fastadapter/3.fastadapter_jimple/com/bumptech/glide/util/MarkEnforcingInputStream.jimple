com.bumptech.glide.util.MarkEnforcingInputStream extends java.io.FilterInputStream
private static final int END_OF_STREAM
private static final int UNSET
private int availableBytes
    public void <init>(java.io.InputStream)
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes> = -2147483648;

        return;
    }
    private long getBytesToRead(long)
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        long l0, $l2;
        int $i1;
        byte $b3;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        l0 := @parameter0: long;

        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        if $i1 != 0 goto label1;

        return -1L;

     label1:
        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        if $i1 == -2147483648 goto label2;

        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        $l2 = (long) $i1;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label2;

        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        l0 = (long) $i1;

     label2:
        return l0;
    }
    private void updateAvailableBytesAfterRead(long)
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        long $l0, $l3;
        int $i1;
        byte $b2;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $l0 := @parameter0: long;

        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        if $i1 == -2147483648 goto label1;

        $b2 = $l0 cmp -1L;

        if $b2 == 0 goto label1;

        $i1 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        $l3 = (long) $i1;

        $l0 = $l3 - $l0;

        $i1 = (int) $l0;

        r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes> = $i1;

     label1:
        return;
    }
    public int available() throws java.io.IOException
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $i0 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        if $i0 != -2147483648 goto label1;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int available()>();

        return $i0;

     label1:
        $i0 = r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes>;

        $i1 = specialinvoke r0.<java.io.FilterInputStream: int available()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i0;
    }
    public void mark(int)
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        int $i0;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.io.FilterInputStream: void mark(int)>($i0);

        r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes> = $i0;

        return;
    }
    public int read() throws java.io.IOException
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        byte $b0;
        long $l1;
        int $i2;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $l1 = specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: long getBytesToRead(long)>(1L);

        $b0 = $l1 cmp -1L;

        if $b0 != 0 goto label1;

        return -1;

     label1:
        $i2 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: void updateAvailableBytesAfterRead(long)>(1L);

        return $i2;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        byte[] $r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 = (long) $i1;

        $l2 = specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: long getBytesToRead(long)>($l2);

        $i1 = (int) $l2;

        if $i1 != -1 goto label1;

        return -1;

     label1:
        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        $l2 = (long) $i0;

        specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: void updateAvailableBytesAfterRead(long)>($l2);

        return $i0;
    }
    public void reset() throws java.io.IOException
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        specialinvoke r0.<java.io.FilterInputStream: void reset()>();

        r0.<com.bumptech.glide.util.MarkEnforcingInputStream: int availableBytes> = -2147483648;

        return;
    }
    public long skip(long) throws java.io.IOException
    {
        com.bumptech.glide.util.MarkEnforcingInputStream r0;
        long $l0;
        byte $b1;

        r0 := @this: com.bumptech.glide.util.MarkEnforcingInputStream;

        $l0 := @parameter0: long;

        $l0 = specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: long getBytesToRead(long)>($l0);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        return -1L;

     label1:
        $l0 = specialinvoke r0.<java.io.FilterInputStream: long skip(long)>($l0);

        specialinvoke r0.<com.bumptech.glide.util.MarkEnforcingInputStream: void updateAvailableBytesAfterRead(long)>($l0);

        return $l0;
    }
