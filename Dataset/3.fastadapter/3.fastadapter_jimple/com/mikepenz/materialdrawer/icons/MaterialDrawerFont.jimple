com.mikepenz.materialdrawer.icons.MaterialDrawerFont extends java.lang.Object implements com.mikepenz.iconics.typeface.ITypeface
private static final java.lang.String TTF_FILE
private static java.util.HashMap mChars
private static android.graphics.Typeface typeface
    static void <clinit>()
    {
        <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: android.graphics.Typeface typeface> = null;

        return;
    }
    public void <init>()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.lang.String getAuthor()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "";
    }
    public java.util.HashMap getCharacters()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;
        java.util.HashMap r1;
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon r2;
        int $i0, $i1;
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon[] $r3;
        java.lang.String $r4;
        char $c2;
        java.lang.Character $r5;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        r1 = <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: java.util.HashMap mChars>;

        if r1 != null goto label3;

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon[] values()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = $r3[$i1];

        $r4 = virtualinvoke r2.<com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: java.lang.String name()>();

        $c2 = r2.<com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: char character>;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: java.util.HashMap mChars> = r1;

     label3:
        r1 = <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: java.util.HashMap mChars>;

        return r1;
    }
    public java.lang.String getDescription()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "";
    }
    public java.lang.String getFontName()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "MaterialDrawerFont";
    }
    public com.mikepenz.iconics.typeface.IIcon getIcon(java.lang.String)
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;
        java.lang.String $r1;
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon $r2;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon valueOf(java.lang.String)>($r1);

        return $r2;
    }
    public int getIconCount()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;
        int $i0;
        java.util.HashMap $r1;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        $r1 = <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: java.util.HashMap mChars>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }
    public java.util.Collection getIcons()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;
        java.util.LinkedList r1;
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon r2;
        int $i0, $i1;
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon[] $r3;
        java.lang.String $r4;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        r1 = new java.util.LinkedList;

        specialinvoke r1.<java.util.LinkedList: void <init>()>();

        $r3 = staticinvoke <com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon[] values()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = $r3[$i1];

        $r4 = virtualinvoke r2.<com.mikepenz.materialdrawer.icons.MaterialDrawerFont$Icon: java.lang.String name()>();

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public java.lang.String getLicense()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "";
    }
    public java.lang.String getLicenseUrl()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "";
    }
    public java.lang.String getMappingPrefix()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "mdf";
    }
    public android.graphics.Typeface getTypeface(android.content.Context)
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;
        android.content.Context $r1;
        java.lang.Exception r2;
        android.graphics.Typeface $r3;
        android.content.res.AssetManager $r4;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        $r1 := @parameter0: android.content.Context;

        $r3 = <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: android.graphics.Typeface typeface>;

        if $r3 != null goto label3;

     label1:
        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r3 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>($r4, "fonts/materialdrawerfont-font-v5.0.0.ttf");

     label2:
        <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: android.graphics.Typeface typeface> = $r3;

     label3:
        $r3 = <com.mikepenz.materialdrawer.icons.MaterialDrawerFont: android.graphics.Typeface typeface>;

        return $r3;

     label4:
        r2 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }
    public java.lang.String getUrl()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "";
    }
    public java.lang.String getVersion()
    {
        com.mikepenz.materialdrawer.icons.MaterialDrawerFont r0;

        r0 := @this: com.mikepenz.materialdrawer.icons.MaterialDrawerFont;

        return "5.0.0";
    }
