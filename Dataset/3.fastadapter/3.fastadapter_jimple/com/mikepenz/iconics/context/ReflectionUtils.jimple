com.mikepenz.iconics.context.ReflectionUtils extends java.lang.Object
private static final java.lang.String TAG
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Lcom/mikepenz/iconics/context/ReflectionUtils;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.mikepenz.iconics.context.ReflectionUtils: java.lang.String TAG> = $r0;

        return;
    }
    void <init>()
    {
        com.mikepenz.iconics.context.ReflectionUtils r0;

        r0 := @this: com.mikepenz.iconics.context.ReflectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.reflect.Field $r2;
        java.lang.NoSuchFieldException $r3;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }
    static java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r4;
        int $i0, $i1;
        java.lang.reflect.Method[] $r2;
        java.lang.reflect.Method r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r3 = $r2[$i1];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return r3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }
    static java.lang.Object getValue(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.reflect.Field $r0;
        java.lang.Object $r1;
        java.lang.IllegalAccessException $r2;

        $r0 := @parameter0: java.lang.reflect.Field;

        $r1 := @parameter1: java.lang.Object;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
    static transient void invokeMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1;
        java.lang.Object[] $r2;
        java.lang.IllegalAccessException r3;
        java.lang.String $r4;
        java.lang.reflect.InvocationTargetException r5;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.reflect.Method;

        $r2 := @parameter2: java.lang.Object[];

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = <com.mikepenz.iconics.context.ReflectionUtils: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Can\'t invoke method using reflection", r3);

        return;

     label4:
        r5 := @caughtexception;

        $r4 = <com.mikepenz.iconics.context.ReflectionUtils: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Can\'t invoke method using reflection (InvocationTargetException)", r5);

        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }
    static void setValue(java.lang.reflect.Field, java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Field $r0;
        java.lang.Object $r1, $r2;
        java.lang.IllegalAccessException $r3;

        $r0 := @parameter0: java.lang.reflect.Field;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

     label1:
        virtualinvoke $r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r1, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }
