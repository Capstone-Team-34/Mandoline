android.support.design.widget.ShadowDrawableWrapper extends android.support.v7.graphics.drawable.DrawableWrapper
static final double COS_45
static final float SHADOW_BOTTOM_SCALE
static final float SHADOW_HORIZ_SCALE
static final float SHADOW_MULTIPLIER
static final float SHADOW_TOP_SCALE
private boolean mAddPaddingForCorners
final android.graphics.RectF mContentBounds
float mCornerRadius
final android.graphics.Paint mCornerShadowPaint
android.graphics.Path mCornerShadowPath
private boolean mDirty
final android.graphics.Paint mEdgeShadowPaint
float mMaxShadowSize
private boolean mPrintedShadowClipWarning
float mRawMaxShadowSize
float mRawShadowSize
private float mRotation
private final int mShadowEndColor
private final int mShadowMiddleColor
float mShadowSize
private final int mShadowStartColor
    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>(45.0);

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        <android.support.design.widget.ShadowDrawableWrapper: double COS_45> = $d0;

        return;
    }
    public void <init>(android.content.res.Resources, android.graphics.drawable.Drawable, float, float, float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.content.res.Resources $r1;
        android.graphics.drawable.Drawable $r2;
        float $f0, $f1, $f2;
        int $i0;
        android.graphics.Paint $r3, $r6;
        android.graphics.Paint$Style $r4;
        android.graphics.RectF $r5;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: android.graphics.drawable.Drawable;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $f2 := @parameter4: float;

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.Drawable)>($r2);

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty> = 1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mAddPaddingForCorners> = 1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mPrintedShadowClipWarning> = 0;

        $i0 = <android.support.design.R$color: int design_fab_shadow_start_color>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getColor(int)>($i0);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowStartColor> = $i0;

        $i0 = <android.support.design.R$color: int design_fab_shadow_mid_color>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getColor(int)>($i0);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowMiddleColor> = $i0;

        $i0 = <android.support.design.R$color: int design_fab_shadow_end_color>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getColor(int)>($i0);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowEndColor> = $i0;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(5);

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint> = $r3;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f0 = (float) $i0;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius> = $f0;

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds> = $r5;

        $r3 = new android.graphics.Paint;

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        specialinvoke $r3.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r6);

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint> = $r3;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r3.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>($f1, $f2);

        return;
    }
    private void buildComponents(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect $r1;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.drawable.Drawable $r2;
        android.graphics.RectF $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.graphics.Rect;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        f0 = f0 * 1.5F;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = $f1 + $f2;

        $i0 = $r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i0;

        $f2 = $f2 + f0;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $f3 = (float) $i0;

        $f4 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f3 = $f3 - $f4;

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $f4 = (float) $i0;

        f0 = $f4 - f0;

        virtualinvoke $r3.<android.graphics.RectF: void set(float,float,float,float)>($f1, $f2, $f3, f0);

        $r2 = virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.drawable.Drawable getWrappedDrawable()>();

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f0 = $r3.<android.graphics.RectF: float left>;

        $i0 = (int) f0;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f0 = $r3.<android.graphics.RectF: float top>;

        $i1 = (int) f0;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f0 = $r3.<android.graphics.RectF: float right>;

        $i2 = (int) f0;

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f0 = $r3.<android.graphics.RectF: float bottom>;

        $i3 = (int) f0;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void buildShadowCorners()>();

        return;
    }
    private void buildShadowCorners()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, f1, f2, $f3;
        int[] $r1;
        float[] $r2;
        android.graphics.Shader$TileMode $r3;
        android.graphics.RectF r4, r5, $r9;
        android.graphics.Path $r6, $r10;
        android.graphics.Path$FillType $r7;
        byte $b0;
        android.graphics.Paint $r8;
        int $i1;
        android.graphics.RadialGradient $r11;
        android.graphics.LinearGradient $r12;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r5 = new android.graphics.RectF;

        r4 = r5;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f0 = neg f0;

        f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f2 = neg f2;

        f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        specialinvoke r5.<android.graphics.RectF: void <init>(float,float,float,float)>(f0, f2, f1, $f3);

        $r9 = new android.graphics.RectF;

        specialinvoke $r9.<android.graphics.RectF: void <init>(android.graphics.RectF)>(r4);

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize>;

        f0 = neg f0;

        f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize>;

        f2 = neg f2;

        virtualinvoke $r9.<android.graphics.RectF: void inset(float,float)>(f0, f2);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        if $r6 != null goto label3;

        $r10 = new android.graphics.Path;

        specialinvoke $r10.<android.graphics.Path: void <init>()>();

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath> = $r10;

     label1:
        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        $r7 = <android.graphics.Path$FillType: android.graphics.Path$FillType EVEN_ODD>;

        virtualinvoke $r6.<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>($r7);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f0 = neg f0;

        virtualinvoke $r6.<android.graphics.Path: void moveTo(float,float)>(f0, 0.0F);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize>;

        f0 = neg f0;

        virtualinvoke $r6.<android.graphics.Path: void rLineTo(float,float)>(f0, 0.0F);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        virtualinvoke $r6.<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>($r9, 180.0F, 90.0F, 0);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        virtualinvoke $r6.<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>(r4, 270.0F, -90.0F, 0);

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        virtualinvoke $r6.<android.graphics.Path: void close()>();

        f0 = $r9.<android.graphics.RectF: float top>;

        f0 = neg f0;

        $b0 = f0 cmpl 0.0F;

        if $b0 <= 0 goto label2;

        f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f2 = f2 / f0;

        f1 = 1.0F - f2;

        f1 = f1 / 2.0F;

        f1 = f2 + f1;

        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        $r11 = new android.graphics.RadialGradient;

        $r1 = newarray (int)[4];

        $r1[0] = 0;

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowStartColor>;

        $r1[1] = $i1;

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowMiddleColor>;

        $r1[2] = $i1;

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowEndColor>;

        $r1[3] = $i1;

        $r2 = newarray (float)[4];

        $r2[0] = 0.0F;

        $r2[1] = f2;

        $r2[2] = f1;

        $r2[3] = 1.06535322E9F;

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r11.<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, 0.0F, f0, $r1, $r2, $r3);

        virtualinvoke $r8.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r11);

     label2:
        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        $r12 = new android.graphics.LinearGradient;

        f2 = r4.<android.graphics.RectF: float top>;

        f0 = $r9.<android.graphics.RectF: float top>;

        $r1 = newarray (int)[3];

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowStartColor>;

        $r1[0] = $i1;

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowMiddleColor>;

        $r1[1] = $i1;

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int mShadowEndColor>;

        $r1[2] = $i1;

        $r2 = newarray (float)[3];

        $r2[0] = 0.0F;

        $r2[1] = 0.5F;

        $r2[2] = 1.0F;

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r12.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, f2, 0.0F, f0, $r1, $r2, $r3);

        virtualinvoke $r8.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r12);

        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r8.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        return;

     label3:
        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        virtualinvoke $r6.<android.graphics.Path: void reset()>();

        goto label1;
    }
    public static float calculateHorizontalPadding(float, float, boolean)
    {
        float $f0, $f1;
        boolean $z0;
        double $d0, $d1, $d2;

        $f1 := @parameter0: float;

        $f0 := @parameter1: float;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label1;

        $d0 = (double) $f1;

        $d1 = <android.support.design.widget.ShadowDrawableWrapper: double COS_45>;

        $d1 = 1.0 - $d1;

        $d2 = (double) $f0;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $f1 = (float) $d0;

     label1:
        return $f1;
    }
    public static float calculateVerticalPadding(float, float, boolean)
    {
        float $f0, $f1;
        boolean $z0;
        double $d0, $d1, $d2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label1;

        $f0 = 1.5F * $f0;

        $d0 = (double) $f0;

        $d1 = <android.support.design.widget.ShadowDrawableWrapper: double COS_45>;

        $d1 = 1.0 - $d1;

        $d2 = (double) $f1;

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $f0 = (float) $d0;

        return $f0;

     label1:
        $f0 = 1.5F * $f0;

        return $f0;
    }
    private void drawShadow(android.graphics.Canvas)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Canvas $r1;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7;
        int $i0, $i2;
        android.graphics.RectF $r2;
        byte $b1;
        boolean z0, z1;
        android.graphics.Path $r3;
        android.graphics.Paint $r4;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRotation>;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f1 = virtualinvoke $r2.<android.graphics.RectF: float centerX()>();

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f3 = virtualinvoke $r2.<android.graphics.RectF: float centerY()>();

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float,float,float)>(f0, f1, f3);

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f0 = neg f0;

        f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize>;

        f0 = f0 - f1;

        f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f3 = virtualinvoke $r2.<android.graphics.RectF: float width()>();

        f4 = 2.0F * f1;

        f3 = f3 - f4;

        $b1 = f3 cmpl 0.0F;

        if $b1 <= 0 goto label7;

        z0 = 1;

     label1:
        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f3 = virtualinvoke $r2.<android.graphics.RectF: float height()>();

        f4 = 2.0F * f1;

        f3 = f3 - f4;

        $b1 = f3 cmpl 0.0F;

        if $b1 <= 0 goto label8;

        z1 = 1;

     label2:
        f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        f4 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        f4 = f4 * 0.25F;

        f4 = f3 - f4;

        f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        f2 = f2 * 0.5F;

        f3 = f3 - f2;

        f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        $f5 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        $f5 = $f5 * 1.0F;

        f2 = f2 - $f5;

        f3 = f1 + f3;

        f3 = f1 / f3;

        f4 = f1 + f4;

        f4 = f1 / f4;

        f2 = f1 + f2;

        f2 = f1 / f2;

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = $r2.<android.graphics.RectF: float left>;

        $f5 = $f5 + f1;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f6 = $r2.<android.graphics.RectF: float top>;

        $f6 = $f6 + f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f6);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f3, f4);

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r3, $r4);

        if z0 == 0 goto label3;

        $f5 = 1.0F / f3;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f5, 1.0F);

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = virtualinvoke $r2.<android.graphics.RectF: float width()>();

        $f6 = 2.0F * f1;

        $f5 = $f5 - $f6;

        $f6 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f6 = neg $f6;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f5, $f6, $r4);

     label3:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = $r2.<android.graphics.RectF: float right>;

        $f5 = $f5 - f1;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f6 = $r2.<android.graphics.RectF: float bottom>;

        $f6 = $f6 - f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f6);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f3, f2);

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>(180.0F);

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r3, $r4);

        if z0 == 0 goto label4;

        $f5 = 1.0F / f3;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f5, 1.0F);

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = virtualinvoke $r2.<android.graphics.RectF: float width()>();

        $f6 = 2.0F * f1;

        $f5 = $f5 - $f6;

        $f6 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f6 = neg $f6;

        $f7 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize>;

        $f6 = $f7 + $f6;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f5, $f6, $r4);

     label4:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = $r2.<android.graphics.RectF: float left>;

        $f5 = $f5 + f1;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f6 = $r2.<android.graphics.RectF: float bottom>;

        $f6 = $f6 - f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f6);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f3, f2);

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>(270.0F);

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r3, $r4);

        if z1 == 0 goto label5;

        f2 = 1.0F / f2;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f2, 1.0F);

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f2 = virtualinvoke $r2.<android.graphics.RectF: float height()>();

        $f5 = 2.0F * f1;

        f2 = f2 - $f5;

        $f5 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f5 = neg $f5;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, f2, $f5, $r4);

     label5:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f2 = $r2.<android.graphics.RectF: float right>;

        f2 = f2 - f1;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        $f5 = $r2.<android.graphics.RectF: float top>;

        $f5 = $f5 + f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>(f2, $f5);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f3, f4);

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float)>(90.0F);

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path mCornerShadowPath>;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r3, $r4);

        if z1 == 0 goto label6;

        f3 = 1.0F / f4;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>(f3, 1.0F);

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF mContentBounds>;

        f3 = virtualinvoke $r2.<android.graphics.RectF: float height()>();

        f1 = 2.0F * f1;

        f1 = f3 - f1;

        f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        f3 = neg f3;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, f1, f3, $r4);

     label6:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i0);

        return;

     label7:
        z0 = 0;

        goto label1;

     label8:
        z1 = 0;

        goto label2;
    }
    private static int toEven(float)
    {
        float $f0;
        int $i0, $i1;

        $f0 := @parameter0: float;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = $i1 % 2;

        if $i0 != 1 goto label1;

        $i0 = $i1 + -1;

        return $i0;

     label1:
        return $i1;
    }
    public void draw(android.graphics.Canvas)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Canvas $r1;
        android.graphics.Rect $r2;
        boolean $z0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void buildComponents(android.graphics.Rect)>($r2);

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty> = 0;

     label1:
        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void drawShadow(android.graphics.Canvas)>($r1);

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void draw(android.graphics.Canvas)>($r1);

        return;
    }
    public float getCornerRadius()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        return f0;
    }
    public float getMaxShadowSize()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        return f0;
    }
    public float getMinHeight()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1, $f2;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f2 = $f2 * 1.5F;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>(f0, $f1);

        f0 = 2.0F * f0;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = $f1 * 1.5F;

        $f1 = $f1 * 2.0F;

        f0 = $f1 + f0;

        return f0;
    }
    public float getMinWidth()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1, $f2;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>(f0, $f1);

        f0 = 2.0F * f0;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = $f1 * 2.0F;

        f0 = $f1 + f0;

        return f0;
    }
    public int getOpacity()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        return -3;
    }
    public boolean getPadding(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect $r1;
        int i0, i1;
        float $f0, $f1;
        boolean $z0;
        double $d0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mAddPaddingForCorners>;

        $f0 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: float calculateVerticalPadding(float,float,boolean)>($f0, $f1, $z0);

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i1 = (int) $d0;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mAddPaddingForCorners>;

        $f0 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: float calculateHorizontalPadding(float,float,boolean)>($f0, $f1, $z0);

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d0;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i0, i1);

        return 1;
    }
    public float getShadowSize()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        return f0;
    }
    protected void onBoundsChange(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect $r1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r1 := @parameter0: android.graphics.Rect;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty> = 1;

        return;
    }
    public void setAddPaddingForCorners(boolean)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        boolean $z0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $z0 := @parameter0: boolean;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mAddPaddingForCorners> = $z0;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }
    public void setAlpha(int)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        int $i0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $i0 := @parameter0: int;

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void setAlpha(int)>($i0);

        $r1 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mCornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>($i0);

        $r1 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint mEdgeShadowPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>($i0);

        return;
    }
    public void setCornerRadius(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        int $i0;
        float $f0, $f1;
        byte $b1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f0 = (float) $i0;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius>;

        $b1 = $f1 cmpl $f0;

        if $b1 != 0 goto label1;

        return;

     label1:
        r0.<android.support.design.widget.ShadowDrawableWrapper: float mCornerRadius> = $f0;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty> = 1;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }
    public void setMaxShadowSize(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0, $f1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>($f1, $f0);

        return;
    }
    final void setRotation(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRotation>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float mRotation> = $f0;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

     label1:
        return;
    }
    public void setShadowSize(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0, $f1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>($f0, $f1);

        return;
    }
    void setShadowSize(float, float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0, $f1, $f2;
        byte $b0;
        java.lang.IllegalArgumentException $r1;
        int $i1;
        boolean $z0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b0 = $f1 cmpg 0.0F;

        if $b0 >= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid shadow size");

        throw $r1;

     label2:
        $i1 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: int toEven(float)>($f0);

        $f2 = (float) $i1;

        $i1 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: int toEven(float)>($f1);

        $f0 = (float) $i1;

        $b0 = $f2 cmpl $f0;

        if $b0 <= 0 goto label3;

        $f2 = $f0;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mPrintedShadowClipWarning>;

        if $z0 != 0 goto label3;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mPrintedShadowClipWarning> = 1;

     label3:
        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize>;

        $b0 = $f1 cmpl $f2;

        if $b0 != 0 goto label4;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label4;

        return;

     label4:
        r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawShadowSize> = $f2;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float mRawMaxShadowSize> = $f0;

        $f1 = 1.5F * $f2;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $f1 = (float) $i1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float mShadowSize> = $f1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float mMaxShadowSize> = $f0;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean mDirty> = 1;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }
