android.support.v4.view.ViewCompatBase extends java.lang.Object
private static final java.lang.String TAG
private static java.lang.reflect.Field sMinHeightField
private static boolean sMinHeightFieldFetched
private static java.lang.reflect.Field sMinWidthField
private static boolean sMinWidthFieldFetched
    void <init>()
    {
        android.support.v4.view.ViewCompatBase r0;

        r0 := @this: android.support.v4.view.ViewCompatBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static android.content.res.ColorStateList getBackgroundTintList(android.view.View)
    {
        android.content.res.ColorStateList $r0;
        android.view.View r1;
        boolean $z0;
        android.support.v4.view.TintableBackgroundView r2;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.TintableBackgroundView) r1;

        $r0 = interfaceinvoke r2.<android.support.v4.view.TintableBackgroundView: android.content.res.ColorStateList getSupportBackgroundTintList()>();

        return $r0;

     label1:
        return null;
    }
    static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
    {
        android.graphics.PorterDuff$Mode $r0;
        android.view.View r1;
        boolean $z0;
        android.support.v4.view.TintableBackgroundView r2;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        r2 = (android.support.v4.view.TintableBackgroundView) r1;

        $r0 = interfaceinvoke r2.<android.support.v4.view.TintableBackgroundView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()>();

        return $r0;

     label1:
        return null;
    }
    static android.view.Display getDisplay(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.view.WindowManager r3;
        android.view.Display $r4;

        $r0 := @parameter0: android.view.View;

        $z0 = staticinvoke <android.support.v4.view.ViewCompatBase: boolean isAttachedToWindow(android.view.View)>($r0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r3 = (android.view.WindowManager) $r2;

        $r4 = interfaceinvoke r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        return $r4;

     label1:
        return null;
    }
    static int getMinimumHeight(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        java.lang.Exception $r5;
        java.lang.NoSuchFieldException $r6;

        $r0 := @parameter0: android.view.View;

        $z0 = <android.support.v4.view.ViewCompatBase: boolean sMinHeightFieldFetched>;

        if $z0 != 0 goto label05;

        $r1 = class "Landroid/view/View;";

     label01:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinHeight");

     label02:
        <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinHeightField> = $r2;

        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinHeightField>;

     label03:
        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label04:
        <android.support.v4.view.ViewCompatBase: boolean sMinHeightFieldFetched> = 1;

     label05:
        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinHeightField>;

        if $r2 == null goto label09;

        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinHeightField>;

     label06:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label07:
        return $i0;

     label08:
        $r5 := @caughtexception;

     label09:
        return 0;

     label10:
        $r6 := @caughtexception;

        goto label04;

        catch java.lang.NoSuchFieldException from label01 to label02 with label10;
        catch java.lang.NoSuchFieldException from label03 to label04 with label10;
        catch java.lang.Exception from label06 to label07 with label08;
    }
    static int getMinimumWidth(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        java.lang.Exception $r5;
        java.lang.NoSuchFieldException $r6;

        $r0 := @parameter0: android.view.View;

        $z0 = <android.support.v4.view.ViewCompatBase: boolean sMinWidthFieldFetched>;

        if $z0 != 0 goto label05;

        $r1 = class "Landroid/view/View;";

     label01:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinWidth");

     label02:
        <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinWidthField> = $r2;

        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinWidthField>;

     label03:
        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label04:
        <android.support.v4.view.ViewCompatBase: boolean sMinWidthFieldFetched> = 1;

     label05:
        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinWidthField>;

        if $r2 == null goto label09;

        $r2 = <android.support.v4.view.ViewCompatBase: java.lang.reflect.Field sMinWidthField>;

     label06:
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label07:
        return $i0;

     label08:
        $r5 := @caughtexception;

     label09:
        return 0;

     label10:
        $r6 := @caughtexception;

        goto label04;

        catch java.lang.NoSuchFieldException from label01 to label02 with label10;
        catch java.lang.NoSuchFieldException from label03 to label04 with label10;
        catch java.lang.Exception from label06 to label07 with label08;
    }
    static boolean isAttachedToWindow(android.view.View)
    {
        android.view.View $r0;
        android.os.IBinder $r1;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    static boolean isLaidOut(android.view.View)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        if $i0 <= 0 goto label1;

        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    static void offsetLeftAndRight(android.view.View, int)
    {
        android.view.View $r0, r2;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.ViewParent $r1;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<android.view.View: int getLeft()>();

        virtualinvoke $r0.<android.view.View: void offsetLeftAndRight(int)>($i0);

        if $i0 == 0 goto label2;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r1 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        r2 = (android.view.View) $r1;

        $i0 = $i1 - $i2;

        $i3 = virtualinvoke $r0.<android.view.View: int getTop()>();

        $i4 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i1 = $i4 + $i1;

        $i1 = $i1 + $i2;

        $i2 = virtualinvoke $r0.<android.view.View: int getBottom()>();

        virtualinvoke r2.<android.view.View: void invalidate(int,int,int,int)>($i0, $i3, $i1, $i2);

        return;

     label1:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label2:
        return;
    }
    static void offsetTopAndBottom(android.view.View, int)
    {
        android.view.View $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ViewParent $r1;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<android.view.View: int getTop()>();

        virtualinvoke $r0.<android.view.View: void offsetTopAndBottom(int)>($i0);

        if $i0 == 0 goto label2;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r1 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        r2 = (android.view.View) $r1;

        $i3 = virtualinvoke $r0.<android.view.View: int getLeft()>();

        $i0 = $i1 - $i2;

        $i4 = virtualinvoke $r0.<android.view.View: int getRight()>();

        $i5 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i1 = $i5 + $i1;

        $i1 = $i1 + $i2;

        virtualinvoke r2.<android.view.View: void invalidate(int,int,int,int)>($i3, $i0, $i4, $i1);

        return;

     label1:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label2:
        return;
    }
    static void setBackgroundTintList(android.view.View, android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r0;
        boolean $z0;
        android.view.View $r1;
        android.support.v4.view.TintableBackgroundView $r2;

        $r1 := @parameter0: android.view.View;

        $r0 := @parameter1: android.content.res.ColorStateList;

        $z0 = $r1 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.TintableBackgroundView) $r1;

        interfaceinvoke $r2.<android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintList(android.content.res.ColorStateList)>($r0);

     label1:
        return;
    }
    static void setBackgroundTintMode(android.view.View, android.graphics.PorterDuff$Mode)
    {
        android.graphics.PorterDuff$Mode $r0;
        boolean $z0;
        android.view.View $r1;
        android.support.v4.view.TintableBackgroundView $r2;

        $r1 := @parameter0: android.view.View;

        $r0 := @parameter1: android.graphics.PorterDuff$Mode;

        $z0 = $r1 instanceof android.support.v4.view.TintableBackgroundView;

        if $z0 == 0 goto label1;

        $r2 = (android.support.v4.view.TintableBackgroundView) $r1;

        interfaceinvoke $r2.<android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)>($r0);

     label1:
        return;
    }
