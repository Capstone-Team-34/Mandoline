org.apache.commons.math3.stat.descriptive.rank.Percentile extends org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable
private static final int MAX_CACHED_LEVELS
private static final int PIVOTS_HEAP_LENGTH
private static final long serialVersionUID
private int[] cachedPivots
private final org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType
private final org.apache.commons.math3.util.KthSelector kthSelector
private final org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy
private double quantile
    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double)>(50.0);

        return;
    }
    public void <init>(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double $d0;
        org.apache.commons.math3.util.MedianOf3PivotingStrategy $r1;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;
        org.apache.commons.math3.util.KthSelector $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 := @parameter0: double;

        $r2 = <org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType LEGACY>;

        $r3 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy REMOVED>;

        $r4 = new org.apache.commons.math3.util.KthSelector;

        $r1 = new org.apache.commons.math3.util.MedianOf3PivotingStrategy;

        specialinvoke $r1.<org.apache.commons.math3.util.MedianOf3PivotingStrategy: void <init>()>();

        specialinvoke $r4.<org.apache.commons.math3.util.KthSelector: void <init>(org.apache.commons.math3.util.PivotingStrategyInterface)>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double,org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($d0, $r2, $r3, $r4);

        return;
    }
    protected void <init>(double, org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType, org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.util.KthSelector) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;
        org.apache.commons.math3.util.KthSelector $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType;

        $r2 := @parameter2: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r3 := @parameter3: org.apache.commons.math3.util.KthSelector;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setQuantile(double)>($d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r3);

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector> = $r3;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0, $r1;
        int[] $r2, $r7, $r8;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r3;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r4;
        org.apache.commons.math3.util.KthSelector $r5;
        double[] $r6;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType> = $r3;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r4;

        $r5 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector getKthSelector()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector> = $r5;

        $r6 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setData(double[])>($r6);

        $r2 = $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        if $r2 == null goto label1;

        $r7 = $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $r8 = $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $i0 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r2, 0, $i0);

     label1:
        $d0 = $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setQuantile(double)>($d0);

        return;
    }
    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile, org.apache.commons.math3.stat.descriptive.rank.Percentile) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r0, $r1;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;
    }
    private static double[] copyOf(double[], int, int)
    {
        double[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int)>($r0, $i0, $i1);

        $i1 = $i0 + $i1;

        $r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOfRange(double[],int,int)>($r0, $i0, $i1);

        return $r0;
    }
    private int[] getPivots(double[])
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1, $r2;
        int[] r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        if $r1 != $r2 goto label1;

        r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        return r3;

     label1:
        r3 = newarray (int)[512];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r3, -1);

        return r3;
    }
    private static double[] removeAndSlice(double[], int, int, double)
    {
        double[] $r0, r2;
        int $i0, $i1, i2, i3, $i4, $i5;
        double $d0, $d1;
        java.util.BitSet r1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int)>($r0, $i0, $i1);

        r1 = new java.util.BitSet;

        specialinvoke r1.<java.util.BitSet: void <init>(int)>($i1);

        i3 = $i0;

     label1:
        $i4 = $i0 + $i1;

        if i3 >= $i4 goto label3;

        $d1 = $r0[i3];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 == 0 goto label2;

        $i4 = i3 - $i0;

        virtualinvoke r1.<java.util.BitSet: void set(int)>($i4);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r1.<java.util.BitSet: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] copyOf(double[],int,int)>($r0, $i0, $i1);

        return $r0;

     label4:
        i3 = virtualinvoke r1.<java.util.BitSet: int cardinality()>();

        if i3 != $i1 goto label5;

        $r0 = newarray (double)[0];

        return $r0;

     label5:
        i3 = virtualinvoke r1.<java.util.BitSet: int cardinality()>();

        i3 = $i1 - i3;

        r2 = newarray (double)[i3];

        $i4 = $i0;

        i3 = 0;

        i2 = 0;

     label6:
        $i5 = virtualinvoke r1.<java.util.BitSet: int nextSetBit(int)>(i2);

        if $i5 == -1 goto label7;

        i2 = $i5 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, r2, i3, i2);

        i3 = i3 + i2;

        $i4 = virtualinvoke r1.<java.util.BitSet: int nextClearBit(int)>($i5);

        i2 = $i4;

        $i4 = $i0 + $i4;

        goto label6;

     label7:
        i2 = $i0 + $i1;

        if $i4 >= i2 goto label8;

        $i0 = $i0 + $i1;

        $i0 = $i0 - $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, r2, i3, $i0);

     label8:
        return r2;
    }
    private static double[] replaceAndSlice(double[], int, int, double, double)
    {
        double[] $r0;
        int $i0, $i1;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        $d1 := @parameter4: double;

        $r0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] copyOf(double[],int,int)>($r0, $i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label4;

        $d2 = $r0[$i0];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d2);

        if $z0 == 0 goto label3;

        $d2 = $d1;

     label2:
        $r0[$i0] = $d2;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $d2 = $r0[$i0];

        goto label2;

     label4:
        return $r0;
    }
    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile copy()>();

        return r0;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Percentile copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile)>(r0);

        return $r1;
    }
    public double evaluate(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double $d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double evaluate(double[],double)>($r1, $d0);

        return $d0;
    }
    public double evaluate(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: boolean test(double[],int,int)>($r1, 0, 0);

        $i0 = lengthof $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double evaluate(double[],int,int,double)>($r1, 0, $i0, $d0);

        return $d0;
    }
    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1;
        int $i0, $i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double evaluate(double[],int,int,double)>($r1, $i0, $i1, $d0);

        return $d0;
    }
    public double evaluate(double[], int, int, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1, $r7;
        int $i0, $i1;
        double $d0;
        byte $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;
        int[] $r8;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r9;
        org.apache.commons.math3.util.KthSelector $r10;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $d0 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: boolean test(double[],int,int)>($r1, $i0, $i1);

        $b2 = $d0 cmpl 100.0;

        if $b2 > 0 goto label1;

        $b2 = $d0 cmpg 0.0;

        if $b2 > 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_QUANTILE_VALUE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        if $i1 != 0 goto label3;

        return #NaN;

     label3:
        if $i1 != 1 goto label4;

        $d0 = $r1[$i0];

        return $d0;

     label4:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getWorkArray(double[],int,int)>($r1, $i0, $i1);

        $r8 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] getPivots(double[])>($r1);

        $i0 = lengthof $r7;

        if $i0 == 0 goto label5;

        $r9 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType>;

        $r10 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector>;

        $d0 = virtualinvoke $r9.<org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType: double evaluate(double[],int[],double,org.apache.commons.math3.util.KthSelector)>($r7, $r8, $d0, $r10);

        return $d0;

     label5:
        return #NaN;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType>;

        return r1;
    }
    public org.apache.commons.math3.util.KthSelector getKthSelector()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        org.apache.commons.math3.util.KthSelector r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector>;

        return r1;
    }
    public org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        return r1;
    }
    public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        org.apache.commons.math3.util.PivotingStrategyInterface $r1;
        org.apache.commons.math3.util.KthSelector $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()>();

        return $r1;
    }
    public double getQuantile()
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        return d0;
    }
    protected double[] getWorkArray(double[], int, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1, $r2;
        int $i0, $i1, $i2;
        int[] $r3;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        if $r1 != $r2 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        return $r1;

     label1:
        $r3 = <org.apache.commons.math3.stat.descriptive.rank.Percentile$1: int[] $SwitchMap$org$apache$commons$math3$stat$ranking$NaNStrategy>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaNStrategy: int ordinal()>();

        $i2 = $r3[$i2];

        lookupswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label2;
        };

     label2:
        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] copyOf(double[],int,int)>($r1, $i0, $i1);

        return $r1;

     label3:
        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] replaceAndSlice(double[],int,int,double,double)>($r1, $i0, $i1, #NaN, #Infinity);

        return $r1;

     label4:
        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] replaceAndSlice(double[],int,int,double,double)>($r1, $i0, $i1, #NaN, #-Infinity);

        return $r1;

     label5:
        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] removeAndSlice(double[],int,int,double)>($r1, $i0, $i1, #NaN);

        return $r1;

     label6:
        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Percentile: double[] copyOf(double[],int,int)>($r1, $i0, $i1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNotNaN(double[])>($r1);

        return $r1;
    }
    int medianOf3(double[], int, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.util.MedianOf3PivotingStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new org.apache.commons.math3.util.MedianOf3PivotingStrategy;

        specialinvoke $r2.<org.apache.commons.math3.util.MedianOf3PivotingStrategy: void <init>()>();

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.util.MedianOf3PivotingStrategy: int pivotIndex(double[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
    public void setData(double[])
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        if $r1 != null goto label2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

     label1:
        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: void setData(double[])>($r1);

        return;

     label2:
        $r2 = newarray (int)[512];

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots> = $r2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, -1);

        goto label1;
    }
    public void setData(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double[] $r1;
        int $i0, $i1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

     label1:
        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: void setData(double[],int,int)>($r1, $i0, $i1);

        return;

     label2:
        $r2 = newarray (int)[512];

        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots> = $r2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, -1);

        goto label1;
    }
    public void setQuantile(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0;
        double $d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 100.0;

        if $b0 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_QUANTILE_VALUE>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile> = $d0;

        return;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Percentile withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType)
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0, $r2;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r1;
        double $d0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;
        org.apache.commons.math3.util.KthSelector $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector>;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double,org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($d0, $r1, $r3, $r4);

        return $r2;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Percentile withKthSelector(org.apache.commons.math3.util.KthSelector)
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0, $r2;
        org.apache.commons.math3.util.KthSelector $r1;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r3;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: org.apache.commons.math3.util.KthSelector;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double,org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($d0, $r3, $r4, $r1);

        return $r2;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Percentile withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy)
    {
        org.apache.commons.math3.stat.descriptive.rank.Percentile r0, $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r3;
        org.apache.commons.math3.util.KthSelector $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: double quantile>;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: org.apache.commons.math3.util.KthSelector kthSelector>;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double,org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($d0, $r3, $r1, $r4);

        return $r2;
    }
