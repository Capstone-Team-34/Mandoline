org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues extends java.lang.Object implements java.io.Serializable org.apache.commons.math3.stat.descriptive.StatisticalSummary
private static final long serialVersionUID
private final double max
private final double mean
private final double min
private final long n
private final double sum
private final double variance
    public void <init>(double, double, long, double, double, double)
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0, $d1, $d2, $d3, $d4;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $l0 := @parameter2: long;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $d4 := @parameter5: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double mean> = $d0;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance> = $d1;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long n> = $l0;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double max> = $d2;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double min> = $d3;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double sum> = $d4;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        long $l0;
        float $f0, $f1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues) $r1;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 == 0 goto label3;

        $l0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $f0 = (float) $l0;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $f1 = (float) $l0;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>($f0, $f1);

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public double getMax()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double max>;

        return d0;
    }
    public double getMean()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double mean>;

        return d0;
    }
    public double getMin()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double min>;

        return d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        l0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long n>;

        return l0;
    }
    public double getStandardDeviation()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public double getSum()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double sum>;

        return d0;
    }
    public double getVariance()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance>;

        return d0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + 31;

        $i0 = $i0 * 31;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $l2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $d0 = (double) $l2;

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i0 = $i0 + $i1;

        return $i0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        java.lang.StringBuffer r1, $r2;
        long $l0;
        double $d0;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("StatisticalSummaryValues:");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("n: ");

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("min: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("max: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mean: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("std dev: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getStandardDeviation()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("variance: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("sum: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
