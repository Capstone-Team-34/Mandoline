org.apache.commons.math3.stat.ranking.NaturalRanking extends java.lang.Object implements org.apache.commons.math3.stat.ranking.RankingAlgorithm
public static final org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY
public static final org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY
private final org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy
private final org.apache.commons.math3.random.RandomDataGenerator randomData
private final org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy
    static void <clinit>()
    {
        org.apache.commons.math3.stat.ranking.NaNStrategy $r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;

        $r0 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FAILED>;

        <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY> = $r0;

        $r1 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy AVERAGE>;

        <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY> = $r1;

        return;
    }
    public void <init>()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r2;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = null;

        return;
    }
    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy RANDOM>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r2;

        $r3 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r3;

        $r4 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r1);

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r4;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r2;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = null;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r1;

        $r3 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy RANDOM>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r3;

        $r4 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r2);

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r4;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;
        org.apache.commons.math3.random.RandomDataGenerator $r3;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 := @parameter1: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r1;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r2;

        $r3 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r3.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r3;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;
        org.apache.commons.math3.random.RandomDataGenerator $r3;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r2;

        $r3 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r3.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r3;

        return;
    }
    private boolean containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] $r1;
        int i0, $i1;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r2;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r2 = $r1[i0];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }
    private void fill(double[], java.util.List, double)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] $r1;
        java.util.List r2;
        double $d0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        $d0 := @parameter2: double;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1[$i0] = $d0;

        goto label1;

     label2:
        return;
    }
    private java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] $r1;
        java.util.ArrayList r2;
        int i0, $i1;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r3;
        double $d0;
        boolean $z0;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r3 = $r1[i0];

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r2;
    }
    private void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[], double)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] $r1;
        double $d0, $d1;
        int i0, $i1;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        $d0 := @parameter1: double;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r2 = $r1[i0];

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label2;

        $r2 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r3 = $r1[i0];

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        specialinvoke $r2.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d0, $i1);

        $r1[i0] = $r2;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    private org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r1, r2;
        boolean $z0;
        int $i0, i1, $i2, $i3;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r3, $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r2 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        $z0 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: boolean containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r2);

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $i0 = lengthof r2;

        r1 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[$i0];

        $i0 = 0;

        i1 = 0;

     label2:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label6;

        $r3 = r2[i1];

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        $i2 = i1 + 1;

     label3:
        $i3 = lengthof r2;

        if $i2 >= $i3 goto label5;

        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r4 = r2[$i2];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $r4 = r2[$i2];

        $i3 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $i3 = $i3 + -1;

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d0, $i3);

        r2[$i2] = $r3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r4 = r2[i1];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $r4 = r2[i1];

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d0, $i2);

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        r2 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i0);

        return r2;
    }
    private void resolveTie(double[], java.util.List)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] $r1;
        java.util.List r2;
        double d0, $d1;
        int i0, $i1, $i4;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int[] $r5;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r6;
        org.apache.commons.math3.exception.MathInternalError $r7;
        java.util.Iterator $r8;
        long $l2, $l3;
        boolean $z0;
        org.apache.commons.math3.random.RandomDataGenerator $r9;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        d0 = $r1[i0];

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r5 = <org.apache.commons.math3.stat.ranking.NaturalRanking$1: int[] $SwitchMap$org$apache$commons$math3$stat$ranking$TiesStrategy>;

        $r6 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy>;

        $i1 = virtualinvoke $r6.<org.apache.commons.math3.stat.ranking.TiesStrategy: int ordinal()>();

        $i1 = $r5[$i1];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label7;
            default: goto label1;
        };

     label1:
        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label2:
        d0 = 2.0 * d0;

        $d1 = (double) i0;

        d0 = d0 + $d1;

        d0 = d0 - 1.0;

        d0 = d0 / 2.0;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>($r1, r2, d0);

        return;

     label3:
        $d1 = (double) i0;

        d0 = $d1 + d0;

        d0 = d0 - 1.0;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>($r1, r2, d0);

        return;

     label4:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>($r1, r2, d0);

        return;

     label5:
        $r8 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>(d0);

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r9 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        $l3 = (long) i0;

        $l3 = $l3 + $l2;

        $l3 = $l3 - 1L;

        $l3 = virtualinvoke $r9.<org.apache.commons.math3.random.RandomDataGenerator: long nextLong(long,long)>($l2, $l3);

        d0 = (double) $l3;

        $r1[$i1] = d0;

        goto label6;

     label7:
        $r8 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>(d0);

        $i1 = 0;

     label8:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i1;

        $l3 = $l3 + $l2;

        d0 = (double) $l3;

        $r1[$i4] = d0;

        $i1 = $i1 + 1;

        goto label8;

     label9:
        return;
    }
    private void restoreNaNs(double[], java.util.List)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] $r1;
        java.util.List r2;
        int $i0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1[$i0] = #NaN;

        goto label2;

     label3:
        return;
    }
    public org.apache.commons.math3.stat.ranking.NaNStrategy getNanStrategy()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        return r1;
    }
    public org.apache.commons.math3.stat.ranking.TiesStrategy getTiesStrategy()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy r1;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy>;

        return r1;
    }
    public double[] rank(double[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r2;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r3;
        double $d0, $d1;
        java.util.List r4, $r10;
        int[] $r5;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r6, $r12;
        org.apache.commons.math3.exception.MathInternalError $r7;
        java.util.ArrayList r8;
        java.lang.Integer $r9;
        org.apache.commons.math3.exception.NotANumberException $r11;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[$i0];

        $i0 = 0;

     label01:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label02;

        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $d0 = $r1[$i0];

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d0, $i0);

        r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        r4 = null;

        $r5 = <org.apache.commons.math3.stat.ranking.NaturalRanking$1: int[] $SwitchMap$org$apache$commons$math3$stat$ranking$NaNStrategy>;

        $r6 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $i0 = virtualinvoke $r6.<org.apache.commons.math3.stat.ranking.NaNStrategy: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label12;
            default: goto label03;
        };

     label03:
        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label04:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)>(r2, #Infinity);

     label05:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r2);

        $i0 = lengthof r2;

        $r1 = newarray (double)[$i0];

        $i0 = 1;

        $r3 = r2[0];

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r1[$i1] = 1.0;

        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        $r3 = r2[0];

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $i1 = 1;

     label06:
        $i2 = lengthof r2;

        if $i1 >= $i2 goto label14;

        $r3 = r2[$i1];

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $i2 = $i1 + -1;

        $r3 = r2[$i2];

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i2 <= 0 goto label13;

        $i0 = $i1 + 1;

        $i2 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i2 <= 1 goto label07;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void resolveTie(double[],java.util.List)>($r1, r8);

     label07:
        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        $r3 = r2[$i1];

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label08:
        $r3 = r2[$i1];

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $d0 = (double) $i0;

        $r1[$i2] = $d0;

        $i1 = $i1 + 1;

        goto label06;

     label09:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)>(r2, #-Infinity);

        goto label05;

     label10:
        r2 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r2);

        goto label05;

     label11:
        r4 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r2);

        goto label05;

     label12:
        $r10 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r2);

        r4 = $r10;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i0 <= 0 goto label05;

        $r11 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r11.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r11;

     label13:
        $r3 = r2[$i1];

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label08;

     label14:
        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i0 <= 1 goto label15;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void resolveTie(double[],java.util.List)>($r1, r8);

     label15:
        $r6 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $r12 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FIXED>;

        if $r6 != $r12 goto label16;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void restoreNaNs(double[],java.util.List)>($r1, r4);

     label16:
        return $r1;
    }
