org.apache.commons.math3.stat.inference.TTest extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.TTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        long $l0;
        byte $b1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Long $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label1:
        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA_FOR_T_STATISTIC>;

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r5, $r6, 1);

        throw $r4;

     label2:
        return;
    }
    private void checkSampleData(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        if $i0 >= 2 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA_FOR_T_STATISTIC>;

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r5, $r6, 1);

        throw $r4;

     label2:
        return;
    }
    private void checkSignificanceLevel(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIGNIFICANCE_LEVEL>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r3, $r4, $r5);

        throw $r2;

     label2:
        return;
    }
    protected double df(double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 = $d0 / $d2;

        $d5 = $d1 / $d3;

        $d4 = $d4 + $d5;

        $d5 = $d0 / $d2;

        $d6 = $d1 / $d3;

        $d5 = $d5 + $d6;

        $d4 = $d4 * $d5;

        $d0 = $d0 * $d0;

        $d5 = $d2 * $d2;

        $d2 = $d2 - 1.0;

        $d2 = $d5 * $d2;

        $d0 = $d0 / $d2;

        $d1 = $d1 * $d1;

        $d2 = $d3 * $d3;

        $d3 = $d3 - 1.0;

        $d2 = $d2 * $d3;

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        $d0 = $d4 / $d0;

        return $d0;
    }
    protected double homoscedasticT(double, double, double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d6 = $d4 - 1.0;

        $d2 = $d6 * $d2;

        $d6 = $d5 - 1.0;

        $d3 = $d6 * $d3;

        $d2 = $d2 + $d3;

        $d3 = $d4 + $d5;

        $d3 = $d3 - 2.0;

        $d2 = $d2 / $d3;

        $d0 = $d0 - $d1;

        $d1 = 1.0 / $d4;

        $d3 = 1.0 / $d5;

        $d1 = $d1 + $d3;

        $d1 = $d1 * $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double homoscedasticT(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r2);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d5 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d0 = (double) $l0;

        $l0 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public double homoscedasticT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r2);

        $d4 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $d5 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r2);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $i0 = lengthof $r2;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    protected double homoscedasticTTest(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.distribution.TDistribution r1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = $d4 + $d5;

        $d1 = $d1 - 2.0;

        r1 = new org.apache.commons.math3.distribution.TDistribution;

        specialinvoke r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d0 = neg $d0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 2.0 * $d0;

        return $d0;
    }
    public double homoscedasticTTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r2);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d5 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d0 = (double) $l0;

        $l0 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public double homoscedasticTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r2);

        $d4 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $d5 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r2);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $i0 = lengthof $r2;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public boolean homoscedasticTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double[],double[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public double pairedT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r2);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double meanDifference(double[],double[])>($r1, $r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double varianceDifference(double[],double[],double)>($r1, $r2, $d1);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d1, 0.0, $d2, $d0);

        return $d0;
    }
    public double pairedTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double meanDifference(double[],double[])>($r1, $r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double varianceDifference(double[],double[],double)>($r1, $r2, $d1);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>($d1, 0.0, $d2, $d0);

        return $d0;
    }
    public boolean pairedTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double pairedTTest(double[],double[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected double t(double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d0 = $d0 - $d1;

        $d1 = $d2 / $d3;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }
    protected double t(double, double, double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d0 = $d0 - $d1;

        $d1 = $d2 / $d4;

        $d2 = $d3 / $d5;

        $d1 = $d1 + $d2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }
    public double t(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d2, $d0, $d3, $d1);

        return $d0;
    }
    public double t(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $i0 = lengthof $r1;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d2, $d0, $d3, $d1);

        return $d0;
    }
    public double t(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r2);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d5 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d0 = (double) $l0;

        $l0 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public double t(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r2);

        $d4 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $d5 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r2);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $i0 = lengthof $r2;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    protected double tTest(double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.distribution.TDistribution r1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d0, $d1, $d2, $d3);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r1 = new org.apache.commons.math3.distribution.TDistribution;

        $d1 = $d3 - 1.0;

        specialinvoke r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d0 = neg $d0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 2.0 * $d0;

        return $d0;
    }
    protected double tTest(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.distribution.TDistribution r1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $d4 := @parameter4: double;

        $d5 := @parameter5: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double df(double,double,double,double)>($d2, $d3, $d4, $d5);

        r1 = new org.apache.commons.math3.distribution.TDistribution;

        specialinvoke r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d0 = neg $d0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 2.0 * $d0;

        return $d0;
    }
    public double tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>($d2, $d0, $d3, $d1);

        return $d0;
    }
    public double tTest(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1, $d2, $d3;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $i0 = lengthof $r1;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>($d2, $d0, $d3, $d1);

        return $d0;
    }
    public double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r2);

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d3 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d4 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d5 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d0 = (double) $l0;

        $l0 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d1 = (double) $l0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public double tTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>($r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>($r2);

        $d4 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r1);

        $d5 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>($r2);

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $i0 = lengthof $r2;

        $d1 = (double) $i0;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, $d0, $d1);

        return $d0;
    }
    public boolean tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($d0, $r1);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean tTest(double, double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double $d0, $d1;
        double[] $r1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $d0 := @parameter0: double;

        $r1 := @parameter1: double[];

        $d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double[])>($d0, $r1);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary $r1, $r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean tTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] $r1, $r2;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double[],double[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
