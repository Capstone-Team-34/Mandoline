org.apache.commons.math3.stat.correlation.Covariance extends java.lang.Object
private final org.apache.commons.math3.linear.RealMatrix covarianceMatrix
private final int n
    public void <init>()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix> = null;

        r0.<org.apache.commons.math3.stat.correlation.Covariance: int n> = 0;

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(org.apache.commons.math3.linear.RealMatrix,boolean)>($r1, 1);

        return;
    }
    public void <init>(org.apache.commons.math3.linear.RealMatrix, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void checkSufficientData(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.stat.correlation.Covariance: int n> = $i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>($r1, $z0);

        r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix> = $r1;

        return;
    }
    public void <init>(double[][]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(double[][],boolean)>($r1, 1);

        return;
    }
    public void <init>(double[][], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] $r1;
        boolean $z0;
        org.apache.commons.math3.linear.BlockRealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[][];

        $z0 := @parameter1: boolean;

        $r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>($r1);

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(org.apache.commons.math3.linear.RealMatrix,boolean)>($r2, $z0);

        return;
    }
    private void checkSufficientData(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        int $i0, $i1;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 < 2 goto label1;

        if $i1 >= 1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_ROWS_AND_COLUMNS>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label2:
        return;
    }
    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>($r1, 1);

        return $r1;
    }
    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        boolean $z0;
        org.apache.commons.math3.linear.BlockRealMatrix r2;
        org.apache.commons.math3.stat.descriptive.moment.Variance r3;
        int $i0, i1, i2;
        double[] $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 := @parameter1: boolean;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r3 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>(boolean)>($z0);

        r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>($i0, $i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i1);

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: double covariance(double[],double[],boolean)>($r4, $r5, $z0);

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, $d0);

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i1, $d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r4 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i1);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[])>($r4);

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label4:
        return r2;
    }
    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] $r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[][];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][],boolean)>($r1, 1);

        return $r2;
    }
    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] $r1;
        boolean $z0;
        org.apache.commons.math3.linear.RealMatrix $r2;
        org.apache.commons.math3.linear.BlockRealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[][];

        $z0 := @parameter1: boolean;

        $r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>($r3, $z0);

        return $r2;
    }
    public double covariance(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[] $r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: double covariance(double[],double[],boolean)>($r1, $r2, 1);

        return $d0;
    }
    public double covariance(double[], double[], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[] $r1, $r2;
        boolean $z0;
        int i0, $i1, $i2;
        org.apache.commons.math3.stat.descriptive.moment.Mean r3;
        double d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $z0 := @parameter2: boolean;

        r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        d2 = 0.0;

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if i0 == $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        i0 = lengthof $r2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label1:
        if i0 >= 2 goto label2;

        $r4 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label2:
        $d3 = virtualinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[])>($r1);

        $d4 = virtualinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[])>($r2);

        $i1 = 0;

     label3:
        if $i1 >= i0 goto label4;

        d0 = $r1[$i1];

        d0 = d0 - $d3;

        d1 = $r2[$i1];

        d1 = d1 - $d4;

        d0 = d0 * d1;

        d0 = d0 - d2;

        $i2 = $i1 + 1;

        d1 = (double) $i2;

        d0 = d0 / d1;

        d2 = d2 + d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        if $z0 == 0 goto label5;

        $d3 = (double) i0;

        i0 = i0 + -1;

        $d4 = (double) i0;

        $d3 = $d3 / $d4;

        d2 = d2 * $d3;

     label5:
        return d2;
    }
    public org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 = r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix>;

        return r1;
    }
    public int getN()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        i0 = r0.<org.apache.commons.math3.stat.correlation.Covariance: int n>;

        return i0;
    }
