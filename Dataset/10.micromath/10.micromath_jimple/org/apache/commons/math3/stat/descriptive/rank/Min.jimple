org.apache.commons.math3.stat.descriptive.rank.Min extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable
private static final long serialVersionUID
private long n
private double value
    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = 0L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = #NaN;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.rank.Min) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Min: void copy(org.apache.commons.math3.stat.descriptive.rank.Min,org.apache.commons.math3.stat.descriptive.rank.Min)>($r1, r0);

        return;
    }
    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Min, org.apache.commons.math3.stat.descriptive.rank.Min) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min $r0, $r1;
        double[] $r2;
        long $l0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.Min;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double[] getDataRef()>();

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.Min: void setData(double[])>($r2);

        $l0 = $r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        $r1.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = $l0;

        $d0 = $r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        $r1.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = $d0;

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = #NaN;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = 0L;

        return;
    }
    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: org.apache.commons.math3.stat.descriptive.rank.Min copy()>();

        return r0;
    }
    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: org.apache.commons.math3.stat.descriptive.rank.Min copy()>();

        return r0;
    }
    public org.apache.commons.math3.stat.descriptive.rank.Min copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r1 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke r1.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Min: void copy(org.apache.commons.math3.stat.descriptive.rank.Min,org.apache.commons.math3.stat.descriptive.rank.Min)>(r0, r1);

        return r1;
    }
    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double[] $r1;
        int $i0, $i1, i2, $i3;
        boolean $z0;
        double d0, $d1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: boolean test(double[],int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label4;

        d0 = $r1[$i0];

        i2 = $i0;

     label1:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label5;

        $d1 = $r1[i2];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label2;

        $d1 = $r1[i2];

        $b4 = d0 cmpg $d1;

        if $b4 >= 0 goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        d0 = $r1[i2];

        goto label2;

     label4:
        return #NaN;

     label5:
        return d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        return l0;
    }
    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        return d0;
    }
    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double $d0, $d1;
        boolean $z0;
        byte $b0;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        $b0 = $d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label2;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = $d0;

     label2:
        $l1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        $l1 = $l1 + 1L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = $l1;

        return;
    }
