org.apache.commons.math3.stat.inference.GTest extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.GTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private double entropy(long[])
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] $r1;
        double d0, $d1, d2, d3;
        int i0, $i1;
        long $l2;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: long[];

        d2 = 0.0;

        d3 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $l2 = $r1[i0];

        d0 = (double) $l2;

        d3 = d3 + d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label5;

        $l2 = $r1[i0];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label4;

        $l2 = $r1[i0];

        d0 = (double) $l2;

        d0 = d0 / d3;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        d0 = $d1 * d0;

        d2 = d2 + d0;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        d2 = neg d2;

        return d2;
    }
    private double entropy(long[][])
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[][] $r1;
        double d0, $d1, d2, d3;
        int i0, $i1, $i2;
        long[] $r2;
        long $l3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: long[][];

        d2 = 0.0;

        d3 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $i1 = 0;

     label2:
        $r2 = $r1[i0];

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $r2 = $r1[i0];

        $l3 = $r2[$i1];

        d0 = (double) $l3;

        d3 = d3 + d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        i0 = 0;

     label5:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label9;

        $i1 = 0;

     label6:
        $r2 = $r1[i0];

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label8;

        $r2 = $r1[i0];

        $l3 = $r2[$i1];

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label7;

        $r2 = $r1[i0];

        $l3 = $r2[$i1];

        d0 = (double) $l3;

        d0 = d0 / d3;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        d0 = $d1 * d0;

        d2 = d2 + d0;

     label7:
        $i1 = $i1 + 1;

        goto label6;

     label8:
        i0 = i0 + 1;

        goto label5;

     label9:
        d2 = neg d2;

        return d2;
    }
    public double g(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] $r1;
        long[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        double d0, d1, $d2, $d3;
        long $l2;
        boolean z0;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkPositive(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r2);

        d0 = 0.0;

        d1 = 0.0;

        $i0 = 0;

     label3:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $d2 = $r1[$i0];

        d0 = d0 + $d2;

        $l2 = $r2[$i0];

        $d2 = (double) $l2;

        d1 = d1 + $d2;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $d2 = 1.0;

        z0 = 0;

        $d3 = d0 - d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b3 = $d3 cmpl 1.0E-5;

        if $b3 <= 0 goto label5;

        $d2 = d1 / d0;

        z0 = 1;

     label5:
        d0 = 0.0;

        $i0 = 0;

     label6:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label9;

        if z0 == 0 goto label8;

        $l2 = $r2[$i0];

        d1 = (double) $l2;

        $d3 = $r1[$i0];

        $d3 = $d3 * $d2;

        d1 = d1 / $d3;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

     label7:
        $l2 = $r2[$i0];

        $d3 = (double) $l2;

        d1 = $d3 * d1;

        d0 = d0 + d1;

        $i0 = $i0 + 1;

        goto label6;

     label8:
        $l2 = $r2[$i0];

        d1 = (double) $l2;

        $d3 = $r1[$i0];

        d1 = d1 / $d3;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        goto label7;

     label9:
        $d2 = 2.0 * d0;

        return $d2;
    }
    public double gDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] $r1, $r2, r3, $r13;
        double d0, $d1, $d2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        long l2, l3, $l4, $l6;
        int[] $r5;
        java.lang.Class $r6;
        java.lang.Object $r7;
        long[][] r8;
        byte $b5;
        org.apache.commons.math3.exception.ZeroException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Object[] $r11;
        java.lang.Integer $r12;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r4;

     label1:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r2);

        l2 = 0L;

        l3 = 0L;

        $i0 = lengthof $r1;

        r3 = newarray (long)[$i0];

        $i0 = lengthof $r1;

        $r5 = newarray (int)[2];

        $r5[0] = 2;

        $r5[1] = $i0;

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r6, $r5);

        r8 = (long[][]) $r7;

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $l4 = $r1[$i0];

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label4;

        $l4 = $r2[$i0];

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label4;

        $r9 = new org.apache.commons.math3.exception.ZeroException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY>;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11[0] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r11);

        throw $r9;

     label4:
        $l4 = $r1[$i0];

        l2 = l2 + $l4;

        $l4 = $r2[$i0];

        l3 = l3 + $l4;

        $l4 = $r1[$i0];

        $l6 = $r2[$i0];

        $l4 = $l4 + $l6;

        r3[$i0] = $l4;

        $r13 = r8[0];

        $l4 = $r1[$i0];

        $r13[$i0] = $l4;

        $r13 = r8[1];

        $l4 = $r2[$i0];

        $r13[$i0] = $l4;

        $i0 = $i0 + 1;

        goto label3;

     label5:
        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label6;

        $b5 = l3 cmp 0L;

        if $b5 != 0 goto label7;

     label6:
        $r9 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r9.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r9;

     label7:
        $r1 = newarray (long)[2];

        $r1[0] = l2;

        $r1[1] = l3;

        d0 = (double) l2;

        $d1 = (double) l3;

        d0 = d0 + $d1;

        d0 = 2.0 * d0;

        $d1 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[])>($r1);

        $d2 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[])>(r3);

        $d1 = $d1 + $d2;

        $d2 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[][])>(r8);

        $d1 = $d1 - $d2;

        d0 = d0 * $d1;

        return d0;
    }
    public double gTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] $r1;
        long[] $r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        r3 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = $d0 - 1.0;

        specialinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double g(double[],long[])>($r1, $r2);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public boolean gTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] $r1;
        long[] $r2;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        $d0 := @parameter2: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gTest(double[],long[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public double gTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] $r1, $r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        r3 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = $d0 - 1.0;

        specialinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gDataSetsComparison(long[],long[])>($r1, $r2);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public boolean gTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] $r1, $r2;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $d0 := @parameter2: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gTestDataSetsComparison(long[],long[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public double gTestIntrinsic(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] $r1;
        long[] $r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        r3 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = $d0 - 2.0;

        specialinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double g(double[],long[])>($r1, $r2);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double rootLogLikelihoodRatio(long, long, long, long)
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long $l0, $l1, $l2, $l3;
        long[] $r1, $r2;
        double $d0, $d1, $d2, $d3;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $l3 := @parameter3: long;

        $r1 = newarray (long)[2];

        $r1[0] = $l0;

        $r1[1] = $l1;

        $r2 = newarray (long)[2];

        $r2[0] = $l2;

        $r2[1] = $l3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gDataSetsComparison(long[],long[])>($r1, $r2);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d1 = (double) $l0;

        $l0 = $l0 + $l1;

        $d2 = (double) $l0;

        $d1 = $d1 / $d2;

        $d2 = (double) $l2;

        $l0 = $l2 + $l3;

        $d3 = (double) $l0;

        $d2 = $d2 / $d3;

        $b4 = $d1 cmpg $d2;

        if $b4 >= 0 goto label1;

        $d0 = neg $d0;

     label1:
        return $d0;
    }
