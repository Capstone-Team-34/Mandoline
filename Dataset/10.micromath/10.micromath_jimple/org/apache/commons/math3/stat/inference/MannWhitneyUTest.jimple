org.apache.commons.math3.stat.inference.MannWhitneyUTest extends java.lang.Object
private org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r2 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FIXED>;

        $r3 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy AVERAGE>;

        specialinvoke $r1.<org.apache.commons.math3.stat.ranking.NaturalRanking: void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)>($r2, $r3);

        r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 := @parameter1: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking;

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking: void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)>($r1, $r2);

        r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking> = $r3;

        return;
    }
    private double calculateAsymptoticPValue(double, int, int) throws org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        double $d0, d1, d2;
        int $i0, $i1;
        org.apache.commons.math3.distribution.NormalDistribution r1;
        long l2, $l3;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        l2 = (long) $i0;

        $l3 = (long) $i1;

        l2 = l2 * $l3;

        d1 = (double) l2;

        d1 = d1 / 2.0;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

        $l3 = (long) $i0;

        l2 = $l3 * l2;

        d2 = (double) l2;

        d2 = d2 / 12.0;

        $d0 = $d0 - d1;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d0 = $d0 / d1;

        r1 = new org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke r1.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(null, 0.0, 1.0);

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.NormalDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 2.0 * $d0;

        return $d0;
    }
    private double[] concatenateSamples(double[], double[])
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        double[] $r1, $r2, r3;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        r3 = newarray (double)[$i0];

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, $i0);

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, $i0, $i1);

        return r3;
    }
    private void ensureDataConformance(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        double[] $r1, $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0;
        org.apache.commons.math3.exception.NoDataException $r4;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        if $i0 == 0 goto label3;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label4:
        return;
    }
    public double mannWhitneyU(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        double[] $r1, $r2, $r3;
        double d0, d1;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r4;
        int i0, $i1;
        long $l2, $l3;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: void ensureDataConformance(double[],double[])>($r1, $r2);

        $r3 = specialinvoke r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: double[] concatenateSamples(double[],double[])>($r1, $r2);

        $r4 = r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking>;

        $r3 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking: double[] rank(double[])>($r3);

        d0 = 0.0;

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        d1 = $r3[i0];

        d0 = d0 + d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = lengthof $r1;

        $l2 = (long) i0;

        i0 = lengthof $r1;

        i0 = i0 + 1;

        $l3 = (long) i0;

        $l2 = $l2 * $l3;

        $l2 = $l2 / 2L;

        d1 = (double) $l2;

        d0 = d0 - d1;

        i0 = lengthof $r1;

        $l2 = (long) i0;

        i0 = lengthof $r2;

        $l3 = (long) i0;

        $l2 = $l2 * $l3;

        d1 = (double) $l2;

        d1 = d1 - d0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d1);

        return d0;
    }
    public double mannWhitneyUTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.MannWhitneyUTest r0;
        double[] $r1, $r2;
        double d0, $d1;
        int $i0, $i3;
        long $l1, $l2;

        r0 := @this: org.apache.commons.math3.stat.inference.MannWhitneyUTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: void ensureDataConformance(double[],double[])>($r1, $r2);

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: double mannWhitneyU(double[],double[])>($r1, $r2);

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        $i0 = lengthof $r2;

        $l2 = (long) $i0;

        $l1 = $l1 * $l2;

        $d1 = (double) $l1;

        d0 = $d1 - d0;

        $i3 = lengthof $r1;

        $i0 = lengthof $r2;

        d0 = specialinvoke r0.<org.apache.commons.math3.stat.inference.MannWhitneyUTest: double calculateAsymptoticPValue(double,int,int)>(d0, $i3, $i0);

        return d0;
    }
