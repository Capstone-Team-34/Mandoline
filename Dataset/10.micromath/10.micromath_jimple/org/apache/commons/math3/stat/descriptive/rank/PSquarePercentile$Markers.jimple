org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers extends java.lang.Object implements org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers java.io.Serializable
private static final int HIGH
private static final int LOW
private static final long serialVersionUID
private transient int k
private final org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray
    private void <init>(java.util.List, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.util.List r1;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: java.util.List;

        $d0 := @parameter1: double;

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] createMarkerArray(java.util.List,double)>(r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])>($r2);

        return;
    }
    void <init>(java.util.List, double, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.util.List $r1;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 := @parameter0: java.util.List;

        $d0 := @parameter1: double;

        $r2 := @parameter2: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(java.util.List,double)>($r1, $d0);

        return;
    }
    private void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        int i0, $i1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2, $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = -1;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray> = $r1;

        i0 = 1;

     label1:
        if i0 >= 5 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i0 + -1;

        $r3 = $r1[$i1];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i0 + 1;

        $r3 = $r1[$i1];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r2, i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[0];

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r1[0];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r1[1];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r2, 0);

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[5];

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r1[4];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r1[5];

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2, $r3);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r2, 5);

        return;
    }
    private void adjustHeightsOfMarkers()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 = 2;

     label1:
        if i0 > 4 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double estimate(int)>(i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    private static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] createMarkerArray(java.util.List, double)
    {
        java.util.List r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        int i0;
        org.apache.commons.math3.exception.InsufficientDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r6;
        java.lang.Object $r7;
        java.lang.Double $r8;

        r0 := @parameter0: java.util.List;

        $d0 := @parameter1: double;

        if r0 != null goto label2;

        i0 = -1;

     label1:
        if i0 >= 5 goto label3;

        $r2 = new org.apache.commons.math3.exception.InsufficientDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.InsufficientDataException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label2:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r0);

        $r1 = newarray (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)[6];

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(null);

        $r1[0] = $r6;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.Double) $r7;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d1, 1.0, 0.0, 1.0, null);

        $r1[1] = $r6;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = (java.lang.Double) $r7;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d2 = 2.0 * $d0;

        $d2 = 1.0 + $d2;

        $d3 = $d0 / 2.0;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d1, $d2, $d3, 2.0, null);

        $r1[2] = $r6;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r8 = (java.lang.Double) $r7;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d2 = 4.0 * $d0;

        $d2 = 1.0 + $d2;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d1, $d2, $d0, 3.0, null);

        $r1[3] = $r6;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(3);

        $r8 = (java.lang.Double) $r7;

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d2 = 2.0 * $d0;

        $d2 = 3.0 + $d2;

        $d0 = 1.0 + $d0;

        $d0 = $d0 / 2.0;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d1, $d2, $d0, 4.0, null);

        $r1[4] = $r6;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(4);

        $r8 = (java.lang.Double) $r7;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d0, 5.0, 1.0, 5.0, null);

        $r1[5] = $r6;

        return $r1;
    }
    private int findCellAndUpdateMinMax(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2;
        int i1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $d0 := @parameter0: double;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = -1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(1);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[1];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,double)>($r2, $d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 1;

     label1:
        i1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k>;

        return i1;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(2);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label3;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 1;

        goto label1;

     label3:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(3);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label4;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 2;

        goto label1;

     label4:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(4);

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label5;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 3;

        goto label1;

     label5:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(5);

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label6;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 4;

        goto label1;

     label6:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[5];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,double)>($r2, $d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 4;

        goto label1;
    }
    private void incrementPositions(int, int, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int $i0, $i1, $i2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

     label1:
        if $i1 > $i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[$i1];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void access$700(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r2, $i0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.io.ObjectInputStream $r1;
        int i0, $i1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3, $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = 1;

     label1:
        if i0 >= 5 goto label2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[i0];

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i0 + -1;

        $r4 = $r2[$i1];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i0 + 1;

        $r4 = $r2[$i1];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r3, i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[0];

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r2[0];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r2[1];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r3, 0);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[5];

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r2[4];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r2[5];

        $r3 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3, $r4);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r3, 5);

        return;
    }
    private void updateDesiredPositions()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0, $i1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 = 1;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[i0];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void access$800(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    public java.lang.Object clone()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0, $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2, $r4;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r2 = newarray (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)[6];

        $r3 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(null);

        $r2[0] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r4[1];

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r5;

        $r2[1] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r4[2];

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r5;

        $r2[2] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r4[3];

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r5;

        $r2[3] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r4[4];

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r5;

        $r2[4] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r4[5];

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r5;

        $r2[5] = $r3;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])>($r2);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0, r3;
        java.lang.Object $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $z0 = $r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        if $z0 == 0 goto label2;

        r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers) $r1;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r4, $r2);

        return $z0;

     label2:
        return 0;
    }
    public double estimate(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int $i0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r5;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $i0 := @parameter0: int;

        if $i0 < 2 goto label1;

        if $i0 <= 4 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r6 = $r5[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$600(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r6);

        return $d0;
    }
    public double getPercentileValue()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(3);

        return $d0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int $i0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($r1);

        return $i0;
    }
    public double height(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int $i0, $i1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        if $i0 > 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r6 = $r1[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$500(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r6);

        return $d0;
    }
    public double processDataPoint(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $d0 := @parameter0: double;

        $i0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int findCellAndUpdateMinMax(double)>($d0);

        $i0 = $i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void incrementPositions(int,int,int)>(1, $i0, 5);

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void updateDesiredPositions()>();

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void adjustHeightsOfMarkers()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double getPercentileValue()>();

        return $d0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[1];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[0] = $r4;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[2];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[1] = $r4;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[3];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[2] = $r4;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[4];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[3] = $r4;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[5];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[4] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("m1=[%s],m2=[%s],m3=[%s],m4=[%s],m5=[%s]", $r1);

        return $r4;
    }
