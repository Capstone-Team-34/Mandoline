org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList extends java.util.ArrayList implements java.io.Serializable
private static final long serialVersionUID
private final int capacity
    void <init>(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: int capacity> = $i0;

        return;
    }
    public boolean add(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList r0;
        java.lang.Object r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList;

        r1 := @parameter0: java.lang.Object;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: int size()>();

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: int capacity>;

        if $i1 >= $i0 goto label1;

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;

     label1:
        return 0;
    }
    public boolean addAll(java.util.Collection)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList r0;
        java.util.Collection r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList;

        r1 := @parameter0: java.util.Collection;

        if r1 == null goto label2;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: int size()>();

        $i0 = $i0 + $i1;

        $i1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: int capacity>;

        if $i0 > $i1 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label3;

        z0 = specialinvoke r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return z0;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return 0;
    }
