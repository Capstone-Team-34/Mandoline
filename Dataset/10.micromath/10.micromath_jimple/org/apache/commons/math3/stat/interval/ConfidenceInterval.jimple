org.apache.commons.math3.stat.interval.ConfidenceInterval extends java.lang.Object
private double confidenceLevel
private double lowerBound
private double upperBound
    public void <init>(double, double, double)
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void checkParameters(double,double,double)>($d0, $d1, $d2);

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound> = $d0;

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound> = $d1;

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel> = $d2;

        return;
    }
    private void checkParameters(double, double, double)
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double $d0, $d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        $b0 = $d2 cmpg 0.0;

        if $b0 <= 0 goto label2;

        $b0 = $d2 cmpl 1.0;

        if $b0 < 0 goto label3;

     label2:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_CONFIDENCE_LEVEL>;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[2] = $r5;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label3:
        return;
    }
    public double getConfidenceLevel()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel>;

        return d0;
    }
    public double getLowerBound()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound>;

        return d0;
    }
    public double getUpperBound()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound>;

        return d0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        java.lang.StringBuilder $r1;
        double $d0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] (confidence level:");

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
