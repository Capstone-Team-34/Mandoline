org.apache.commons.math3.stat.regression.SimpleRegression extends java.lang.Object implements java.io.Serializable org.apache.commons.math3.stat.regression.UpdatingMultipleLinearRegression
private static final long serialVersionUID
private final boolean hasIntercept
private long n
private double sumX
private double sumXX
private double sumXY
private double sumY
private double sumYY
private double xbar
private double ybar
    public void <init>()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void <init>(boolean)>(1);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = 0L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept> = $z0;

        return;
    }
    private double getIntercept(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2;
        boolean $z0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d0 = $d2 * $d0;

        $d0 = $d1 - $d0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;

     label1:
        return 0.0;
    }
    private double getRegressionSumSquares(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $d1 = $d0 * $d0;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d0 = $d1 * $d0;

        return $d0;
    }
    public void addData(double, double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, d2, d3, d4, d5, $d6, $d7;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d1;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label2;

        d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        d3 = $d0 * $d0;

        d4 = d4 + d3;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = d4;

        d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        d3 = $d1 * $d1;

        d4 = d4 + d3;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = d4;

        d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        d3 = $d0 * $d1;

        d4 = d4 + d3;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d4;

     label2:
        d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d0 = d4 + $d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = $d0;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d0 = $d0 + $d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = $d0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 + 1L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l0;

        return;

     label3:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d4 = (double) $l0;

        d4 = 1.0 + d4;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d3 = (double) $l0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d2 = (double) $l0;

        d2 = 1.0 + d2;

        d5 = d3 / d2;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = $d0 - d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d3 = $d1 - d3;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d7 = d2 * d2;

        $d7 = $d7 * d5;

        $d6 = $d6 + $d7;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d6;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d7 = d3 * d3;

        $d7 = $d7 * d5;

        $d6 = $d6 + $d7;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d6;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d7 = d2 * d3;

        d5 = $d7 * d5;

        d5 = $d6 + d5;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d5;

        d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = d2 / d4;

        d2 = d5 + d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d4 = d3 / d4;

        d4 = d2 + d4;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = d4;

        goto label1;
    }
    public void addData(double[][]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] $r1;
        java.lang.Object[] $r2;
        int i0, $i1;
        double[] $r3;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: double[][];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r3 = $r1[i0];

        $i1 = lengthof $r3;

        if $i1 >= 2 goto label2;

        $r4 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = $r1[i0];

        i0 = lengthof $r3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[1] = $r6;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r2);

        throw $r4;

     label2:
        $r3 = $r1[i0];

        $d0 = $r3[0];

        $r3 = $r1[i0];

        $d1 = $r3[1];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d0, $d1);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
    public void addObservation(double[], double) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[] $r1;
        double $d0, $d1;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label4;

     label1:
        $r2 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION>;

        $r4 = newarray (java.lang.Object)[2];

        if $r1 == null goto label3;

        $i0 = lengthof $r1;

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label3:
        $i0 = 0;

        goto label2;

     label4:
        $d1 = $r1[0];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d1, $d0);

        return;
    }
    public void addObservations(double[][], double[]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] $r1;
        double[] $r2, $r7;
        int $i0, $i1, $i2;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        boolean z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $i0 = 0;

        if $r1 == null goto label01;

        if $r2 == null goto label01;

        $i1 = lengthof $r1;

        $i2 = lengthof $r2;

        if $i1 == $i2 goto label06;

     label01:
        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r5 = newarray (java.lang.Object)[2];

        if $r1 != null goto label04;

        $i1 = 0;

     label02:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        if $r2 != null goto label05;

     label03:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label04:
        $i1 = lengthof $r1;

        goto label02;

     label05:
        $i0 = lengthof $r2;

        goto label03;

     label06:
        z0 = 1;

        $i0 = 0;

     label07:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label10;

        $r7 = $r1[$i0];

        if $r7 == null goto label08;

        $r7 = $r1[$i0];

        $i1 = lengthof $r7;

        if $i1 != 0 goto label09;

     label08:
        z0 = 0;

     label09:
        $i0 = $i0 + 1;

        goto label07;

     label10:
        if z0 != 0 goto label11;

        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5[0] = $r6;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label11:
        $i0 = 0;

     label12:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label13;

        $r7 = $r1[$i0];

        $d0 = $r7[0];

        $d1 = $r2[$i0];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d0, $d1);

        $i0 = $i0 + 1;

        goto label12;

     label13:
        return;
    }
    public void append(org.apache.commons.math3.stat.regression.SimpleRegression)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0, $r1;
        double d0, d1, d2, d3, $d4, $d5, $d6;
        long $l0, $l2;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        d2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d2;

        d2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = d2;

        d2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = d2;

        d2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = d2;

        d2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d2;

     label1:
        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        d2 = d2 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        d2 = d2 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = d2;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 + $l2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l0;

        return;

     label2:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label3;

        $l0 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d2 = (double) $l0;

        $l0 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 + $l2;

        d1 = (double) $l0;

        d2 = d2 / d1;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 * $l2;

        d1 = (double) $l0;

        $l0 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 + $l2;

        d0 = (double) $l0;

        d3 = d1 / d0;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d0 = d1 - d0;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d1 = d1 - $d4;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d5 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d6 = d0 * d0;

        $d6 = $d6 * d3;

        $d5 = $d5 + $d6;

        $d4 = $d4 + $d5;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d4;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d5 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d6 = d1 * d1;

        $d6 = $d6 * d3;

        $d5 = $d5 + $d6;

        $d4 = $d4 + $d5;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d4;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d5 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d6 = d0 * d1;

        d3 = $d6 * d3;

        d3 = $d5 + d3;

        d3 = $d4 + d3;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d0 = d0 * d2;

        d0 = d3 + d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d0;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d2 = d1 * d2;

        d2 = d0 + d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = d2;

        goto label1;

     label3:
        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        d2 = d2 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        d2 = d2 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        d1 = $r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        d2 = d2 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d2;

        goto label1;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = 0L;

        return;
    }
    public double getIntercept()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept(double)>($d0);

        return $d0;

     label1:
        return 0.0;
    }
    public double getInterceptStdErr()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = (double) $l0;

        $d1 = 1.0 / $d1;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d2 = $d2 * $d3;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d2 = $d2 / $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 * $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public double getMeanSquareError()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 - 2L;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;

     label2:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 - 1L;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        return l0;
    }
    public double getR()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getRSquare()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $d0 = neg $d1;

        return $d0;

     label1:
        return $d1;
    }
    public double getRSquare()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getTotalSumSquares()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $d1 = $d0 - $d1;

        $d0 = $d1 / $d0;

        return $d0;
    }
    public double getRegressionSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getRegressionSumSquares(double)>($d0);

        return $d0;
    }
    public double getSignificance()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        org.apache.commons.math3.distribution.TDistribution r1;
        byte $b0;
        long $l1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b0 = $l1 cmp 3L;

        if $b0 >= 0 goto label1;

        return #NaN;

     label1:
        r1 = new org.apache.commons.math3.distribution.TDistribution;

        $l1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l1 = $l1 - 2L;

        $d0 = (double) $l1;

        specialinvoke r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(double)>($d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $d0 = $d0 / $d1;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        $d0 = 2.0 * $d0;

        return $d0;
    }
    public double getSlope()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b1 = $d0 cmpg 4.9E-323;

        if $b1 < 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d0 = $d0 / $d1;

        return $d0;

     label2:
        return #NaN;
    }
    public double getSlopeConfidenceInterval() throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeConfidenceInterval(double)>(0.05);

        return $d0;
    }
    public double getSlopeConfidenceInterval(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;
        org.apache.commons.math3.distribution.TDistribution r1;
        long $l0;
        byte $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $b1 = $d0 cmpl 1.0;

        if $b1 >= 0 goto label2;

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIGNIFICANCE_LEVEL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label3:
        r1 = new org.apache.commons.math3.distribution.TDistribution;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 - 2L;

        $d1 = (double) $l0;

        specialinvoke r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(double)>($d1);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $d0 = $d0 / 2.0;

        $d0 = 1.0 - $d0;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.distribution.TDistribution: double inverseCumulativeProbability(double)>($d0);

        $d0 = $d1 * $d0;

        return $d0;
    }
    public double getSlopeStdErr()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d0 = $d1 / $d0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public double getSumOfCrossProducts()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        return d0;
    }
    public double getSumSquaredErrors()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d1 = $d1 * $d2;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = $d1 / $d2;

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.0, $d0);

        return $d0;
    }
    public double getTotalSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        return d0;
    }
    public double getXSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        return d0;
    }
    public boolean hasIntercept()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        return z0;
    }
    public double predict(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d2 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept(double)>($d1);

        $d0 = $d1 * $d0;

        $d0 = $d2 + $d0;

        return $d0;

     label1:
        $d0 = $d1 * $d0;

        return $d0;
    }
    public org.apache.commons.math3.stat.regression.RegressionResults regress() throws org.apache.commons.math3.stat.regression.ModelSpecificationException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        double d0, $d1, $d2, $d3;
        boolean $z0;
        byte $b1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        double[] r2, r3;
        double[][] $r4;
        org.apache.commons.math3.exception.NoDataException $r5;
        org.apache.commons.math3.stat.regression.RegressionResults $r6;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label3;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_REGRESSION>;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r5;

     label1:
        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label2;

        r2 = newarray (double)[2];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept()>();

        r2[0] = $d1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        r2[1] = $d1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d2 = $d2 * $d3;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d3 = (double) $l0;

        $d2 = $d2 / $d3;

        d0 = d0 + $d2;

        r3 = newarray (double)[3];

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d2 = $d2 * $d3;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d2 = $d2 / $d3;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d3 = (double) $l0;

        $d3 = 1.0 / $d3;

        $d2 = $d2 + $d3;

        $d2 = $d2 * $d1;

        r3[0] = $d2;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d2 = neg $d2;

        $d2 = $d2 * $d1;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d2 = $d2 / $d3;

        r3[1] = $d2;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = $d1 / $d2;

        r3[2] = $d1;

        $r6 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r4 = newarray (double[])[1];

        $r4[0] = r3;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r6.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r2, $r4, 1, $l0, 2, $d1, d0, $d2, 1, 0);

        return $r6;

     label2:
        r2 = newarray (double)[2];

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d0 = (double) $l0;

        $d1 = $d1 / d0;

        r2[0] = $d1;

        $d1 = (double) 9221120237041090560L;

        r2[1] = $d1;

        r3 = newarray (double)[3];

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d0 = (double) $l0;

        d0 = d0 - 1.0;

        $d1 = $d1 / d0;

        r3[0] = $d1;

        $d1 = (double) 9221120237041090560L;

        r3[1] = $d1;

        $d1 = (double) 9221120237041090560L;

        r3[2] = $d1;

        $r6 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r4 = newarray (double[])[1];

        $r4[0] = r3;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r6.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r2, $r4, 1, $l0, 1, $d1, d0, $d2, 1, 0);

        return $r6;

     label3:
        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label4;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_REGRESSION>;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r1);

        throw $r5;

     label4:
        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label5;

        r2 = newarray (double)[1];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = $d1 / d0;

        r2[0] = $d1;

        r3 = newarray (double)[1];

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = $d1 / d0;

        r3[0] = $d1;

        $r6 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r4 = newarray (double[])[1];

        $r4[0] = r2;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r6.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r3, $r4, 1, $l0, 1, $d1, d0, $d2, 0, 0);

        return $r6;

     label5:
        r2 = newarray (double)[1];

        $d1 = (double) 9221120237041090560L;

        r2[0] = $d1;

        r3 = newarray (double)[1];

        $d1 = (double) 9221120237041090560L;

        r3[0] = $d1;

        $r6 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r4 = newarray (double[])[1];

        $r4[0] = r2;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        specialinvoke $r6.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r3, $r4, 1, $l0, 1, #NaN, #NaN, #NaN, 0, 0);

        return $r6;
    }
    public org.apache.commons.math3.stat.regression.RegressionResults regress(int[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        int[] $r1;
        double d0, d1, d2, $d3, $d4;
        int $i0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        boolean $z0;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r4, $r13;
        byte $b1;
        java.lang.Integer $r5, $r6, $r7;
        org.apache.commons.math3.stat.regression.RegressionResults $r8, $r15;
        long $l2, $l3;
        double[] r9, r10;
        double[][] $r11;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r12;
        org.apache.commons.math3.exception.OutOfRangeException $r14;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: int[];

        if $r1 == null goto label01;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label02;

     label01:
        $r12 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r12;

     label02:
        $i0 = lengthof $r1;

        if $i0 > 2 goto label03;

        $i0 = lengthof $r1;

        if $i0 <= 1 goto label06;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label06;

     label03:
        $r13 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = $r13;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SIZE_EXCEEDS_MAX_VARIABLES>;

        $r3 = newarray (java.lang.Object)[1];

        $i0 = lengthof $r1;

        if $i0 <= 1 goto label05;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label05;

        $b1 = 1;

     label04:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b1);

        $r3[0] = $r5;

        specialinvoke $r13.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r4;

     label05:
        $b1 = 2;

        goto label04;

     label06:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label14;

        $i0 = lengthof $r1;

        if $i0 != 2 goto label10;

        $i0 = $r1[0];

        if $i0 != 1 goto label07;

        $r13 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_INCREASING_SEQUENCE>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r13;

     label07:
        $i0 = $r1[0];

        if $i0 == 0 goto label08;

        $r14 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i0 = $r1[0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r14.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r14;

     label08:
        $i0 = $r1[1];

        if $i0 == 1 goto label09;

        $r14 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i0 = $r1[0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r14.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r14;

     label09:
        $r8 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: org.apache.commons.math3.stat.regression.RegressionResults regress()>();

        return $r8;

     label10:
        $i0 = $r1[0];

        if $i0 == 1 goto label11;

        $i0 = $r1[0];

        if $i0 == 0 goto label11;

        $r14 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i0 = $r1[0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r14.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r14;

     label11:
        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d3 = $d3 * d0;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d0 = (double) $l2;

        d0 = $d3 / d0;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d3 = $d3 + d0;

        $i0 = $r1[0];

        if $i0 != 0 goto label12;

        r9 = newarray (double)[1];

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = $l2 - 1L;

        $l3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = $l2 * $l3;

        $d4 = (double) $l2;

        d2 = d2 / $d4;

        r9[0] = d2;

        r10 = newarray (double)[1];

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        r10[0] = d2;

        $r15 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r11 = newarray (double[])[1];

        $r11[0] = r9;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d3 = $d3 + d0;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        specialinvoke $r15.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r10, $r11, 1, $l2, 1, d2, $d3, d0, 1, 0);

        return $r15;

     label12:
        $i0 = $r1[0];

        if $i0 != 1 goto label16;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        d2 = d2 * $d4;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d4 = (double) $l2;

        d2 = d2 / $d4;

        d0 = d0 + d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d4 = $d4 * d1;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d1 = (double) $l2;

        $d4 = $d4 / d1;

        d2 = d2 + $d4;

        $d4 = d2 * d2;

        $d4 = $d4 / d0;

        $d4 = $d3 - $d4;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.0, $d4);

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l2 = $l2 - 1L;

        d1 = (double) $l2;

        d1 = $d4 / d1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label13;

        r9 = newarray (double)[1];

        d1 = d1 / d0;

        r9[0] = d1;

        r10 = newarray (double)[1];

        d0 = d2 / d0;

        r10[0] = d0;

        $r15 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r11 = newarray (double[])[1];

        $r11[0] = r9;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        specialinvoke $r15.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r10, $r11, 1, $l2, 1, d0, $d3, $d4, 0, 0);

        return $r15;

     label13:
        r9 = newarray (double)[1];

        $d3 = (double) 9221120237041090560L;

        r9[0] = $d3;

        r10 = newarray (double)[1];

        $d3 = (double) 9221120237041090560L;

        r10[0] = $d3;

        $r15 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r11 = newarray (double[])[1];

        $r11[0] = r9;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        specialinvoke $r15.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r10, $r11, 1, $l2, 1, #NaN, #NaN, #NaN, 0, 0);

        return $r15;

     label14:
        $i0 = $r1[0];

        if $i0 == 0 goto label15;

        $r14 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i0 = $r1[0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r14.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r14;

     label15:
        $r8 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: org.apache.commons.math3.stat.regression.RegressionResults regress()>();

        return $r8;

     label16:
        return null;
    }
    public void removeData(double, double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, d2, d3, d4, $d5, $d6, $d7;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label2;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d5 = (double) $l0;

        $d5 = $d5 - 1.0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d3 = (double) $l0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        d2 = (double) $l0;

        d2 = d2 - 1.0;

        d4 = d3 / d2;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = $d0 - d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d3 = $d1 - d3;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d7 = d2 * d2;

        $d7 = $d7 * d4;

        $d6 = $d6 - $d7;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d6;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d7 = d3 * d3;

        $d7 = $d7 * d4;

        $d6 = $d6 - $d7;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d6;

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d7 = d2 * d3;

        d4 = $d7 * d4;

        d4 = $d6 - d4;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d4;

        d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = d2 / $d5;

        d2 = d4 - d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d2;

        d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d5 = d3 / $d5;

        $d5 = d2 - $d5;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d5;

     label1:
        $d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d0 = $d5 - $d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = $d0;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d0 = $d0 - $d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = $d0;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l0 = $l0 - 1L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l0;

        return;

     label2:
        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d5 = (double) $l0;

        $d5 = $d5 - 1.0;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        d2 = $d0 * $d0;

        d3 = d3 - d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        d2 = $d1 * $d1;

        d3 = d3 - d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        d2 = $d0 * $d1;

        d3 = d3 - d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = $d0 / $d5;

        d3 = d3 - d2;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d3;

        d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d5 = $d1 / $d5;

        $d5 = d3 - $d5;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d5;

        goto label1;

     label3:
        return;
    }
    public void removeData(double[][])
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] $r1;
        int i0, $i1;
        long $l2;
        byte $b3;
        double[] $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $r1 := @parameter0: double[][];

        i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label2;

        $r2 = $r1[i0];

        $d0 = $r2[0];

        $r2 = $r1[i0];

        $d1 = $r2[1];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void removeData(double,double)>($d0, $d1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
