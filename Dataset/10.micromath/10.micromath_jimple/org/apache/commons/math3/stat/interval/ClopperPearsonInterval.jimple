org.apache.commons.math3.stat.interval.ClopperPearsonInterval extends java.lang.Object implements org.apache.commons.math3.stat.interval.BinomialConfidenceInterval
    public void <init>()
    {
        org.apache.commons.math3.stat.interval.ClopperPearsonInterval r0;

        r0 := @this: org.apache.commons.math3.stat.interval.ClopperPearsonInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)
    {
        org.apache.commons.math3.stat.interval.ClopperPearsonInterval r0;
        int $i0, $i1, $i2;
        double $d0, d1, d2, d3, $d4, $d5, $d6;
        org.apache.commons.math3.distribution.FDistribution r1;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r2;

        r0 := @this: org.apache.commons.math3.stat.interval.ClopperPearsonInterval;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.stat.interval.IntervalUtils: void checkParameters(int,int,double)>($i0, $i1, $d0);

        d2 = 0.0;

        d3 = 0.0;

        d1 = 1.0 - $d0;

        d1 = d1 / 2.0;

        r1 = new org.apache.commons.math3.distribution.FDistribution;

        $i2 = $i0 - $i1;

        $i2 = $i2 + 1;

        $i2 = $i2 * 2;

        $d4 = (double) $i2;

        $i2 = $i1 * 2;

        $d5 = (double) $i2;

        specialinvoke r1.<org.apache.commons.math3.distribution.FDistribution: void <init>(double,double)>($d4, $d5);

        $d4 = 1.0 - d1;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.distribution.FDistribution: double inverseCumulativeProbability(double)>($d4);

        if $i1 <= 0 goto label1;

        d2 = (double) $i1;

        $d5 = (double) $i1;

        $i2 = $i0 - $i1;

        $i2 = $i2 + 1;

        $d6 = (double) $i2;

        $d4 = $d6 * $d4;

        $d4 = $d5 + $d4;

        d2 = d2 / $d4;

     label1:
        r1 = new org.apache.commons.math3.distribution.FDistribution;

        $i2 = $i1 + 1;

        $i2 = $i2 * 2;

        $d4 = (double) $i2;

        $i2 = $i0 - $i1;

        $i2 = $i2 * 2;

        $d5 = (double) $i2;

        specialinvoke r1.<org.apache.commons.math3.distribution.FDistribution: void <init>(double,double)>($d4, $d5);

        d1 = 1.0 - d1;

        d1 = virtualinvoke r1.<org.apache.commons.math3.distribution.FDistribution: double inverseCumulativeProbability(double)>(d1);

        if $i1 <= 0 goto label2;

        $i2 = $i1 + 1;

        d3 = (double) $i2;

        d3 = d3 * d1;

        $i0 = $i0 - $i1;

        $d4 = (double) $i0;

        $i0 = $i1 + 1;

        $d5 = (double) $i0;

        d1 = $d5 * d1;

        d1 = $d4 + d1;

        d3 = d3 / d1;

     label2:
        $r2 = new org.apache.commons.math3.stat.interval.ConfidenceInterval;

        specialinvoke $r2.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void <init>(double,double,double)>(d2, d3, $d0);

        return $r2;
    }
