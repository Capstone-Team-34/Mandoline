org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression extends org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression
private org.apache.commons.math3.linear.RealMatrix Omega
private org.apache.commons.math3.linear.RealMatrix OmegaInverse
    public void <init>()
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: void <init>()>();

        return;
    }
    protected org.apache.commons.math3.linear.RealVector calculateBeta()
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;
        org.apache.commons.math3.linear.LUDecomposition $r5;
        org.apache.commons.math3.linear.DecompositionSolver $r6;
        org.apache.commons.math3.linear.RealVector $r7;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getOmegaInverse()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        $r5 = new org.apache.commons.math3.linear.LUDecomposition;

        specialinvoke $r5.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r3);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r3 = interfaceinvoke $r6.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r2 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector getY()>();

        $r7 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r7);

        return $r7;
    }
    protected org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;
        org.apache.commons.math3.linear.LUDecomposition $r3;
        org.apache.commons.math3.linear.DecompositionSolver $r4;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getOmegaInverse()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $r2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r2);

        $r3 = new org.apache.commons.math3.linear.LUDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        return $r1;
    }
    protected double calculateErrorVariance()
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1, $r3;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double $d0, $d1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateResiduals()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getOmegaInverse()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r3);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i0 = $i0 - $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    protected org.apache.commons.math3.linear.RealMatrix getOmegaInverse()
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        org.apache.commons.math3.linear.LUDecomposition $r2;
        org.apache.commons.math3.linear.DecompositionSolver $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 = r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix OmegaInverse>;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.linear.LUDecomposition;

        $r1 = r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix Omega>;

        specialinvoke $r2.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix OmegaInverse> = $r1;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix OmegaInverse>;

        return $r1;
    }
    protected void newCovarianceData(double[][])
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        double[][] $r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 := @parameter0: double[][];

        $r2 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>($r1);

        r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix Omega> = $r2;

        r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix OmegaInverse> = null;

        return;
    }
    public void newSampleData(double[], double[][], double[][])
    {
        org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression r0;
        double[] $r1;
        double[][] $r2, $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        $r3 := @parameter2: double[][];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: void validateSampleData(double[][],double[])>($r2, $r1);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: void newYSampleData(double[])>($r1);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: void newXSampleData(double[][])>($r2);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: void validateCovarianceData(double[][],double[][])>($r2, $r3);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression: void newCovarianceData(double[][])>($r3);

        return;
    }
