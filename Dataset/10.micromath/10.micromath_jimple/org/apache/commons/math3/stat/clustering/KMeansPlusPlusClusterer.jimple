org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer extends java.lang.Object
private final org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy
private final java.util.Random random
    public void <init>(java.util.Random)
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random $r1;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        $r1 := @parameter0: java.util.Random;

        $r2 = <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy LARGEST_VARIANCE>;

        specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: void <init>(java.util.Random,org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)>($r1, $r2);

        return;
    }
    public void <init>(java.util.Random, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random $r1;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        $r1 := @parameter0: java.util.Random;

        $r2 := @parameter1: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random> = $r1;

        r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy> = $r2;

        return;
    }
    private static int assignPointsToClusters(java.util.List, java.util.Collection, int[])
    {
        java.util.List r0;
        java.util.Collection r1;
        int[] $r2;
        int i0, i1, i2, $i3;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math3.stat.clustering.Clusterable r5;
        org.apache.commons.math3.stat.clustering.Cluster r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: int[];

        i1 = 0;

        i2 = 0;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.stat.clustering.Clusterable) $r4;

        $i3 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int getNearestCluster(java.util.Collection,org.apache.commons.math3.stat.clustering.Clusterable)>(r0, r5);

        i0 = $r2[i2];

        if $i3 == i0 goto label2;

        i1 = i1 + 1;

     label2:
        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        r6 = (org.apache.commons.math3.stat.clustering.Cluster) $r4;

        virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: void addPoint(org.apache.commons.math3.stat.clustering.Clusterable)>(r5);

        $r2[i2] = $i3;

        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }
    private static java.util.List chooseInitialCenters(java.util.Collection, int, java.util.Random)
    {
        java.util.Collection r0;
        int $i0, $i1, $i2, i3;
        java.util.Random $r1;
        double d0, $d1, $d2;
        double[] r2;
        java.util.ArrayList r3;
        java.util.List $r4;
        boolean[] $r5;
        java.lang.Object $r6;
        org.apache.commons.math3.stat.clustering.Clusterable r7;
        org.apache.commons.math3.stat.clustering.Cluster $r8;
        boolean $z0;
        byte $b4;

        r0 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Random;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (boolean)[$i1];

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i2 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i1);

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        r7 = (org.apache.commons.math3.stat.clustering.Clusterable) $r6;

        $r8 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke $r8.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(r7);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r5[$i2] = 1;

        r2 = newarray (double)[$i1];

        i3 = 0;

     label01:
        if i3 >= $i1 goto label03;

        if i3 == $i2 goto label02;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        d0 = interfaceinvoke r7.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r6);

        d0 = d0 * d0;

        r2[i3] = d0;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i2 >= $i0 goto label15;

        d0 = 0.0;

        $i2 = 0;

     label04:
        if $i2 >= $i1 goto label06;

        $z0 = $r5[$i2];

        if $z0 != 0 goto label05;

        $d1 = r2[$i2];

        d0 = d0 + $d1;

     label05:
        $i2 = $i2 + 1;

        goto label04;

     label06:
        $d1 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        d0 = $d1 * d0;

        $i2 = -1;

        $d1 = 0.0;

        i3 = 0;

     label07:
        if i3 >= $i1 goto label08;

        $z0 = $r5[i3];

        if $z0 != 0 goto label13;

        $d2 = r2[i3];

        $d1 = $d1 + $d2;

        $b4 = $d1 cmpl d0;

        if $b4 < 0 goto label13;

        $i2 = i3;

     label08:
        if $i2 != -1 goto label10;

        i3 = $i1 + -1;

     label09:
        if i3 < 0 goto label10;

        $z0 = $r5[i3];

        if $z0 != 0 goto label14;

        $i2 = i3;

     label10:
        if $i2 < 0 goto label15;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        r7 = (org.apache.commons.math3.stat.clustering.Clusterable) $r6;

        $r8 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke $r8.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(r7);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r5[$i2] = 1;

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i2 >= $i0 goto label03;

        $i2 = 0;

     label11:
        if $i2 >= $i1 goto label03;

        $z0 = $r5[$i2];

        if $z0 != 0 goto label12;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        d0 = interfaceinvoke r7.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r6);

        d0 = d0 * d0;

        $d1 = r2[$i2];

        $b4 = d0 cmpg $d1;

        if $b4 >= 0 goto label12;

        r2[$i2] = d0;

     label12:
        $i2 = $i2 + 1;

        goto label11;

     label13:
        i3 = i3 + 1;

        goto label07;

     label14:
        i3 = i3 + -1;

        goto label09;

     label15:
        return r3;
    }
    private org.apache.commons.math3.stat.clustering.Clusterable getFarthestPoint(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        double d0, $d1;
        org.apache.commons.math3.stat.clustering.Cluster r3, r6;
        int i0, i1, $i2;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.stat.clustering.Clusterable $r7, $r9;
        java.util.List $r8;
        byte $b3;
        org.apache.commons.math3.exception.ConvergenceException $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d0 = #-Infinity;

        r3 = null;

        i0 = -1;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.stat.clustering.Cluster) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $r8 = virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        i1 = 0;

     label2:
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i1 >= $i2 goto label1;

        $r5 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        $d1 = interfaceinvoke $r9.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r7);

        $b3 = $d1 cmpl d0;

        if $b3 <= 0 goto label3;

        d0 = $d1;

        r3 = r6;

        i0 = i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if r3 != null goto label5;

        $r10 = new org.apache.commons.math3.exception.ConvergenceException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r11);

        throw $r10;

     label5:
        $r8 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r5 = interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i0);

        $r7 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        return $r7;
    }
    private static int getNearestCluster(java.util.Collection, org.apache.commons.math3.stat.clustering.Clusterable)
    {
        java.util.Collection r0;
        org.apache.commons.math3.stat.clustering.Clusterable r1, $r5;
        double d0, $d1;
        int i0, i1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math3.stat.clustering.Cluster r4;
        byte $b2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.math3.stat.clustering.Clusterable;

        d0 = 1.7976931348623157E308;

        i0 = 0;

        i1 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.stat.clustering.Cluster) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r5);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label2;

        d0 = $d1;

        i1 = i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return i1;
    }
    private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, $i1;
        org.apache.commons.math3.stat.clustering.Cluster r2, r5;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.List $r6;
        org.apache.commons.math3.exception.ConvergenceException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Object[] $r9;
        java.util.Random $r10;
        org.apache.commons.math3.stat.clustering.Clusterable $r11;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 = 0;

        r2 = null;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.stat.clustering.Cluster) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 <= i0 goto label1;

        i0 = $i1;

        r2 = r5;

        goto label1;

     label2:
        if r2 != null goto label3;

        $r7 = new org.apache.commons.math3.exception.ConvergenceException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r9);

        throw $r7;

     label3:
        $r6 = virtualinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r10 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        i0 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(i0);

        $r4 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        $r11 = (org.apache.commons.math3.stat.clustering.Clusterable) $r4;

        return $r11;
    }
    private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.stat.descriptive.moment.Variance r2;
        double d0, $d1;
        org.apache.commons.math3.stat.clustering.Cluster r3, r6;
        java.util.Iterator $r4, $r9;
        boolean $z0;
        java.lang.Object $r5;
        java.util.List $r7;
        org.apache.commons.math3.stat.clustering.Clusterable $r8, r10;
        byte $b0;
        org.apache.commons.math3.exception.ConvergenceException $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12;
        java.lang.Object[] $r13;
        java.util.Random $r14;
        int $i1;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d0 = #-Infinity;

        r3 = null;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.stat.clustering.Cluster) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        r2 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r7 = virtualinvoke r6.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r9 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        $d1 = interfaceinvoke r10.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r8);

        virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d1);

        goto label2;

     label3:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        $b0 = $d1 cmpl d0;

        if $b0 <= 0 goto label1;

        d0 = $d1;

        r3 = r6;

        goto label1;

     label4:
        if r3 != null goto label5;

        $r11 = new org.apache.commons.math3.exception.ConvergenceException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r13);

        throw $r11;

     label5:
        $r7 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r14 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = virtualinvoke $r14.<java.util.Random: int nextInt(int)>($i1);

        $r5 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i1);

        $r8 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        return $r8;
    }
    public java.util.List cluster(java.util.Collection, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int $i0, $i1, $i2;
        int[] r2, $r13;
        java.util.ArrayList r3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        java.util.Random $r7;
        java.util.List $r8, r9;
        boolean z0, $z1;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        org.apache.commons.math3.stat.clustering.Cluster r12;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r14;
        org.apache.commons.math3.exception.ConvergenceException $r15;
        org.apache.commons.math3.exception.util.LocalizedFormats $r16;
        java.lang.Object[] $r17;
        org.apache.commons.math3.stat.clustering.Clusterable $r18;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i2 >= $i0 goto label01;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label01:
        $r7 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $r8 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.List chooseInitialCenters(java.util.Collection,int,java.util.Random)>(r1, $i0, $r7);

        r9 = $r8;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i0];

        staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>($r8, r1, r2);

        if $i1 >= 0 goto label06;

        $i0 = 2147483647;

     label02:
        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label15;

        z0 = 0;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.math3.stat.clustering.Cluster) $r11;

        $r8 = virtualinvoke r12.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label12;

        $r13 = <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$1: int[] $SwitchMap$org$apache$commons$math3$stat$clustering$KMeansPlusPlusClusterer$EmptyClusterStrategy>;

        $r14 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        $i2 = virtualinvoke $r14.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: int ordinal()>();

        $i2 = $r13[$i2];

        lookupswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label05;
        };

     label05:
        $r15 = new org.apache.commons.math3.exception.ConvergenceException;

        $r16 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r17 = newarray (java.lang.Object)[0];

        specialinvoke $r15.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r16, $r17);

        throw $r15;

     label06:
        $i0 = $i1;

        goto label02;

     label07:
        $r18 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)>(r9);

     label08:
        z0 = 1;

     label09:
        r12 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke r12.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>($r18);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r12);

        goto label04;

     label10:
        $r18 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)>(r9);

        goto label08;

     label11:
        $r18 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getFarthestPoint(java.util.Collection)>(r9);

        goto label08;

     label12:
        $r18 = virtualinvoke r12.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $r8 = virtualinvoke r12.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r11 = interfaceinvoke $r18.<org.apache.commons.math3.stat.clustering.Clusterable: java.lang.Object centroidOf(java.util.Collection)>($r8);

        $r18 = (org.apache.commons.math3.stat.clustering.Clusterable) $r11;

        goto label09;

     label13:
        $i2 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>(r3, r1, r2);

        r9 = r3;

        if $i2 != 0 goto label14;

        if z0 != 0 goto label14;

        return r3;

     label14:
        $i1 = $i1 + 1;

        goto label03;

     label15:
        return r9;
    }
    public java.util.List cluster(java.util.Collection, int, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.stat.descriptive.moment.Variance r2;
        java.util.List r3, $r4, $r8;
        double d0, d1, $d2;
        java.util.Iterator $r5, $r10;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.stat.clustering.Cluster r7;
        org.apache.commons.math3.stat.clustering.Clusterable $r9, r11;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r3 = null;

        d0 = #Infinity;

        i3 = 0;

     label1:
        if i3 >= $i1 goto label7;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.List cluster(java.util.Collection,int,int)>(r1, $i0, $i2);

        d1 = 0.0;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.stat.clustering.Cluster) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r7.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        r2 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r8 = virtualinvoke r7.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.commons.math3.stat.clustering.Clusterable) $r6;

        $d2 = interfaceinvoke r11.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r9);

        virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d2);

        goto label3;

     label4:
        $d2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        d1 = d1 + $d2;

        goto label2;

     label5:
        $b4 = d1 cmpg d0;

        if $b4 > 0 goto label6;

        r3 = $r4;

        d0 = d1;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return r3;
    }
