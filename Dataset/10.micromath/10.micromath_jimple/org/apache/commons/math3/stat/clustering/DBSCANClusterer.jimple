org.apache.commons.math3.stat.clustering.DBSCANClusterer extends java.lang.Object
private final double eps
private final int minPts
    public void <init>(double, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        double $d0;
        int $i0;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        $d0 := @parameter0: double;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        if $i0 >= 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r1;

     label2:
        r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: double eps> = $d0;

        r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: int minPts> = $i0;

        return;
    }
    private org.apache.commons.math3.stat.clustering.Cluster expandCluster(org.apache.commons.math3.stat.clustering.Cluster, org.apache.commons.math3.stat.clustering.Clusterable, java.util.List, java.util.Collection, java.util.Map)
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        org.apache.commons.math3.stat.clustering.Cluster r1;
        org.apache.commons.math3.stat.clustering.Clusterable r2;
        java.util.List r3, r7;
        java.util.Collection r4;
        java.util.Map r5;
        int $i0, i1, $i2;
        org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus $r6, $r9;
        java.lang.Object $r8;
        java.util.ArrayList $r10;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        r1 := @parameter0: org.apache.commons.math3.stat.clustering.Cluster;

        r2 := @parameter1: org.apache.commons.math3.stat.clustering.Clusterable;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.Collection;

        r5 := @parameter4: java.util.Map;

        virtualinvoke r1.<org.apache.commons.math3.stat.clustering.Cluster: void addPoint(org.apache.commons.math3.stat.clustering.Clusterable)>(r2);

        $r6 = <org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

        $r10 = new java.util.ArrayList;

        r7 = $r10;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r8 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (org.apache.commons.math3.stat.clustering.Clusterable) $r8;

        $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus) $r8;

        if $r6 != null goto label2;

        r3 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: java.util.List getNeighbors(org.apache.commons.math3.stat.clustering.Clusterable,java.util.Collection)>(r2, r4);

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        $i0 = r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: int minPts>;

        if $i2 < $i0 goto label2;

        r7 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: java.util.List merge(java.util.List,java.util.List)>(r7, r3);

     label2:
        $r9 = <org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        if $r6 == $r9 goto label3;

        $r6 = <org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

        virtualinvoke r1.<org.apache.commons.math3.stat.clustering.Cluster: void addPoint(org.apache.commons.math3.stat.clustering.Clusterable)>(r2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r1;
    }
    private java.util.List getNeighbors(org.apache.commons.math3.stat.clustering.Clusterable, java.util.Collection)
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        org.apache.commons.math3.stat.clustering.Clusterable r1, r6;
        java.util.Collection r2;
        java.util.ArrayList r3;
        double $d0, $d1;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        r1 := @parameter0: org.apache.commons.math3.stat.clustering.Clusterable;

        r2 := @parameter1: java.util.Collection;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        if r1 == r6 goto label1;

        $d1 = interfaceinvoke r6.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r1);

        $d0 = r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: double eps>;

        $b0 = $d1 cmpg $d0;

        if $b0 > 0 goto label1;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r3;
    }
    private java.util.List merge(java.util.List, java.util.List)
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        java.util.List r1, r2;
        java.util.HashSet r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.stat.clustering.Clusterable r6;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        $r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.stat.clustering.Clusterable) $r5;

        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r1;
    }
    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.stat.clustering.Cluster r2;
        java.util.HashMap r3;
        java.util.ArrayList r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.commons.math3.stat.clustering.Clusterable r7;
        java.util.List $r8;
        int $i0, $i1;
        org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus $r9;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.stat.clustering.Clusterable) $r6;

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        if $r6 != null goto label1;

        $r8 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: java.util.List getNeighbors(org.apache.commons.math3.stat.clustering.Clusterable,java.util.Collection)>(r7, r1);

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: int minPts>;

        if $i0 < $i1 goto label2;

        r2 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(null);

        r2 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: org.apache.commons.math3.stat.clustering.Cluster expandCluster(org.apache.commons.math3.stat.clustering.Cluster,org.apache.commons.math3.stat.clustering.Clusterable,java.util.List,java.util.Collection,java.util.Map)>(r2, r7, $r8, r1, r3);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label1;

     label2:
        $r9 = <org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus NOISE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r9);

        goto label1;

     label3:
        return r4;
    }
    public double getEps()
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        d0 = r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: double eps>;

        return d0;
    }
    public int getMinPts()
    {
        org.apache.commons.math3.stat.clustering.DBSCANClusterer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.clustering.DBSCANClusterer;

        i0 = r0.<org.apache.commons.math3.stat.clustering.DBSCANClusterer: int minPts>;

        return i0;
    }
