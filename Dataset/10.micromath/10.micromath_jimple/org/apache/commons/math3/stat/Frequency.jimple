org.apache.commons.math3.stat.Frequency extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private final java.util.SortedMap freqTable
    public void <init>()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable> = $r1;

        return;
    }
    public void <init>(java.util.Comparator)
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.Comparator r1;
        java.util.TreeMap $r2;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);

        r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable> = $r2;

        return;
    }
    public void addValue(char) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        java.lang.Character $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }
    public void addValue(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        java.lang.Long $r1;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }
    public void addValue(long) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }
    public void addValue(java.lang.Comparable) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.Comparable r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void incrementValue(java.lang.Comparable,long)>(r1, 1L);

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.SortedMap $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        interfaceinvoke $r1.<java.util.SortedMap: void clear()>();

        return;
    }
    public java.util.Iterator entrySetIterator()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.SortedMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.Frequency r0, r3;
        java.lang.Object $r1;
        java.util.SortedMap $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.commons.math3.stat.Frequency;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = (org.apache.commons.math3.stat.Frequency) $r1;

        $r2 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        if $r2 != null goto label3;

        $r2 = r3.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        if $r2 == null goto label4;

        return 0;

     label3:
        $r4 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r2 = r3.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }
    public long getCount(char)
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        java.lang.Character $r1;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l1;
    }
    public long getCount(int)
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l1;
    }
    public long getCount(long)
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l0;
    }
    public long getCount(java.lang.Comparable)
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.Comparable r1;
        boolean $z0;
        java.lang.Integer r2;
        long $l0;
        java.util.SortedMap $r3;
        java.lang.Object $r4;
        java.lang.Long r5;
        java.lang.ClassCastException $r6;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        r2 = (java.lang.Integer) r1;

        $l0 = virtualinvoke r2.<java.lang.Integer: long longValue()>();

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(long)>($l0);

        return $l0;

     label1:
        $r3 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.Long) $r4;

     label3:
        if r5 == null goto label7;

     label4:
        $l0 = virtualinvoke r5.<java.lang.Long: long longValue()>();

     label5:
        return $l0;

     label6:
        $r6 := @caughtexception;

     label7:
        return 0L;

        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }
    public long getCumFreq(char)
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        java.lang.Character $r1;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l1;
    }
    public long getCumFreq(int)
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l1;
    }
    public long getCumFreq(long)
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l0;
    }
    public long getCumFreq(java.lang.Comparable)
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.ClassCastException r1;
        java.lang.Comparable r2, r10;
        long $l0, $l3;
        byte $b1;
        boolean $z0;
        java.lang.Integer r3;
        java.util.SortedMap $r4;
        java.util.Comparator $r5, r6;
        java.lang.Object $r7;
        java.lang.Long r8;
        int $i2;
        java.util.Iterator $r9;
        org.apache.commons.math3.stat.Frequency$NaturalComparator $r11;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r2 := @parameter0: java.lang.Comparable;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getSumFreq()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label01;

        return 0L;

     label01:
        $z0 = r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label02;

        r3 = (java.lang.Integer) r2;

        $l0 = virtualinvoke r3.<java.lang.Integer: long longValue()>();

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCumFreq(long)>($l0);

        return $l0;

     label02:
        $r4 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Comparator comparator()>();

        r6 = $r5;

        if $r5 != null goto label03;

        $r11 = new org.apache.commons.math3.stat.Frequency$NaturalComparator;

        r6 = $r11;

        specialinvoke $r11.<org.apache.commons.math3.stat.Frequency$NaturalComparator: void <init>(org.apache.commons.math3.stat.Frequency$1)>(null);

     label03:
        $l0 = 0L;

        $r4 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

     label04:
        $r7 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (java.lang.Long) $r7;

     label05:
        if r8 == null goto label07;

     label06:
        $l0 = virtualinvoke r8.<java.lang.Long: long longValue()>();

     label07:
        $r4 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r7 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object firstKey()>();

        $i2 = interfaceinvoke r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $i2 >= 0 goto label09;

        return 0L;

     label08:
        r1 := @caughtexception;

        return 0L;

     label09:
        $r4 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r7 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object lastKey()>();

        $i2 = interfaceinvoke r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $i2 < 0 goto label10;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getSumFreq()>();

        return $l0;

     label10:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: java.util.Iterator valuesIterator()>();

     label11:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Comparable) $r7;

        $i2 = interfaceinvoke r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, r10);

        if $i2 <= 0 goto label12;

        $l3 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>(r10);

        $l0 = $l0 + $l3;

        goto label11;

     label12:
        return $l0;

        catch java.lang.ClassCastException from label04 to label05 with label08;
        catch java.lang.ClassCastException from label06 to label07 with label08;
    }
    public double getCumPct(char)
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        java.lang.Character $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getCumPct(int)
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getCumPct(long)
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getCumPct(java.lang.Comparable)
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.Comparable r1;
        double $d0, $d1;
        long $l0, $l2;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getSumFreq()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $l2 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCumFreq(java.lang.Comparable)>(r1);

        $d1 = (double) $l2;

        $d0 = (double) $l0;

        $d0 = $d1 / $d0;

        return $d0;
    }
    public java.util.List getMode()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.ArrayList r1;
        long l0, $l1;
        java.util.SortedMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long r6;
        byte $b2;
        java.util.Set $r7;
        java.util.Map$Entry r8;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        l0 = 0L;

        $r2 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Long) $r5;

        $l1 = virtualinvoke r6.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label1;

        l0 = $l1;

        goto label1;

     label2:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r7 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.Long) $r5;

        $l1 = virtualinvoke r6.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label3;

        $r5 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label4:
        return r1;
    }
    public double getPct(char)
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        java.lang.Character $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getPct(int)
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getPct(long)
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }
    public double getPct(java.lang.Comparable)
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.Comparable r1;
        double $d0, $d1;
        long $l0, $l2;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getSumFreq()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $l2 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>(r1);

        $d1 = (double) $l2;

        $d0 = (double) $l0;

        $d0 = $d1 / $d0;

        return $d0;
    }
    public long getSumFreq()
    {
        org.apache.commons.math3.stat.Frequency r0;
        long l0, $l1;
        java.util.SortedMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Long $r5;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        l0 = 0L;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        l0 = l0 + $l1;

        goto label1;

     label2:
        return l0;
    }
    public int getUniqueCount()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.SortedMap $r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        java.util.SortedMap $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        if $r1 != null goto label2;

        $i0 = 0;

     label1:
        $i0 = $i0 + 31;

        return $i0;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label1;
    }
    public void incrementValue(char, long) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        char $c0;
        long $l1;
        java.lang.Character $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $c0 := @parameter0: char;

        $l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void incrementValue(java.lang.Comparable,long)>($r1, $l1);

        return;
    }
    public void incrementValue(int, long) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        int $i0;
        long $l1, $l2;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void incrementValue(java.lang.Comparable,long)>($r1, $l1);

        return;
    }
    public void incrementValue(long, long) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        long $l0, $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void incrementValue(java.lang.Comparable,long)>($r1, $l1);

        return;
    }
    public void incrementValue(java.lang.Comparable, long) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.Comparable r1, r3;
        long $l0, $l1;
        java.lang.ClassCastException r2;
        boolean $z0;
        java.lang.Integer $r4;
        java.lang.Long $r5;
        java.util.SortedMap $r6;
        java.lang.Object $r7;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;
        java.lang.Class $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $l0 := @parameter1: long;

        r3 = r1;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label01;

        $r4 = (java.lang.Integer) r1;

        $l1 = virtualinvoke $r4.<java.lang.Integer: long longValue()>();

        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label01:
        $r6 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

     label02:
        $r7 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r3);

        $r5 = (java.lang.Long) $r7;

     label03:
        if $r5 != null goto label06;

        $r6 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

     label04:
        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

     label05:
        return;

     label06:
        $r6 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

     label07:
        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

     label08:
        $l0 = $l1 + $l0;

     label09:
        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

     label10:
        return;

     label11:
        r2 := @caughtexception;

        $r8 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES>;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10[0] = $r12;

        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

        catch java.lang.ClassCastException from label02 to label03 with label11;
        catch java.lang.ClassCastException from label04 to label05 with label11;
        catch java.lang.ClassCastException from label07 to label08 with label11;
        catch java.lang.ClassCastException from label09 to label10 with label11;
    }
    public void merge(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0, r6;
        java.util.Collection r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        r1 := @parameter0: java.util.Collection;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NULL_NOT_ALLOWED>;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>(r1, $r2, $r3);

        $r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.stat.Frequency) $r5;

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void merge(org.apache.commons.math3.stat.Frequency)>(r6);

        goto label1;

     label2:
        return;
    }
    public void merge(org.apache.commons.math3.stat.Frequency) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.Frequency r0, $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry r6;
        java.lang.Comparable $r7;
        java.lang.Long $r8;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 := @parameter0: org.apache.commons.math3.stat.Frequency;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NULL_NOT_ALLOWED>;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object,org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2, $r3);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.stat.Frequency: java.util.Iterator entrySetIterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Comparable) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Long) $r5;

        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: void incrementValue(java.lang.Comparable,long)>($r7, $l0);

        goto label1;

     label2:
        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.lang.StringBuilder r1;
        java.text.NumberFormat $r2;
        java.util.SortedMap $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Comparable r7;
        long $l0;
        double $d0;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value \t Freq. \t Pct. \t Cum Pct. \n");

        $r3 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Comparable) $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: long getCount(java.lang.Comparable)>(r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getPct(java.lang.Comparable)>(r7);

        $r8 = virtualinvoke $r2.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.Frequency: double getCumPct(java.lang.Comparable)>(r7);

        $r8 = virtualinvoke $r2.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
    public java.util.Iterator valuesIterator()
    {
        org.apache.commons.math3.stat.Frequency r0;
        java.util.SortedMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.math3.stat.Frequency;

        $r1 = r0.<org.apache.commons.math3.stat.Frequency: java.util.SortedMap freqTable>;

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }
