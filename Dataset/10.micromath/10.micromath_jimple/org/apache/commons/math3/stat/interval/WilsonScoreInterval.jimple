org.apache.commons.math3.stat.interval.WilsonScoreInterval extends java.lang.Object implements org.apache.commons.math3.stat.interval.BinomialConfidenceInterval
    public void <init>()
    {
        org.apache.commons.math3.stat.interval.WilsonScoreInterval r0;

        r0 := @this: org.apache.commons.math3.stat.interval.WilsonScoreInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)
    {
        org.apache.commons.math3.stat.interval.WilsonScoreInterval r0;
        int $i0, $i1;
        double $d0, d1, d2, d3, d4, d5, $d6;
        org.apache.commons.math3.distribution.NormalDistribution r1;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r2;

        r0 := @this: org.apache.commons.math3.stat.interval.WilsonScoreInterval;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.stat.interval.IntervalUtils: void checkParameters(int,int,double)>($i0, $i1, $d0);

        d1 = 1.0 - $d0;

        d1 = d1 / 2.0;

        r1 = new org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke r1.<org.apache.commons.math3.distribution.NormalDistribution: void <init>()>();

        d1 = 1.0 - d1;

        d1 = virtualinvoke r1.<org.apache.commons.math3.distribution.NormalDistribution: double inverseCumulativeProbability(double)>(d1);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d1, 2);

        d2 = (double) $i1;

        d5 = (double) $i0;

        d4 = d2 / d5;

        d2 = (double) $i0;

        d2 = 1.0 / d2;

        d2 = d2 * d3;

        d2 = 1.0 + d2;

        d2 = 1.0 / d2;

        $i1 = $i0 * 2;

        d5 = (double) $i1;

        d5 = 1.0 / d5;

        d5 = d5 * d3;

        d5 = d4 + d5;

        $d6 = (double) $i0;

        $d6 = 1.0 / $d6;

        $d6 = $d6 * d4;

        d4 = 1.0 - d4;

        d4 = $d6 * d4;

        $d6 = (double) $i0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d6, 2);

        $d6 = 4.0 * $d6;

        $d6 = 1.0 / $d6;

        d3 = $d6 * d3;

        d3 = d4 + d3;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        d3 = d1 * d3;

        d1 = d5 - d3;

        d1 = d2 * d1;

        d3 = d5 + d3;

        d2 = d2 * d3;

        $r2 = new org.apache.commons.math3.stat.interval.ConfidenceInterval;

        specialinvoke $r2.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void <init>(double,double,double)>(d1, d2, $d0);

        return $r2;
    }
