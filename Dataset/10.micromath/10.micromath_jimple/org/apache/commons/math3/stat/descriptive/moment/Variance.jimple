org.apache.commons.math3.stat.descriptive.moment.Variance extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable org.apache.commons.math3.stat.descriptive.WeightedEvaluation
private static final long serialVersionUID
protected boolean incMoment
private boolean isBiasCorrected
protected org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment
    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.moment.SecondMoment)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 0;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.moment.Variance) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Variance: void copy(org.apache.commons.math3.stat.descriptive.moment.Variance,org.apache.commons.math3.stat.descriptive.moment.Variance)>($r1, r0);

        return;
    }
    public void <init>(boolean)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = $z0;

        return;
    }
    public void <init>(boolean, org.apache.commons.math3.stat.descriptive.moment.SecondMoment)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 0;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = $z0;

        return;
    }
    public static void copy(org.apache.commons.math3.stat.descriptive.moment.Variance, org.apache.commons.math3.stat.descriptive.moment.Variance) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance $r0, $r1;
        double[] $r2;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r3;
        boolean $z0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.moment.Variance;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double[] getDataRef()>();

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void setData(double[])>($r2);

        $r3 = $r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $r3 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: org.apache.commons.math3.stat.descriptive.moment.SecondMoment copy()>();

        $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r3;

        $z0 = $r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = $z0;

        $z0 = $r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = $z0;

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void clear()>();

     label1:
        return;
    }
    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.Variance copy()>();

        return r0;
    }
    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.Variance copy()>();

        return r0;
    }
    public org.apache.commons.math3.stat.descriptive.moment.Variance copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Variance: void copy(org.apache.commons.math3.stat.descriptive.moment.Variance,org.apache.commons.math3.stat.descriptive.moment.Variance)>(r0, r1);

        return r1;
    }
    public double evaluate(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        double $d0;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        java.lang.Object[] $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r4);

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],int,int)>($r1, 0, $i0);

        return $d0;
    }
    public double evaluate(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 = lengthof $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double,int,int)>($r1, $d0, 0, $i0);

        return $d0;
    }
    public double evaluate(double[], double, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1;
        double $d0, d1, d2, $d3, $d4;
        int $i0, $i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label5;

        if $i1 != 1 goto label1;

        return 0.0;

     label1:
        if $i1 <= 1 goto label5;

        d1 = 0.0;

        d2 = 0.0;

        i2 = $i0;

     label2:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label3;

        $d3 = $r1[i2];

        $d3 = $d3 - $d0;

        $d4 = $d3 * $d3;

        d1 = d1 + $d4;

        d2 = d2 + $d3;

        i2 = i2 + 1;

        goto label2;

     label3:
        $d0 = (double) $i1;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z0 == 0 goto label4;

        d2 = d2 * d2;

        d2 = d2 / $d0;

        d1 = d1 - d2;

        $d0 = $d0 - 1.0;

        $d0 = d1 / $d0;

        return $d0;

     label4:
        d2 = d2 * d2;

        d2 = d2 / $d0;

        d1 = d1 - d2;

        $d0 = d1 / $d0;

        return $d0;

     label5:
        return #NaN;
    }
    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.stat.descriptive.moment.Mean r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: void clear()>();

        if $i1 != 1 goto label1;

        return 0.0;

     label1:
        if $i1 <= 1 goto label2;

        r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],int,int)>($r1, $i0, $i1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double,int,int)>($r1, $d0, $i0, $i1);

        return $d0;

     label2:
        return #NaN;
    }
    public double evaluate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1, $r2;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 = lengthof $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],int,int)>($r1, $r2, 0, $i0);

        return $d0;
    }
    public double evaluate(double[], double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1, $r2;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        $i0 = lengthof $r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],double,int,int)>($r1, $r2, $d0, 0, $i0);

        return $d0;
    }
    public double evaluate(double[], double[], double, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1, $r2;
        double $d0, d1, d2, $d3, $d4, $d5;
        int $i0, $i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $d0 := @parameter2: double;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],double[],int,int)>($r1, $r2, $i0, $i1);

        if $z0 == 0 goto label7;

        if $i1 != 1 goto label1;

        return 0.0;

     label1:
        if $i1 <= 1 goto label7;

        d1 = 0.0;

        d2 = 0.0;

        i2 = $i0;

     label2:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label3;

        $d3 = $r1[i2];

        $d3 = $d3 - $d0;

        $d4 = $r2[i2];

        $d5 = $d3 * $d3;

        $d4 = $d4 * $d5;

        d1 = d1 + $d4;

        $d4 = $r2[i2];

        $d3 = $d4 * $d3;

        d2 = d2 + $d3;

        i2 = i2 + 1;

        goto label2;

     label3:
        $d0 = 0.0;

        i2 = $i0;

     label4:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label5;

        $d3 = $r2[i2];

        $d0 = $d0 + $d3;

        i2 = i2 + 1;

        goto label4;

     label5:
        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z0 == 0 goto label6;

        d2 = d2 * d2;

        d2 = d2 / $d0;

        d1 = d1 - d2;

        $d0 = $d0 - 1.0;

        $d0 = d1 / $d0;

        return $d0;

     label6:
        d2 = d2 * d2;

        d2 = d2 / $d0;

        d1 = d1 - d2;

        $d0 = d1 / $d0;

        return $d0;

     label7:
        return #NaN;
    }
    public double evaluate(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.stat.descriptive.moment.Mean r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],double[],int,int)>($r1, $r2, $i0, $i1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: void clear()>();

        if $i1 != 1 goto label1;

        return 0.0;

     label1:
        if $i1 <= 1 goto label2;

        r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        $d0 = virtualinvoke r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[],int,int)>($r1, $r2, $i0, $i1);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],double,int,int)>($r1, $r2, $d0, $i0, $i1);

        return $d0;

     label2:
        return #NaN;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        long $l0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long getN()>();

        return $l0;
    }
    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;
        long $l0;
        byte $b1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label2;

        return 0.0;

     label2:
        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z0 == 0 goto label3;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $d0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: double m2>;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $d1 = (double) $l0;

        $d1 = $d1 - 1.0;

        $d0 = $d0 / $d1;

        return $d0;

     label3:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $d0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: double m2>;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void increment(double)>($d0);

     label1:
        return;
    }
    public boolean isBiasCorrected()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        return z0;
    }
    public void setBiasCorrected(boolean)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = $z0;

        return;
    }
