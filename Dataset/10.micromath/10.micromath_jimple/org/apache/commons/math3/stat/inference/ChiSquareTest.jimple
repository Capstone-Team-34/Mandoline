org.apache.commons.math3.stat.inference.ChiSquareTest extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void checkArray(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] $r1;
        int $i0;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;
        long[] $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[][];

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r2;

     label1:
        $r3 = $r1[0];

        $i0 = lengthof $r3;

        if $i0 >= 2 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = $r1[0];

        $i0 = lengthof $r3;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r2;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkRectangular(long[][])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[][])>($r1);

        return;
    }
    public double chiSquare(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] $r1;
        long[] $r2;
        double $d0, d1, d2, $d3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        long $l2;
        boolean z0;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkPositive(double[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r2);

        d1 = 0.0;

        d2 = 0.0;

        $i0 = 0;

     label3:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $d3 = $r1[$i0];

        d1 = d1 + $d3;

        $l2 = $r2[$i0];

        $d3 = (double) $l2;

        d2 = d2 + $d3;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $d3 = 1.0;

        z0 = 0;

        $d0 = d1 - d2;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b3 = $d0 cmpl 1.0E-5;

        if $b3 <= 0 goto label5;

        $d3 = d2 / d1;

        z0 = 1;

     label5:
        d1 = 0.0;

        $i0 = 0;

     label6:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label9;

        if z0 == 0 goto label8;

        $l2 = $r2[$i0];

        d2 = (double) $l2;

        $d0 = $r1[$i0];

        $d0 = $d0 * $d3;

        d2 = d2 - $d0;

        d2 = d2 * d2;

        $d0 = $r1[$i0];

        $d0 = $d0 * $d3;

        d2 = d2 / $d0;

        d1 = d1 + d2;

     label7:
        $i0 = $i0 + 1;

        goto label6;

     label8:
        $l2 = $r2[$i0];

        d2 = (double) $l2;

        $d0 = $r1[$i0];

        d2 = d2 - $d0;

        d2 = d2 * d2;

        $d0 = $r1[$i0];

        d2 = d2 / $d0;

        d1 = d1 + d2;

        goto label7;

     label9:
        return d1;
    }
    public double chiSquare(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] $r1;
        double[] r2, r3;
        int i0, i1, i2, i3;
        long[] $r4;
        double d0, $d1, $d2, $d3, $d4;
        long $l4;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: void checkArray(long[][])>($r1);

        i1 = lengthof $r1;

        $r4 = $r1[0];

        i0 = lengthof $r4;

        r3 = newarray (double)[i1];

        r2 = newarray (double)[i0];

        d0 = 0.0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $d1 = r3[i2];

        $r4 = $r1[i2];

        $l4 = $r4[i3];

        $d2 = (double) $l4;

        $d1 = $d1 + $d2;

        r3[i2] = $d1;

        $d1 = r2[i3];

        $r4 = $r1[i2];

        $l4 = $r4[i3];

        $d2 = (double) $l4;

        $d1 = $d1 + $d2;

        r2[i3] = $d1;

        $r4 = $r1[i2];

        $l4 = $r4[i3];

        $d1 = (double) $l4;

        d0 = d0 + $d1;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $d1 = 0.0;

        i2 = 0;

     label5:
        if i2 >= i1 goto label8;

        i3 = 0;

     label6:
        if i3 >= i0 goto label7;

        $d2 = r3[i2];

        $d3 = r2[i3];

        $d2 = $d2 * $d3;

        $d2 = $d2 / d0;

        $r4 = $r1[i2];

        $l4 = $r4[i3];

        $d3 = (double) $l4;

        $d3 = $d3 - $d2;

        $r4 = $r1[i2];

        $l4 = $r4[i3];

        $d4 = (double) $l4;

        $d4 = $d4 - $d2;

        $d3 = $d3 * $d4;

        $d2 = $d3 / $d2;

        $d1 = $d1 + $d2;

        i3 = i3 + 1;

        goto label6;

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        return $d1;
    }
    public double chiSquareDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        long l2, l3, $l4;
        double d0, $d1, d2, d3, $d4, $d5;
        byte $b5;
        org.apache.commons.math3.exception.ZeroException $r4;
        boolean z0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label01;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, 2);

        throw $r3;

     label01:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label02;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label02:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>($r2);

        l2 = 0L;

        l3 = 0L;

        d0 = 0.0;

        $i0 = 0;

     label03:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label04;

        $l4 = $r1[$i0];

        l2 = l2 + $l4;

        $l4 = $r2[$i0];

        l3 = l3 + $l4;

        $i0 = $i0 + 1;

        goto label03;

     label04:
        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label05;

        $b5 = l3 cmp 0L;

        if $b5 != 0 goto label06;

     label05:
        $r4 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r4;

     label06:
        $b5 = l2 cmp l3;

        if $b5 == 0 goto label10;

        z0 = 1;

     label07:
        if z0 == 0 goto label08;

        d0 = (double) l2;

        $d1 = (double) l3;

        d0 = d0 / $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

     label08:
        $d1 = 0.0;

        $i0 = 0;

     label09:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label14;

        l2 = $r1[$i0];

        $b5 = l2 cmp 0L;

        if $b5 != 0 goto label11;

        l2 = $r2[$i0];

        $b5 = l2 cmp 0L;

        if $b5 != 0 goto label11;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY>;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[0] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label10:
        z0 = 0;

        goto label07;

     label11:
        l2 = $r1[$i0];

        d2 = (double) l2;

        l2 = $r2[$i0];

        d3 = (double) l2;

        if z0 == 0 goto label13;

        $d4 = d2 / d0;

        $d5 = d3 * d0;

        $d4 = $d4 - $d5;

     label12:
        $d4 = $d4 * $d4;

        d2 = d2 + d3;

        d2 = $d4 / d2;

        $d1 = $d1 + d2;

        $i0 = $i0 + 1;

        goto label09;

     label13:
        $d4 = d2 - d3;

        goto label12;

     label14:
        return $d1;
    }
    public double chiSquareTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] $r1;
        long[] $r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        r3 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = $d0 - 1.0;

        specialinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(double[],long[])>($r1, $r2);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double chiSquareTest(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] $r1;
        double d0, $d1;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r2;
        int $i0;
        long[] $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: void checkArray(long[][])>($r1);

        $i0 = lengthof $r1;

        d0 = (double) $i0;

        d0 = d0 - 1.0;

        $r3 = $r1[0];

        $i0 = lengthof $r3;

        $d1 = (double) $i0;

        $d1 = $d1 - 1.0;

        d0 = d0 * $d1;

        r2 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        specialinvoke r2.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(double)>(d0);

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(long[][])>($r1);

        d0 = virtualinvoke r2.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>(d0);

        d0 = 1.0 - d0;

        return d0;
    }
    public boolean chiSquareTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] $r1;
        long[] $r2;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: long[];

        $d0 := @parameter2: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(double[],long[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public boolean chiSquareTest(long[][], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] $r1;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r6;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[][];

        $d0 := @parameter1: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(long[][])>($r1);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public double chiSquareTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] $r1, $r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        r3 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof $r1;

        $d0 = (double) $i0;

        $d0 = $d0 - 1.0;

        specialinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareDataSetsComparison(long[],long[])>($r1, $r2);

        $d0 = virtualinvoke r3.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d0);

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public boolean chiSquareTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] $r1, $r2;
        double $d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $d0 := @parameter2: double;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b0 = $d0 cmpl 0.5;

        if $b0 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTestDataSetsComparison(long[],long[])>($r1, $r2);

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
