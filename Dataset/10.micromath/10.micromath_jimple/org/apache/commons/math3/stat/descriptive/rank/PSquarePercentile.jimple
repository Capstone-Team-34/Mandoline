org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic java.io.Serializable
private static final java.text.DecimalFormat DECIMAL_FORMAT
private static final double DEFAULT_QUANTILE_DESIRED
private static final int PSQUARE_CONSTANT
private static final long serialVersionUID
private long countOfObservations
private final java.util.List initialFive
private transient double lastObservation
private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers
private double pValue
private final double quantile
    static void <clinit>()
    {
        java.text.DecimalFormat $r0;

        $r0 = new java.text.DecimalFormat;

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>("00.00");

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT> = $r0;

        return;
    }
    void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: void <init>(double)>(50.0);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList $r1;
        byte $b0;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: void <init>(int)>(5);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = null;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = #NaN;

        $b0 = $d0 cmpl 100.0;

        if $b0 > 0 goto label1;

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        $d0 = $d0 / 100.0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile> = $d0;

        return;
    }
    private double maximum()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1;
        double $d0;
        java.util.List $r2, $r3;
        boolean $z0;
        int $i0;
        java.lang.Object $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double height(int)>(5);

        return $d0;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        return $d0;

     label2:
        return #NaN;
    }
    private double minimum()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1;
        double $d0;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double height(int)>(1);

        return $d0;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        return $d0;

     label2:
        return #NaN;
    }
    public static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers newMarkers(java.util.List, double)
    {
        java.util.List r0;
        double $d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers $r1;

        r0 := @parameter0: java.util.List;

        $d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(java.util.List,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(r0, $d0, null);

        return $r1;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = null;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = 0L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = #NaN;

        return;
    }
    public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0, r1;
        double $d0;
        java.lang.Object $r2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r3;
        long $l0;
        java.util.List $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $d0 = 100.0 * $d0;

        specialinvoke r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: void <init>(double)>($d0);

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r3 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r2 = interfaceinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers) $r2;

        r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = $r3;

     label1:
        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = $l0;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d0;

        $r4 = r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r4 = r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return r1;
    }
    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()>();

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0, r3;
        java.lang.Object $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r2, $r4;
        boolean $z0, z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label9;

        $z0 = $r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        if $z0 == 0 goto label9;

        r3 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile) $r1;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 == null goto label5;

        $r2 = r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 == null goto label5;

        $z0 = 1;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 != null goto label6;

        $r2 = r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 != null goto label6;

        z1 = 1;

     label3:
        if $z0 == 0 goto label7;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r2 = r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

     label4:
        if $z0 == 0 goto label8;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long getN()>();

        $l1 = virtualinvoke r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long getN()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label8;

        return 1;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        z1 = 0;

        goto label3;

     label7:
        $z0 = z1;

        goto label4;

     label8:
        return 0;

     label9:
        return 0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        return l0;
    }
    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, 1.0);

        if $i0 != 0 goto label2;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double maximum()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d0;

     label1:
        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        return $d0;

     label2:
        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, 0.0);

        if $i0 != 0 goto label1;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double minimum()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d0;

        goto label1;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double[] r1;
        double $d0, d1;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r2;
        long $l0;
        int $i1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double getResult()>();

        d1 = $d0;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        d1 = 37.0;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 != null goto label3;

        $d0 = 0.0;

     label2:
        r1 = newarray (double)[4];

        r1[0] = d1;

        d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        r1[1] = d1;

        r1[2] = $d0;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        d1 = (double) $l0;

        r1[3] = d1;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(double[])>(r1);

        return $i1;

     label3:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $d0 = (double) $i1;

        goto label2;
    }
    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double $d0, $d1;
        long $l0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1;
        java.util.List $r2, $r4;
        java.lang.Double $r3;
        boolean $z0;
        int $i1;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 := @parameter0: double;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        $l0 = $l0 + 1L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = $l0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation> = $d0;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        $d0 = (double) $i1;

        $d0 = $d1 * $d0;

        $i1 = (int) $d0;

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d0;

        return;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $r1 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers newMarkers(java.util.List,double)>($r2, $d1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = $r1;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double processDataPoint(double)>($d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d0;

        return;
    }
    public double quantile()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        return d0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1;
        java.lang.Object[] $r2;
        java.text.DecimalFormat $r3;
        double $d0;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 != null goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation>;

        $r4 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r2[0] = $r4;

        $r3 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        $r4 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r2[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("obs=%s pValue=%s", $r2);

        return $r4;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation>;

        $r4 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r2[0] = $r4;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r2[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("obs=%s markers=%s", $r2);

        return $r4;
    }
