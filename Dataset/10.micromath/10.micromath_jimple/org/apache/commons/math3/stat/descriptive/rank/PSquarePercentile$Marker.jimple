org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker extends java.lang.Object implements java.io.Serializable java.lang.Cloneable
private static final long serialVersionUID
private double desiredMarkerIncrement
private double desiredMarkerPosition
private int index
private double intMarkerPosition
private transient org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear
private double markerHeight
private transient org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next
private final org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear
private transient org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous
    private void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        org.apache.commons.math3.analysis.interpolation.NevilleInterpolator $r1;
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.analysis.interpolation.NevilleInterpolator;

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.NevilleInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear> = $r1;

        $r2 = new org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        specialinvoke $r2.<org.apache.commons.math3.analysis.interpolation.LinearInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear> = $r2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = r0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = r0;

        return;
    }
    private void <init>(double, double, double, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = $d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition> = $d1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement> = $d2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition> = $d3;

        return;
    }
    void <init>(double, double, double, double, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 := @parameter4: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return;
    }
    void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>()>();

        return;
    }
    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r0 = specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r1);

        return $r0;
    }
    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0, $r1;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r0 = specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r1);

        return $r0;
    }
    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;
        int $i0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $i0 := @parameter1: int;

        $r0 = specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker index(int)>($i0);

        return $r0;
    }
    static double access$500(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;
        double d0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 = $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        return d0;
    }
    static double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 := @parameter1: double;

        $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = $d0;

        return $d0;
    }
    static double access$600(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 = specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double estimate()>();

        return $d0;
    }
    static void access$700(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;
        int $i0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void incrementPosition(int)>($i0);

        return;
    }
    static void access$800(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke $r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void updateDesiredPosition()>();

        return;
    }
    private double difference()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d0 = $d1 - $d0;

        return $d0;
    }
    private double estimate()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r3;
        double[] r1, r2, $r4;
        double d0, $d1, $d2;
        byte $b0, $b1;
        boolean z0, z1;
        org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator $r5;
        org.apache.commons.math3.analysis.UnivariateFunction $r6;
        int $i2;
        double[][] $r7;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double difference()>();

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $d1 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d1 = $d1 - $d2;

        $b0 = $d1 cmpl 1.0;

        if $b0 <= 0 goto label09;

        z0 = 1;

     label01:
        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $d1 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d1 = $d1 - $d2;

        $b0 = $d1 cmpg -1.0;

        if $b0 >= 0 goto label10;

        z1 = 1;

     label02:
        $b0 = d0 cmpl 1.0;

        if $b0 < 0 goto label03;

        if z0 != 0 goto label04;

     label03:
        $b0 = d0 cmpg -1.0;

        if $b0 > 0 goto label08;

        if z1 == 0 goto label08;

     label04:
        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label11;

        $b0 = 1;

     label05:
        r2 = newarray (double)[3];

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        d0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        r2[0] = d0;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        r2[1] = d0;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        d0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        r2[2] = d0;

        $r4 = newarray (double)[3];

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        d0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r4[0] = d0;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r4[1] = d0;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        d0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r4[2] = d0;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d1 = (double) $b0;

        d0 = d0 + $d1;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator: org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[],double[])>(r2, $r4);

        $d1 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = $d1;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        z0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: boolean isEstimateBad(double[],double)>($r4, $d1);

        if z0 == 0 goto label07;

        $d1 = r2[1];

        $d1 = d0 - $d1;

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label12;

        $b1 = 1;

     label06:
        r1 = newarray (double)[2];

        $d1 = r2[1];

        r1[0] = $d1;

        $i2 = $b1 + 1;

        $d1 = r2[$i2];

        r1[1] = $d1;

        r2 = newarray (double)[2];

        $d1 = $r4[1];

        r2[0] = $d1;

        $i2 = $b1 + 1;

        $d1 = $r4[$i2];

        r2[1] = $d1;

        $r7 = newarray (double[])[1];

        $r7[0] = r2;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>(r1, $r7);

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator: org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[],double[])>(r1, r2);

        d0 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = d0;

     label07:
        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void incrementPosition(int)>($b0);

     label08:
        d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        return d0;

     label09:
        z0 = 0;

        goto label01;

     label10:
        z1 = 0;

        goto label02;

     label11:
        $b0 = -1;

        goto label05;

     label12:
        $b1 = -1;

        goto label06;
    }
    private void incrementPosition(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $i0 := @parameter0: int;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d0 = (double) $i0;

        $d0 = $d1 + $d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition> = $d0;

        return;
    }
    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker index(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $i0 := @parameter0: int;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index> = $i0;

        return r0;
    }
    private boolean isEstimateBad(double[], double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double[] $r1;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 = $r1[0];

        $b0 = $d0 cmpg $d1;

        if $b0 <= 0 goto label1;

        $d1 = $r1[2];

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = $r1;

        return r0;
    }
    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = $r1;

        return r0;
    }
    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        java.io.ObjectInputStream $r1;
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = r0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = r0;

        $r2 = new org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        specialinvoke $r2.<org.apache.commons.math3.analysis.interpolation.LinearInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear> = $r2;

        return;
    }
    private void updateDesiredPosition()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d0 = $d1 + $d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition> = $d0;

        return;
    }
    public java.lang.Object clone()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r2, $r3;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        if $r1 == null goto label13;

        $z0 = $r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        if $z0 == 0 goto label13;

        r2 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r1;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d1 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 != 0 goto label07;

        $z0 = 1;

     label02:
        if $z0 == 0 goto label08;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d1 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 != 0 goto label08;

        $z0 = 1;

     label03:
        if $z0 == 0 goto label09;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d1 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 != 0 goto label09;

        $z0 = 1;

     label04:
        if $z0 == 0 goto label10;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d1 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 != 0 goto label10;

        $z0 = 1;

     label05:
        if $z0 == 0 goto label11;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r3 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i1 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        if $i0 != $i1 goto label11;

        $z0 = 1;

     label06:
        if $z0 == 0 goto label12;

        r0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        r0 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        if $i0 != $i1 goto label12;

        return 1;

     label07:
        $z0 = 0;

        goto label02;

     label08:
        $z0 = 0;

        goto label03;

     label09:
        $z0 = 0;

        goto label04;

     label10:
        $z0 = 0;

        goto label05;

     label11:
        $z0 = 0;

        goto label06;

     label12:
        return 0;

     label13:
        return 0;
    }
    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r2;
        int $i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = newarray (double)[6];

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r1[0] = $d0;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $r1[1] = $d0;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $r1[2] = $d0;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $r1[3] = $d0;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i0 = $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d0 = (double) $i0;

        $r1[4] = $d0;

        r0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d0 = (double) $i0;

        $r1[5] = $d0;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }
    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r3;
        java.lang.Object[] $r1;
        int $i0;
        double $d0;
        java.lang.Double $r2;
        java.lang.Integer $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = newarray (java.lang.Object)[7];

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d0 = (double) $i0;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d0, 0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[1] = $r2;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d0, 2);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[2] = $r2;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d0, 2);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[3] = $r2;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d0 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d0, 2);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[4] = $r2;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i0 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[5] = $r4;

        r0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[6] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("index=%.0f,n=%.0f,np=%.2f,q=%.2f,dn=%.2f,prev=%d,next=%d", $r1);

        return $r5;
    }
