org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression extends java.lang.Object implements org.apache.commons.math3.stat.regression.MultipleLinearRegression
private boolean noIntercept
private org.apache.commons.math3.linear.RealMatrix xMatrix
private org.apache.commons.math3.linear.RealVector yVector
    public void <init>()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept> = 0;

        return;
    }
protected abstract org.apache.commons.math3.linear.RealVector calculateBeta() { 
// no body
} 
protected abstract org.apache.commons.math3.linear.RealMatrix calculateBetaVariance() { 
// no body
} 
    protected double calculateErrorVariance()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0, $d1;
        org.apache.commons.math3.linear.RealMatrix $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateResiduals()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        $r2 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix>;

        $i0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i0 = $i0 - $i1;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        return $d0;
    }
    protected org.apache.commons.math3.linear.RealVector calculateResiduals()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateBeta()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector>;

        $r3 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix>;

        $r1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r1);

        return $r2;
    }
    protected double calculateYVariance()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r1;
        org.apache.commons.math3.linear.RealVector $r2;
        double[] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[])>($r3);

        return $d0;
    }
    public double estimateErrorVariance()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: double calculateErrorVariance()>();

        return $d0;
    }
    public double estimateRegressandVariance()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: double calculateYVariance()>();

        return $d0;
    }
    public double[] estimateRegressionParameters()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateBeta()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r2;
    }
    public double[] estimateRegressionParametersStandardErrors()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        int i0, i1;
        double[] r1, $r3;
        double[][] $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: double[][] estimateRegressionParametersVariance()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: double calculateErrorVariance()>();

        r1 = $r2[0];

        i0 = lengthof r1;

        r1 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = $r2[i1];

        $d1 = $r3[i1];

        $d1 = $d1 * $d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        r1[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
    public double[][] estimateRegressionParametersVariance()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()>();

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        return $r2;
    }
    public double estimateRegressionStandardError()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: double estimateErrorVariance()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;
    }
    public double[] estimateResiduals()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateBeta()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector>;

        $r3 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix>;

        $r1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r1);

        $r2 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r1);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r4;
    }
    protected org.apache.commons.math3.linear.RealMatrix getX()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        r1 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix>;

        return r1;
    }
    protected org.apache.commons.math3.linear.RealVector getY()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector r1;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        r1 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector>;

        return r1;
    }
    public boolean isNoIntercept()
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        z0 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept>;

        return z0;
    }
    public void newSampleData(double[], int, int)
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double[] $r1, r2, $r10;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        boolean $z0;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        double[][] r9;
        double $d0;
        org.apache.commons.math3.exception.NullArgumentException $r11;
        org.apache.commons.math3.exception.DimensionMismatchException $r12;
        org.apache.commons.math3.exception.InsufficientDataException $r13;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r14;
        org.apache.commons.math3.linear.ArrayRealVector $r15;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label01;

        $r11 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r11.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r11;

     label01:
        $i2 = lengthof $r1;

        $i3 = $i1 + 1;

        $i3 = $i3 * $i0;

        if $i2 == $i3 goto label02;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = lengthof $r1;

        $i1 = $i1 + 1;

        $i0 = $i1 * $i0;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i0);

        throw $r12;

     label02:
        if $i0 > $i1 goto label03;

        $r13 = new org.apache.commons.math3.exception.InsufficientDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $i0 = $i1 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        specialinvoke $r13.<org.apache.commons.math3.exception.InsufficientDataException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r13;

     label03:
        r2 = newarray (double)[$i0];

        $z0 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept>;

        if $z0 == 0 goto label09;

     label04:
        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r9 = (double[][]) $r8;

        $i2 = 0;

        $i3 = 0;

     label05:
        if $i2 >= $i0 goto label12;

        i4 = $i3 + 1;

        $d0 = $r1[$i3];

        r2[$i2] = $d0;

        $z0 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept>;

        if $z0 != 0 goto label06;

        $r10 = r9[$i2];

        $d0 = (double) 4607182418800017408L;

        $r10[0] = $d0;

     label06:
        $z0 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept>;

        if $z0 == 0 goto label10;

        i5 = 0;

     label07:
        $i3 = i4;

     label08:
        if i5 >= $i1 goto label11;

        $r10 = r9[$i2];

        $d0 = $r1[$i3];

        $r10[i5] = $d0;

        i5 = i5 + 1;

        $i3 = $i3 + 1;

        goto label08;

     label09:
        $i1 = $i1 + 1;

        goto label04;

     label10:
        i5 = 1;

        goto label07;

     label11:
        $i2 = $i2 + 1;

        goto label05;

     label12:
        $r14 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r14.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>(r9);

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix> = $r14;

        $r15 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r15.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r2);

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector> = $r15;

        return;
    }
    protected void newXSampleData(double[][])
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double[][] $r1, r9;
        int i0, $i1, $i2;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        org.apache.commons.math3.exception.NoDataException $r3;
        boolean $z0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;
        double[] $r5, $r11;
        int[] $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 := @parameter0: double[][];

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        i0 = lengthof $r1;

        if i0 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r3;

     label2:
        $z0 = r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept>;

        if $z0 == 0 goto label3;

        $r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>($r1, 1);

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix> = $r4;

        return;

     label3:
        $r5 = $r1[0];

        i0 = lengthof $r5;

        $i1 = lengthof $r1;

        $i2 = i0 + 1;

        $r6 = newarray (int)[2];

        $r6[0] = $i1;

        $r6[1] = $i2;

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r6);

        r9 = (double[][]) $r8;

        $i1 = 0;

     label4:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label6;

        $r5 = $r1[$i1];

        $i2 = lengthof $r5;

        if $i2 == i0 goto label5;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = $r1[$i1];

        $i1 = lengthof $r5;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, i0);

        throw $r10;

     label5:
        $r5 = r9[$i1];

        $r5[0] = 1.0;

        $r5 = $r1[$i1];

        $r11 = r9[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r11, 1, i0);

        $i1 = $i1 + 1;

        goto label4;

     label6:
        $r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r9, 0);

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix xMatrix> = $r4;

        return;
    }
    protected void newYSampleData(double[])
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double[] $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        int $i0;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 := @parameter0: double[];

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r3;

     label2:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>($r1);

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: org.apache.commons.math3.linear.RealVector yVector> = $r4;

        return;
    }
    public void setNoIntercept(boolean)
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $z0 := @parameter0: boolean;

        r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: boolean noIntercept> = $z0;

        return;
    }
    protected void validateCovarianceData(double[][], double[][])
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double[][] $r1, $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        double[] $r4;
        org.apache.commons.math3.linear.NonSquareMatrixException $r5;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[][];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r3;

     label1:
        $i0 = lengthof $r2;

        if $i0 <= 0 goto label2;

        $i0 = lengthof $r2;

        $r4 = $r2[0];

        $i1 = lengthof $r4;

        if $i0 == $i1 goto label2;

        $r5 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = lengthof $r2;

        $r4 = $r2[0];

        $i1 = lengthof $r4;

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r5;

     label2:
        return;
    }
    protected void validateSampleData(double[][], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression r0;
        double[][] $r1;
        double[] $r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.exception.NoDataException $r5;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;

        r0 := @this: org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label3;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i0, $i1);

        throw $r4;

     label3:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label4;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r5;

     label4:
        $r2 = $r1[0];

        $i0 = lengthof $r2;

        $i0 = $i0 + 1;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label5;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r8 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r9;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[1] = $r9;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r8);

        throw $r6;

     label5:
        return;
    }
