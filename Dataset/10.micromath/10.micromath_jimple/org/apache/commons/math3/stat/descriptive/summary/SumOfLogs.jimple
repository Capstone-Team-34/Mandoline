org.apache.commons.math3.stat.descriptive.summary.SumOfLogs extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable
private static final long serialVersionUID
private int n
private double value
    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value> = 0.0;

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n> = 0;

        return;
    }
    public void <init>(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        $r1 := @parameter0: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: void copy(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs,org.apache.commons.math3.stat.descriptive.summary.SumOfLogs)>($r1, r0);

        return;
    }
    public static void copy(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs, org.apache.commons.math3.stat.descriptive.summary.SumOfLogs) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs $r0, $r1;
        double[] $r2;
        int $i0;
        double $d0;

        $r0 := @parameter0: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        $r1 := @parameter1: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double[] getDataRef()>();

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: void setData(double[])>($r2);

        $i0 = $r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n>;

        $r1.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n> = $i0;

        $d0 = $r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value>;

        $r1.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value> = $d0;

        return;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value> = 0.0;

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n> = 0;

        return;
    }
    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs copy()>();

        return r0;
    }
    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        r0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs copy()>();

        return r0;
    }
    public org.apache.commons.math3.stat.descriptive.summary.SumOfLogs copy()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        r1 = new org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        specialinvoke r1.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: void copy(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs,org.apache.commons.math3.stat.descriptive.summary.SumOfLogs)>(r0, r1);

        return r1;
    }
    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;
        double[] $r1;
        int $i0, $i1, i2, $i3;
        boolean $z0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: boolean test(double[],int,int,boolean)>($r1, $i0, $i1, 1);

        if $z0 == 0 goto label2;

        d0 = 0.0;

        i2 = $i0;

     label1:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label3;

        $d1 = $r1[i2];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        d0 = d0 + $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return #NaN;

     label3:
        return d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n>;

        $l1 = (long) $i0;

        return $l1;
    }
    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        d0 = r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value>;

        return d0;
    }
    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.summary.SumOfLogs r0;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;

        $d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value>;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d0 = $d1 + $d0;

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: double value> = $d0;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n>;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.stat.descriptive.summary.SumOfLogs: int n> = $i0;

        return;
    }
