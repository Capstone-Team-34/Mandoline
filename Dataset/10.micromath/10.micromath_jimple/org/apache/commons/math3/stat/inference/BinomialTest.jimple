org.apache.commons.math3.stat.inference.BinomialTest extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.math3.stat.inference.BinomialTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.BinomialTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public double binomialTest(int, int, double, org.apache.commons.math3.stat.inference.AlternativeHypothesis)
    {
        org.apache.commons.math3.stat.inference.BinomialTest r0;
        int $i0, $i1, $i3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.stat.inference.AlternativeHypothesis $r1;
        org.apache.commons.math3.distribution.BinomialDistribution r2;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        java.lang.Integer $r4, $r7;
        byte $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r5;
        java.lang.Double $r6;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.NullArgumentException $r11;
        int[] $r12;
        org.apache.commons.math3.exception.MathInternalError $r13;

        r0 := @this: org.apache.commons.math3.stat.inference.BinomialTest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 := @parameter3: org.apache.commons.math3.stat.inference.AlternativeHypothesis;

        if $i0 >= 0 goto label01;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label01:
        if $i1 >= 0 goto label02;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label02:
        $b2 = $d0 cmpg 0.0;

        if $b2 < 0 goto label03;

        $b2 = $d0 cmpl 1.0;

        if $b2 <= 0 goto label04;

     label03:
        $r5 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r6, $r4, $r7);

        throw $r5;

     label04:
        if $i0 >= $i1 goto label05;

        $r8 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_INVALID_PARAMETERS_ORDER>;

        $r10 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r10[1] = $r4;

        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r8;

     label05:
        if $r1 != null goto label06;

        $r11 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r11.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r11;

     label06:
        r2 = new org.apache.commons.math3.distribution.BinomialDistribution;

        specialinvoke r2.<org.apache.commons.math3.distribution.BinomialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>(null, $i0, $d0);

        $r12 = <org.apache.commons.math3.stat.inference.BinomialTest$1: int[] $SwitchMap$org$apache$commons$math3$stat$inference$AlternativeHypothesis>;

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.AlternativeHypothesis: int ordinal()>();

        $i3 = $r12[$i3];

        lookupswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            default: goto label07;
        };

     label07:
        $r13 = new org.apache.commons.math3.exception.MathInternalError;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = $r1;

        $r1 = <org.apache.commons.math3.stat.inference.AlternativeHypothesis: org.apache.commons.math3.stat.inference.AlternativeHypothesis TWO_SIDED>;

        $r10[1] = $r1;

        $r1 = <org.apache.commons.math3.stat.inference.AlternativeHypothesis: org.apache.commons.math3.stat.inference.AlternativeHypothesis LESS_THAN>;

        $r10[2] = $r1;

        specialinvoke $r13.<org.apache.commons.math3.exception.MathInternalError: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r10);

        throw $r13;

     label08:
        $i0 = $i1 + -1;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.distribution.BinomialDistribution: double cumulativeProbability(int)>($i0);

        $d0 = 1.0 - $d0;

        return $d0;

     label09:
        $d0 = virtualinvoke r2.<org.apache.commons.math3.distribution.BinomialDistribution: double cumulativeProbability(int)>($i1);

        return $d0;

     label10:
        $i3 = 0;

        $d0 = 0.0;

     label11:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.distribution.BinomialDistribution: double probability(int)>($i3);

        $d2 = virtualinvoke r2.<org.apache.commons.math3.distribution.BinomialDistribution: double probability(int)>($i0);

        $b2 = $d1 cmpl $d2;

        if $b2 != 0 goto label13;

        $d1 = 2.0 * $d1;

        $d0 = $d0 + $d1;

        $i3 = $i3 + 1;

        $i0 = $i0 + -1;

     label12:
        if $i3 > $i1 goto label15;

        if $i0 >= $i1 goto label11;

        return $d0;

     label13:
        $b2 = $d1 cmpg $d2;

        if $b2 >= 0 goto label14;

        $d0 = $d0 + $d1;

        $i3 = $i3 + 1;

        goto label12;

     label14:
        $d0 = $d0 + $d2;

        $i0 = $i0 + -1;

        goto label12;

     label15:
        return $d0;
    }
    public boolean binomialTest(int, int, double, org.apache.commons.math3.stat.inference.AlternativeHypothesis, double)
    {
        org.apache.commons.math3.stat.inference.BinomialTest r0;
        int $i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.stat.inference.AlternativeHypothesis $r1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.inference.BinomialTest;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 := @parameter3: org.apache.commons.math3.stat.inference.AlternativeHypothesis;

        $d1 := @parameter4: double;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.BinomialTest: double binomialTest(int,int,double,org.apache.commons.math3.stat.inference.AlternativeHypothesis)>($i0, $i1, $d0, $r1);

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
