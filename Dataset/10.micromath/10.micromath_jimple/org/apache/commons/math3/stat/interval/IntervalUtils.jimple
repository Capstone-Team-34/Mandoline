org.apache.commons.math3.stat.interval.IntervalUtils extends java.lang.Object
private static final org.apache.commons.math3.stat.interval.BinomialConfidenceInterval AGRESTI_COULL
private static final org.apache.commons.math3.stat.interval.BinomialConfidenceInterval CLOPPER_PEARSON
private static final org.apache.commons.math3.stat.interval.BinomialConfidenceInterval NORMAL_APPROXIMATION
private static final org.apache.commons.math3.stat.interval.BinomialConfidenceInterval WILSON_SCORE
    static void <clinit>()
    {
        org.apache.commons.math3.stat.interval.AgrestiCoullInterval $r0;
        org.apache.commons.math3.stat.interval.ClopperPearsonInterval $r1;
        org.apache.commons.math3.stat.interval.NormalApproximationInterval $r2;
        org.apache.commons.math3.stat.interval.WilsonScoreInterval $r3;

        $r0 = new org.apache.commons.math3.stat.interval.AgrestiCoullInterval;

        specialinvoke $r0.<org.apache.commons.math3.stat.interval.AgrestiCoullInterval: void <init>()>();

        <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval AGRESTI_COULL> = $r0;

        $r1 = new org.apache.commons.math3.stat.interval.ClopperPearsonInterval;

        specialinvoke $r1.<org.apache.commons.math3.stat.interval.ClopperPearsonInterval: void <init>()>();

        <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval CLOPPER_PEARSON> = $r1;

        $r2 = new org.apache.commons.math3.stat.interval.NormalApproximationInterval;

        specialinvoke $r2.<org.apache.commons.math3.stat.interval.NormalApproximationInterval: void <init>()>();

        <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval NORMAL_APPROXIMATION> = $r2;

        $r3 = new org.apache.commons.math3.stat.interval.WilsonScoreInterval;

        specialinvoke $r3.<org.apache.commons.math3.stat.interval.WilsonScoreInterval: void <init>()>();

        <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval WILSON_SCORE> = $r3;

        return;
    }
    private void <init>()
    {
        org.apache.commons.math3.stat.interval.IntervalUtils r0;

        r0 := @this: org.apache.commons.math3.stat.interval.IntervalUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void checkParameters(int, int, double)
    {
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r5;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        byte $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r6;
        java.lang.Double $r7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        if $i0 > 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_TRIALS>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        if $i1 >= 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_SUCCESSES>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r3;

     label2:
        if $i1 <= $i0 goto label3;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r1, $r2, $r5, 1);

        throw $r4;

     label3:
        $b2 = $d0 cmpg 0.0;

        if $b2 <= 0 goto label4;

        $b2 = $d0 cmpl 1.0;

        if $b2 < 0 goto label5;

     label4:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_CONFIDENCE_LEVEL>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r7, $r2, $r5);

        throw $r6;

     label5:
        return;
    }
    public static org.apache.commons.math3.stat.interval.ConfidenceInterval getAgrestiCoullInterval(int, int, double)
    {
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r0;
        org.apache.commons.math3.stat.interval.BinomialConfidenceInterval $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval AGRESTI_COULL>;

        $r0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.interval.BinomialConfidenceInterval: org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int,int,double)>($i0, $i1, $d0);

        return $r0;
    }
    public static org.apache.commons.math3.stat.interval.ConfidenceInterval getClopperPearsonInterval(int, int, double)
    {
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r0;
        org.apache.commons.math3.stat.interval.BinomialConfidenceInterval $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval CLOPPER_PEARSON>;

        $r0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.interval.BinomialConfidenceInterval: org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int,int,double)>($i0, $i1, $d0);

        return $r0;
    }
    public static org.apache.commons.math3.stat.interval.ConfidenceInterval getNormalApproximationInterval(int, int, double)
    {
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r0;
        org.apache.commons.math3.stat.interval.BinomialConfidenceInterval $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval NORMAL_APPROXIMATION>;

        $r0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.interval.BinomialConfidenceInterval: org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int,int,double)>($i0, $i1, $d0);

        return $r0;
    }
    public static org.apache.commons.math3.stat.interval.ConfidenceInterval getWilsonScoreInterval(int, int, double)
    {
        int $i0, $i1;
        double $d0;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r0;
        org.apache.commons.math3.stat.interval.BinomialConfidenceInterval $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $d0 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.interval.IntervalUtils: org.apache.commons.math3.stat.interval.BinomialConfidenceInterval WILSON_SCORE>;

        $r0 = interfaceinvoke $r1.<org.apache.commons.math3.stat.interval.BinomialConfidenceInterval: org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int,int,double)>($i0, $i1, $d0);

        return $r0;
    }
