org.apache.commons.math3.stat.regression.MillerUpdatingRegression extends java.lang.Object implements org.apache.commons.math3.stat.regression.UpdatingMultipleLinearRegression
private final double[] d
private final double epsilon
private boolean hasIntercept
private final boolean[] lindep
private long nobs
private final int nvars
private final double[] r
private final double[] rhs
private final double[] rss
private boolean rss_set
private double sserr
private double sumsqy
private double sumy
private final double[] tol
private boolean tol_set
private final int[] vorder
private final double[] work_sing
private final double[] work_tolset
private final double[] x_sing
    private void <init>()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void <init>(int,boolean,double)>(-1, 0, #NaN);

        return;
    }
    public void <init>(int, boolean) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void <init>(int,boolean,double)>($i0, $z0, $d0);

        return;
    }
    public void <init>(int, boolean, double) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, $i1;
        boolean $z0;
        double $d0;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Object[] $r3;
        double[] $r4;
        int[] $r5;
        boolean[] $r6;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs> = 0L;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean rss_set> = 0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean tol_set> = 0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy> = 0.0;

        if $i0 >= 1 goto label1;

        $r1 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_REGRESSORS>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r3);

        throw $r1;

     label1:
        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars> = $i0;

     label2:
        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept> = $z0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs> = 0L;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i1 = $i1 + -1;

        $i0 = $i0 * $i1;

        $i0 = $i0 / 2;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r5 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder> = $r5;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] x_sing> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_sing> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset> = $r4;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r6 = newarray (boolean)[$i0];

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep> = $r6;

        $i0 = 0;

     label3:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 >= $i1 goto label5;

        $r5 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $r5[$i0] = $i0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars> = $i0;

        goto label2;

     label5:
        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label6;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon> = $d0;

        return;

     label6:
        $d0 = neg $d0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon> = $d0;

        return;
    }
    private double[] cov(int)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, i4, i5, i6, i7, $i8, i9;
        double[] r1, r3, $r4;
        double d0, d1, $d2, $d3;
        long $l1, $l2;
        byte $b3;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $l2 = (long) $i0;

        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label01;

        return null;

     label01:
        d1 = 0.0;

        i4 = 0;

     label02:
        if i4 >= $i0 goto label04;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i4];

        if $z0 != 0 goto label03;

        d1 = d1 + 1.0;

     label03:
        i4 = i4 + 1;

        goto label02;

     label04:
        r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        i4 = $i0 + -1;

        d0 = r1[i4];

        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $d2 = (double) $l1;

        d1 = $d2 - d1;

        d0 = d0 / d1;

        i4 = $i0 + -1;

        i4 = i4 * $i0;

        i4 = i4 / 2;

        r1 = newarray (double)[i4];

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void inverse(double[],int)>(r1, $i0);

        i4 = $i0 + 1;

        i4 = i4 * $i0;

        i4 = i4 / 2;

        r3 = newarray (double)[i4];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, #NaN);

        i4 = 0;

        i5 = 0;

     label05:
        if i5 >= $i0 goto label15;

        i6 = i4;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i5];

        if $z0 != 0 goto label14;

        i7 = i5;

     label06:
        if i7 >= $i0 goto label14;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i7];

        if $z0 != 0 goto label13;

        $i8 = i4 + i7;

        $i8 = $i8 - i5;

        if i5 != i7 goto label10;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d1 = $r4[i7];

        d1 = 1.0 / d1;

     label07:
        i9 = i7 + 1;

     label08:
        if i9 >= $i0 goto label11;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i9];

        if $z0 != 0 goto label09;

        $d2 = r1[$i8];

        $d3 = r1[i6];

        $d2 = $d2 * $d3;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d3 = $r4[i9];

        $d2 = $d2 / $d3;

        d1 = d1 + $d2;

     label09:
        $i8 = $i8 + 1;

        i6 = i6 + 1;

        i9 = i9 + 1;

        goto label08;

     label10:
        i9 = $i8 + -1;

        d1 = r1[i9];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d2 = $r4[i7];

        d1 = d1 / $d2;

        goto label07;

     label11:
        $i8 = i7 + 1;

        $i8 = $i8 * i7;

        $i8 = $i8 / 2;

        $i8 = $i8 + i5;

        d1 = d1 * d0;

        r3[$i8] = d1;

     label12:
        i7 = i7 + 1;

        goto label06;

     label13:
        $i8 = $i0 - i7;

        $i8 = $i8 + -1;

        i6 = i6 + $i8;

        goto label12;

     label14:
        i6 = $i0 - i5;

        i6 = i6 + -1;

        i4 = i4 + i6;

        i5 = i5 + 1;

        goto label05;

     label15:
        return r3;
    }
    private void include(double[], double, double)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[] $r1, $r2, $r3;
        double $d0, $d1, d2, d3, d4, d5, d6, d7, $d8, $d9;
        int i0, i1, $i2, $i4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        i0 = 0;

        d7 = $d0;

        $d0 = $d1;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean rss_set> = 0;

        d5 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy>;

        d5 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d1, d5);

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy> = d5;

        d5 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy>;

        $d1 = $d1 * $d1;

        $d1 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>(d5, $d1);

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy> = $d1;

        i1 = 0;

     label01:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label12;

        $b3 = d7 cmpl 0.0;

        if $b3 != 0 goto label02;

        return;

     label02:
        d6 = $r1[i1];

        $b3 = d6 cmpl 0.0;

        if $b3 != 0 goto label04;

        $i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i2 = $i2 - i1;

        $i2 = $i2 + -1;

        i0 = i0 + $i2;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d3 = $r2[i1];

        d5 = d7 * d6;

        d2 = d7;

        $b3 = d3 cmpl 0.0;

        if $b3 == 0 goto label08;

        $d1 = d5 * d6;

        $d8 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>(d3, $d1);

        $d1 = $d8;

        d4 = d5 * d6;

        d4 = d4 / d3;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $d9 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $b3 = d4 cmpl $d9;

        if $b3 <= 0 goto label05;

        d7 = d3 * d7;

        d7 = d7 / $d8;

     label05:
        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r2[i1] = $d1;

        $i2 = i1 + 1;

     label06:
        $i4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i2 >= $i4 goto label10;

        $d8 = $r1[$i2];

        d4 = neg d6;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d9 = $r2[i0];

        d4 = d4 * $d9;

        d4 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d8, d4);

        $r1[$i2] = d4;

        $b3 = d3 cmpl 0.0;

        if $b3 == 0 goto label09;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d4 = $r3[i0];

        d4 = d4 * d3;

        $d9 = d2 * d6;

        $d8 = $d9 * $d8;

        $d8 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>(d4, $d8);

        $d8 = $d8 / $d1;

        $r2[i0] = $d8;

     label07:
        i0 = i0 + 1;

        $i2 = $i2 + 1;

        goto label06;

     label08:
        $d1 = d5 * d6;

        d7 = 0.0;

        goto label05;

     label09:
        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d8 = $d8 / d6;

        $r2[i0] = $d8;

        goto label07;

     label10:
        d2 = $d0;

        $d8 = neg d6;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d4 = $r2[i1];

        $d8 = $d8 * d4;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d0, $d8);

        $b3 = d3 cmpl 0.0;

        if $b3 == 0 goto label11;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d6 = $r3[i1];

        d3 = d6 * d3;

        d5 = d5 * d2;

        d5 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>(d3, d5);

        $d1 = d5 / $d1;

        $r2[i1] = $d1;

        goto label03;

     label11:
        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d1 = d2 / d6;

        $r2[i1] = $d1;

        goto label03;

     label12:
        $d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        d7 = d7 * $d0;

        $d0 = d7 * $d0;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d1, $d0);

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr> = $d0;

        return;
    }
    private void inverse(double[], int)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[] $r1, $r3;
        int $i0, i1, $i2, $i3, i4, $i5, i6, i7, $i8;
        double $d0, d1, $d2;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i3 = $i0 + -1;

        $i3 = $i3 * $i0;

        $i3 = $i3 / 2;

        $i3 = $i3 + -1;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, #NaN);

        i4 = $i0 + -1;

     label1:
        if i4 <= 0 goto label8;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i4];

        if $z0 != 0 goto label6;

        i1 = i4 + -1;

        $i5 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i2 = $i5 + $i2;

        $i2 = $i2 - i4;

        i1 = i1 * $i2;

        i1 = i1 / 2;

        $i2 = $i0;

     label2:
        if $i2 <= i4 goto label7;

        $i5 = i1;

        i6 = $i3;

        d1 = 0.0;

        i7 = i4;

     label3:
        $i8 = $i2 + -1;

        if i7 >= $i8 goto label5;

        $i8 = $i0 - i7;

        $i8 = $i8 + -1;

        i6 = i6 + $i8;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r2[i7];

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d0 = $r3[$i5];

        $d2 = neg $d0;

        $d0 = $r1[i6];

        $d0 = $d2 * $d0;

        d1 = d1 + $d0;

     label4:
        $i5 = $i5 + 1;

        i7 = i7 + 1;

        goto label3;

     label5:
        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d0 = $r3[$i5];

        d1 = d1 - $d0;

        $r1[$i3] = d1;

        $i3 = $i3 + -1;

        $i2 = $i2 + -1;

        goto label2;

     label6:
        i1 = $i0 - i4;

        $i3 = $i3 - i1;

     label7:
        i4 = i4 + -1;

        goto label1;

     label8:
        return;
    }
    private double[] regcf(int) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, $i1, $i3, $i4;
        double[] r1, $r6;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        boolean $z0;
        double $d0, $d1, $d2;
        byte $b2;
        boolean[] $r7;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        if $i0 >= 1 goto label01;

        $r2 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_REGRESSORS>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label01:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 <= $i1 goto label02;

        $r2 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_REGRESSORS>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label02:
        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean tol_set>;

        if $z0 != 0 goto label03;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void tolset()>();

     label03:
        r1 = newarray (double)[$i0];

        $z0 = 0;

        $i1 = $i0 + -1;

     label04:
        if $i1 <= -1 goto label08;

        $r6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d0 = $r6[$i1];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $d1 = $r6[$i1];

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label06;

        r1[$i1] = 0.0;

        $r6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r6[$i1] = 0.0;

        $z0 = 1;

     label05:
        $i1 = $i1 + -1;

        goto label04;

     label06:
        $r6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d0 = $r6[$i1];

        r1[$i1] = $d0;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i3 = $i3 + $i4;

        $i3 = $i3 - $i1;

        $i3 = $i3 + -1;

        $i3 = $i3 * $i1;

        $i3 = $i3 / 2;

        $i4 = $i1 + 1;

     label07:
        if $i4 >= $i0 goto label05;

        $d0 = r1[$i1];

        $r6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d1 = $r6[$i3];

        $d1 = neg $d1;

        $d2 = r1[$i4];

        $d1 = $d1 * $d2;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d0, $d1);

        r1[$i1] = $d0;

        $i3 = $i3 + 1;

        $i4 = $i4 + 1;

        goto label07;

     label08:
        if $z0 == 0 goto label11;

        $i1 = 0;

     label09:
        if $i1 >= $i0 goto label11;

        $r7 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r7[$i1];

        if $z0 == 0 goto label10;

        r1[$i1] = #NaN;

     label10:
        $i1 = $i1 + 1;

        goto label09;

     label11:
        return r1;
    }
    private int reorderRegressors(int[], int)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int[] $r1, $r2;
        int $i0, i1, $i2, $i3, i4, $i5;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i2 = lengthof $r1;

        if $i2 < 1 goto label1;

        $i2 = lengthof $r1;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i3 = $i3 + 1;

        $i3 = $i3 - $i0;

        if $i2 <= $i3 goto label2;

     label1:
        return -1;

     label2:
        $i2 = $i0;

        $i3 = $i0;

     label3:
        i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i3 >= i1 goto label7;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        i1 = $r2[$i3];

        i4 = 0;

     label4:
        $i5 = lengthof $r1;

        if i4 >= $i5 goto label5;

        $i5 = $r1[i4];

        if i1 != $i5 goto label6;

        if $i3 <= $i2 goto label6;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void vmove(int,int)>($i3, $i2);

        $i2 = $i2 + 1;

        i1 = lengthof $r1;

        i1 = i1 + $i0;

        if $i2 >= i1 goto label7;

     label5:
        $i3 = $i3 + 1;

        goto label3;

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        return 0;
    }
    private void singcheck()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double d0, d1, $d2;
        int i0, $i1, i2, $i3;
        double[] $r1, $r2;
        byte $b4;
        boolean[] $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        i0 = 0;

     label01:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i0 >= $i1 goto label02;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_sing>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d0 = $r2[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $r1[i0] = d0;

        i0 = i0 + 1;

        goto label01;

     label02:
        i0 = 0;

     label03:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i0 >= $i1 goto label11;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        d0 = $r1[i0];

        $i1 = i0 + -1;

        i2 = 0;

     label04:
        $i3 = i0 + -1;

        if i2 >= $i3 goto label06;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d1 = $r1[$i1];

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_sing>;

        $d2 = $r1[i2];

        d1 = d1 * $d2;

        $b4 = d1 cmpg d0;

        if $b4 >= 0 goto label05;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r1[$i1] = 0.0;

     label05:
        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i3 = $i3 - i2;

        $i3 = $i3 + -2;

        $i1 = $i1 + $i3;

        i2 = i2 + 1;

        goto label04;

     label06:
        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $r3[i0] = 0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_sing>;

        d1 = $r1[i0];

        $b4 = d1 cmpg d0;

        if $b4 >= 0 goto label09;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $r3[i0] = 1;

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i1 = $i1 + -1;

        if i0 >= $i1 goto label10;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] x_sing>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i1 = $i1 + i2;

        $i1 = $i1 - i0;

        $i1 = $i1 + -1;

        $i1 = $i1 * i0;

        $i1 = $i1 / 2;

        i2 = i0 + 1;

     label07:
        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i2 >= $i3 goto label08;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] x_sing>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d0 = $r2[$i1];

        $r1[i2] = d0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r1[$i1] = 0.0;

        i2 = i2 + 1;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d1 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d0 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r1[i0] = 0.0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r1[i0] = 0.0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] x_sing>;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void include(double[],double,double)>($r1, d0, d1);

     label09:
        i0 = i0 + 1;

        goto label03;

     label10:
        d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d1 = $r1[i0];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r1[i0];

        d1 = d1 * $d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r1[i0];

        d1 = d1 * $d2;

        d0 = d0 + d1;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr> = d0;

        goto label09;

     label11:
        return;
    }
    private double smartAdd(double, double)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double $d0, d1, $d2, $d3, $d4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b0 = $d2 cmpl $d3;

        if $b0 <= 0 goto label1;

        $d4 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d2 = $d2 * $d4;

        $b0 = $d3 cmpl $d2;

        if $b0 <= 0 goto label3;

        d1 = d1 + $d0;

        return d1;

     label1:
        $d4 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d3 = $d3 * $d4;

        $b0 = $d2 cmpl $d3;

        if $b0 <= 0 goto label2;

        d1 = d1 + $d0;

        return d1;

     label2:
        return $d0;

     label3:
        return d1;
    }
    private void ss()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double d0, $d1, $d2;
        double[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i0 = $i0 + -1;

        $d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $r1[$i0] = $d1;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i0 = $i0 + -1;

     label1:
        if $i0 <= 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d1 = $r1[$i0];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r1[$i0];

        $d1 = $d1 * $d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r1[$i0];

        $d1 = $d1 * $d2;

        d0 = d0 + $d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        $i1 = $i0 + -1;

        $r1[$i1] = d0;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean rss_set> = 1;

        return;
    }
    private void tolset()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double d0, $d1, $d2, $d3;
        int i0, $i1, i2, $i3;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d1 = $r2[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset>;

        $d1 = $r2[0];

        $d1 = $d1 * d0;

        $r1[0] = $d1;

        i0 = 1;

     label3:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i0 >= $i1 goto label6;

        $i1 = i0 + -1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset>;

        $d1 = $r1[i0];

        i2 = 0;

     label4:
        if i2 >= i0 goto label5;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d2 = $r1[$i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset>;

        $d3 = $r1[i2];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i3 = $i3 - i2;

        $i3 = $i3 + -2;

        $i1 = $i1 + $i3;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $d1 = d0 * $d1;

        $r1[i0] = $d1;

        i0 = i0 + 1;

        goto label3;

     label6:
        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean tol_set> = 1;

        return;
    }
    private void vmove(int, int)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, $i1, i2, $i3, i4, $i6, i7, $i9;
        double d0, d1, d2, d3, $d4, $d5;
        boolean z0, $z1;
        byte b5, $b8;
        double[] $r1, $r2;
        int[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        z0 = 0;

        if $i0 != $i1 goto label01;

        return;

     label01:
        $z1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean rss_set>;

        if $z1 != 0 goto label02;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void ss()>();

     label02:
        if $i0 >= $i1 goto label09;

        i4 = $i0;

        b5 = 1;

        $i0 = $i1 - $i0;

     label03:
        $i1 = i4;

        i4 = 0;

     label04:
        if i4 >= $i0 goto label20;

        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i2 = i2 + $i6;

        i2 = i2 - $i1;

        i2 = i2 + -1;

        i2 = i2 * $i1;

        $i6 = i2 / 2;

        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i2 = i2 + $i6;

        i2 = i2 - $i1;

        i7 = i2 + -1;

        i2 = $i1 + 1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d0 = $r1[i2];

        $d4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        $b8 = d1 cmpl $d4;

        if $b8 > 0 goto label05;

        $d4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        $b8 = d0 cmpl $d4;

        if $b8 <= 0 goto label17;

     label05:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r1[$i6];

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        d3 = d3 * d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        d2 = $r1[i2];

        $b8 = d3 cmpg d2;

        if $b8 >= 0 goto label06;

        $d4 = 0.0;

     label06:
        d3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        $b8 = d1 cmpg d3;

        if $b8 < 0 goto label07;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        d2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        $b8 = d3 cmpg d2;

        if $b8 >= 0 goto label13;

     label07:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r1[$i1] = d0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r1[i2] = d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r1[$i6] = 0.0;

        $i3 = $i1 + 2;

     label08:
        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i3 >= $i9 goto label10;

        $i6 = $i6 + 1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r1[$i6];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d3 = $r2[i7];

        $r1[$i6] = d3;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r1[i7] = $d4;

        i7 = i7 + 1;

        $i3 = $i3 + 1;

        goto label08;

     label09:
        i4 = $i0 + -1;

        b5 = -1;

        $i0 = $i0 - $i1;

        goto label03;

     label10:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d4 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d3 = $r2[i2];

        $r1[$i1] = d3;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r1[i2] = $d4;

        z0 = 1;

     label11:
        if z0 != 0 goto label17;

        d3 = d1 * $d4;

        d3 = d3 * $d4;

        d2 = d0 + d3;

        d0 = d0 / d2;

        d3 = $d4 * d1;

        d3 = d3 / d2;

        d1 = d1 * d0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r1[$i1] = d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $r1[i2] = d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r1[$i6] = d3;

        $i3 = $i1 + 2;

     label12:
        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i3 >= $i9 goto label16;

        $i6 = $i6 + 1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d1 = $r1[$i6];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d2 = $r2[i7];

        d2 = d2 * d0;

        $d5 = d3 * d1;

        d2 = d2 + $d5;

        $r1[$i6] = d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d2 = $r2[i7];

        d2 = d2 * $d4;

        d1 = d1 - d2;

        $r1[i7] = d1;

        i7 = i7 + 1;

        $i3 = $i3 + 1;

        goto label12;

     label13:
        d3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double epsilon>;

        $b8 = d0 cmpg d3;

        if $b8 >= 0 goto label11;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d3 = d1 * $d4;

        d3 = d3 * $d4;

        $r1[$i1] = d3;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d3 = 1.0 / $d4;

        $r1[$i6] = d3;

        $i3 = $i6 + 1;

     label14:
        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i9 = $i9 + $i6;

        $i9 = $i9 - $i1;

        $i9 = $i9 + -1;

        if $i3 >= $i9 goto label15;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        d3 = $r1[$i3];

        d3 = d3 / $d4;

        $r1[$i3] = d3;

        $i3 = $i3 + 1;

        goto label14;

     label15:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d3 = $r1[$i1];

        d3 = d3 / $d4;

        $r1[$i1] = d3;

        z0 = 1;

        goto label11;

     label16:
        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d1 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d2 = $r2[i2];

        d0 = d2 * d0;

        d3 = d3 * d1;

        d0 = d0 + d3;

        $r1[$i1] = d0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d0 = $r2[i2];

        $d4 = d0 * $d4;

        $d4 = d1 - $d4;

        $r1[i2] = $d4;

     label17:
        if $i1 <= 0 goto label19;

        $i6 = $i1;

        i7 = 0;

     label18:
        if i7 >= $i1 goto label19;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r1[$i6];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $i3 = $i6 + -1;

        d1 = $r2[$i3];

        $r1[$i6] = d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $i3 = $i6 + -1;

        $r1[$i3] = $d4;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i3 = $i3 - i7;

        $i3 = $i3 + -2;

        $i6 = $i6 + $i3;

        i7 = i7 + 1;

        goto label18;

     label19:
        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $i6 = $r3[$i1];

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        i7 = $r4[i2];

        $r3[$i1] = i7;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $r3[i2] = $i6;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $d4 = $r1[$i1];

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        d1 = $r2[i2];

        $r1[$i1] = d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $r1[i2] = $d4;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        $d4 = $r2[i2];

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        d1 = $r2[i2];

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d0 = $r2[i2];

        d1 = d1 * d0;

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        d0 = $r2[i2];

        d1 = d1 * d0;

        $d4 = $d4 + d1;

        $r1[$i1] = $d4;

        $i1 = $i1 + b5;

        i4 = i4 + 1;

        goto label04;

     label20:
        return;
    }
    public void addObservation(double[], double) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[] $r1, r6;
        double $d0;
        boolean $z0;
        int $i0, $i1;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        long $l2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: double[];

        $d0 := @parameter1: double;

        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        if $z0 != 0 goto label1;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 != $i1 goto label2;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        if $z0 == 0 goto label3;

        $i0 = lengthof $r1;

        $i0 = $i0 + 1;

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 == $i1 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION>;

        $r4 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r4);

        throw $r2;

     label3:
        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        if $z0 != 0 goto label5;

        $i0 = lengthof $r1;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>($r1, $i0);

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void include(double[],double,double)>($r1, 1.0, $d0);

     label4:
        $l2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $l2 = $l2 + 1L;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs> = $l2;

        return;

     label5:
        $i0 = lengthof $r1;

        $i0 = $i0 + 1;

        r6 = newarray (double)[$i0];

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r6, 1, $i0);

        r6[0] = 1.0;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void include(double[],double,double)>(r6, 1.0, $d0);

        goto label4;
    }
    public void addObservations(double[][], double[]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[][] $r1;
        double[] $r2, $r7;
        int $i0, $i1, $i2;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: double[][];

        $r2 := @parameter1: double[];

        $i0 = 0;

        if $r1 == null goto label01;

        if $r2 == null goto label01;

        $i1 = lengthof $r1;

        $i2 = lengthof $r2;

        if $i1 == $i2 goto label06;

     label01:
        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r5 = newarray (java.lang.Object)[2];

        if $r1 != null goto label04;

        $i1 = 0;

     label02:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        if $r2 != null goto label05;

     label03:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label04:
        $i1 = lengthof $r1;

        goto label02;

     label05:
        $i0 = lengthof $r2;

        goto label03;

     label06:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label07;

        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_DATA>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label07:
        $r7 = $r1[0];

        $i0 = lengthof $r7;

        $i0 = $i0 + 1;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label08;

        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r5 = newarray (java.lang.Object)[2];

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label08:
        $i0 = 0;

     label09:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label10;

        $r7 = $r1[$i0];

        $d0 = $r2[$i0];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void addObservation(double[],double)>($r7, $d0);

        $i0 = $i0 + 1;

        goto label09;

     label10:
        return;
    }
    public void clear()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[] $r1;
        boolean[] $r2;
        int i0, $i1;
        int[] $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rss>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_tolset>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] work_sing>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] x_sing>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        $r2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r2, 0);

        i0 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $r3[i0] = i0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs> = 0L;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean rss_set> = 0;

        r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean tol_set> = 0;

        return;
    }
    public double getDiagonalOfHatMatrix(double[])
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        double[] $r1, r2, r3;
        int $i0, $i1, i3, $i4;
        boolean $z0;
        double d0, $d1, $d2, $d3;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        r2 = newarray (double)[$i0];

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 <= $i1 goto label1;

        return #NaN;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        if $z0 == 0 goto label5;

        $i0 = lengthof $r1;

        $i0 = $i0 + 1;

        r3 = newarray (double)[$i0];

        r3[0] = 1.0;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 1, $i0);

     label2:
        d0 = 0.0;

        $i0 = 0;

     label3:
        $i1 = lengthof r3;

        if $i0 >= $i1 goto label9;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d1 = $r1[$i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] tol>;

        $d2 = $r1[$i0];

        $b2 = $d1 cmpg $d2;

        if $b2 >= 0 goto label6;

        r2[$i0] = 0.0;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        r3 = $r1;

        goto label2;

     label6:
        $i1 = $i0 + -1;

        $d1 = r3[$i0];

        i3 = 0;

     label7:
        if i3 >= $i0 goto label8;

        $d2 = r2[i3];

        $d2 = neg $d2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d3 = $r1[$i1];

        $d2 = $d2 * $d3;

        $d1 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>($d1, $d2);

        $i4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i4 = $i4 - i3;

        $i4 = $i4 + -2;

        $i1 = $i1 + $i4;

        i3 = i3 + 1;

        goto label7;

     label8:
        r2[$i0] = $d1;

        $d1 = $d1 * $d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d2 = $r1[$i0];

        $d1 = $d1 / $d2;

        d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double smartAdd(double,double)>(d0, $d1);

        goto label4;

     label9:
        return d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        l0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        return l0;
    }
    public int[] getOrderOfRegressors()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        return $r1;
    }
    public double[] getPartialCorrelations(int)
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, i1, i2, i3, i4, $i5, $i6, i8, $i9, i10, $i11;
        double[] r1, r2, r3, $r4;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b7;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        i4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i4 = i4 - $i0;

        i4 = i4 + 1;

        $i5 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i5 = $i5 - $i0;

        i4 = i4 * $i5;

        i4 = i4 / 2;

        r3 = newarray (double)[i4];

        i4 = neg $i0;

        $i5 = $i0 + 1;

        $i5 = neg $i5;

        i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i3 = i3 - $i0;

        r1 = newarray (double)[i3];

        i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i3 = i3 - $i0;

        i3 = i3 + -1;

        r2 = newarray (double)[i3];

        i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i3 = i3 - $i0;

        i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i1 = i1 - $i0;

        i1 = i1 + -1;

        i3 = i3 * i1;

        i3 = i3 / 2;

        if $i0 < -1 goto label01;

        i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 < i1 goto label02;

     label01:
        return null;

     label02:
        i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        i2 = i1 + -1;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        i1 = lengthof $r4;

        $i6 = i2 - $i0;

        i2 = i2 - $i0;

        i2 = i2 + 1;

        $i6 = $i6 * i2;

        $i6 = $i6 / 2;

        i1 = i1 - $i6;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d0 = $r4[$i0];

        $b7 = $d0 cmpl 0.0;

        if $b7 <= 0 goto label03;

        $i6 = $i0 + i4;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d0 = $r4[$i0];

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 1.0 / $d0;

        r1[$i6] = $d0;

     label03:
        $i6 = $i0 + 1;

     label04:
        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i6 >= i2 goto label09;

        i2 = i1 + $i6;

        i2 = i2 + -1;

        i2 = i2 - $i0;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d0 = $r4[$i6];

        i8 = $i0;

     label05:
        if i8 >= $i6 goto label06;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d1 = $r4[i8];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d2 = $r4[i2];

        $d1 = $d1 * $d2;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d2 = $r4[i2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i9 = $i9 - i8;

        $i9 = $i9 + -2;

        i2 = i2 + $i9;

        i8 = i8 + 1;

        goto label05;

     label06:
        $b7 = $d0 cmpl 0.0;

        if $b7 <= 0 goto label08;

        i2 = $i6 + i4;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 1.0 / $d0;

        r1[i2] = $d0;

     label07:
        $i6 = $i6 + 1;

        goto label04;

     label08:
        i2 = $i6 + i4;

        r1[i2] = 0.0;

        goto label07;

     label09:
        $d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $i6 = $i0;

     label10:
        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i6 >= i2 goto label11;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d1 = $r4[$i6];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r4[$i6];

        $d1 = $d1 * $d2;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d2 = $r4[$i6];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $i6 = $i6 + 1;

        goto label10;

     label11:
        $b7 = $d0 cmpl 0.0;

        if $b7 <= 0 goto label12;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $d0 = 1.0 / $d0;

     label12:
        $i6 = $i0;

     label13:
        i2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i6 >= i2 goto label20;

        $d1 = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r2, 0.0);

        i2 = i1 + $i6;

        i2 = i2 - $i0;

        i2 = i2 + -1;

        i8 = $i0;

     label14:
        if i8 >= $i6 goto label17;

        $i9 = i2 + 1;

        i10 = $i6 + 1;

     label15:
        $i11 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i10 >= $i11 goto label16;

        $i11 = i10 + $i5;

        $d2 = r2[$i11];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d3 = $r4[i8];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r4[i2];

        $d3 = $d3 * $d4;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r4[$i9];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        r2[$i11] = $d2;

        $i9 = $i9 + 1;

        i10 = i10 + 1;

        goto label15;

     label16:
        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d2 = $r4[i8];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d3 = $r4[i2];

        $d2 = $d2 * $d3;

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d3 = $r4[i8];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $i9 = $i9 - i8;

        $i9 = $i9 + -2;

        i2 = i2 + $i9;

        i8 = i8 + 1;

        goto label14;

     label17:
        i2 = i2 + 1;

        i8 = $i6 + 1;

     label18:
        $i9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i8 >= $i9 goto label19;

        $i9 = i8 + $i5;

        $d2 = r2[$i9];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d3 = $r4[$i6];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] r>;

        $d4 = $r4[i2];

        $d3 = $d3 * $d4;

        $d2 = $d2 + $d3;

        r2[$i9] = $d2;

        i2 = i2 + 1;

        $i9 = i8 + -1;

        $i9 = $i9 - $i0;

        i10 = i8 - $i0;

        $i9 = $i9 * i10;

        $i9 = $i9 / 2;

        $i9 = $i9 + $i6;

        $i9 = $i9 - $i0;

        i10 = i8 + $i5;

        $d2 = r2[i10];

        i10 = $i6 + i4;

        $d3 = r1[i10];

        $d2 = $d2 * $d3;

        i10 = i8 + i4;

        $d3 = r1[i10];

        $d2 = $d2 * $d3;

        r3[$i9] = $d2;

        i8 = i8 + 1;

        goto label18;

     label19:
        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] d>;

        $d2 = $r4[$i6];

        $r4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] rhs>;

        $d3 = $r4[$i6];

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        i2 = $i6 + i4;

        i2 = i2 + i3;

        i8 = $i6 + i4;

        $d2 = r1[i8];

        $d1 = $d2 * $d1;

        $d1 = $d1 * $d0;

        r3[i2] = $d1;

        $i6 = $i6 + 1;

        goto label13;

     label20:
        return r3;
    }
    public boolean hasIntercept()
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        return z0;
    }
    public org.apache.commons.math3.stat.regression.RegressionResults regress() throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        org.apache.commons.math3.stat.regression.RegressionResults $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: org.apache.commons.math3.stat.regression.RegressionResults regress(int)>($i0);

        return $r1;
    }
    public org.apache.commons.math3.stat.regression.RegressionResults regress(int) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int $i0, i1, i3, $i6, i7, $i8, $i9;
        org.apache.commons.math3.stat.regression.RegressionResults $r1;
        double[][] $r2;
        long $l2, $l4;
        byte $b5;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Object[] $r5;
        java.lang.Long $r6;
        java.lang.Integer $r7;
        double[] $r8, $r9, r12, $r13;
        boolean[] $r10;
        boolean $z0;
        int[] $r11, $r14;
        double $d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $i0 := @parameter0: int;

        $l2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $l4 = (long) $i0;

        $b5 = $l2 cmp $l4;

        if $b5 > 0 goto label01;

        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r5 = newarray (java.lang.Object)[2];

        $l2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r7;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label01:
        $i6 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i0 <= $i6 goto label02;

        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_REGRESSORS>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r7;

        $i0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r7;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r5);

        throw $r3;

     label02:
        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void tolset()>();

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void singcheck()>();

        $r8 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] regcf(int)>($i0);

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void ss()>();

        $r9 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] cov(int)>($i0);

        $i6 = 0;

        i7 = 0;

     label03:
        $r10 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        i1 = lengthof $r10;

        if i7 >= i1 goto label05;

        $r10 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r10[i7];

        if $z0 != 0 goto label04;

        $i6 = $i6 + 1;

     label04:
        i7 = i7 + 1;

        goto label03;

     label05:
        $z0 = 0;

        i7 = 0;

     label06:
        if i7 >= $i0 goto label07;

        $r11 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        i1 = $r11[i7];

        if i1 == i7 goto label08;

        $z0 = 1;

     label07:
        if $z0 != 0 goto label09;

        $r1 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r2 = newarray (double[])[1];

        $r2[0] = $r9;

        $l2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy>;

        d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        specialinvoke $r1.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r8, $r2, 1, $l2, $i6, $d0, d1, $d2, $z0, 0);

        return $r1;

     label08:
        i7 = i7 + 1;

        goto label06;

     label09:
        i7 = lengthof $r8;

        r12 = newarray (double)[i7];

        i7 = lengthof $r9;

        $r13 = newarray (double)[i7];

        i7 = lengthof $r8;

        $r11 = newarray (int)[i7];

        i7 = 0;

     label10:
        i1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if i7 >= i1 goto label14;

        i1 = 0;

     label11:
        if i1 >= $i0 goto label13;

        $r14 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $i8 = $r14[i1];

        if $i8 != i7 goto label12;

        $d0 = $r8[i1];

        r12[i7] = $d0;

        $r11[i7] = i1;

     label12:
        i1 = i1 + 1;

        goto label11;

     label13:
        i7 = i7 + 1;

        goto label10;

     label14:
        $i0 = 0;

        i7 = 0;

     label15:
        i1 = lengthof $r8;

        if i7 >= i1 goto label20;

        i1 = $r11[i7];

        $i8 = 0;

     label16:
        if $i8 > i7 goto label19;

        i3 = $r11[$i8];

        if i1 <= i3 goto label18;

        $i9 = i1 + 1;

        $i9 = $i9 * i1;

        $i9 = $i9 / 2;

        i3 = $i9 + i3;

     label17:
        $d0 = $r9[i3];

        $r13[$i0] = $d0;

        $i8 = $i8 + 1;

        $i0 = $i0 + 1;

        goto label16;

     label18:
        $i9 = i3 + 1;

        i3 = $i9 * i3;

        i3 = i3 / 2;

        i3 = i3 + i1;

        goto label17;

     label19:
        i7 = i7 + 1;

        goto label15;

     label20:
        $r1 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r2 = newarray (double[])[1];

        $r2[0] = $r13;

        $l2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy>;

        d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        specialinvoke $r1.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r12, $r2, 1, $l2, $i6, $d0, d1, $d2, $z0, 0);

        return $r1;
    }
    public org.apache.commons.math3.stat.regression.RegressionResults regress(int[]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.MillerUpdatingRegression r0;
        int[] $r1, $r9, r10;
        int i0, i2, $i3, $i4, $i7, $i8, $i9;
        org.apache.commons.math3.stat.regression.RegressionResults $r2;
        double[][] $r3;
        long $l1, $l5;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        byte $b6;
        java.lang.Long $r8;
        double[] $r11, $r12, r14, $r15;
        boolean[] $r13;
        boolean $z0;
        double $d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.regression.MillerUpdatingRegression;

        $r1 := @parameter0: int[];

        $i3 = lengthof $r1;

        $i4 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i3 <= $i4 goto label01;

        $r4 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_REGRESSORS>;

        $r6 = newarray (java.lang.Object)[2];

        $i3 = lengthof $r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[0] = $r7;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label01:
        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $l5 = (long) $i3;

        $b6 = $l1 cmp $l5;

        if $b6 > 0 goto label02;

        $r4 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r6 = newarray (java.lang.Object)[2];

        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r6[0] = $r8;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label02:
        staticinvoke <java.util.Arrays: void sort(int[])>($r1);

        $i3 = 0;

        $i4 = 0;

     label03:
        $i7 = lengthof $r1;

        if $i4 >= $i7 goto label06;

        $i7 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i4 < $i7 goto label04;

        $r4 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX_LARGER_THAN_MAX>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[0] = $r7;

        $i3 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r6);

        throw $r4;

     label04:
        if $i4 <= 0 goto label05;

        $i7 = $r1[$i4];

        i0 = $i4 + -1;

        i0 = $r1[i0];

        if $i7 != i0 goto label05;

        $r1[$i4] = -1;

        $i3 = $i3 + 1;

     label05:
        $i4 = $i4 + 1;

        goto label03;

     label06:
        if $i3 <= 0 goto label09;

        $i4 = 0;

        $i7 = lengthof $r1;

        $i3 = $i7 - $i3;

        $r9 = newarray (int)[$i3];

        r10 = $r9;

        $i3 = 0;

     label07:
        $i7 = lengthof $r1;

        if $i3 >= $i7 goto label10;

        $i7 = $r1[$i3];

        if $i7 <= -1 goto label08;

        $i7 = $r1[$i3];

        $r9[$i4] = $i7;

        $i4 = $i4 + 1;

     label08:
        $i3 = $i3 + 1;

        goto label07;

     label09:
        r10 = $r1;

     label10:
        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int reorderRegressors(int[],int)>(r10, 0);

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void tolset()>();

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void singcheck()>();

        $i3 = lengthof r10;

        $r11 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] regcf(int)>($i3);

        specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: void ss()>();

        $i3 = lengthof r10;

        $r12 = specialinvoke r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double[] cov(int)>($i3);

        $i3 = 0;

        $i4 = 0;

     label11:
        $r13 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $i7 = lengthof $r13;

        if $i4 >= $i7 goto label13;

        $r13 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean[] lindep>;

        $z0 = $r13[$i4];

        if $z0 != 0 goto label12;

        $i3 = $i3 + 1;

     label12:
        $i4 = $i4 + 1;

        goto label11;

     label13:
        $z0 = 0;

        $i4 = 0;

     label14:
        $i7 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int nvars>;

        if $i4 >= $i7 goto label15;

        $r1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        $i7 = $r1[$i4];

        i0 = r10[$i4];

        if $i7 == i0 goto label16;

        $z0 = 1;

     label15:
        if $z0 != 0 goto label17;

        $r2 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r3 = newarray (double[])[1];

        $r3[0] = $r12;

        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy>;

        d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r11, $r3, 1, $l1, $i3, $d0, d1, $d2, $z0, 0);

        return $r2;

     label16:
        $i4 = $i4 + 1;

        goto label14;

     label17:
        $i4 = lengthof $r11;

        r14 = newarray (double)[$i4];

        $i4 = lengthof $r11;

        $r1 = newarray (int)[$i4];

        $i4 = 0;

     label18:
        $i7 = lengthof r10;

        if $i4 >= $i7 goto label22;

        $i7 = 0;

     label19:
        $r9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        i0 = lengthof $r9;

        if $i7 >= i0 goto label21;

        $r9 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: int[] vorder>;

        i0 = $r9[$i7];

        $i8 = r10[$i4];

        if i0 != $i8 goto label20;

        $d0 = $r11[$i7];

        r14[$i4] = $d0;

        $r1[$i4] = $i7;

     label20:
        $i7 = $i7 + 1;

        goto label19;

     label21:
        $i4 = $i4 + 1;

        goto label18;

     label22:
        $i4 = lengthof $r12;

        $r15 = newarray (double)[$i4];

        $i4 = 0;

        $i7 = 0;

     label23:
        i0 = lengthof $r11;

        if $i7 >= i0 goto label28;

        i0 = $r1[$i7];

        $i8 = 0;

     label24:
        if $i8 > $i7 goto label27;

        i2 = $r1[$i8];

        if i0 <= i2 goto label26;

        $i9 = i0 + 1;

        $i9 = $i9 * i0;

        $i9 = $i9 / 2;

        i2 = $i9 + i2;

     label25:
        $d0 = $r12[i2];

        $r15[$i4] = $d0;

        $i8 = $i8 + 1;

        $i4 = $i4 + 1;

        goto label24;

     label26:
        $i9 = i2 + 1;

        i2 = $i9 * i2;

        i2 = i2 / 2;

        i2 = i2 + i0;

        goto label25;

     label27:
        $i7 = $i7 + 1;

        goto label23;

     label28:
        $r2 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r3 = newarray (double[])[1];

        $r3[0] = $r15;

        $l1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: long nobs>;

        $d0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumy>;

        d1 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sumsqy>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: double sserr>;

        $z0 = r0.<org.apache.commons.math3.stat.regression.MillerUpdatingRegression: boolean hasIntercept>;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>(r14, $r3, 1, $l1, $i3, $d0, d1, $d2, $z0, 0);

        return $r2;
    }
