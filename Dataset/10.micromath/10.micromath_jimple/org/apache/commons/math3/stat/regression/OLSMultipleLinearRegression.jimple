org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression extends org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression
private org.apache.commons.math3.linear.QRDecomposition qr
private final double threshold
    public void <init>()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: void <init>(double)>(0.0);

        return;
    }
    public void <init>(double)
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr> = null;

        r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double threshold> = $d0;

        return;
    }
    public double calculateAdjustedRSquared()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        d0 = (double) $i0;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: boolean isNoIntercept()>();

        if $z0 == 0 goto label1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double calculateRSquared()>();

        $d1 = 1.0 - $d1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $d2 = (double) $i0;

        $d2 = d0 - $d2;

        d0 = d0 / $d2;

        d0 = $d1 * d0;

        d0 = 1.0 - d0;

        return d0;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double calculateResidualSumOfSquares()>();

        $d2 = d0 - 1.0;

        $d1 = $d1 * $d2;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double calculateTotalSumOfSquares()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $d3 = (double) $i0;

        d0 = d0 - $d3;

        d0 = $d2 * d0;

        d0 = $d1 / d0;

        d0 = 1.0 - d0;

        return d0;
    }
    protected org.apache.commons.math3.linear.RealVector calculateBeta()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.QRDecomposition $r1;
        org.apache.commons.math3.linear.DecompositionSolver $r2;
        org.apache.commons.math3.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector getY()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)>($r3);

        return $r3;
    }
    protected org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrix $r1, $r5;
        org.apache.commons.math3.linear.QRDecomposition $r2;
        org.apache.commons.math3.linear.LUDecomposition $r3;
        org.apache.commons.math3.linear.DecompositionSolver $r4;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $i1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr>;

        $r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix getR()>();

        $i0 = $i1 + -1;

        $i1 = $i1 + -1;

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, $i0, 0, $i1);

        $r3 = new org.apache.commons.math3.linear.LUDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r1 = interfaceinvoke $r4.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r5 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r1 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        return $r1;
    }
    public org.apache.commons.math3.linear.RealMatrix calculateHat()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1;
        org.apache.commons.math3.linear.QRDecomposition $r2;
        org.apache.commons.math3.linear.RealMatrix $r3, $r4;
        int $i0, $i1, i2, i3;
        double[][] $r5;
        double[] $r6;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r2 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix getQ()>();

        $r2 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.RealMatrix getR()>();

        $i0 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>($i1, $i1);

        $r5 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label6;

        i3 = 0;

     label2:
        if i3 >= $i1 goto label5;

        if i2 != i3 goto label4;

        if i2 >= $i0 goto label4;

        $r6 = $r5[i2];

        $r6[i3] = 1.0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r6 = $r5[i2];

        $r6[i3] = 0.0;

        goto label3;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r3 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r3 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r3);

        return $r3;
    }
    public double calculateRSquared()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double calculateResidualSumOfSquares()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double calculateTotalSumOfSquares()>();

        $d0 = $d0 / $d1;

        $d0 = 1.0 - $d0;

        return $d0;
    }
    public double calculateResidualSumOfSquares()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector calculateResiduals()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r1);

        return $d0;
    }
    public double calculateTotalSumOfSquares()
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        boolean $z0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] $r2;
        double $d0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: boolean isNoIntercept()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector getY()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double sumSq(double[])>($r2);

        return $d0;

     label1:
        $r3 = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void <init>()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealVector getY()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: double evaluate(double[])>($r2);

        return $d0;
    }
    public void newSampleData(double[], int, int)
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double[] $r1;
        int $i0, $i1;
        org.apache.commons.math3.linear.QRDecomposition $r2;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: void newSampleData(double[],int,int)>($r1, $i0, $i1);

        $r2 = new org.apache.commons.math3.linear.QRDecomposition;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $d0 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double threshold>;

        specialinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r3, $d0);

        r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr> = $r2;

        return;
    }
    public void newSampleData(double[], double[][]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double[] $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: void validateSampleData(double[][],double[])>($r2, $r1);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: void newYSampleData(double[])>($r1);

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: void newXSampleData(double[][])>($r2);

        return;
    }
    protected void newXSampleData(double[][])
    {
        org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression r0;
        double[][] $r1;
        org.apache.commons.math3.linear.QRDecomposition $r2;
        double $d0;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;

        $r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression: void newXSampleData(double[][])>($r1);

        $r2 = new org.apache.commons.math3.linear.QRDecomposition;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.RealMatrix getX()>();

        $d0 = r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: double threshold>;

        specialinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>($r3, $d0);

        r0.<org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math3.linear.QRDecomposition qr> = $r2;

        return;
    }
