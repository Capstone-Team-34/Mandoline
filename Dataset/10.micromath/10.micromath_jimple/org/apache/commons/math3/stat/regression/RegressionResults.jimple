org.apache.commons.math3.stat.regression.RegressionResults extends java.lang.Object implements java.io.Serializable
private static final int ADJRSQ_IDX
private static final int MSE_IDX
private static final int RSQ_IDX
private static final int SSE_IDX
private static final int SST_IDX
private static final long serialVersionUID
private final boolean containsConstant
private final double[] globalFitInfo
private final boolean isSymmetricVCD
private final long nobs
private final double[] parameters
private final int rank
private final double[][] varCovData
    private void <init>()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = null;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = null;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: int rank> = -1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs> = -1L;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant> = 0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD> = 0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo> = null;

        return;
    }
    public void <init>(double[], double[][], boolean, long, int, double, double, double, boolean, boolean)
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1, $r4;
        double[][] $r2, $r3;
        boolean $z0, $z1, $z2;
        long $l0, $l4;
        int $i1, $i2, $i3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 := @parameter0: double[];

        $r2 := @parameter1: double[][];

        $z0 := @parameter2: boolean;

        $l0 := @parameter3: long;

        $i1 := @parameter4: int;

        $d0 := @parameter5: double;

        $d2 := @parameter6: double;

        $d1 := @parameter7: double;

        $z1 := @parameter8: boolean;

        $z2 := @parameter9: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $z2 == 0 goto label2;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = $r1;

        $i2 = lengthof $r2;

        $r3 = newarray (double[])[$i2];

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = $r3;

        $i2 = 0;

     label1:
        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label3;

        $r3 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r1 = $r2[$i2];

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        $r3[$i2] = $r1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = $r1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = $r2;

     label3:
        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD> = $z0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs> = $l0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: int rank> = $i1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant> = $z1;

        $r1 = newarray (double)[5];

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo> = $r1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, #NaN);

        if $i1 <= 0 goto label5;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        if $z1 == 0 goto label4;

        $d0 = $d0 * $d0;

        $d3 = (double) $l0;

        $d0 = $d0 / $d3;

        $d2 = $d2 - $d0;

     label4:
        $r1[1] = $d2;

     label5:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r1[0] = $d1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r4[0];

        $l4 = (long) $i1;

        $l4 = $l0 - $l4;

        $d2 = (double) $l4;

        $d0 = $d0 / $d2;

        $r1[3] = $d0;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r4[0];

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d2 = $r4[1];

        $d0 = $d0 / $d2;

        $d0 = 1.0 - $d0;

        $r1[2] = $d0;

        if $z1 != 0 goto label6;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r4[2];

        $d0 = 1.0 - $d0;

        $d2 = (double) $l0;

        $l4 = (long) $i1;

        $l0 = $l0 - $l4;

        $d1 = (double) $l0;

        $d2 = $d2 / $d1;

        $d0 = $d0 * $d2;

        $d0 = 1.0 - $d0;

        $r1[4] = $d0;

        return;

     label6:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = (double) $l0;

        $d0 = $d0 - 1.0;

        $d0 = $d0 * $d1;

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d2 = $r4[1];

        $l4 = (long) $i1;

        $l0 = $l0 - $l4;

        $d1 = (double) $l0;

        $d2 = $d2 * $d1;

        $d0 = $d0 / $d2;

        $d0 = 1.0 - $d0;

        $r1[4] = $d0;

        return;
    }
    private double getVcvElement(int, int)
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int $i0, $i1, $i2;
        boolean $z0;
        double[][] $r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD>;

        if $z0 == 0 goto label5;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $i2 = lengthof $r1;

        if $i2 <= 1 goto label3;

        if $i0 != $i1 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[$i0];

        $d0 = $r2[$i0];

        return $d0;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[$i1];

        $i2 = lengthof $r2;

        if $i0 < $i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[$i0];

        $d0 = $r2[$i1];

        return $d0;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[$i1];

        $d0 = $r2[$i0];

        return $d0;

     label3:
        if $i0 <= $i1 goto label4;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[0];

        $i2 = $i0 + 1;

        $i0 = $i2 * $i0;

        $i0 = $i0 / 2;

        $i0 = $i0 + $i1;

        $d0 = $r2[$i0];

        return $d0;

     label4:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[0];

        $i2 = $i1 + 1;

        $i1 = $i2 * $i1;

        $i1 = $i1 / 2;

        $i0 = $i1 + $i0;

        $d0 = $r2[$i0];

        return $d0;

     label5:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[$i0];

        $d0 = $r2[$i1];

        return $d0;
    }
    public double getAdjustedRSquared()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[4];

        return $d0;
    }
    public double getCovarianceOfParameters(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int $i0, $i1, $i2;
        double[] $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if $i0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i2 = lengthof $r1;

        if $i0 < $i2 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        if $i1 < 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i2 = lengthof $r1;

        if $i1 < $i2 goto label5;

     label4:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label5:
        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>($i0, $i1);

        return $d0;
    }
    public double getErrorSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[0];

        return $d0;
    }
    public double getMeanSquareError()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[3];

        return $d0;
    }
    public long getN()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        l0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs>;

        return l0;
    }
    public int getNumberOfParameters()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        return $i0;
    }
    public double getParameterEstimate(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int $i0, $i1;
        double[] $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if $i0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $d0 = $r1[$i0];

        return $d0;
    }
    public double[] getParameterEstimates()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r1);

        return $r1;
    }
    public double getRSquared()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[2];

        return $d0;
    }
    public double getRegressionSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[1];

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d1 = $r1[0];

        $d0 = $d0 - $d1;

        return $d0;
    }
    public double getStdErrorOfEstimate(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int $i0, $i1;
        double[] $r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        double $d0;
        boolean $z0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if $i0 < 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>($i0, $i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label4;

        $b2 = $d0 cmpl 4.9E-324;

        if $b2 <= 0 goto label4;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d0;

     label4:
        return #NaN;
    }
    public double[] getStdErrorOfEstimates()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1, $r2;
        int $i0, $i1;
        double $d0;
        boolean $z0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r1;

        $r1 = newarray (double)[$i0];

        $i0 = 0;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label5;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>($i0, $i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label4;

        $b2 = $d0 cmpl 4.9E-324;

        if $b2 <= 0 goto label4;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        $r1[$i0] = $d0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r1[$i0] = #NaN;

        goto label3;

     label5:
        return $r1;
    }
    public double getTotalSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[1];

        return $d0;
    }
    public boolean hasIntercept()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        z0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant>;

        return z0;
    }
